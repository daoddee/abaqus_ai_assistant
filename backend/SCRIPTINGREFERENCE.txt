Abaqus Scripting Reference Guide


Contents
Trademarks and Legal Notices....................................................................................27
What's New....................................................................................................................28
Abaqus Scripting Reference Guide............................................................................32
Python commands........................................................................................................33
Abaqus/CAE Display Preferences commands................................................................................35
caePrefsAccess module............................................................................................................................36
CaeGuiPrefs object...................................................................................................................................39
CaeKerPrefs object...................................................................................................................................41
Adaptivity commands......................................................................................................................43
AdaptiveMeshConstraint object.................................................................................................................44
AdaptiveMeshConstraintState object........................................................................................................47
AdaptiveMeshControl object......................................................................................................................48
AdaptiveMeshDomain object.....................................................................................................................51
AdaptivityIteration object...........................................................................................................................53
AdaptivityProcess object...........................................................................................................................55
DisplacementAdaptiveMeshConstraint object...........................................................................................57
DisplacementAdaptiveMeshConstraintState object...................................................................................61
ErrorIndicatorResult object........................................................................................................................63
Model object..............................................................................................................................................64
RemeshingRule object..............................................................................................................................65
RuleResult object......................................................................................................................................69
VelocityAdaptiveMeshConstraint object....................................................................................................70
VelocityAdaptiveMeshConstraintState object............................................................................................73
Amplitude commands......................................................................................................................75
Amplitude object........................................................................................................................................76
ActuatorAmplitude object..........................................................................................................................77
BaselineCorrection object.........................................................................................................................79
Correlation object......................................................................................................................................81
DecayAmplitude object..............................................................................................................................82
EquallySpacedAmplitude object................................................................................................................84
ModulatedAmplitude object.......................................................................................................................86
PeriodicAmplitude object...........................................................................................................................88
PsdDefinition object...................................................................................................................................90
SmoothStepAmplitude object....................................................................................................................92
SolutionDependentAmplitude object.........................................................................................................94
SpectrumAmplitude object........................................................................................................................96
TabularAmplitude object............................................................................................................................98
UserAmplitude object..............................................................................................................................100
Animation commands....................................................................................................................102
AnimationController object......................................................................................................................103
AnimationOptions object.........................................................................................................................107
AVIOptions object....................................................................................................................................112
GIFOptions object...................................................................................................................................114
i
Contents

ImageAnimationOptions object...............................................................................................................115
ImageAnimation object............................................................................................................................116
QuickTimeOptions object........................................................................................................................118
MP4Options object..................................................................................................................................120
Movie object............................................................................................................................................122
Session object.........................................................................................................................................125
Annotation commands..................................................................................................................126
Annotation object.....................................................................................................................................127
AnnotationsToPlotArray object................................................................................................................130
Arrow object............................................................................................................................................133
Text object...............................................................................................................................................137
Viewport object........................................................................................................................................140
Assembly commands....................................................................................................................141
Assembly object......................................................................................................................................142
ConnectorOrientation object....................................................................................................................164
Feature object..........................................................................................................................................166
PartInstance object..................................................................................................................................172
ModelInstance object..............................................................................................................................182
Model object............................................................................................................................................185
Basic geometry commands...........................................................................................................187
Cell object................................................................................................................................................188
CellArray object.......................................................................................................................................192
Edge object.............................................................................................................................................197
EdgeArray object.....................................................................................................................................202
Face object..............................................................................................................................................208
FaceArray object......................................................................................................................................215
IgnoredEdge object.................................................................................................................................221
IgnoredEdgeArray object.........................................................................................................................223
IgnoredVertex object...............................................................................................................................226
IgnoredVertexArray object.......................................................................................................................227
InterestingPoint object.............................................................................................................................230
ModelDot object......................................................................................................................................231
ReferencePoint object.............................................................................................................................232
Transform object......................................................................................................................................233
Vertex object............................................................................................................................................234
VertexArray object...................................................................................................................................236
Beam Section profile commands..................................................................................................241
Profile object............................................................................................................................................242
ArbitraryProfile object..............................................................................................................................243
BoxProfile object......................................................................................................................................245
ChannelProfile object..............................................................................................................................247
CircularProfile object...............................................................................................................................249
GeneralizedProfile object........................................................................................................................251
HatProfile object......................................................................................................................................253
HexagonalProfile object...........................................................................................................................255
IProfile object...........................................................................................................................................257
LProfile object..........................................................................................................................................259
PipeProfile object....................................................................................................................................261
Abaqus Scripting Reference Guide
ii
Contents

RectangularProfile object........................................................................................................................263
TProfile object.........................................................................................................................................265
TrapezoidalProfile object.........................................................................................................................267
Boundary Condition commands....................................................................................................269
BoundaryCondition object.......................................................................................................................271
AccelerationBaseMotionBC object..........................................................................................................274
AccelerationBaseMotionBCState object..................................................................................................277
AccelerationBC object.............................................................................................................................278
AccelerationBCState object.....................................................................................................................282
AcousticPressureBC object.....................................................................................................................284
AcousticPressureBCState object............................................................................................................287
BoundaryConditionState object...............................................................................................................289
ConcentrationBC object..........................................................................................................................290
ConcentrationBCState object..................................................................................................................293
ConnAccelerationBC object....................................................................................................................295
ConnAccelerationBCState object............................................................................................................299
ConnDisplacementBC object..................................................................................................................301
ConnDisplacementBCState object..........................................................................................................305
ConnVelocityBC object............................................................................................................................307
ConnVelocityBCState object....................................................................................................................311
DisplacementBaseMotionBC object........................................................................................................313
DisplacementBaseMotionBCState object................................................................................................316
DisplacementBC object...........................................................................................................................317
DisplacementBCState object...................................................................................................................321
ElectricPotentialBC object.......................................................................................................................323
ElectricPotentialBCState object...............................................................................................................326
EulerianBC object....................................................................................................................................328
EulerianBCState object...........................................................................................................................331
EulerianMotionBC object.........................................................................................................................333
EulerianMotionBCState object................................................................................................................341
FluidCavityPressureBC object.................................................................................................................344
FluidCavityPressureBCState object........................................................................................................347
MagneticVectorPotentialBC object..........................................................................................................349
MaterialFlowBC object............................................................................................................................352
MaterialFlowBCState object....................................................................................................................355
PorePressureBC object...........................................................................................................................357
PorePressureBCState object...................................................................................................................360
RetainedNodalDofsBC object..................................................................................................................362
SecondaryBaseBC object.......................................................................................................................365
SecondaryBaseBCState object...............................................................................................................367
SubmodelBC object.................................................................................................................................368
SubmodelBCState object........................................................................................................................372
TemperatureBC object.............................................................................................................................374
TemperatureBCState object....................................................................................................................377
TypeBC object.........................................................................................................................................379
TypeBCState object.................................................................................................................................387
VelocityBaseMotionBC object..................................................................................................................389
VelocityBaseMotionBCState object.........................................................................................................392
iii
Abaqus Scripting Reference Guide
Contents

VelocityBC object.....................................................................................................................................393
VelocityBCState object............................................................................................................................397
Calibration commands..................................................................................................................399
Calibration object.....................................................................................................................................400
Behavior object........................................................................................................................................401
DataSet object.........................................................................................................................................408
Canvas commands........................................................................................................................410
AttributeColorMap object.........................................................................................................................411
DrawingArea object.................................................................................................................................414
Layer object.............................................................................................................................................415
Viewport object........................................................................................................................................417
ImageOptions object...............................................................................................................................433
MovieOptions object................................................................................................................................435
Highlight commands................................................................................................................................437
Connector commands...................................................................................................................439
ConnectorBehaviorOption object............................................................................................................440
CDCTerm object......................................................................................................................................441
ConnectorDamage object........................................................................................................................444
ConnectorDamping object.......................................................................................................................449
ConnectorElasticity object.......................................................................................................................453
ConnectorFailure object..........................................................................................................................457
ConnectorFriction object..........................................................................................................................459
ConnectorLock object..............................................................................................................................463
ConnectorOptions object.........................................................................................................................465
ConnectorPlasticity object.......................................................................................................................468
ConnectorPotential object.......................................................................................................................472
ConnectorStop object..............................................................................................................................475
DerivedComponent object.......................................................................................................................477
TangentialBehavior object.......................................................................................................................479
Constraint commands...................................................................................................................482
Constraint object.....................................................................................................................................483
AdjustPoints object..................................................................................................................................485
Coupling object........................................................................................................................................487
DisplayBody object..................................................................................................................................490
EmbeddedRegion object.........................................................................................................................492
Equation object........................................................................................................................................494
MultipointConstraint object......................................................................................................................496
RigidBody object.....................................................................................................................................498
ShellSolidCoupling object........................................................................................................................500
Tie object.................................................................................................................................................502
CustomKernel module...................................................................................................................505
CommandRegister object........................................................................................................................506
RepositorySupport object........................................................................................................................507
RegisteredDictionary object....................................................................................................................509
RegisteredList object...............................................................................................................................511
RegisteredTuple object............................................................................................................................512
Datum commands.........................................................................................................................513
Datum object...........................................................................................................................................514
Abaqus Scripting Reference Guide
iv
Contents

DatumAxis object....................................................................................................................................515
DatumCsys object...................................................................................................................................516
DatumPlane object..................................................................................................................................518
DatumPoint object...................................................................................................................................519
Display Group commands.............................................................................................................520
DisplayGroup object................................................................................................................................521
DisplayGroupInstance object...................................................................................................................525
DisplayGroupInstanceRepository object.................................................................................................527
Leaf object...............................................................................................................................................528
LeafFromConstraintNames object...........................................................................................................529
LeafFromDatums object..........................................................................................................................530
LeafFromDisplayGroup object.................................................................................................................531
LeafFromElementLabels object...............................................................................................................532
LeafFromElementSets object..................................................................................................................533
LeafFromElementVarRange object.........................................................................................................534
LeafFromGeometry object.......................................................................................................................535
LeafFromInstance object.........................................................................................................................536
LeafFromInstanceElementLabels object.................................................................................................537
LeafFromInstanceNodeLabels object......................................................................................................538
LeafFromMeshElementLabels object......................................................................................................539
LeafFromMeshNodeLabels object...........................................................................................................540
LeafFromMeshSurfaceSets object..........................................................................................................541
LeafFromModelElemLabels object..........................................................................................................542
LeafFromModelNodeLabels object..........................................................................................................544
LeafFromNodeLabels object...................................................................................................................545
LeafFromNodeSets object.......................................................................................................................546
LeafFromNodeVarRange object..............................................................................................................547
LeafFromOdbElementLayups object.......................................................................................................548
LeafFromOdbElementMaterials object....................................................................................................549
LeafFromOdbElementPick object............................................................................................................550
LeafFromOdbElementPlies object...........................................................................................................551
LeafFromOdbElementSections object.....................................................................................................552
LeafFromOdbElementTypes object.........................................................................................................553
LeafFromOdbNodePick object................................................................................................................554
LeafFromOdbEdgePick object.................................................................................................................555
LeafFromPartElementLabels object........................................................................................................556
LeafFromPartInstance object..................................................................................................................557
LeafFromPartNodeLabels object.............................................................................................................558
LeafFromReferencePoint object..............................................................................................................559
LeafFromSets object...............................................................................................................................560
LeafFromSurfaceSets object...................................................................................................................561
LeafFromSurfaceVarRange object..........................................................................................................562
Display Options commands...........................................................................................................563
AssemblyDisplayOptions object..............................................................................................................564
BCDisplayOptions object.........................................................................................................................568
ConstraintDisplayOptions object.............................................................................................................570
EngineeringFeatureDisplayOptions object..............................................................................................571
PredefinedFieldDisplayOptions object.....................................................................................................573
v
Abaqus Scripting Reference Guide
Contents

GeometryDisplayOptions object..............................................................................................................574
GeometricRestrictionDisplayOptions object............................................................................................576
GraphicsInfo object..................................................................................................................................578
GraphicsOptions object...........................................................................................................................579
InteractionDisplayOptions object.............................................................................................................589
Light object..............................................................................................................................................591
LightOptions object..................................................................................................................................593
LoadDisplayOptions object......................................................................................................................596
MeshDisplayOptions object.....................................................................................................................599
OptimizationTaskDisplayOptions object..................................................................................................601
PartDisplayOptions object.......................................................................................................................602
StopConditionDisplayOptions object.......................................................................................................604
SymbolDisplayOptions object..................................................................................................................605
ViewportAnnotationOptions object..........................................................................................................607
Edit mesh commands....................................................................................................................610
Assembly object......................................................................................................................................611
Part object...............................................................................................................................................618
MeshEditOptions object..........................................................................................................................632
Engineering Feature commands...................................................................................................633
EngineeringFeature object......................................................................................................................634
AssembledFastener object......................................................................................................................636
ContourIntegral object.............................................................................................................................638
Crack object.............................................................................................................................................641
DebondVCCT object...............................................................................................................................642
DiscreteFastener object...........................................................................................................................644
Fastener object........................................................................................................................................646
HeatCapacitance object..........................................................................................................................647
Inertia object............................................................................................................................................649
NonstructuralMass object........................................................................................................................650
PointFastener object................................................................................................................................652
PointMassInertia object...........................................................................................................................656
SpringDashpot object..............................................................................................................................659
SpringDashpotToGround object..............................................................................................................660
TwoPointSpringDashpot object................................................................................................................662
XFEMCrack object...................................................................................................................................665
Imperfection object..................................................................................................................................668
FileImperfection object............................................................................................................................669
InputImperfection object..........................................................................................................................671
DataImperfection object...........................................................................................................................673
Feature commands.......................................................................................................................675
Feature object..........................................................................................................................................676
FeatureOptions object.............................................................................................................................718
Field commands............................................................................................................................719
Field object..............................................................................................................................................720
AnalyticalField object...............................................................................................................................721
DataTable object......................................................................................................................................722
DiscreteField object.................................................................................................................................723
ExpressionField object............................................................................................................................726
Abaqus Scripting Reference Guide
vi
Contents

MappedField object.................................................................................................................................728
OdbMeshRegionData object...................................................................................................................732
Field Report commands................................................................................................................738
FieldReportOptions object.......................................................................................................................739
FreeBodyReportOptions object...............................................................................................................741
OdbFieldVarList object............................................................................................................................742
OdbModelFieldVarList object..................................................................................................................743
writeFieldReport......................................................................................................................................744
writeFreeBodyReport..............................................................................................................................746
Filter commands............................................................................................................................747
Filter object..............................................................................................................................................748
ButterworthFilter object...........................................................................................................................749
Chebyshev1Filter object..........................................................................................................................751
Chebyshev2Filter object..........................................................................................................................753
OperatorFilter object................................................................................................................................755
Input File Parser commands.........................................................................................................757
InputFile object........................................................................................................................................758
Keyword object........................................................................................................................................760
AbaqusNDarray object............................................................................................................................761
Interaction commands...................................................................................................................762
Interaction object.....................................................................................................................................765
AcousticImpedance object......................................................................................................................768
AcousticImpedanceProp object...............................................................................................................771
AcousticImpedanceState object..............................................................................................................773
ActuatorSensor object.............................................................................................................................774
ActuatorSensorProp object.....................................................................................................................776
ActuatorSensorState object.....................................................................................................................778
CavityRadiation object.............................................................................................................................779
CavityRadiationProp object.....................................................................................................................786
CavityRadiationState object....................................................................................................................788
CohesiveBehavior object.........................................................................................................................790
ConcentratedFilmCondition object..........................................................................................................793
ConcentratedFilmConditionState object..................................................................................................796
ConcentratedRadiationToAmbient object................................................................................................798
ConcentratedRadiationToAmbientState object........................................................................................801
ContactControl object..............................................................................................................................803
ContactDamage object............................................................................................................................804
ContactDamping object...........................................................................................................................810
ContactExp object...................................................................................................................................813
ContactInitialization object.......................................................................................................................818
ContactMassScalingExp object...............................................................................................................819
ContactProperty object............................................................................................................................821
ContactPropertyAssignment object.........................................................................................................823
ContactStabilization object......................................................................................................................826
ContactStd object....................................................................................................................................827
ContactTangentialBehavior object...........................................................................................................833
CyclicSymmetry object............................................................................................................................837
CyclicSymmetryState object....................................................................................................................841
vii
Abaqus Scripting Reference Guide
Contents

ElasticFoundation object.........................................................................................................................843
ElasticFoundationState object.................................................................................................................845
ExpContactControl object........................................................................................................................846
ExpInitialization object.............................................................................................................................848
FilmCondition object................................................................................................................................850
FilmConditionProp object........................................................................................................................853
FilmConditionState object.......................................................................................................................855
FluidCavity object....................................................................................................................................857
FluidCavityProperty object......................................................................................................................859
FluidCavityState object............................................................................................................................863
FluidExchangeActivation object...............................................................................................................864
FluidExchangeActivationState object......................................................................................................866
FluidExchange object..............................................................................................................................868
FluidExchangeProperty object................................................................................................................870
FluidExchangeState object......................................................................................................................873
FluidInflatorActivation object....................................................................................................................874
FluidInflatorActivationState object...........................................................................................................876
FluidInflator object...................................................................................................................................877
FluidInflatorProperty object.....................................................................................................................879
FluidInflatorState object...........................................................................................................................882
FractureCriterion object...........................................................................................................................883
GapElectricalConductance object...........................................................................................................886
GapHeatGeneration object......................................................................................................................889
GeometricProperties object.....................................................................................................................891
IncidentWave object................................................................................................................................893
IncidentWaveProperty object...................................................................................................................896
IncidentWaveState object........................................................................................................................901
InitializationAssignment object................................................................................................................902
InteractionProperty object.......................................................................................................................904
InteractionState object.............................................................................................................................905
MainSecondaryAssignment object..........................................................................................................906
Model object............................................................................................................................................908
ModelChange object...............................................................................................................................911
NormalBehavior object............................................................................................................................914
PolarityAssignments object.....................................................................................................................917
PressurePenetration object.....................................................................................................................919
PressurePenetrationState object.............................................................................................................922
Radiation object.......................................................................................................................................924
RadiationToAmbient object......................................................................................................................926
RadiationToAmbientState object.............................................................................................................929
RegionPairs object..................................................................................................................................931
SelfContactExp object.............................................................................................................................932
SelfContactExpState object.....................................................................................................................934
SelfContactStd object..............................................................................................................................936
SelfContactStdState object.....................................................................................................................939
SlidingFormulationAssignment object.....................................................................................................940
slidingTransitionAssignments object........................................................................................................942
SmoothingAssignment object..................................................................................................................944
Abaqus Scripting Reference Guide
viii
Contents

StabilizationAssignment object................................................................................................................946
StdContactControl object........................................................................................................................948
StdInitialization object..............................................................................................................................951
StdStabilization object.............................................................................................................................953
StdXplCosimulation object......................................................................................................................955
StdXplCosimulationState object..............................................................................................................957
SurfaceBeamSmoothingAssignment object............................................................................................958
SurfaceCrushTriggerAssignment object..................................................................................................960
SurfaceFeatureAssignment object..........................................................................................................962
SurfaceFrictionAssignment object...........................................................................................................965
SurfaceOffsetAssignment object.............................................................................................................967
SurfaceThicknessAssignment object.......................................................................................................969
SurfaceToSurfaceContactExp object.......................................................................................................971
SurfaceToSurfaceContactStd object........................................................................................................974
SurfaceToSurfaceExpState object...........................................................................................................980
SurfaceToSurfaceStdState object............................................................................................................981
SurfaceVertexCriteriaAssignment object.................................................................................................983
ThermalConductance object...................................................................................................................985
WearProperty object................................................................................................................................988
WearSurfacePropertyAssignment object.................................................................................................990
XFEMCrackGrowth object.......................................................................................................................992
XFEMCrackGrowthState object...............................................................................................................994
Job commands..............................................................................................................................995
Job object................................................................................................................................................996
JobFromInputFile object........................................................................................................................1000
Message object.....................................................................................................................................1004
ModelJob object....................................................................................................................................1005
Queue object.........................................................................................................................................1011
Coexecution object................................................................................................................................1013
OptimizationProcess object...................................................................................................................1017
Load and Load Case commands................................................................................................1021
Load object............................................................................................................................................1023
LoadCase object...................................................................................................................................1026
LoadState object...................................................................................................................................1028
BodyCharge object................................................................................................................................1029
BodyChargeState object.......................................................................................................................1032
BodyConcentrationFlux object..............................................................................................................1033
BodyConcentrationFluxState object......................................................................................................1036
BodyCurrent object................................................................................................................................1037
BodyCurrentDensity object....................................................................................................................1040
BodyCurrentState object.......................................................................................................................1043
BodyForce object...................................................................................................................................1044
BodyForceState object..........................................................................................................................1047
BodyHeatFlux object.............................................................................................................................1049
BodyHeatFluxState object.....................................................................................................................1052
BoltLoad object......................................................................................................................................1053
BoltLoadState object.............................................................................................................................1056
ConcCharge object................................................................................................................................1058
ix
Abaqus Scripting Reference Guide
Contents

ConcConcFlux object............................................................................................................................1061
ConcCurrent object...............................................................................................................................1064
ConcCurrentState object.......................................................................................................................1067
ConcentratedChargeState object..........................................................................................................1068
ConcentratedConcentrationFluxState object.........................................................................................1069
ConcentratedForce object.....................................................................................................................1070
ConcentratedForceState object.............................................................................................................1073
ConcentratedHeatFlux object................................................................................................................1075
ConcentratedHeatFluxState object.......................................................................................................1078
ConcentratedPoreFluidState object.......................................................................................................1079
ConcPoreFluid object............................................................................................................................1080
ConnectorForce object..........................................................................................................................1083
ConnectorForceState object..................................................................................................................1086
ConnectorMoment object......................................................................................................................1088
ConnectorMomentState object..............................................................................................................1091
CoriolisForce object...............................................................................................................................1093
CoriolisForceState object......................................................................................................................1096
FluidPressurePenetration object...........................................................................................................1097
FluidPressurePenetrationState object...................................................................................................1100
Gravity object.........................................................................................................................................1102
GravityState object................................................................................................................................1105
HydrostaticFluidFlowState object..........................................................................................................1107
InertiaRelief object................................................................................................................................1108
InertiaReliefState object........................................................................................................................1111
InwardVolAccel object...........................................................................................................................1113
InwardVolAccelState object...................................................................................................................1116
LineLoad object.....................................................................................................................................1117
LineLoadState object.............................................................................................................................1120
Moment object.......................................................................................................................................1122
MomentState object..............................................................................................................................1125
PEGLoad object....................................................................................................................................1127
PEGLoadState object............................................................................................................................1130
PipePressure object..............................................................................................................................1132
PipePressureState object......................................................................................................................1135
Pressure object.....................................................................................................................................1137
PressureState object.............................................................................................................................1140
RotationalBodyForce object..................................................................................................................1142
RotationalBodyForceState object..........................................................................................................1146
ShellEdgeLoad object...........................................................................................................................1147
ShellEdgeLoadState object...................................................................................................................1150
SubmodelSB object...............................................................................................................................1151
SubmodelSBState object......................................................................................................................1154
SubstructureLoad object.......................................................................................................................1156
SubstructureLoadState object...............................................................................................................1158
SurfaceCharge object............................................................................................................................1159
SurfaceChargeState object...................................................................................................................1162
SurfaceConcentrationFlux object..........................................................................................................1163
SurfaceConcentrationFluxState object..................................................................................................1166
Abaqus Scripting Reference Guide
x
Contents

SurfaceCurrent object............................................................................................................................1167
SurfaceCurrentDensity object................................................................................................................1170
SurfaceCurrentState object...................................................................................................................1173
SurfaceHeatFlux object.........................................................................................................................1174
SurfaceHeatFluxState object.................................................................................................................1177
SurfacePoreFluid object........................................................................................................................1178
SurfacePoreFluidState object................................................................................................................1181
SurfaceTraction object...........................................................................................................................1182
SurfaceTractionState object...................................................................................................................1186
Material commands.....................................................................................................................1187
Material object.......................................................................................................................................1190
AcousticMedium object.........................................................................................................................1195
AnnealTemperature object....................................................................................................................1197
BiaxialTestData object...........................................................................................................................1199
BrittleCracking object............................................................................................................................1201
BrittleFailure object................................................................................................................................1204
BrittleShear object.................................................................................................................................1206
CapCreepCohesion object....................................................................................................................1208
CapCreepConsolidation object..............................................................................................................1211
CapHardening object.............................................................................................................................1214
CapPlasticity object...............................................................................................................................1216
CastIronCompressionHardening object................................................................................................1218
CastIronPlasticity object........................................................................................................................1220
CastIronTensionHardening object.........................................................................................................1222
ClayHardening object............................................................................................................................1224
ClayPlasticity object...............................................................................................................................1226
CombinedTestData object.....................................................................................................................1229
Concrete object.....................................................................................................................................1231
ConcreteCompressionDamage object..................................................................................................1233
ConcreteCompressionHardening object...............................................................................................1235
ConcreteDamagedPlasticity object.......................................................................................................1237
ConcreteTensionDamage object...........................................................................................................1239
ConcreteTensionStiffening object..........................................................................................................1241
Conductivity object................................................................................................................................1244
ContactArea object................................................................................................................................1247
Creep object..........................................................................................................................................1249
CrushableFoam object..........................................................................................................................1253
CrushableFoamHardening object..........................................................................................................1255
CrushStress object................................................................................................................................1257
CrushStressVelocityFactor object..........................................................................................................1259
CycledPlastic object..............................................................................................................................1261
CyclicHardening object..........................................................................................................................1263
DamageEvolution object........................................................................................................................1265
DamageInitiation object.........................................................................................................................1271
DamageStabilization object...................................................................................................................1300
DamageStabilizationCohesive object....................................................................................................1304
Damping object.....................................................................................................................................1308
DeformationPlasticity object..................................................................................................................1310
xi
Abaqus Scripting Reference Guide
Contents

Density object........................................................................................................................................1312
Depvar object........................................................................................................................................1314
DetonationPoint object..........................................................................................................................1316
Dielectric object.....................................................................................................................................1318
Diffusivity object....................................................................................................................................1321
DruckerPrager object.............................................................................................................................1324
DruckerPragerCreep object...................................................................................................................1327
DruckerPragerHardening object............................................................................................................1329
Elastic object.........................................................................................................................................1331
ElectricalConductivity object..................................................................................................................1336
Eos object..............................................................................................................................................1339
EosCompaction object..........................................................................................................................1343
Expansion object...................................................................................................................................1345
FailStrain object.....................................................................................................................................1348
FailStress object....................................................................................................................................1350
FailureRatios object...............................................................................................................................1352
FluidLeakoff object................................................................................................................................1354
GapConductance object........................................................................................................................1356
GapConvection object...........................................................................................................................1358
GapFlow object.....................................................................................................................................1360
GapRadiation object..............................................................................................................................1363
GasketMembraneElastic object.............................................................................................................1365
GasketThicknessBehavior object..........................................................................................................1367
GasketTransverseShearElastic object...................................................................................................1371
Gel object..............................................................................................................................................1373
HeatGeneration object..........................................................................................................................1375
Hyperelastic object................................................................................................................................1376
Hyperfoam object..................................................................................................................................1381
Hypoelastic object.................................................................................................................................1383
Hysteresis object...................................................................................................................................1385
InelasticHeatFraction object..................................................................................................................1387
JouleHeatFraction object.......................................................................................................................1389
LatentHeat object..................................................................................................................................1391
LowDensityFoam object........................................................................................................................1393
MagneticPermeability object..................................................................................................................1395
MeanFieldHomogenization object.........................................................................................................1398
MeanFieldInclusion object.....................................................................................................................1400
MeanFieldMatrix object.........................................................................................................................1403
MeanFieldVoid object............................................................................................................................1405
MohrCoulombHardening object.............................................................................................................1408
MohrCoulombPlasticity object...............................................................................................................1410
MoistureSwelling object.........................................................................................................................1412
MullinsEffect object................................................................................................................................1414
Ornl object.............................................................................................................................................1415
Permeability object................................................................................................................................1417
Piezoelectric object...............................................................................................................................1420
PlanarTestData object...........................................................................................................................1423
Plastic object.........................................................................................................................................1425
Abaqus Scripting Reference Guide
xii
Contents

PlasticityCorrection object.....................................................................................................................1429
PoreFluidExpansion object....................................................................................................................1431
PorousBulkModuli object.......................................................................................................................1433
PorousElastic object..............................................................................................................................1435
PorousFailureCriteria object..................................................................................................................1437
PorousMetalPlasticity object..................................................................................................................1439
Potential object......................................................................................................................................1441
PressureEffect object............................................................................................................................1443
RateDependent object...........................................................................................................................1445
Ratios object..........................................................................................................................................1448
Regularization object.............................................................................................................................1450
SaturationDependence object...............................................................................................................1452
ShearRetention object...........................................................................................................................1454
ShearTestData object............................................................................................................................1456
SimpleShearTestData object.................................................................................................................1458
Solubility object.....................................................................................................................................1460
SoretEffect object..................................................................................................................................1462
Sorption object......................................................................................................................................1464
SpecificHeat object................................................................................................................................1466
SuperElasticHardening object...............................................................................................................1468
SuperElasticHardeningModifications object..........................................................................................1470
SuperElasticity object............................................................................................................................1472
Swelling object......................................................................................................................................1474
TensileFailure object..............................................................................................................................1476
TensionCutOff object.............................................................................................................................1478
TensionStiffening object.........................................................................................................................1480
TriaxialTestData object..........................................................................................................................1482
Trs object...............................................................................................................................................1484
UniaxialTestData object.........................................................................................................................1486
UserDefinedField object........................................................................................................................1489
UserMaterial object...............................................................................................................................1490
UserOutputVariables object...................................................................................................................1492
VelocityDependence object...................................................................................................................1494
Viscoelastic object.................................................................................................................................1496
Viscosity object......................................................................................................................................1500
Viscous object.......................................................................................................................................1502
VoidNucleation object............................................................................................................................1506
VolumetricTestData object.....................................................................................................................1508
evaluateMaterial....................................................................................................................................1511
Mdb commands...........................................................................................................................1514
Mdb object.............................................................................................................................................1515
Mdb commands.....................................................................................................................................1526
Mesh commands.........................................................................................................................1528
Assembly object....................................................................................................................................1529
Part object.............................................................................................................................................1554
ElemType object....................................................................................................................................1579
MeshEdge object...................................................................................................................................1583
MeshEdgeArray object..........................................................................................................................1585
xiii
Abaqus Scripting Reference Guide
Contents

MeshElement object..............................................................................................................................1587
MeshElementArray object.....................................................................................................................1591
MesherOptions object...........................................................................................................................1597
MeshFace object...................................................................................................................................1599
MeshFaceArray object...........................................................................................................................1604
MeshNode object..................................................................................................................................1606
MeshNodeArray object..........................................................................................................................1610
MeshStats object...................................................................................................................................1616
Messaging commands................................................................................................................1617
DataObject object..................................................................................................................................1618
MonitorMgr object..................................................................................................................................1621
Model commands........................................................................................................................1625
Model object..........................................................................................................................................1626
KeywordBlock object.............................................................................................................................1634
Odb commands...........................................................................................................................1637
Odb object.............................................................................................................................................1638
AnalyticSurface object...........................................................................................................................1642
AnalyticSurfaceSegment object.............................................................................................................1643
BeamOrientation object.........................................................................................................................1644
FieldBulkData object.............................................................................................................................1645
FieldLocation object..............................................................................................................................1647
FieldOutput object.................................................................................................................................1648
FieldValue object...................................................................................................................................1662
HistoryOutput object..............................................................................................................................1665
HistoryPoint object................................................................................................................................1668
HistoryRegion object.............................................................................................................................1673
JobData object......................................................................................................................................1676
OdbAssembly object.............................................................................................................................1677
OdbDatumCsys object..........................................................................................................................1684
OdbFrame object...................................................................................................................................1689
OdbInstance object...............................................................................................................................1692
OdbLoadCase object.............................................................................................................................1701
OdbMeshElementArray object...............................................................................................................1702
OdbMeshElement object.......................................................................................................................1704
OdbMeshNodeArray object...................................................................................................................1706
OdbMeshNode object............................................................................................................................1707
OdbPart object......................................................................................................................................1708
OdbPretensionSection object................................................................................................................1717
OdbRigidBody object.............................................................................................................................1718
OdbSequenceAnalyticSurfaceSegment object......................................................................................1720
OdbSet object........................................................................................................................................1723
OdbStep object......................................................................................................................................1729
RebarOrientation object........................................................................................................................1735
ScratchOdb object.................................................................................................................................1736
SectionCategory object.........................................................................................................................1737
SectionPoint object................................................................................................................................1739
SectorDefinition object..........................................................................................................................1741
UserData object.....................................................................................................................................1742
Abaqus Scripting Reference Guide
xiv
Contents

Odb commands.....................................................................................................................................1744
Odb Display commands..............................................................................................................1749
OdbDisplay object.................................................................................................................................1750
CommonOptions object.........................................................................................................................1761
ContourOptions object...........................................................................................................................1768
DefaultOdbDisplay object......................................................................................................................1775
DisplayBodyOptions object....................................................................................................................1776
OrientationOptions object......................................................................................................................1779
SuperimposeOptions object..................................................................................................................1782
SymbolOptions object...........................................................................................................................1789
ViewCut object......................................................................................................................................1795
ViewerOptions object.............................................................................................................................1800
Optimization commands..............................................................................................................1801
OptimizationTask object........................................................................................................................1803
BeadTask object....................................................................................................................................1804
CombinedTermDesignResponse object................................................................................................1807
DesignDirection object..........................................................................................................................1810
DesignResponse object........................................................................................................................1812
DrillControl object..................................................................................................................................1813
FixedRegion object................................................................................................................................1815
FrozenArea object.................................................................................................................................1817
GeometricRestriction object..................................................................................................................1819
Growth object........................................................................................................................................1820
LocalStopCondition object.....................................................................................................................1822
ObjectiveFunction object.......................................................................................................................1824
OptimizationConstraint object...............................................................................................................1826
OptimizationObjective object.................................................................................................................1828
PenetrationCheck object........................................................................................................................1829
ShapeDemoldControl object.................................................................................................................1831
ShapeMemberSize object.....................................................................................................................1833
ShapePlanarSymmetry object...............................................................................................................1835
ShapePointSymmetry object.................................................................................................................1837
ShapeRotationalSymmetry object.........................................................................................................1839
ShapeTask object..................................................................................................................................1841
SingleTermDesignResponse object......................................................................................................1846
SizingClusterAreas object.....................................................................................................................1848
SizingCyclicSymmetry object................................................................................................................1850
SizingFrozenArea object.......................................................................................................................1852
SizingMemberSize object......................................................................................................................1854
SizingPlanarSymmetry object...............................................................................................................1856
SizingPointSymmetry object..................................................................................................................1858
SizingRotationalSymmetry object..........................................................................................................1860
SizingTask object...................................................................................................................................1862
SlideRegionControl object.....................................................................................................................1865
StampControl object..............................................................................................................................1867
StepOption object..................................................................................................................................1869
StopCondition object.............................................................................................................................1870
TopologyCyclicSymmetry object............................................................................................................1871
xv
Abaqus Scripting Reference Guide
Contents

TopologyDemoldControl object.............................................................................................................1873
TopologyMemberSize object.................................................................................................................1875
TopologyOverhangControl object..........................................................................................................1877
TopologyPlanarSymmetry object...........................................................................................................1879
TopologyPointSymmetry object.............................................................................................................1881
TopologyRibDesign object.....................................................................................................................1883
TopologyRotationalSymmetry object.....................................................................................................1885
TopologyMillingControl object................................................................................................................1887
TopologyTask object..............................................................................................................................1889
TurnControl object.................................................................................................................................1893
BeadFilter object...................................................................................................................................1895
BeadFixedRegion object.......................................................................................................................1897
BeadGrowth object................................................................................................................................1899
BeadPenetrationCheck object...............................................................................................................1901
BeadPlanarSymmetry object.................................................................................................................1903
BeadPointSymmetry object...................................................................................................................1905
BeadRotationalSymmetry object...........................................................................................................1907
Part commands...........................................................................................................................1909
Part object.............................................................................................................................................1910
Feature object........................................................................................................................................1949
AcisFile object.......................................................................................................................................1993
Partition commands....................................................................................................................1999
Path and Probe commands.........................................................................................................2000
Path object.............................................................................................................................................2001
CurrentProbeValues object...................................................................................................................2003
FreeBody object....................................................................................................................................2004
NodeQuery object.................................................................................................................................2007
ProbeOptions object..............................................................................................................................2008
ProbeReport object...............................................................................................................................2012
SelectedProbeValues object.................................................................................................................2014
Spectrum object....................................................................................................................................2015
Stream object........................................................................................................................................2016
Plot Options commands .............................................................................................................2017
BasicOptions object...............................................................................................................................2019
DGCommonOptions object...................................................................................................................2032
DGContourOptions object.....................................................................................................................2035
DisplayOptions object............................................................................................................................2037
DGDisplayBodyOptions object..............................................................................................................2038
FreeBodyOptions object........................................................................................................................2040
HistoryVariable object............................................................................................................................2043
OdbData object.....................................................................................................................................2044
OdbDataDatumCsys object...................................................................................................................2047
OdbDataElementSet object...................................................................................................................2048
OdbDataFrame object...........................................................................................................................2049
OdbDataInstance object........................................................................................................................2050
OdbDataMaterial object.........................................................................................................................2051
OdbDataNodeSet object.......................................................................................................................2052
OdbDataSection object.........................................................................................................................2053
Abaqus Scripting Reference Guide
xvi
Contents

OdbDataStep object..............................................................................................................................2054
OdbDataSurfaceSet object....................................................................................................................2055
CouplingConstraint object.....................................................................................................................2056
RigidBodyConstraint object...................................................................................................................2057
TieConstraint object..............................................................................................................................2058
MpcConstraint object.............................................................................................................................2059
OdbDiagnosticData object.....................................................................................................................2060
OdbAnalysisError object........................................................................................................................2061
OdbAnalysisWarning object..................................................................................................................2062
OdbJobTime object...............................................................................................................................2063
OdbNumericalProblemSummary object................................................................................................2064
OdbDiagnosticStep object.....................................................................................................................2065
OdbAuxiliaryData object........................................................................................................................2068
OdbDiagnosticIncrement object............................................................................................................2069
OdbDiagnosticAttempt object................................................................................................................2070
OdbContactDiagnostics object..............................................................................................................2071
OdbDisplayOptions object.....................................................................................................................2072
OptionArg object....................................................................................................................................2073
DGOrientationOptions object................................................................................................................2075
StreamOptions object............................................................................................................................2077
DGSuperimposeOptions object.............................................................................................................2079
DGSymbolOptions object......................................................................................................................2082
ViewCutOptions object..........................................................................................................................2085
DetailPlotOptions object........................................................................................................................2089
PlyStackPlotOptions object...................................................................................................................2090
MdbData object.....................................................................................................................................2093
MdbDataFrame object...........................................................................................................................2094
MdbDataInstance object........................................................................................................................2095
MdbDataStep object..............................................................................................................................2096
Plug-in registration commands....................................................................................................2097
Predefined field commands.........................................................................................................2098
PredefinedField object...........................................................................................................................2099
Field object............................................................................................................................................2101
FieldState object....................................................................................................................................2105
FluidCavityPressure object....................................................................................................................2108
IMAField object......................................................................................................................................2110
IMARegion object..................................................................................................................................2111
InitialState object...................................................................................................................................2112
KinematicHardening object...................................................................................................................2114
MaterialAssignment object....................................................................................................................2116
PredefinedFieldState object..................................................................................................................2118
Stress object..........................................................................................................................................2119
Temperature object................................................................................................................................2121
TemperatureState object.......................................................................................................................2125
Velocity object........................................................................................................................................2128
Print commands..........................................................................................................................2130
PrintOptions object................................................................................................................................2131
EpsOptions object.................................................................................................................................2133
xvii
Abaqus Scripting Reference Guide
Contents

PageSetupOptions object......................................................................................................................2135
PngOptions object.................................................................................................................................2137
PsOptions object...................................................................................................................................2138
SvgOptions object.................................................................................................................................2140
TiffOptions object..................................................................................................................................2141
Property commands....................................................................................................................2142
SectionAssignment object.....................................................................................................................2143
CompositeLayup object.........................................................................................................................2146
CompositePly object..............................................................................................................................2149
MaterialOrientation object.....................................................................................................................2151
PlyStackPlot object................................................................................................................................2156
Property assignment commands...........................................................................................................2158
Region commands......................................................................................................................2163
Assembly object....................................................................................................................................2164
Part object.............................................................................................................................................2168
Region object........................................................................................................................................2172
Set object..............................................................................................................................................2176
Surface object........................................................................................................................................2183
Skin object.............................................................................................................................................2189
Stringer object.......................................................................................................................................2191
Section commands......................................................................................................................2193
Section object........................................................................................................................................2194
AcousticInfiniteSection object................................................................................................................2195
AcousticInterfaceSection object............................................................................................................2197
BeamSection object..............................................................................................................................2199
CohesiveSection object.........................................................................................................................2203
CompositeShellSection object...............................................................................................................2205
CompositeSolidSection object...............................................................................................................2208
ConnectorSection object.......................................................................................................................2210
EulerianSection object...........................................................................................................................2214
GasketSection object............................................................................................................................2216
GeneralStiffnessSection object.............................................................................................................2218
GeometryShellSection object................................................................................................................2221
HomogeneousShellSection object........................................................................................................2225
HomogeneousSolidSection object........................................................................................................2228
LayerProperties object..........................................................................................................................2230
MembraneSection object.......................................................................................................................2232
MPCSection object................................................................................................................................2234
PEGSection object................................................................................................................................2236
RebarLayers object...............................................................................................................................2238
SectionLayer object...............................................................................................................................2240
ShellSection object................................................................................................................................2242
SolidSection object................................................................................................................................2243
SurfaceSection object............................................................................................................................2244
TransverseShearBeam object...............................................................................................................2246
TransverseShearShell object.................................................................................................................2248
TrussSection object...............................................................................................................................2250
Session commands.....................................................................................................................2252
Abaqus Scripting Reference Guide
xviii
Contents

Session object.......................................................................................................................................2253
AutoColors object..................................................................................................................................2265
Color object...........................................................................................................................................2266
Drawing object.......................................................................................................................................2267
Image object..........................................................................................................................................2276
JournalOptions object............................................................................................................................2278
MemoryReductionOptions object..........................................................................................................2279
NetworkDatabaseConnector object.......................................................................................................2280
NumberFormat object............................................................................................................................2283
Sketcher commands...................................................................................................................2285
ConstrainedSketch object......................................................................................................................2286
ConstrainedSketchConstraint object.....................................................................................................2303
ConstrainedSketchDimension object.....................................................................................................2309
ConstrainedSketcherOptions object......................................................................................................2314
ConstrainedSketchGeometry object......................................................................................................2316
ConstrainedSketchGeometryArray object.............................................................................................2324
ConstrainedSketchImageOptions object...............................................................................................2325
ConstrainedSketchOptions object.........................................................................................................2327
ConstrainedSketchParameter object.....................................................................................................2330
ConstrainedSketchVertex object...........................................................................................................2332
ConstrainedSketchVertexArray object...................................................................................................2333
Step commands (step)................................................................................................................2334
Step object............................................................................................................................................2335
AnalysisStep object...............................................................................................................................2338
AnnealStep object.................................................................................................................................2340
BuckleStep object..................................................................................................................................2344
ComplexFrequencyStep object.............................................................................................................2349
CoupledTempDisplacementStep object................................................................................................2354
CoupledThermalElectricalStructuralStep object....................................................................................2360
CoupledThermalElectricStep object......................................................................................................2366
DirectCyclicStep object.........................................................................................................................2371
EmagTimeHarmonicStep object............................................................................................................2378
ExplicitDynamicsStep object.................................................................................................................2382
FrequencyStep object............................................................................................................................2387
GeostaticStep object.............................................................................................................................2394
HeatTransferStep object........................................................................................................................2400
ImplicitDynamicsStep object.................................................................................................................2406
InitialStep object....................................................................................................................................2413
MassDiffusionStep object......................................................................................................................2415
ModalDynamicsStep object...................................................................................................................2420
RandomResponseStep object...............................................................................................................2425
ResponseSpectrumStep object.............................................................................................................2429
SoilsStep object.....................................................................................................................................2434
StaticLinearPerturbationStep object......................................................................................................2441
StaticRiksStep object............................................................................................................................2445
StaticStep object...................................................................................................................................2451
SteadyStateDirectStep object...............................................................................................................2458
SteadyStateModalStep object...............................................................................................................2462
xix
Abaqus Scripting Reference Guide
Contents

SteadyStateSubspaceStep object.........................................................................................................2467
SubspaceDynamicsStep object.............................................................................................................2472
SubstructureGenerateStep object.........................................................................................................2476
TempDisplacementDynamicsStep object..............................................................................................2482
ViscoStep object....................................................................................................................................2487
Step commands (miscellaneous)................................................................................................2493
CompositeDamping object....................................................................................................................2494
CompositeDampingComponent object..................................................................................................2495
Control object........................................................................................................................................2496
DirectDamping object............................................................................................................................2499
DirectDampingByFrequency object.......................................................................................................2500
DirectDampingByFrequencyComponent object....................................................................................2501
DirectDampingComponent object.........................................................................................................2502
EmagTimeHarmonicFrequency object..................................................................................................2503
MassScaling object...............................................................................................................................2504
RandomResponseFrequency object.....................................................................................................2505
RayleighDamping object........................................................................................................................2506
RayleighDampingByFrequency object...................................................................................................2507
RayleighDampingByFrequencyComponent object................................................................................2508
RayleighDampingComponent object.....................................................................................................2509
ResponseSpectrumComponent object..................................................................................................2510
SolverControl object..............................................................................................................................2511
SteadyStateDirectFrequency object......................................................................................................2512
SteadyStateModalFrequency object......................................................................................................2513
SteadyStateSubspaceFrequency object...............................................................................................2514
StructuralDamping object......................................................................................................................2515
StructuralDampingByFrequency object.................................................................................................2516
StructuralDampingByFrequencyComponent object..............................................................................2517
StructuralDampingComponent object...................................................................................................2518
SubstructureGenerateFrequency object................................................................................................2519
SubstructureGenerateModes object......................................................................................................2520
Step commands (output).............................................................................................................2521
DiagnosticPrint object............................................................................................................................2522
FieldOutputRequest object....................................................................................................................2524
FieldOutputRequestState object...........................................................................................................2530
HistoryOutputRequest object................................................................................................................2532
HistoryOutputRequestState object........................................................................................................2538
IntegratedOutputSection object.............................................................................................................2540
Monitor object........................................................................................................................................2542
Restart object........................................................................................................................................2544
TimePoint object....................................................................................................................................2546
Table Collection commands........................................................................................................2548
ActivateElements object........................................................................................................................2549
DataTable object....................................................................................................................................2551
ElementProgressiveActivation object....................................................................................................2552
EventSeries object................................................................................................................................2554
EventSeriesType object.........................................................................................................................2556
ParameterColumn object.......................................................................................................................2558
Abaqus Scripting Reference Guide
xx
Contents

ParameterTable object...........................................................................................................................2560
PropertyTable object..............................................................................................................................2561
PropertyTableData object......................................................................................................................2563
TableCollection object............................................................................................................................2565
Text Representation commands..................................................................................................2566
redentABQ module................................................................................................................................2567
textRepr module....................................................................................................................................2568
TextReprOptions object.........................................................................................................................2573
Utility and View commands.........................................................................................................2575
SymbolicConstant object.......................................................................................................................2576
AbaqusBoolean object..........................................................................................................................2577
Repository object...................................................................................................................................2578
BackwardCompatibility object................................................................................................................2579
User input commands...........................................................................................................................2583
Status commands..................................................................................................................................2586
Callback commands..............................................................................................................................2588
Method callback command....................................................................................................................2590
Delete object callback command...........................................................................................................2593
Upgrade script commands....................................................................................................................2595
Customization commands.....................................................................................................................2597
View object............................................................................................................................................2598
XY commands.............................................................................................................................2608
XYData object.......................................................................................................................................2609
Area object............................................................................................................................................2622
AreaStyle object....................................................................................................................................2625
Axis object.............................................................................................................................................2627
AxisData object.....................................................................................................................................2630
Chart object...........................................................................................................................................2634
CurveOptions object..............................................................................................................................2640
DefaultChartOptions object...................................................................................................................2643
DefaultPlot object..................................................................................................................................2645
Legend object........................................................................................................................................2646
LineStyle object.....................................................................................................................................2648
QuantityType object...............................................................................................................................2651
SymbolStyle object................................................................................................................................2655
TextStyle object.....................................................................................................................................2658
Title object.............................................................................................................................................2660
XYCurve object.....................................................................................................................................2662
XYPlot object.........................................................................................................................................2665
XYReportOptions object........................................................................................................................2669
Session object.......................................................................................................................................2671
writeXYReport.......................................................................................................................................2675
C++ commands.........................................................................................................2676
Amplitude commands..................................................................................................................2677
Amplitude object....................................................................................................................................2678
ActuatorAmplitude object......................................................................................................................2679
BaselineCorrection object.....................................................................................................................2681
DecayAmplitude object..........................................................................................................................2683
xxi
Abaqus Scripting Reference Guide
Contents

EquallySpacedAmplitude object............................................................................................................2685
ModulatedAmplitude object...................................................................................................................2687
PeriodicAmplitude object.......................................................................................................................2689
PsdDefinition object...............................................................................................................................2691
SmoothStepAmplitude object................................................................................................................2693
SolutionDependentAmplitude object.....................................................................................................2695
SpectrumAmplitude object....................................................................................................................2697
TabularAmplitude object........................................................................................................................2700
UserAmplitude object............................................................................................................................2702
Beam Section profile commands................................................................................................2704
Profile object..........................................................................................................................................2705
ArbitraryProfile object............................................................................................................................2706
BoxProfile object....................................................................................................................................2708
CircularProfile object.............................................................................................................................2710
GeneralizedProfile object......................................................................................................................2711
HexagonalProfile object.........................................................................................................................2713
IProfile object.........................................................................................................................................2715
LProfile object........................................................................................................................................2717
PipeProfile object..................................................................................................................................2719
RectangularProfile object......................................................................................................................2721
TProfile object.......................................................................................................................................2723
TrapezoidalProfile object.......................................................................................................................2725
Connector commands.................................................................................................................2727
ConnectorBehaviorOption object..........................................................................................................2728
CDCTerm object....................................................................................................................................2729
ConnectorDamage object......................................................................................................................2732
ConnectorDamping object.....................................................................................................................2738
ConnectorElasticity object.....................................................................................................................2742
ConnectorFailure object........................................................................................................................2746
ConnectorFriction object........................................................................................................................2748
ConnectorLock object............................................................................................................................2753
ConnectorOptions object.......................................................................................................................2755
ConnectorPlasticity object.....................................................................................................................2758
ConnectorPotential object.....................................................................................................................2763
ConnectorStop object............................................................................................................................2766
DerivedComponent object.....................................................................................................................2768
TangentialBehavior object.....................................................................................................................2770
Filter commands..........................................................................................................................2773
Filter object............................................................................................................................................2774
ButterworthFilter object.........................................................................................................................2775
Chebyshev1Filter object........................................................................................................................2777
Chebyshev2Filter object........................................................................................................................2779
OperatorFilter object..............................................................................................................................2781
Material commands.....................................................................................................................2783
Material object.......................................................................................................................................2786
AcousticMedium object.........................................................................................................................2792
AnnealTemperature object....................................................................................................................2794
BiaxialTestData object...........................................................................................................................2796
Abaqus Scripting Reference Guide
xxii
Contents

BrittleCracking object............................................................................................................................2798
BrittleFailure object................................................................................................................................2800
BrittleShear object.................................................................................................................................2802
CapCreepCohesion object....................................................................................................................2804
CapCreepConsolidation object..............................................................................................................2806
CapHardening object.............................................................................................................................2808
CapPlasticity object...............................................................................................................................2810
CastIronCompressionHardening object................................................................................................2812
CastIronPlasticity object........................................................................................................................2814
CastIronTensionHardening object.........................................................................................................2816
ClayHardening object............................................................................................................................2818
ClayPlasticity object...............................................................................................................................2820
CombinedTestData object.....................................................................................................................2822
Concrete object.....................................................................................................................................2824
ConcreteCompressionDamage object..................................................................................................2826
ConcreteCompressionHardening object...............................................................................................2828
ConcreteDamagedPlasticity object.......................................................................................................2830
ConcreteTensionDamage object...........................................................................................................2832
ConcreteTensionStiffening object..........................................................................................................2834
Conductivity object................................................................................................................................2836
ContactArea object................................................................................................................................2838
Creep object..........................................................................................................................................2840
CrushableFoam object..........................................................................................................................2842
CrushableFoamHardening object..........................................................................................................2844
CycledPlastic object..............................................................................................................................2846
CyclicHardening object..........................................................................................................................2848
DamageEvolution object........................................................................................................................2850
DamageInitiation object.........................................................................................................................2855
DamageStabilization object...................................................................................................................2881
DamageStabilizationCohesive object....................................................................................................2883
Damping object.....................................................................................................................................2885
DeformationPlasticity object..................................................................................................................2887
Density object........................................................................................................................................2889
Depvar object........................................................................................................................................2891
DetonationPoint object..........................................................................................................................2892
Dielectric object.....................................................................................................................................2894
Diffusivity object....................................................................................................................................2897
DruckerPrager object.............................................................................................................................2900
DruckerPragerCreep object...................................................................................................................2903
DruckerPragerHardening object............................................................................................................2905
Elastic object.........................................................................................................................................2907
ElectricalConductivity object..................................................................................................................2913
Eos object..............................................................................................................................................2916
EosCompaction object..........................................................................................................................2920
Expansion object...................................................................................................................................2922
FailStrain object.....................................................................................................................................2925
FailStress object....................................................................................................................................2927
FailureRatios object...............................................................................................................................2929
xxiii
Abaqus Scripting Reference Guide
Contents

FluidLeakoff object................................................................................................................................2931
GapConductance object........................................................................................................................2933
GapConvection object...........................................................................................................................2935
GapFlow object.....................................................................................................................................2937
GapRadiation object..............................................................................................................................2939
GasketMembraneElastic object.............................................................................................................2941
GasketThicknessBehavior object..........................................................................................................2943
GasketTransverseShearElastic object...................................................................................................2947
Gel object..............................................................................................................................................2949
HeatGeneration object..........................................................................................................................2951
Hyperelastic object................................................................................................................................2952
Hyperfoam object..................................................................................................................................2957
Hypoelastic object.................................................................................................................................2959
Hysteresis object...................................................................................................................................2961
InelasticHeatFraction object..................................................................................................................2962
JouleHeatFraction object.......................................................................................................................2963
LatentHeat object..................................................................................................................................2964
LowDensityFoam object........................................................................................................................2965
MagneticPermeability object..................................................................................................................2967
MohrCoulombHardening object.............................................................................................................2970
MohrCoulombPlasticity object...............................................................................................................2972
MoistureSwelling object.........................................................................................................................2974
MullinsEffect object................................................................................................................................2976
Ornl object.............................................................................................................................................2977
Permeability object................................................................................................................................2979
Piezoelectric object...............................................................................................................................2982
PlanarTestData object...........................................................................................................................2985
Plastic object.........................................................................................................................................2987
PoreFluidExpansion object....................................................................................................................2991
PorousBulkModuli object.......................................................................................................................2993
PorousElastic object..............................................................................................................................2995
PorousFailureCriteria object..................................................................................................................2997
PorousMetalPlasticity object..................................................................................................................2998
Potential object......................................................................................................................................3000
PressureEffect object............................................................................................................................3002
RateDependent object...........................................................................................................................3004
Ratios object..........................................................................................................................................3006
Regularization object.............................................................................................................................3008
SaturationDependence object...............................................................................................................3009
ShearRetention object...........................................................................................................................3010
ShearTestData object............................................................................................................................3012
SimpleShearTestData object.................................................................................................................3014
Solubility object.....................................................................................................................................3015
SoretEffect object..................................................................................................................................3017
Sorption object......................................................................................................................................3019
SpecificHeat object................................................................................................................................3021
SuperElasticHardening object...............................................................................................................3023
SuperElasticHardeningModifications object..........................................................................................3024
Abaqus Scripting Reference Guide
xxiv
Contents

SuperElasticity object............................................................................................................................3026
Swelling object......................................................................................................................................3028
TensileFailure object..............................................................................................................................3030
TensionCutOff object.............................................................................................................................3032
TensionStiffening object.........................................................................................................................3034
TriaxialTestData object..........................................................................................................................3036
Trs object...............................................................................................................................................3038
UniaxialTestData object.........................................................................................................................3040
UserDefinedField object........................................................................................................................3042
UserMaterial object...............................................................................................................................3043
UserOutputVariables object...................................................................................................................3045
VelocityDependence object...................................................................................................................3046
Viscoelastic object.................................................................................................................................3047
Viscosity object......................................................................................................................................3051
Viscous object.......................................................................................................................................3053
VoidNucleation object............................................................................................................................3055
VolumetricTestData object.....................................................................................................................3057
Odb commands...........................................................................................................................3059
Odb object.............................................................................................................................................3060
AnalyticSurface object...........................................................................................................................3064
AnalyticSurfaceSegment object.............................................................................................................3065
BeamOrientation object.........................................................................................................................3066
FieldBulkData object.............................................................................................................................3067
FieldLocation object..............................................................................................................................3070
FieldOutput object.................................................................................................................................3071
FieldValue object...................................................................................................................................3092
HistoryOutput object..............................................................................................................................3096
HistoryPoint object................................................................................................................................3099
HistoryRegion object.............................................................................................................................3104
JobData object......................................................................................................................................3107
OdbAssembly object.............................................................................................................................3108
OdbDatumCsys object..........................................................................................................................3115
OdbFrame object...................................................................................................................................3119
OdbInstance object...............................................................................................................................3123
OdbLoadCase object.............................................................................................................................3134
OdbMeshElement object.......................................................................................................................3135
OdbMeshNode object............................................................................................................................3137
OdbPart object......................................................................................................................................3138
OdbPretensionSection object................................................................................................................3147
OdbRigidBody object.............................................................................................................................3148
OdbSequenceAnalyticSurfaceSegment object......................................................................................3149
OdbSet object........................................................................................................................................3152
OdbStep object......................................................................................................................................3160
RebarOrientation object........................................................................................................................3166
SectionCategory object.........................................................................................................................3167
SectionPoint object................................................................................................................................3169
SectorDefinition object..........................................................................................................................3171
UserData object.....................................................................................................................................3172
xxv
Abaqus Scripting Reference Guide
Contents

UserXYData object................................................................................................................................3175
Top level commands..............................................................................................................................3177
Property and Section commands................................................................................................3184
SectionAssignment object.....................................................................................................................3185
Section object........................................................................................................................................3186
AcousticInfiniteSection object................................................................................................................3187
AcousticInterfaceSection object............................................................................................................3189
BeamSection object..............................................................................................................................3190
CohesiveSection object.........................................................................................................................3194
CompositeShellSection object...............................................................................................................3196
CompositeSolidSection object...............................................................................................................3199
ConnectorSection object.......................................................................................................................3201
EulerianSection object...........................................................................................................................3206
GasketSection object............................................................................................................................3207
GeneralStiffnessSection object.............................................................................................................3209
GeometryShellSection object................................................................................................................3212
HomogeneousShellSection object........................................................................................................3214
HomogeneousSolidSection object........................................................................................................3217
LayerProperties object..........................................................................................................................3218
MembraneSection object.......................................................................................................................3220
MPCSection object................................................................................................................................3222
PEGSection object................................................................................................................................3224
RebarLayers object...............................................................................................................................3226
SectionLayer object...............................................................................................................................3227
ShellSection object................................................................................................................................3229
SolidSection object................................................................................................................................3230
SurfaceSection object............................................................................................................................3231
TransverseShearBeam object...............................................................................................................3233
TransverseShearShell object.................................................................................................................3235
TrussSection object...............................................................................................................................3236
Infrastructure commands............................................................................................................3237
BaseException object............................................................................................................................3238
Repository object...................................................................................................................................3239
RepositoryIterator object.......................................................................................................................3241
Sequence object....................................................................................................................................3244
String object..........................................................................................................................................3248
Union object..........................................................................................................................................3250
Abaqus Scripting Reference Guide
xxvi
Contents

Trademarks and Legal Notices
Trademarks
Abaqus, 3DEXPERIENCE
®, the 3DS logo, the Compass icon, IFWE, 3DEXCITE, 3DVIA, BIOVIA, CATIA,
CENTRIC PLM, DELMIA, ENOVIA, GEOVIA, MEDIDATA, NETVIBES, OUTSCALE, SIMULIA and
SOLIDWORKS are commercial trademarks or registered trademarks of Dassault Systèmes, a European company
(Societas Europaea) incorporated under French law, and registered with the Versailles trade and companies
registry under number 322 306 440, or its subsidiaries in the United States and/or other countries. All other
trademarks are owned by their respective owners. Use of any Dassault Systèmes or its subsidiaries trademarks
is subject to their express written approval.
Legal Notices
Abaqus and this documentation may be used or reproduced only in accordance with the terms of the software
license agreement signed by the customer, or, absent such agreement, the then current software license agreement
to which the documentation relates.
This documentation and the software described in this documentation are subject to change without prior notice.
Dassault Systèmes or its Afﬁliates shall not be responsible for the consequences of any errors or omissions that
may appear in this documentation.
© Dassault Systèmes Americas Corp., 2025.
For a full list of the third-party software contained in this release, please go to the Legal Notices in the Abaqus
2025 HTML documentation, which can be obtained from a documentation installation, or in the SIMULIA
Established Products 2025 Program Directory, which is available on www.3ds.com.
27
Trademarks and Legal Notices

What's New
This page describes recent changes in Abaqus Scripting Reference.
2025 FD01
Animation File Formats
You can use the new MP4Options and GIFOptions objects in the Animation commands to save and load animations
in MP4 and animated GIF formats.
Beneﬁts: New ﬁle formats offer improved compatibility with modern media players and editing software, as
well as HTML5 and third-party applications. File size can be signiﬁcantly smaller, with no appreciable loss of
quality.
You can save MP4 animations with the MPEG-4 codec. If you have an installation of the FFmpeg program that
supports H.264 encoding on your system, you can save MP4 animations using the H.264 codec.
For more information, see GIFOptions object, MP4Options object, Choosing the animation ﬁle format, and
Using background images and movies.
2025 GA
Python Interactions Commands: FluidExchangeActivation Object
The FluidExchangeActivation object is now available in the Interactions proﬁle commands.
Beneﬁts: The feature extends the capabilities of the Interactions commands.
For more information, see FluidExchangeActivation object.
Python Interactions Commands: FluidExchangeActivationState Object
The FluidExchangeActivationState object is now available in the Interactions proﬁle commands.
Beneﬁts: The feature extends the capabilities of the Interactions commands.
For more information, see FluidExchangeActivationState object.
Python Interactions Commands: FluidInflator Object
The required arguments inﬂationTimeAmplitude and massFlowAmplitude are no longer available in the
FluidInﬂator object.
Beneﬁts: The functionality was extended, with these arguments appropriately available in the
FluidInﬂatorActivation object instead.
For more information, see FluidInﬂator object.
Python Interactions Commands: FluidInflatorActivation Object
Abaqus Scripting Reference Guide
28
What's New

The FluidInﬂatorActivation object is now available in the Interactions proﬁle commands.
Beneﬁts: The feature extends the capabilities of the Interactions commands.
For more information, see FluidInﬂatorActivation object.
Python Interactions Commands: FluidInflatorActivationState Object
The FluidInﬂatorActivationState object is now available in the Interactions commands.
Beneﬁts: The feature extends the capabilities of the Interactions commands.
For more information, see FluidInﬂatorActivationState object.
Python Interactions Commands: WearProperty Object
The WearProperty object is now available in the Interactions commands.
Beneﬁts: The feature extends the capabilities of the Interactions commands.
For more information, see WearProperty object.
Python Interactions Commands: WearSurfacePropertyAssignment Object
The WearSurfacePropertyAssignment object is now available in the Interactions commands.
Beneﬁts: The feature extends the capabilities of the Interactions commands.
For more information, see WearSurfacePropertyAssignment object.
Python Load and Load Case Commands: RotationalBodyForce Object
The new optional argument rotorDynamicloads is available in the RotationalBodyForce object.
Beneﬁts: The feature extends the capabilities of the Load and Load Case commands.
For more information, see RotationalBodyForce object.
Python Path and Probe Commands: FreeBody Objects
The method getFreeBodyData() is now available in the FreeBody objects.
Beneﬁts: The feature extends the capabilities of the Path and Probe commands.
For more information, see FreeBody object.
2024 FD03
New Method getMemberFromAll for Node and Element Sequences
There is a new Python API on node and element sequences to retrieve a member value for each item in the
sequence. This applies to MeshNodeArray, MeshElementArray, MeshFaceArray, ODBMeshNodeArray, and
ODBMeshElementArray.
29
Abaqus Scripting Reference Guide
What's New

Beneﬁts: Retrieving a member from a large sequence (for example, the node label for every node) is much faster
using this method than iterating over the sequence.
For more information, see MeshNodeArray object, MeshElementArray object, MeshFaceArray object,
OdbMeshNode object, and OdbMeshElement object.
2024 GA
Python 3
Abaqus Python and Abaqus/CAE are now based on Python 3.10 instead of Python 2.7.
Beneﬁts: This update brings Abaqus Python into conformance with a version of Python that is supported in the
open-source community.
For more information, see https://go.3ds.com/AbaqusPython.
Python Beam Section Profile Commands: ChannelProfile Object
The ChannelProﬁle object is now available in the Beam Section proﬁle commands.
Beneﬁts: The feature extends the capabilities of the Beam Section proﬁle commands.
For more information, see ChannelProﬁle object.
Python Beam Section Profile Commands: HatProfile Object
The HatProﬁle object is now available in the Beam Section proﬁle commands.
Beneﬁts: The feature extends the capabilities of the Beam Section proﬁle commands.
For more information, see HatProﬁle object.
Python Constraint Commands: Coupling Object
The Coupling object is now available in the Constraint commands.
Beneﬁts: The feature extends the capabilities of the Constraint commands.
For more information, see Coupling object.
Python Engineering Feature Commands: DiscreteFastener Object
The optional argument rotatonalCoupling is now available in the DiscreteFastener object.
Beneﬁts: The feature extends the capabilities of the Engineering Feature commands.
For more information, see DiscreteFastener object.
Python Interaction Commands: ContactMassScalingExp Object
The ContactMassScalingExp object is now available in the Interaction commands.
Beneﬁts: The feature extends the capabilities of the Interaction commands.
Abaqus Scripting Reference Guide
30
What's New

For more information, see ContactMassScalingExp object.
Python Job Commands: OptimizationProcess Object
The optional argument licenseType is now available in the OptimizationProcess object.
Beneﬁts: The feature extends the capabilities of the Job commands.
For more information, see ContactMassScalingExp object.
Python Odb Commands: OdbAssembly Object
The method getMassProperties is now available in the OdbAssembly object.
Beneﬁts: The feature extends the capabilities of the Odb commands.
For more information, see OdbAssembly object.
Python Optimization Commands: SingleTermDesignResponse Object
The optional argument stepOperation is no longer available in the SingleTermDesignResponse object.
Beneﬁts: The functionality was removed from the Optimization commands: SingleTermDesignResponse object.
For more information, see SingleTermDesignResponse object.
Python Section Commands: BeamSection Object
The optional argument beamSectionOffset is now available in the BeamSection object.
Beneﬁts: The feature extends the capabilities of the Section commands.
For more information, see BeamSection object.
Python Step Commands (Step): StaticLinearPerturbationStep Object
The optional arguments solutionTechnique, gapDistance, and scaleFactor are now available in the
StaticLinearPerturbationStep object.
Beneﬁts: The feature extends the capabilities of the Step commands (step).
For more information, see StaticLinearPerturbationStep object.
Python XY Commands: Session Object
The optional argument useMaxStressValue is now available in the Session object.
Beneﬁts: The feature extends the capabilities of the XY commands.
For more information, see Session object.
31
Abaqus Scripting Reference Guide
What's New

Abaqus Scripting Reference Guide
The Abaqus Scripting Reference Guide contains a complete description of each command in the Abaqus Scripting
Interface.
This guide is a part of the Abaqus
® documentation collection, which describes all the capabilities of the Abaqus ﬁnite
element analysis technology used in SIMULIA
® applications.
Abaqus Scripting Reference Guide
32
Abaqus Scripting Reference Guide

Python commands
Python commands are used to read and write data from an output database.
In this section:
•
Abaqus/CAE Display Preferences commands
•
Adaptivity commands
•
Amplitude commands
•
Animation commands
•
Annotation commands
•
Assembly commands
•
Basic geometry commands
•
Beam Section profile commands
•
Boundary Condition commands
•
Calibration commands
•
Canvas commands
•
Connector commands
•
Constraint commands
•
CustomKernel module
•
Datum commands
•
Display Group commands
•
Display Options commands
•
Edit mesh commands
•
Engineering Feature commands
•
Feature commands
•
Field commands
•
Field Report commands
•
Filter commands
•
Input File Parser commands
•
Interaction commands
•
Job commands
•
Load and Load Case commands
•
Material commands
•
Mdb commands
•
Mesh commands
•
Messaging commands
•
Model commands
•
Odb commands
•
Odb Display commands
•
Optimization commands
•
Part commands
•
Partition commands
33
Python commands

•
Path and Probe commands
•
Plot Options commands
•
Plug-in registration commands
•
Predefined field commands
•
Print commands
•
Property commands
•
Region commands
•
Section commands
•
Session commands
•
Sketcher commands
•
Step commands (step)
•
Step commands (miscellaneous)
•
Step commands (output)
•
Table Collection commands
•
Text Representation commands
•
Utility and View commands
•
XY commands
Abaqus Scripting Reference Guide
34
Python commands

Abaqus/CAE Display Preferences commands
Display preferences commands are used to edit the Abaqus/CAE preferences ﬁle, abaqus_2025.gpr.
In this section:
•
caePrefsAccess module
•
CaeGuiPrefs object
•
CaeKerPrefs object
35

caePrefsAccess module
The Python module caePrefsAccess contains functions that enable you to edit the Abaqus/CAE preferences ﬁle,
abaqus_2025.gpr.
Access
import caePrefsAccess
getGuiPrefsFileName(...)
This function enables you to retrieve the location of your abaqus_2025.gpr ﬁle.
Path
caePrefsAccess.getGuiPrefsFileName
Arguments
None.
Return value
A String with the default ﬁle name for the GUI preferences ﬁle.
getDisplayNamesInGuiPreferences(...)
The abaqus_2025.gpr ﬁle stores a separate guiPreferences record for each display that you use. This function
returns a list of every displayName recorded in the preferences ﬁle.
Path
caePrefsAccess.getDisplayNamesInGuiPreferences
Required arguments
A String that speciﬁes the path to the preferences ﬁle.
ﬁleName
Optional arguments
None.
Return value
A list of Strings of displayNames.
Exceptions
None.
Abaqus Scripting Reference Guide
36
caePrefsAccess module

printValuesList(...)
This function enables you to print all of the options and their values for a set of guiPreferences or
sessionOptions settings derived from the abaqus_2025.gpr ﬁle.
Path
caePrefsAccess.printValuesList
Required arguments
The guiPreferences object or sessionOptions object for which you want to print
options and their values.
object
Optional arguments
An Int, or SymbolicConstant UNLIMITED, that speciﬁes the depth of recursion when
accessing the attributes of object.
maxRecursionDepth
A Boolean specifying how the string representation of each option is printed. If asString
is True, printValuesList prints the str of each option; otherwise printValuesList prints
the repr of the options. The default value is False.
asString
Return value
A String displaying the path, name, and value for all of the options in the object that you select.
Exceptions
None.
openGuiPreferences(...)
This function enables you to examine and change many default behaviors in the Abaqus/CAE graphical user interface.
Abaqus stores preferences for each display you use in a separate guiPreferences section of the
abaqus_2025.gpr ﬁle.
Path
caePrefsAccess.openGuiPreferences
Required arguments
A String that speciﬁes the display for which you want to investigate GUI preferences from the
abaqus_2025.gpr ﬁle. You can retrieve the available display names in the ﬁle by using
the getDisplayNamesInGuiPreferences method.
displayName
37
Abaqus Scripting Reference Guide
caePrefsAccess module

Optional arguments
A String specifying the path to the preferences ﬁle. The openGuiPreferences method uses
this argument if you are working with a preferences ﬁle that is not at the default location.
ﬁleName
If this argument is omitted, the abaqus_2025.gpr ﬁle in your home directory is opened.
Return value
A CaeGuiPrefs object.
Exceptions
None.
openSessionOptions(...)
This function enables you to examine and change the default behavior for many session options Abaqus/CAE; that is,
the settings that you can save in Abaqus/CAE from the File->Save Display Options menu option. Abaqus stores
default session options in the sessionOptions section of the abaqus_2025.gpr ﬁle.
Path
caePrefsAccess.openSessionOptions
Required arguments
None.
Optional arguments
A String specifying the path to the preferences ﬁle. The openSessionOptions method uses this
argument if you are working with a preferences ﬁle that is not at the default location.
ﬁleName
If this argument is omitted, the abaqus_2025.gpr ﬁle in your home directory is opened.
A SymbolicConstant specifying the location of the preferences ﬁle. Possible values are:
directory
•
CURRENT to open the preferences ﬁle in the current directory (caePrefsAccess.CURRENT)
•
HOME to open the preferences ﬁle in your home directory (caePrefsAccess.HOME)
The default value is HOME. Either ﬁleName or directory must be supplied. The ﬁleName or directory
arguments are mutually exclusive.
Return value
A CaeKerPrefs object.
Exceptions
None.
Abaqus Scripting Reference Guide
38
caePrefsAccess module

CaeGuiPrefs object
The CaeGuiPrefs object contains the details of the graphical preferences in a guiPreferences section of the
abaqus_2025.gpr ﬁle.
Access
import caePrefsAccess
caePrefsAccess.openGuiPreferences(...)
save(...)
This method saves the guiPreferences section speciﬁed in the current ﬁleName.
Required arguments
None.
Optional arguments
A Boolean specifying whether Abaqus should save a numbered backup copy of the
preferences ﬁle, ﬁleName. Default is True.
backupFile
Return value
None.
Exceptions
None.
saveAs(...)
This method saves the guiPreferences settings to the speciﬁed location.
Required arguments
A String specifying the path to the preferences ﬁle.
ﬁleName
Optional arguments
None.
Return value
None.
Exceptions
None.
39
CaeGuiPrefs object

Members
The CaeGuiPrefs object has the following member:
A String specifying the path to the preferences ﬁle.
ﬁleName
Abaqus Scripting Reference Guide
40
CaeGuiPrefs object

CaeKerPrefs object
The CaeKerPrefs object contains the details of the sessionOptions.
Access
import caePrefsAccess
caePrefsAccess.openSessionOptions(...)
save(...)
This method saves the sessionOptions in the current ﬁleName.
Required arguments
None.
Optional arguments
A Boolean specifying whether save a numbered backup copy of the preferences ﬁle,
ﬁleName. Default is True.
backupFile
Return value
None.
Exceptions
None.
saveAs(...)
This method saves the sessionOptions to the speciﬁed location.
Required arguments
A String specifying the path to the preferences ﬁle.
ﬁleName
A SymbolicConstant specifying the location of the preferences ﬁle. Possible values are:
directory
•
CURRENT to open the preferences ﬁle in the current directory
(caePrefsAccess.CURRENT)
•
HOME to open the preferences ﬁle in your home directory (caePrefsAccess.HOME)
The default value is HOME. Either ﬁleName or directory must be supplied. The ﬁleName or
directory arguments are mutually exclusive.
Optional arguments
None.
41
CaeKerPrefs object

Return value
None.
Exceptions
None.
Members
The CaeKerPrefs object has the following member:
A String specifying the path to the preferences ﬁle that the CaeKerPrefs object represents.
ﬁleName
Abaqus Scripting Reference Guide
42
CaeKerPrefs object

Adaptivity commands
The Adaptivity commands are used to deﬁne objects, perform analyses, and calculate new meshes for Arbitrary
Lagrangian Eularian (ALE) adaptive smoothing (adaptive meshing) and varying topology adaptivity (adaptive
remeshing).
In this section:
•
AdaptiveMeshConstraint object
•
AdaptiveMeshConstraintState object
•
AdaptiveMeshControl object
•
AdaptiveMeshDomain object
•
AdaptivityIteration object
•
AdaptivityProcess object
•
DisplacementAdaptiveMeshConstraint object
•
DisplacementAdaptiveMeshConstraintState object
•
ErrorIndicatorResult object
•
Model object
•
RemeshingRule object
•
RuleResult object
•
VelocityAdaptiveMeshConstraint object
•
VelocityAdaptiveMeshConstraintState object
43

AdaptiveMeshConstraint object
The AdaptiveMeshConstraint object is the abstract base type for other Arbitrary Lagrangian Eularian (ALE) style
AdaptiveMeshConstraint objects. The AdaptiveMeshConstraint object has no explicit constructor. The methods and
members of the AdaptiveMeshConstraint object are common to all objects derived from the AdaptiveMeshConstraint
object.
Access
import step
mdb.models[name].adaptiveMeshConstraints[name]
deactivate(...)
This method deactivates the adaptive mesh constraint in the speciﬁed step and all subsequent steps.
Required arguments
A String specifying the name of the step in which the adaptive mesh constraint is
deactivated.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
move(...)
This method moves the adaptive mesh constraint state from one step to a different step.
Required arguments
A String specifying the name of the step from which the adaptive mesh constraint
state is moved.
fromStepName
A String specifying the name of the step to which the adaptive mesh constraint state
is moved.
toStepName
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
44
AdaptiveMeshConstraint object

Exceptions
TextError.
reset(...)
This method resets the adaptive mesh constraint state of the speciﬁed step to the state of the previous analysis step.
Required arguments
A String specifying the name of the step in which the adaptive mesh constraint state is
reset.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
resume()
This method resumes the adaptive mesh constraint that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the adaptive mesh constraint.
Arguments
None.
Return value
None.
Exceptions
None.
45
Abaqus Scripting Reference Guide
AdaptiveMeshConstraint object

delete(...)
This method allows you to delete existing adaptive mesh constraints.
Required arguments
A sequence of Ints specifying the index of each adaptive mesh constraint to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The AdaptiveMeshConstraint object can have the following members:
A String specifying the adaptive mesh constraint repository key.
name
A SymbolicConstant specifying the category of the adaptive mesh constraint. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the adaptive mesh constraint is applied.
region
None or a DatumCsys object specifying the local coordinate system of the adaptive mesh
constraint's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
46
AdaptiveMeshConstraint object

AdaptiveMeshConstraintState object
The AdaptiveMeshConstraintState object is the abstract base type for other Arbitrary Lagrangian Eularian (ALE) style
AdaptiveMeshConstraintState objects. The AdaptiveMeshConstraintState object has no explicit constructor or methods.
The members of the AdaptiveMeshConstraintState object are common to all objects derived from the
AdaptiveMeshConstraintState object.
Access
import step
mdb.models[name].steps[name].adaptiveMeshConstraintStates[name]
Members
The AdaptiveMeshConstraintState object has the following members:
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the AdaptiveMeshConstraintState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the adaptive
mesh constraint has no amplitude reference.
amplitude
47
AdaptiveMeshConstraintState object

AdaptiveMeshControl object
The AdaptiveMeshControl object is used to control various aspects of Arbitrary Lagrangian Eularian (ALE) style
adaptive smoothing and advection algorithms applied to an ALE adaptive mesh domain.
Access
import step
mdb.models[name].adaptiveMeshControls[name]
AdaptiveMeshControl(...)
This method creates an AdaptiveMeshControl object.
Path
mdb.models[name].AdaptiveMeshControl
Required arguments
A String specifying the name of the object.
name
Optional arguments
A SymbolicConstant specifying the remapping algorithm. Possible values
are FIRST_ORDER_ADVECTION and SECOND_ORDER_ADVECTION.
The default value is SECOND_ORDER_ADVECTION.
remapping
A SymbolicConstant specifying the type of smoothing algorithm to use.
Possible values are STANDARD and GEOMETRY_ENHANCED. The
default value is GEOMETRY_ENHANCED.
smoothingAlgorithm
A SymbolicConstant specifying the type of smoothing to perform. Possible
values are UNIFORM and GRADED. The default value is UNIFORM.
smoothingPriority
A Float specifying the initial geometric feature angle, 
, in degrees. Possible
values are 0° 
 180°. The default value is 30.0.
initialFeatureAngle
A Float specifying the transitional feature angle, 
, in degrees. Possible
values are 0° 
 180°. The default value is 30.0.
transitionFeatureAngle
A SymbolicConstant specifying the type of momentum advection algorithm.
Possible values are ELEMENT_CENTER_PROJECTION and
momentumAdvection
HALF_INDEX_SHIFT. The default value is
ELEMENT_CENTER_PROJECTION.
A SymbolicConstant specifying the nodal starting location to use for
remeshing. Possible values are CURRENT and PREVIOUS. The default
value is CURRENT.
meshingPredictor
Abaqus Scripting Reference Guide
48
AdaptiveMeshControl object

A Float specifying the solution dependence weight, 
. Possible values are
0.0 
 1.0. The default value is 1.0.
curvatureReﬁnement
A Float specifying the weight used by Abaqus/Explicit for the volumetric
smoothing method. The default value is 1.0.
volumetricSmoothingWeight
A Float specifying the weight for the Laplacian smoothing method. The
default value is 0.0.
laplacianSmoothingWeight
A Float specifying the weight for the equipotential smoothing method. The
default value is 0.0.
equipotentialSmoothingWeight
A Float specifying the initial geometric feature angle, 
. Possible values
are 0° 
 180°. The default value is 60.0.
meshConstraintAngle
A Float specifying the weight for the original conﬁguration projection
method. The default value is 1.0.
originalConﬁgurationProjectionWeight
A Float specifying the weight used by Abaqus/Standard for the volumetric
smoothing method. The default value is 0.0.
standardVolumetricSmoothingWeight
Return value
An AdaptiveMeshControl object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the AdaptiveMeshControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AdaptiveMeshControl  method, except
for the name argument.
Return value
None.
Exceptions
RangeError.
49
Abaqus Scripting Reference Guide
AdaptiveMeshControl object

Members
The AdaptiveMeshControl object has members with the same names and descriptions as the arguments to the
AdaptiveMeshControl  method.
Abaqus Scripting Reference Guide
50
AdaptiveMeshControl object

AdaptiveMeshDomain object
The AdaptiveMeshDomain object deﬁnes the region and controls that govern an Arbitrary Lagrangian Eularian (ALE)
style adaptive smoothing mesh domain.
Access
import step
mdb.models[name].steps[name].adaptiveMeshDomains[name]
AdaptiveMeshDomain(...)
This method creates an AdaptiveMeshDomain object.
Path
mdb.models[name].steps[name].AdaptiveMeshDomain
Required arguments
A Region object specifying the region to which the adaptive mesh domain is applied.
region
Optional arguments
A String specifying the name of an AdaptiveMeshControl object.
controls
An Int specifying the frequency in increments at which adaptive meshing will be
performed. The default value is 10.
frequency
An Int specifying the number of mesh sweeps to be performed at the beginning of the
ﬁrst step in which this adaptive mesh deﬁnition is active. The default value is 5.
initialMeshSweeps
An Int specifying the number of mesh sweeps to be performed in each adaptive mesh
increment. The default value is 1.
meshSweeps
Return value
An AdaptiveMeshDomain object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the AdaptiveMeshDomain object.
Required arguments
None.
51
AdaptiveMeshDomain object

Optional arguments
The optional arguments to setValues are the same as the arguments to the AdaptiveMeshDomain  method.
Return value
None.
Exceptions
RangeError.
Members
The AdaptiveMeshDomain object has members with the same names and descriptions as the arguments to the
AdaptiveMeshDomain  method.
Abaqus Scripting Reference Guide
52
AdaptiveMeshDomain object

AdaptivityIteration object
The AdaptivityIteration object contains information about a given iteration of the varying topology adaptivity process
(adaptive remeshing).
Access
import job
mdb.adaptivityProcesses[name].iterations[i]
AdaptivityIteration(...)
This method creates an AdaptivityIteration object.
Path
mdb.adaptivityProcesses[name].AdaptivityIteration
Required arguments
An Int specifying the sequence number for this iteration in the adaptivity process.
iteration
A String specifying the name of the job that was run for this iteration.
jobName
A String specifying the name of the model that was analyzed and remeshed in this
iteration.
modelName
A String specifying the path to the ODB ﬁle that was created for this iteration.
odbPath
An Int specifying the number of part instances which generated errors while remeshing
the model in this iteration of the adaptivity process.
remeshingErrors
Optional arguments
None.
Return value
An AdaptivityIteration object.
Exceptions
None.
Members
The AdaptivityIteration object has members with the same names and descriptions as the arguments to the
AdaptivityIteration  method.
In addition, the AdaptivityIteration object can have the following member:
53
AdaptivityIteration object

A repository of RuleResult objects specifying the calculated results from sizing functions
corresponding to the RemeshingRule objects for this iteration of an adaptivity process.
ruleResults
Abaqus Scripting Reference Guide
54
AdaptivityIteration object

AdaptivityProcess object
The AdaptivityProcess object deﬁnes a series of jobs that will be submitted for analysis. Abaqus performs adaptive
remeshing between each job.
Access
import job
mdb.adaptivityProcesses[name]
AdaptivityProcess(...)
This method creates an AdaptivityProcess object.
Path
mdb.AdaptivityProcess
Required arguments
A String specifying the name of the Adaptivity Process.
name
A ModelJob object specifying a job to be used as the prototype for all analysis jobs run by the
adaptivity process.
job
Optional arguments
An Int specifying the maximum number of analysis jobs that will be run by the Adaptivity
Process. Abaqus performs adaptive remeshing between each analysis. The default value is 3.
maxIterations
A String specifying the preﬁx to use for jobs created by the adaptivity process. An empty
string indicates that the name of the adaptivity process should be used. The default value is
an empty string.
jobPreﬁx
Return value
An AdaptivityProcess object.
Exceptions
AbaqusException.
submit(...)
This method begins the process of analysis and adaptive remeshing.
Required arguments
None.
55
AdaptivityProcess object

Optional arguments
A Boolean specifying whether to interrupt the execution of a script until the end of the
adaptive remeshing process is reached.
waitForCompletion
A Boolean specifying whether to run the adaptivity as a datacheck analysis. The default
value is False. The datacheckJob and continueJob arguments cannot both be True.
datacheckJob
A Boolean specifying whether to run the adaptivity as a continuation analysis. The default
value is False. The datacheckJob and continueJob arguments cannot both be True.
continueJob
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the AdaptivityProcess object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AdaptivityProcess  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The AdaptivityProcess object has members with the same names and descriptions as the arguments to the
AdaptivityProcess  method.
In addition, the AdaptivityProcess object can have the following members:
A SymbolicConstant specifying the status of the adaptivity process. Possible values are
SUBMITTED, RUNNING, ABORTED, TERMINATED, and COMPLETED.
status
A repository of AdaptivityIteration objects specifying the AdaptivityIteration objects received
during running the adaptivity process.
iterations
Abaqus Scripting Reference Guide
56
AdaptivityProcess object

DisplacementAdaptiveMeshConstraint object
The DisplacementAdaptiveMeshConstraint object stores the data for an Arbitrary Lagrangian Eularian (ALE) style
displacement/rotation adaptive mesh constraint.
The DisplacementAdaptiveMeshConstraint object is derived from the AdaptiveMeshConstraint object.
Access
import step
mdb.models[name].adaptiveMeshConstraints[name]
DisplacementAdaptiveMeshConstraint(...)
This method creates a DisplacementAdaptiveMeshConstraint object.
Path
mdb.models[name].DisplacementAdaptiveMeshConstraint
Required arguments
A String specifying the adaptive mesh constraint repository key.
name
A String specifying the name of the step in which the adaptive mesh constraint is
created.
createStepName
A Region object specifying the region to which the adaptive mesh constraint is applied.
region
Optional arguments
A Float or a SymbolicConstant specifying the displacement component in the 1-direction. Possible
values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
u1
Note:
Although u1, u2, u3, ur1, ur2, and ur3 are optional arguments, at least one of them must be
speciﬁed.
A Float or a SymbolicConstant specifying the displacement component in the 2-direction. Possible
values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
u2
A Float or a SymbolicConstant specifying the displacement component in the 3-direction. Possible
values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
u3
A Float or a SymbolicConstant specifying the rotational displacement component about the 1-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
ur1
A Float or a SymbolicConstant specifying the rotational displacement component about the 2-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
ur2
57
DisplacementAdaptiveMeshConstraint object

A Float or a SymbolicConstant specifying the rotational displacement component about the 3-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
ur3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the adaptive mesh constraint has no amplitude reference. The default value is
UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying the mesh motion in relation to the underlying material. Possible
values are INDEPENDENT, FOLLOW and USER_DEFINED. The default value is INDEPENDENT.
motionType
None or a DatumCsys object specifying the local coordinate system of the adaptive mesh constraint's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate
system. The default value is None.
localCsys
Return value
A DisplacementAdaptiveMeshConstraint object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing DisplacementAdaptiveMeshConstraint object in the step where it is
created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DisplacementAdaptiveMeshConstraint
method, except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing DisplacementAdaptiveMeshConstraint object in the speciﬁed
step.
Abaqus Scripting Reference Guide
58
DisplacementAdaptiveMeshConstraint object

Required arguments
A String specifying the name of the step in which the adaptive mesh constraint is
modiﬁed.
stepName
Optional arguments
A Float or a SymbolicConstant specifying the displacement component in the 1-direction. Possible
values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u1
A Float or a SymbolicConstant specifying the displacement component in the 2-direction. Possible
values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u2
A Float or a SymbolicConstant specifying the displacement component in the 3-direction. Possible
values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u3
A Float or a SymbolicConstant specifying the rotational displacement component about the 1-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur1
A Float or a SymbolicConstant specifying the rotational displacement component about the 2-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur2
A Float or a SymbolicConstant specifying the rotational displacement component about the 3-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the adaptive mesh constraint
is changed to have no amplitude reference. You should provide the amplitude argument only if it is
valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The DisplacementAdaptiveMeshConstraint object can have the following members:
A String specifying the adaptive mesh constraint repository key.
name
A SymbolicConstant specifying the category of the adaptive mesh constraint. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the adaptive mesh constraint is applied.
region
59
Abaqus Scripting Reference Guide
DisplacementAdaptiveMeshConstraint object

None or a DatumCsys object specifying the local coordinate system of the adaptive mesh
constraint's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
60
DisplacementAdaptiveMeshConstraint object

DisplacementAdaptiveMeshConstraintState object
The DisplacementAdaptiveMeshConstraintState object stores the propagating data for an Arbitrary Lagrangian Eularian
(ALE) style displacement/rotation adaptive mesh constraint in a step. One instance of this object is created internally
by the DisplacementAdaptiveMeshConstraint object for each step. The instance is also deleted internally by the
DisplacementAdaptiveMeshConstraint object.
The DisplacementAdaptiveMeshConstraintState object has no constructor or methods.
The DisplacementAdaptiveMeshConstraintState object is derived from the AdaptiveMeshConstraintState object.
Access
import step
mdb.models[name].steps[name].adaptiveMeshConstraintStates[name]
Members
The DisplacementAdaptiveMeshConstraintState object has the following members:
A Float or a Complex specifying the displacement component in the 1-direction.
u1
A Float or a Complex specifying the displacement component in the 2-direction.
u2
A Float or a Complex specifying the displacement component in the 3-direction.
u3
A Float or a Complex specifying the rotational displacement component about the 1-direction.
ur1
A Float or a Complex specifying the rotational displacement component about the 2-direction.
ur2
A Float or a Complex specifying the rotational displacement component about the 3-direction.
ur3
A SymbolicConstant specifying the propagation state of the displacement component in the
1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
u1State
A SymbolicConstant specifying the propagation state of the displacement component in the
2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
u2State
A SymbolicConstant specifying the propagation state of the displacement component in the
3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
u3State
A SymbolicConstant specifying the propagation state of the rotational displacement component
about the 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur1State
A SymbolicConstant specifying the propagation state of the rotational displacement component
about the 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur2State
A SymbolicConstant specifying the propagation state of the rotational displacement component
about the 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur3State
61
DisplacementAdaptiveMeshConstraintState object

A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the AdaptiveMeshConstraintState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the adaptive mesh
constraint has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*ADAPTIVE MESH CONSTRAINT, TYPE=DISPLACEMENT (degree of freedom: 1, 2, 3, 4, 5, or 6)
Abaqus Scripting Reference Guide
62
DisplacementAdaptiveMeshConstraintState object

ErrorIndicatorResult object
The ErrorIndicatorResult object contains result information corresponding to an error indicator variable in a
RemeshingRule object for an adaptivity iteration.
Access
import job
mdb.adaptivityProcesses[name].iterations[i].ruleResults[name]\
.indicatorResults[name]
ErrorIndicatorResult(...)
This method creates an ErrorIndicatorResult with data for an error indicator variable in a RemeshingRule for a given
adaptivity iteration.
Path
mdb.adaptivityProcesses[name].iterations[i].ruleResults[name]\
.ErrorIndicatorResult
Required arguments
A String specifying the name of the error indicator variable to which these results correspond.
name
A String-to-Float Dictionary specifying the calculated results from the sizing function
corresponding to the error indicator variable represented by this ErrorIndicatorResult.
results
Optional arguments
None.
Return value
An ErrorIndicatorResult object.
Exceptions
AbaqusException.
Members
The ErrorIndicatorResult object has members with the same names and descriptions as the arguments to the
ErrorIndicatorResult  method.
63
ErrorIndicatorResult object

Model object
The following commands operate on Model objects. For more information about the Model object, see Model object.
Access
import mesh
adaptiveRemesh(...)
This method remeshes the model using the active remesh rules in the model and the error indicator results from a
previous analysis.
Required arguments
An Odb object containing error output ﬁeld results.
odb
Optional arguments
None.
Return value
An AdaptivityIteration Object.
Exceptions
None.
Abaqus Scripting Reference Guide
64
Model object

RemeshingRule object
The RemeshingRule object controls the adaptive remeshing resizing and the error indicators written to the output
database for a speciﬁed region of the model.
Access
import mesh
mdb.models[name].remeshingRules[name]
RemeshingRule(...)
This method creates a RemeshingRule object.
Path
mdb.models[name].RemeshingRule
Required arguments
A String specifying the name of the object.
name
A String specifying the name of the step in which resizing should occur for this rule.
stepName
A sequence of Strings specifying the output request variables that Abaqus will use as
error indicators.
variables
Optional arguments
A String specifying a descriptive string for this rule. The default value is an empty string.
description
The SymbolicConstant MODEL or a Region object specifying the region in which Abaqus
will remesh and generate output. The SymbolicConstant MODEL represents the entire
applicable model. The default value is MODEL.
region
A SymbolicConstant specifying the method for calculating the new mesh sizes. The
SymbolicConstant DEFAULT indicates that Abaqus will use the default calculation method
sizingMethod
for each individual variable. Possible values are DEFAULT, UNIFORM_ERROR, and
MINIMUM_MAXIMUM. The default value is DEFAULT.
A Float specifying the target error percentage for each variable in the region. A value of
0.0 indicates that Abaqus will use automated error target reduction for the region. You use
errorTarget
the errorTarget argument when sizingMethod=UNIFORM_ERROR. The default value is
0.0.
A Float specifying the target error percentage at the location of the maximum solution value
in the region. A value of 0.0 indicates that Abaqus will use automated error target reduction
maxSolutionErrorTarget
for the region. You use the maxSolutionErrorTarget argument when
sizingMethod=MINIMUM_MAXIMUM. The default value is 0.0.
65
RemeshingRule object

A Float specifying the target error percentage at the location of the minimum solution value
in the region. A value of 0.0 indicates that Abaqus will use automated error target reduction
minSolutionErrorTarget
for the region. You use the minSolutionErrorTarget argument when
sizingMethod=MINIMUM_MAXIMUM. The default value is 0.0.
An Int specifying an indication of how much Abaqus will bias the mesh toward the location
of the maximum solution value in the region. The higher the value, the more the mesh will
meshBias
bias towards the location of the maximum solution value. You use the meshBias argument
when sizingMethod=MINIMUM_MAXIMUM. The default value is 0.0.
A Float specifying the minimum size of any single element. The default value is 0.0.
minElementSize
A Float specifying the maximum size of any single element. The default value is 0.0.
maxElementSize
A SymbolicConstant specifying the frequency with which the error indicators are saved to
the output database ﬁle (.odb). Possible values are LAST_INCREMENT and
ALL_INCREMENTS. The default value is LAST_INCREMENT.
outputFrequency
A Boolean specifying an indication of whether to use a user-supplied minimum element
size or to calculate a characteristic minimum element size. The default value is OFF.
specifyMinSize
A Boolean specifying an indication of whether to use a user-supplied maximum element
size or to calculate a characteristic maximum element size. The default value is ON.
specifyMaxSize
A SymbolicConstant or an Int specifying an indication of the upper limit on the element
growth from one remeshing iteration to the next. Possible values are DEFAULT_LIMIT
and NOT_ALLOWED. The default value is DEFAULT_LIMIT.
coarseningFactor
A SymbolicConstant or an Int specifying an indication of the upper limit on element
shrinkage from one remeshing iteration to the next. Possible values are DEFAULT_LIMIT
and NOT_ALLOWED. The default value is DEFAULT_LIMIT.
reﬁnementFactor
None or an Int specifying an approximate limit on the number of elements that will be
created during remeshing. Use None to indicate there is not upper limit. The default value
is None.
elementCountLimit
Return value
A RemeshingRule object.
Exceptions
AbaqusException.
resume()
This method resumes the remeshing rule that was previously suppressed.
Abaqus Scripting Reference Guide
66
RemeshingRule object

Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the remeshing rule. Abaqus will not remesh regions where the rules are suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the RemeshingRule object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RemeshingRule  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The RemeshingRule object has members with the same names and descriptions as the arguments to the RemeshingRule
method.
In addition, the RemeshingRule object has the following member:
67
Abaqus Scripting Reference Guide
RemeshingRule object

A Boolean specifying whether the remeshing rule is suppressed. Remeshing of the remeshing
rule's region will not occur if you suppress a rule. The default value is OFF.
suppressed
Abaqus Scripting Reference Guide
68
RemeshingRule object

RuleResult object
The RuleResult object contains result information corresponding to a RemeshingRule object for an adaptivity iteration.
Access
import job
mdb.adaptivityProcesses[name].iterations[i].ruleResults[name]
RuleResult(...)
This method creates a RuleResult with data for a RemeshingRule for a given adaptivity iteration.
Path
mdb.adaptivityProcesses[name].iterations[i].RuleResult
Required arguments
A String specifying the name of the Remeshing Rule to which these results correspond.
name
A repository of ErrorIndicatorResult objects specifying the calculated results from the
sizing function corresponding to the error indicator variables for the Remeshing Rule.
indicatorResults
An Int specifying the number of elements before remeshing in the region of the
Remeshing Rule.
numElems
An Int specifying the number of elements that were constrained to the minimum element
size by the Remeshing Rule.
minSizeElemCount
Optional arguments
A sequence of Strings specifying the error indicator variables that have satisﬁed the
Remeshing Rule.
satisﬁedVars
Return value
A RuleResult object.
Exceptions
AbaqusException.
Members
The RuleResult object has members with the same names and descriptions as the arguments to the RuleResult  method.
69
RuleResult object

VelocityAdaptiveMeshConstraint object
The VelocityAdaptiveMeshConstraint object stores the data for an Arbitrary Lagrangian Eularian (ALE) style velocity
adaptive mesh constraint.
The VelocityAdaptiveMeshConstraint object is derived from the AdaptiveMeshConstraint object.
Access
import step
mdb.models[name].adaptiveMeshConstraints[name]
VelocityAdaptiveMeshConstraint(...)
This method creates a VelocityAdaptiveMeshConstraint object.
Path
mdb.models[name].VelocityAdaptiveMeshConstraint
Required arguments
A String specifying the adaptive mesh constraint repository key.
name
A String specifying the name of the step in which the adaptive mesh constraint is
created.
createStepName
A Region object specifying the region to which the adaptive mesh constraint is applied.
region
Optional arguments
A Float or a SymbolicConstant specifying the velocity component in the 1-direction. Possible values
for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v1
Note:
Although v1, v2, v3, vr1, vr2, and vr3 are optional arguments, at least one of them must be
speciﬁed.
A Float or a SymbolicConstant specifying the velocity component in the 2-direction. Possible values
for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v2
A Float or a SymbolicConstant specifying the velocity component in the 3-direction. Possible values
for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v3
A Float or a SymbolicConstant specifying the rotational velocity component about the 1-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
vr1
A Float or a SymbolicConstant specifying the rotational velocity component about the 2-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
vr2
Abaqus Scripting Reference Guide
70
VelocityAdaptiveMeshConstraint object

A Float or a SymbolicConstant specifying the rotational velocity component about the 3-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
vr3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the adaptive mesh constraint has no amplitude reference. The default value is
UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
None or a DatumCsys object specifying the local coordinate system of the adaptive mesh constraint's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate
system. The default value is None.
localCsys
A SymbolicConstant specifying the mesh motion in relation to the underlying material. Possible
values are INDEPENDENT, FOLLOW and USER_DEFINED. The default value is INDEPENDENT.
motionType
Return value
A VelocityAdaptiveMeshConstraint object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing VelocityAdaptiveMeshConstraint object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the VelocityAdaptiveMeshConstraint  method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing VelocityAdaptiveMeshConstraint object in the speciﬁed
step.
Required arguments
A String specifying the name of the step in which the adaptive mesh constraint is
modiﬁed.
stepName
71
Abaqus Scripting Reference Guide
VelocityAdaptiveMeshConstraint object

Optional arguments
A Float or a SymbolicConstant specifying the velocity component in the 1-direction. Possible values
for the SymbolicConstant are SET and FREED.
v1
A Float or a SymbolicConstant specifying the velocity component in the 2-direction. Possible values
for the SymbolicConstant are SET and FREED.
v2
A Float or a SymbolicConstant specifying the velocity component in the 3-direction. Possible values
for the SymbolicConstant are SET and FREED.
v3
A Float or a SymbolicConstant specifying the rotational velocity component about the 1-direction.
Possible values for the SymbolicConstant are SET and FREED.
vr1
A Float or a SymbolicConstant specifying the rotational velocity component about the 2-direction.
Possible values for the SymbolicConstant are SET and FREED.
vr2
A Float or a SymbolicConstant specifying the rotational velocity component about the 3-direction.
Possible values for the SymbolicConstant are SET and FREED.
vr3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the adaptive mesh constraint
is changed to have no amplitude reference. You should provide the amplitude argument only if it is
valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The VelocityAdaptiveMeshConstraint object can have the following members:
A String specifying the adaptive mesh constraint repository key.
name
A SymbolicConstant specifying the category of the adaptive mesh constraint. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the adaptive mesh constraint is applied.
region
None or a DatumCsys object specifying the local coordinate system of the adaptive mesh
constraint's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
72
VelocityAdaptiveMeshConstraint object

VelocityAdaptiveMeshConstraintState object
The VelocityAdaptiveMeshConstraintState object stores the propagating data for an Arbitrary Lagrangian Eularian
(ALE) style velocity adaptive mesh constraint in a step. One instance of this object is created internally by the
VelocityAdaptiveMeshConstraint object for each step. The instance is also deleted internally by the
VelocityAdaptiveMeshConstraint object.
The VelocityAdaptiveMeshConstraintState object has no constructor or methods.
The VelocityAdaptiveMeshConstraintState object is derived from the AdaptiveMeshConstraintState object.
Access
import step
mdb.models[name].steps[name].adaptiveMeshConstraintStates[name]
Members
The VelocityAdaptiveMeshConstraintState object has the following members:
A Float specifying the velocity component in the 1-direction.
v1
A Float specifying the velocity component in the 2-direction.
v2
A Float specifying the velocity component in the 3-direction.
v3
A Float specifying the rotational velocity component about the 1-direction.
vr1
A Float specifying the rotational velocity component about the 2-direction.
vr2
A Float specifying the rotational velocity component about the 3-direction.
vr3
A SymbolicConstant specifying the propagation state of the velocity component in the 1-direction.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v1State
A SymbolicConstant specifying the propagation state of the velocity component in the 2-direction.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v2State
A SymbolicConstant specifying the propagation state of the velocity component in the 3-direction.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v3State
A SymbolicConstant specifying the propagation state of the rotational velocity component about
the 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
vr1State
A SymbolicConstant specifying the propagation state of the rotational velocity component about
the 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
vr2State
A SymbolicConstant specifying the propagation state of the rotational velocity component about
the 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
vr3State
73
VelocityAdaptiveMeshConstraintState object

A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the AdaptiveMeshConstraintState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the adaptive
mesh constraint has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*ADAPTIVE MESH CONSTRAINT, TYPE=VELOCITY (degree of freedom: 1, 2, 3, 4, 5, or 6)
Abaqus Scripting Reference Guide
74
VelocityAdaptiveMeshConstraintState object

Amplitude commands
Amplitude commands are used to create arbitrary time or frequency variations of load, displacement, and some
interaction attributes throughout a step using step time or throughout an analysis using total time.
In this section:
•
Amplitude object
•
ActuatorAmplitude object
•
BaselineCorrection object
•
Correlation object
•
DecayAmplitude object
•
EquallySpacedAmplitude object
•
ModulatedAmplitude object
•
PeriodicAmplitude object
•
PsdDefinition object
•
SmoothStepAmplitude object
•
SolutionDependentAmplitude object
•
SpectrumAmplitude object
•
TabularAmplitude object
•
UserAmplitude object
75

Amplitude object
The Amplitude object is the abstract base type for other Amplitude objects. The Amplitude object has no explicit
constructor. The methods and members of the Amplitude object are common to all objects derived from the Amplitude.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
Members
The Amplitude object has the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Abaqus Scripting Reference Guide
76
Amplitude object

ActuatorAmplitude object
The ActuatorAmplitude object deﬁnes an actuator amplitude curve.
The ActuatorAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
ActuatorAmplitude(...)
This method creates a ActuatorAmplitude object.
Path
mdb.models[name].ActuatorAmplitude
session.odbs[name].ActuatorAmplitude
Required arguments
A String specifying the repository key.
name
Optional arguments
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Return value
An ActuatorAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the ActuatorAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ActuatorAmplitude  method, except for
the name argument.
77
ActuatorAmplitude object

Return value
None.
Exceptions
RangeError.
Members
The ActuatorAmplitude object has members with the same names and descriptions as the arguments to the
ActuatorAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
78
ActuatorAmplitude object

BaselineCorrection object
The BaselineCorrection object modiﬁes an acceleration history to minimize the overall drift of the displacement
obtained from the time integration of the given acceleration.
Access
import amplitude
mdb.models[name].amplitudes[name].baselineCorrection
import odbAmplitude
session.odbs[name].amplitudes[name].baselineCorrection
BaselineCorrection(...)
This method creates a BaselineCorrection object.
Path
mdb.models[name].amplitudes[name].BaselineCorrection
session.odbs[name].amplitudes[name].BaselineCorrection
Required arguments
None.
Optional arguments
A sequence of Floats specifying the correction time interval end points. Possible values are
positive and monotonically increasing Floats. The default value is an empty sequence.
intervals
Return value
A BaselineCorrection object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the BaselineCorrection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BaselineCorrection  method.
Return value
None.
79
BaselineCorrection object

Exceptions
RangeError.
Members
The BaselineCorrection object has members with the same names and descriptions as the arguments to the
BaselineCorrection  method.
Corresponding analysis keywords
•
*BASELINE CORRECTION
Abaqus Scripting Reference Guide
80
BaselineCorrection object

Correlation object
A Correlation is an object used to deﬁne the cross-correlation as part of the deﬁnition of random loading.
The Correlation object is derived from the Amplitude object.
Access
import load
mdb.models[name].boundaryConditions[name].correlation[i]
Members
The Correlation object has the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the approach used in the correlation data representation. Possible
values are CORRELATED, MOVING_NOISE, UNCORRELATED, and USER. The default
value is CORRELATED.
approach
A tuple of tuples of Floats specifying the real and imaginary part of the scaling factor. If
approach=MOVING_NOISE, then data represents the noise velocity components 1, 2, and 3.
data
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP and
TOTAL. The default value is STEP.
timeSpan
81
Correlation object

DecayAmplitude object
The DecayAmplitude object deﬁnes an amplitude curve using an exponential decay.
The DecayAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
DecayAmplitude(...)
This method creates a DecayAmplitude object.
Path
mdb.models[name].DecayAmplitude
session.odbs[name].DecayAmplitude
Required arguments
A String specifying the repository key.
name
A Float specifying the constant 
.
initial
A Float specifying the coefﬁcient .
maximum
A Float specifying the starting time 
. Possible values are non-negative numbers.
start
A Float specifying the decay time 
. Possible values are non-negative numbers.
decayTime
Optional arguments
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Return value
A DecayAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the DecayAmplitude object.
Abaqus Scripting Reference Guide
82
DecayAmplitude object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DecayAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The DecayAmplitude object has members with the same names and descriptions as the arguments to the DecayAmplitude
method.
Corresponding analysis keywords
•
*AMPLITUDE
83
Abaqus Scripting Reference Guide
DecayAmplitude object

EquallySpacedAmplitude object
The EquallySpacedAmplitude object deﬁnes a list of amplitude values at ﬁxed time intervals beginning at a speciﬁed
value of time.
The EquallySpacedAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
EquallySpacedAmplitude(...)
This method creates an EquallySpacedAmplitude object.
Path
mdb.models[name].EquallySpacedAmplitude
session.odbs[name].EquallySpacedAmplitude
Required arguments
A String specifying the repository key.
name
A Float specifying the ﬁxed time interval at which the amplitude data are given. Possible
values are positive numbers.
ﬁxedInterval
A sequence of Floats specifying the amplitude values.
data
Optional arguments
A Float specifying the time at which the ﬁrst amplitude data are given. Possible values are
non-negative numbers. The default value is 0.0.
begin
The SymbolicConstant SOLVER_DEFAULT or a Float specifying the degree of smoothing.
Possible ﬂoat values are 0 smoothing  0.5. If smooth=SOLVER_DEFAULT, the default degree
of smoothing will be determined by the solver. The default value is SOLVER_DEFAULT.
smooth
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP and
TOTAL. The default value is STEP.
timeSpan
Return value
An EquallySpacedAmplitude object.
Exceptions
InvalidNameError and RangeError.
Abaqus Scripting Reference Guide
84
EquallySpacedAmplitude object

setValues(...)
This method modiﬁes the EquallySpacedAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the EquallySpacedAmplitude  method,
except for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The EquallySpacedAmplitude object has members with the same names and descriptions as the arguments to the
EquallySpacedAmplitude  method.
In addition, the EquallySpacedAmplitude object can have the following member:
A BaselineCorrection object.
baselineCorrection
Corresponding analysis keywords
•
*AMPLITUDE
85
Abaqus Scripting Reference Guide
EquallySpacedAmplitude object

ModulatedAmplitude object
The ModulatedAmplitude object deﬁnes a modulated amplitude curve.
The ModulatedAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
ModulatedAmplitude(...)
This method creates a ModulatedAmplitude object.
Path
mdb.models[name].ModulatedAmplitude
session.odbs[name].ModulatedAmplitude
Required arguments
A String specifying the repository key.
name
A Float specifying the constant 
.
initial
A Float specifying the coefﬁcient .
magnitude
A Float specifying the starting time 
. Possible values are non-negative numbers.
start
A Float specifying the circular frequency 1 (
). Possible values are positive numbers.
frequency1
A Float specifying the circular frequency 2 (
). Possible values are positive numbers.
frequency2
Optional arguments
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Return value
A ModulatedAmplitude object.
Exceptions
InvalidNameError and RangeError.
Abaqus Scripting Reference Guide
86
ModulatedAmplitude object

setValues(...)
This method modiﬁes the ModulatedAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ModulatedAmplitude  method, except
for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The ModulatedAmplitude object has members with the same names and descriptions as the arguments to the
ModulatedAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
87
Abaqus Scripting Reference Guide
ModulatedAmplitude object

PeriodicAmplitude object
The PeriodicAmplitude object deﬁnes an amplitude curve using a Fourier series.
The PeriodicAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
PeriodicAmplitude(...)
This method creates a PeriodicAmplitude object.
Path
mdb.models[name].PeriodicAmplitude
session.odbs[name].PeriodicAmplitude
Required arguments
A String specifying the repository key.
name
A Float specifying the circular frequency . Possible values are positive numbers.
frequency
A Float specifying the starting time 
. Possible values are positive numbers.
start
A Float specifying the constant 
.
a_0
A sequence of pairs of Floats specifying 
 and 
 pairs.
data
Optional arguments
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Return value
A PeriodicAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the PeriodicAmplitude object.
Abaqus Scripting Reference Guide
88
PeriodicAmplitude object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PeriodicAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The PeriodicAmplitude object has members with the same names and descriptions as the arguments to the
PeriodicAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
89
Abaqus Scripting Reference Guide
PeriodicAmplitude object

PsdDefinition object
The PsdDeﬁnition object deﬁnes the cross-spectral density frequency function for random response loading.
The PsdDeﬁnition object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
PsdDefinition(...)
This method creates a PsdDeﬁnition object.
Path
mdb.models[name].PsdDefinition
session.odbs[name].PsdDefinition
Required arguments
A String specifying the repository key.
name
A sequence of sequences of Floats specifying the real part of the frequency function, the imaginary
part of the frequency function, and the frequency or frequency band number values, depending
on the value of unitType.
data
Optional arguments
A SymbolicConstant specifying the type of units for specifying the frequency function.
FORCE implies power units. BASE implies gravity used to deﬁne base motion. DB
unitType
implies decibel units. Possible values are FORCE, BASE, and DB. The default value
is FORCE.
A Float specifying the reference gravity acceleration. This argument applies when
unitType = BASE. The default value is 1.0.
referenceGravityAcceleration
A Float specifying the reference power value, in load units squared. This argument
applies when unitType = DB. The default value is 0.0.
referenecePower
A Boolean specifying whether the frequency function is deﬁned in user subroutine
UPSD. If speciﬁed, then data is not applicable, and the unitType value must not be
DB. The default value is OFF.
user
A SymbolicConstant specifying the time span of the amplitude. Possible values are
STEP and TOTAL. The default value is STEP.
timeSpan
Abaqus Scripting Reference Guide
90
PsdDefinition object

A String specifying the name of the amplitude that describes the dynamic event used
to deﬁne the cross-spectral density frequency function. The default value is an empty
string.
amplitude
Return value
A PsdDeﬁnition object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the PsdDeﬁnition object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PsdDeﬁnition  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The PsdDeﬁnition object has members with the same names and descriptions as the arguments to the PsdDeﬁnition
method.
Corresponding analysis keywords
•
*PSD-DEFINITION
91
Abaqus Scripting Reference Guide
PsdDefinition object

SmoothStepAmplitude object
The SmoothStepAmplitude object deﬁnes an amplitude that ramps up or down smoothly from one data point to another.
The SmoothStepAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
SmoothStepAmplitude(...)
This method creates a SmoothStepAmplitude object.
Path
mdb.models[name].SmoothStepAmplitude
session.odbs[name].SmoothStepAmplitude
Required arguments
A String specifying the repository key.
name
A sequence of pairs of Floats specifying time/frequency and amplitude pairs. Possible values
for time/frequency are positive numbers.
data
Optional arguments
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Return value
A SmoothStepAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the SmoothStepAmplitude object.
Required arguments
None.
Abaqus Scripting Reference Guide
92
SmoothStepAmplitude object

Optional arguments
The optional arguments to setValues are the same as the arguments to the SmoothStepAmplitude  method, except
for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The SmoothStepAmplitude object has members with the same names and descriptions as the arguments to the
SmoothStepAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
93
Abaqus Scripting Reference Guide
SmoothStepAmplitude object

SolutionDependentAmplitude object
The SolutionDependentAmplitude object deﬁnes a solution-dependent amplitude for superplastic forming analysis.
The SolutionDependentAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
SolutionDependentAmplitude(...)
This method creates a SolutionDependentAmplitude object.
Path
mdb.models[name].SolutionDependentAmplitude
session.odbs[name].SolutionDependentAmplitude
Required arguments
A String specifying the repository key.
name
Optional arguments
A Float specifying the initial amplitude value. Possible values are those between minimum
and maximum. The default value is 1.0.
initial
A Float specifying the minimum amplitude value. Possible values are those smaller than
maximum and initial. The default value is 0.1.
minimum
A Float specifying the maximum amplitude value. Possible values are those larger than
minimum and initial. The default value is 1000.0.
maximum
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Return value
A SolutionDependentAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the SolutionDependentAmplitude object.
Abaqus Scripting Reference Guide
94
SolutionDependentAmplitude object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SolutionDependentAmplitude  method,
except for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The SolutionDependentAmplitude object has members with the same names and descriptions as the arguments to the
SolutionDependentAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
95
Abaqus Scripting Reference Guide
SolutionDependentAmplitude object

SpectrumAmplitude object
The SpectrumAmplitude object deﬁnes the spectrum of responses for displacement, velocity, or acceleration to be
used in a response spectrum analysis.
The SpectrumAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
SpectrumAmplitude(...)
This method creates a SpectrumAmplitude object.
Path
mdb.models[name].SpectrumAmplitude
session.odbs[name].SpectrumAmplitude
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the method for specifying the spectrum. Possible values are
DEFINE and CALCULATE.
method
A sequence of sequences of Floats specifying the magnitude, frequency, and damping values.
data
Optional arguments
A SymbolicConstant specifying the units used for specifying the spectrum. Possible values
are DISPLACEMENT, VELOCITY, ACCELERATION, and GRAVITY. The default value
is ACCELERATION.
speciﬁcationUnits
A SymbolicConstant specifying the units used to describe the dynamic event in the amplitude
used for the calculation. Possible values are EVENT_DISPLACEMENT, EVENT_VELOCITY,
eventUnits
EVENT_ACCELERATION, and EVENT_GRAVITY. The default value is
EVENT_ACCELERATION.
A SymbolicConstant specifying the solution method for the dynamic equations. Possible values
are ABSOLUTE_VALUE and RELATIVE_VALUE. The default value is
ABSOLUTE_VALUE.
solution
A Float specifying the implicit time increment used to calculate the spectrum. This argument
is required when the method = CALCULATE. The default value is 0.0.
timeIncrement
Abaqus Scripting Reference Guide
96
SpectrumAmplitude object

A Float specifying the acceleration due to gravity. This argument applies only when
speciﬁcationUnits = GRAVITY oreventUnits = GRAVITY. The default value is 1.0.
gravity
A Boolean specifying whether to calculate the spectrum for only the speciﬁed range of critical
damping values or a list of values. If criticalDamping = ON, the spectrum is calculated only
criticalDamping
for the speciﬁed range of critical damping values. If criticalDamping = OFF, the spectrum is
calculated for a list of damping values. The default value is OFF.
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP and
TOTAL. The default value is STEP.
timeSpan
A String specifying the name of the amplitude that describes the dynamic event used to calculate
the spectrum. The default value is an empty string.
amplitude
Return value
A SpectrumAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the SpectrumAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SpectrumAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The SpectrumAmplitude object has members with the same names and descriptions as the arguments to the
SpectrumAmplitude  method.
Corresponding analysis keywords
•
*SPECTRUM
97
Abaqus Scripting Reference Guide
SpectrumAmplitude object

TabularAmplitude object
The TabularAmplitude object deﬁnes an amplitude curve as a table of values at convenient points on the time scale.
The TabularAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
TabularAmplitude(...)
This method creates a TabularAmplitude object.
Path
mdb.models[name].TabularAmplitude
session.odbs[name].TabularAmplitude
Required arguments
A String specifying the repository key.
name
A sequence of pairs of Floats specifying time/frequency and amplitude pairs. Possible values
for time/frequency are positive numbers.
data
Optional arguments
The SymbolicConstant SOLVER_DEFAULT or a Float specifying the degree of smoothing.
Possible ﬂoat values are between 0 and 0.5. If smooth=SOLVER_DEFAULT, the default degree
of smoothing will be determined by the solver. The default value is SOLVER_DEFAULT.
smooth
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP and
TOTAL. The default value is STEP.
timeSpan
Return value
A TabularAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the TabularAmplitude object.
Abaqus Scripting Reference Guide
98
TabularAmplitude object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TabularAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The TabularAmplitude object has members with the same names and descriptions as the arguments to the
TabularAmplitude  method.
In addition, the TabularAmplitude object can have the following member:
A BaselineCorrection object.
baselineCorrection
Corresponding analysis keywords
•
*AMPLITUDE
99
Abaqus Scripting Reference Guide
TabularAmplitude object

UserAmplitude object
The UserAmplitude object deﬁnes an amplitude curve using the UAMP or VUAMP user subroutine.
The UserAmplitude object is derived from the Amplitude object.
Access
import amplitude
mdb.models[name].amplitudes[name]
import odbAmplitude
session.odbs[name].amplitudes[name]
UserAmplitude(...)
This method creates a UserAmplitude object.
Path
mdb.models[name].UserAmplitude
session.odbs[name].UserAmplitude
Required arguments
A String specifying the repository key.
name
An Int specifying the number of variables for the UAMP or VUAMP user subroutine.
numVariables
Optional arguments
A SymbolicConstant specifying the time span of the amplitude. Possible values are STEP
and TOTAL. The default value is STEP.
timeSpan
Return value
A UserAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the UserAmplitude object.
Required arguments
None.
Abaqus Scripting Reference Guide
100
UserAmplitude object

Optional arguments
The optional arguments to setValues are the same as the arguments to the UserAmplitude  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The UserAmplitude object has members with the same names and descriptions as the arguments to the UserAmplitude
method.
Corresponding analysis keywords
•
*AMPLITUDE
101
Abaqus Scripting Reference Guide
UserAmplitude object

Animation commands
Animation commands are used to create and control object-based and image-based animations in the viewport.
In this section:
•
AnimationController object
•
AnimationOptions object
•
AVIOptions object
•
GIFOptions object
•
ImageAnimationOptions object
•
ImageAnimation object
•
QuickTimeOptions object
•
MP4Options object
•
Movie object
•
Session object
Abaqus Scripting Reference Guide
102

AnimationController object
The AnimationController object controls all object-based animation to be displayed in the viewports. The
AnimationController object has no constructor. Abaqus creates the animationController member when it creates the
Session object.
Access
import animation
session.viewports[name].animationController
play(...)
This method begins the animation.
Required arguments
None.
Optional arguments
The SymbolicConstant UNLIMITED or an Int specifying how many seconds to play the
animation. The default value is UNLIMITED.
duration
Return value
None.
Exceptions
AnimationError: animationType not set
If animationType=NONE:
stop()
This method stops the animation.
Arguments
None.
Return value
None.
Exceptions
None.
incrementFrame()
This method increments the animation frame.
103
AnimationController object

Arguments
None.
Return value
None.
Exceptions
None.
decrementFrame()
This method decrements the animation frame.
Arguments
None.
Return value
None.
Exceptions
None.
showFrame(...)
This method renders the speciﬁed frame of the animation.
Required arguments
None.
Optional arguments
An Int specifying the frame number.
frame
A Float specifying the frame: for animationType=TIME_HISTORY the frame with the time nearest
to this value, for animationType=HARMONIC the frame with the angle nearest to this value, for
animationType=SCALE_FACTOR the frame with the scale value nearest to this value.
value
Return value
None.
Exceptions
None.
showFirstFrame()
This method renders the ﬁrst frame of the animation.
Abaqus Scripting Reference Guide
104
AnimationController object

Arguments
None.
Return value
None.
Exceptions
None.
showLastFrame()
This method renders the last frame of the animation.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the AnimationController object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the type of movie to play. Possible values are
SCALE_FACTOR, HARMONIC, TIME_HISTORY, and NONE. The default value is
NONE.
animationType
Return value
None.
Exceptions
RangeError.
Members
The AnimationController object can have the following members:
105
Abaqus Scripting Reference Guide
AnimationController object

A SymbolicConstant specifying the type of movie to play. Possible values are
SCALE_FACTOR, HARMONIC, TIME_HISTORY, and NONE. The default value is NONE.
animationType
A SymbolicConstant specifying the state of the animation controller. Possible values are
STOP and PLAY. The default value is STOP.
state
Abaqus Scripting Reference Guide
106
AnimationController object

AnimationOptions object
The AnimationOptions object is used to store values and attributes associated with an AnimationController object.
The AnimationOptions object has no constructor command. Abaqus creates the animationOptions member when it
creates the AnimationController object.
Access
import animation
session.animationOptions
setValues(...)
This method modiﬁes the AnimationOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the animation mode. Possible values are PLAY_ONCE,
LOOP, LOOP_BACKWARD, and SWING. The default value is LOOP.
mode
An Int specifying the animation rate in frames/second. Possible values are 1 frameRate
100. The default value is 50.
frameRate
A Boolean specifying whether to show the frame counter. The default value is ON.
frameCounter
A SymbolicConstant specifying the relative scaling when the AnimationController object's
animationType=SCALE_FACTOR or HARMONIC. Possible values are FULL_CYCLE
and HALF_CYCLE. The default value is HALF_CYCLE.
relativeScaling
An Int specifying the number of frames to be used when the AnimationController object's
animationType=SCALE_FACTOR or HARMONIC. The default value is 7.
numScaleFactorFrames
A SymbolicConstant specifying whether the time history animation is time based or frame
based. Possible values are FRAME_BASED and TIME_BASED. The default value is
FRAME_BASED.
timeHistoryMode
A Float specifying the maximum time for time based time history animation when
maxTimeAutoCompute = False.
maxTime
A Boolean specifying whether the animation maximum time value should be computed
from the active frames when timeHistoryMode is set to TIME_BASED. The default value
is ON.
maxTimeAutoCompute
A Float specifying the minimum time for time based time history animation when
minTimeAutoCompute = False.
minTime
107
AnimationOptions object

A Boolean specifying whether the animation minimum time value should be computed
from the active frames when timeHistoryMode is set to TIME_BASED. The default value
is ON.
minTimeAutoCompute
A Float specifying the time increment for frame selection when timeHistoryMode is set
to TIME_BASED.
timeIncrement
A Boolean specifying whether to use the highlight method to draw the time tracker line
and symbols. The default value is ON.
xyUseHighlightMethod
A Boolean specifying whether to show the time tracker line. The default value is ON.
xyShowLine
A SymbolicConstant specifying the X–Y time tracker line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
xyLineStyle
A SymbolicConstant specifying the X–Y time tracker line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is MEDIUM.
xyLineThickness
A String specifying the color used to plot the X–Y time tracker line when
xyUseHighlightMethod = False. The default value is "Yellow".
xyLineColor
A Boolean specifying whether to show the time tracker symbols. The default value is
ON.
xyShowSymbol
A SymbolicConstant specifying the marker type to be used for all animation capable X–Y
curve or the SymbolicConstant DEFAULT specifying that the system will take the marker
associated to each curve Possible values are:
xySymbolMarker
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
•
DEFAULT
The default value is DEFAULT.
A SymbolicConstant specifying the size of the markers. Possible values are SMALL,
MEDIUM, and LARGE. The default value is MEDIUM.
xySymbolSize
Abaqus Scripting Reference Guide
108
AnimationOptions object

A String specifying the color used to plot X–Y time tracker symbols when
xyUseHighlightMethod = False. When setting the color to 'Default' the system will take
the color associated to each curve. The default value is "Default".
xySymbolColor
Return value
None.
Exceptions
None.
Members
The AnimationOptions object can have the following members:
A SymbolicConstant specifying the animation mode. Possible values are PLAY_ONCE,
LOOP, LOOP_BACKWARD, and SWING. The default value is LOOP.
mode
An Int specifying the animation rate in frames/second. Possible values are 1 frameRate
100. The default value is 50.
frameRate
A Boolean specifying whether to show the frame counter. The default value is ON.
frameCounter
A SymbolicConstant specifying the relative scaling when the AnimationController object's
animationType=SCALE_FACTOR or HARMONIC. Possible values are FULL_CYCLE
and HALF_CYCLE. The default value is HALF_CYCLE.
relativeScaling
An Int specifying the number of frames to be used when the AnimationController object's
animationType=SCALE_FACTOR or HARMONIC. The default value is 7.
numScaleFactorFrames
A SymbolicConstant specifying whether the time history animation is time based or frame
based. Possible values are FRAME_BASED and TIME_BASED. The default value is
FRAME_BASED.
timeHistoryMode
A Float specifying the maximum time for time based time history animation when
maxTimeAutoCompute = False.
maxTime
A Boolean specifying whether the animation maximum time value should be computed
from the active frames when timeHistoryMode is set to TIME_BASED. The default value
is ON.
maxTimeAutoCompute
A Float specifying the maximum time when timeHistoryMode is set to TIME_BASED
and the maxTimeAutoCompute value is True. This value is computed as the maximum
time of all active frames displayed in viewports where the animation is active.
maxTimeAutoValue
A Float specifying the minimum time for time based time history animation when
minTimeAutoCompute = False.
minTime
109
Abaqus Scripting Reference Guide
AnimationOptions object

A Boolean specifying whether the animation minimum time value should be computed
from the active frames when timeHistoryMode is set to TIME_BASED. The default value
is ON.
minTimeAutoCompute
A Float specifying the minimum time when timeHistoryMode is set to TIME_BASED
and the minTimeAutoCompute value is True. This value is computed as the minimum
time of all active frames displayed in viewports where the animation is active.
minTimeAutoValue
A Float specifying the time increment for frame selection when timeHistoryMode is set
to TIME_BASED.
timeIncrement
A Boolean specifying whether to use the highlight method to draw the time tracker line
and symbols. The default value is ON.
xyUseHighlightMethod
A Boolean specifying whether to show the time tracker line. The default value is ON.
xyShowLine
A SymbolicConstant specifying the X–Y time tracker line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
xyLineStyle
A SymbolicConstant specifying the X–Y time tracker line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is MEDIUM.
xyLineThickness
A Boolean specifying whether to show the time tracker symbols. The default value is ON.
xyShowSymbol
A SymbolicConstant specifying the marker type to be used for all animation capable X–Y
curve or the SymbolicConstant DEFAULT specifying that the system will take the marker
associated to each curve Possible values are:
xySymbolMarker
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
•
DEFAULT
The default value is DEFAULT.
A SymbolicConstant specifying the size of the markers. Possible values are SMALL,
MEDIUM, and LARGE. The default value is MEDIUM.
xySymbolSize
A String specifying the color used to plot the X–Y time tracker line when
xyUseHighlightMethod = False. The default value is "Yellow".
xyLineColor
Abaqus Scripting Reference Guide
110
AnimationOptions object

A String specifying the color used to plot X–Y time tracker symbols when
xyUseHighlightMethod = False. When setting the color to 'Default' the system will take
the color associated to each curve. The default value is "Default".
xySymbolColor
111
Abaqus Scripting Reference Guide
AnimationOptions object

AVIOptions object
The AVIOptions object is used to store values and attributes to be used in generating AVI animation. The AVIOptions
object has no constructor. Abaqus creates the aviOptions member when the animation module is imported.
Access
import animation
session.aviOptions
setValues(...)
This method modiﬁes the AVIOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the compression method for the AVI format. Possible values
are:
compressionMethod
•
RAW8, specifying an uncompressed format of 8 bits per pixel.
•
RAW32, specifying an uncompressed format of 32 bits per pixel.
•
RLE8, specifying a run length encoded format of 8 bits per pixel.
•
CODEC, specifying a format deﬁned by CODEC (encoder/decoder). The availability of the
CODEC is system dependent
The default value is RLE8.
An Int specifying the quality of the compression as a percentage when the compressionMethod
is set to  CODEC.
compressionQuality
A String specifying the system speciﬁc options deﬁning the CODEC when the
compressionMethod is set to  CODEC.
codecOptions
A SymbolicConstant specifying how the width and height of the image are speciﬁed. Possible
values are SIZE_ON_SCREEN and USER_DEFINED. The default value is SIZE_ON_SCREEN.
sizeDeﬁnition
A pair of Ints specifying the width and height of the image in pixels when
sizeDeﬁnition=USER_DEFINED. Possible values are Ints in the range (minWidth, minHeight)
 (width, height)  (maxWidth, maxHeight). The default value is the screen size.
imageSize
Note:
The values of the minimum width (minWidth) and height (minHeight) depend on the
following:
•
viewport font size,
•
whether decorations are printed,
Abaqus Scripting Reference Guide
112
AVIOptions object

•
decoration size, and
•
screen resolution.
The minimum width and height are normally < 50 pixels. The values of the maximum
width (maxWidth) and height (maxHeight) depend on the graphics capabilities of the
system. The maximum width and height will be at least as large as the screen dimensions.
Return value
None.
Exceptions
None.
Members
The AVIOptions object has members with the same names and descriptions as the arguments to the setValues
method.
113
Abaqus Scripting Reference Guide
AVIOptions object

GIFOptions object
The GIFOptions object is used to store values and attributes to be used in generating animated GIF animations.
The GIFOptions object has no constructor. Abaqus creates the gifOptions member when the animation module is
imported.
Access
import animation
session.gifOptions
setValues(...)
This method modiﬁes the GIFOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying how the width and height of the image are speciﬁed. Possible values
are SIZE_ON_SCREEN and USER_DEFINED. The default value is SIZE_ON_SCREEN.
sizeDeﬁnition
A pair of Ints specifying the width and height of the image in pixels when
sizeDeﬁnition=USER_DEFINED. Possible values are Ints in the range (minWidth, minHeight)  
(width, height)   (maxWidth, maxHeight). The default value is the screen size.
imageSize
Note: The values of the minimum width (minWidth) and height (minHeight) depend on the
following:
•
viewport font size,
•
whether decorations are printed,
•
decoration size, and
•
screen resolution.
The minimum width and height are normally < 50 pixels. The values of the maximum width
(maxWidth) and height (maxHeight) depend on the graphics capabilities of the system. The
maximum width and height will be at least as large as the screen dimensions.
Return value
None.
Exceptions
None.
Members
The GIFOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
114
GIFOptions object

ImageAnimationOptions object
The ImageAnimationOptions object is used to store values and attributes associated with saving viewport animations.
The ImageAnimationOptions object has no constructor. Abaqus creates the imageAnimationOptions member when
the animation module is imported.
Access
import animation
session.imageAnimationOptions
setValues(...)
This method modiﬁes the ImageAnimationOptions object.
Required arguments
None.
Optional arguments
An Int specifying the frame rate to record on the saved animation ﬁle. The effective
frame rate in frames per second will be obtained by dividing the given frame rate by
the time scale.
frameRate
An Int specifying the time scale to apply to the frame rate.
timeScale
A Boolean specifying whether to capture the viewport border and title. The default
value is ON.
vpDecorations
A Boolean specifying whether to capture viewport backgrounds. The default value is
OFF.
vpBackground
A Boolean specifying whether to capture the view compass. The default value is OFF.
compass
Return value
None.
Exceptions
None.
Members
The ImageAnimationOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
115
ImageAnimationOptions object

ImageAnimation object
The ImageAnimation object is used to build frame by frame animation.
Access
import animation
session.imageAnimation
ImageAnimation(...)
This method creates an ImageAnimation object from the speciﬁed ﬁlename and format.
Path
session.ImageAnimation
Required arguments
A String specifying the name of the animation ﬁle to generate.
ﬁleName
A SymbolicConstant specifying the format of the generated ﬁle. Possible values are MP4,
AVI, QUICKTIME, and GIF.
format
Optional arguments
None.
Return value
An ImageAnimation object.
Exceptions
None.
writeFrame(...)
This method adds a frame to the ImageAnimation object.
Required arguments
None.
Optional arguments
A sequence specifying the canvas objects to capture. The default is to capture all
canvas objects.
canvasObjects
Return value
None.
Abaqus Scripting Reference Guide
116
ImageAnimation object

Exceptions
None.
close()
This method closes the ImageAnimation object.
Arguments
None.
Return value
None.
Exceptions
None.
closed()
This method indicates if the ImageAnimation is open or closed for writing animation frames.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The ImageAnimation object has the following member:
A String specifying the ﬁle to which the animation frames is to be written.
ﬁleName
117
Abaqus Scripting Reference Guide
ImageAnimation object

QuickTimeOptions object
The QuickTimeOptions object is used to store values and attributes to be used in generating QuickTime animation.
The QuickTimeOptions object has no constructor. Abaqus creates the quickTimeOptions member when the animation
module is imported.
Access
import animation
session.quickTimeOptions
setValues(...)
This method modiﬁes the QuickTimeOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the compression method for the QuickTime format. Possible
values are:
compressionMethod
•
RAW24, specifying an uncompressed format of 24 bits per pixel.
•
RLE24, specifying a run length encoded format of 24 bits per pixel.
The default value is RLE24.
A SymbolicConstant specifying how the width and height of the image are speciﬁed. Possible
values are SIZE_ON_SCREEN and USER_DEFINED. The default value is SIZE_ON_SCREEN.
sizeDeﬁnition
A pair of Ints specifying the width and height of the image in pixels when
sizeDeﬁnition=USER_DEFINED. Possible values are Ints in the range (minWidth, minHeight)
 (width, height)  (maxWidth, maxHeight). The default value is the screen size.
imageSize
Note:
The values of the minimum width (minWidth) and height (minHeight) depend on the
following:
•
viewport font size,
•
whether decorations are printed,
•
decoration size, and
•
screen resolution.
The minimum width and height are normally < 50 pixels. The values of the maximum
width (maxWidth) and height (maxHeight) depend on the graphics capabilities of the
system. The maximum width and height will be at least as large as the screen dimensions.
Abaqus Scripting Reference Guide
118
QuickTimeOptions object

Return value
None.
Exceptions
None.
Members
The QuickTimeOptions object has members with the same names and descriptions as the arguments to the setValues
method.
119
Abaqus Scripting Reference Guide
QuickTimeOptions object

MP4Options object
The MP4Options object is used to store values and attributes to be used in generating MP4 animations.
The MP4Options object has no constructor. Abaqus creates the mp4Options member when the animation module is
imported.
Access
import animation
session.mp4Options
setValues(...)
This method modiﬁes the MP4Options object.
Required arguments
None.
Optional arguments
An Int specifying the quality of the compression as a percentage. The default is 75.
compressionQuality
A String specifying the codec implementation. Possible values are "mpeg4" and, if an appropriate
FFmpeg installation can be found that supports it, "libx264." The default is "libx264" when
available.
codecOptions
A SymbolicConstant specifying how the width and height of the image are speciﬁed. Possible
values are SIZE_ON_SCREEN and USER_DEFINED. The default value is
SIZE_ON_SCREEN.
sizeDeﬁnition
A pair of Ints specifying the width and height of the image in pixels when
sizeDeﬁnition=USER_DEFINED. Possible values are Ints in the range (minWidth, minHeight)
  (width, height)   (maxWidth, maxHeight). The default value is the screen size.
imageSize
Note: The values of the minimum width (minWidth) and height (minHeight) depend on
the following:
•
viewport font size,
•
whether decorations are printed,
•
decoration size, and
•
screen resolution.
The minimum width and height are normally < 50 pixels. The values of the maximum
width (maxWidth) and height (maxHeight) depend on the graphics capabilities of the
system. The maximum width and height will be at least as large as the screen dimensions.
Return value
None.
Abaqus Scripting Reference Guide
120
MP4Options object

Exceptions
None.
Members
The MP4Options object has members with the same names and descriptions as the arguments to the setValues
method.
121
Abaqus Scripting Reference Guide
MP4Options object

Movie object
The Movie object is used to store values and attributes associated with a movie ﬁle. Upon creation, the Movie object
is added to the session.movies repository.
Access
import animation
session.movies[name]
Movie(...)
This method creates a Movie object from the contents of the speciﬁed ﬁle.
Path
session.Movie
Required arguments
A String specifying the repository name for the movie.
name
A String specifying the ﬁle from which the movie is to be read. The ﬁle extension must be
speciﬁed and indicates the movie format (for example, .mp4, .avi, etc.).
ﬁleName
Optional arguments
An Int specifying the ﬁrst frame to be displayed from this movie. The default value is 0.
startFrame
An Int specifying the last frame to be displayed from this movie. A negative number will
indicate reverse numbering: -1 is the last frame of the movie. The default value is −1.
endFrame
An Int specifying the global timeline frame number that corresponds to startFrame. A
value of 0 will indicate the ﬁrst frame to be displayed in the viewport. The default value
is 0.
timelineStartFrame
An Int specifying the global timeline frame number that corresponds to endFrame. A
negative number will indicate reverse numbering: -1 indicates the last frame to be displayed
in the viewport. The default value is −1.
timelineEndFrame
A Float specifying the global timeline time that corresponds to the time of startFrame.
The default value is 0.0.
timelineStartTime
The SymbolicConstant END_FRAME_TIME or a Float specifying the global timeline
time that corresponds to the time of endFrame. The SymbolicConstant
timelineEndTime
END_FRAME_TIME indicates the time in this movie corresponding to endFrame. The
default value is END_FRAME_TIME.
Abaqus Scripting Reference Guide
122
Movie object

Return value
A Movie object.
Exceptions
ValueError.
ValueError: Unable to open movie ﬁle
If ﬁleName does not exist or can not be read:
ValueError: Unsupported movie format
If ﬁleName references an unsupported movie ﬁle format:
ValueError: Unable to decode movie ﬁle
If the contents of ﬁleName are corrupt or can not be
decoded:
setValues(...)
This method modiﬁes the Movie object.
Required arguments
None.
Optional arguments
An Int specifying the ﬁrst frame to be displayed from this movie. The default value is 0.
startFrame
An Int specifying the last frame to be displayed from this movie. A negative number will
indicate reverse numbering: -1 is the last frame of the movie. The default value is −1.
endFrame
An Int specifying the global timeline frame number that corresponds to startFrame. A
value of 0 will indicate the ﬁrst frame to be displayed in the viewport. The default value
is 0.
timelineStartFrame
An Int specifying the global timeline frame number that corresponds to endFrame. A
negative number will indicate reverse numbering: -1 indicates the last frame to be displayed
in the viewport. The default value is −1.
timelineEndFrame
A Float specifying the global timeline time that corresponds to the time of startFrame.
The default value is 0.0.
timelineStartTime
The SymbolicConstant END_FRAME_TIME or a Float specifying the global timeline
time that corresponds to the time of endFrame. The SymbolicConstant
timelineEndTime
END_FRAME_TIME indicates the time in this movie corresponding to endFrame. The
default value is END_FRAME_TIME.
Return value
None.
123
Abaqus Scripting Reference Guide
Movie object

Exceptions
RangeError.
RangeError: startFrame must be
an Integer in the range: 0 to
numFrames-1
If startFrame,endFrame,timelineStartFrame,timelineEndFrame,timelineStartTime,
ortimelineEndTime are outside their respective valid range.
Members
The Movie object has members with the same names and descriptions as the arguments to the Movie method.
In addition, the Movie object has the following members:
An Int specifying the width of the movie in pixels.
width
An Int specifying the height of the movie in pixels.
height
An Int specifying the total number of frames on the movie ﬁle.
numFrames
A Float specifying the duration of the movie in seconds.
duration
An Int specifying the memory taken by the movie frames as selected.
memory
Abaqus Scripting Reference Guide
124
Movie object

Session object
The following commands operate on Session objects. For more information about the Session object, see Session
object.
Access
import animation
writeImageAnimation(...)
This method writes the animations present in the list of canvas objects to a ﬁle. It generates an animation ﬁle using
the given ﬁle name and ﬁle format and uses the values in the appropriate options object.
Required arguments
A String specifying the name of the animation ﬁle to generate.
ﬁleName
A SymbolicConstant specifying the format of the generated ﬁle. Possible values are MP4,
AVI, QUICKTIME, GIF, VRML, and COMPRESSED_VRML.
format
Optional arguments
A sequence specifying the canvas objects to capture. The default behavior is to capture
all canvas objects.
canvasObjects
Return value
None.
Exceptions
None.
125
Session object

Annotation commands
Annotation commands are used to create, position, and modify viewport annotations.
In this section:
•
Annotation object
•
AnnotationsToPlotArray object
•
Arrow object
•
Text object
•
Viewport object
Abaqus Scripting Reference Guide
126

Annotation object
The Annotation object is the abstract base type for other Annotation objects. The Annotation object has no explicit
constructor. The methods and members of the Annotation object are common to all objects derived from Annotation.
Access
import annotationToolset
mdb.annotations[name]
session.odbs[name].userData.annotations[name]
session.viewports[name].annotationsToPlot[i]
bringToFront()
This method brings the Annotation object to the top of the annotation stack.
Arguments
None.
Return value
None.
Exceptions
None.
sendToBack()
This method sends the Annotation object to the bottom of the annotation stack.
Arguments
None.
Return value
None.
Exceptions
None.
bringForward()
This method brings the Annotation object one position up in the annotation stack.
Arguments
None.
Return value
None.
127
Annotation object

Exceptions
None.
sendBackward()
This method sends the Annotation object one position down in the annotation stack.
Arguments
None.
Return value
None.
Exceptions
None.
moveBefore(...)
This method moves the Annotation object before another object in the same repository.
Required arguments
A String specifying the name of the other Annotation object.
name
Optional arguments
None.
Return value
None.
Exceptions
None.
moveAfter(...)
This method moves the Annotation object after another object in the same repository.
Required arguments
A String specifying the name of the other Annotation object.
name
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
128
Annotation object

Exceptions
None.
translate(...)
This method translates the Annotation object on the viewport plane.
Required arguments
None.
Optional arguments
A Float specifying the X translation amount in millimeters.
x
A Float specifying the Y translation amount in millimeters.
y
Return value
None.
Exceptions
None.
Members
The Annotation object has the following member:
A String specifying the annotation repository key.
name
129
Abaqus Scripting Reference Guide
Annotation object

AnnotationsToPlotArray object
The AnnotationsToPlotArray object is a sequence that stores references to plotted annotations. By adding annotations
to and removing annotations from this sequence, you can control which annotations are displayed in a particular
viewport.
Access
import annotationToolset
session.viewports[name].annotationsToPlot
bringForward(...)
This method brings the Annotation object one position forward in the AnnotationsToPlotArray sequence.
Required arguments
An Int specifying the index of the Annotation object in the AnnotationsToPlotArray sequence.
index
Optional arguments
None.
Return value
None.
Exceptions
None.
bringToFront(...)
This method brings the Annotation object to the beginning of the AnnotationsToPlotArray sequence.
Required arguments
An Int specifying the index of the Annotation object in the AnnotationsToPlotArray sequence.
index
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
130
AnnotationsToPlotArray object

moveAfter(...)
This method moves the Annotation object after another object in the same AnnotationsToPlotArray sequence.
Required arguments
An Integer specifying the index of the Annotation object in the AnnotationsToPlotArray sequence.
index
An Integer specifying the index of the other Annotation object in the AnnotationsToPlotArray
sequence after which this object will be moved.
other
Optional arguments
None.
Return value
None.
Exceptions
None.
moveBefore(...)
This method moves the Annotation object before another object in the same AnnotationsToPlotArray sequence.
Required arguments
An Int specifying the index of the Annotation object in the AnnotationsToPlotArray sequence.
index
An Int specifying the index of the other Annotation object in the AnnotationsToPlotArray
sequence before which this object will be moved.
other
Optional arguments
None.
Return value
None.
Exceptions
None.
sendBackward(...)
This method sends the Annotation object one position backward in the AnnotationsToPlotArray sequence.
131
Abaqus Scripting Reference Guide
AnnotationsToPlotArray object

Required arguments
An Int specifying the index of the Annotation object in the AnnotationsToPlotArray sequence.
index
Optional arguments
None.
Return value
None.
Exceptions
None.
sendToBack(...)
This method sends the Annotation object to the end of the AnnotationsToPlotArray sequence.
Required arguments
An Int specifying the index of the Annotation object in the AnnotationsToPlotArray sequence.
index
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The AnnotationsToPlotArray object has no members.
Abaqus Scripting Reference Guide
132
AnnotationsToPlotArray object

Arrow object
The Arrow object stores the visual settings and location of an arrow annotation.
The Arrow object is derived from the Annotation object.
Access
import annotationToolset
mdb.annotations[name]
session.odbs[name].userData.annotations[name]
session.viewports[name].annotationsToPlot[i]
Arrow(...)
This method creates an Arrow object.
Path
mdb.Arrow
session.odbs[name].userData.Arrow
Required arguments
A String specifying the annotation repository key.
name
Optional arguments
A pair of Floats specifying the start point X- and Y-offsets in millimeters from startAnchor. The
default value is (0, 0).
startPoint
A pair of Floats specifying the end point X- and Y-offsets in millimeters from endAnchor. The
default value is (0, 0).
endPoint
A SymbolicConstant or a sequence of Floats specifying a point. A sequence of two Floats speciﬁes
the X- and Y-coordinates as percentages of the viewport width and height. A sequence of three
startAnchor
Floats speciﬁes the X-, Y-, and Z-coordinates of a point in the model coordinate system. A
SymbolicConstant indicates a relative position. Possible values are:
•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
•
TOP_CENTER
•
TOP_RIGHT
133
Arrow object

The default value is BOTTOM_LEFT.
A SymbolicConstant or a sequence of Floats specifying a point. A sequence of two Floats speciﬁes
the X- and Y-coordinates as percentages of the viewport width and height. A Sequence of three
endAnchor
Floats speciﬁes the X-, Y-, and Z-coordinates of a point in the model coordinate system. A
SymbolicConstant indicates a relative position. Possible values are:
•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
•
TOP_CENTER
•
TOP_RIGHT
The default value is BOTTOM_LEFT.
A SymbolicConstant specifying the style of the start head. Possible values are:
startHeadStyle
•
ARROW
•
FILLED_ARROW
•
HOLLOW_CIRCLE
•
FILLED_CIRCLE
•
HOLLOW_DIAMOND
•
FILLED_DIAMOND
•
HOLLOW_SQUARE
•
FILLED_SQUARE
•
NONE
The default value is NONE.
A SymbolicConstant specifying the style of the end head. Possible values are:
endHeadStyle
•
ARROW
•
FILLED_ARROW
•
HOLLOW_ CIRCLE
•
FILLED_CIRCLE
•
HOLLOW_DIAMOND
•
FILLED_DIAMOND
•
HOLLOW_SQUARE
•
FILLED_SQUARE
•
NONE
Abaqus Scripting Reference Guide
134
Arrow object

The default value is FILLED_ARROW.
A Float specifying the distance in millimeters between the arrow start point and the arrow start
head. The default value is 0.0.
startGap
A Float specifying the distance in millimeters between the arrow end point and the arrow end
head. The default value is 0.0.
endGap
A String specifying the color of the arrow. Possible string values are any valid color. The default
value is "White".
color
A SymbolicConstant specifying the line style of the arrow. Possible values are SOLID, DASHED,
DOTTED, and DOT_DASH. The default value is SOLID.
lineStyle
A SymbolicConstant specifying the line thickness of the arrow. Possible values are VERY_THIN,
THIN, MEDIUM, and THICK. The default value is VERY_THIN.
lineThickness
Return value
An Arrow object.
Exceptions
InvalidNameError.
translateStartPoint(...)
This method translates the start point of the Arrow object on the viewport plane.
Required arguments
None.
Optional arguments
A Float specifying the X translation amount in millimeters.
x
A Float specifying theY translation amount in millimeters.
y
Return value
None.
Exceptions
None.
translateEndPoint(...)
This method translates the end point of the Arrow object on the viewport plane.
135
Abaqus Scripting Reference Guide
Arrow object

Required arguments
None.
Optional arguments
A Float specifying the X translation amount in millimeters.
x
A Float specifying theY translation amount in millimeters.
y
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the Arrow object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Arrow  method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The Arrow object has members with the same names and descriptions as the arguments to the Arrow  method.
Abaqus Scripting Reference Guide
136
Arrow object

Text object
The Text object stores the text settings and location of a text annotation.
The Text object is derived from the Annotation object.
Access
import annotationToolset
mdb.annotations[name]
session.odbs[name].userData.annotations[name]
session.viewports[name].annotationsToPlot[i]
Text(...)
This method creates a Text object.
Path
mdb.Text
session.odbs[name].userData.Text
Required arguments
A String specifying the annotation repository key.
name
Optional arguments
A String specifying the text of the Text object. The default value is an empty string.
text
A pair of Floats specifying the X- and Y-offsets in millimeters of the Text object from anchor.
The default value is (0, 0).
offset
A SymbolicConstant or a sequence of Floats specifying a point. A sequence of two Floats
speciﬁes the X- and Y coordinates as percentages of the viewport width and height. A Sequence
anchor
of three Floats speciﬁes the X-, Y-, and Z-coordinates of a point in the model coordinate system.
A SymbolicConstant speciﬁes a relative position. Possible values are:
•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
•
TOP_CENTER
•
TOP_RIGHT
137
Text object

The default value is BOTTOM_LEFT.
A SymbolicConstant or a sequence of Floats specifying a point. The sequence of two Floats
speciﬁes the X- and Y-coordinates of the reference point of the Text annotation given as
referencePoint
percentages of its width and height. The SymbolicConstant indicates a relative position. Possible
values are:
•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
•
TOP_CENTER
•
TOP_RIGHT
The default value is BOTTOM_LEFT.
A Float specifying the amount of rotation in degrees about referencePoint. The default value is
0.0.
rotationAngle
A String specifying the color of the Text object. Possible string values are any valid color. The
default value is "White".
color
A String specifying the font of the Text object. Possible string values are any valid font
speciﬁcation. The default value is "-*-verdana-medium-r-normal--120-*".
font
A SymbolicConstant specifying the Text object background style. Possible values are MATCH,
TRANSPARENT, and OTHER. The default value is TRANSPARENT.
backgroundStyle
A String specifying the color of the Text object background. Possible string values are any valid
color. The default value matches the viewport background.
backgroundColor
A Boolean specifying whether the box around the text is shown. The default value is OFF.
box
A SymbolicConstant specifying the Text object justiﬁcation for multiline text. Possible values
are JUSTIFY_LEFT, JUSTIFY_CENTER, and JUSTIFY_RIGHT. The default value is
JUSTIFY_LEFT.
justiﬁcation
Return value
A Text object.
Exceptions
None.
Abaqus Scripting Reference Guide
138
Text object

setValues(...)
This method modiﬁes the Text object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Text  method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The Text object has members with the same names and descriptions as the arguments to the Text  method.
In addition, the Text object has the following members:
A Float specifying the width in millimeters of the Text object.
width
A Float specifying the height in millimeters of the Text object.
height
139
Abaqus Scripting Reference Guide
Text object

Viewport object
The following commands operate on Viewport objects. For more information about the Viewport object, see Viewport
object.
Access
import annotationToolset
plotAnnotation(...)
This method plots an Annotation object in aViewport.
Required arguments
An Annotation object to plot.
annotation
Optional arguments
An Int specifying the index of the Annotation object in the sequence of annotations to plot. The
default value is zero.
index
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
140
Viewport object

Assembly commands
Features in Abaqus/CAE include Parts, Datums, Partitions, and Assembly operations.
Assembly commands create Feature objects on only the rootAssembly object. The commands that create Feature
objects on only the Part object are described in Part commands. The commands that create Feature objects on
both the Part and the rootAssembly objects are described in Feature commands.
In this section:
•
Assembly object
•
ConnectorOrientation object
•
Feature object
•
PartInstance object
•
ModelInstance object
•
Model object
141

Assembly object
An Assembly object is a container for instances of parts.
The Assembly object has no constructor command. Abaqus creates the rootAssembly member when a Model object is
created.
Access
import assembly
mdb.models[name].rootAssembly
backup()
This method makes a backup copy of the features in the assembly. The backup() method is used in conjunction with
the restore() method.
Arguments
None.
Return value
None.
Exceptions
None.
clearGeometryCache()
This method deletes the geometry cache. Deleting the geometry cache reduces the amount of memory being used.
Arguments
None.
Return value
None.
Exceptions
None.
deleteAllFeatures()
This method deletes all the features in the assembly.
Arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
142
Assembly object

Exceptions
None.
deleteFeatures(...)
This method deletes speciﬁed features from the assembly.
Required arguments
A sequence of Strings specifying the feature names that will be deleted from the
assembly.
featureNames
Optional arguments
None.
Return value
None.
Exceptions
None.
excludeFromSimulation(...)
This method excludes the speciﬁed part instances from the analysis.
Required arguments
A sequence of PartInstance objects to be excluded from the analysis.
instances
A Bool specifying whether to exclude the selected instances from the analysis or include
them.
exclude
Optional arguments
None.
Return value
None.
Exceptions
None.
featurelistInfo()
This method prints the name and status of all the features in the feature lists.
143
Abaqus Scripting Reference Guide
Assembly object

Arguments
None.
Return value
None.
Exceptions
None.
getMassProperties(...)
This method returns the mass properties of the assembly, or instances or regions. Only beams, trusses, shells, solids,
point, nonstructural mass, and rotary inertia elements are supported.
Required arguments
None.
Optional arguments
A MeshElementArray, CellArray, FaceArray, EdgeArray, or list of PartInstance objects
specifying the regions whose mass properties are to be queried. The whole assembly is
queried by default.
regions
A SymbolicConstant specifying the relative accuracy for geometry computation. Possible
values are LOW, MEDIUM, and HIGH. The default value is LOW.
relativeAccuracy
A Boolean specifying whether the mesh should be used in the computation if the geometry
is meshed. The default value is False.
useMesh
A Boolean specifying whether a user-speciﬁed density should be used in regions with
density errors such as undeﬁned material density. The default value is False.
specifyDensity
A double value specifying the user-speciﬁed density value to be used in regions with density
errors. The user-speciﬁed density should be greater than 0.
density
A Boolean specifying whether a user-speciﬁed thickness should be used in regions with
thickness errors such as undeﬁned thickness. The default value is False.
specifyThickness
A double value specifying the user-speciﬁed thickness value to be used in regions with
thickness errors. The user-speciﬁed thickness should be greater than 0.
thickness
A Boolean specifying if the moments of inertia should be evaluated about the center of
mass. The default value is True.
miAboutCenterOfMass
A tuple of three ﬂoats specifying the coordinates of the point about which to evaluate the
moment of inertia. By default if the moments of inertia are not being evaluated about the
center of mass, they will be evaluated about the origin.
miAboutPoint
Abaqus Scripting Reference Guide
144
Assembly object

Return value
A Dictionary object with the following items:
area: None or a Float specifying the sum of the area of the speciﬁed faces. The area is computed only for one side for
shells.
areaCentroid: None or a tuple of three Floats representing the coordinates of the area centroid.
volume: None or a Float specifying the volume of the speciﬁed regions.
volumeCentroid: None or a tuple of three Floats representing the coordinates of the volume centroid.
massFromMassPerUnitSurfaceArea: None or a Float specifying the mass due to mass per unit surface area.
mass: None or a Float specifying the mass of the speciﬁed regions. It is the total mass and includes mass from quantities
such as mass per unit surface area.
centerOfMass: None or a tuple of three Floats representing the coordinates of the center of mass.
momentOfInertia: None or a tuple of six Floats representing the moments of inertia about the center of mass or about
the point speciﬁed.
warnings: A tuple of SymbolicConstants representing the problems encountered while computing the mass properties.
Possible SymbolicConstants are:
UNSUPPORTED_ENTITIES: Some unsupported entities exist in the speciﬁed regions. The mass properties are
computed only for beams, trusses, shells, solids, point and nonstructural mass elements, and rotary inertia elements.
The mass properties are not computed for axisymmetric elements, springs, connectors, gaskets, or any other elements.
MISSING_THICKNESS: For some regions, the section deﬁnitions are missing thickness values.
ZERO_THICKNESS: For some regions, the section deﬁnitions have a zero thickness value.
VARIABLE_THICKNESS: The nodal thickness or ﬁeld thickness speciﬁed for some regions has been ignored.
NON_APPLICABLE_THICKNESS: For some regions, the thickness value is not applicable to the corresponding
sections speciﬁed on the regions.
MISSING_DENSITY: For some regions, the section deﬁnitions are missing material density values.
MISSING_MATERIAL_DEFINITION: For some regions, the material deﬁnition is missing.
ZERO_DENSITY: For some regions, the section deﬁnitions have a zero material density value.
UNSUPPORTED_DENSITY: For some regions, either a negative material density or a temperature-dependent density
has been speciﬁed, or the material value is missing for one or more plies in the composite section.
SHELL_OFFSETS: For shells, this method does not account for any offsets speciﬁed.
MISSING_SECTION_DEFINITION: For some regions, the section deﬁnition is missing.
UNSUPPORTED_SECTION_DEFINITION: The section deﬁnition provided for some regions is not supported.
REINFORCEMENTS: This method does not account for any reinforcements speciﬁed on the model.
SMEARED_PROPERTIES: For regions with composite section assignments, the density is smeared across the thickness.
The volume centroid and center of mass computations for a composite shell use a lumped mass approach where the
volume and mass is assumed to be lumped in the plane of the shell. As a result of these approximations the volume
centroid, center of mass and moments of inertia might be slightly inaccurate for regions with composite section
assignments.
UNSUPPORTED_NON_STRUCTURAL_MASS_ENTITIES: This method does not account for any nonstructural
mass on wires.
INCORRECT_MOMENT_OF_INERTIA: For geometry regions with nonstructural mass per volume, the nonstructural
mass is assumed to be a point mass at the centroid of the regions. Thus, the moments of inertia might be inaccurate as
145
Abaqus Scripting Reference Guide
Assembly object

the distribution of the nonstructural mass is not accounted for. Use the mesh for accurately computing the moments
of inertia.
MISSING_BEAM_ORIENTATIONS: For some regions with beam section assignments, the beam section orientations
are missing.
UNSUPPORTED_BEAM_PROFILES: This method supports the Box, Pipe, Circular, Rectangular, Hexagonal,
Trapezoidal, I, L, T, Arbitrary, and Tapered beam proﬁles. Any other beam proﬁle is not supported.
TAPERED_BEAM_MI: Moment of inertia calculations for tapered beams are not accurate.
SUBSTRUCTURE_INCORRECT_PROPERTIES: The user assigned density and thickness is not considered for
substructures.
Exceptions
None.
getAngle(...)
This method returns the angle between the speciﬁed entities.
Required arguments
A Face, MeshFace, or a Datum object specifying the ﬁrst plane. The Datum object must represent
a datum plane. The plane1 and line1 arguments are mutually exclusive. One of them must be
speciﬁed.
plane1
A Face, MeshFace, or a Datum object specifying the second plane. The Datum object must represent
a datum plane. The plane2 and line2 arguments are mutually exclusive. One of them must be
speciﬁed.
plane2
An Edge, MeshEdge, or a Datum object specifying the ﬁrst curve. The Datum object must represent
a datum axis. The plane1 and line1 arguments are mutually exclusive. One of them must be speciﬁed.
line1
An Edge, MeshEdge, or a Datum object specifying the second curve. The Datum object must
represent a datum axis. The plane2 and line2 arguments are mutually exclusive. One of them must
be speciﬁed.
line2
Optional arguments
If the two selected Edge objects have more than one vertex in common, this Vertex
object speciﬁes the vertex at which to evaluate the angle.
commonVertex
Return value
A Float specifying the angle between the speciﬁed entities. If you provide a plane as an argument, Abaqus/CAE
computes the angle using the normal to the plane.
Exceptions
None.
Abaqus Scripting Reference Guide
146
Assembly object

getCoordinates(...)
This method returns the coordinates of a speciﬁed point.
Required arguments
A Vertex, Datum point, MeshNode, or ReferencePoint specifying the entity to query.
entity
Optional arguments
A DatumCsys object specifying the desired coordinate system of the returned coordinates. By
default, coordinates are given in the global coordinate system.
csys
Return value
A tuple of three Floats representing the coordinates of the speciﬁed point.
Exceptions
None.
getDistance(...)
Depending on the arguments provided, this method returns one of the following:
•
The distance between two points.
•
The minimum distance between a point and an edge.
•
The minimum distance between two edges.
Required arguments
A Vertex, Datum point, MeshNode, or Edge specifying the ﬁrst entity from which to measure.
entity1
A Vertex, Datum point, MeshNode, or Edge specifying the second entity to which to measure.
entity2
Optional arguments
A Boolean that determines whether a verbose output is to be printed. The default is
True
printResults
Return value
A Float specifying the calculated distance.
Exceptions
None.
147
Abaqus Scripting Reference Guide
Assembly object

getFacesAndVerticesOfAttachmentLines(...)
Given an array of edge objects, this method returns a tuple of dictionary objects. Each object consists of ﬁve members
including the attachment line and associated face and vertex objects.
Required arguments
An EdgeArray object that is a sequence of Edge objects.
edges
Optional arguments
None.
Return value
A tuple of dictionary objects. Each dictionary contains ﬁve items with the following keys:
edge: An Edge object specifying the attachment line.
startFace: A Face object specifying the face associated with one end of the attachment line.
endFace: A Face object specifying the face associated with the other end of the attachment line.
startVertex: A Vertex object specifying the vertex associated with one end of the attachment line. This end is also
associated with the startFace.
endVertex: A Vertex object specifying the vertex associated with the other end of the attachment line. This end is also
associated with the endFace.
Exceptions
None.
getSurfaceSections(...)
This method returns a list of the sections assigned to the regions encompassed by the speciﬁed surface.
Required arguments
A string specifying the Surface name.
surface
Optional arguments
None.
Return value
A tuple of strings representing the section names. If no section names are found, the tuple will contain one empty
string.
Exceptions
None.
Abaqus Scripting Reference Guide
148
Assembly object

importEafFile(...)
This method imports an assembly from an EAF ﬁle into the root assembly.
Required arguments
A String specifying the path to the EAF ﬁle from which to import the assembly.
ﬁlename
Optional arguments
You use the following optional argument only to import speciﬁc instances and their associated parts.
A sequence of Ints. Each Int in the sequence is a unique identiﬁer of the occurrence in the assembly tree
or component identiﬁer associated with the part in the EAF ﬁle. If ids is an empty sequence, all occurrences
or parts will be imported. The default value is an empty sequence.
ids
Return value
None.
Exceptions
None.
importParasolidFile(...)
This method imports an assembly from the Parasolid ﬁle into the root assembly.
Required arguments
A String specifying the path to a Parasolid ﬁle from which to import the assembly.
ﬁlename
Optional arguments
You use the following optional argument only to import speciﬁc instances and their associated parts.
A sequence of Ints. Each Int in the sequence is a unique identiﬁer of the occurrence in the assembly tree
or component identiﬁer associated with the part in the EAF ﬁle. If ids is an empty sequence, all occurrences
or parts will be imported. The default value is an empty sequence.
ids
Return value
None.
Exceptions
None.
importCatiaV5File(...)
This method imports an assembly from a CATIA V5 Elysium Neutral ﬁle into the root assembly.
149
Abaqus Scripting Reference Guide
Assembly object

Required arguments
A String specifying the path to the CATIA V5 Elysium Neutral ﬁle from which to import
the assembly.
ﬁlename
Optional arguments
You use the following optional argument only to import speciﬁc instances and their associated parts.
A sequence of Ints. Each Int in the sequence is a unique identiﬁer of the occurrence in the assembly tree
or component identiﬁer associated with the part in the EAF ﬁle. If ids is an empty sequence, all occurrences
or parts will be imported. The default value is an empty sequence.
ids
Return value
None.
Exceptions
None.
importEnfFile(...)
This method imports an assembly from an Elysium Neutral ﬁle created by Pro/ENGINEER, I-DEAS, or CATIA V5
into the root assembly.
Required arguments
A String specifying the path to the Elysium Neutral ﬁle from which to import the assembly.
ﬁlename
Optional arguments
You use the following optional argument only to import speciﬁc instances and their associated parts.
A sequence of Ints. Each Int in the sequence is a unique identiﬁer of the occurrence in the assembly tree
or component identiﬁer associated with the part in the EAF ﬁle. If ids is an empty sequence, all occurrences
or parts will be imported. The default value is an empty sequence.
ids
Return value
None.
Exceptions
None.
importIdeasFile(...)
This method imports an assembly from an I-DEAS Elysium Neutral ﬁle into the root assembly.
Abaqus Scripting Reference Guide
150
Assembly object

Required arguments
A String specifying the path to the I-DEAS Elysium Neutral ﬁle from which to import the
assembly.
ﬁlename
Optional arguments
You use the following optional argument only to import speciﬁc instances and their associated parts.
A sequence of Ints. Each Int in the sequence is a unique identiﬁer of the occurrence in the assembly tree
or component identiﬁer associated with the part in the EAF ﬁle. If ids is an empty sequence, all occurrences
or parts will be imported. The default value is an empty sequence.
ids
Return value
None.
Exceptions
None.
importProEFile(...)
This method imports an assembly from a Pro/ENGINEER Elysium Neutral ﬁle into the root assembly.
Required arguments
A String specifying the path to the Pro/ENGINEER Elysium Neutral ﬁle from which to
import the assembly.
ﬁlename
Optional arguments
You use the following optional argument only to import speciﬁc instances and their associated parts.
A sequence of Ints. Each Int in the sequence is a unique identiﬁer of the occurrence in the assembly tree
or component identiﬁer associated with the part in the EAF ﬁle. If ids is an empty sequence, all occurrences
or parts will be imported. The default value is an empty sequence.
ids
Return value
None.
Exceptions
None.
makeDependent(...)
This method converts the speciﬁed part instances from independent to dependent part instances.
151
Abaqus Scripting Reference Guide
Assembly object

Required arguments
A sequence of PartInstance objects to convert to dependent part instances.
instances
Optional arguments
None.
Return value
None.
Exceptions
None.
makeIndependent(...)
This method converts the speciﬁed part instances from dependent to independent part instances.
Required arguments
A sequence of PartInstance objects to convert to independent part instances.
instances
Optional arguments
None.
Return value
None.
Exceptions
None.
printAssignedSections()
This method prints a summary of assigned connector sections.
Arguments
None.
Return value
None.
Exceptions
None.
printConnectorOrientations()
This method prints a summary of connector orientations.
Abaqus Scripting Reference Guide
152
Assembly object

Arguments
None.
Return value
None.
Exceptions
None.
projectReferencesOntoSketch(...)
This method projects the speciﬁed edges, vertices, and datum points from the assembly onto the speciﬁed
ConstrainedSketch object. The edges, vertices, and datum points appear on the sketch as reference geometry.
Required arguments
The ConstrainedSketch object on which the edges, vertices, and datum points are projected.
sketch
Optional arguments
A SymbolicConstant specifying how to limit the amount of projection. Possible values are
ALL_EDGES and COPLANAR_EDGES. If ﬁlter=COPLANAR_EDGES, edges that are coplanar
to the sketching plane are the only candidates for projection. The default value is ALL_EDGES.
ﬁlter
A Feature object specifying a marker in the feature-based history of the part. Abaqus/CAE projects
onto the sketch only the part entities that were created before the feature speciﬁed by this marker.
By default, all part entities are candidates for projection.
upToFeature
A sequence of candidate edges to be projected onto the sketch. By default, all edges are candidates
for projection.
edges
A sequence of candidate vertices to be projected onto the sketch. By default, all vertices are
candidates for projection.
vertices
Return value
None.
Exceptions
None.
queryCachedStates()
This method displays the position of geometric states relative to the sequence of features in the assembly cache. The
output is displayed in the message area.
Arguments
None.
153
Abaqus Scripting Reference Guide
Assembly object

Return value
None.
Exceptions
None.
regenerate()
This method regenerates the assembly and brings it up to date with the latest values of the assembly parameters. When
you modify features of an assembly, it might be convenient to postpone regeneration until you make all your changes,
since regeneration can be time consuming. In contrast, when you modify features of a part that is included in the
assembly, you should use this command to regenerate the assembly. When you regenerate the assembly, it will reﬂect
the changes that you made to the part.
Arguments
None.
Return value
None.
Exceptions
None.
regenerationWarnings()
This method prints any regeneration warnings associated with the features.
Arguments
None.
Return value
None.
Exceptions
None.
restore()
This method restores the parameters of all features in the assembly to the value they had before a failed regeneration.
Use the restore method after a failed regeneration, followed by a regenerate command.
Arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
154
Assembly object

Exceptions
None.
resumeAllFeatures()
This method resumes all the suppressed features in the part or assembly.
Arguments
None.
Return value
None.
Exceptions
None.
resumeFeatures(...)
This method resumes the speciﬁed suppressed features in the assembly.
Required arguments
A sequence of Strings specifying the names of features to resume.
featureNames
Optional arguments
None.
Return value
None.
Exceptions
None.
resumeLastSetFeatures()
This method resumes the last set of features to be suppressed in the assembly.
Arguments
None.
Return value
None.
Exceptions
None.
155
Abaqus Scripting Reference Guide
Assembly object

rotate(...)
This method rotates given instances by the speciﬁed amount.
Required arguments
A sequence of Strings specifying the names of instances to rotate.
instanceList
A sequence of three Floats specifying the coordinates of a point on the axis.
axisPoint
A sequence of three Floats specifying the direction of the axis.
axisDirection
A Float specifying the rotation angle in degrees. Use the right-hand rule to determine
the direction.
angle
Optional arguments
None.
Return value
None.
Exceptions
None.
translate(...)
This method translates given instances by the speciﬁed amount.
Required arguments
A sequence of Strings specifying the names of instances to translate.
instanceList
A sequence of three Floats specifying a translation vector.
vector
Optional arguments
None.
Return value
None.
Exceptions
None.
saveGeometryCache()
This method caches the current geometry, which improves regeneration performance.
Abaqus Scripting Reference Guide
156
Assembly object

Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the behavior associated with the speciﬁed assembly.
Required arguments
A Boolean specifying whether the positioning constraints in the assembly should be
regenerated together before regenerating other assembly features. The default value
is ON.
regenerateConstraintsTogether
If the assembly has position constraint features and you modify the value of
regenerateConstraintsTogether, Abaqus/CAE will regenerate the assembly features.
Optional arguments
None.
Return value
None.
Exceptions
FeatureError: Regeneration failed
If one or more features in the assembly fails to regenerate:
suppressFeatures(...)
This method suppresses speciﬁed features.
Required arguments
A sequence of Strings specifying the names of features to suppress in the assembly.
featureNames
Optional arguments
None.
Return value
None.
157
Abaqus Scripting Reference Guide
Assembly object

Exceptions
None.
unlinkInstances(...)
This method converts the speciﬁed PartInstance objects from linked child instances to regular instances. The parts
associated with the selected instances will be converted to regular parts as well.
Required arguments
A sequence of PartInstance objects to be converted to regular part instances.
instances
Optional arguments
None.
Return value
None.
Exceptions
None.
writeAcisFile(...)
This method exports the assembly to a named ﬁle in ACIS part (SAT) or assembly (ASAT) format.
Required arguments
A String specifying the name of the ﬁle to which to write. The ﬁle name's extension is used to
determine whether a part or assembly is written. Use the ﬁle extension .asat for the assembly
format.
ﬁleName
Optional arguments
A Float specifying the ACIS version. For example, the Float “12.0” corresponds to ACIS Version
12.0. The default value is the current version of ACIS.
version
Return value
None.
Exceptions
None.
writeCADParameters(...)
This method writes the parameters that were imported from the CAD system to a parameter ﬁle.
Abaqus Scripting Reference Guide
158
Assembly object

Required arguments
A String specifying the parameter ﬁle name.
paramFile
Optional arguments
A tuple of tuples each containing the part name, the parameter name, and the modiﬁed
parameter value. Default is an empty tuple.
modiﬁedParams
A Bool specifying whether to update the path of the CAD model ﬁle speciﬁed in the
parameterFile to the current directory, if the CAD model is present in the current directory.
updatePaths
Return value
None.
Exceptions
None.
lock()
This method locks the assembly. Locking the assembly prevents any further changes to the assembly that can trigger
regeneration of the assembly.
Arguments
None.
Return value
None.
Exceptions
None.
unlock()
This method unlocks the assembly. Unlocking the assembly allows it to be regenerated after any modiﬁcations to the
assembly.
Arguments
None.
Return value
None.
Exceptions
None.
159
Abaqus Scripting Reference Guide
Assembly object

setMeshNumberingControl(...)
This method changes the start node and/or element labels on the speciﬁed independent part instances before or after
Abaqus/CAE generates the meshes. For the meshed instances, Abaqus/CAE changes the node and/or element labels
while preserving the original order and incrementation.
Required arguments
A sequence of PartInstance objects to change the start node and/or element labels.
instances
Optional arguments
A positive Integer specifying the new start node label.
startNodeLabel
A positive Integer specifying the new start element label.
startElemLabel
Return value
None.
Exceptions
None.
copyMeshPattern(...)
This method copies a mesh pattern from a source region consisting of a set of shell elements or element faces onto a
target face, mapping nodes and elements in a one-one correspondence between source and target.
Required arguments
None.
Optional arguments
A sequence of MeshElement objects or a Set object containing elements and specifying the
source region.
elements
A sequence of Face objects that have associated with shell elements or element faces and
specifying the source region.
faces
A sequence of MeshFace objects specifying the source region.
elemFaces
A MeshFace object specifying the target region. The target face can be of a different part
instance.
targetFace
A sequence of MeshNode objects or a Set object containing nodes on the boundary of source
region that are to be positioned to the boundary of target face.
nodes
Abaqus Scripting Reference Guide
160
Assembly object

A sequence of three-dimensional coordinate tuples specifying the coordinates for each of the
given nodes. When speciﬁed, the number of coordinate tuples must match the number of given
coordinates
nodes, and be ordered to correspond to the given nodes in ascending order according to index.
These coordinates are positions of the nodes of a mesh that will be the target face corresponding
to nodes provided.
Return value
None.
Exceptions
None.
smoothNodes(...)
This method smooths the given nodes of a native mesh, moving them locally to a more optimal location that improves
the quality of the mesh
Required arguments
A sequence of MeshNode objects or a Set object containing nodes.
nodes
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The Assembly object can have the following members:
An Int specifying that feature parameters have been modiﬁed but that the assembly
has not been regenerated. Possible values are 0 and 1.
isOutOfDate
A Float specifying which gives an indication when the assembly was last modiﬁed.
timeStamp
An Int specifying whether the assembly is locked or not. Possible values are 0 and
1.
isLocked
A Boolean specifying whether the positioning constraints in the assembly should be
regenerated together before regenerating other assembly features. The default value
is ON.
regenerateConstraintsTogether
161
Abaqus Scripting Reference Guide
Assembly object

If the assembly has position constraint features and you modify the value of
regenerateConstraintsTogether, Abaqus/CAE will regenerate the assembly features.
A VertexArray object specifying all the vertices existing at the assembly level. This
member does not provide access to the vertices at the instance level.
vertices
An EdgeArray object specifying all the edges existing at the assembly level. This
member does not provide access to the edges at the instance level.
edges
A MeshElementArray object specifying all the elements existing at the assembly
level. This member does not provide access to the elements at the instance level.
elements
A MeshNodeArray object specifying all the nodes existing at the assembly level.
This member does not provide access to the nodes at the instance level.
nodes
A repository of PartInstance objects.
instances
A repository of Datum objects specifying all Datum objects in the assembly.
datums
A repository of Feature objects specifying all Feature objects in the assembly.
features
A repository of Feature objects specifying all Feature objects in the assembly.
featuresById
The Feature objects in the featuresById repository are the same as the Feature objects
in the features repository. However, the key to the objects in the featuresById
repository is an integer specifying the ID, whereas the key to the objects in the features
repository is a string specifying the name.
A repository of Surface objects specifying for more information, see Region
commands.
surfaces
A repository of Surface objects specifying for more information, see Region
commands.
allSurfaces
A repository of Surface objects specifying picked regions.
allInternalSurfaces
A repository of Set objects.
sets
A repository of Set objects specifying for more information, see Region commands.
allSets
A repository of Set objects specifying picked regions.
allInternalSets
A repository of Skin objects specifying the skins created on the assembly.
skins
A repository of Stringer objects specifying the stringers created on the assembly.
stringers
A repository of ReferencePoint objects.
referencePoints
A repository of ModelInstance objects.
modelInstances
Abaqus Scripting Reference Guide
162
Assembly object

A PartInstance object specifying the PartInstances and A ModelInstance object
specifying the ModelInstances.
allinstances
An EngineeringFeature object.
engineeringFeatures
A String specifying the name of the model to which the assembly belongs.
modelName
A ConnectorOrientationArray object.
connectorOrientations
A SectionAssignmentArray object.
sectionAssignments
163
Abaqus Scripting Reference Guide
Assembly object

ConnectorOrientation object
The ConnectorOrientation object is used to assign a connector orientation to a connector.
Access
import assembly
mdb.models[name].rootAssembly.connectorOrientations[i]
import odbAccess
session.odbs[name].rootAssembly.connectorOrientations[i]
ConnectorOrientation(...)
This method creates a ConnectorOrientation object.
Path
mdb.models[name].rootAssembly.ConnectorOrientation
session.odbs[name].rootAssembly.ConnectorOrientation
Required arguments
A Set object specifying the region to which the orientation is assigned.
region
Optional arguments
A DatumCsys object specifying the local coordinate system of the ﬁrst connector point. This
value may be None, indicating the global coordinate system.
localCsys1
A SymbolicConstant specifying the axis of a datum coordinate system about which an
additional rotation is applied. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default
value is AXIS_1.
axis1
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle1
A Boolean specifying whether or not the second connector point is to use the same local
coordinate system, axis, and angle as the ﬁrst point. The default value is ON.
orient2sameAs1
A DatumCsys object specifying the local coordinate system of the second connector point.
This value may be None, indicating the global coordinate system.
localCsys2
A SymbolicConstant specifying the axis of a datum coordinate system about which an
additional rotation is applied. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default
value is AXIS_1.
axis2
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle2
Return value
A ConnectorOrientation object.
Abaqus Scripting Reference Guide
164
ConnectorOrientation object

Exceptions
None.
setValues(...)
This method modiﬁes the ConnectorOrientation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorOrientation  method.
Return value
None.
Exceptions
None.
Members
The ConnectorOrientation object has members with the same names and descriptions as the arguments to the
ConnectorOrientation  method.
165
Abaqus Scripting Reference Guide
ConnectorOrientation object

Feature object
The following commands operate on Feature objects. For more information about the Feature object, see Feature
object.
Access
import assembly
AttachmentLines(...)
This method creates a Feature object by creating attachment lines between the given set of source and target faces.
The given points are ﬁrst projected onto the source faces using the speciﬁed projection method. The points are then
projected normal to the source faces onto the target faces. The user can specify the number of projections or the length
of projection vector for projection onto the target faces. The lines are then created between the source face and the
closest target face. Subsequent lines are created between the target faces.
Path
mdb.models[name].rootAssembly.AttachmentLines
Required arguments
A String specifying a unique Feature name.
name
A tuple of points. Each point can be a Vertex, Datum point, Reference point, an
Attachment point, orphan mesh Node, or an Interesting point object.
points
A sequence of Face objects specifying the geometry faces onto which the points are
to be projected.
sourceFaces
A sequence of MeshFace objects specifying the orphan mesh element faces onto which
the points are to be projected.
sourceElementFaces
A sequence of Face objects specifying the geometry faces on which the attachment
lines will terminate.
targetFaces
A sequence of MeshFace objects specifying the orphan mesh element faces on which
the attachment lines will terminate.
targetElementFaces
Optional arguments
A SymbolicConstant specifying the method to be used to project onto source faces.
Possible values are PROJECT_BY_PROXIMITY and PROJECT_BY_DIRECTION.
The default value is PROJECT_BY_PROXIMITY.
projectionMethod
A point specifying the start point of the projection direction to project onto source
faces. The point can be a Vertex, Datum point, Reference point, Attachment point,
projectionDirStartPt
orphan mesh Node, Interesting Point object, or a tuple of Floats representing the
coordinates of a point.
Abaqus Scripting Reference Guide
166
Feature object

A point specifying the end point of the projection direction to project onto source faces.
The point can be a Vertex, Datum point, Reference point, Attachment point, orphan
projectionDirEndPt
mesh Node, Interesting point object, or a tuple of Floats representing the coordinates
of a point.
A SymbolicConstant specifying the method to be used to project onto target faces.
Possible values are PROJECT_BY_NUMBER and PROJECT_BY_DISTANCE. The
default value is PROJECT_BY_NUMBER.
sourceToTargetProjMethod
An integer specifying the maximum number of layers each point should be projected
onto when the source to target projection method is PROJECT_BY_NUMBER.
numProjections
A ﬂoat specifying the maximum distance of the projection vector when the source to
target projection method is PROJECT_BY_DISTANCE.
projectionDistance
A Boolean specifying whether the computed projection direction from the source to
the target faces should be ﬂipped.
ﬂipSourceToTargetDirection
A String specifying a unique set name.
setName
Return value
A Feature object.
Exceptions
None.
Coaxial(...)
This method moves an instance so that its selected face is coaxial with the selected face of a ﬁxed instance.
Path
mdb.models[name].rootAssembly.Coaxial
Required arguments
A cylindrical or conical Face on the part instance to be moved.
movableAxis
A cylindrical or conical Face on the part instance that remains ﬁxed.
ﬁxedAxis
A Boolean specifying whether the axes are forward aligned (OFF) or reverse aligned
(ON).
ﬂip
Optional arguments
None.
167
Abaqus Scripting Reference Guide
Feature object

Return value
A Feature object.
Exceptions
AbaqusException.
CoincidentPoint(...)
This method moves an instance so that a speciﬁed point is coincident with a speciﬁed point of a ﬁxed instance.
Path
mdb.models[name].rootAssembly.CoincidentPoint
Required arguments
A Vertex, a Datum point, or a ReferencePoint or a mesh node from an orphan mesh on
the part instance to be moved.
movablePoint
A Vertex, a Datum point, or a ReferencePoint or a mesh node from an orphan mesh on
the part instance to remain ﬁxed.
ﬁxedPoint
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
EdgeToEdge(...)
This method moves an instance so that its edge is parallel to an edge of a ﬁxed instance.
Path
mdb.models[name].rootAssembly.EdgeToEdge
Required arguments
A straight Edge, a Datum axis, or an element edge from an orphan mesh on the part instance
to be moved.
movableAxis
A straight Edge, a Datum axis, or an element edge from an orphan mesh on the part instance
to remain ﬁxed.
ﬁxedAxis
Abaqus Scripting Reference Guide
168
Feature object

A Boolean specifying whether the edges are forward aligned (OFF) or reverse aligned
(ON).
ﬂip
A Float specifying the distance between the two edges (for two-dimensional and
axisymmetric instances only).
clearance
Optional arguments
None.
Return value
A Feature Object.
Exceptions
AbaqusException.
FaceToFace(...)
This method moves an instance so that its face is coincident with a face of a ﬁxed instance.
Path
mdb.models[name].rootAssembly.FaceToFace
Required arguments
A planar face, a Datum plane, or a face from an orphan mesh on the part instance to be
moved.
movablePlane
A planar face, a Datum plane, or a face from an orphan mesh on the part instance to
remain ﬁxed.
ﬁxedPlane
A Boolean specifying whether the normals to the faces are forward aligned (OFF) or
reverse aligned (ON).
ﬂip
A Float specifying the distance between the two faces.
clearance
Optional arguments
None.
Return value
A Feature Object.
Exceptions
AbaqusException.
169
Abaqus Scripting Reference Guide
Feature object

ParallelCsys(...)
This method moves an instance so that its Datum coordinate system is parallel to a Datum coordinate system of a ﬁxed
instance.
Path
mdb.models[name].rootAssembly.ParallelCsys
Required arguments
A Datum coordinate system on the part instance to be moved.
movableCsys
A Datum coordinate system on the part instance to remain ﬁxed.
ﬁxedCsys
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
ParallelEdge(...)
This method moves an instance so that its edge is parallel to an edge of a ﬁxed instance.
Path
mdb.models[name].rootAssembly.ParallelEdge
Required arguments
A straight Edge, a Datum axis, or an element edge from an orphan mesh on the part instance
to be moved.
movableAxis
A straight Edge, a Datum axis, or an element edge from an orphan mesh on the part instance
to remain ﬁxed.
ﬁxedAxis
A Boolean specifying whether the edges are forward aligned (OFF) or reverse aligned
(ON).
ﬂip
Optional arguments
None.
Abaqus Scripting Reference Guide
170
Feature object

Return value
A Feature object.
Exceptions
AbaqusException.
ParallelFace(...)
This method moves an instance so that its face is parallel to a face of a ﬁxed instance.
Path
mdb.models[name].rootAssembly.ParallelFace
Required arguments
A planar face, a Datum plane, or a face from an orphan mesh on the part instance to be
moved.
movablePlane
A planar face, a Datum plane, or a face from an orphan mesh on the part instance to
remain ﬁxed.
ﬁxedPlane
A Boolean specifying whether the normals to the faces are forward aligned (OFF) or
reverse aligned (ON).
ﬂip
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
171
Abaqus Scripting Reference Guide
Feature object

PartInstance object
A PartInstance object is an instance of a Part object.
Access
import assembly
mdb.models[name].rootAssembly.allInstances[name]
mdb.models[name].rootAssembly.instances[name]
Instance(...)
This method creates a PartInstance object and puts it into the instances repository.
Path
mdb.models[name].rootAssembly.Instance
Required arguments
A String specifying the repository key. The name must be a valid Abaqus object name.
name
A Part object to be instanced. If the part does not exist, no PartInstance object is created.
part
Optional arguments
A Boolean specifying whether to apply an auto offset to the new part instance that will offset
it from existing part instances. The default value is OFF.
autoOffset
A Boolean specifying whether the part instance is dependent or independent. If
dependent=OFF, the part instance is independent. The default value is OFF.
dependent
Return value
A PartInstance object.
Exceptions
None.
InstanceFromBooleanCut(...)
This method creates a PartInstance in the instances repository after subtracting or cutting the geometries of a group of
part instances from that of a base part instance.
Path
mdb.models[name].rootAssembly.InstanceFromBooleanCut
Abaqus Scripting Reference Guide
172
PartInstance object

Required arguments
A String specifying the repository key. The name must be a valid Abaqus object
name.
name
A PartInstance specifying the base instance from which to cut other instances.
instanceToBeCut
A sequence of PartInstance objects specifying the instances with which to cut the
base instance.
cuttingInstances
Optional arguments
A SymbolicConstant specifying whether the original instances should be suppressed or
deleted after the merge operation. Possible values are SUPPRESS or DELETE. The default
value is SUPPRESS.
originalInstances
Return value
A PartInstance object.
Exceptions
None.
InstanceFromBooleanMerge(...)
This method creates a PartInstance in the instances repository after merging two or more part instances.
Path
mdb.models[name].rootAssembly.InstanceFromBooleanMerge
Required arguments
A String specifying the repository key. The name must be a valid Abaqus object name.
name
A sequence of PartInstance objects specifying the part instances to merge.
instances
Optional arguments
A Boolean specifying whether the boundary intersections of Abaqus native part instances
should be retained after the merge operation. The default value is False.
keepIntersections
A SymbolicConstant specifying whether the original instances should be suppressed or
deleted after the merge operation. Possible values are SUPPRESS or DELETE. The default
value is SUPPRESS.
originalInstances
A SymbolicConstant specifying whether geometry or mesh of the speciﬁed part instances
is to be merged. Possible values are GEOMETRY, MESH or BOTH. The default value
is GEOMETRY.
domain
173
Abaqus Scripting Reference Guide
PartInstance object

A SymbolicConstant specifying which nodes of the speciﬁed part instances should be
considered for merging. This argument is only applicable if domain is MESH. Possible
mergeNodes
values are BOUNDARY_ONLY, ALL, or NONE. The default value is
BOUNDARY_ONLY.
A Float specifying the maximum distance between nodes of the speciﬁed part instances
that will be merged and replaced with a single node in the new part. The location of the
nodeMergingTolerance
new node is the average position of the deleted nodes. This argument is only applicable
if domain is MESH. The default value is 10–6.
A Boolean specifying whether elements with the same connectivity in the new part will
be merged into a single element. This argument is only applicable if domain is MESH.
The default value is True.
removeDuplicateElements
Return value
A PartInstance object.
Exceptions
None.
LinearInstancePattern(...)
This method creates multiple PartInstance objects in a linear pattern and puts them into the instances repository.
Path
mdb.models[name].rootAssembly.LinearInstancePattern
Required arguments
A sequence of Strings specifying the names of instances to pattern.
instanceList
An Int specifying the total number of instances, including the original instances, that
appear along the ﬁrst direction in the pattern.
number1
A Float specifying the spacing between instances along the ﬁrst direction in the pattern.
spacing1
An Int specifying the total number of instances, including the original instances, that
appear along the second direction in the pattern.
number2
A Float specifying the spacing between instances along the second direction in the pattern.
spacing2
Optional arguments
A sequence of three Floats specifying a vector along the ﬁrst direction. The default value
is (1.0, 0.0, 0.0).
direction1
Abaqus Scripting Reference Guide
174
PartInstance object

A sequence of three Floats specifying a vector along the second direction. The default
value is (0.0, 1.0, 0.0).
direction2
Return value
A sequence of PartInstance objects.
Exceptions
None.
RadialInstancePattern(...)
This method creates multiple PartInstance objects in a radial pattern and puts them into the instances repository.
Path
mdb.models[name].rootAssembly.RadialInstancePattern
Required arguments
A sequence of Strings specifying the names of instances to pattern.
instanceList
An Int specifying the total number of instances, including the original instances, that appear
in the radial pattern.
number
A Float specifying the total angle in degrees between the ﬁrst and last instance in the pattern.
A positive angle corresponds to a counter-clockwise direction. The values 360° and −360°
totalAngle
represent a special case where the pattern makes a full circle. In this case, because the copy
would overlay the original, the copy is not placed at the last position. Possible values are −360.0
totalAngle  360.0.
Optional arguments
A sequence of three Floats specifying the center of the radial pattern. The default value is (0.0,
0.0, 0.0).
point
A sequence of three Floats specifying the central axis of the radial pattern. The default value is
(0.0, 0.0, 1.0).
axis
Return value
A sequence of PartInstance objects.
Exceptions
None.
175
Abaqus Scripting Reference Guide
PartInstance object

checkGeometry(...)
This method checks the validity of the geometry of the part instance and prints a count of all topological entities on
the part instance (faces, edges, vertices, etc.).
Required arguments
None.
Optional arguments
A Boolean specifying whether detailed output will be printed to the replay ﬁle. The default value
is OFF.
detailed
An Int specifying which level of checking is performed. Values can range from 20 to 70, with higher
values reporting less and less important errors. The default value is 20, which reports all critical
level
errors. When the default value is used, the stored validity status is updated to agree with the result
of this check.
Return value
None.
Exceptions
The geometry of dependent part
instances cannot be changed.
An exception is thrown if this is a dependent part instance and level was
either not speciﬁed or was set to 20, because the validity status cannot be
updated for a dependent part instance. In this case, this command should
be called on the Part instead.
Contact(...)
This method translates an instance along the speciﬁed direction until it is in contact with a ﬁxed instance.
Required arguments
A sequence of Face or Edge objects on the part instance to be moved.
movableList
A sequence of Face or Edge objects on the part instance to remain ﬁxed.
ﬁxedList
A sequence of three Floats specifying the direction of contact.
direction
A Float specifying the distance between the two faces along the direction of contact.
clearance
Optional arguments
A Boolean specifying how Abaqus calculates the contact. If isFaceEdges is OFF, contact is
computed from the movable face to the ﬁxed face. If isFaceEdges is ON, contact is computed
using only the edges of the movable face and not its interior. The default value is OFF.
isFaceEdges
Abaqus Scripting Reference Guide
176
PartInstance object

Return value
A Feature object.
Exceptions
None.
ConvertConstraints()
This method converts the position constraints of an instance to absolute positions. The method deletes the constraint
features on the instance but preserves the position in space.
Arguments
None.
Return value
None.
Exceptions
None.
getPosition()
This method prints the sum of the translations and rotations applied to the PartInstance object.
Arguments
None.
Return value
None.
Exceptions
None.
getRotation()
This method returns a tuple including the point of rotation, axis of rotation, and rotation angle (in degrees).
Arguments
None.
Return value
A tuple including the point of rotation, axis of rotation, and rotation angle (in degrees).
Exceptions
None.
177
Abaqus Scripting Reference Guide
PartInstance object

getTranslation()
This method returns a tuple of three Floats representing translation in the X-, Y-, and Z-directions.
Arguments
None.
Return value
A tuple of three Floats representing the translation.
Exceptions
None.
replace(...)
This method replaces one instance with an instance of another part.
Required arguments
A Part object specifying which Part will be instanced in place of the original Part.
instanceOf
Optional arguments
A Boolean specifying whether to apply existing constraints on the new instance or to position
the new instance in the same place as the original instance. The default value is True. A value
applyConstraints
of False indicates that constraints applies to the instance are deleted will be deleted from the
feature list.
Return value
None.
Exceptions
None.
rotateAboutAxis(...)
This method translates an instance by the speciﬁed amount.
Required arguments
A sequence of three Floats specifying the X-, Y-, and Z-coordinates of a point on the
axis.
axisPoint
A sequence of three Floats specifying the direction vector of the axis.
axisDirection
Abaqus Scripting Reference Guide
178
PartInstance object

A Float specifying the rotation angle in degrees. Use the right-hand rule to determine
the direction.
angle
Optional arguments
None.
Return value
None.
Exceptions
None.
translate(...)
This method translates an instance by the speciﬁed amount.
Required arguments
A sequence of three Floats specifying a translation vector.
vector
Optional arguments
None.
Return value
None.
Exceptions
None.
translateTo(...)
This method translates an instance along the speciﬁed direction until it is in contact with a ﬁxed instance.
Required arguments
A sequence of Face or Edge objects on the part instance to be moved.
movableList
A sequence of Face or Edge objects on the part instances to remain ﬁxed.
ﬁxedList
A sequence of three Floats specifying the direction of contact.
direction
A Float specifying the distance between the two faces along the direction of contact.
clearance
179
Abaqus Scripting Reference Guide
PartInstance object

Optional arguments
A sequence of three Floats specifying a translation vector. If this argument is speciﬁed, the movable
instance will be translated by the speciﬁed amount without solving for the actual contact.
vector
Return value
A Feature object.
Exceptions
None.
Members
The PartInstance object can have the following members:
A String specifying the repository key. The name must be a valid Abaqus object name.
name
A Boolean specifying whether the part instance is dependent or independent. If
dependent=OFF, the part instance is independent. The default value is OFF.
dependent
A Boolean specifying whether the part instance is excluded from the simulation. If
excludedFromSimulation=ON, the part instance is excluded from the simulation. The
default value is OFF.
excludedFromSimulation
A Boolean specifying the validity of the geometry of the instance. The value is computed,
but it can be set to ON to perform feature and mesh operations on an invalid instance.
There is no guarantee that such operations will work if the instance was originally invalid.
geometryValidity
A SymbolicConstant specifying the part type. Possible values are
DEFORMABLE_BODY, EULERIAN, DISCRETE_RIGID_SURFACE, and
ANALYTIC_RIGID_SURFACE.
analysisType
An Int specifying the reference node number. This member is valid only if
analysisType=DISCRETE_RIGID_SURFACE or ANALYTIC_RIGID_SURFACE.
referenceNode
A Part object specifying the instanced part.
part
A repository of Set objects specifying the sets created on the part. For more information,
see Region commands.
sets
A repository of Surface objects specifying the surfaces created on the part. For more
information, see Region commands.
surfaces
A repository of Skin objects specifying the skins created on the part. For more information,
see Region commands.
skins
A repository of Stringer objects specifying the stringers created on the part. For more
information, see Region commands.
stringers
Abaqus Scripting Reference Guide
180
PartInstance object

A VertexArray object.
vertices
An IgnoredVertexArray object.
ignoredVertices
An EdgeArray object.
edges
An IgnoredEdgeArray object.
ignoredEdges
A FaceArray object.
faces
A CellArray object.
cells
A repository of Datum objects.
datums
A MeshElementArray object.
elements
A MeshNodeArray object.
nodes
A repository of MeshFace objects specifying all the element faces in the part instance.
For a given element and a given face index within that element, the corresponding
elemFaces
MeshFace object can be retrieved from the repository by using the key calculated as (i*8
+ j), where i and j are zero-based element and face indices, respectively.
A MeshFaceArray object.
elementFaces
A repository of MeshEdge objects specifying all the element edges in the part instance.
For a given element and a given edge index on a given face within that element, the
elemEdges
corresponding MeshEdge object can be retrieved from the repository by using the key
calculated as (i*32 + j*4 + k), where i, j, and k are zero-based element, face, and edge
indices, respectively.
A MeshEdgeArray object.
elementEdges
A repository of ReferencePoint objects.
referencePoints
A String specifying the name of the part from which the instance was created.
partName
181
Abaqus Scripting Reference Guide
PartInstance object

ModelInstance object
A ModelInstance object is an instance of a Model.
Access
import assembly
mdb.models[name].rootAssembly.modelInstances[i]
Instance(...)
This method creates a ModelInstance object and puts it into the instances repository.
Path
mdb.models[name].rootAssembly.Instance
Required arguments
The repository key. The name must be a valid Abaqus object name.
name
A Model object to be instanced. If the model does not exist, no ModelInstance object is
created.
model
Optional arguments
A Boolean specifying whether to apply an auto offset to the new instance that will offset it
from existing instances. The default value is OFF.
autoOffset
Return value
A ModelInstance object.
Exceptions
None.
ConvertConstraints()
This method converts the position constraints of an instance to absolute positions. The method deletes the constraint
features on the instance but preserves the position in space.
Arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
182
ModelInstance object

Exceptions
None.
getPosition()
This method prints the sum of the translations and rotations applied to the ModelInstance object.
Arguments
None.
Return value
None.
Exceptions
None.
replace(...)
This method replaces one instance with an instance of another model.
Required arguments
A Model object to be instanced. If the model does not exist, no ModelInstance object
is created.
instanceOf
Optional arguments
A Boolean specifying whether to apply existing constraints on the new instance or to position
the new instance in the same place as the original instance. The default value is True. A value
applyConstraints
of False indicates that constraints applies to the instance are deleted will be deleted from the
feature list.
Return value
None.
Exceptions
None.
translate(...)
This method translates an instance by the speciﬁed amount.
Required arguments
A sequence of three Floats specifying a translation vector.
vector
183
Abaqus Scripting Reference Guide
ModelInstance object

Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The ModelInstance object can have the following members:
A repository of Set objects specifying the sets created on the assembly. For more
information, see Region commands.
sets
A repository of Surface objects specifying the surfaces created on the assembly. For
more information, see Region commands.
surfaces
A VertexArray object.
vertices
An EdgeArray object.
edges
A MeshElementArray object.
elements
A MeshNodeArray object.
nodes
A repository of Datum objects.
datums
A repository of ReferencePoint objects.
referencePoints
Abaqus Scripting Reference Guide
184
ModelInstance object

Model object
The following commands operate on Model objects. For more information about the Model object, see Model object.
Access
import assembly
Instance(...)
This method copies a PartInstance object from the speciﬁed model and creates a new PartInstance object.
Path
mdb.models[name].Instance
Required arguments
A String specifying the repository key.
name
A PartInstance object to be copied.
objectToCopy
Optional arguments
None.
Return value
A Model object.
Exceptions
None.
convertAllSketches(...)
This method converts all sketches from Abaqus 6.5 or earlier to the equivalent ConstrainedSketch objects.
Required arguments
None.
Optional arguments
A Boolean specifying if all the features in assembly as well as in all the parts in the
model should be regenerated after the conversion. The default value is True.
regenerate
A Boolean specifying whether sketches in analytic rigid parts should be converted even
if they cause the orientation of surfaces deﬁned on them to be ﬂipped. The default value
is True.
convertReversedSketches
185
Model object

Return value
A list of strings describing any warnings or errors encountered during the conversion process.
Exceptions
None.
linkInstances(...)
This method links the selected PartInstance objects to the corresponding PartInstance objects from the speciﬁed
models. If all instances of a Part are selected for linking, the Part will be linked as well. If not, a new linked child Part
object will be created and added to the repository.
Required arguments
A tuple of tuples containing the instance name to be linked and the corresponding
PartInstance object to which it will be linked.
instancesMap
Optional arguments
None.
Return value
A list of strings describing any warnings or errors encountered during the conversion process.
Exceptions
None.
Abaqus Scripting Reference Guide
186
Model object

Basic geometry commands
The basic geometry commands create geometric entities that are referenced by Part objects, Instance objects,
and GeometrySet objects.
In this section:
•
Cell object
•
CellArray object
•
Edge object
•
EdgeArray object
•
Face object
•
FaceArray object
•
IgnoredEdge object
•
IgnoredEdgeArray object
•
IgnoredVertex object
•
IgnoredVertexArray object
•
InterestingPoint object
•
ModelDot object
•
ReferencePoint object
•
Transform object
•
Vertex object
•
VertexArray object
187

Cell object
Cells are volumetric regions of geometry.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].cells[i]
mdb.models[name].parts[name].allSets[name].cells[i]
mdb.models[name].parts[name].cells[i]
mdb.models[name].parts[name].sets[name].cells[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].cells[i]
mdb.models[name].rootAssembly.allInstances[name].sets[name].cells[i]
mdb.models[name].rootAssembly.allInternalSets[name].cells[i]
mdb.models[name].rootAssembly.allSets[name].cells[i]
mdb.models[name].rootAssembly.instances[name].cells[i]
mdb.models[name].rootAssembly.instances[name].sets[name].cells[i]
mdb.models[name].rootAssembly.modelInstances[i].sets[name].cells[i]
mdb.models[name].rootAssembly.sets[name].cells[i]
getSize(...)
This method returns a Float indicating the volume of the cell.
Required arguments
None.
Optional arguments
A Boolean that determines whether a verbose output is to be printed. The default is
True.
printResults
Return value
A Float.
Exceptions
None.
getFaces()
This method returns a sequence consisting of the face IDs of the faces which bound the cell.
Arguments
None.
Return value
A tuple of integers.
Abaqus Scripting Reference Guide
188
Cell object

Exceptions
None.
getEdges()
This method returns a sequence consisting of the edge IDs of the edges on the cell.
Arguments
None.
Return value
A tuple of integers.
Exceptions
None.
getVertices()
This method returns a sequence consisting of the vertex IDs of the vertices on the cell.
Arguments
None.
Return value
A tuple of integers.
Exceptions
None.
getAdjacentCells()
This method returns an array of cell objects that share at least one face of the cell.
Arguments
None.
Return value
A CellArray object which is a sequence of Cell objects.
Exceptions
None.
getNodes()
This method returns an array of node objects that are associated with the cell.
189
Abaqus Scripting Reference Guide
Cell object

Arguments
None.
Return value
A MeshNodeArray object which is a sequence of MeshNode objects.
Exceptions
None.
getElements()
This method returns an array of element objects that are associated with the cell.
Arguments
None.
Return value
A MeshElementArray object which is a sequence of MeshElement objects.
Exceptions
None.
getCADAttributes(...)
This method returns an array of CAD attribute strings associated with the cell when the part was created from CAD
data.
Arguments
None.
Return value
An array of String.
Exceptions
None.
Members
The Cell object has the following members:
An Int specifying the index of the cell in the CellArray.
index
A Boolean specifying whether the cell belongs to the reference representation of the
Part or Instance.
isReferenceRep
Abaqus Scripting Reference Guide
190
Cell object

A tuple of Floats specifying the X-, Y-, and Z-coordinates of a point located on the
cell.
pointOn
A tuple of Floats specifying the name of the feature that created this cell.
featureName
A tuple of Floats specifying the name of the part instance for this cell (if applicable).
instanceName
191
Abaqus Scripting Reference Guide
Cell object

CellArray object
The CellArray is a sequence of Cell objects.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].cells
mdb.models[name].parts[name].allSets[name].cells
mdb.models[name].parts[name].cells
mdb.models[name].parts[name].sets[name].cells
import assembly
mdb.models[name].rootAssembly.allInstances[name].cells
mdb.models[name].rootAssembly.allInstances[name].sets[name].cells
mdb.models[name].rootAssembly.allInternalSets[name].cells
mdb.models[name].rootAssembly.allSets[name].cells
mdb.models[name].rootAssembly.instances[name].cells
mdb.models[name].rootAssembly.instances[name].sets[name].cells
mdb.models[name].rootAssembly.modelInstances[i].sets[name].cells
mdb.models[name].rootAssembly.sets[name].cells
CellArray(...)
This method creates a CellArray object.
Path
part.CellArray
Required arguments
A list of Cell objects.
cells
Optional arguments
None.
Return value
A CellArray object.
Exceptions
None.
findAt(...)
This method returns the object or objects in the CellArray located at the given coordinates. findAt initially uses the
ACIS tolerance of 1E-6. As a result, findAt returns any entity that is at the arbitrary point speciﬁed or at a distance
of less than 1E-6 from the arbitrary point. If nothing is found, findAt uses the tolerance for imprecise geometry
(applicable only for imprecise geometric entities). The arbitrary point must not be shared by a second cell. If two cells
intersect or coincide at the arbitrary point, findAt chooses the ﬁrst cell that it encounters, and you should not rely
on the return value being consistent.
Abaqus Scripting Reference Guide
192
CellArray object

findAt will always try to ﬁnd objects among all the cells in the part or assembly instance and will not restrict itself
to a subset even if the CellArray represents such subset.
Required arguments
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the object to ﬁnd.
coordinates
findAt returns either a Cell object or a sequence of Cell objects based on the type of input. If coordinates
is a sequence of Floats, findAt returns the Cell object at that point. If coordinates is a sequence of
sequence of Floats, findAt returns a sequence of Cell objects at the given locations. The sequence of
sequence of Floats must be a sequence of sequence of point and normal data, not a sequence of point
data. For example,
cells1 = myCrackedBlockInstance.cells.findAt(
                            ((5.5, -8.3, 294.2),),
                            ((12.1, -8.3, 287.8),),
                            ((14.4, -10.4, 285.5),),)
Optional arguments
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
A Cell object.
Exceptions
None.
getExteriorFaces()
This method returns the cell faces on the exterior of the CellArray. That is, it returns the faces that are referenced by
exactly one of the cells in the sequence.
Arguments
None.
Return value
A FaceArray object representing the faces on the exterior of the cells.
Exceptions
None.
getSequenceFromMask(...)
This method returns the object or objects in the CellArray identiﬁed using the speciﬁed mask. This command is
generated when the JournalOptions are set to COMPRESSEDINDEX. When large number of objects are involved,
this method is highly efﬁcient.
193
Abaqus Scripting Reference Guide
CellArray object

Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
A Cell object or a sequence of Cell objects.
Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
getByBoundingBox(...)
This method returns an array of cell objects that lie within the speciﬁed bounding box.
Required arguments
None.
Optional arguments
A ﬂoat specifying the minimum X-boundary of the bounding box.
xMin
A ﬂoat specifying the minimum Y-boundary of the bounding box.
yMin
A ﬂoat specifying the minimum Z-boundary of the bounding box.
zMin
A ﬂoat specifying the maximum X-boundary of the bounding box.
xMax
A ﬂoat specifying the maximum Y-boundary of the bounding box.
yMax
Abaqus Scripting Reference Guide
194
CellArray object

A ﬂoat specifying the maximum Z-boundary of the bounding box.
zMax
Return value
A CellArray object, which is a sequence of Cell objects.
Exceptions
None.
getByBoundingCylinder(...)
This method returns an array of cell objects that lie within the speciﬁed bounding cylinder.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the ﬁrst end of the cylinder.
center1
A tuple of the X-, Y-, and Z-coordinates of the center of the second end of the cylinder.
center2
A ﬂoat specifying the radius of the cylinder.
radius
Optional arguments
None.
Return value
A CellArray object, which is a sequence of Cell objects.
Exceptions
None.
getByBoundingSphere(...)
This method returns an array of cell objects that lie within the speciﬁed bounding sphere.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the sphere.
center
A ﬂoat specifying the radius of the sphere.
radius
Optional arguments
None.
Return value
A CellArray object, which is a sequence of Cell objects.
195
Abaqus Scripting Reference Guide
CellArray object

Exceptions
None.
getBoundingBox()
This method returns a dictionary of two tuples representing minimum and maximum boundary values of the bounding
box of the minimum size containing the cell sequence.
Arguments
None.
Return value
A Dictionary object with the following items:
low: a tuple of three ﬂoats representing the minimum X-, Y-, and Z-boundary values of the bounding box.
high: a tuple of three ﬂoats representing the maximum X-, Y-, and Z-boundary values of the bounding box.
Exceptions
None.
Members
The CellArray object has no members.
Abaqus Scripting Reference Guide
196
CellArray object

Edge object
Edges are one-dimensional regions of geometry.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].edges[i]
mdb.models[name].parts[name].allInternalSurfaces[name].edges[i]
mdb.models[name].parts[name].allSets[name].edges[i]
mdb.models[name].parts[name].allSurfaces[name].edges[i]
mdb.models[name].parts[name].edges[i]
mdb.models[name].parts[name].sets[name].edges[i]
mdb.models[name].parts[name].surfaces[name].edges[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].edges[i]
mdb.models[name].rootAssembly.allInstances[name].sets[name].edges[i]
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].edges[i]
mdb.models[name].rootAssembly.allInternalSets[name].edges[i]
mdb.models[name].rootAssembly.allInternalSurfaces[name].edges[i]
mdb.models[name].rootAssembly.allSets[name].edges[i]
mdb.models[name].rootAssembly.allSurfaces[name].edges[i]
mdb.models[name].rootAssembly.edges[i]
mdb.models[name].rootAssembly.instances[name].edges[i]
mdb.models[name].rootAssembly.instances[name].sets[name].edges[i]
mdb.models[name].rootAssembly.instances[name].surfaces[name].edges[i]
mdb.models[name].rootAssembly.modelInstances[i].edges[i]
mdb.models[name].rootAssembly.modelInstances[i].sets[name].edges[i]
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name]\
.edges[i]
mdb.models[name].rootAssembly.sets[name].edges[i]
mdb.models[name].rootAssembly.surfaces[name].edges[i]
isTangentFlipped()
This method determines whether the tangent to the edge is ﬂipped from its default direction by the use of the
flipTangent method on a Part object.
Arguments
None.
Return value
A Boolean value of True if the tangent is ﬂipped and False if not.
Exceptions
None.
getCurvature(...)
This method returns curvature information at a location on the edge.
197
Edge object

Required arguments
A Float specifying the normalized parameter location on the edge where the curvature is to be
computed. This argument is mutually exclusive with the argument point.
parameter
A tuple of X-, Y-, and Z-coordinates of a point at which the curvature is to be computed. If point
does not lie on the edge an attempt is made to project it onto the edge and use the projected point.
point
Optional arguments
None.
Return value
A dictionary with keys 'evaluationPoint', 'curvature', 'radius', and 'tangent', where 'evaluationPoint' speciﬁes the location
at which the curvature was computed; 'curvature' speciﬁes the curvature vector at that location; 'radius' is the radius
of curvature; and 'tangent' speciﬁes the tangent to the edge at that location.
Exceptions
The given edge is straight.
getFaces()
This method returns a sequence consisting of the face ids of the faces which share this edge.
Arguments
None.
Return value
A tuple of integers.
Exceptions
None.
getAdjacentEdges()
This method returns an array of Edge objects that share at least one vertex of the edge.
Arguments
None.
Return value
An EdgeArray object, which is a sequence of Edge objects.
Exceptions
None.
Abaqus Scripting Reference Guide
198
Edge object

getEdgesByEdgeAngle(...)
This method returns an array of Edge objects that are obtained by recursively ﬁnding adjacent edges that are at an
angle of less than or equal to the speciﬁed face angle.
Required arguments
A ﬂoat specifying the value of the face angle in degrees.
angle
Optional arguments
None.
Return value
An EdgeArray object, which is a sequence of Edgeobjects.
Exceptions
None.
getNodes()
This method returns an array of node objects that are associated with the edge.
Arguments
None.
Return value
A MeshNodeArray object, which is a sequence of MeshNode objects.
Exceptions
None.
getElements()
This method returns an array of element objects that are associated with the edge.
Arguments
None.
Return value
A MeshElementArray object which is a sequence of MeshElement objects.
Exceptions
None.
199
Abaqus Scripting Reference Guide
Edge object

getRadius()
This method returns the radius of circular edges.
Arguments
None.
Return value
A Float specifying the radius.
Exceptions
The given edges is not circular.
getSize(...)
This method returns a Float indicating the length of the edge.
Required arguments
None.
Optional arguments
A Bool specifying whether verbose output is printed. The default is True.
printResults
Return value
A Float.
Exceptions
None.
getVertices()
This method returns a sequence of indices of the vertices that bound this edge. The ﬁrst index refers to the vertex where
the normalized curve parameter = 0.0, and the second index refers to the vertex where the normalized curve parameter
= 1.0. If the edge is a closed curve, only one vertex index is returned.
Arguments
None.
Return value
A tuple of integers.
Exceptions
None.
Abaqus Scripting Reference Guide
200
Edge object

Members
The Edge object has the following members:
An Int specifying the index of the edge in the EdgeArray.
index
A Boolean specifying whether the edge belongs to the reference representation of
the Part or Instance.
isReferenceRep
A tuple of Floats specifying the X-, Y-, and Z-coordinates of a point located on the
edge.
pointOn
A tuple of Floats specifying the name of the feature that created this edge.
featureName
A tuple of Floats specifying the name of the part instance for this edge (if applicable).
instanceName
201
Abaqus Scripting Reference Guide
Edge object

EdgeArray object
The EdgeArray is a sequence of Edge objects. If the part is modiﬁed, then EdgeArray must be updated for that part.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].edges
mdb.models[name].parts[name].allInternalSurfaces[name].edges
mdb.models[name].parts[name].allSets[name].edges
mdb.models[name].parts[name].allSurfaces[name].edges
mdb.models[name].parts[name].edges
mdb.models[name].parts[name].sets[name].edges
mdb.models[name].parts[name].surfaces[name].edges
import assembly
mdb.models[name].rootAssembly.allInstances[name].edges
mdb.models[name].rootAssembly.allInstances[name].sets[name].edges
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].edges
mdb.models[name].rootAssembly.allInternalSets[name].edges
mdb.models[name].rootAssembly.allInternalSurfaces[name].edges
mdb.models[name].rootAssembly.allSets[name].edges
mdb.models[name].rootAssembly.allSurfaces[name].edges
mdb.models[name].rootAssembly.edges
mdb.models[name].rootAssembly.instances[name].edges
mdb.models[name].rootAssembly.instances[name].sets[name].edges
mdb.models[name].rootAssembly.instances[name].surfaces[name].edges
mdb.models[name].rootAssembly.modelInstances[i].edges
mdb.models[name].rootAssembly.modelInstances[i].sets[name].edges
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name].edges
mdb.models[name].rootAssembly.sets[name].edges
mdb.models[name].rootAssembly.surfaces[name].edges
EdgeArray(...)
This method creates an EdgeArray object.
Path
part.EdgeArray
Required arguments
A list of Edge objects.
edges
Optional arguments
None.
Return value
A EdgeArray object.
Abaqus Scripting Reference Guide
202
EdgeArray object

Exceptions
None.
findAt(...)
This method returns the object or objects in the EdgeArray located at the given coordinates.
findAt initially uses the ACIS tolerance of 1E-6. As a result, findAt returns any edge that is at the arbitrary point
speciﬁed or at a distance of less than 1E-6 from the arbitrary point. If nothing is found, findAt uses the tolerance
for imprecise geometry (applicable only for imprecise geometric entities). The arbitrary point must not be shared by
a second edge. If two edges intersect or coincide at the arbitrary point, findAt chooses the ﬁrst edge that it encounters,
and you should not rely on the return value being consistent.
findAt will always try to ﬁnd objects among all the edges in the part or assembly instance and will not restrict itself
to a subset even if the EdgeArray represents such subset.
Required arguments
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the object to ﬁnd.
coordinates
findAt returns either an Edge object or a sequence of Edge objects based on the type of input.
•
If coordinates is a sequence of Floats, findAt returns the Edge object at that point.
•
If you omit the coordinates keyword argument, findAt accepts as arguments a sequence of
sequence of ﬂoats in the following format:
edges = e.findAt(((20.19686, -169.513997, 27.798593), ),
                 ((19.657627, -167.295749, 27.056402), ),
                 ((18.274129, -157.144741, 25.15218), ))
Optional arguments
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
An Edge object or a sequence of Edge objects.
Exceptions
None.
getClosest(...)
This method returns an object or objects in the EdgeArray closest to the given set of points, where the given points
need not lie on the edges in the EdgeArray.
203
Abaqus Scripting Reference Guide
EdgeArray object

Required arguments
A sequence of a sequence of ﬂoats, where each sequence of ﬂoats describes the X-, Y-, and
Z-coordinates of a point.
r=e.getClosest(coordinates=((20.0,20.0,10.0),(-1.0, -15.0, 15),))
r.keys()
[0, 1]
r[0]
(mdb.models['Model-1'].parts['Part-1'].edges[3],
                                 (15.7090625762939, 20.0, 10.0))
coordinates
Optional arguments
A double specifying the distance within which the closest object must lie. The default
value is half of the parent part/instance size.
searchTolerance
Return value
This method returns a dictionary object. The key to the dictionary object is the position of the input point in the tuple
speciﬁed in the coordinates starting at index 0. If a closest edge could be found then the value is a sequence consisting
of two objects. The ﬁrst object in the sequence is an Edge that is close to the input point referred to by the key. The
second object in the sequence is a sequence of ﬂoats that speciﬁes the X-, Y-, and Z-location of the closest point on the
Edge to the given point. See program listing above.
Exceptions
None.
getSequenceFromMask(...)
This method returns the object or objects in the EdgeArray identiﬁed using the speciﬁed mask. This command is
generated when the JournalOptions are set to COMPRESSEDINDEX. When a large number of objects are involved,
this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
An Edge object or a sequence of Edge objects.
Abaqus Scripting Reference Guide
204
EdgeArray object

Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
getByBoundingBox(...)
This method returns an array of edge objects that lie within the speciﬁed bounding box.
Required arguments
None.
Optional arguments
A ﬂoat specifying the minimum X-boundary of the bounding box.
xMin
A ﬂoat specifying the minimum Y-boundary of the bounding box.
yMin
A ﬂoat specifying the minimum Z-boundary of the bounding box.
zMin
A ﬂoat specifying the maximum X-boundary of the bounding box.
xMax
A ﬂoat specifying the maximum Y-boundary of the bounding box.
yMax
A ﬂoat specifying the maximum Z-boundary of the bounding box.
zMax
Return value
An EdgeArray object, which is a sequence of Edge objects.
Exceptions
None.
205
Abaqus Scripting Reference Guide
EdgeArray object

getByBoundingCylinder(...)
This method returns an array of edge objects that lie within the speciﬁed bounding cylinder.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the ﬁrst end of the cylinder.
center1
A tuple of the X-, Y-, and Z-coordinates of the center of the second end of the cylinder.
center2
A ﬂoat specifying the radius of the cylinder.
radius
Optional arguments
None.
Return value
An EdgeArray object, which is a sequence of Edge objects.
Exceptions
None.
getByBoundingSphere(...)
This method returns an array of edge objects that lie within the speciﬁed bounding sphere.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the sphere.
center
A ﬂoat specifying the radius of the sphere.
radius
Optional arguments
None.
Return value
An EdgeArray object, which is a sequence of Edge objects.
Exceptions
None.
getBoundingBox()
This method returns a dictionary of two tuples representing minimum and maximum boundary values of the bounding
box of the minimum size containing the edge sequence.
Abaqus Scripting Reference Guide
206
EdgeArray object

Arguments
None.
Return value
A Dictionary object with the following items:
low: a tuple of three ﬂoats representing the minimum X-, Y-, and Z-boundary values of the bounding box.
high: a tuple of three ﬂoats representing the maximum X-, Y-, and Z-boundary values of the bounding box.
Exceptions
None.
Members
The EdgeArray object has no members.
207
Abaqus Scripting Reference Guide
EdgeArray object

Face object
Faces are two-dimensional regions of geometry.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].faces[i]
mdb.models[name].parts[name].allInternalSurfaces[name].faces[i]
mdb.models[name].parts[name].allSets[name].faces[i]
mdb.models[name].parts[name].allSurfaces[name].faces[i]
mdb.models[name].parts[name].faces[i]
mdb.models[name].parts[name].sets[name].faces[i]
mdb.models[name].parts[name].surfaces[name].faces[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].faces[i]
mdb.models[name].rootAssembly.allInstances[name].sets[name].faces[i]
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].faces[i]
mdb.models[name].rootAssembly.allInternalSets[name].faces[i]
mdb.models[name].rootAssembly.allInternalSurfaces[name].faces[i]
mdb.models[name].rootAssembly.allSets[name].faces[i]
mdb.models[name].rootAssembly.allSurfaces[name].faces[i]
mdb.models[name].rootAssembly.instances[name].faces[i]
mdb.models[name].rootAssembly.instances[name].sets[name].faces[i]
mdb.models[name].rootAssembly.instances[name].surfaces[name].faces[i]
mdb.models[name].rootAssembly.modelInstances[i].sets[name].faces[i]
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name]\
.faces[i]
mdb.models[name].rootAssembly.sets[name].faces[i]
mdb.models[name].rootAssembly.surfaces[name].faces[i]
getCentroid()
This method returns the centroid of a face.
Arguments
None.
Return value
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the centroid of the face.
Exceptions
None.
getCurvature(...)
This method returns information about the curvature at a location on the face.
Abaqus Scripting Reference Guide
208
Face object

Required arguments
A tuple specifying the X-, Y-, and Z coordinates of the point where the curvature is desired. If the
point does not lie on the face it will be projected onto the face. This argument and uParam and
vParam are mutually exclusive.
point
A Float specifying the normalized U parameter value at which the curvature is to be computed.
This value must lie between (0,1). vParam must also be speciﬁed. This argument is mutually
exclusive with point.
uParam
A Float specifying the normalized V parameter value at which the curvature is to be computed.
This value must lie between (0,1).
vParam
Optional arguments
None.
Return value
A dictionary with keys 'evaluationPoint', 'principalAxis1', 'principalAxis2', 'curvature1', 'curvature2' and
'gaussianCurvature'. Where the evaluationPoint speciﬁes the location at which the curvature was evaluated.
'principalAxis1' and 'principalAxis2' refer to the vectors specifying the two principal axes of the face. 'curvature1' and
'curvature2' specify the curvatures along the two principal axes.
Exceptions
None.
getElements()
This method returns an array of element objects that are associated with the face.
Arguments
None.
Return value
A MeshElementArray object which is a sequence of MeshElement objects.
Exceptions
None.
getElementFaces(...)
This method returns an array of mesh face objects. Each mesh face object contains the element label and the side of
the element that lies on the geometric face.
Required arguments
None.
209
Abaqus Scripting Reference Guide
Face object

Optional arguments
A symbolic constant specifying the side of the geometric face of a solid from which the element
faces should be retrieved. Possible values are SIDE1, SIDE2, and BOTH_SIDES. The default value
is BOTH_SIDES. For shell faces this option is ignored.
faceSide
Return value
A MeshFaceArray object which is a sequence of MeshFace objects.
Exceptions
None.
getNodes(...)
This method returns an array of mesh node objects. Each mesh node object contains the label of the node that lies on
the geometric face.
Required arguments
None.
Optional arguments
A symbolic constant specifying the side of the geometric face of a solid from which the nodes should
be retrieved. Possible values are xoSIDE1, SIDE2, and BOTH_SIDES. The default value is
faceSide
BOTH_SIDES. For shell faces and for faces with compatible meshes on either sides this option is
ignored. Otherwise, the nodes on the speciﬁed side(s) of the face are output.
Return value
A MeshNodeArray object which is a sequence of MeshNode objects.
Exceptions
None.
getNormal(...)
This method returns the normal to a face at the location speciﬁed by the pointOn member. The normal at a different
location on the face can be obtained by specifying the optional point argument.
Required arguments
None.
Optional arguments
A tuple specifying the X-, Y-, and Z coordinates of the point where the normal to the face is desired.
If the point does not lie on the face it will be projected onto the face.
point
Abaqus Scripting Reference Guide
210
Face object

Return value
A sequence of Floats specifying the X-, Y-, and Z-components of the normal to the face.
Exceptions
An exception is raised if the optional argument point is provided but the point cannot be projected onto the face.
getSize(...)
This method returns a Float indicating the area of the face.
Required arguments
None.
Optional arguments
A Bool specifying whether verbose output is printed. The default value is True.
printResults
Return value
A Float.
Exceptions
None.
getEdges()
This method returns a sequence consisting of the edge ids of the edges on the face.
Arguments
None.
Return value
A tuple of integers.
Exceptions
None.
getVertices()
This method returns a sequence consisting of the vertex ids of the vertices of the face.
Arguments
None.
Return value
A tuple of integers.
211
Abaqus Scripting Reference Guide
Face object

Exceptions
None.
getCells()
This method returns a sequence consisting of the cell ids of the cells to which this face belongs.
Arguments
None.
Return value
A tuple of integers.
Exceptions
None.
getAdjacentFaces()
This method returns an array of face objects that share at least one edge of the face.
Arguments
None.
Return value
A FaceArray object which is a sequence of Face objects.
Exceptions
None.
getFacesByFaceAngle(...)
This method returns an array of Face objects that are obtained by recursively ﬁnding adjacent faces that are at an angle
of less than or equal to the speciﬁed angle.
Required arguments
A ﬂoat specifying the value of the face angle.
angle
Optional arguments
None.
Return value
A FaceArray object, which is a sequence of Face objects.
Abaqus Scripting Reference Guide
212
Face object

Exceptions
None.
getFacesByCurvature()
This method returns an array of Face objects that are obtained by recursively ﬁnding adjacent faces that share the same
curvature.
Arguments
None.
Return value
A FaceArray object, which is a sequence of Face objects.
Exceptions
None.
isNormalFlipped()
This method determines whether the normal to the face is ﬂipped from its default direction by the use of the
flipNormal method on a Part object.
Arguments
None.
Return value
A Boolean value of True if the normal is ﬂipped and False if not.
Exceptions
None.
getCADAttributes(...)
This method returns an array of CAD attribute strings associated with the Face when the part was created from CAD
data.
Arguments
None.
Return value
An array of String
Exceptions
None.
213
Abaqus Scripting Reference Guide
Face object

Members
The Face object has the following members:
An Int specifying the index of the face in the FaceArray.
index
A Boolean specifying whether the face belongs to the reference representation of the Part
or Instance.
isReferenceRep
A tuple of tuples of Floats specifying the coordinates. For a face of a shell pointOn speciﬁes
the X-, Y-, and Z-coordinates of a point located on the face and the X-, Y-, and Z-components
of the normal to the face.
pointOn
For a face of a solid pointOn speciﬁes the X-, Y-, and Z-coordinates of a point located on
the face.
A tuple of Floats specifying the name of the feature that created this face.
featureName
A tuple of Floats specifying the name of the part instance for this face (if applicable).
instanceName
Abaqus Scripting Reference Guide
214
Face object

FaceArray object
The FaceArray is a sequence of Face objects. If the part is modiﬁed, then FaceArray must be updated for that part.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].faces
mdb.models[name].parts[name].allInternalSurfaces[name].faces
mdb.models[name].parts[name].allSets[name].faces
mdb.models[name].parts[name].allSurfaces[name].faces
mdb.models[name].parts[name].faces
mdb.models[name].parts[name].sets[name].faces
mdb.models[name].parts[name].surfaces[name].faces
import assembly
mdb.models[name].rootAssembly.allInstances[name].faces
mdb.models[name].rootAssembly.allInstances[name].sets[name].faces
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].faces
mdb.models[name].rootAssembly.allInternalSets[name].faces
mdb.models[name].rootAssembly.allInternalSurfaces[name].faces
mdb.models[name].rootAssembly.allSets[name].faces
mdb.models[name].rootAssembly.allSurfaces[name].faces
mdb.models[name].rootAssembly.instances[name].faces
mdb.models[name].rootAssembly.instances[name].sets[name].faces
mdb.models[name].rootAssembly.instances[name].surfaces[name].faces
mdb.models[name].rootAssembly.modelInstances[i].sets[name].faces
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name].faces
mdb.models[name].rootAssembly.sets[name].faces
mdb.models[name].rootAssembly.surfaces[name].faces
FaceArray(...)
This method creates a FaceArray object.
Path
part.FaceArray
Required arguments
A list of Face objects.
faces
Optional arguments
None.
Return value
A FaceArray object.
Exceptions
None.
215
FaceArray object

findAt(...)
This method returns the object or objects in the FaceArray located at the given coordinates.
findAt initially uses the ACIS tolerance of 1E-6. As a result, findAt returns any face that is at the arbitrary point
speciﬁed or at a distance of less than 1E-6 from the arbitrary point. If nothing is found, findAt uses the tolerance
for imprecise geometry (applicable only for imprecise geometric entities). The arbitrary point must not be shared by
a second face. If two faces intersect or coincide at the arbitrary point, findAt chooses the ﬁrst face that it encounters,
and you should not rely on the return value being consistent.
findAt will always try to ﬁnd objects among all the faces in the part or assembly instance and will not restrict itself
to a subset even if the FaceArray represents such subset.
Required arguments
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the object to ﬁnd.
coordinates
findAt returns either a Face object or a sequence of Face objects based on the type of input.
•
If coordinates is a sequence of Floats, findAt returns the Face object at that point.
•
If you omit the coordinates keyword argument, findAt accepts as arguments a sequence of pairs
of sequences describing each face's coordinate and normal, and findAt returns a sequence of Face
objects at the given locations. If you omit the coordinates keyword argument, you must also omit
the normal argument.
faces = f.findAt(((-16.438578, -41.835673, -24.19804), ),
                 ((25.210364, -35.689868, 1.860314), ),
                 ((26.727683, -38.207055, 4.164759), ))
Optional arguments
A sequence of Floats specifying the X-, Y-, and Z-components of a vector indicating the
face normal.
normal
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
A Face object.
Exceptions
None.
getExteriorEdges()
This method returns the edges on the exterior of the faces in the FaceArray. That is, it returns the edges that are
referenced by exactly one of the faces in the sequence.
Abaqus Scripting Reference Guide
216
FaceArray object

Arguments
None.
Return value
An EdgeArray object specifying the exterior edges.
Exceptions
None.
getSequenceFromMask(...)
This method returns the object or objects in the FaceArray identiﬁed using the speciﬁed mask. This command is
generated when the JournalOptions are set to COMPRESSEDINDEX. When a large number of objects are involved,
this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
A Face object or a sequence of Face objects.
Exceptions
None.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
getByBoundingBox(...)
This method returns an array of face objects that lie within the speciﬁed bounding box.
217
Abaqus Scripting Reference Guide
FaceArray object

Required arguments
None.
Optional arguments
A ﬂoat specifying the minimum X-boundary of the bounding box.
xMin
A ﬂoat specifying the minimum Y-boundary of the bounding box.
yMin
A ﬂoat specifying the minimum Z-boundary of the bounding box.
zMin
A ﬂoat specifying the maximum X-boundary of the bounding box.
xMax
A ﬂoat specifying the maximum Y-boundary of the bounding box.
yMax
A ﬂoat specifying the maximum Z-boundary of the bounding box.
zMax
Return value
A FaceArray object, which is a sequence of Face objects.
Exceptions
None.
getByBoundingCylinder(...)
This method returns an array of face objects that lie within the speciﬁed bounding cylinder.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the ﬁrst end of the cylinder.
center1
A tuple of the X-, Y-, and Z-coordinates of the center of the second end of the cylinder.
center2
A ﬂoat specifying the radius of the cylinder.
radius
Optional arguments
None.
Return value
A FaceArray object, which is a sequence of Face objects.
Exceptions
None.
Abaqus Scripting Reference Guide
218
FaceArray object

getByBoundingSphere(...)
This method returns an array of face objects that lie within the speciﬁed bounding sphere.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the sphere.
center
A ﬂoat specifying the radius of the sphere.
radius
Optional arguments
None.
Return value
A FaceArray object, which is a sequence of Face objects.
Exceptions
None.
getBoundingBox()
This method returns a dictionary of two tuples representing minimum and maximum boundary values of the bounding
box of the minimum size containing the face sequence.
Arguments
None.
Return value
A Dictionary object with the following items:
low: a tuple of three ﬂoats representing the minimum X-, Y-, and Z-boundary values of the bounding box.
high: a tuple of three ﬂoats representing the maximum X-, Y-, and Z-boundary values of the bounding box.
Exceptions
None.
getClosest(...)
This method returns an object or objects in the FaceArray closest to the given set of points, where the given points
need not lie on the faces in the FaceArray.
219
Abaqus Scripting Reference Guide
FaceArray object

Required arguments
A sequence of a sequence of ﬂoats, where each sequence of ﬂoats describes the X-, Y-, and
Z-coordinates of a point.
r=f.getClosest(coordinates=((20.0,20.0,10.0),(-1.0, -15.0, 15),))
r.keys()
[0, 1]
r[0]
(mdb.models['Model-1'].parts['Part-1'].faces[0],
                                 (15.7090625762939, 20.0, 10.0))
coordinates
Optional arguments
A double specifying the distance within which the closest object must lie. The default
value is half of the parent part/instance size.
searchTolerance
Return value
This method returns a dictionary object. The key to the dictionary object is the position of the input point in the tuple
speciﬁed in the coordinates starting at index 0. If a closest face could be found then the value is a sequence consisting
of two objects. The ﬁrst object in the sequence is a Face that is close to the input point referred to by the key. The
second object in the sequence is a sequence of ﬂoats that speciﬁes the X-, Y-, and Z-location of the closest point on the
Face to the given point. See program listing above.
Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
Members
The FaceArray object has no members.
Abaqus Scripting Reference Guide
220
FaceArray object

IgnoredEdge object
An IgnoredEdge object is a one-dimensional region of geometry that has been abstracted away by a virtual topology
feature.
Access
import part
mdb.models[name].parts[name].ignoredEdges[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].ignoredEdges[i]
mdb.models[name].rootAssembly.instances[name].ignoredEdges[i]
getSize(...)
This method returns a Float indicating the length of the edge.
Required arguments
None.
Optional arguments
A Bool specifying whether verbose output is printed. The default is True.
printResults
Return value
A Float.
Exceptions
None.
getRadius()
This method returns the radius of a circular IgnoredEdge object.
Arguments
None.
Return value
A Float specifying the radius.
Exceptions
The given IgnoredEdge object is not circular.
getCurvature(...)
This method returns curvature information at a location on the IgnoredEdge object.
221
IgnoredEdge object

Required arguments
A Float specifying the normalized parameter location on the IgnoredEdge where the curvature is
to be computed. This argument is mutually exclusive with the argument point.
parameter
A tuple of X-, Y-, and Z-coordinates of a point at which the curvature is to be computed. If point
does not lie on the IgnoredEdge an attempt is made to project it onto the IgnoredEdge and use
the projected point.
point
Optional arguments
None.
Return value
A dictionary with keys 'evaluationPoint', 'curvature', 'radius', 'tangent'. Where 'evaluationPoint' speciﬁes the location
at which the curvature was computed. 'curvature' speciﬁes the curvature vector at that location. 'radius' is the Radius
of curvature and 'tangent' speciﬁes the tangent to the IgnoredEdge at that location.
Exceptions
The given IgnoredEdge is straight.
Members
The IgnoredEdge object has the following members:
An Int specifying the index of the IgnoredEdge in the IgnoredEdgeArray.
index
A tuple of Floats specifying the X-, Y-, and Z-coordinates of a point located on the edge.
pointOn
Abaqus Scripting Reference Guide
222
IgnoredEdge object

IgnoredEdgeArray object
The IgnoredEdgeArray is a sequence of IgnoredEdge objects. If the part is modiﬁed, then IgnoredEdgeArray must be
updated for that part.
Access
import part
mdb.models[name].parts[name].ignoredEdges
import assembly
mdb.models[name].rootAssembly.allInstances[name].ignoredEdges
mdb.models[name].rootAssembly.instances[name].ignoredEdges
findAt(...)
This method returns the object or objects in the IgnoredEdgeArray located at the given coordinates.
findAt initially uses the ACIS tolerance of 1E-6. As a result, findAt returns any IgnoredEdge that is at the arbitrary
point speciﬁed or at a distance of less than 1E-6 from the arbitrary point. If nothing is found, findAt uses the tolerance
for imprecise geometry (applicable only for imprecise geometric entities). The arbitrary point must not be shared by
a second IgnoredEdge. If two IgnoredEdge objects intersect or coincide at the arbitrary point, findAt chooses the
ﬁrst IgnoredEdge that it encounters, and you should not rely on the return value being consistent.
findAt will always try to ﬁnd objects among all the ignored edges in the part or assembly instance and will not
restrict itself to a subset even if the IgnoredEdgeArray represents such subset.
Required arguments
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the object to ﬁnd.
coordinates
findAt returns either an IgnoredEdge object or a sequence of IgnoredEdge objects based on the type
of input.
•
If coordinates is a sequence of Floats, findAt returns the IgnoredEdge object at that point.
•
If you omit the coordinates keyword argument, findAt accepts as arguments a sequence of
sequence of ﬂoats in the following format:
ignoredEdges = e.findAt(((20.19686, -169.513997, 27.798593), ),
                        ((19.657627, -167.295749, 27.056402), ),
                        ((18.274129, -157.144741, 25.15218), ))
Optional arguments
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
An IgnoredEdge object or a sequence of IgnoredEdge objects.
Exceptions
None.
223
IgnoredEdgeArray object

getSequenceFromMask(...)
This method returns the object or objects in the IgnoredEdgeArray identiﬁed using the speciﬁed mask. This command
is generated when the JournalOptions are set to COMPRESSEDINDEX. When large number of objects are involved,
this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
An IgnoredEdge object or a sequence of IgnoredEdge objects.
Exceptions
None.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
getClosest(...)
This method returns a object or objects in the IgnoredEdgeArray closest to the given set of points, where the given
points need not lie on the edges in the IgnoredEdgeArray.
Abaqus Scripting Reference Guide
224
IgnoredEdgeArray object

Required arguments
A sequence of a sequence of ﬂoats, where each sequence of ﬂoats describes the X-, Y-, and
Z-coordinates of a point.
r=e.getClosest(coordinates=((20.0,20.0,10.0),(-1.0, -15.0, 15),))
r.keys()
[0, 1]
r[0]
(mdb.models['Model-1'].parts['Part-1'].ignoredEdges[3],
                                 (15.7090625762939, 20.0, 10.0))
coordinates
Optional arguments
A double specifying the distance within which the closest object must lie. The default
value is half of the parent part/instance size.
searchTolerance
Return value
This method returns a dictionary object. The key to the dictionary object is the position of the input point in the tuple
speciﬁed in the coordinates starting at index 0. If a closest IgnoredEdge could be found then the value is a sequence
consisting of two objects. The ﬁrst object in the sequence is an IgnoredEdge that is close to the input point referred to
by the key. The second object in the sequence, is a sequence of ﬂoats which specify the X-, Y-, and Z-location of the
closest point on the IgnoredEdge to the given point. See program listing above.
Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
Members
The IgnoredEdgeArray object has no members.
225
Abaqus Scripting Reference Guide
IgnoredEdgeArray object

IgnoredVertex object
An IgnoredVertex object is a point region of the geometry that was abstracted away by a virtual topology feature.
Access
import part
mdb.models[name].parts[name].ignoredVertices[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].ignoredVertices[i]
mdb.models[name].rootAssembly.instances[name].ignoredVertices[i]
Members
The IgnoredVertex object has the following members:
An Int specifying the index of the IgnoredVertex in the IgnoredVertexArray.
index
A tuple of Floats specifying the X-, Y-, and Z-coordinates of the vertex.
pointOn
Abaqus Scripting Reference Guide
226
IgnoredVertex object

IgnoredVertexArray object
The IgnoredVertexArray is a sequence of IgnoredVertex objects. If the part is modiﬁed, then IgnoredVertexArray must
be updated for that part.
Access
import part
mdb.models[name].parts[name].ignoredVertices
import assembly
mdb.models[name].rootAssembly.allInstances[name].ignoredVertices
mdb.models[name].rootAssembly.instances[name].ignoredVertices
findAt(...)
This method returns the object or objects in the IgnoredVertexArray located at the given coordinates.
findAt initially uses the ACIS tolerance of 1E-6. As a result, findAt returns any IgnoredVertex object that is at
the arbitrary point speciﬁed or at a distance of less than 1E-6 from the arbitrary point. If nothing is found, findAt
uses the tolerance for imprecise geometry (applicable only for imprecise geometric entities).
findAt will always try to ﬁnd objects among all the ignored vertices in the part or assembly instance and will not
restrict itself to a subset even if the IgnoredVertexArray represents such subset.
Required arguments
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the object to ﬁnd.
coordinates
findAt returns either a IgnoredVertex object or a sequence of IgnoredVertex objects based on the
type of input.
•
If coordinates is a sequence of Floats, findAt returns the IgnoredVertex object at that point.
•
If you omit the coordinates keyword argument, findAt accepts as arguments a sequence of
sequence of ﬂoats in the following format:
verts = v.findAt(((20.19686, -169.513997, 27.798593), ),
                 ((19.657627, -167.295749, 27.056402), ),
                 ((18.274129, -157.144741, 25.15218), ))
Optional arguments
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
An IgnoredVertex object or a sequence of IgnoredVertex objects.
Exceptions
None.
227
IgnoredVertexArray object

getSequenceFromMask(...)
This method returns the object or objects in the IgnoredVertexArray identiﬁed using the speciﬁed mask. This command
is generated when the JournalOptions are set to COMPRESSEDINDEX. When large number of objects are involved,
this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
An IgnoredVertex object or a sequence of IgnoredVertex objects.
Exceptions
None.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
getClosest(...)
This method returns a object or objects in the IgnoredVertexArray closest to the given set of points, where the given
points need not lie on the vertices in the IgnoredVertexArray.
Abaqus Scripting Reference Guide
228
IgnoredVertexArray object

Required arguments
A sequence of a sequence of ﬂoats, where each sequence of ﬂoats describes the X-, Y-, and
Z-coordinates of a point.
r=e.getClosest(coordinates=((20.0,20.0,10.0),(-1.0, -15.0, 15),))
r.keys()
[0, 1]
r[0]
(mdb.models['Model-1'].parts['Part-1'].ignoredVertices[3],
                                 (15.7090625762939, 20.0, 10.0))
coordinates
Optional arguments
A double specifying the distance within which the closest object must lie. The default
value is half of the parent part/instance size.
searchTolerance
Return value
This method returns a dictionary object. The key to the dictionary object is the position of the input point in the tuple
speciﬁed in the coordinates starting at index 0. If a closest IgnoredVertex could be found then the value is a sequence
consisting of two objects. The ﬁrst object in the sequence is a IgnoredVertex that is close to the input point referred to
by the key. The second object in the sequence, is a sequence of ﬂoats which specify the X-, Y-, and Z-location of the
IgnoredVertex. See program listing above.
Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
Members
The IgnoredVertexArray object has no members.
229
Abaqus Scripting Reference Guide
IgnoredVertexArray object

InterestingPoint object
Interesting points can be located at the following:
•
The middle of an edge.
•
The middle of an arc.
•
The center of an arc.
An InterestingPoint object is a temporary object and cannot be accessed from the Mdb object.
Access
import part
import assembly
InterestingPoint(...)
This method creates an interesting point along an edge. An InterestingPoint is a temporary object.
Path
mdb.models[name].parts[name].InterestingPoint
mdb.models[name].rootAssembly.instances[name].InterestingPoint
Required arguments
An Edge object specifying the edge on which the interesting point is positioned.
edge
A SymbolicConstant specifying the position of the interesting point. Possible values are MIDDLE
or CENTER.
rule
Optional arguments
None.
Return value
An InterestingPoint object.
Exceptions
None.
Members
The InterestingPoint object has no members.
Abaqus Scripting Reference Guide
230
InterestingPoint object

ModelDot object
The ModelDot object can be used to access an actual MeshNode, ReferencePoint, or Vertex object.
Members
The ModelDot object has no members.
231
ModelDot object

ReferencePoint object
The ReferencePoint object has no direct constructor; it is created when a Feature object is created. The
ReferencePoint method creates a Feature object that creates a ReferencePoint object.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].referencePoints[i]
mdb.models[name].parts[name].allSets[name].referencePoints[i]
mdb.models[name].parts[name].referencePoints[i]
mdb.models[name].parts[name].sets[name].referencePoints[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].referencePoints[i]
mdb.models[name].rootAssembly.allInstances[name].sets[name]\
.referencePoints[i]
mdb.models[name].rootAssembly.allInternalSets[name].referencePoints[i]
mdb.models[name].rootAssembly.allSets[name].referencePoints[i]
mdb.models[name].rootAssembly.instances[name].referencePoints[i]
mdb.models[name].rootAssembly.instances[name].sets[name]\
.referencePoints[i]
mdb.models[name].rootAssembly.modelInstances[i].referencePoints[i]
mdb.models[name].rootAssembly.modelInstances[i].sets[name]\
.referencePoints[i]
mdb.models[name].rootAssembly.referencePoints[i]
mdb.models[name].rootAssembly.sets[name].referencePoints[i]
Members
The ReferencePoint object has no members.
Abaqus Scripting Reference Guide
232
ReferencePoint object

Transform object
The MakeSketchTransform method creates a Transform object. The Transform object has no direct constructor.
A Transform object is a 4×3 matrix of Floats that represents the transformation from sketch coordinates to assembly
coordinates or to part coordinates.
Access
import part
import assembly
matrix()
This method returns the transformation matrix as a tuple of 12 Floats.
Arguments
None.
Return value
A tuple of 12 Floats.
Exceptions
None.
Members
The Transform object has no members.
233
Transform object

Vertex object
Vertices are point regions of geometry.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].vertices[i]
mdb.models[name].parts[name].allSets[name].vertices[i]
mdb.models[name].parts[name].sets[name].vertices[i]
mdb.models[name].parts[name].vertices[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].sets[name].vertices[i]
mdb.models[name].rootAssembly.allInstances[name].vertices[i]
mdb.models[name].rootAssembly.allInternalSets[name].vertices[i]
mdb.models[name].rootAssembly.allSets[name].vertices[i]
mdb.models[name].rootAssembly.instances[name].sets[name].vertices[i]
mdb.models[name].rootAssembly.instances[name].vertices[i]
mdb.models[name].rootAssembly.modelInstances[i].sets[name].vertices[i]
mdb.models[name].rootAssembly.modelInstances[i].vertices[i]
mdb.models[name].rootAssembly.sets[name].vertices[i]
mdb.models[name].rootAssembly.vertices[i]
getEdges()
This method returns a sequence consisting of the edge ids of the edges which share this vertex.
Arguments
None.
Return value
A tuple of integers.
Exceptions
None.
getNodes()
This method returns an array of node objects that are associated with the vertex.
Arguments
None.
Return value
A MeshNodeArray object which is a sequence of MeshNode objects.
Exceptions
None.
Abaqus Scripting Reference Guide
234
Vertex object

getElements()
This method returns an array of element objects that are associated with the vertex.
Arguments
None.
Return value
A MeshElementArray object which is a sequence of MeshElement objects.
Exceptions
None.
Members
The Vertex object has the following members:
An Int specifying the index of the Vertex in the VertexArray.
index
A Boolean specifying whether the vertex belongs to the reference representation of
the Part or Instance.
isReferenceRep
A tuple of Floats specifying the X -, Y -, and Z -coordinates of the vertex.
pointOn
A tuple of Floats specifying the name of the feature that created this vertex.
featureName
A tuple of Floats specifying the name of the part instance for this vertex (if
applicable).
instanceName
235
Abaqus Scripting Reference Guide
Vertex object

VertexArray object
The VertexArray is a sequence of Vertex objects. If the part is modiﬁed, then VertexArray must be updated for that
part.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].vertices
mdb.models[name].parts[name].allSets[name].vertices
mdb.models[name].parts[name].sets[name].vertices
mdb.models[name].parts[name].vertices
import assembly
mdb.models[name].rootAssembly.allInstances[name].sets[name].vertices
mdb.models[name].rootAssembly.allInstances[name].vertices
mdb.models[name].rootAssembly.allInternalSets[name].vertices
mdb.models[name].rootAssembly.allSets[name].vertices
mdb.models[name].rootAssembly.instances[name].sets[name].vertices
mdb.models[name].rootAssembly.instances[name].vertices
mdb.models[name].rootAssembly.modelInstances[i].sets[name].vertices
mdb.models[name].rootAssembly.modelInstances[i].vertices
mdb.models[name].rootAssembly.sets[name].vertices
mdb.models[name].rootAssembly.vertices
VertexArray(...)
This method creates a VertexArray object.
Path
part.VertexArray
Required arguments
A list of Vertex objects.
vertices
Optional arguments
None.
Return value
A VertexArray object.
Exceptions
None.
findAt(...)
This method returns the object or objects in the VertexArray located at the given coordinates.
Abaqus Scripting Reference Guide
236
VertexArray object

findAt initially uses the ACIS tolerance of 1E-6. As a result, findAt returns any Vertex object that is at the arbitrary
point speciﬁed or at a distance of less than 1E-6 from the arbitrary point. If nothing is found, findAt uses the tolerance
for imprecise geometry (applicable only for imprecise geometric entities).
findAt will always try to ﬁnd objects among all the vertices in the part or assembly instance and will not restrict
itself to a subset even if the VertexArray represents such subset.
Required arguments
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the object to ﬁnd.
coordinates
findAt returns either a Vertex object or a sequence of Vertex objects based on the type of input.
•
If coordinates is a sequence of Floats, findAt returns the Vertex object at that point.
•
If you omit the coordinates keyword argument, findAt accepts as arguments a sequence of
sequence of ﬂoats in the following format:
verts = v.findAt(((20.19686, -169.513997, 27.798593), ),
                 ((19.657627, -167.295749, 27.056402), ),
                 ((18.274129, -157.144741, 25.15218), ))
Optional arguments
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
A Vertex object or a sequence of Vertex objects.
Exceptions
None.
getSequenceFromMask(...)
This method returns the object or objects in the VertexArray identiﬁed using the speciﬁed mask. This command is
generated when the JournalOptions are set to COMPRESSEDINDEX. When a large number of objects are involved,
this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
A Vertex object or a sequence of Vertex objects.
237
Abaqus Scripting Reference Guide
VertexArray object

Exceptions
None.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
getByBoundingBox(...)
This method returns an array of vertex objects that lie within the speciﬁed bounding box.
Required arguments
None.
Optional arguments
A ﬂoat specifying the minimum X-boundary of the bounding box.
xMin
A ﬂoat specifying the minimum Y-boundary of the bounding box.
yMin
A ﬂoat specifying the minimum Z-boundary of the bounding box.
zMin
A ﬂoat specifying the maximum X-boundary of the bounding box.
xMax
A ﬂoat specifying the maximum Y-boundary of the bounding box.
yMax
A ﬂoat specifying the maximum Z-boundary of the bounding box.
zMax
Return value
A VertexArray object, which is a sequence of Vertex objects.
Exceptions
None.
getByBoundingCylinder(...)
This method returns an array of vertex objects that lie within the speciﬁed bounding cylinder.
Abaqus Scripting Reference Guide
238
VertexArray object

Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the ﬁrst end of the cylinder.
center1
A tuple of the X-, Y-, and Z-coordinates of the center of the second end of the cylinder.
center2
A ﬂoat specifying the radius of the cylinder.
radius
Optional arguments
None.
Return value
A VertexArray object, which is a sequence of Vertex objects.
Exceptions
None.
getByBoundingSphere(...)
This method returns an array of vertex objects that lie within the speciﬁed bounding sphere.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the sphere.
center
A ﬂoat specifying the radius of the sphere.
radius
Optional arguments
None.
Return value
A VertexArray object, which is a sequence of Vertex objects.
Exceptions
None.
getBoundingBox()
This method returns a dictionary of two tuples representing minimum and maximum boundary values of the bounding
box of the minimum size containing the vertex sequence.
Arguments
None.
239
Abaqus Scripting Reference Guide
VertexArray object

Return value
A Dictionary object with the following items:
low: a tuple of three ﬂoats representing the minimum X-, Y-, and Z-boundary values of the bounding box.
high: a tuple of three ﬂoats representing the maximum X-, Y-, and Z-boundary values of the bounding box.
Exceptions
None.
getClosest(...)
This method returns a object or objects in the VertexArray closest to the given set of points, where the given points
need not lie on Vertex objects in the VertexArray.
Required arguments
A sequence of a sequence of ﬂoats, where each sequence of ﬂoats describes the X-, Y-, and
Z-coordinates of a point.
r=v.getClosest(coordinates=((20.0,20.0,10.0),(-1.0, -15.0, 15),))
r.keys()
[0, 1]
r[0]
(mdb.models['Model-1'].parts['Part-1'].vertices[0],
        (15.7090625762939, 29.1666641235352, 20.0))
coordinates
Optional arguments
A double specifying the distance within which the closest object must lie. The default
value is half of the parent part/instance size.
searchTolerance
Return value
This method returns a dictionary object. The key to the dictionary object is the position of the input point in the tuple
speciﬁed in the coordinates starting at index 0. If a closest vertex could be found then the value is a sequence consisting
of two objects. The ﬁrst object in the sequence is a Vertex that is close to the input point referred to by the key. The
second object in the sequence is a sequence of ﬂoats that speciﬁes the X-, Y-, and Z-location of the Vertex. See program
listing above.
Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
Members
The VertexArray object has no members.
Abaqus Scripting Reference Guide
240
VertexArray object

Beam Section profile commands
The Beam Section proﬁle commands are used to create proﬁles.
A proﬁle deﬁnition speciﬁes the properties of a beam that are related to its cross-section geometry. When you
deﬁne a beam section, you must include a reference to a proﬁle in the section deﬁnition.
In this section:
•
Profile object
•
ArbitraryProfile object
•
BoxProfile object
•
ChannelProfile object
•
CircularProfile object
•
GeneralizedProfile object
•
HatProfile object
•
HexagonalProfile object
•
IProfile object
•
LProfile object
•
PipeProfile object
•
RectangularProfile object
•
TProfile object
•
TrapezoidalProfile object
241

Profile object
The Proﬁle object deﬁnes the geometrical properties of a beam cross-section. Proﬁle is an abstract base type.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
beamProfilesFromOdb(...)
This method creates Proﬁle objects by reading an output database. The new proﬁles are placed in the proﬁles repository.
Path
mdb.models[name].beamProﬁlesFromOdb
Required arguments
A String specifying the name of the output database ﬁle (including the .odb extension) to be
read. The String can also be the full path to the output database ﬁle if it is located in another
directory.
ﬁleName
Optional arguments
None.
Return value
A list of Proﬁle objects.
Exceptions
None.
Members
The Proﬁle object has the following member:
A String specifying the repository key.
name
Abaqus Scripting Reference Guide
242
Profile object

ArbitraryProfile object
The ArbitraryProﬁle object deﬁnes the properties of an arbitrary proﬁle.
The ArbitraryProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
ArbitraryProfile(...)
This method creates a ArbitraryProﬁle object.
Path
mdb.models[name].ArbitraryProfile
session.odbs[name].ArbitraryProfile
Required arguments
A String specifying the repository key.
name
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
The ﬁrst sequence in the table speciﬁes the following:
•
1-coordinate of the ﬁrst point deﬁning the proﬁle.
•
2-coordinate of the ﬁrst point deﬁning the proﬁle.
All other sequences in the table specify the following:
•
1–coordinate of the next point deﬁning the proﬁle.
•
2–coordinate of the next point deﬁning the proﬁle.
•
The thickness of the segment ending at that point.
Return value
An ArbitraryProﬁle object.
Exceptions
RangeError.
243
ArbitraryProfile object

setValues(...)
This method modiﬁes the ArbitraryProﬁle object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ArbitraryProﬁle  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The ArbitraryProﬁle object has members with the same names and descriptions as the arguments to the ArbitraryProﬁle
method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=ARBITRARY
Abaqus Scripting Reference Guide
244
ArbitraryProfile object

BoxProfile object
The BoxProﬁle object deﬁnes the properties of a box proﬁle.
The BoxProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
BoxProfile(...)
This method creates a BoxProﬁle object.
Path
mdb.models[name].BoxProfile
session.odbs[name].BoxProfile
Required arguments
A String specifying the repository key.
name
A Float specifying the a dimension of the box proﬁle. For more information, see Beam
Cross-Section Library.
a
A Float specifying the b dimension of the box proﬁle.
b
A Boolean specifying whether the thickness is uniform.
uniformThickness
A Float specifying the uniform wall thickness if uniformThickness=ON, and the wall thickness
of the ﬁrst segment if uniformThickness=OFF.
t1
Optional arguments
A Float specifying the wall thickness of the second segment. t2 is required only when
uniformThickness=OFF. The default value is 0.0.
t2
A Float specifying the wall thickness of the third segment. t3 is required only when
uniformThickness=OFF. The default value is 0.0.
t3
A Float specifying the wall thickness of the fourth segment. t4 is required only when
uniformThickness=OFF. The default value is 0.0.
t4
Return value
A BoxProﬁle object.
245
BoxProfile object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the BoxProﬁle object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BoxProﬁle  method, except for the name
argument.
Return value
None.
Exceptions
RangeError.
Members
The BoxProﬁle object has members with the same names and descriptions as the arguments to the BoxProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=BOX
Abaqus Scripting Reference Guide
246
BoxProfile object

ChannelProfile object
The ChannelProﬁle object deﬁnes the properties of a Channel proﬁle.
The ChannelProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
ChannelProfile(...)
This method creates a ChannelProﬁle object.
Path
mdb.models[name].ChannelProfile
session.odbs[name].ChannelProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the l dimension (offset of 1–axis from the bottom ﬂange surface) of
the Channel proﬁle. For more information, see Beam Cross-Section Library.
l
A positive Float specifying the h dimension (height) of the Channel proﬁle.
h
A positive Float specifying the b1 dimension (lower ﬂange width) of the Channel proﬁle.
b1
A positive Float specifying the b2 dimension (upper ﬂange width) of the Channel proﬁle.
b2
A positive Float specifying the t1 dimension (lower ﬂange thickness) of the Channel proﬁle.
t1
A positive Float specifying the t2 dimension (upper ﬂange thickness) of the Channel proﬁle.
t2
A positive Float specifying the t3 dimension (web thickness) of the Channel proﬁle.
t3
A positive Float specifying the o dimension (offset of 2–axis from the left edge of web) of the
Channel proﬁle.
o
Optional arguments
None.
Return value
A ChannelProﬁle object.
247
ChannelProfile object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the ChannelProﬁle object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ChannelProﬁle method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The ChannelProﬁle object has members with the same names and descriptions as the arguments to the ChannelProﬁle
method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=CHANNEL
Abaqus Scripting Reference Guide
248
ChannelProfile object

CircularProfile object
The CircularProﬁle object deﬁnes the properties of a solid circular proﬁle.
The CircularProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
CircularProfile(...)
This method creates a CircularProﬁle object.
Path
mdb.models[name].CircularProfile
session.odbs[name].CircularProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the r dimension (outer radius) of the circular proﬁle. For more
information, see Beam Cross-Section Library.
r
Optional arguments
None.
Return value
A CircularProﬁle object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the CircularProﬁle object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CircularProﬁle  method, except for the
name argument.
249
CircularProfile object

Return value
None.
Exceptions
RangeError.
Members
The CircularProﬁle object has members with the same names and descriptions as the arguments to the CircularProﬁle
method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=CIRC
Abaqus Scripting Reference Guide
250
CircularProfile object

GeneralizedProfile object
The GeneralizedProﬁle object deﬁnes the properties of a proﬁle via its area, moment of inertia, etc.
The GeneralizedProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
GeneralizedProfile(...)
This method creates a GeneralizedProﬁle object.
Path
mdb.models[name].GeneralizedProfile
session.odbs[name].GeneralizedProfile
Required arguments
A String specifying the repository key.
name
A Float specifying the cross-sectional area for the proﬁle.
area
A Float specifying the moment of inertia for bending about the 1-axis, 
.
i11
A Float specifying the moment of inertia for cross bending, 
.
i12
A Float specifying the moment of inertia for bending about the 2-axis, 
.
i22
A Float specifying the torsional constant, .
j
A Float specifying the sectorial moment, 
.
gammaO
A Float specifying the warping constant, 
.
gammaW
Optional arguments
None.
Return value
A GeneralizedProﬁle object.
251
GeneralizedProfile object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the GeneralizedProﬁle object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GeneralizedProﬁle  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The GeneralizedProﬁle object has members with the same names and descriptions as the arguments to the
GeneralizedProﬁle  method.
Corresponding analysis keywords
•
*BEAM GENERAL SECTION, SECTION=GENERAL or NONLINEAR GENERAL
Abaqus Scripting Reference Guide
252
GeneralizedProfile object

HatProfile object
The HatProﬁle object deﬁnes the properties of a Hat proﬁle.
The HatProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
HatProfile(...)
This method creates a HatProﬁle object.
Path
mdb.models[name].HatProfile
session.odbs[name].HatProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the l dimension (offset of 1–axis from the bottom ﬂange surface) of
the Hat proﬁle. For more information, see Beam Cross-Section Library.
l
A positive Float specifying the h dimension (height) of the Hat proﬁle.
h
A positive Float specifying the b dimension (bottom width) of the Hat proﬁle.
b
A positive Float specifying the b1 dimension (upper ﬂange width) of the Hat proﬁle.
b1
A positive Float specifying the b2 dimension (lower ﬂange width) of the Hat proﬁle.
b2
A positive Float specifying the t1 dimension (upper ﬂange thickness) of the Hat proﬁle.
t1
A positive Float specifying the t2 dimension (lower ﬂange thickness) of the Hat proﬁle.
t2
A positive Float specifying the t3 dimension (web thickness) of the Hat proﬁle.
t3
Optional arguments
None.
Return value
A HatProﬁle object.
253
HatProfile object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the HatProﬁle object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the HatProﬁle method, except for the name
argument.
Return value
None.
Exceptions
RangeError.
Members
The HatProﬁle object has members with the same names and descriptions as the arguments to the HatProﬁle method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=HAT
Abaqus Scripting Reference Guide
254
HatProfile object

HexagonalProfile object
The HexagonalProﬁle object deﬁnes the properties of a hexagonal proﬁle.
The HexagonalProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
HexagonalProfile(...)
This method creates a HexagonalProﬁle object.
Path
mdb.models[name].HexagonalProfile
session.odbs[name].HexagonalProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the r dimension (outer radius) of the hexagonal proﬁle. For more
information, see Beam Cross-Section Library.
r
A positive Float specifying the t dimension (wall thickness) of the hexagonal proﬁle, t < (sqrt(3)/2)r.
t
Optional arguments
None.
Return value
A HexagonalProﬁle object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the HexagonalProﬁle object.
Required arguments
None.
255
HexagonalProfile object

Optional arguments
The optional arguments to setValues are the same as the arguments to the HexagonalProﬁle  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The HexagonalProﬁle object has members with the same names and descriptions as the arguments to the
HexagonalProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=HEX
Abaqus Scripting Reference Guide
256
HexagonalProfile object

IProfile object
The IProﬁle object deﬁnes the properties of an I proﬁle.
The IProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
IProfile(...)
This method creates an IProﬁle object.
Path
mdb.models[name].IProfile
session.odbs[name].IProfile
Required arguments
A String specifying the repository key.
name
A Float specifying the l dimension (offset of 1–axis from the bottom ﬂange surface) of the I proﬁle.
For more information, see Beam Cross-Section Library.
l
A Float specifying the h dimension (height) of the I proﬁle.
h
A Float specifying the b1 dimension (bottom ﬂange width) of the I proﬁle.
b1
A Float specifying the b2 dimension (top ﬂange width) of the I proﬁle.
b2
A Float specifying the t1 dimension (bottom ﬂange thickness) of the I proﬁle.
t1
A Float specifying the t2 dimension (top ﬂange thickness) of the I proﬁle.
t2
A Float specifying the t3 dimension (web thickness) of the I proﬁle.
t3
Optional arguments
None.
Return value
An IProﬁle object.
Exceptions
RangeError.
257
IProfile object

setValues(...)
This method modiﬁes the IProﬁle object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the IProﬁle  method, except for the name
argument.
Return value
None.
Exceptions
RangeError.
Members
The IProﬁle object has members with the same names and descriptions as the arguments to the IProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=I
Abaqus Scripting Reference Guide
258
IProfile object

LProfile object
The LProﬁle object deﬁnes the properties of a L proﬁle.
The LProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
LProfile(...)
This method creates a LProﬁle object.
Path
mdb.models[name].LProfile
session.odbs[name].LProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the a dimension (ﬂange length) of the L proﬁle. For more information,
see Beam Cross-Section Library.
a
A positive Float specifying the b dimension (ﬂange length) of the L proﬁle.
b
A positive Float specifying the t1 dimension (ﬂange thickness) of the L proﬁle (t1 < b).
t1
A positive Float specifying the t2 dimension (ﬂange thickness) of the L proﬁle (t2< a).
t2
Optional arguments
None.
Return value
A LProﬁle object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the LProﬁle object.
259
LProfile object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the LProﬁle  method, except for the name
argument.
Return value
None.
Exceptions
RangeError.
Members
The LProﬁle object has members with the same names and descriptions as the arguments to the LProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=L
Abaqus Scripting Reference Guide
260
LProfile object

PipeProfile object
The PipeProﬁle object deﬁnes the properties of a circular pipe proﬁle.
The PipeProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
PipeProfile(...)
This method creates a PipeProﬁle object.
Path
mdb.models[name].PipeProfile
session.odbs[name].PipeProfile
Required arguments
A String specifying the repository key.
name
A Float specifying the outer radius of the pipe. For more information, see Beam Cross-Section
Library.
r
A Float specifying the wall thickness of the pipe.
t
Optional arguments
None.
Return value
A PipeProﬁle object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the PipeProﬁle object.
Required arguments
None.
261
PipeProfile object

Optional arguments
The optional arguments to setValues are the same as the arguments to the PipeProﬁle method, except for the name
argument.
Return value
None.
Exceptions
RangeError.
Members
The PipeProﬁle object has members with the same names and descriptions as the arguments to the PipeProﬁle method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=PIPE
•
*BEAM SECTION, SECTION=THICK PIPE
Abaqus Scripting Reference Guide
262
PipeProfile object

RectangularProfile object
The RectangularProﬁle object deﬁnes the properties of a solid rectangular proﬁle.
The RectangularProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
RectangularProfile(...)
This method creates a RectangularProﬁle object.
Path
mdb.models[name].RectangularProfile
session.odbs[name].RectangularProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the a dimension of the rectangular proﬁle. For more information, see
Beam Cross-Section Library.
a
A positive Float specifying the b dimension of the rectangular proﬁle.
b
Optional arguments
None.
Return value
A RectangularProﬁle object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the RectangularProﬁle object.
Required arguments
None.
263
RectangularProfile object

Optional arguments
The optional arguments to setValues are the same as the arguments to the RectangularProﬁle  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The RectangularProﬁle object has members with the same names and descriptions as the arguments to the
RectangularProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=RECT
Abaqus Scripting Reference Guide
264
RectangularProfile object

TProfile object
The TProﬁle object deﬁnes the properties of a T proﬁle.
The TProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
TProfile(...)
This method creates a TProﬁle object.
Path
mdb.models[name].TProfile
session.odbs[name].TProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the b dimension (ﬂange width) of the T proﬁle. For more information,
see Beam Cross-Section Library.
b
A positive Float specifying the h dimension (height) of the T proﬁle.
h
A positive Float specifying the l dimension (offset of 1–axis from the edge of web) of the T proﬁle.
l
A positive Float specifying the tf dimension (ﬂange thickness) of the T proﬁle (tf < h).
tf
A positive Float specifying the tw dimension (web thickness) of the T proﬁle (tw< b).
tw
Optional arguments
None.
Return value
A TProﬁle object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the TProﬁle object.
265
TProfile object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TProﬁle  method, except for the name
argument.
Return value
None.
Exceptions
RangeError.
Members
The TProﬁle object has members with the same names and descriptions as the arguments to the TProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=I
Abaqus Scripting Reference Guide
266
TProfile object

TrapezoidalProfile object
The TrapezoidalProﬁle object deﬁnes the properties of a trapezoidal proﬁle.
The TrapezoidalProﬁle object is derived from the Proﬁle object.
Access
import section
mdb.models[name].profiles[name]
import odbSection
session.odbs[name].profiles[name]
TrapezoidalProfile(...)
This method creates a TrapezoidalProﬁle object.
Path
mdb.models[name].TrapezoidalProfile
session.odbs[name].TrapezoidalProfile
Required arguments
A String specifying the repository key.
name
A positive Float specifying the a dimension of the Trapezoidal proﬁle. For more information, see
Beam Cross-Section Library.
a
A positive Float specifying the b dimension of the Trapezoidal proﬁle.
b
A positive Float specifying the c dimension of the Trapezoidal proﬁle.
c
A Float specifying the d dimension of the Trapezoidal proﬁle.
d
Optional arguments
None.
Return value
A TrapezoidalProﬁle object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the TrapezoidalProﬁle object.
267
TrapezoidalProfile object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TrapezoidalProﬁle  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The TrapezoidalProﬁle object has members with the same names and descriptions as the arguments to the
TrapezoidalProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=TRAPEZOID
Abaqus Scripting Reference Guide
268
TrapezoidalProfile object

Boundary Condition commands
A speciﬁc type of boundary condition object and a speciﬁc type of boundary condition state object are designed
for each type of boundary condition. A BoundaryCondition object stores the non-propagating data of a boundary
condition as well as a number of instances of the corresponding BoundaryConditionState object, each of which
stores the propagating data of the boundary condition in a single step.
Instances of the BoundaryConditionState object are created and deleted internally by its corresponding
BoundaryCondition object.
In this section:
•
BoundaryCondition object
•
AccelerationBaseMotionBC object
•
AccelerationBaseMotionBCState object
•
AccelerationBC object
•
AccelerationBCState object
•
AcousticPressureBC object
•
AcousticPressureBCState object
•
BoundaryConditionState object
•
ConcentrationBC object
•
ConcentrationBCState object
•
ConnAccelerationBC object
•
ConnAccelerationBCState object
•
ConnDisplacementBC object
•
ConnDisplacementBCState object
•
ConnVelocityBC object
•
ConnVelocityBCState object
•
DisplacementBaseMotionBC object
•
DisplacementBaseMotionBCState object
•
DisplacementBC object
•
DisplacementBCState object
•
ElectricPotentialBC object
•
ElectricPotentialBCState object
•
EulerianBC object
•
EulerianBCState object
•
EulerianMotionBC object
•
EulerianMotionBCState object
•
FluidCavityPressureBC object
•
FluidCavityPressureBCState object
•
MagneticVectorPotentialBC object
•
MaterialFlowBC object
•
MaterialFlowBCState object
•
PorePressureBC object
•
PorePressureBCState object
•
RetainedNodalDofsBC object
269

•
SecondaryBaseBC object
•
SecondaryBaseBCState object
•
SubmodelBC object
•
SubmodelBCState object
•
TemperatureBC object
•
TemperatureBCState object
•
TypeBC object
•
TypeBCState object
•
VelocityBaseMotionBC object
•
VelocityBaseMotionBCState object
•
VelocityBC object
•
VelocityBCState object
Abaqus Scripting Reference Guide
270

BoundaryCondition object
The BoundaryCondition object is the abstract base type for other BoundaryCondition objects. The BoundaryCondition
object has no explicit constructor. The methods and members of the BoundaryCondition object are common to all
objects derived from the BoundaryCondition.
Access
import load
mdb.models[name].boundaryConditions[name]
deactivate(...)
This method deactivates the boundary condition in the speciﬁed step and all subsequent steps.
Required arguments
A String specifying the name of the step in which the boundary condition is deactivated.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
move(...)
This method moves the boundary condition state from one step to a different step.
Required arguments
A String specifying the name of the step from which the boundary condition state
is moved.
fromStepName
A String specifying the name of the step to which the boundary condition state is
moved.
toStepName
Optional arguments
None.
Return value
None.
271
BoundaryCondition object

Exceptions
TextError.
reset(...)
This method resets the boundary condition state of the speciﬁed step to the state of the previous analysis step.
Required arguments
A String specifying the name of the step in which the boundary condition state is reset.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
resume()
This method resumes the boundary condition that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the boundary condition.
Arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
272
BoundaryCondition object

delete(...)
This method allows you to delete existing boundary conditions.
Required arguments
A sequence of Ints specifying the index of each boundary condition to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The BoundaryCondition object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
273
Abaqus Scripting Reference Guide
BoundaryCondition object

AccelerationBaseMotionBC object
The AccelerationBaseMotionBC object stores the data for an acceleration base motion boundary condition.
The AccelerationBaseMotionBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
AccelerationBaseMotionBC(...)
This method creates a AccelerationBaseMotionBC object.
Path
mdb.models[name].AccelerationBaseMotionBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A SymbolicConstant specifying the constrained degree-of-freedom. Possible values for the
SymbolicConstant are U1, U2, U3, UR1, UR2, UR3. The default value is U1.
dof
Optional arguments
A Float specifying the scale factor for the amplitude curve. The default value is 1.0.
amplitudeScaleFactor
A ModelDot object specifying a tuple containing one center of rotation. The default
value is the global origin. This argument applies only when dof=UR1, UR2, or UR3.
centerOfRotation
A CorrelationArray object.
correlation
A String specifying the name of the SecondaryBaseBC object associated with this
boundary condition. The default value is an empty string.
secondaryBase
A Boolean specifying whether to deﬁne the imaginary (out-of-plane) portion of the base
motion record given by amplitude deﬁnition. The default value is OFF.
useComplex
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the
speciﬁed step.
Abaqus Scripting Reference Guide
274
AccelerationBaseMotionBC object

Return value
An AccelerationBaseMotionBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing AccelerationBaseMotionBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AccelerationBaseMotionBC  method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing AccelerationBaseMotionBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is
valid for the speciﬁed step.
Return value
None.
Exceptions
None.
275
Abaqus Scripting Reference Guide
AccelerationBaseMotionBC object

Members
The AccelerationBaseMotionBC object can have the following members:
A String specifying the boundary condition repository key.
name
A Float specifying the scale factor for the amplitude curve. The default value is 1.0.
amplitudeScaleFactor
A Boolean specifying whether to deﬁne the imaginary (out-of-plane) portion of the base
motion record given by amplitude deﬁnition. The default value is OFF.
useComplex
A ModelDot object specifying a tuple containing one center of rotation. The default value
is the global origin. This argument applies only when dof=UR1, UR2, or UR3.
centerOfRotation
A CorrelationArray object.
correlation
A String specifying the name of the SecondaryBaseBC object associated with this
boundary condition. The default value is an empty string.
secondaryBase
A SymbolicConstant specifying the category of the boundary condition. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned
in the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
276
AccelerationBaseMotionBC object

AccelerationBaseMotionBCState object
The AccelerationBaseMotionBCState object stores the propagating data for a velocity base motion boundary condition
in a step. One instance of this object is created internally by the AccelerationBaseMotionBC object for each step. The
instance is also deleted internally by the AccelerationBaseMotionBC object.
The AccelerationBaseMotionBCState object has no constructor or methods.
The AccelerationBaseMotionBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The AccelerationBaseMotionBCState object has the following members:
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BASE MOTION
277
AccelerationBaseMotionBCState object

AccelerationBC object
The AccelerationBC object stores the data for an acceleration boundary condition.
The AccelerationBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
AccelerationBC(...)
This method creates an AccelerationBC object.
Path
mdb.models[name].AccelerationBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary condition.
The ﬁeldName argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeldName
A Float or a SymbolicConstant specifying the acceleration component in the 1-direction. Possible
values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
a1
Note:
Although a1, a2, a3, ar1, ar2, and ar3 are optional arguments, at least one of them must be
speciﬁed.
A Float or a SymbolicConstant specifying the acceleration component in the 2-direction. Possible
values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
a2
A Float or a SymbolicConstant specifying the acceleration component in the 3-direction. Possible
values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
a3
A Float or a SymbolicConstant specifying the rotational acceleration component about the 1-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
ar1
Abaqus Scripting Reference Guide
278
AccelerationBC object

A Float or a SymbolicConstant specifying the rotational acceleration component about the 2-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
ar2
A Float or a SymbolicConstant specifying the rotational acceleration component about the 3-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
ar3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the boundary condition has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate
system. The default value is None.
localCsys
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible values
are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
Return value
An AccelerationBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing AccelerationBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AccelerationBC  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing AccelerationBC object in the speciﬁed step.
279
Abaqus Scripting Reference Guide
AccelerationBC object

Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or a SymbolicConstant specifying the acceleration component in the 1-direction. Possible
values for the SymbolicConstant are SET, UNCHANGED, and FREED.
a1
A Float or a SymbolicConstant specifying the acceleration component in the 2-direction. Possible
values for the SymbolicConstant are SET, UNCHANGED, and FREED.
a2
A Float or a SymbolicConstant specifying the acceleration component in the 3-direction. Possible
values for the SymbolicConstant are SET, UNCHANGED, and FREED.
a3
A Float or a SymbolicConstant specifying the rotational acceleration component about the 1-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ar1
A Float or a SymbolicConstant specifying the rotational acceleration component about the 2-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ar2
A Float or a SymbolicConstant specifying the rotational acceleration component about the 3-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ar3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is valid
for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The AccelerationBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
Abaqus Scripting Reference Guide
280
AccelerationBC object

A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
281
Abaqus Scripting Reference Guide
AccelerationBC object

AccelerationBCState object
The AccelerationBCState object stores the propagating data of an acceleration boundary condition in a step. One
instance of this object is created internally by the AccelerationBC object for each step. The instance is also deleted
internally by the AccelerationBC object.
The AccelerationBCState object has no constructor or methods.
The AccelerationBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The AccelerationBCState object has the following members:
A Float specifying the acceleration component in the 1-direction.
a1
A Float specifying the acceleration component in the 2-direction.
a2
A Float specifying the acceleration component in the 3-direction.
a3
A Float specifying the rotational acceleration component about the 1-direction.
ar1
A Float specifying the rotational acceleration component about the 2-direction.
ar2
A Float specifying the rotational acceleration component about the 3-direction.
ar3
A SymbolicConstant specifying the propagation state of the acceleration component in the
1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
a1State
A SymbolicConstant specifying the propagation state of the acceleration component in the
2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
a2State
A SymbolicConstant specifying the propagation state of the acceleration component in the
3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
a3State
A SymbolicConstant specifying the propagation state of the rotational acceleration component
about the 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ar1State
A SymbolicConstant specifying the propagation state of the rotational acceleration component
about the 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ar2State
A SymbolicConstant specifying the propagation state of the rotational acceleration component
about the 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ar3State
Abaqus Scripting Reference Guide
282
AccelerationBCState object

A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BOUNDARY, TYPE=ACCELERATION (degree of freedom: 1, 2, 3, 4, 5, or 6)
283
Abaqus Scripting Reference Guide
AccelerationBCState object

AcousticPressureBC object
The AcousticPressureBC object stores the data for an acoustic pressure boundary condition.
The AcousticPressureBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
AcousticPressureBC(...)
This method creates a AcousticPressureBC object.
Path
mdb.models[name].AcousticPressureBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A Float specifying the acoustic pressure magnitude. The default value is 0. The magnitude
argument is optional if distributionType=USER_DEFINED.
magnitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
Return value
An AcousticPressureBC object.
Abaqus Scripting Reference Guide
284
AcousticPressureBC object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing AcousticPressureBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AcousticPressureBC  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing AcousticPressureBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or the SymbolicConstant FREED specifying the acoustic pressure magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the boundary
condition is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The AcousticPressureBC object can have the following members:
285
Abaqus Scripting Reference Guide
AcousticPressureBC object

A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
286
AcousticPressureBC object

AcousticPressureBCState object
The AcousticPressureBCState object stores the propagating data for an acoustic pressure boundary condition in a step.
One instance of this object is created internally by the AcousticPressureBC object for each step. The instance is also
deleted internally by the AcousticPressureBC object.
The AcousticPressureBCState object has no constructor or methods.
The AcousticPressureBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The AcousticPressureBCState object has the following members:
A Float specifying the acoustic pressure magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the acoustic pressure magnitude.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
287
AcousticPressureBCState object

Corresponding analysis keywords
•
*BOUNDARY (degree of freedom: 8)
Abaqus Scripting Reference Guide
288
AcousticPressureBCState object

BoundaryConditionState object
The BoundaryConditionState object is the abstract base type for other BoundaryConditionState objects. The
BoundaryConditionState object has no explicit constructor or methods. The members of the BoundaryConditionState
object are common to all objects derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The BoundaryConditionState object has the following members:
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
289
BoundaryConditionState object

ConcentrationBC object
The ConcentrationBC object stores the data for a concentration boundary condition.
The ConcentrationBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
ConcentrationBC(...)
This method creates a ConcentrationBC object.
Path
mdb.models[name].ConcentrationBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A Float specifying the concentration magnitude. The default value is 0. The magnitude argument
is optional if distributionType=USER_DEFINED.
magnitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
Return value
A ConcentrationBC object.
Abaqus Scripting Reference Guide
290
ConcentrationBC object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConcentrationBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcentrationBC  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConcentrationBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or the SymbolicConstant FREED specifying the concentration magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the boundary
condition is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConcentrationBC object can have the following members:
291
Abaqus Scripting Reference Guide
ConcentrationBC object

A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
292
ConcentrationBC object

ConcentrationBCState object
The ConcentrationBCState object stores the propagating data for a concentration boundary condition in a step. One
instance of this object is created internally by the ConcentrationBC object for each step. The instance is also deleted
internally by the ConcentrationBC object.
The ConcentrationBCState object has no constructor or methods.
The ConcentrationBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The ConcentrationBCState object has the following members:
A Float specifying the concentration magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the concentration magnitude. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
293
ConcentrationBCState object

Corresponding analysis keywords
•
*BOUNDARY (degree of freedom: 11)
Abaqus Scripting Reference Guide
294
ConcentrationBCState object

ConnAccelerationBC object
The ConnAccelerationBC object stores the data for a connector acceleration boundary condition.
The ConnAccelerationBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
ConnAccelerationBC(...)
This method creates an ConnAccelerationBC object on a wire region. Alternatively, the boundary condition may also
be applied to a wire set referenced from an assembled fastener template model.
Path
mdb.models[name].ConnAccelerationBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
Optional arguments
The wire region to which the boundary condition is applied. This argument is not valid when
fastenerName and fastenerSetName are speciﬁed.
region
A String specifying the name of the assembled fastener to which the boundary condition will be
applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the boundary condition
will be applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A Float or a SymbolicConstant specifying the acceleration component in the connector's local
1-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value is
UNSET.
a1
Note:
Although a1, a2, a3, ar1, ar2, and ar3 are optional arguments, at least one of them must be
speciﬁed.
295
ConnAccelerationBC object

A Float or a SymbolicConstant specifying the acceleration component in the connector's local
2-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value is
UNSET.
a2
A Float or a SymbolicConstant specifying the acceleration component in the connector's local
3-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value is
UNSET.
a3
A Float or a SymbolicConstant specifying the rotational acceleration component in the connector's
local 4-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ar1
A Float or a SymbolicConstant specifying the rotational acceleration component in the connector's
local 5-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ar2
A Float or a SymbolicConstant specifying the rotational acceleration component in the connector's
local 6-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ar3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the boundary condition has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible values
are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
Return value
A ConnAccelerationBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConnAccelerationBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnAccelerationBC  method, except
for the name and createStepName arguments.
Return value
None.
Abaqus Scripting Reference Guide
296
ConnAccelerationBC object

Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConnAccelerationBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or a SymbolicConstant specifying the connector acceleration component in the connector's
local 1-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
a1
A Float or a SymbolicConstant specifying the connector acceleration component in the connector's
local 2-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
a2
A Float or a SymbolicConstant specifying the connector acceleration component in the connector's
local 3-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
a3
A Float or a SymbolicConstant specifying the connector acceleration component in the connector's
local 4-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ar1
A Float or a SymbolicConstant specifying the connector acceleration component in the connector's
local 5-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ar2
A Float or a SymbolicConstant specifying the connector acceleration component in the connector's
local 6-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ar3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is valid
for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConnAccelerationBC object can have the following members:
A String specifying the boundary condition repository key.
name
297
Abaqus Scripting Reference Guide
ConnAccelerationBC object

A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A String specifying the name of the assembled fastener to which the boundary condition will
be applied. This argument is not valid when region is speciﬁed. When this argument is
speciﬁed, fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the boundary condition
will be applied. This argument is not valid when region is speciﬁed. When this argument is
speciﬁed, fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
298
ConnAccelerationBC object

ConnAccelerationBCState object
The ConnAccelerationBCState object stores the propagating data of a connector acceleration boundary condition in a
step. One instance of this object is created internally by the ConnAccelerationBC object for each step. The instance is
also deleted internally by the ConnAccelerationBC object.
The ConnAccelerationBCState object has no constructor or methods.
The ConnAccelerationBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The ConnAccelerationBCState object has the following members:
A Float specifying the connector acceleration component in the connector's local 1-direction.
a1
A Float specifying the connector acceleration component in the connector's local 2-direction.
a2
A Float specifying the connector acceleration component in the connector's local 3-direction.
a3
A Float specifying the connector acceleration component in the connector's local 4-direction.
ar1
A Float specifying the connector acceleration component in the connector's local 5-direction.
ar2
A Float specifying the connector acceleration component in the connector's local 6-direction.
ar3
A SymbolicConstant specifying the propagation state of the connector acceleration component in
the connector's local 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
a1State
A SymbolicConstant specifying the propagation state of the connector acceleration component in
the connector's local 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
a2State
A SymbolicConstant specifying the propagation state of the connector acceleration component in
the connector's local 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
a3State
A SymbolicConstant specifying the propagation state of the connector acceleration component in
the connector's local 4-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
ar1State
A SymbolicConstant specifying the propagation state of the connector acceleration component in
the connector's local 5-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
ar2State
299
ConnAccelerationBCState object

A SymbolicConstant specifying the propagation state of the connector acceleration component in
the connector's local 6-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
ar3State
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CONNECTOR MOTION, TYPE=ACCELERATION (degree of freedom: 1, 2, 3, 4, 5, or 6)
Abaqus Scripting Reference Guide
300
ConnAccelerationBCState object

ConnDisplacementBC object
The ConnDisplacementBC object stores the data for a connector displacement/rotation boundary condition.
The ConnDisplacementBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
ConnDisplacementBC(...)
This method creates a ConnDisplacementBC object on a wire region. Alternatively, the boundary condition may also
be applied to a wire set referenced from an assembled fastener template model.
Path
mdb.models[name].ConnDisplacementBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
Optional arguments
The wire region to which the boundary condition is applied. This argument is not valid when
fastenerName and fastenerSetName are speciﬁed.
region
A String specifying the name of the assembled fastener to which the boundary condition will be
applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the boundary condition
will be applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the
connector's local 1-direction. Possible values for the SymbolicConstant are UNSET and SET. The
default value is UNSET.
u1
Note:
Although u1, u2, u3, ur1, ur2, and ur3 are optional arguments, at least one of them must be
speciﬁed.
301
ConnDisplacementBC object

A Float, a Complex, or a SymbolicConstant specifying the displacement component in the
connector's local 2-direction. Possible values for the SymbolicConstant are UNSET and SET. The
default value is UNSET.
u2
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the
connector's local 3-direction. Possible values for the SymbolicConstant are UNSET and SET. The
default value is UNSET.
u3
A Float, a Complex, or a SymbolicConstant specifying the rotational component in the connector's
local 4-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ur1
A Float, a Complex, or a SymbolicConstant specifying the rotational component in the connector's
local 5-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ur2
A Float, a Complex, or a SymbolicConstant specifying the rotational component in the connector's
local 6-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ur3
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the boundary condition has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible values
are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
Return value
A ConnDisplacementBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConnDisplacementBC object in the step where it is created.
Required arguments
None.
Abaqus Scripting Reference Guide
302
ConnDisplacementBC object

Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnDisplacementBC  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConnDisplacementBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the connector's
local 1-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u1
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the connector's
local 2-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u2
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the connector's
local 3-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u3
A Float, a Complex, or a SymbolicConstant specifying the rotational component in the connector's
local 4-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur1
A Float, a Complex, or a SymbolicConstant specifying the rotational component in the connector's
local 5-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur2
A Float, a Complex, or a SymbolicConstant specifying the rotational component in the connector's
local 6-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is valid
for the speciﬁed step.
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES, and
PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
303
Abaqus Scripting Reference Guide
ConnDisplacementBC object

Return value
None.
Exceptions
None.
Members
The ConnDisplacementBC object can have the following members:
A String specifying the boundary condition repository key.
name
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A String specifying the name of the assembled fastener to which the boundary condition will
be applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the boundary condition
will be applied. This argument is not valid when region is speciﬁed. When this argument is
speciﬁed, fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
304
ConnDisplacementBC object

ConnDisplacementBCState object
The ConnDisplacementBCState object stores the propagating data for a connector displacement/rotation boundary
condition in a step. One instance of this object is created internally by the ConnDisplacementBC object for each step.
The instance is also deleted internally by the ConnDisplacementBC object.
The ConnDisplacementBCState object has no constructor or methods.
The ConnDisplacementBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The ConnDisplacementBCState object has the following members:
A Float or a Complex specifying the displacement component in the connector's local 1-direction.
u1
A Float or a Complex specifying the displacement component in the connector's local 2-direction.
u2
A Float or a Complex specifying the displacement component in the connector's local 3-direction.
u3
A Float or a Complex specifying the rotational component in the connector's local 4-direction.
ur1
A Float or a Complex specifying the rotational component in the connector's local 5-direction.
ur2
A Float or a Complex specifying the rotational component in the connector's local 6-direction.
ur3
A SymbolicConstant specifying the propagation state of the displacement component in the
connector's local 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
u1State
A SymbolicConstant specifying the propagation state of the displacement component in the
connector's local 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
u2State
A SymbolicConstant specifying the propagation state of the displacement component in the
connector's local 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
u3State
A SymbolicConstant specifying the propagation state of the rotational component in the connector's
local 4-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur1State
A SymbolicConstant specifying the propagation state of the rotational component in the connector's
local 5-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur2State
305
ConnDisplacementBCState object

A SymbolicConstant specifying the propagation state of the rotational component in the connector's
local 6-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur3State
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CONNECTOR MOTION, TYPE=DISPLACEMENT (degree of freedom: 1, 2, 3, 4, 5, or 6)
Abaqus Scripting Reference Guide
306
ConnDisplacementBCState object

ConnVelocityBC object
The ConnVelocityBC object stores the data for a connector velocity boundary condition.
The ConnVelocityBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
ConnVelocityBC(...)
This method creates a ConnVelocityBC object on a wire region. Alternatively, the boundary condition may also be
applied to a wire set referenced from an assembled fastener template model.
Path
mdb.models[name].ConnVelocityBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
Optional arguments
The wire region to which the boundary condition is applied. This argument is not valid when
fastenerName and fastenerSetName are speciﬁed.
region
A String specifying the name of the assembled fastener to which the boundary condition will be
applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the boundary condition
will be applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A Float or a SymbolicConstant specifying the velocity component in the connector's local 1-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v1
Note:
Although v1, v2, v3, vr1, vr2, and vr3 are optional arguments, at least one of them must be
speciﬁed.
A Float or a SymbolicConstant specifying the velocity component in the connector's local 2-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v2
307
ConnVelocityBC object

A Float or a SymbolicConstant specifying the velocity component in the connector's local 3-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v3
A Float or a SymbolicConstant specifying the rotational velocity component in the connector's
local 4-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
vr1
A Float or a SymbolicConstant specifying the rotational velocity component in the connector's
local 5-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
vr2
A Float or a SymbolicConstant specifying the rotational velocity component in the connector's
local 6-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
vr3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the boundary condition has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible values
are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
Return value
A ConnVelocityBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConnVelocityBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnVelocityBC  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
308
ConnVelocityBC object

setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConnVelocityBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or a SymbolicConstant specifying the velocity component in the connector's local 1-direction.
Possible values for the SymbolicConstant are SET and FREED.
v1
A Float or a SymbolicConstant specifying the velocity component in the connector's local 2-direction.
Possible values for the SymbolicConstant are SET and FREED.
v2
A Float or a SymbolicConstant specifying the velocity component in the connector's local 3-direction.
Possible values for the SymbolicConstant are SET and FREED.
v3
A Float or a SymbolicConstant specifying the rotational velocity component in the connector's local
4-direction. Possible values for the SymbolicConstant are SET and FREED.
vr1
A Float or a SymbolicConstant specifying the rotational velocity component in the connector's local
5-direction. Possible values for the SymbolicConstant are SET and FREED.
vr2
A Float or a SymbolicConstant specifying the rotational velocity component in the connector's local
6-direction. Possible values for the SymbolicConstant are SET and FREED.
vr3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is valid
for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConnVelocityBC object can have the following members:
A String specifying the boundary condition repository key.
name
309
Abaqus Scripting Reference Guide
ConnVelocityBC object

A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A String specifying the name of the assembled fastener to which the boundary condition will
be applied. This argument is not valid when region is speciﬁed. When this argument is
speciﬁed, fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the boundary condition
will be applied. This argument is not valid when region is speciﬁed. When this argument is
speciﬁed, fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
310
ConnVelocityBC object

ConnVelocityBCState object
The ConnVelocityBCState object stores the propagating data for a velocity boundary condition in a step. One instance
of this object is created internally by the ConnVelocityBC object for each step. The instance is also deleted internally
by the ConnVelocityBC object.
The ConnVelocityBCState object has no constructor or methods.
The ConnVelocityBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The ConnVelocityBCState object has the following members:
A Float specifying the velocity component in the connector's local 1-direction.
v1
A Float specifying the velocity component in the connector's local 2-direction.
v2
A Float specifying the velocity component in the connector's local 3-direction.
v3
A Float specifying the rotational velocity component in the connector's local 4-direction.
vr1
A Float specifying the rotational velocity component in the connector's local 5-direction.
vr2
A Float specifying the rotational velocity component in the connector's local 6-direction.
vr3
A SymbolicConstant specifying the propagation state of the velocity component in the connector's
local 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v1State
A SymbolicConstant specifying the propagation state of the velocity component in the connector's
local 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v2State
A SymbolicConstant specifying the propagation state of the velocity component in the connector's
local 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v3State
A SymbolicConstant specifying the propagation state of the rotational velocity component in the
connector's local 4–direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
vr1State
A SymbolicConstant specifying the propagation state of the rotational velocity component in the
connector's local 5–direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
vr2State
311
ConnVelocityBCState object

A SymbolicConstant specifying the propagation state of the rotational velocity component in the
connector's local 6–direction. Possible values are UNSET, SET, UNCHANGED, FREED, and
MODIFIED.
vr3State
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CONNECTOR MOTION, TYPE=VELOCITY (degree of freedom: 1, 2, 3, 4, 5, or 6)
Abaqus Scripting Reference Guide
312
ConnVelocityBCState object

DisplacementBaseMotionBC object
The DisplacementBaseMotionBC object stores the data for a displacement base motion boundary condition.
The DisplacementBaseMotionBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
DisplacementBaseMotionBC(...)
This method creates a DisplacementBaseMotionBC object.
Path
mdb.models[name].DisplacementBaseMotionBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A SymbolicConstant specifying the constrained degree-of-freedom. Possible values for the
SymbolicConstant are U1, U2, U3, UR1, UR2, UR3. The default value is U1.
dof
Optional arguments
A Float specifying the scale factor for the amplitude curve. The default value is 1.0.
amplitudeScaleFactor
A ModelDot object specifying a tuple containing one center of rotation. The default
value is the global origin. This argument applies only when dof=UR1, UR2, or UR3.
centerOfRotation
A CorrelationArray object.
correlation
A String specifying the name of the SecondaryBaseBC object associated with this
boundary condition. The default value is an empty string.
secondaryBase
A Boolean specifying whether to deﬁne the imaginary (out-of-plane) portion of the base
motion record given by amplitude deﬁnition. The default value is OFF.
useComplex
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the
speciﬁed step.
313
DisplacementBaseMotionBC object

Return value
A DisplacementBaseMotionBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing DisplacementBaseMotionBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DisplacementBaseMotionBC  method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing DisplacementBaseMotionBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is
valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
314
DisplacementBaseMotionBC object

Members
The DisplacementBaseMotionBC object can have the following members:
A String specifying the boundary condition repository key.
name
A Float specifying the scale factor for the amplitude curve. The default value is 1.0.
amplitudeScaleFactor
A Boolean specifying whether to deﬁne the imaginary (out-of-plane) portion of the base
motion record given by amplitude deﬁnition. The default value is OFF.
useComplex
A ModelDot object specifying a tuple containing one center of rotation. The default value
is the global origin. This argument applies only when dof=UR1, UR2, or UR3.
centerOfRotation
A CorrelationArray object.
correlation
A String specifying the name of the SecondaryBaseBC object associated with this
boundary condition. The default value is an empty string.
secondaryBase
A SymbolicConstant specifying the category of the boundary condition. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned
in the global coordinate system. The default value is None.
localCsys
315
Abaqus Scripting Reference Guide
DisplacementBaseMotionBC object

DisplacementBaseMotionBCState object
The DisplacementBaseMotionBCState object stores the propagating data for a velocity base motion boundary condition
in a step. One instance of this object is created internally by the DisplacementBaseMotionBC object for each step. The
instance is also deleted internally by the DisplacementBaseMotionBC object.
The DisplacementBaseMotionBCState object has no constructor or methods.
The DisplacementBaseMotionBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The DisplacementBaseMotionBCState object has the following members:
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BASE MOTION
Abaqus Scripting Reference Guide
316
DisplacementBaseMotionBCState object

DisplacementBC object
The DisplacementBC object stores the data for a displacement/rotation boundary condition.
The DisplacementBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
DisplacementBC(...)
This method creates a DisplacementBC object.
Path
mdb.models[name].DisplacementBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField or DiscreteField object associated with this
boundary condition. The ﬁeldName argument applies only when distributionType=FIELD or
distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeldName
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the 1-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
u1
Note:
Although u1, u2, u3, ur1, ur2, and ur3 are optional arguments, at least one of them must be
speciﬁed.
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the 2-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
u2
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the 3-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
u3
A Float, a Complex, or a SymbolicConstant specifying the rotational displacement component about
the 1-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ur1
317
DisplacementBC object

A Float, a Complex, or a SymbolicConstant specifying the rotational displacement component about
the 2-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ur2
A Float, a Complex, or a SymbolicConstant specifying the rotational displacement component about
the 3-direction. Possible values for the SymbolicConstant are UNSET and SET. The default value
is UNSET.
ur3
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values at
the start of the step. The default value is OFF.
ﬁxed
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the boundary condition has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible values
are UNIFORM, USER_DEFINED, FIELD, and DISCRETE_FIELD. The default value is UNIFORM.
distributionType
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate
system. The default value is None.
localCsys
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
Return value
A DisplacementBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing DisplacementBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DisplacementBC  method, except for
the name and createStepName arguments.
Return value
None.
Abaqus Scripting Reference Guide
318
DisplacementBC object

Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing DisplacementBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the 1-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u1
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the 2-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u2
A Float, a Complex, or a SymbolicConstant specifying the displacement component in the 3-direction.
Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
u3
A Float, a Complex, or a SymbolicConstant specifying the rotational displacement component about
the 1-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur1
A Float, a Complex, or a SymbolicConstant specifying the rotational displacement component about
the 2-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur2
A Float, a Complex, or a SymbolicConstant specifying the rotational displacement component about
the 3-direction. Possible values for the SymbolicConstant are SET, UNCHANGED, and FREED.
ur3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is valid
for the speciﬁed step.
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES, and
PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
Return value
None.
Exceptions
None.
319
Abaqus Scripting Reference Guide
DisplacementBC object

Members
The DisplacementBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, FIELD, and DISCRETE_FIELD. The default value
is UNIFORM.
distributionType
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
A String specifying the name of the AnalyticalField or DiscreteField object associated with
this boundary condition. The ﬁeldName argument applies only when distributionType=FIELD
or distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeldName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
320
DisplacementBC object

DisplacementBCState object
The DisplacementBCState object stores the propagating data for a displacement/rotation boundary condition in a step.
One instance of this object is created internally by the DisplacementBC object for each step. The instance is also deleted
internally by the DisplacementBC object.
The DisplacementBCState object has no constructor or methods.
The DisplacementBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The DisplacementBCState object has the following members:
A Float or a Complex specifying the displacement component in the 1-direction.
u1
A Float or a Complex specifying the displacement component in the 2-direction.
u2
A Float or a Complex specifying the displacement component in the 3-direction.
u3
A Float or a Complex specifying the rotational displacement component about the 1-direction.
ur1
A Float or a Complex specifying the rotational displacement component about the 2-direction.
ur2
A Float or a Complex specifying the rotational displacement component about the 3-direction.
ur3
A SymbolicConstant specifying the propagation state of the displacement component in the
1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
u1State
A SymbolicConstant specifying the propagation state of the displacement component in the
2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
u2State
A SymbolicConstant specifying the propagation state of the displacement component in the
3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
u3State
A SymbolicConstant specifying the propagation state of the rotational displacement component
about the 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur1State
A SymbolicConstant specifying the propagation state of the rotational displacement component
about the 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur2State
A SymbolicConstant specifying the propagation state of the rotational displacement component
about the 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
ur3State
321
DisplacementBCState object

A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BOUNDARY, TYPE=DISPLACEMENT (degree of freedom: 1, 2, 3, 4, 5, or 6)
Abaqus Scripting Reference Guide
322
DisplacementBCState object

ElectricPotentialBC object
The ElectricPotentialBC object stores the data for an electrical potential boundary condition.
The ElectricPotentialBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
ElectricPotentialBC(...)
This method creates an ElectricPotentialBC object.
Path
mdb.models[name].ElectricPotentialBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A Float specifying the electrical potential magnitude. The default value is 0. The magnitude
argument is optional if distributionType=USER_DEFINED.
magnitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
Return value
An ElectricPotentialBC object.
323
ElectricPotentialBC object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ElectricPotentialBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ElectricPotentialBC  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ElectricPotentialBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or the SymbolicConstant FREED specifying the electrical potential magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the boundary
condition is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ElectricPotentialBC object can have the following members:
Abaqus Scripting Reference Guide
324
ElectricPotentialBC object

A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
325
Abaqus Scripting Reference Guide
ElectricPotentialBC object

ElectricPotentialBCState object
The ElectricPotentialBCState object stores the propagating data for a electrical potential boundary condition in a step.
One instance of this object is created internally by the ElectricPotentialBC object for each step. The instance is also
deleted internally by the ElectricPotentialBC object.
The ElectricPotentialBCState object has no constructor or methods.
The ElectricPotentialBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The ElectricPotentialBCState object has the following members:
A Float specifying the electrical potential magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the electrical potential magnitude.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Abaqus Scripting Reference Guide
326
ElectricPotentialBCState object

Corresponding analysis keywords
•
*BOUNDARY (degree of freedom: 9)
327
Abaqus Scripting Reference Guide
ElectricPotentialBCState object

EulerianBC object
The EulerianBC object stores the data for an Eulerian boundary condition.
The EulerianBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
EulerianBC(...)
This method creates a EulerianBC object.
Path
mdb.models[name].EulerianBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A SymbolicConstant specifying the ﬂow conditions to be deﬁned. Possible values are
INFLOW, OUTFLOW, and BOTH. The default value is INFLOW.
deﬁnition
A SymbolicConstant specifying the control of material ﬂow into the Eulerian domain. Possible
values are FREE, NONE, and VOID. The default value is FREE.
inﬂowType
A SymbolicConstant specifying the control of ﬂow of material out of the Eulerian domain.
Possible values are ZERO_PRESSURE, FREE, NON_REFLECTING, and EQUILIBRIUM.
The default value is ZERO_PRESSURE.
outﬂowType
Return value
An EulerianBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing EulerianBC object in the step where it is created.
Abaqus Scripting Reference Guide
328
EulerianBC object

Required arguments
None.
Optional arguments
A Region object specifying the region to which the boundary condition is applied.
region
A SymbolicConstant specifying the material ﬂow conditions to be deﬁned. Possible values
are INFLOW, OUTFLOW, and BOTH. The default value is INFLOW.
deﬁnition
A SymbolicConstant specifying the control of material ﬂow into the Eulerian domain. Possible
values are FREE, NONE, and VOID. The default value is FREE.
inﬂowType
A SymbolicConstant specifying the control of material ﬂow out of the Eulerian domain.
Possible values are ZERO_PRESSURE, FREE, NON_REFLECTING, and EQUILIBRIUM.
The default value is ZERO_PRESSURE.
outﬂowType
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing EulerianBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A SymbolicConstant specifying the material ﬂow conditions to be deﬁned. Possible values
are INFLOW, OUTFLOW, and BOTH. The default value is INFLOW.
deﬁnition
A SymbolicConstant specifying the control of material ﬂow into the Eulerian domain. Possible
values are FREE, NONE, and VOID. The default value is FREE.
inﬂowType
A SymbolicConstant specifying the control of material ﬂow out of the Eulerian domain.
Possible values are ZERO_PRESSURE, FREE, NON_REFLECTING, and EQUILIBRIUM.
The default value is ZERO_PRESSURE.
outﬂowType
Return value
None.
329
Abaqus Scripting Reference Guide
EulerianBC object

Exceptions
None.
Members
The EulerianBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying the ﬂow conditions to be deﬁned. Possible values are
INFLOW, OUTFLOW, and BOTH. The default value is INFLOW.
deﬁnition
A SymbolicConstant specifying the control of material ﬂow into the Eulerian domain. Possible
values are FREE, NONE, and VOID. The default value is FREE.
inﬂowType
A SymbolicConstant specifying the control of ﬂow of material out of the Eulerian domain.
Possible values are ZERO_PRESSURE, FREE, NON_REFLECTING, and EQUILIBRIUM.
The default value is ZERO_PRESSURE.
outﬂowType
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
330
EulerianBC object

EulerianBCState object
The EulerianBCState object stores the propagating data for an Eulerian boundary condition in a step. One instance of
this object is created internally by the EulerianBC object for each step. The instance is also deleted internally by the
EulerianBC object.
The EulerianBCState object has no constructor or methods.
The EulerianBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The EulerianBCState object has the following members:
A SymbolicConstant specifying the material ﬂow conditions to be deﬁned. Possible values
are INFLOW, OUTFLOW, and BOTH. The default value is INFLOW.
deﬁnition
A SymbolicConstant specifying the propagation state of the deﬁnition member. Possible
values are UNSET, SET, and UNCHANGED.
deﬁnitionState
A SymbolicConstant specifying the material ﬂow conditions to be deﬁned. Possible values
are FREE, NONE, and VOID. The default value is FREE.
inﬂowType
A SymbolicConstant specifying the propagation state of the deﬁnition member. Possible
values are UNSET, SET, and UNCHANGED.
inﬂowTypeState
A SymbolicConstant specifying the material ﬂow conditions to be deﬁned. Possible values
are ZERO_PRESSURE, FREE, NON_REFLECTING, and EQUILIBRIUM. The default
value is ZERO_PRESSURE.
outﬂowType
A SymbolicConstant specifying the propagation state of the deﬁnition member. Possible
values are UNSET, SET, and UNCHANGED.
outﬂowTypeState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
331
EulerianBCState object

•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*EULERIAN BOUNDARY
Abaqus Scripting Reference Guide
332
EulerianBCState object

EulerianMotionBC object
The EulerianMotionBC object stores the data for an Eulerian mesh motion boundary condition.
The EulerianMotionBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
EulerianMotionBC(...)
This method creates an EulerianMotionBC object.
Path
mdb.models[name].EulerianMotionBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A String specifying the name of the Eulerian part instance.
instanceName
Optional arguments
A Boolean specifying whether the mesh will follow a regular surface region or an Eulerian
surface. The default value is ON.
followRegion
A Region object specifying the region to which the boundary condition is applied.
region
A String specifying the name of the Eulerian surface to follow. This argument applies only
when followRegion=False.
materialName
A SymbolicConstant specifying the 1-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition1
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition1
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition1
333
EulerianMotionBC object

None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
1 direction. If expansionRatio1=None, then there is no upper limit. The default value is
None.
expansionRatio1
A Float specifying the lower bounds on the allowable scaling of the mesh in the 1 direction.
The default value is 0.0.
contractRatio1
A SymbolicConstant specifying the 2-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition2
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition2
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition2
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
2 direction. If expansionRatio2=None, then there is no upper limit. The default value is
None.
expansionRatio2
A Float specifying the lower bounds on the allowable scaling of the mesh in the 2 direction.
The default value is 0.0.
contractRatio2
A SymbolicConstant specifying the 3-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition3
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition3
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition3
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
3 direction. If expansionRatio3=None, then there is no upper limit. The default value is
None.
expansionRatio3
A Float specifying the lower bounds on the allowable scaling of the mesh in the 3 direction.
The default value is 0.0.
contractRatio3
A Boolean specifying whether the mesh is allowed to contract . The default value is ON.
allowContraction
A Float specifying the maximum change in allowed aspect ratio (for any of the three mesh
aspects, 1-2, 2-3, 3-1). The default value is 10.0.
aspectLimit
Abaqus Scripting Reference Guide
334
EulerianMotionBC object

A Float specifying the multiplier for the mesh nodal velocity limit. The default value is
1.01.
vmaxFactor
A Float specifying the lower bounds on the volume fraction when determining which
nodes to include in the surface bounding box calculation for an Eulerian material surface.
This argument applies only when followRegion=False. The default value is 0.5.
volThreshold
None or a Float specifying the buffer between the surface box and the Eulerian section
mesh bounding box. The default value is 2.0.
bufferSize
Return value
An EulerianMotionBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing EulerianMotionBC object in the step where it is created.
Required arguments
None.
Optional arguments
A String specifying the name of the Eulerian part instance.
instanceName
A Boolean specifying whether the mesh will follow a regular surface region or an Eulerian
surface. The default value is ON.
followRegion
A Region object specifying the region to which the boundary condition is applied.
region
A String specifying the name of the Eulerian surface to follow. This argument applies
only when followRegion=False.
materialName
A SymbolicConstant specifying the 1-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition1
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition1
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition1
335
Abaqus Scripting Reference Guide
EulerianMotionBC object

None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
1 direction. If expansionRatio1=None, then there is no upper limit. The default value is
None.
expansionRatio1
A Float specifying the lower bounds on the allowable scaling of the mesh in the 1 direction.
The default value is 0.0.
contractRatio1
A SymbolicConstant specifying the 2-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition2
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition2
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition2
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
2 direction. If expansionRatio2=None, then there is no upper limit. The default value is
None.
expansionRatio2
A Float specifying the lower bounds on the allowable scaling of the mesh in the 2 direction.
The default value is 0.0.
contractRatio2
A SymbolicConstant specifying the 3-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition3
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition3
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition3
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
3 direction. If expansionRatio3=None, then there is no upper limit. The default value is
None.
expansionRatio3
A Float specifying the lower bounds on the allowable scaling of the mesh in the 3 direction.
The default value is 0.0.
contractRatio3
A Boolean specifying whether the mesh is allowed to contract . The default value is ON.
allowContraction
A Float specifying the maximum change in allowed aspect ratio (for any of the three mesh
aspects, 1-2, 2-3, 3-1). The default value is 10.0.
aspectLimit
Abaqus Scripting Reference Guide
336
EulerianMotionBC object

A Float specifying the multiplier for the mesh nodal velocity limit. The default value is
1.01.
vmaxFactor
A Float specifying the lower bounds on the volume fraction when determining which
nodes to include in the surface bounding box calculation for an Eulerian material surface.
This argument applies only when followRegion=False. The default value is 0.5.
volThreshold
None or a Float specifying the buffer between the surface box and the Eulerian section
mesh bounding box. The default value is 2.0.
bufferSize
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing EulerianMotionBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A SymbolicConstant specifying the 1-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition1
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition1
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition1
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
1 direction. If expansionRatio1=None, then there is no upper limit. The default value is
None.
expansionRatio1
A Float specifying the lower bounds on the allowable scaling of the mesh in the 1 direction.
The default value is 0.0.
contractRatio1
A SymbolicConstant specifying the 2-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition2
337
Abaqus Scripting Reference Guide
EulerianMotionBC object

A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition2
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition2
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
2 direction. If expansionRatio2=None, then there is no upper limit. The default value is
None.
expansionRatio2
A Float specifying the lower bounds on the allowable scaling of the mesh in the 2 direction.
The default value is 0.0.
contractRatio2
A SymbolicConstant specifying the 3-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition3
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition3
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition3
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
3 direction. If expansionRatio3=None, then there is no upper limit. The default value is
None.
expansionRatio3
A Float specifying the lower bounds on the allowable scaling of the mesh in the 3 direction.
The default value is 0.0.
contractRatio3
A Boolean specifying whether the mesh is allowed to contract . The default value is ON.
allowContraction
A Float specifying the maximum change in allowed aspect ratio (for any of the three mesh
aspects, 1-2, 2-3, 3-1). The default value is 10.0.
aspectLimit
A Float specifying the multiplier for the mesh nodal velocity limit. The default value is
1.01.
vmaxFactor
A Float specifying the lower bounds on the volume fraction when determining which nodes
to include in the surface bounding box calculation for an Eulerian material surface. This
argument applies only when followRegion=False. The default value is 0.5.
volThreshold
None or a Float specifying the buffer between the surface box and the Eulerian section
mesh bounding box. The default value is 2.0.
bufferSize
Abaqus Scripting Reference Guide
338
EulerianMotionBC object

Return value
None.
Exceptions
None.
Members
The EulerianMotionBC object can have the following members:
A String specifying the boundary condition repository key.
name
A Boolean specifying whether the mesh will follow a regular surface region or an Eulerian
surface. The default value is ON.
followRegion
A SymbolicConstant specifying the 1-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition1
A SymbolicConstant specifying the 2-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition2
A SymbolicConstant specifying the 3-direction translational constraint on the center of
the Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition3
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition1
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition2
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition3
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition1
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition2
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition3
339
Abaqus Scripting Reference Guide
EulerianMotionBC object

None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
1 direction. If expansionRatio1=None, then there is no upper limit. The default value is
None.
expansionRatio1
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
2 direction. If expansionRatio2=None, then there is no upper limit. The default value is
None.
expansionRatio2
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the
3 direction. If expansionRatio3=None, then there is no upper limit. The default value is
None.
expansionRatio3
A Float specifying the lower bounds on the allowable scaling of the mesh in the 1 direction.
The default value is 0.0.
contractRatio1
A Float specifying the lower bounds on the allowable scaling of the mesh in the 2 direction.
The default value is 0.0.
contractRatio2
A Float specifying the lower bounds on the allowable scaling of the mesh in the 3 direction.
The default value is 0.0.
contractRatio3
A Boolean specifying whether the mesh is allowed to contract . The default value is ON.
allowContraction
A Float specifying the maximum change in allowed aspect ratio (for any of the three mesh
aspects, 1-2, 2-3, 3-1). The default value is 10.0.
aspectLimit
A Float specifying the multiplier for the mesh nodal velocity limit. The default value is
1.01.
vmaxFactor
A Float specifying the lower bounds on the volume fraction when determining which nodes
to include in the surface bounding box calculation for an Eulerian material surface. This
argument applies only when followRegion=False. The default value is 0.5.
volThreshold
None or a Float specifying the buffer between the surface box and the Eulerian section
mesh bounding box. The default value is 2.0.
bufferSize
A String specifying the name of the Eulerian part instance.
instanceName
A String specifying the name of the Eulerian surface to follow. This argument applies only
when followRegion=False.
materialName
A SymbolicConstant specifying the category of the boundary condition. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned
in the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
340
EulerianMotionBC object

EulerianMotionBCState object
The EulerianMotionBCState object stores the propagating data for an Eulerian mesh motion boundary condition in a
step. One instance of this object is created internally by the EulerianMotionBC object for each step. The instance is
also deleted internally by the EulerianMotionBC object.
The EulerianMotionBCState object has no constructor or methods.
The EulerianMotionBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The EulerianMotionBCState object has the following members:
A SymbolicConstant specifying the 1-direction translational constraint on the center of the
Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition1
A SymbolicConstant specifying the 2-direction translational constraint on the center of the
Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition2
A SymbolicConstant specifying the 3-direction translational constraint on the center of the
Eulerian mesh. Possible values are FREE and FIXED. The default value is FREE.
ctrPosition3
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition1
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition2
A SymbolicConstant specifying the translational constraint on the positive (maximum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
posPosition3
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 1 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition1
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 2 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition2
A SymbolicConstant specifying the translational constraint on the negative (minimum)
bounds of the mesh in the 3 direction. Possible values are FREE and FIXED. The default
value is FREE.
negPosition3
341
EulerianMotionBCState object

None or a Float specifying the upper bounds on the allowable scaling of the mesh in the 1
direction. If expansionRatio1=None, then there is no upper limit. The default value is None.
expansionRatio1
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the 2
direction. If expansionRatio2=None, then there is no upper limit. The default value is None.
expansionRatio2
None or a Float specifying the upper bounds on the allowable scaling of the mesh in the 3
direction. If expansionRatio3=None, then there is no upper limit. The default value is None.
expansionRatio3
A Float specifying the lower bounds on the allowable scaling of the mesh in the 1 direction.
The default value is 0.0.
contractRatio1
A Float specifying the lower bounds on the allowable scaling of the mesh in the 2 direction.
The default value is 0.0.
contractRatio2
A Float specifying the lower bounds on the allowable scaling of the mesh in the 3 direction.
The default value is 0.0.
contractRatio3
A Boolean specifying whether the mesh is allowed to contract . The default value is ON.
allowContraction
A Float specifying the maximum change in allowed aspect ratio (for any of the three mesh
aspects, 1-2, 2-3, 3-1). The default value is 10.0.
aspectLimit
A Float specifying the multiplier for the mesh nodal velocity limit. The default value is
1.01.
vmaxFactor
A Float specifying the lower bounds on the volume fraction when determining which nodes
to include in the surface bounding box calculation for an Eulerian material surface. This
argument applies only when followRegion=False. The default value is 0.5.
volThreshold
None or a Float specifying the buffer between the surface box and the Eulerian section
mesh bounding box. The default value is 2.0.
bufferSize
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
Abaqus Scripting Reference Guide
342
EulerianMotionBCState object

•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*EULERIAN MESH MOTION
343
Abaqus Scripting Reference Guide
EulerianMotionBCState object

FluidCavityPressureBC object
The FluidCavityPressureBC object stores the data for a ﬂuid cavity pressure boundary condition.
The FluidCavityPressureBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
FluidCavityPressureBC(...)
This method creates a FluidCavityPressureBC object.
Path
mdb.models[name].FluidCavityPressureBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A String specifying the name of a Fluid Cavity Interaction.
ﬂuidCavity
Optional arguments
A Float specifying the ﬂuid cavity pressure magnitude. The default value is 0.
magnitude
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default value
is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
Return value
A FluidCavityPressureBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing FluidCavityPressureBC object in the step where it is created.
Abaqus Scripting Reference Guide
344
FluidCavityPressureBC object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidCavityPressureBC  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing FluidCavityPressureBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or the SymbolicConstant FREED specifying the ﬂuid cavity pressure magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the boundary
condition is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The FluidCavityPressureBC object can have the following members:
A String specifying the boundary condition repository key.
name
A String specifying the name of a Fluid Cavity Interaction.
ﬂuidCavity
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
345
Abaqus Scripting Reference Guide
FluidCavityPressureBC object

A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
346
FluidCavityPressureBC object

FluidCavityPressureBCState object
The FluidCavityPressureBCState object stores the propagating data for a ﬂuid cavity pressure boundary condition in
a step. One instance of this object is created internally by the FluidCavityPressureBC object for each step. The instance
is also deleted internally by the FluidCavityPressureBC object.
The FluidCavityPressureBCState object has no constructor or methods.
The FluidCavityPressureBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The FluidCavityPressureBCState object has the following members:
A Float specifying the ﬂuid cavity pressure magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the ﬂuid cavity pressure magnitude.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
347
FluidCavityPressureBCState object

Corresponding analysis keywords
•
*BOUNDARY (degree of freedom: 8)
Abaqus Scripting Reference Guide
348
FluidCavityPressureBCState object

MagneticVectorPotentialBC object
The MagneticVectorPotentialBC object stores the data for a magnetic vector potential boundary condition.
The MagneticVectorPotentialBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
MagneticVectorPotentialBC(...)
This method creates a MagneticVectorPotentialBC object.
Path
mdb.models[name].MagneticVectorPotentialBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A Complex, or a SymbolicConstant specifying the magnetic vector potential component in
the 1-direction. Possible values for the SymbolicConstant are UNSET and SET. The default
value is UNSET
component1
A Complex, or a SymbolicConstant specifying the magnetic vector potential component in
the 2-direction. Possible values for the SymbolicConstant are UNSET and SET. The default
value is UNSET.
component2
A Complex, or a SymbolicConstant specifying the magnetic vector potential component in
the 3-direction. Possible values for the SymbolicConstant are UNSET and SET. The default
value is UNSET.
component3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
349
MagneticVectorPotentialBC object

None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A MagneticVectorPotentialBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing MagneticVectorPotentialBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MagneticVectorPotentialBC  method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing MagneticVectorPotentialBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Complex, or a SymbolicConstant specifying the magnetic vector potential component in the
1-direction. Possible values for the SymbolicConstant are SET and UNCHANGED.
component1
A Complex, or a SymbolicConstant specifying the magnetic vector potential component in the
2-direction. Possible values for the SymbolicConstant are SET and UNCHANGED.
component2
A Complex, or a SymbolicConstant specifying the magnetic vector potential component in the
3-direction. Possible values for the SymbolicConstant areSET and UNCHANGED.
component3
Abaqus Scripting Reference Guide
350
MagneticVectorPotentialBC object

A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the
boundary condition is changed to have no amplitude reference. You should provide the amplitude
argument only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The MagneticVectorPotentialBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
351
Abaqus Scripting Reference Guide
MagneticVectorPotentialBC object

MaterialFlowBC object
The MaterialFlowBC object stores the data for a connector material ﬂow boundary condition.
The MaterialFlowBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
MaterialFlowBC(...)
This method creates a MaterialFlowBC object.
Path
mdb.models[name].MaterialFlowBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A Float specifying the material ﬂow magnitude. The default value is 0. The magnitude argument
is optional if distributionType=USER_DEFINED.
magnitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
Return value
A MaterialFlowBC object.
Abaqus Scripting Reference Guide
352
MaterialFlowBC object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing MaterialFlowBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MaterialFlowBC  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing MaterialFlowBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or the SymbolicConstant FREED specifying the material ﬂow magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the boundary
condition is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The MaterialFlowBC object can have the following members:
353
Abaqus Scripting Reference Guide
MaterialFlowBC object

A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
354
MaterialFlowBC object

MaterialFlowBCState object
The MaterialFlowBCState object stores the propagating data for a connector material ﬂow boundary condition in a
step. One instance of this object is created internally by the MaterialFlowBC object for each step. The instance is also
deleted internally by the MaterialFlowBC object.
The MaterialFlowBCState object has no constructor or methods.
The MaterialFlowBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The MaterialFlowBCState object has the following members:
A Float specifying the material ﬂow magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the material ﬂow magnitude. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
355
MaterialFlowBCState object

Corresponding analysis keywords
•
*BOUNDARY (degree of freedom: 10)
Abaqus Scripting Reference Guide
356
MaterialFlowBCState object

PorePressureBC object
The PorePressureBC object stores the data for a pore pressure boundary condition.
The PorePressureBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
PorePressureBC(...)
This method creates a PorePressureBC object.
Path
mdb.models[name].PorePressureBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A Float specifying the pore pressure magnitude. The default value is 0. The magnitude argument
is optional if distributionType=USER_DEFINED.
magnitude
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
Return value
A PorePressureBC object.
357
PorePressureBC object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing PorePressureBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PorePressureBC  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing PorePressureBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or the SymbolicConstant FREED specifying the pore pressure magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the boundary
condition is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The PorePressureBC object can have the following members:
Abaqus Scripting Reference Guide
358
PorePressureBC object

A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
359
Abaqus Scripting Reference Guide
PorePressureBC object

PorePressureBCState object
The PorePressureBCState object stores the propagating data for a pore pressure boundary condition in a step. One
instance of this object is created internally by the PorePressureBC object for each step. The instance is also deleted
internally by the PorePressureBC object.
The PorePressureBCState object has no constructor or methods.
The PorePressureBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The PorePressureBCState object has the following members:
A Float specifying the pore pressure magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the pore pressure magnitude. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Abaqus Scripting Reference Guide
360
PorePressureBCState object

Corresponding analysis keywords
•
*BOUNDARY (degree of freedom: 8)
361
Abaqus Scripting Reference Guide
PorePressureBCState object

RetainedNodalDofsBC object
The RetainedNodalDofsBC object stores the data for a retained nodal dofs boundary condition.
The RetainedNodalDofsBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
RetainedNodalDofsBC(...)
This method creates a RetainedNodalDofsBC object.
Path
mdb.models[name].RetainedNodalDofsBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A Boolean specifying whether to retain the degree of freedom in the 1-direction. The default value is
OFF indicating that the degree of freedom is not retained.
u1
A Boolean specifying whether to retain the degree of freedom in the 2-direction. The default value is
OFF indicating that the degree of freedom is not retained.
u2
A Boolean specifying whether to retain the degree of freedom in the 3-direction. The default value is
OFF indicating that the degree of freedom is not retained.
u3
A Boolean specifying whether to retain the rotational degree of freedom about the 1-direction. The
default value is OFF indicating that the degree of freedom is not retained.
ur1
A Boolean specifying whether to retain the rotational degree of freedom about the 2-direction. The
default value is OFF indicating that the degree of freedom is not retained.
ur2
A Boolean specifying whether to retain the rotational degree of freedom about the 3-direction. The
default value is OFF indicating that the degree of freedom is not retained.
ur3
Return value
A RetainedNodalDofsBC object.
Abaqus Scripting Reference Guide
362
RetainedNodalDofsBC object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing RetainedNodalDofsBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RetainedNodalDofsBC  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing RetainedNodalDofsBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Boolean specifying whether to retain the degree of freedom in the 1-direction.
u1
A Boolean specifying whether to retain the degree of freedom in the 2-direction.
u2
A Boolean specifying whether to retain the degree of freedom in the 3-direction.
u3
A Boolean specifying whether to retain the rotational degree of freedom about the 1-direction.
ur1
A Boolean specifying whether to retain the rotational degree of freedom about the 2-direction.
ur2
A Boolean specifying whether to retain the rotational degree of freedom about the 3-direction.
ur3
Return value
None.
363
Abaqus Scripting Reference Guide
RetainedNodalDofsBC object

Exceptions
None.
Members
The RetainedNodalDofsBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
364
RetainedNodalDofsBC object

SecondaryBaseBC object
The SecondaryBaseBC object stores the data for a secondary base boundary condition.
The SecondaryBaseBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
SecondaryBaseBC(...)
This method creates a SecondaryBaseBC object.
Path
mdb.models[name].SecondaryBaseBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A RegionArray object specifying the region to which the boundary condition is applied.
Note that the usual region is ignored. The default value is MODEL.
regions
A sequence of sequences of Ints specifying the constrained degrees-of-freedom.
dofs
Optional arguments
None.
Return value
A SecondaryBaseBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SecondaryBaseBC object in the step where it is created.
Required arguments
None.
365
SecondaryBaseBC object

Optional arguments
The optional arguments to setValues are the same as the arguments to the SecondaryBaseBC  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SecondaryBaseBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SecondaryBaseBC object can have the following members:
A String specifying the boundary condition repository key.
name
A tuple of tuples of Ints specifying the constrained degrees-of-freedom.
dofs
A RegionArray object specifying the region to which the boundary condition is applied. Note
that the usual region is ignored. The default value is MODEL.
regions
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
366
SecondaryBaseBC object

SecondaryBaseBCState object
The SecondaryBaseBCState object stores the propagating data for a secondary base boundary condition in a step. One
instance of this object is created internally by the SecondaryBaseBC object for each step. The instance is also deleted
internally by the SecondaryBaseBC object.
The SecondaryBaseBCState object has no constructor or methods.
The SecondaryBaseBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The SecondaryBaseBCState object has the following members:
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BOUNDARY, BASE NAME
367
SecondaryBaseBCState object

SubmodelBC object
The SubmodelBC object stores the data for a submodel boundary condition.
The SubmodelBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
SubmodelBC(...)
This method creates a SubmodelBC object.
Path
mdb.models[name].SubmodelBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
A sequence of Ints specifying the degrees of freedom to which the boundary condition is
applied.
dof
A String specifying the step in the global model from which Abaqus reads the values of the
variables that will drive the submodel analysis. The String indicates the position of the step
in the sequence of analysis steps. For example, globalStep='1' indicates the ﬁrst step.
globalStep
A Boolean specifying whether to scale the time variable for the driven nodes' amplitude
functions to match the submodel analysis step time. The default value is OFF.
timeScale
A Float specifying the thickness of the shell in the global model. This argument is required
for shell-to-solid submodeling and is not applicable to other submodels. The default value
is 0.0.
shellThickness
Optional arguments
A String specifying the element set in the global model that will be searched for elements
whose responses will be used to drive the submodel. An empty string indicates that the
entire global model will be searched. The default value is an empty string.
globalDrivingRegion
None or a Float specifying the absolute value by which a driven node of the submodel
can lie outside the region of the elements of the global model. The default value is None.
absoluteExteriorTolerance
Abaqus Scripting Reference Guide
368
SubmodelBC object

None or a Float specifying the fraction of the average element size in the global model
by which a driven node of the submodel can lie outside the region of the elements of the
global model. The default value is 0.05.
exteriorTolerance
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned
in the global coordinate system. The default value is None.
localCsys
An Int specifying the increment number in the global model step from which the solution
will be used to specify the values of the driven variables. If globalIncrement=0, the
globalIncrement
solution from the last increment will be used. The globalIncrement argument is applicable
only for linear perturbation steps. The default value is 0.
A Float specifying the thickness of the center zone size around the shell midsurface. The
default value is None.
centerZoneSize
A Boolean specifying whether to ignore driven nodes that lie outside the region of elements
of the global model after accounting for the exterior search tolerance. The default value
is OFF.
intersectionOnly
Return value
A SubmodelBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SubmodelBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SubmodelBC method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SubmodelBC object in the speciﬁed step.
369
Abaqus Scripting Reference Guide
SubmodelBC object

Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is ON.
ﬁxed
A sequence of Ints specifying the degrees of freedom to which the boundary condition is applied.
The dof argument is applicable only if ﬁxed=OFF.
dof
A String specifying the step in the global model from which Abaqus reads the values of the
variables that will drive the submodel analysis. The String indicates the position of the step in
globalStep
the sequence of analysis steps. For example, globalStep='1' indicates the ﬁrst step. The globalStep
argument is applicable only if ﬁxed=OFF.
An Int specifying the increment number in the global model step at which the solution will be
used to specify the values of the driven variables. If globalIncrement=0, the solution from the
globalIncrement
last increment will be used. The globalIncrement argument is applicable only for linear
perturbation steps and if ﬁxed=OFF. The default value is 0.
A Float specifying the thickness of the center zone size around the shell midsurface. The default
value is None.
centerZoneSize
The centerZoneSize argument is applicable only if ﬁxed=OFF.
Return value
None.
Exceptions
None.
Members
The SubmodelBC object can have the following members:
A String specifying the boundary condition repository key.
name
A Float specifying the thickness of the shell in the global model. This argument is required
for shell-to-solid submodeling and is not applicable to other submodels. The default value
is 0.0.
shellThickness
None or a Float specifying the absolute value by which a driven node of the submodel
can lie outside the region of the elements of the global model. The default value is None.
absoluteExteriorTolerance
None or a Float specifying the fraction of the average element size in the global model
by which a driven node of the submodel can lie outside the region of the elements of the
global model. The default value is 0.05.
exteriorTolerance
Abaqus Scripting Reference Guide
370
SubmodelBC object

A String specifying the element set in the global model that will be searched for elements
whose responses will be used to drive the submodel. An empty string indicates that the
entire global model will be searched. The default value is an empty string.
globalDrivingRegion
A SymbolicConstant specifying the category of the boundary condition. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned
in the global coordinate system. The default value is None.
localCsys
371
Abaqus Scripting Reference Guide
SubmodelBC object

SubmodelBCState object
The SubmodelBCState object stores the propagating data for a Submodel boundary condition in a step. One instance
of this object is created internally by the SubmodelBC object for each step. The instance is also deleted internally by
the SubmodelBC object.
The SubmodelBCState object has no constructor or methods.
The SubmodelBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The SubmodelBCState object has the following members:
A SymbolicConstant specifying the propagation state of the dof member. Possible values
are SET and UNCHANGED.
dofState
A SymbolicConstant specifying the propagation state of the globalStep member. Possible
values are SET and UNCHANGED.
globalStepState
An Int specifying the increment number in the global model step at which the solution will
be used to specify the values of the driven variables. This argument is applicable only for
linear perturbation steps.
globalIncrement
A SymbolicConstant specifying the propagation state of the globalIncrement member.
Possible values are SET and UNCHANGED.
globalIncrementState
None or a Float specifying the thickness of the center zone size around the shell midsurface.
The default value is None.
centerZoneSize
A SymbolicConstant specifying the propagation state of the centerZoneSize member. Possible
values are SET and UNCHANGED.
centerZoneSizefState
None or a Float specifying a scaling value applied to the applied displacements at the
interface. The default value is 1.0.
scale
A SymbolicConstant specifying the propagation state of the scale member. Possible values
are SET and UNCHANGED.
scaleState
A String specifying the step in the global model from which Abaqus reads the values of the
variables that will drive the submodel analysis. The String indicates the position of the step
in the sequence of analysis steps. For example, globalStep='1' indicates the ﬁrst step.
globalStep
A tuple of Ints specifying the degrees of freedom to which the boundary condition is applied.
dof
Abaqus Scripting Reference Guide
372
SubmodelBCState object

A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*SUBMODEL
•
*BOUNDARY, SUBMODEL
373
Abaqus Scripting Reference Guide
SubmodelBCState object

TemperatureBC object
The TemperatureBC object stores the data for a temperature boundary condition.
The TemperatureBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
TemperatureBC(...)
This method creates a TemperatureBC object.
Path
mdb.models[name].TemperatureBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A Float specifying the temperature magnitude. The default value is 0.
magnitude
A sequence of Ints specifying the degrees of freedom to which the boundary condition is
applied. The default value is (11,).
dof
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A Boolean specifying whether the boundary condition should remain ﬁxed at the current values
at the start of the step. The default value is OFF.
ﬁxed
Abaqus Scripting Reference Guide
374
TemperatureBC object

Return value
A TemperatureBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing TemperatureBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TemperatureBC  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing TemperatureBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or the SymbolicConstant FREED specifying the temperature magnitude.
magnitude
A sequence of Ints specifying the degrees of freedom to which the boundary condition is applied.
dof
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the boundary
condition is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
375
Abaqus Scripting Reference Guide
TemperatureBC object

Exceptions
None.
Members
The TemperatureBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
376
TemperatureBC object

TemperatureBCState object
The TemperatureBCState object stores the propagating data for a temperature boundary condition in a step. One instance
of this object is created internally by the TemperatureBC object for each step. The instance is also deleted internally
by the TemperatureBC object.
The TemperatureBCState object has no constructor or methods.
The TemperatureBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The TemperatureBCState object has the following members:
A Float specifying the temperature magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the temperature magnitude. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the dof member. Possible values are
SET and UNCHANGED.
dofState
A tuple of Ints specifying the degrees of freedom to which the boundary condition is applied.
dof
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
377
TemperatureBCState object

A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BOUNDARY (degree of freedom: 11 for solids; 11, 12, etc. for shells)
Abaqus Scripting Reference Guide
378
TemperatureBCState object

TypeBC object
The TypeBC object stores the data for several types of predeﬁned boundary conditions that are commonly used in
stress/displacement analyses.
The TypeBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
EncastreBC(...)
This method creates an encastre TypeBC object.
Path
mdb.models[name].EncastreBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
PinnedBC(...)
This method creates a pinned TypeBC object.
379
TypeBC object

Path
mdb.models[name].PinnedBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
XsymmBC(...)
This method creates a TypeBC object that speciﬁes symmetry about the X-axis.
Path
mdb.models[name].XsymmBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Abaqus Scripting Reference Guide
380
TypeBC object

Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
YsymmBC(...)
This method creates a TypeBC object that speciﬁes symmetry about the Y-axis.
Path
mdb.models[name].YsymmBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
381
Abaqus Scripting Reference Guide
TypeBC object

ZsymmBC(...)
This method creates a TypeBC object that speciﬁes symmetry about the Z-axis.
Path
mdb.models[name].ZsymmBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
XasymmBC(...)
This method creates a TypeBC object that speciﬁes antisymmetry about the X-axis.
Path
mdb.models[name].XasymmBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Abaqus Scripting Reference Guide
382
TypeBC object

Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
YasymmBC(...)
This method creates a TypeBC object that speciﬁes antisymmetry about the Y-axis.
Path
mdb.models[name].YasymmBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
383
Abaqus Scripting Reference Guide
TypeBC object

ZasymmBC(...)
This method creates a TypeBC object that speciﬁes antisymmetry about the Z-axis.
Path
mdb.models[name].ZasymmBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
A TypeBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing TypeBC object in the step where it is created.
Required arguments
None.
Optional arguments
A Region object specifying the region to which the boundary condition is applied.
region
A SymbolicConstant specifying the predeﬁned boundary condition type. Possible values are
XSYMM, YSYMM, ZSYMM, XASYMM, YASYMM, ZASYMM, PINNED, and ENCASTRE.
typeName
Abaqus Scripting Reference Guide
384
TypeBC object

A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method always returns a value error for a TypeBC; it is inherited from the BoundaryCondition object.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A SymbolicConstant specifying the predeﬁned boundary condition type. Possible values are
XSYMM, YSYMM, ZSYMM, XASYMM, YASYMM, ZASYMM, PINNED, and ENCASTRE.
typeName
Return value
None.
Exceptions
A Symmetry/Antisymmetry/Encastre BC cannot be edited in a propagated step.
Value Error:
Members
The TypeBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is deﬁned in a *BUCKLE analysis.
Possible values are NOT_APPLICABLE, STRESS_PERTURBATION, BUCKLING_MODES,
and PERTURBATION_AND_BUCKLING. The default value is NOT_APPLICABLE.
buckleCase
A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
385
Abaqus Scripting Reference Guide
TypeBC object

A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global
coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
386
TypeBC object

TypeBCState object
The TypeBCState object stores the propagating data for a predeﬁned boundary condition in a step. One instance of
this object is created internally by the TypeBC object for each step. The instance is also deleted internally by the TypeBC
object.
The TypeBCState object has no constructor or methods.
The TypeBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The TypeBCState object has the following members:
A SymbolicConstant specifying the predeﬁned boundary condition type. Possible values are
XSYMM, YSYMM, ZSYMM, XASYMM, YASYMM, ZASYMM, PINNED, and ENCASTRE.
typeName
A SymbolicConstant specifying the propagation state of the predeﬁned boundary condition
type. The only possible value is UNCHANGED.
typeNameState
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible
values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
387
TypeBCState object

Corresponding analysis keywords
•
*BOUNDARY, TYPE=XSYMM, YSYMM, ZSYMM, XASYMM, YASYMM, ZASYMM, PINNED, or
ENCASTRE
Abaqus Scripting Reference Guide
388
TypeBCState object

VelocityBaseMotionBC object
The VelocityBaseMotionBC object stores the data for a velocity base motion boundary condition.
The VelocityBaseMotionBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
VelocityBaseMotionBC(...)
This method creates a VelocityBaseMotionBC object.
Path
mdb.models[name].VelocityBaseMotionBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A SymbolicConstant specifying the constrained degree-of-freedom. Possible values for the
SymbolicConstant are U1, U2, U3, UR1, UR2, UR3. The default value is U1.
dof
Optional arguments
A Float specifying the scale factor for the amplitude curve. The default value is 1.0.
amplitudeScaleFactor
A ModelDot object specifying a tuple containing one center of rotation. The default
value is the global origin. This argument applies only when dof=UR1, UR2, or UR3.
centerOfRotation
A CorrelationArray object.
correlation
A String specifying the name of the SecondaryBaseBC object associated with this
boundary condition. The default value is an empty string.
secondaryBase
A Boolean specifying whether to deﬁne the imaginary (out-of-plane) portion of the base
motion record given by amplitude deﬁnition. The default value is OFF.
useComplex
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the boundary condition has no amplitude reference. The default
amplitude
value is UNSET. You should provide the amplitude argument only if it is valid for the
speciﬁed step.
389
VelocityBaseMotionBC object

Return value
A VelocityBaseMotionBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing VelocityBaseMotionBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the VelocityBaseMotionBC  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing VelocityBaseMotionBC object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is
valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
390
VelocityBaseMotionBC object

Members
The VelocityBaseMotionBC object can have the following members:
A String specifying the boundary condition repository key.
name
A Float specifying the scale factor for the amplitude curve. The default value is 1.0.
amplitudeScaleFactor
A Boolean specifying whether to deﬁne the imaginary (out-of-plane) portion of the base
motion record given by amplitude deﬁnition. The default value is OFF.
useComplex
A ModelDot object specifying a tuple containing one center of rotation. The default value
is the global origin. This argument applies only when dof=UR1, UR2, or UR3.
centerOfRotation
A CorrelationArray object.
correlation
A String specifying the name of the SecondaryBaseBC object associated with this
boundary condition. The default value is an empty string.
secondaryBase
A SymbolicConstant specifying the category of the boundary condition. Possible values
are MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned
in the global coordinate system. The default value is None.
localCsys
391
Abaqus Scripting Reference Guide
VelocityBaseMotionBC object

VelocityBaseMotionBCState object
The VelocityBaseMotionBCState object stores the propagating data for a velocity base motion boundary condition in
a step. One instance of this object is created internally by the VelocityBaseMotionBC object for each step. The instance
is also deleted internally by the VelocityBaseMotionBC object.
The VelocityBaseMotionBCState object has no constructor or methods.
The VelocityBaseMotionBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The VelocityBaseMotionBCState object has the following members:
A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BASE MOTION
Abaqus Scripting Reference Guide
392
VelocityBaseMotionBCState object

VelocityBC object
The VelocityBC object stores the data for a velocity boundary condition.
The VelocityBC object is derived from the BoundaryCondition object.
Access
import load
mdb.models[name].boundaryConditions[name]
VelocityBC(...)
This method creates a VelocityBC object.
Path
mdb.models[name].VelocityBC
Required arguments
A String specifying the boundary condition repository key.
name
A String specifying the name of the step in which the boundary condition is created.
createStepName
A Region object specifying the region to which the boundary condition is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this boundary condition.
The ﬁeldName argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeldName
A Float or a SymbolicConstant specifying the velocity component in the 1-direction. Possible values
for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v1
Note:
Although v1, v2, v3, vr1, vr2, and vr3 are optional arguments, at least one of them must be
speciﬁed.
A Float or a SymbolicConstant specifying the velocity component in the 2-direction. Possible values
for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v2
A Float or a SymbolicConstant specifying the velocity component in the 3-direction. Possible values
for the SymbolicConstant are UNSET and SET. The default value is UNSET.
v3
A Float or a SymbolicConstant specifying the rotational velocity component about the 1-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
vr1
393
VelocityBC object

A Float or a SymbolicConstant specifying the rotational velocity component about the 2-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
vr2
A Float or a SymbolicConstant specifying the rotational velocity component about the 3-direction.
Possible values for the SymbolicConstant are UNSET and SET. The default value is UNSET.
vr3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the boundary condition has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
None or a DatumCsys object specifying the local coordinate system of the boundary condition's
degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate
system. The default value is None.
localCsys
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible values
are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
Return value
A VelocityBC object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing VelocityBC object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the VelocityBC  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing VelocityBC object in the speciﬁed step.
Abaqus Scripting Reference Guide
394
VelocityBC object

Required arguments
A String specifying the name of the step in which the boundary condition is modiﬁed.
stepName
Optional arguments
A Float or a SymbolicConstant specifying the velocity component in the 1-direction. Possible values
for the SymbolicConstant are SET and FREED.
v1
A Float or a SymbolicConstant specifying the velocity component in the 2-direction. Possible values
for the SymbolicConstant are SET and FREED.
v2
A Float or a SymbolicConstant specifying the velocity component in the 3-direction. Possible values
for the SymbolicConstant are SET and FREED.
v3
A Float or a SymbolicConstant specifying the rotational velocity component about the 1-direction.
Possible values for the SymbolicConstant are SET and FREED.
vr1
A Float or a SymbolicConstant specifying the rotational velocity component about the 2-direction.
Possible values for the SymbolicConstant are SET and FREED.
vr2
A Float or a SymbolicConstant specifying the rotational velocity component about the 3-direction.
Possible values for the SymbolicConstant are SET and FREED.
vr3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the boundary condition is
changed to have no amplitude reference. You should provide the amplitude argument only if it is valid
for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The VelocityBC object can have the following members:
A String specifying the boundary condition repository key.
name
A SymbolicConstant specifying how the boundary condition is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this boundary
condition. The ﬁeldName argument applies only when distributionType=FIELD. The default
value is an empty string.
ﬁeldName
395
Abaqus Scripting Reference Guide
VelocityBC object

A SymbolicConstant specifying the category of the boundary condition. Possible values are
MECHANICAL and THERMAL.
category
A Region object specifying the region to which the boundary condition is applied.
region
None or a DatumCsys object specifying the local coordinate system of the boundary
condition's degrees of freedom. If localCsys=None, the degrees of freedom are deﬁned in
the global coordinate system. The default value is None.
localCsys
Abaqus Scripting Reference Guide
396
VelocityBC object

VelocityBCState object
The VelocityBCState object stores the propagating data for a velocity boundary condition in a step. One instance of
this object is created internally by the VelocityBC object for each step. The instance is also deleted internally by the
VelocityBC object.
The VelocityBCState object has no constructor or methods.
The VelocityBCState object is derived from the BoundaryConditionState object.
Access
import load
mdb.models[name].steps[name].boundaryConditionStates[name]
Members
The VelocityBCState object has the following members:
A Float specifying the velocity component in the 1-direction.
v1
A Float specifying the velocity component in the 2-direction.
v2
A Float specifying the velocity component in the 3-direction.
v3
A Float specifying the rotational velocity component about the 1-direction.
vr1
A Float specifying the rotational velocity component about the 2-direction.
vr2
A Float specifying the rotational velocity component about the 3-direction.
vr3
A SymbolicConstant specifying the propagation state of the velocity component in the 1-direction.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v1State
A SymbolicConstant specifying the propagation state of the velocity component in the 2-direction.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v2State
A SymbolicConstant specifying the propagation state of the velocity component in the 3-direction.
Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
v3State
A SymbolicConstant specifying the propagation state of the rotational velocity component about
the 1-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
vr1State
A SymbolicConstant specifying the propagation state of the rotational velocity component about
the 2-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
vr2State
A SymbolicConstant specifying the propagation state of the rotational velocity component about
the 3-direction. Possible values are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
vr3State
397
VelocityBCState object

A SymbolicConstant specifying the propagation state of the amplitude reference. Possible values
are UNSET, SET, UNCHANGED, FREED, and MODIFIED.
amplitudeState
A SymbolicConstant specifying the propagation state of the BoundaryConditionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
PROPAGATED_FROM_BASE_STATE
•
MODIFIED_FROM_BASE_STATE
•
DEACTIVATED_FROM_BASE_STATE
•
BUILT_INTO_MODES
A String specifying the name of the amplitude reference. The String is empty if the boundary
condition has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*BOUNDARY, TYPE=VELOCITY (degree of freedom: 1, 2, 3, 4, 5, or 6)
Abaqus Scripting Reference Guide
398
VelocityBCState object

Calibration commands
The calibration commands are used for material calibration.
In this section:
•
Calibration object
•
Behavior object
•
DataSet object
399

Calibration object
A Calibration object is the object used to specify a material calibration. The Calibration object stores the data that is
used for specifying materials from test data.
Access
        import calibration
        mdb.models[name].calibrations[name]
Calibration(...)
This method creates a Calibration object.
Path
          mdb.models[name].Calibration
Required arguments
A String specifying the name of the new calibration.
name
Optional arguments
None.
Return value
A Calibration object.
Exceptions
InvalidNameError.
Members
The Calibration object has members with the same names and descriptions as the arguments to the Calibration  method.
In addition, the Calibration object can have the following members:
A DataSet object.
dataSets
A Behavior object.
behaviors
Abaqus Scripting Reference Guide
400
Calibration object

Behavior object
The Behavior object speciﬁes the method used for calibrating a material.
Access
        import calibration
        mdb.models[name].calibrations[name].behaviors[name]
Behavior(...)
This method creates a Behavior object.
Path
          mdb.models[name].calibrations[name].Behavior
Required arguments
A String specifying the name of the new behavior.
name
A String specifying the type of the new Behavior. Values can be "ElasIsoBehavior",
"ElasPlasIsoBehavior", "FeFpBehavior", or a user plug-in behavior type.
typeName
Optional arguments
None.
Return value
A Behavior object.
Exceptions
InvalidNameError.
setValues(...)
This method modiﬁes the data for an existing behavior object.
Required arguments
None.
Optional arguments
Young's modulus. Only valid if the behavior type is ElasIsoBehavior.
E
401
Behavior object

Poisson's ratio. Only valid if the behavior type is ElasIsoBehavior.
nu
The name of the ﬁrst data set. Only valid if the behavior type is ElasIsoBehavior or
ElasPlasIsoBehavior
ds1Name
The name of the second data set. Only valid if the behavior type is ElasIsoBehavior or
ElasPlasIsoBehavior
ds2Name
Material Name.
materialName
Stress/strain value for the material yield point.Only valid if the behavior type is
ElasPlasIsoBehavior
yieldPoint
Stress/strain value for the material ultimate point.Only valid if the behavior type is
ElasPlasIsoBehavior
ultimatePoint
Stress/strain values for the plastic portion of material curve. Only valid if the behavior
type is ElasPlasIsoBehavior
plasticPoints
Poisson's Ratio. Only valid if the behavior type is ElasPlasIsoBehavior
PoissonsRatio
Young's Modulus for the elastic portion of the material curve. Only valid if the behavior
type is ElasPlasIsoBehavior
elasticModulus
Extent of the material plastic points. Only valid if the behavior type is
ElasPlasIsoBehavior
plasticPointsRange
Name of the behavior.
name
Name of the uniaxial dataset. Only valid if the behavior type is FeFpBehavior
uniaxialName
Name of the biaxial dataset. Only valid if the behavior type is FeFpBehavior
biaxialName
'linear' speciﬁes linear interpolation between data points, otherwise 'logarithmic'. Only
valid if the behavior type is FeFpBehavior
interpolation
Uniaxial weight factor, uniWeight + biWeight should equal 1.0. Only valid if the
behavior type is FeFpBehavior
uniWeight
Biaxial weight factor, uniWeight + biWeight should equal 1.0. Only valid if the behavior
type is FeFpBehavior
biWeight
A List of strings, specifying names of reloading DataSet objects obtained from uniaxial
test data. Only valid if the behavior is of type FeFpBehavior
uMullinsReload
A List of strings, specifying names of reloading DataSet objects obtained from uniaxial
test data. Only valid if the behavior is of type FeFpBehavior
uMullinsUnload
Abaqus Scripting Reference Guide
402
Behavior object

A tuple specifying the coordinates of yield point of the permanent data set. Only valid
if the behavior is of type FeFpBehavior
uPYieldPoint
A List of strings, specifying names of permanent DataSet objects obtained from uniaxial
test data. Only valid if the behavior is of type FeFpBehavior
uPermSet
A string specifying name of Primary DataSet object.Only valid if the behavior is of
type FeFpBehavior
uPrimary
A List of strings, specifying names of reloading DataSet objects obtained from biaxial
test data. Only valid if the behavior is of type FeFpBehavior
bMullinsReload
A List of strings, specifying names of unloading DataSet objects obtained from biaxial
test data. Only valid if the behavior is of type FeFpBehavior
bMullinsUnload
A tuple specifying the coordinates of yield point of the permanent data set. Only valid
if the behavior is of type FeFpBehavior
bPYieldPoint
A List of strings, specifying names of permanent DataSet objects obtained from biaxial
test data. Only valid if the behavior is of type FeFpBehavior
bPermSet
A string specifying name of Primary DataSet object. Only valid if the behavior is of
type FeFpBehavior
bPrimary
Return value
None.
Exceptions
None.
mapToMaterial(...)
This method appends the calibration data obtained from the DataSet object to an existing material  object. In the case
of ElasIsoBehavior, it appends the young's modulus and poisson's ratio. For ElasPlasIsoBehavior it appends the young's
modulus, poisson's ratio and plastic points range and for FeFpBehavior it appends plastic points range and Mullins
effect properties.
Required arguments
A String specifying the name of the existing material
materialName
Optional arguments
None.
Return value
None.
403
Abaqus Scripting Reference Guide
Behavior object

Exceptions
None.
compute_E(...)
This method computes the value of young's modulus from the existing DataSet object. The method is only valid for
ElasIsoBehavior type of behavior.
Required arguments
A DataSet object.
dataSet
Optional arguments
None.
Return value
A tuple consisting of a and b values of the regression line(y = ax + b), coefﬁcient of determination(r-squared) value
and the start and end-points of the line.
Exceptions
None.
compute_nu(...)
This method computes the value of Poisson's Ratio from the existing DataSet object. The method is only valid for
ElasIsoBehavior and ElasPlasIsoBehavior type of behavior.
Required arguments
A DataSet object.
dataSet
Optional arguments
None.
Return value
A tuple consisting of a and b values of the regression line(y = ax + b), coefﬁcient of determination(r-squared) value
and the start and end-points of the line.
Exceptions
None.
compute_ultimatePoint(...)
This method computes the coordinates of the Ultimate point from the existing DataSet object. The method is only valid
for ElasPlasIsoBehavior type of behavior.
Abaqus Scripting Reference Guide
404
Behavior object

Required arguments
A DataSet object.
dataSet
Optional arguments
None.
Return value
Coordinates of the ultimate point.
Exceptions
None.
compute_elasticModulus(...)
This method computes the value of the elastic modulus from the yieldpoint value. The method is only valid for
ElasPlasIsoBehavior type of behavior.
Required arguments
A tuple consisting of coordinates of the yieldpoint.
yieldPoint
Optional arguments
None.
Return value
A ﬂoat specifying the value of elastic modulus.
Exceptions
None.
compute_plasticPoints(...)
This method extracts the coordinates of the plastic Points. The method is only valid for ElasPlasIsoBehavior type of
behavior.
Required arguments
A DataSet object.
dataSet
A ﬂoat specifying the number of values to be taken.
slider_val
A ﬂoat specifying the lower limit of the range.
start_index
A ﬂoat specifying the upper limit of the range.
end_index
405
Abaqus Scripting Reference Guide
Behavior object

Optional arguments
Coordinates of the yieldpoint. The default value is (0,0).
yp
Return value
A sequence of coordinates of the plastic points.
Exceptions
None.
xyDataDissect(...)
This method extracts primary, unload, reload and permanent DataSet objects from the existing DataSet object.The
method is only valid for FeFpBehavior type of behavior.
Required arguments
A string specifying the name of the uniaxial/biaxial test dataset.
dsName
A string specifying the name of the model to which the calibration behavior belongs.
modelName
A string specifying the name of the Calibration object to which the behavior belongs.
calibrationName
Optional arguments
A boolean specifying whether the test data is biaxial or uniaxial. The default value is True.
biaxial
Return value
A sequence of strings specifying names of the DataSet objects containing loading, unloading, reloading and primary
datasets.
Exceptions
None.
Members
The Behavior object has members with the same names and descriptions as the arguments to the Behavior  method
and setValues  method.
In addition, the Behavior object can have the following members:
A string specifying the name of the model to which the behavior belongs.
modelName
A string specifying the name of calibration to which the behavior belongs.
calibrationName
Abaqus Scripting Reference Guide
406
Behavior object

A String specifying the name of the dataset containing all the raw data in the test
data ﬁle. Only valid if the behavior is of type FeFpBehavior
biAxialAllName
A String specifying the name of the dataset containing all the raw data in the test
data ﬁle. Only valid if the behavior is of type FeFpBehavior
uniAxialAllName
407
Abaqus Scripting Reference Guide
Behavior object

DataSet object
The DataSetobject speciﬁes material test data.
Access
        import calibration
        mdb.models[name].calibrations[name].dataSets[name]
DataSet(...)
This method creates a DataSet object.
Path
          mdb.models[name].calibrations[name].DataSet
Required arguments
A String specifying the name of the new dataset.
name
Optional arguments
A sequence of pairs of Floats specifying data set type pairs. Possible values are for stress/strain,
force/displacement, or transverse strain/axial strain pairs.
data
A String specifying the type of the new dataset. Values can be "STRESS/STRAIN",
"FORCE/DISPLACEMENT", or "AXIALSTRAIN/TRANSVERSESTRAIN". The default value
is "STRESS/STRAIN".
type
A String specifying the form of the new dataset. Values can be "NOMINAL" or "TRUE". The default
value is "NOMINAl".
form
Return value
A DataSet object.
Exceptions
InvalidNameError.
setValues(...)
This method modiﬁes the data for an existing DataSet object.
Required arguments
None.
Abaqus Scripting Reference Guide
408
DataSet object

Optional arguments
A sequence of pairs of Floats specifying data set type pairs.
data
Return value
None.
Exceptions
None.
Members
The DataSet object has members with the same names and descriptions as the arguments to the DataSet  method.
409
Abaqus Scripting Reference Guide
DataSet object

Canvas commands
Canvas commands are used to create, position, and modify canvas objects.
The Canvas commands need only the abaqus module to be imported; no additional modules need to be imported.
In this section:
•
AttributeColorMap object
•
DrawingArea object
•
Layer object
•
Viewport object
•
ImageOptions object
•
MovieOptions object
•
Highlight commands
Abaqus Scripting Reference Guide
410

AttributeColorMap object
The AttributeColorMap object is used to store values and attributes associated with AttributeColorMap type objects.
AttributeColorMap objects can be modiﬁed using the methods described below. The methods accessed via the Viewport
object cause the AttributeColorMap object to be updated in the session.viewports[name].colorMappings repository.
Access
session.viewports[name].colorMappings[name]
setDefaults()
This method resets the AttributeColorMap object to its default state.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the AttributeColorMap object.
Required arguments
None.
Optional arguments
At least one of the following must be provided:
A Dictionary object specifying a color mapping. Each key is of String type and speciﬁes an attribute
in the map; the corresponding values specify the color deﬁnition to apply to that attribute in the
overrides
form (0|1, wire color, edge color, face color). The 0|1 deﬁnes the active status for the attribute. For
example:
overrides={
                        'Part-1':(1,'#00FF00', '#00CCFF',
                        '#00FF00')}
A Dictionary object specifying a custom color mapping similar to overrides. For example:
defaultOverrides={
                        'Copper':(1,''#00FF00', '#00CCFF',
                        '#00FF00')}
defaultOverrides
The color mapping can contain keys that have not been created. When the key is created, it gets
the appropriate values from this mapping.
411
AttributeColorMap object

Return value
None.
Exceptions
None.
updateOverrides(...)
This method speciﬁes additional overrides to be added to the current object deﬁnition.
Required arguments
None.
Optional arguments
At least one of the following must be provided:
A Dictionary object specifying a color mapping. Each key is of String type and speciﬁes an attribute
in the map; the corresponding values specify the color deﬁnition to apply to that attribute in the
overrides
form (0|1, wire color, edge color, face color). The 0|1 deﬁnes the active status for the attribute. For
example:
overrides={
                        'Part-1':(1,'#00FF00', '#00CCFF',
                        '#00FF00')}
A Dictionary object specifying a custom color mapping similar to overrides. For example:
defaultOverrides={
                        'Copper':(1,''#00FF00', '#00CCFF',
                        '#00FF00')}
defaultOverrides
The color mapping can contain keys that have not been created. When the key is created, it gets
the appropriate values from this mapping.
Return value
None.
Exceptions
None.
Members
The AttributeColorMap object has the following members:
A SymbolicConstant specifying the type of AttributeColorMap . Possible values are
MATERIAL_MAP, SECTION_MAP, PART_MAP, ELSET_MAP,
AVERAGING_REGION_MAP, and ELTYPE_MAP.
mapType
A Dictionary object specifying a color mapping. Each key is of String type and speciﬁes an
attribute in the map; the corresponding values specify the color deﬁnition to apply to that attribute
overrides
Abaqus Scripting Reference Guide
412
AttributeColorMap object

in the form (0|1, wire color, edge color, face color). The 0|1 deﬁnes the active status for the
attribute. For example:
overrides={
                        'Part-1':(1,'#00FF00', '#00CCFF',
                        '#00FF00')}
A Dictionary object specifying a custom color mapping similar to overrides. For example:
defaultOverrides={
                        'Copper':(1,''#00FF00', '#00CCFF',
                        '#00FF00')}
defaultOverrides
The color mapping can contain keys that have not been created. When the key is created, it gets
the appropriate values from this mapping.
A Dictionary object specifying the color settings of each attribute as described in the
updateOverrides  method.
attributeColors
413
Abaqus Scripting Reference Guide
AttributeColorMap object

DrawingArea object
The DrawingArea object speciﬁes the location and size of the drawing area used for placement of viewports.
Access
session.drawingArea
Members
The DrawingArea object has the following members:
A Float specifying the width in millimeters.
width
A Float specifying the height in millimeters.
height
A pair of Floats specifying the coordinates of the bottom left hand corner in millimeters.
origin
Abaqus Scripting Reference Guide
414
DrawingArea object

Layer object
Objects can be superimposed by displaying them in different layers of a viewport.
Access
session.viewports[name].layers[name]
Layer(...)
This method creates a Layer object in the Layer repository.
Path
session.viewports[name].Layer
Required arguments
A String specifying the repository key.
name
Optional arguments
A String specifying the name of the layer to copy.
copyViewName
Return value
A Layer object.
Exceptions
None.
moveBefore(...)
This method moves the layer object before another object in the layer repository.
Required arguments
A String specifying the name of the other Layer object.
name
Optional arguments
None.
Return value
None.
Exceptions
None.
415
Layer object

moveAfter(...)
This method moves the layer object after another object in the layer repository.
Required arguments
A String specifying the name of the other Layer object.
name
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The Layer object has members with the same names and descriptions as the arguments to the Layer method.
In addition, the Layer object can have the following members:
A Displayable object specifying the object to be displayed. The Displayable type is an
abstract generalization. The concrete possible types are Part, Assembly,
ConstrainedSketch, Odb, or XYPlot.
displayedObject
A View object specifying the object that controls viewing of the layer.
view
An OdbDisplay object specifying the display options for the Odb object.
odbDisplay
A PartDisplayOptions object specifying the display options for the Part object.
partDisplay
An AssemblyDisplayOptions object specifying the display options for the Assembly
object.
assemblyDisplay
Abaqus Scripting Reference Guide
416
Layer object

Viewport object
A viewport is the container for the graphics generated by the application. TheViewport object stores the various settings
that determine how objects are displayed within that viewport.
Access
session.viewports[name]
Viewport(...)
This method creates a Viewport object with the speciﬁed origin and dimensions.
Path
session.Viewport
Required arguments
A String specifying the repository key.
name
Optional arguments
A pair of Floats specifying the X- and Y-coordinates in millimeters in the canvas coordinate
system of the lower left corner of the viewport. The default origin is (0, 0).
origin
A Float specifying the width in millimeters of the viewport. Possible values are 30 
width
 (maxWidth). The default value is 120.0.
width
Note:
The maximum value of width (maxWidth) is the width of the screen in millimeters.
A Float specifying the height in millimeters of the viewport. This height includes the title bar.
Possible values are 30 
height
  (maxHeight). The default value is 80.0.
height
Note:
The maximum value of height (maxHeight) is the height of the screen in millimeters.
A Boolean specifying whether the viewport border is visible in a printed image. The default
value is ON.
border
A Boolean specifying whether the viewport title should be displayed in a printed image. The
default value is ON.
titleBar
If border = OFF, the title will not be visible, even if titleBar =ON.
A SymbolicConstant specifying which title to use for the viewport title. Possible values are
CUSTOM and SYSTEM. The default value is SYSTEM.
titleStyle
417
Viewport object

If titleStyle = CUSTOM, customTitleString will be used. If titleStyle= SYSTEM, a
system-generated string will be used.
A String specifying the viewport title when titleStyle =CUSTOM. The default value is an empty
string.
customTitleString
Return value
A Viewport object.
Exceptions
RangeError.
SystemError: the current viewport may not be deleted.
If the user attempts to delete the only
viewport:
RangeError: width must be a Float in the range: 30 <= width <=
maxWidth
If width is out of range:
RangeError: height must be a Float in the range: 30 <= width <=
maxHeight
If height is out of range:
bringToFront()
This method moves the Viewport object to the front.
Arguments
None.
Return value
None.
Exceptions
None.
disableMultipleColors()
This method disables applying multiple color mappings that was enabled using enableMultipleColors
Arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
418
Viewport object

disableRefresh()
This method disables Viewport refresh. Some methods that require the Viewport to be up-to-date will override this
setting. It is advisable to use this method sparingly.
Arguments
None.
Return value
None.
Exceptions
None.
disableColorCodeUpdates()
This method disables Viewport updates and internal computations triggered because of color coding. Performance
improvement will be signiﬁcant when color coding is ON and repeating operations are performed using a script each
of which requires color code updates. No beneﬁt will be had when color coding is OFF.
Arguments
None.
Return value
None.
Exceptions
None.
enableMultipleColors()
This method enables multiple color mappings to be applied at the same time. It also ensures that the Viewport is updated
correctly when initialColor is set.
Arguments
None.
Return value
None.
Exceptions
None.
enableRefresh()
This method enables Viewport refresh disabled using disableRefresh.
419
Abaqus Scripting Reference Guide
Viewport object

Arguments
None.
Return value
None.
Exceptions
None.
enableColorCodeUpdates()
This method enables Viewport color code updates disabled using disableColorCodeUpdates.
Arguments
None.
Return value
None.
Exceptions
None.
getActiveElementLabels(...)
This method returns the element labels currently active in the viewport based on the current display group. The element
labels are printed only when the displayedObject member in the Viewport object is set to an Odb. The
getActiveElementLabels method has the following arguments:
Required arguments
None.
Optional arguments
A Boolean ﬂag to specify if any active cutting plane is to be considered in determining
active elements.
useCut
A Boolean ﬂag to specify if the active element labels are to be printed to the replay ﬁle.
printResults
Return value
A Dictionary object of element labels, keyed by OdbInstance name. Returns None if the displayedObject member is
not an Odb object.
Exceptions
None.
Abaqus Scripting Reference Guide
420
Viewport object

getActiveNodeLabels(...)
This method returns the node labels currently active in the viewport based on the current display group. The node
labels are printed only when the displayedObject member in the Viewport object is set to an Odb. The
getActiveNodeLabels method has the following arguments:
Required arguments
None.
Optional arguments
A Boolean ﬂag to specify if any active cutting plane is to be considered in determining
active nodes.
useCut
A Boolean ﬂag to specify if the active node labels are to be printed to the replay ﬁle.
printResults
Return value
A Dictionary object of node labels, keyed by OdbInstance name. Returns None if the displayedObject member is not
an Odb object.
Exceptions
None.
getPrimVarMinMaxLoc()
This method returns a dictionary containing the minimum, maximum and their location for the current primary variable.
A contour plot should be displayed in the current viewport or else the method will return None.
Arguments
None.
Return value
A dictionary with keys 'minPartInstanceName', 'minElementLabel', 'minNodeLabel', 'minPosition',
'maxPartInstanceName', 'maxElementLabel', 'maxNodeLabel', 'maxPosition'
Exceptions
None.
makeCurrent()
This method makes theViewport object the current viewport.
Arguments
None.
421
Abaqus Scripting Reference Guide
Viewport object

Return value
None.
Exceptions
None.
maximize()
This method maximizes the Viewport object to ﬁll the drawing area.
Arguments
None.
Return value
None.
Exceptions
None.
minimize()
This method minimizes the Viewport object to appear as an abbreviated title bar.
Arguments
None.
Return value
None.
Exceptions
None.
offset(...)
This method modiﬁes the current X-Y location of the viewport by the speciﬁed distance.
Required arguments
None.
Optional arguments
A Float specifying the offset in millimeters of the X-component of the viewport origin. The
default value is 0.
deltaX
A Float specifying the offset in millimeters of the Y-component of the viewport origin. The
default value is 0.
deltaY
Abaqus Scripting Reference Guide
422
Viewport object

Return value
None.
Exceptions
None.
restore()
This method restores a maximized or minimized Viewport object to its previous size and location.
Arguments
None.
Return value
None.
Exceptions
None.
sendToBack()
This method moves the Viewport object to the back.
Arguments
None.
Return value
None.
Exceptions
None.
setColor(...)
This method speciﬁes the color assignment using initialColor and translucency. If initialColor has a value of 'As is',
translucency has no effect. The setColor method has the following arguments:
Required arguments
A string specifying the initial color applied to the objects.
initialColor
Optional arguments
A ﬂoat in the range of 0.0 to 1.0 specifying how translucent the objects drawn using
initialColor needs to be.
translucency
423
Abaqus Scripting Reference Guide
Viewport object

Return value
None.
Exceptions
None.
setColor(...)
This method speciﬁes the color assignment using attributes speciﬁed by an AttributeColorMap object. The setColor
method has the following arguments:
Required arguments
An AttributeColorMap object. Possible values are any AttributeColorMap object.
colorMapping
Optional arguments
None.
Return value
None.
Exceptions
None.
setColor(...)
This method speciﬁes the color of a Leaf object.
Required arguments
A Leaf object. Possible values are any Leaf object.
leaf
Optional arguments
At least one of the following must be provided:
A String specifying the color to be used for drawing the edges of the elements contained
in leaf when the render style is wireframe or hidden.
edgeColorWireHide
A String specifying the color to be used for drawing the edges of the elements contained
in leaf when the render style is ﬁlled or shaded.
edgeColorFillShade
A String specifying the color to be used for drawing the faces of the elements contained
in leaf when the render style is ﬁlled or shaded.
ﬁllColor
A String specifying the color to be used for drawing the nodes contained in leaf.
nodeSymbolColor
Abaqus Scripting Reference Guide
424
Viewport object

A SymbolicConstant specifying the node symbol types for the nodes contained in leaf.
Possible values areFILLED_CIRCLE, FILLED_SQUARE, FILLED_DIAMOND,
nodeSymbolType
FILLED_TRI, HOLLOW_CIRCLE, HOLLOW_SQUARE, HOLLOW_DIAMOND,
HOLLOW_TRI, CROSS, and XMARKER. The default value is HOLLOW_CIRCLE.
A SymbolicConstant specifying the node symbol size for the nodes contained in leaf.
Possible values are SMALL, MEDIUM, and LARGE. The default value is SMALL.
nodeSymbolSize
Return value
None.
Exceptions
None.
forceRefresh()
This method causes the Viewport to refresh immediately. It is provided to allow scripts to refresh the Viewport before
the script terminates. Normally, there would only be a single cumulative refresh that takes place immediately after the
script completes.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the Viewport object. The arguments to setValues are the same as the arguments to the
Viewport  method, except for the name argument. In addition, the setValues method has the following arguments:
Required arguments
None.
Optional arguments
A Displayable object specifying the object to be displayed. The Displayable type is an abstract
generalization. The concrete possible types are Part, Assembly, ConstrainedSketch, Odb,
PlyStackPlot, or XYPlot. If displayedObject=None, Abaqus displays an empty viewport.
displayedObject
A SymbolicConstant specifying the display mode of the viewport. Possible values are:
displayMode
•
SINGLE, specifying a single displayedObject.
425
Abaqus Scripting Reference Guide
Viewport object

•
OVERLAY, specifying one or more layers to be displayed simultaneously—each layer
contains one displayedObject.
A sequence of Strings specifying the names of layers that will be displayed in the viewport
when displayMode = OVERLAY.
visibleLayers
A SymbolicConstant specifying which layer or layers will be controlled by the view
manipulation tools when displayMode=OVERLAY. Possible values are ALL and CURRENT.
viewManipLayers
A String specifying which layer is affected by options settings when displayMode
=OVERLAY. The current layer is also the only layer affected by view manipulations
whenviewManipLayers =CURRENT.
currentLayer
A Float specifying a factor to be used in offsetting layers in the screen Z direction. Possible
values are –1 to 1. A negative value reverses the apparent order in which the layers are
plotted.
layerOffset
Return value
None.
Exceptions
RangeError.
addDrawings(...)
This method identiﬁes the names of Drawing objects to be rendered in the Viewport.
Required arguments
None.
Optional arguments
A sequence of String values identifying keys in the session.drawings repository.
names
Return value
None.
Exceptions
ValueError.
removeDrawings(...)
This method identiﬁes the names of Drawing objects to no longer be rendered in the Viewport.
Required arguments
None.
Abaqus Scripting Reference Guide
426
Viewport object

Optional arguments
A sequence of String values identifying keys in the Viewport sequence.
names
Return value
None.
Exceptions
ValueError.
timeDisplay(...)
This method refreshes the Viewport display numFrames times and then checks to see if numSeconds seconds have
elapsed. If not, it will continue refreshing the Viewport until the time has elapsed. At completion, the actual number
of refreshes (frames) rendered and elapsed time will be reported along with the calculated frames-per-second (fps).
Required arguments
None.
Optional arguments
An Int specifying the minimum number of times to refresh the Viewport. The default
value is 0.
numFrames
An Int specifying the minimum number of seconds to spend refreshing the Viewport.
The default value is 10.
numSeconds
A Float specifying the number of degrees to rotate the model view about its Z axis
before each refresh. The default value is 0.0.
degreesPerFrame
Return value
None.
Exceptions
None.
Members
The Viewport object has members with the same names and descriptions as the arguments to the Viewport  method.
In addition, the Viewport object can have the following members:
A SymbolicConstant specifying the display mode of the viewport. Possible values are:
displayMode
•
SINGLE, specifying a single displayedObject.
•
OVERLAY, specifying one or more layers to be displayed simultaneously—each
layer contains one displayedObject.
427
Abaqus Scripting Reference Guide
Viewport object

A SymbolicConstant specifying which layer or layers will be controlled by the view
manipulation tools when displayMode=OVERLAY. Possible values are ALL and
CURRENT.
viewManipLayers
A Float specifying a factor to be used in offsetting layers in the screen Z direction.
Possible values are –1 to 1. A negative value reverses the apparent order in which the
layers are plotted.
layerOffset
A SymbolicConstant specifying the current state of a viewport. Possible values are
NORMAL, MAXIMIZED, and MINIMIZED.
windowState
A Float specifying the width in millimeters of the current viewport, regardless of the
value of windowState.
currentWidth
A Float specifying the height in millimeters of the current viewport, regardless of the
value of windowState, and including the title bar.
currentHeight
A Boolean specifying whether the viewport is linked for synchronization. The default
value is ON.
applyLinkedCommands
A SymbolicConstant specifying the currently active color mappings. Possible values
are:
activeColorModes
•
DEFAULT_COLORS
•
PART_GEOM_MAP_COLORS
•
ASSEMBLY_MAP_COLORS
•
PART_MAP_COLORS
•
INSTANCE_MAP_COLORS
•
INSTANCE_TYPE_MAP_COLORS
•
SECTION_MAP_COLORS
•
MATERIAL_MAP_COLORS
•
LOAD_MAP_COLORS
•
BC_MAP_COLORS
•
INTERACTION_MAP_COLORS
•
CONSTRAINT_MAP_COLORS
•
SET_MAP_COLORS
•
SURFACE_MAP_COLORS
•
INTERNAL_SET_MAP_COLORS
•
INTERNAL_SURFACE_MAP_COLORS
•
DISPLAY_GRP_MAP_COLORS
•
SELECTION_GRP_MAP_COLORS
•
ELTYPE_MAP_COLORS
•
PLOT_MAP_COLORS
•
MESH_MAP_COLORS
Abaqus Scripting Reference Guide
428
Viewport object

The default value is DEFAULT_COLORS.
A SymbolicConstant specifying the last applied color mapping. Possible values are:
colorMode
•
DEFAULT_COLORS
•
PART_GEOM_MAP_COLORS
•
ASSEMBLY_MAP_COLORS
•
PART_MAP_COLORS
•
INSTANCE_MAP_COLORS
•
INSTANCE_TYPE_MAP_COLORS
•
SECTION_MAP_COLORS
•
MATERIAL_MAP_COLORS
•
LOAD_MAP_COLORS
•
BC_MAP_COLORS
•
INTERACTION_MAP_COLORS
•
CONSTRAINT_MAP_COLORS
•
SET_MAP_COLORS
•
SURFACE_MAP_COLORS
•
INTERNAL_SET_MAP_COLORS
•
INTERNAL_SURFACE_MAP_COLORS
•
DISPLAY_GRP_MAP_COLORS
•
SELECTION_GRP_MAP_COLORS
•
ELTYPE_MAP_COLORS
•
PLOT_MAP_COLORS
•
MESH_MAP_COLORS
The default value is DEFAULT_COLORS.
A Float specifying the translucency that will be applied to objects colored using
initialColor and it needs to be set along with initialColor. If initialColor is set to 'As is'
then translucency will have no effect.
translucency
A Boolean specifying whether an animation is connected to the viewport.
animationConnect
A repository of AttributeColorMap objects specifying the objects cannot be constructed
but the following attribute maps are supported:
colorMappings
•
"type"
•
"Element set"
•
"Material"
•
"Section"
•
"Default"
•
"Part"
429
Abaqus Scripting Reference Guide
Viewport object

•
"Part instance"
•
"Element type"
•
"Averaging region"
•
"Assembly"
•
"Property"
•
"Set"
•
"Surface"
•
"Skin"
•
"Proﬁle"
•
"Part shape"
•
"Part status"
•
"Part geometry"
•
"Meshability"
•
"Instance type"
•
"Load"
•
"Boundary condition"
•
"Interaction"
•
"Constraint"
•
"Interaction type"
•
"Constraint type"
•
"Display group"
•
"Selection group"
•
"Interaction property"
•
"Connector"
•
"Connector type"
•
"Connector property"
•
"Internal set"
•
"Internal surface"
•
"mapColors"
•
"autoColors"
•
"overrides"
•
"defaultAutoColors"
•
"defaultOverrides"
•
"objectToCopy"
•
"colorMapping"
•
"colorMappings"
•
"colorMode"
•
"attributeColors"
•
"updateOverrides"
Abaqus Scripting Reference Guide
430
Viewport object

•
"colorCodeOverride"
•
"initialColor"
•
"Layup"
•
"Ply"
A String specifying the color that will be applied to all objects in the viewport at the start
of color coding. The possible values are 'As is', 'Default' or a string with a hexadecimal
representation of a color.
initialColor
A String specifying which layer is affected by options settings when displayMode
=OVERLAY. The current layer is also the only layer affected by view manipulations
whenviewManipLayers =CURRENT.
currentLayer
A Displayable object specifying the object to be displayed. The Displayable type is an
abstract generalization. The concrete possible types are Part, Assembly,
displayedObject
ConstrainedSketch, Odb, PlyStackPlot, or XYPlot. If displayedObject=None, Abaqus
displays an empty viewport.
A repository of Layer objects specifying the key to the repository is a String with the
name of the layer.
layers
A View object specifying the object that controls viewing of the viewport content.
view
An OdbDisplay object specifying the display options for the Odb object.
odbDisplay
A PartDisplayOptions object specifying the display options for the Part object.
partDisplay
An AssemblyDisplayOptions object specifying the display options for the Assembly
object.
assemblyDisplay
A ViewportAnnotationOptions object.
viewportAnnotationOptions
A DetailPlotOptions object.
detailPlotOptions
An AnnotationsToPlotArray object.
annotationsToPlot
A tuple of Strings specifying the names of layers that will be displayed in the viewport
when displayMode = OVERLAY.
visibleLayers
A pair of Floats specifying the X- and Y-coordinates in millimeters in the canvas
coordinate system of the lower left corner of the current viewport, regardless of the value
of windowState.
currentOrigin
A pair of Floats specifying the X- and Y-coordinates in millimeters of the lower left
corner of the current viewport from a coordinate system having its origin in the lower
iconOrigin
left corner of the drawing area. This origin refers to the viewport location when
windowState =MINIMIZED.
431
Abaqus Scripting Reference Guide
Viewport object

A LightOptions object.
lightOptions
An ImageOptions object.
imageOptions
A MovieOptions object.
movieOptions
An AnimationController object.
animationController
A tuple of Strings specifying keys to the session.drawings repository. The default value
is an empty sequence.
drawings
Abaqus Scripting Reference Guide
432
Viewport object

ImageOptions object
The ImageOptions object stores settings that control how an image is rendered in a particular viewport. ImageOptions
objects are accessed from the image options associated with a particular viewport.
The ImageOptions object has no constructor; Abaqus creates the imageOptions member for a viewport when the
viewport is created using the values in the imageOptions member of the current viewport.
Access
session.viewports[name].imageOptions
setValues(...)
This method modiﬁes the ImageOptions object.
Required arguments
None.
Optional arguments
A String specifying the name of the image. A list of valid image names is in the images repository
in the session object.
imageName
A Boolean specifying whether an image should be displayed in the viewport background. The
default value is OFF.
showImage
A SymbolicConstant specifying which positioning method is used to determine how the image
will be scaled and positioned in the viewport. Possible values are:
positionMethod
•
FIT_TO_VIEWPORT, specifying a display mode where the image is scaled to ﬁt in the viewport
using the speciﬁed ﬁtMethod.
•
AUTO_ALIGN, specifying a display mode where the image is scaled as speciﬁed by xScale
and yScale and then positioned in the viewport using the speciﬁed alignment.
•
MANUAL, specifying a display mode where the image is scaled as speciﬁed by xScale and
yScale and then positioned in the viewport using the speciﬁed origin.
The default value is FIT_TO_VIEWPORT.
A SymbolicConstant specifying which type of ﬁt is performed to scale and position the image in
the viewport when positionMethod =FIT_TO_VIEWPORT. Possible values are:
ﬁtMethod
•
BEST_FIT, specifying a mode where the image is scaled to completely ﬁt within the viewport.
•
FIT_WIDTH, specifying a mode where the image width is scaled to match the viewport width.
•
FIT_HEIGHT, specifying a mode where the image height is scaled to match the viewport
height.
The default value is BEST_FIT.
433
ImageOptions object

A SymbolicConstant specifying the relative position of the image in the viewport when
positionMethod =AUTO_ALIGN. Possible values are:
alignment
•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
•
TOP_CENTER
•
TOP_RIGHT
The default value is CENTER.
A Float specifying the scale applied to the image width. The xScale argument is ignored when
positionMethod =FIT_TO_VIEWPORT. The default value is 1.0.
xScale
When xScale is negative, the image is mirrored about its y-axis but its position is not affected.
A Float specifying the scale applied to the image height. The yScale argument is ignored when
positionMethod =FIT_TO_VIEWPORT. The default value is 1.0.
yScale
When yScale is negative, the image is mirrored about its x-axis but its position is not affected.
A pair of Floats specifying the X- and Y-offsets in millimeters from the lower-left corner of the
viewport. The origin argument is ignored unless positionMethod =MANUAL. The default value
is (0, 0).
origin
A Float specifying the translucency factor to use when displaying the image. Possible values are
0.0 
translucency
 1.0 with 0.0 being invisible and 1.0 being opaque. The default value is 1.0.
translucency
None or an ImageOptions object specifying the object from which values are to be copied. If other
arguments are also supplied to setValues, they will override the values in the options member.
The default value is None.
options
Return value
None.
Exceptions
RangeError.
Members
The ImageOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
434
ImageOptions object

MovieOptions object
The MovieOptions object stores settings that control how the movie background for an animation is rendered in a
particular viewport. MovieOptions objects are accessed from the movie options associated with a particular viewport.
The MovieOptions object has no constructor; Abaqus creates the movieOptions member for a viewport when the
viewport is created using the values in the movieOptions member of the current viewport.
Access
session.viewports[name].movieOptions
setValues(...)
This method modiﬁes the MovieOptions object.
Required arguments
None.
Optional arguments
A String specifying the name of the movie. A list of valid movie names is in the movies repository
in the session object.
movieName
A Boolean specifying whether a movie should be displayed in the viewport during an animation.
The default value is OFF.
showMovie
A SymbolicConstant specifying which positioning method is used to determine how the movie
frames will be scaled and positioned in the viewport. Possible values are:
positionMethod
•
FIT_TO_VIEWPORT, specifying a display mode where the movie frame is scaled to ﬁt in the
viewport using the speciﬁed ﬁtMethod.
•
AUTO_ALIGN, specifying a display mode where the movie frame is scaled as speciﬁed by
xScale and yScale and then positioned in the viewport using the speciﬁed alignment.
•
MANUAL, specifying a display mode where the movie frame is scaled as speciﬁed by xScale
and yScale and then positioned in the viewport using the speciﬁed origin.
The default value is FIT_TO_VIEWPORT.
A SymbolicConstant specifying which type of ﬁt is performed to scale and position the movie
frame in the viewport when positionMethod =FIT_TO_VIEWPORT. Possible values are:
ﬁtMethod
•
BEST_FIT, specifying a mode where the movie frame is scaled to completely ﬁt within the
viewport.
•
FIT_WIDTH, specifying a mode where the movie frame width is scaled to match the viewport
width.
•
FIT_HEIGHT, specifying a mode where the movie frame height is scaled to match the viewport
height.
The default value is BEST_FIT.
435
MovieOptions object

A SymbolicConstant specifying the relative position of the movie frame in the viewport when
positionMethod =AUTO_ALIGN. Possible values are:
alignment
•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
•
TOP_CENTER
•
TOP_RIGHT
The default value is CENTER.
A Float specifying the scale applied to the movie frame width. The xScale argument is ignored
when positionMethod =FIT_TO_VIEWPORT. The default value is 1.0.
xScale
When xScale is negative, the movie frame is mirrored about its y-axis but its position is not affected.
A Float specifying the scale applied to the movie frame height. The yScale argument is ignored
when positionMethod =FIT_TO_VIEWPORT. The default value is 1.0.
yScale
When yScale is negative, the movie frame is mirrored about its x-axis but its position is not affected.
A pair of Floats specifying theX- and Y-offsets in millimeters from the lower-left corner of the
viewport. The origin argument is ignored unless positionMethod =MANUAL. The default value
is (0, 0).
origin
A Float specifying the translucency factor to use when displaying the movie frame. Possible values
are 0.0 
translucency
 1.0 with 0.0 being invisible and 1.0 being opaque. The default value is
1.0.
translucency
None or a MovieOptions object specifying the object from which values are to be copied. If other
arguments are also supplied to setValues, they will override the values in the options member.
The default value is None.
options
Return value
None.
Exceptions
RangeError.
Members
The MovieOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
436
MovieOptions object

Highlight commands
The Highlight commands are used to highlight objects in the current viewport and to remove the highlighting.
highlight
This method highlights an object in the current viewport.
Path
highlight
Required arguments
An object specifying the object in the current viewport to be highlighted. You can specify only a
single object. Abaqus/CAE highlights only the edges of a face when highlighting a surface and a
face together. The following objects are supported:
object
For the MDB
•
Vertex
•
Edge
•
Face
•
Surface
•
Cell
•
Node
•
Element
•
Element face
•
Element edge
•
Feature
•
Datum
•
Instance
•
Set
•
Load
•
Boundary condition
•
Predeﬁned ﬁeld
•
Display group
For the ODB
•
Node
•
Element
•
Display group
437
Highlight commands

unhighlight
This method removes highlighting from an object in the current viewport.
Path
unhighlight
Required arguments
An object specifying the object in the current viewport from which the highlighting will be
removed. You can specify only a single object. See highlight for a list of supported objects.
object
Abaqus Scripting Reference Guide
438
Highlight commands

Connector commands
A connector describes the relative motions between two points. A connector also describes the behavior associated
with the relative motion.
In this section:
•
ConnectorBehaviorOption object
•
CDCTerm object
•
ConnectorDamage object
•
ConnectorDamping object
•
ConnectorElasticity object
•
ConnectorFailure object
•
ConnectorFriction object
•
ConnectorLock object
•
ConnectorOptions object
•
ConnectorPlasticity object
•
ConnectorPotential object
•
ConnectorStop object
•
DerivedComponent object
•
TangentialBehavior object
439

ConnectorBehaviorOption object
The ConnectorBehaviorOption object is the abstract base type for other ConnectorBehaviorOption objects. The
ConnectorBehaviorOption object has no explicit constructor. The members of the ConnectorBehaviorOption object
are common to all objects derived from the ConnectorBehaviorOption.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
Members
The ConnectorBehaviorOption object has no members.
Abaqus Scripting Reference Guide
440
ConnectorBehaviorOption object

CDCTerm object
The CDCTerm object is used to create contributing terms for a DerivedComponent object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.cdcTerms[i]
mdb.models[name].sections[name].behaviorOptions[i].derivedComponent\
.cdcTerms[i]
mdb.models[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent.cdcTerms[i]
mdb.models[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.cdcTerms[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.cdcTerms[i]
session.odbs[name].sections[name].behaviorOptions[i].derivedComponent\
.cdcTerms[i]
session.odbs[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent.cdcTerms[i]
session.odbs[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.cdcTerms[i]
CDCTerm(...)
This method creates a CDCTerm object.
Path
mdb.models[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.CDCTerm
mdb.models[name].sections[name].behaviorOptions[i].derivedComponent\
.CDCTerm
mdb.models[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent.CDCTerm
mdb.models[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.CDCTerm
session.odbs[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.CDCTerm
session.odbs[name].sections[name].behaviorOptions[i].derivedComponent\
.CDCTerm
session.odbs[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent.CDCTerm
session.odbs[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.CDCTerm
Required arguments
A sequence of Ints specifying the components of relative motion for which the contributing
term is deﬁned. Possible values are 1 intrinsicComponents  6. Only available components
intrinsicComponents
can be speciﬁed if the DerivedComponent object is being referenced by a Potential object. This
441
CDCTerm object

is not the case if the DerivedComponent object is referenced by a ConnectorFriction object
directly. The default value is an empty sequence.
A sequence of sequences of Floats specifying components numbers and temperature and ﬁeld
values. Each sequence of the table data speciﬁes:
table
•
The ﬁrst intrinsic component number.
•
If applicable, the second intrinsic component number.
•
Etc.
•
If applicable, the ﬁrst independent component number.
•
If applicable, the second independent component number.
•
Etc.
•
If applicable, the temperature value.
•
If applicable, the value of the ﬁrst ﬁeld variable.
•
If applicable, the value of the second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
Optional arguments
A SymbolicConstant specifying the method for combining contributing terms: square root
of a sum of the squares, direct sum, or Macauley sum. Possible values are RSS, SUM, and
MACAULEY. The default value is RSS.
termOperator
A SymbolicConstant specifying the overall sign for the contributing term. Possible values
are POSITIVE and NEGATIVE. The default value is POSITIVE.
termSign
A Boolean specifying whether the table data depend on either components of relative
position or components of constitutive relative motion. The default value is OFF.
localDependency
A SymbolicConstant specifying whether localDependency refers to components of relative
position or components of constitutive relative motion. Possible values are POSITION
and MOTION. The default value is POSITION.
indepCompType
The indepCompType argument applies only if localDependency=ON.
A sequence of Ints specifying the independent components included in the derived
component deﬁnition. Possible values are 1 indepComponents  6. Only available
indepComponents
components can be speciﬁed. The indepComponents argument applies only if
localDependency=ON. The default value is an empty sequence.
A Boolean specifying whether the table data depend on temperature. The default value is
OFF.
tempDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
ﬁeldDependencies
Abaqus Scripting Reference Guide
442
CDCTerm object

Return value
A CDCTerm object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the CDCTerm object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CDCTerm  method.
Return value
None.
Exceptions
ValueError.
Members
The CDCTerm object has members with the same names and descriptions as the arguments to the CDCTerm  method.
In addition, the CDCTerm object can have the following member:
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular options
for this ConnectorBehaviorOption.
options
443
Abaqus Scripting Reference Guide
CDCTerm object

ConnectorDamage object
The ConnectorDamage object deﬁnes damage behavior for one or more components of a connector's relative motion.
The ConnectorDamage object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorDamage(...)
This method creates a connector damage behavior option for a ConnectorSection object.
Path
          import connectorBehavior
          connectorBehavior.ConnectorDamage
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorDamage
Required arguments
None.
Optional arguments
A SymbolicConstant specifying whether or not the behavior is coupled. Possible values
are UNCOUPLED and COUPLED. The default value is UNCOUPLED.
coupling
A SymbolicConstant specifying the damage initiation criterion to be used. Possible
values are FORCE, MOTION, and PLASTIC_MOTION. The default value is FORCE.
criterion
A Boolean specifying whether the initiation data depend on temperature. The default
value is OFF.
initiationTemperature
A SymbolicConstant specifying the contribution operator for the initiation potential
contributions. Possible values are SUM and MAXIMUM. The default value is SUM.
initiationPotentialOperator
This argument is only if coupling=COUPLED and if criterion=FORCE or MOTION.
A Float specifying the number equal to the inverse of the overall exponent in the initiation
potential deﬁnition. The default value is 2.0.
initiationPotentialExponent
This argument is applicable only if coupling=COUPLED, when
initiationPotentialOperator=SUM, and when criterion=FORCE or MOTION.
An Int specifying the number of ﬁeld variable dependencies for the initiation data. The
default value is 0.
initiationDependencies
Abaqus Scripting Reference Guide
444
ConnectorDamage object

A Boolean specifying whether damage evolution data will be used. The default value
is ON.
evolution
A SymbolicConstant specifying the type of damage evolution to be speciﬁed. Possible
values are MOTION_TYPE and ENERGY_TYPE. The default value is MOTION_TYPE.
evolutionType
This argument is applicable only if evolution=ON.
A SymbolicConstant specifying the damage evolution law to be speciﬁed. Possible
values are LINEAR, EXPONENTIAL, and TABULAR. The default value is LINEAR.
softening
This argument is applicable only if evolution=ON and when
evolutionType=MOTION_TYPE.
A Boolean specifying whether or not affectedComponents will be speciﬁed. If
useAffected=OFF, then only the components of relative motion speciﬁed by components
will undergo damage. The default value is OFF.
useAffected
This argument is applicable only if evolution=ON.
A SymbolicConstant specifying the contribution of each damage mechanism when more
than one damage mechanism is deﬁned. Possible values are MAXIMUM and
MULTIPLICATIVE. The default value is MAXIMUM.
degradation
This argument is applicable if evolution=ON.
A Boolean specifying whether the evolution data depend on temperature. The default
value is OFF.
evolutionTemperature
This argument is applicable only if evolution=ON.
An Int specifying the number of ﬁeld variable dependencies for the evolution data. The
default value is 0.
evolutionDependencies
This argument is applicable only if evolution=ON.
A SymbolicConstant specifying the contribution operator for the evolution potential
contributions. Possible values are SUM and MAXIMUM. The default value is SUM.
evolutionPotentialOperator
This argument is applicable only if coupling=COUPLED, when evolution=ON, when
evolutionType=MOTION_TYPE, and when criterion=FORCE or MOTION.
A Float specifying the number equal to the inverse of the overall exponent in the evolution
potential deﬁnition. The default value is 2.0.
evolutionPotentialExponent
This argument is applicable only if coupling=COUPLED, when evolution=ON, when
evolutionPotentialOperator=SUM, when evolutionType=MOTION, and when
criterion=FORCE or MOTION.
A ConnectorPotentialArray object specifying one ConnectorPotential object for each
initiation potential contribution. This member can be speciﬁed only if
coupling=COUPLED and if criterion=FORCE or MOTION.
initiationPotentials
445
Abaqus Scripting Reference Guide
ConnectorDamage object

A ConnectorPotentialArray object specifying one ConnectorPotential object for each
evolution potential contribution). This member can be speciﬁed only if
evolutionPotentials
coupling=COUPLED, if evolution=ON, if evolutionType=MOTION, and if
criterion=FORCE or MOTION.
A sequence of sequences of Floats specifying the initiation properties. The default value
is an empty sequence.
initiationTable
Items in the initiationTable data are described below.
A sequence of sequences of Floats specifying the evolution properties. The default value
is an empty sequence.
evolutionTable
Items in the evolutionTable data are described below. This argument is only applicable
if evolution=ON.
A sequence of Ints specifying the components of relative motion that will be damaged.
Possible values are 1 components  6. Only available components can be speciﬁed.
affectedComponents
This argument is applicable only if evolution=ON and useAffected=ON. The default
value is an empty sequence.
A sequence of Ints specifying the components of relative motion for which the behavior
is deﬁned. Possible values are 1 components  6. Only available components can be
components
speciﬁed. This argument can be speciﬁed only if coupling=UNCOUPLED. The default
value is an empty sequence.
Table data
Table data for initiationTable:
If criterion=FORCE, then each sequence of the table data speciﬁes the following:
•
Lower (compression) limiting force or moment. Use -1.0E+36 to indicate an unspeciﬁed lower limit.
•
Upper (tension) limiting force or moment. Use 1.0E+36 to indicate an unspeciﬁed upper limit. At least one limit,
lower or upper, must be speciﬁed.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If criterion=MOTION, then each sequence of the table data speciﬁes the following:
•
Lower (compression) limiting connector constitutive relative displacement or rotation. Use -1.0E+36 to indicate
an unspeciﬁed lower limit.
•
Upper (tension) limiting connector constitutive relative displacement or rotation. Use 1.0E+36 to indicate an
unspeciﬁed upper limit. At least one limit, lower or upper, must be speciﬁed.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
446
ConnectorDamage object

If criterion=PLASTIC_MOTION, then each sequence of the table data speciﬁes the following:
•
Relative equivalent plastic displacement/rotation at which damage will be initiated.
•
Mode mix ratio (only if coupling=COUPLED).
•
Relative equivalent plastic displacement/rotation rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Table data for evolutionTable:
If evolutionType=MOTION and softening=LINEAR, then each sequence of the table data speciﬁes the following:
•
Post-initiation equivalent relative plastic motion at ultimate failure if criterion=PLASTIC_MOTION. Otherwise,
post-initiation constitutive relative motion (displacement/rotation) at ultimate failure.
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=MOTION and softening=EXPONENTIAL, then each sequence of the table data speciﬁes the following:
•
Post-initiation equivalent relative plastic motion at ultimate failure if criterion=PLASTIC_MOTION. Otherwise,
post-initiation constitutive relative motion (displacement/rotation) at ultimate failure.
•
Exponential law parameter.
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=MOTION and softening=TABULAR, then each sequence of the table data speciﬁes the following:
•
Damage variable (cannot be less than 0 or greater than 1).
•
Post-initiation equivalent relative plastic motion if criterion=PLASTIC_MOTION. Otherwise, post-initiation
constitutive relative motion (displacement/rotation).
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=ENERGY, then each sequence of the table data speciﬁes the following:
•
Total energy dissipated by damage at ultimate failure.
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
447
Abaqus Scripting Reference Guide
ConnectorDamage object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConnectorDamage object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorDamage object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorDamage method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorDamage object has members with the same names and descriptions as the arguments to the
ConnectorDamage method.
In addition, the ConnectorDamage object can have the following members:
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the damage initiation table.
initiationOptions
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the damage evolution table.
evolutionOptions
Corresponding analysis keywords
•
*CONNECTOR DAMAGE INITIATION, *CONNECTOR DAMAGE EVOLUTION, *CONNECTOR
POTENTIAL
Abaqus Scripting Reference Guide
448
ConnectorDamage object

ConnectorDamping object
The ConnectorDamping object deﬁnes damping behavior for one or more components of a connector's relative motion.
The ConnectorDamping object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorDamping(...)
This method creates a connector damping behavior option for a ConnectorSection object.
Path
          import connectorBehavior
          connectorBehavior.ConnectorDamping
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorDamping
Required arguments
None.
Optional arguments
A SymbolicConstant specifying if the damping type is viscous or structural. Possible values
are VISCOUS and STRUCTURAL. The default value is VISCOUS.
type
A SymbolicConstant specifying if the damping behavior is linear or nonlinear. If
type=VISCOUS, possible values are LINEAR and NONLINEAR. If type=STRUCTURAL,
the possible value is LINEAR.
behavior
A SymbolicConstant specifying whether the damping behavior is coupled between the
connector's components of relative motion. If behavior=LINEAR, possible values are
coupling
UNCOUPLED and COUPLED. If behavior=NONLINEAR, possible values are
UNCOUPLED, COUPLED_POSITION, and COUPLED_MOTION. Possible values are
UNCOUPLED, COUPLED, COUPLED_POSITION, and COUPLED_MOTION. The
default value is UNCOUPLED.
An Int specifying the number of ﬁeld variable dependencies. The default value is 0. This
argument is applicable only if type=VISCOUS.
dependencies
A Boolean specifying whether the behavior data depend on temperature. The default value
is OFF. This argument is applicable only if type=VISCOUS.
temperatureDependency
449
ConnectorDamping object

A Boolean specifying whether the behavior data depend on frequency. This value is
applicable only if behavior= LINEAR and coupling=UNCOUPLED. The default value is
OFF.
frequencyDependency
A sequence of sequences of Floats specifying damping properties. Items in the table data
are described below. The default value is an empty sequence.
table
A sequence of Ints specifying the list of independent components that are included in the
deﬁnition of the connector damping data. This argument is applicable only if
independentComponents
behavior=NONLINEAR and coupling=COUPLED_POSITION or COUPLED_MOTION.
When this argument is applicable, at least one value must be speciﬁed. Only available
components can be speciﬁed. The default value is an empty sequence.
A sequence of Ints specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
Table data
If type=VISCOUS, behavior=LINEAR, and coupling=UNCOUPLED, each sequence of the table data speciﬁes the
following:
•
Damping coefﬁcient (force or moment per relative velocity).
•
Frequency (cycles/time), if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=VISCOUS, behavior=NONLINEAR, and coupling=UNCOUPLED, each sequence of the table data speciﬁes
the following:
•
Force or moment.
•
Relative displacement or rotation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=VISCOUS, behavior=LINEAR, and coupling=COUPLED, the table data specify the symmetric portion of the
damping matrix for the speciﬁed components followed by any temperature data and then any ﬁeld data. For example,
if components 2, 3, and 5 are speciﬁed, the table portion of the command is as follows:
table=( (
, 
, 
, 
, 
, 
,), )
The following items should be speciﬁed as comma-separated data:
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
Abaqus Scripting Reference Guide
450
ConnectorDamping object

•
Value of the second ﬁeld variable.
•
Etc.
If type=VISCOUS, behavior=NONLINEAR, and coupling=COUPLED_POSITION or COUPLED_MOTION, each
sequence of the table data speciﬁes the following:
•
Force or moment for the directions in the components list.
•
Relative velocity for the directions in the components list.
•
Relative position or angle for the ﬁrst independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the ﬁrst independentComponents direction if coupling=COUPLED_MOTION.
•
Relative position or angle for the second independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the second independentComponents direction if
coupling=COUPLED_MOTION.
•
Etc. up to the Nth independentComponents direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=STRUCTURAL, behavior=LINEAR, and coupling=UNCOUPLED, each sequence of the table data speciﬁes
the following:
•
Damping coefﬁcient (force or moment per relative velocity).
•
Frequency (cycles/time), if the data depend on frequency.
•
Etc.
If type=STRUCTURAL, behavior=LINEAR, and coupling=COUPLED, the table data specify the symmetric portion
of the damping matrix for the speciﬁed components. For example, if components 2, 3, and 5 are speciﬁed, the table
portion of the command is as follows:
table=( (
, 
, 
, 
, 
, 
,), )
Return value
A ConnectorDamping object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorDamping object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorDamping method.
451
Abaqus Scripting Reference Guide
ConnectorDamping object

Return value
None.
Exceptions
ValueError.
Members
The ConnectorDamping object has members with the same names and descriptions as the arguments to the
ConnectorDamping method.
In addition, the ConnectorDamping object can have the following member:
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular options
for this ConnectorBehaviorOption.
options
Corresponding analysis keywords
•
*CONNECTOR DAMPING
Abaqus Scripting Reference Guide
452
ConnectorDamping object

ConnectorElasticity object
The ConnectorElasticity object deﬁnes elastic behavior for one or more components of a connector's relative motion.
The ConnectorElasticity object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorElasticity(...)
This method creates a connector elasticity behavior option for a ConnectorSection object.
Path
          import connectorBehavior
          connectorBehavior.ConnectorElasticity
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorElasticity
Required arguments
None.
Optional arguments
A SymbolicConstant specifying whether the elastic behavior is linear, nonlinear, or rigid.
Possible values are LINEAR, NONLINEAR, and RIGID. The default value is LINEAR.
behavior
A SymbolicConstant specifying whether the elastic behavior is coupled between the
connector's components of relative motion. If behavior=LINEAR, then possible values are
coupling
UNCOUPLED and COUPLED. If behavior=NONLINEAR, then possible values are
UNCOUPLED, COUPLED_POSITION, and COUPLED_MOTION. Possible values are
UNCOUPLED, COUPLED, COUPLED_POSITION, and COUPLED_MOTION. The
default value is UNCOUPLED.
This argument is not applicable if behavior=RIGID.
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
This argument is not applicable if behavior=RIGID.
A Boolean specifying whether the behavior data depend on temperature. The default value
is OFF.
temperatureDependency
This argument is not applicable if behavior=RIGID.
453
ConnectorElasticity object

A Boolean specifying whether the behavior data depend on frequency. This value is
applicable only if behavior=LINEAR and coupling=UNCOUPLED. The default value is
OFF.
frequencyDependency
This argument is not applicable if behavior=RIGID.
A sequence of sequences of Floats specifying elasticity properties. Items in the table data
are described below. This argument is not applicable if behavior=RIGID. The default value
is an empty sequence.
table
A sequence of Ints specifying the list of independent components that are included in the
deﬁnition of the connector elasticity data. This argument is applicable only if
independentComponents
behavior=NONLINEAR and coupling=COUPLED_POSITION or COUPLED_MOTION.
If this argument is applicable, at least one value must be speciﬁed. Only available components
can be speciﬁed. The default value is an empty sequence.
A sequence of Ints specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
Table data
If behavior=LINEAR and coupling=UNCOUPLED, then each sequence of the table data speciﬁes the following:
•
Elastic stiffness (per each speciﬁed force/moment component).
•
Frequency (cycles/time), if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=NONLINEAR and coupling=UNCOUPLED, then each sequence of the table data speciﬁes the following:
•
Force or moment.
•
Relative displacement or rotation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=LINEAR and coupling=COUPLED, the table data specify the symmetric portion of the elastic stiffness
matrix for the speciﬁed components followed by any temperature data and then any ﬁeld data. For example, if
components 2, 3, and 5 are speciﬁed, the table portion of the command is as follows:
table=( (
, 
, 
, 
, 
, 
,),
)
The following items should then be speciﬁed as comma-separated data:
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
454
ConnectorElasticity object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=NONLINEAR and coupling=COUPLED_POSITION or COUPLED_MOTION, each sequence of the
table data speciﬁes the following:
•
Force or moment for the directions in the components list.
•
Relative position or angle for the ﬁrst independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the ﬁrst independentComponents direction if coupling=COUPLED_MOTION.
•
Relative position or angle for the second independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the second independentComponents direction if
coupling=COUPLED_MOTION.
•
Etc. up to the Nth independentComponents direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConnectorElasticity object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorElasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorElasticity  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorElasticity object has members with the same names and descriptions as the arguments to the
ConnectorElasticity  method.
455
Abaqus Scripting Reference Guide
ConnectorElasticity object

In addition, the ConnectorElasticity object can have the following member:
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular options
for this ConnectorBehaviorOption.
options
Corresponding analysis keywords
•
*CONNECTOR ELASTICITY
Abaqus Scripting Reference Guide
456
ConnectorElasticity object

ConnectorFailure object
The ConnectorFailure object deﬁnes failure criteria for one or more components of a connector's relative motion.
The ConnectorFailure object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorFailure(...)
This method creates a connector failure behavior option for a ConnectorSection object.
Path
          import connectorBehavior
          connectorBehavior.ConnectorFailure
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorFailure
Required arguments
None.
Optional arguments
The SymbolicConstant ALL or an Int specifying the motion components that fail. If an Int
is speciﬁed, only that motion component fails when the failure criteria are satisﬁed. If
releaseComponent=ALL, all motion components fail. The default value is ALL.
releaseComponent
None or a Float specifying the lower bound for the connector's relative position for all
speciﬁed components, or no lower bound. The default value is None.
minMotion
None or a Float specifying the upper bound for the connector's relative position for all
speciﬁed components, or no upper bound. The default value is None.
maxMotion
None or a Float specifying the lower bound of the force or moment in the directions of the
speciﬁed components at which locking occurs, or no lower bound. The default value is None.
minForce
None or a Float specifying the upper bound of the force or moment in the directions of the
speciﬁed components at which locking occurs, or no upper bound. The default value is None.
maxForce
A sequence of Ints specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
457
ConnectorFailure object

Return value
A ConnectorFailure object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorFailure object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorFailure  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorFailure object has members with the same names and descriptions as the arguments to the
ConnectorFailure  method.
Corresponding analysis keywords
•
*CONNECTOR FAILURE
Abaqus Scripting Reference Guide
458
ConnectorFailure object

ConnectorFriction object
The ConnectorFriction object deﬁnes Coulomb-like or hysteretic friction behavior for one or more components of a
connector's relative motion.
The ConnectorFriction object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorFriction(...)
This method creates a connector friction behavior option for a ConnectorSection object. Depending upon the arguments
provided, the friction behavior can be Coulomb-like or hysteretic in nature.
Path
          import connectorBehavior
          connectorBehavior.ConnectorFriction
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorFriction
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the desired frictional response model. Possible values
are PREDEFINED and USER_CUSTOMIZED. The default value is PREDEFINED.
frictionModel
A SymbolicConstant specifying the method of indicating the slip direction: either
speciﬁed or computed based upon the force potential data. Possible values are SPECIFY
and COMPUTE. The default value is SPECIFY.
slipStyle
This argument is applicable only if frictionModel=USER_CUSTOMIZED.
None or an Int specifying the direction for which the frictional behavior is speciﬁed.
Possible values are 1 tangentDirection  6, indicating an available component of
tangentDirection
relative motion. This argument applies only if frictionModel=USER_CUSTOMIZED
and if slipStyle=SPECIFY. The default value is None.
None or a Float specifying the stick stiffness associated with the frictional behavior in
the direction speciﬁed by tangentDirection. If this argument is omitted, Abaqus computes
an appropriate number for the stick stiffness. The default value is None.
stickStiffness
459
ConnectorFriction object

A SymbolicConstant specifying the type of the independentComponents. Possible values
are POSITION, MOTION, and NO_INDEPENDENT_COMPONENTS. The default
value is NO_INDEPENDENT_COMPONENTS.
componentType
A Boolean specifying whether the table data depend on accumulated slip. The default
value is OFF.
slipDependency
This argument applies only if frictionModel=USER_CUSTOMIZED.
A Boolean specifying whether the table data depend on temperature. The default value
is OFF.
temperatureDependency
This argument applies only if frictionModel=USER_CUSTOMIZED.
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
This argument applies only if frictionModel=USER_CUSTOMIZED.
A Boolean specifying whether the contact force component will be deﬁned. The default
value is OFF.
useContactForceComponent
This argument applies only if frictionModel=USER_CUSTOMIZED.
A SymbolicConstant specifying the method of indicating the contact force component
direction: either speciﬁed or computed based on upon a DerivedComponent. Possible
contactForceStyle
values are COMPONENT_NUMBER and DERIVED_COMPONENT. The default
value is COMPONENT_NUMBER.
This argument is applicable only if frictionModel=USER_CUSTOMIZED and if
useContactForceComponent=ON.
An Int specifying the contact force component direction. This argument applies only
if frictionModel=USER_CUSTOMIZED, if useContactForceComponent=ON, and if
contactForceStyle=COMPONENT_NUMBER. The default value is 0.
contactForceComponent
A SymbolicConstant specifying the contribution operator for the force potential
contributions. Possible values are SUM and MAXIMUM. The default value is SUM.
forcePotentialOperator
This argument is applicable only if frictionModel=USER_CUSTOMIZED and if
slipStyle=COMPUTE.
A Float specifying the number equal to the inverse of the overall exponent in the force
potential deﬁnition. The default value is 2.0.
forcePotentialExponent
This argument is applicable only if frictionModel=USER_CUSTOMIZED, if
slipStyle=COMPUTE, and if forcePotentialOperator=SUM.
A ConnectorPotentialArray object specifying one ConnectorPotential object for each
force potential contribution. This member can be speciﬁed only if
frictionModel=USER_CUSTOMIZED, and if slipStyle=COMPUTE.
connectorPotentials
A sequence of sequences of Floats specifying friction properties. The default value is
an empty sequence.
table
Abaqus Scripting Reference Guide
460
ConnectorFriction object

If frictionModel=PREDEFINED, each sequence of the table data speciﬁes:
•
If applicable, the ﬁrst geometric scaling constant relevant to frictional interactions.
•
Etc., up to as many geometric scaling constants as are associated with this connection
type.
•
Internal contact force/moment generating friction in the ﬁrst predeﬁned slip direction.
•
If applicable, internal contact force/moment generating friction in the second
predeﬁned slip direction.
•
Connector constitutive relative motion in the direction speciﬁed by
independentComponent.
•
Accumulated slip in the ﬁrst predeﬁned slip direction, if the data depend on
accumulated slip.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If frictionModel=USER_CUSTOMIZED, each sequence of the table data speciﬁes:
•
Effective radius of the cylindrical or spherical surface over which frictional slip
occurs in the connector associated with frictional effects in the direction speciﬁed
by tangentDirection. This radius is relevant only if the connection type includes an
available rotational component of relative motion and
tangentDirection=SLIP_DIRECTION.
•
Internal contact force/moment generating friction in the direction speciﬁed by
tangentDirection.
•
Connector constitutive relative motion in the direction speciﬁed by
independentComponent.
•
Accumulated slip in the direction speciﬁed by tangentDirection, if the data depend
on accumulated slip.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
A sequence of Ints specifying the independent components. Possible values are 1
independentComponents  6. In addition, each independent component value must
independentComponents
be unique. The independentComponents argument applies only if
frictionModel=USER_CUSTOMIZED. Only available components can be speciﬁed.
The default value is an empty sequence.
Return value
A ConnectorFriction object.
461
Abaqus Scripting Reference Guide
ConnectorFriction object

Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorFriction object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorFriction  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorFriction object has members with the same names and descriptions as the arguments to the
ConnectorFriction  method.
In addition, the ConnectorFriction object can have the following members:
A TangentialBehavior object.
tangentialBehavior
A DerivedComponent object specifying the DerivedComponent used to compute the
contact force component direction. This argument applies only if
derivedComponent
frictionModel=USER_CUSTOMIZED, if useContactForceComponent=ON, and if
contactForceStyle=DERIVED_COMPONENT.
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for this ConnectorBehaviorOption.
options
Corresponding analysis keywords
•
*CONNECTOR FRICTION, *FRICTION, *CONNECTOR POTENTIAL, *CONNECTOR DERIVED
COMPONENT
Abaqus Scripting Reference Guide
462
ConnectorFriction object

ConnectorLock object
The ConnectorLock object deﬁnes locking criteria for one or more available components of a connector's relative
motion.
The ConnectorLock object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorLock(...)
This method creates a connector lock behavior option for a ConnectorSection.
Path
          import connectorBehavior
          connectorBehavior.ConnectorLock
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorLock
Required arguments
None.
Optional arguments
The SymbolicConstant ALL or an Int specifying the motion components that are locked. If
an Int is speciﬁed, only that motion component is locked when the locking criteria are satisﬁed.
If lockingComponent=ALL, all motion components are locked. The default value is ALL.
lockingComponent
None or a Float specifying the lower bound for the connector's relative position for all
speciﬁed components, or no lower bound. The default value is None.
minMotion
None or a Float specifying the upper bound for the connector's relative position for all
speciﬁed components, or no upper bound. The default value is None.
maxMotion
None or a Float specifying the lower bound of the force or moment in the directions of the
speciﬁed components at which locking occurs, or no lower bound. The default value is None.
minForce
None or a Float specifying the upper bound of the force or moment in the directions of the
speciﬁed components at which locking occurs, or no upper bound. The default value is None.
maxForce
A sequence of Ints specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
463
ConnectorLock object

Return value
A ConnectorLock object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorLock object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorLock  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorLock object has members with the same names and descriptions as the arguments to the ConnectorLock
method.
Corresponding analysis keywords
*CONNECTOR LOCK
Abaqus Scripting Reference Guide
464
ConnectorLock object

ConnectorOptions object
The ConnectorOptions object is used to deﬁne various options for connector behaviors. It can be used only in conjunction
with CDCTerm, ConnectorDamage, ConnectorDamping, ConnectorElasticity, ConnectorFriction, and
ConnectorPlasticity objects. Because the ConnectorDamage object contains two separate ConnectorOptions repositories
(one for damage initiation and one for damage evolution), there are two ConnectorOptions constructors associated
with that behavior—initiationOptions and evolutionOptions. The ConnectorPlasticity object also contains two separate
ConnectorOptions repositories (one for isotropic hardening and one for kinematic hardening), so there are two
ConnectorOptions constructors associated with that behavior—isotropicOptions and kinematicOptions.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.cdcTerms[i].options
mdb.models[name].sections[name].behaviorOptions[i].derivedComponent\
.cdcTerms[i].options
mdb.models[name].sections[name].behaviorOptions[i].evolutionOptions
mdb.models[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent.cdcTerms[i].options
mdb.models[name].sections[name].behaviorOptions[i].initiationOptions
mdb.models[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.cdcTerms[i].options
mdb.models[name].sections[name].behaviorOptions[i].isotropicOptions
mdb.models[name].sections[name].behaviorOptions[i].kinematicOptions
mdb.models[name].sections[name].behaviorOptions[i].options
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.cdcTerms[i].options
session.odbs[name].sections[name].behaviorOptions[i].derivedComponent\
.cdcTerms[i].options
session.odbs[name].sections[name].behaviorOptions[i].evolutionOptions
session.odbs[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent.cdcTerms[i].options
session.odbs[name].sections[name].behaviorOptions[i].initiationOptions
session.odbs[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.cdcTerms[i].options
session.odbs[name].sections[name].behaviorOptions[i].isotropicOptions
session.odbs[name].sections[name].behaviorOptions[i].kinematicOptions
session.odbs[name].sections[name].behaviorOptions[i].options
ConnectorOptions(...)
This method creates a connector options object to be used in conjunction with an allowable connector behavior option,
derived component term, or connector section.
Path
mdb.models[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.cdcTerms[i].ConnectorOptions
mdb.models[name].sections[name].behaviorOptions[i].derivedComponent\
.cdcTerms[i].ConnectorOptions
mdb.models[name].sections[name].behaviorOptions[i].ConnectorOptions
mdb.models[name].sections[name].behaviorOptions[i]\
465
ConnectorOptions object

.evolutionPotentials[i].derivedComponent.cdcTerms[i].ConnectorOptions
mdb.models[name].sections[name].behaviorOptions[i].ConnectorOptions
mdb.models[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.cdcTerms[i].ConnectorOptions
mdb.models[name].sections[name].behaviorOptions[i].ConnectorOptions
session.odbs[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent.cdcTerms[i].ConnectorOptions
session.odbs[name].sections[name].behaviorOptions[i].derivedComponent\
.cdcTerms[i].ConnectorOptions
session.odbs[name].sections[name].behaviorOptions[i].ConnectorOptions
session.odbs[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent.cdcTerms[i].ConnectorOptions
session.odbs[name].sections[name].behaviorOptions[i].ConnectorOptions
session.odbs[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent.cdcTerms[i].ConnectorOptions
session.odbs[name].sections[name].behaviorOptions[i].ConnectorOptions
Required arguments
None.
Optional arguments
A Boolean specifying whether or not to use the behavior-level settings for regularization
options. This argument is applicable only for an Abaqus/Explicit analysis. The default value
is ON.
useBehRegSettings
A Boolean specifying whether or not the tabular data will be regularized. This argument is
applicable only for an Abaqus/Explicit analysis and only if useBehRegSettings=OFF. The
default value is ON.
regularize
A Boolean specifying whether or not the analysis default regularization tolerance will be
used. This argument is applicable only for an Abaqus/Explicit analysis and only if
useBehRegSettings=OFF and regularize=ON. The default value is ON.
defaultTolerance
A Float specifying the regularization increment to be used. This argument is applicable only
for an Abaqus/Explicit analysis and only if useBehRegSettings=OFF, regularize=ON, and
defaultTolerance=OFF. The default value is 0.03.
regularization
A Boolean specifying whether or not the analysis default rate ﬁlter factor will be used. This
argument is applicable only for an Abaqus/Explicit analysis that includes isotropic hardening
defaultRateFactor
with tabular deﬁnition or damage initiation with plastic motion criteria. The default value is
ON.
A Float specifying the rate ﬁlter factor to be used. This argument is applicable only for an
Abaqus/Explicit analysis that includes isotropic hardening with tabular deﬁnition or damage
rateFactor
initiation with plastic motion criteria. This argument is also applicable only if
defaultRateFactor=OFF. The default value is 0.9.
A SymbolicConstant specifying the type of interpolation increment to be used on
rate-dependent tabular data. This argument is applicable only for an Abaqus/Explicit analysis
interpolation
that includes isotropic hardening with tabular deﬁnition or damage initiation with plastic
Abaqus Scripting Reference Guide
466
ConnectorOptions object

motion criteria. Possible values are LINEAR and LOGARITHMIC. The default value is
LINEAR.
A Boolean specifying whether or not to use the behavior-level settings for extrapolation
options. The default value is ON.
useBehExtSettings
A SymbolicConstant specifying the extrapolation technique to be used. This argument is
applicable only if useBehExtSettings=OFF. Possible values are CONSTANT and LINEAR.
The default value is CONSTANT.
extrapolation
Return value
A ConnectorOptions object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorOptions object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorOptions  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorOptions object has members with the same names and descriptions as the arguments to the
ConnectorOptions  method.
Corresponding analysis keywords
•
*CONNECTOR BEHAVIOR, *CONNECTOR DAMAGE INITIATION, *CONNECTOR DAMAGE
EVOLUTION, *CONNECTOR DAMPING, *CONNECTOR DERIVED COMPONENT, *CONNECTOR
ELASTICITY, *CONNECTOR FRICTION, and *CONNECTOR PLASTICITY
467
Abaqus Scripting Reference Guide
ConnectorOptions object

ConnectorPlasticity object
The ConnectorPlasticity object deﬁnes plastic behavior for one or more components of a connector's relative motion.
The ConnectorPlasticity object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorPlasticity(...)
This method creates a connector plasticity behavior option for a ConnectorSection object.
Path
          import connectorBehavior
          connectorBehavior.ConnectorPlasticity
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorPlasticity
Required arguments
None.
Optional arguments
A SymbolicConstant specifying whether or not the behavior is coupled. Possible values
are UNCOUPLED and COUPLED. The default value is UNCOUPLED.
coupling
A Boolean specifying whether isotropic hardening data will be used. The default value is
ON.
isotropic
If isotropic=OFF, then kinematic must be speciﬁed as ON.
A SymbolicConstant specifying the type of isotropic hardening to be speciﬁed. Possible
values are TABULAR and EXPONENTIAL_LAW. The default value is TABULAR.
isotropicType
This argument is applicable only if isotropic=ON.
A Boolean specifying whether the isotropic data depend on temperature. The default value
is OFF.
isotropicTemperature
This argument is applicable only if isotropic=ON.
An Int specifying the number of ﬁeld variable dependencies for the isotropic data. The
default value is 0.
isotropicDependencies
This argument is applicable only if isotropic=ON.
Abaqus Scripting Reference Guide
468
ConnectorPlasticity object

A Boolean specifying whether kinematic hardening data will be used. The default value
is OFF.
kinematic
If kinematic=OFF, then isotropic must be speciﬁed as ON.
A SymbolicConstant specifying the type of kinematic hardening to be speciﬁed. Possible
values are HALF_CYCLE, STABILIZED, and PARAMETERS. The default value is
HALF_CYCLE.
kinematicType
This argument is applicable only if kinematic=ON.
A Boolean specifying whether the kinematic data depend on temperature. The default
value is OFF.
kinematicTemperature
This argument is applicable only if kinematic=ON.
An Int specifying the number of ﬁeld variable dependencies for the kinematic data. The
default value is 0.
kinematicDependencies
This argument is applicable only if kinematic=ON.
A SymbolicConstant specifying the contribution operator for the force potential
contributions. Possible values are SUM and MAXIMUM. The default value is SUM.
forcePotentialOperator
This argument is applicable only if coupling=COUPLED.
A Float specifying the number equal to the inverse of the overall exponent in the force
potential deﬁnition. The default value is 2.0.
forcePotentialExponent
This argument is applicable only if coupling=COUPLED and if
forcePotentialOperator=SUM.
A ConnectorPotentialArray object specifying one ConnectorPotential object for each
force potential contribution. This member can be speciﬁed only if coupling=COUPLED.
connectorPotentials
A sequence of sequences of Floats specifying isotropic plasticity properties. Items in the
isotropicTable data are described below. This argument is applicable only if isotropic=ON.
The default value is an empty sequence.
isotropicTable
A sequence of sequences of Floats specifying kinematic plasticity properties. Items in the
kinematicTable data are described below. This argument is applicable only if
kinematic=ON. The default value is an empty sequence.
kinematicTable
A sequence of Ints specifying the components of relative motion for which the behavior
is deﬁned. Possible values are 1 components  6. Only available components can be
components
speciﬁed. This argument can be speciﬁed only if coupling=UNCOUPLED. The default
value is an empty sequence.
Table data
Table data for isotropicTable:
If isotropicType=TABULAR, then each sequence of the table data speciﬁes the following:
469
Abaqus Scripting Reference Guide
ConnectorPlasticity object

•
Equivalent yield force or moment deﬁning the size of the elastic range.
•
Equivalent relative plastic motion.
•
Equivalent relative plastic motion rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If isotropicType=EXPONENTIAL_LAW, then each sequence of the table data speciﬁes the following:
•
Equivalent force or moment deﬁning the size of the elastic range at zero plastic motion.
•
Isotropic hardening parameter 
.
•
Isotropic hardening parameter .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Table data for kinematicTable:
If kinematicType=HALF_CYCLE, then each sequence of the table data speciﬁes the following:
•
Yield force or moment.
•
Connector relative plastic motion.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If kinematicType=STABILIZED, then each sequence of the table data speciﬁes the following:
•
Yield force or moment.
•
Connector relative plastic motion.
•
Connector relative constitutive motion range.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If kinematicType=PARAMETERS, then each sequence of the table data speciﬁes the following:
•
Yield force or moment at zero relative plastic motion.
•
Kinematic hardening parameter .
•
Kinematic hardening parameter . Set =0 to specify linear Ziegler kinematic hardening.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
470
ConnectorPlasticity object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConnectorPlasticity object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorPlasticity  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorPlasticity object has members with the same names and descriptions as the arguments to the
ConnectorPlasticity  method.
In addition, the ConnectorPlasticity object can have the following members:
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the isotropic hardening table.
isotropicOptions
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the kinematic hardening table.
kinematicOptions
Corresponding analysis keywords
•
*CONNECTOR PLASTICITY, *CONNECTOR HARDENING, *CONNECTOR POTENTIAL
471
Abaqus Scripting Reference Guide
ConnectorPlasticity object

ConnectorPotential object
The ConnectorPotential object is used to deﬁne a restricted set of mathematical functions to represent yield or limiting
surfaces in the space spanned by connector available components. It can be used only in conjunction with
ConnectorDamage, ConnectorFriction, and ConnectorPlasticity objects. Because the ConnectorDamage object contains
two separate ConnectorPotential repositories (one for damage initiation and one for damage evolution), there are two
ConnectorPotential constructors associated with that behavior—IniPotential and EvoPotential.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i]
mdb.models[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i]
mdb.models[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i]
session.odbs[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i]
session.odbs[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i]
ConnectorPotential(...)
This method creates a connector potential object to be used in conjunction with an allowable connector behavior option.
Path
mdb.models[name].sections[name].behaviorOptions[i].ConnectorPotential
session.odbs[name].sections[name].behaviorOptions[i]\
.ConnectorPotential
Required arguments
None.
Optional arguments
A SymbolicConstant specifying whether a component number or the name of the
DerivedComponent object will be used in the contribution. Possible values are
componentStyle
COMPONENT_NUMBER and DERIVED_COMPONENT. The default value is
COMPONENT_NUMBER.
An Int specifying the component number used in the contribution. This argument is applicable
only if componentStyle=COMPONENT_NUMBER. Possible values are 1
componentNumber
componentNumber  6. Only available components can be speciﬁed. The default value is
0.
Abaqus Scripting Reference Guide
472
ConnectorPotential object

A SymbolicConstant specifying the sign of the contribution. Possible values are POSITIVE
and NEGATIVE. The default value is POSITIVE.
sign
A Float specifying the scaling factor for the contribution. The default value is 1.0.
scaleFactor
A Float specifying the positive exponent for the contribution. The default value is 2.0.
positiveExponent
This argument is ignored if the potential operator of the invoking behavior option is set to
MAXIMUM.
A Float specifying the shift factor for the contribution. The default value is 0.0.
shiftFactor
A SymbolicConstant specifying the H function of the contribution: either absolute value,
Macauley bracket, or the identity function. Possible values are ABS, MACAULEY, and
IDENTITY. The default value is ABS.
hFunction
The value of IDENTITY can be used only if positiveExponent=1.0 and the potential exponent
of the invoking behavior option is also 1.0 (i.e., the potential operator of the invoking behavior
option must be SUM).
Return value
A ConnectorPotential object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorPotential object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorPotential  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorPotential object has members with the same names and descriptions as the arguments to the
ConnectorPotential  method.
In addition, the ConnectorPotential object can have the following member:
473
Abaqus Scripting Reference Guide
ConnectorPotential object

A DerivedComponent object specifying the DerivedComponent used in the contribution.
This argument is applicable only if componentStyle=DERIVED_COMPONENT.
derivedComponent
Corresponding analysis keywords
•
*CONNECTOR POTENTIAL
Abaqus Scripting Reference Guide
474
ConnectorPotential object

ConnectorStop object
The ConnectorStop object deﬁnes connector stops for one or more components of a connector's relative motion.
The ConnectorStop object is derived from the ConnectorBehaviorOption object.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]
ConnectorStop(...)
This method creates a connector stop behavior option for a ConnectorSection object.
Path
          import connectorBehavior
          connectorBehavior.ConnectorStop
          import odbConnectorBehavior
          odbConnectorBehavior.ConnectorStop
Required arguments
None.
Optional arguments
None or a Float specifying the lower bound for the connector's relative position for all
speciﬁed components, or no lower bound. The default value is None.
minMotion
None or a Float specifying the upper bound for the connector's relative position for all
speciﬁed components, or no upper bound. The default value is None.
maxMotion
A sequence of Ints specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
Return value
A ConnectorStop object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorStop object.
475
ConnectorStop object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorStop  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorStop object has members with the same names and descriptions as the arguments to the ConnectorStop
method.
Corresponding analysis keywords
•
*CONNECTOR STOP
Abaqus Scripting Reference Guide
476
ConnectorStop object

DerivedComponent object
A DerivedComponent object describes user-customized components for use in deﬁning ConnectorFriction and Potential
objects.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent
mdb.models[name].sections[name].behaviorOptions[i].derivedComponent
mdb.models[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent
mdb.models[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].derivedComponent
session.odbs[name].sections[name].behaviorOptions[i].derivedComponent
session.odbs[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].derivedComponent
session.odbs[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].derivedComponent
DerivedComponent()
This method creates a DerivedComponent object.
Path
mdb.models[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].DerivedComponent
mdb.models[name].sections[name].behaviorOptions[i].DerivedComponent
mdb.models[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].DerivedComponent
mdb.models[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].DerivedComponent
session.odbs[name].sections[name].behaviorOptions[i]\
.connectorPotentials[i].DerivedComponent
session.odbs[name].sections[name].behaviorOptions[i].DerivedComponent
session.odbs[name].sections[name].behaviorOptions[i]\
.evolutionPotentials[i].DerivedComponent
session.odbs[name].sections[name].behaviorOptions[i]\
.initiationPotentials[i].DerivedComponent
Arguments
None.
Return value
A DerivedComponent object.
477
DerivedComponent object

Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the DerivedComponent object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DerivedComponent  method.
Return value
None.
Exceptions
ValueError.
Members
The DerivedComponent object can have the following member:
A CDCTermArray object.
cdcTerms
Corresponding analysis keywords
•
*CONNECTOR DERIVED COMPONENT
Abaqus Scripting Reference Guide
478
DerivedComponent object

TangentialBehavior object
The TangentialBehavior object speciﬁes tangential behavior for a connector friction behavior option.
Access
import section
mdb.models[name].sections[name].behaviorOptions[i].tangentialBehavior
import odbSection
session.odbs[name].sections[name].behaviorOptions[i]\
.tangentialBehavior
TangentialBehavior(...)
This method creates a TangentialBehavior object.
Path
mdb.models[name].sections[name].behaviorOptions[i].TangentialBehavior
session.odbs[name].sections[name].behaviorOptions[i]\
.TangentialBehavior
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the friction coefﬁcient formulation. Possible values
are PENALTY and EXPONENTIAL_DECAY. The default value is PENALTY.
formulation
A Boolean specifying whether the data depend on slip rate. The default value is OFF.
slipRateDependency
A Boolean specifying whether the data depend on contact pressure. The default value
is OFF.
pressureDependency
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variables for the data. The default value is 0.
dependencies
A SymbolicConstant specifying the exponential decay deﬁnition for the data. Possible
values are COEFFICIENTS and TEST_DATA. The default value is COEFFICIENTS.
exponentialDecayDeﬁnition
None or a Float specifying no upper limit or the friction coefﬁcient shear stress limit.
The default value is None.
shearStressLimit
A SymbolicConstant specifying the method for modifying the allowable elastic slip.
Possible values are FRACTION and ABSOLUTE_DISTANCE. The default value is
FRACTION.
maximumElasticSlip
This argument applies only to Abaqus/Standard analyses.
479
TangentialBehavior object

A Float specifying the ratio of the allowable maximum elastic slip to a characteristic
model dimension. The default value is 10–4.
fraction
This argument applies only to Abaqus/Standard analyses.
None or a Float specifying the absolute magnitude of the allowable elastic slip. The
default value is None.
absoluteDistance
This argument applies only to Abaqus/Standard analyses.
A sequence of sequences of Floats specifying the tangential properties. Items in the
table data are described below. The default value is an empty sequence.
table
Table data
If formulation=PENALTY, the table data specify the following:
•
Friction coefﬁcient in the slip direction, .
•
Slip rate, if the data depend on slip rate.
•
Contact pressure, if the data depend on contact pressure.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If formulation=EXPONENTIAL_DECAY and exponentialDecayDeﬁnition=COEFFICIENTS, the table data specify
the following:
•
Static friction coefﬁcient, 
.
•
Kinetic friction coefﬁcient, 
.
•
Decay coefﬁcient, 
.
If formulation=EXPONENTIAL_DECAY and exponentialDecayDeﬁnition=TEST_DATA, the table data specify the
following:
•
Static coefﬁcient of friction.
•
Dynamic friction coefﬁcient measured at the reference slip rate, 
.
•
Reference slip rate, 
, used to measure the dynamic friction coefﬁcient.
•
Kinetic friction coefﬁcient, 
. This value corresponds to the asymptotic value of the friction coefﬁcient at inﬁnite
slip rate, 
.
Return value
A TangentialBehavior object.
Exceptions
None.
Abaqus Scripting Reference Guide
480
TangentialBehavior object

setValues(...)
This method modiﬁes the TangentialBehavior object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TangentialBehavior  method.
Return value
None.
Exceptions
None.
Members
The TangentialBehavior object has members with the same names and descriptions as the arguments to the
TangentialBehavior  method.
Corresponding analysis keywords
•
*FRICTION
481
Abaqus Scripting Reference Guide
TangentialBehavior object

Constraint commands
The Constraint commands deﬁne constraints between regions of the model.
In this section:
•
Constraint object
•
AdjustPoints object
•
Coupling object
•
DisplayBody object
•
EmbeddedRegion object
•
Equation object
•
MultipointConstraint object
•
RigidBody object
•
ShellSolidCoupling object
•
Tie object
Abaqus Scripting Reference Guide
482

Constraint object
The Constraint object is the abstract base type for other Constraint objects. The Constraint object has no explicit
constructor. The members of the Constraint object are common to all objects derived from the Constraint.
Access
import interaction
mdb.models[name].constraints[name]
resume()
This method resumes the constraint that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the constraint.
Arguments
None.
Return value
None.
Exceptions
None.
delete(...)
This method allows you to delete existing constraints.
Required arguments
A sequence of Ints specifying the index of each constraint to delete.
indices
Optional arguments
None.
483
Constraint object

Return value
None.
Exceptions
None.
Members
The Constraint object has the following members:
A String specifying the constraint repository key.
name
A Boolean specifying whether the constraint is suppressed or not. The default value is
OFF.
suppressed
Abaqus Scripting Reference Guide
484
Constraint object

AdjustPoints object
The AdjustPoints constraint object is used to adjust points (nodes) to a surface.
The AdjustPoints object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
AdjustPoints(...)
This method creates an AdjustPoints object.
Path
mdb.models[name].AdjustPoints
Required arguments
A String specifying the constraint repository key.
name
A Region object specifying the surface to which the controlPoints are adjusted.
surface
A Region object specifying the constraint control points.
controlPoints
Optional arguments
None.
Return value
An AdjustPoints object.
Exceptions
None.
setValues(...)
This method modiﬁes the AdjustPoints object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AdjustPoints  method, except for the
name argument.
485
AdjustPoints object

Return value
None.
Exceptions
None.
Members
The AdjustPoints object has members with the same names and descriptions as the arguments to the AdjustPoints
method.
In addition, the AdjustPoints object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*ADJUST
Abaqus Scripting Reference Guide
486
AdjustPoints object

Coupling object
The Coupling object deﬁnes a constraint between a group of coupling nodes located on a region and a reference point.
The Coupling object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
Coupling(...)
This method creates a Coupling object.
Path
mdb.models[name].Coupling
Required arguments
A String specifying the constraint repository key.
name
A Region object specifying the surface on which the coupling nodes are located.
surface
A Region object specifying the constraint control point.
controlPoint
The SymbolicConstant WHOLE_SURFACE or a Float specifying the inﬂuence
radius.
inﬂuenceRadius
A SymbolicConstant specifying the coupling constraint type. Possible values are
KINEMATIC, DISTRIBUTING, and STRUCTURAL.
couplingType
A SymbolicConstant specifying the rotational coupling constraint type. Possible
values are ROTATIONAL_CONTINUUM and ROTATIONAL_STRUCTURAL.
rotationalCouplingType
Optional arguments
A Boolean specifying if the control point will be adjusted (moved) to the surface. The point will
be adjusted in the direction normal to the speciﬁed surface. The default value is OFF.
adjust
None or a DatumCsys object specifying the initial orientation of the local coordinate system for
the coupling's degrees of freedom. If localCsys=None, the coupling is deﬁned in the global
coordinate system. The default value is None.
localCsys
A Boolean specifying if the displacement component in the 1-direction is constrained to the reference
node for a kinematic coupling constraint. The default value is ON.
u1
The u1 argument applies only when couplingType=KINEMATIC.
487
Coupling object

A Boolean specifying if the displacement component in the 2-direction is constrained to the reference
node for a kinematic coupling constraint. The default value is ON.
u2
The u2 argument applies only when couplingType=KINEMATIC.
A Boolean specifying if the displacement component in the 3-direction is constrained to the reference
node for a kinematic coupling constraint. The default value is ON.
u3
The u3 argument applies only when couplingType=KINEMATIC.
A Boolean specifying if the rotational displacement component about the 1-direction is constrained
to the reference node for a kinematic coupling constraint. The default value is ON.
ur1
The ur1 argument applies only when couplingType=KINEMATIC.
A Boolean specifying if the rotational displacement component about the 2-direction is constrained
to the reference node for a kinematic coupling constraint. The default value is ON.
ur2
The ur2 argument applies only when couplingType=KINEMATIC.
A Boolean specifying if the rotational displacement component about the 3-direction is constrained
to the reference node for a kinematic coupling constraint. The default value is ON.
ur3
The ur3 argument applies only when couplingType=KINEMATIC.
A SymbolicConstant specifying an optional weighting method used for calculating the distributing
weight factors. Possible values are UNIFORM, LINEAR, QUADRATIC, and CUBIC. The default
value is UNIFORM.
weightingMethod
The weightingMethod argument applies only when couplingType=DISTRIBUTING.
A Float specifying the value of the thermal expansion coefﬁcient. The default value is 0.0.
alpha
The alpha argument applies only when couplingType=KINEMATIC.
Return value
A Coupling object.
Exceptions
None.
setValues(...)
This method modiﬁes the Coupling object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Coupling method, except for the name
argument.
Abaqus Scripting Reference Guide
488
Coupling object

Return value
None.
Exceptions
None.
Members
The Coupling object has members with the same names and descriptions as the arguments to the Coupling method.
In addition, the Coupling object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*COUPLING
489
Abaqus Scripting Reference Guide
Coupling object

DisplayBody object
The DisplayBody object deﬁnes a constraint such that the speciﬁed instance is used for display only and does not take
part in the analysis. However it will still be visible during postprocessing and its position at any frame will be deﬁned
by the translation and rotation of the speciﬁed control points.
The DisplayBody object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
DisplayBody(...)
This method creates a DisplayBody object.
Path
mdb.models[name].DisplayBody
Required arguments
A String specifying the constraint repository key.
name
A PartInstance object specifying the part instance that is to be used for display only.
instance
A ModelDotArray object specifying the motion of the PartInstance. The control points may
be Vertex, ReferencePoint, or MeshNode objects. Their motion will control the motion of the
controlPoints
PartInstance. If this argument is set to an empty sequence, the PartInstance will remain ﬁxed
in space during the analysis. The sequence can have either one object or three objects.
Optional arguments
None.
Return value
A DisplayBody object.
Exceptions
None.
setValues(...)
This method modiﬁes the DisplayBody object.
Required arguments
None.
Abaqus Scripting Reference Guide
490
DisplayBody object

Optional arguments
The optional arguments to setValues are the same as the arguments to the DisplayBody  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The DisplayBody object has members with the same names and descriptions as the arguments to the DisplayBody
method.
In addition, the DisplayBody object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*DISPLAY BODY
491
Abaqus Scripting Reference Guide
DisplayBody object

EmbeddedRegion object
The EmbeddedRegion object allows you to embed a region of the model within a “host” region of the model or within
the whole model.
The EmbeddedRegion object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
EmbeddedRegion(...)
This method creates a EmbeddedRegion object.
Path
mdb.models[name].EmbeddedRegion
Required arguments
A String specifying the constraint repository key.
name
A Region object specifying the body region to be embedded.
embeddedRegion
A Region object specifying the host region. A value of None indicates that the host
region is the whole model.
hostRegion
Optional arguments
A Float specifying a small value below which the weighting factors will be zeroed out.
The default value is 10–6.
weightFactorTolerance
A SymbolicConstant specifying the method used to determine the embedded element
tolerance. Possible values are ABSOLUTE, FRACTIONAL, and BOTH. The default value
is BOTH.
toleranceMethod
A Float specifying the absolute value by which a node on the embedded region may lie
outside the host region. If absoluteTolerance=0.0, the fractionalTolerance value will be
used. The default value is 0.0.
absoluteTolerance
This argument applies only when toleranceMethod=ABSOLUTE or BOTH.
A Float specifying the fractional value by which a node on the embedded region may lie
outside the host region. The fractional value is based on the average element size within
the host region. The default value is 0.05.
fractionalTolerance
If both tolerance arguments are speciﬁed, the smaller value will be used.
This argument applies only when toleranceMethod=FRACTIONAL or BOTH.
Abaqus Scripting Reference Guide
492
EmbeddedRegion object

Return value
An EmbeddedRegion object.
Exceptions
None.
setValues(...)
This method modiﬁes the EmbeddedRegion object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the EmbeddedRegion  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The EmbeddedRegion object has members with the same names and descriptions as the arguments to the
EmbeddedRegion  method.
In addition, the EmbeddedRegion object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*EMBEDDED ELEMENT
493
Abaqus Scripting Reference Guide
EmbeddedRegion object

Equation object
The Equation object deﬁnes a linear multi-point constraint between a set of degrees of freedom.
The Equation object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
Equation(...)
This method creates an Equation object.
Path
mdb.models[name].Equation
Required arguments
A String specifying the constraint repository key.
name
A sequence of (Float, String, Int, Int) sequences specifying a coefﬁcient, Set name, degree of
freedom, and coordinate system ID. The coordinate system ID is optional.
terms
Optional arguments
None.
Return value
An Equation object.
Exceptions
Equation must have two or more terms.
If terms does not contain more than one entry:
setValues(...)
This method modiﬁes the Equation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Equation  method, except for the name
argument.
Abaqus Scripting Reference Guide
494
Equation object

Return value
None.
Exceptions
Equation must have two or more terms.
If terms does not contain more than one entry:
Members
The Equation object has members with the same names and descriptions as the arguments to the Equation  method.
In addition, the Equation object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*EQUATION
495
Abaqus Scripting Reference Guide
Equation object

MultipointConstraint object
The MultipointConstraint object deﬁnes a constraint between a group of MultipointConstraint nodes located on a
region and a reference point.
The MultipointConstraint object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
MultipointConstraint(...)
This method creates a MultipointConstraint object.
Path
mdb.models[name].MultipointConstraint
Required arguments
A String specifying the constraint repository key.
name
A Region object specifying the surface on which the MultipointConstraint nodes are
located.
surface
A Region object specifying the constraint control point.
controlPoint
A SymbolicConstant specifying the MPC type of the constraint. Possible values are
BEAM_MPC, ELBOW_MPC, PIN_MPC, LINK_MPC, TIE_MPC, and USER_MPC.
mpcType
Optional arguments
None or a DatumCsys object specifying the initial orientation of the local coordinate system for
the MultipointConstraint's degrees of freedom. If localCsys=None, the MultipointConstraint is
deﬁned in the global coordinate system. The default value is None.
csys
An Int specifying to differentiate between different constraint types in a user-deﬁned
MultipointConstraint. The default value is 0.
userType
The userType argument applies only when mpcType=USER_MPC.
A SymbolicConstant specifying the mode of the constraint when it is user-deﬁned. Possible values
are DOF_MODE_MPC and NODE_MODE_MPC. The default value is DOF_MODE_MPC.
userMode
The userMode argument applies only when mpcType=USER_MPC.
Return value
A MultipointConstraint object.
Abaqus Scripting Reference Guide
496
MultipointConstraint object

Exceptions
None.
setValues(...)
This method modiﬁes the MultipointConstraint object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MultipointConstraint  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The MultipointConstraint object has members with the same names and descriptions as the arguments to the
MultipointConstraint  method.
In addition, the MultipointConstraint object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*MPC
497
Abaqus Scripting Reference Guide
MultipointConstraint object

RigidBody object
The RigidBody object constrains all the degrees of freedom on the speciﬁed regions to the degree of freedom of its
associated reference point.
The RigidBody object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
RigidBody(...)
This method creates a RigidBody object.
Path
mdb.models[name].RigidBody
Required arguments
A String specifying the constraint repository key.
name
A Region object specifying the reference point.
refPointRegion
Optional arguments
None or a Region object specifying the elements constrained to the movement of the
reference point. The default value is None.
bodyRegion
None or a Region object specifying the nodes tied to the movement of the reference
point. The default value is None.
tieRegion
None or a Region object specifying the nodes pinned to the movement of the reference
point. The default value is None.
pinRegion
None or a Region object specifying the analytic surface constrained to the movement of
the reference point. The default value is None.
surfaceRegion
A Boolean specifying whether the analysis product should recompute the reference point
position to be at the center of mass. The default value is OFF.
refPointAtCOM
A Boolean specifying whether the temperature degree of freedom should be constrained.
The default value is OFF.
isothermal
Return value
A RigidBody object.
Abaqus Scripting Reference Guide
498
RigidBody object

Exceptions
None.
setValues(...)
This method modiﬁes the RigidBody object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RigidBody  method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The RigidBody object has members with the same names and descriptions as the arguments to the RigidBody  method.
In addition, the RigidBody object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*RIGID BODY
499
Abaqus Scripting Reference Guide
RigidBody object

ShellSolidCoupling object
The ShellSolidCoupling object deﬁnes two surfaces to be tied together for the duration of a simulation.
The ShellSolidCoupling object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
ShellSolidCoupling(...)
This method creates a ShellSolidCoupling object.
Path
mdb.models[name].ShellSolidCoupling
Required arguments
A String specifying the constraint repository key.
name
A Region object specifying the name of the shell edge surface.
shellEdge
A Region object specifying the name of the solid surface.
solidFace
Optional arguments
A SymbolicConstant specifying the method used to determine the position tolerance.
Possible values are COMPUTED and SPECIFIED. The default value is COMPUTED.
positionToleranceMethod
A Float specifying the position tolerance. The default value is 0.0.
positionTolerance
The positionTolerance argument applies only when
positionToleranceMethod=SPECIFIED.
Note:
Abaqus will not constrain nodes on the solid face region outside the position
tolerance.
A SymbolicConstant specifying the method used to determine the inﬂuence distance.
Possible values are DEFAULT and SPECIFIED. The default value is DEFAULT.
inﬂuenceDistanceMethod
A Float specifying the inﬂuence distance. The inﬂuenceDistance argument applies
only when inﬂuenceDistanceMethod=SPECIFIED. The default value is 0.0.
inﬂuenceDistance
Return value
A ShellSolidCoupling object.
Abaqus Scripting Reference Guide
500
ShellSolidCoupling object

Exceptions
None.
setValues(...)
This method modiﬁes the ShellSolidCoupling object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShellSolidCoupling  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The ShellSolidCoupling object has members with the same names and descriptions as the arguments to the
ShellSolidCoupling  method.
In addition, the ShellSolidCoupling object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*SHELL TO SOLID COUPLING
501
Abaqus Scripting Reference Guide
ShellSolidCoupling object

Tie object
The Tie object deﬁnes two surfaces to be tied together for the duration of a simulation.
The Tie object is derived from the Constraint object.
Access
import interaction
mdb.models[name].constraints[name]
Tie(...)
This method creates a Tie object.
Path
mdb.models[name].Tie
Required arguments
A String specifying the constraint repository key.
name
A Region object specifying the name of the main surface.
main
A Region object specifying the name of the secondary surface.
secondary
Optional arguments
A Boolean specifying whether initial positions of tied secondary nodes are adjusted to
lie on the main surface. The default value is ON.
adjust
A SymbolicConstant specifying the method used to determine the position tolerance.
Possible values are COMPUTED and SPECIFIED. The default value is COMPUTED.
positionToleranceMethod
A Float specifying the position tolerance. The positionTolerance argument applies only
when positionToleranceMethod=SPECIFIED. The default value is 0.0.
positionTolerance
A Boolean specifying whether rotation degrees of freedom should be tied. The default
value is ON.
tieRotations
A SymbolicConstant specifying the method used to determine the constraint ratio.
Possible values are DEFAULT and SPECIFIED. The default value is DEFAULT.
constraintRatioMethod
A Float specifying the fractional distance between the main reference surface and the
secondary node at which the translational constraint should act. The constraintRatio
constraintRatio
argument applies only when constraintRatioMethod=SPECIFIED. The default value is
0.0.
Abaqus Scripting Reference Guide
502
Tie object

A SymbolicConstant specifying the discretization method. Possible values are
SOLVER_DEFAULT, NODE_TO_SURFACE, and SURFACE_TO_SURFACE. The
default value is SOLVER_DEFAULT.
constraintEnforcement
A Boolean specifying whether shell element thickness is considered. The default value
is ON.
thickness
Return value
A Tie object.
Exceptions
None.
swapSurfaces()
This method switches the main and secondary surfaces of a tied constraint. This command is valid only during the step
in which the interaction is created.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the Tie object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Tie method, except for the name argument.
Return value
None.
Exceptions
None.
503
Abaqus Scripting Reference Guide
Tie object

Members
The Tie object has members with the same names and descriptions as the arguments to the Tie method.
In addition, the Tie object has the following member:
A Boolean specifying whether the constraint is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*TIE
Abaqus Scripting Reference Guide
504
Tie object

CustomKernel module
The customKernel module augments the mdb, odb, and session objects with an object called customData.
The customData object can contain custom data that you created using standard Python objects; for example,
dictionaries, strings, numbers, and classes. In addition, the customData object can contain objects that you created
using the classes described in this section.
All objects that you create under the mdb.customData and odb[odbName].customData object will be stored in
the Abaqus/CAE model and output database, respectively, when you save the database; all objects that you create
under the session.customData object will be lost when you exit Abaqus/CAE.
The customData object is an instance of the RepositorySupport class; for more information, see RepositorySupport.
The classes described in this section register with the GUI infrastructure when you create the class. As a result,
if you write a custom GUI script, you can query these objects from the GUI, and you can also be notiﬁed when
the contents of these objects change so you can update the GUI accordingly. For more information, see Extending
the Abaqus Scripting Interface and Accessing kernel data from the GUI.
In this section:
•
CommandRegister object
•
RepositorySupport object
•
RegisteredDictionary object
•
RegisteredList object
•
RegisteredTuple object
505

CommandRegister object
This class allows you to derive a general class that can be queried from the GUI and is capable of notifying the GUI
when the contents of the class change.
Access
import customKernel
CommandRegister()
This class allows you to derive a general class that can be queried from the GUI and is capable of notifying the GUI
when the contents of the class change.
Path
customKernel.CommandRegister
Arguments
None.
Return value
A CommandRegister object.
Exceptions
None.
Members
The CommandRegister object has no members.
Abaqus Scripting Reference Guide
506
CommandRegister object

RepositorySupport object
The RepositorySupport is a base class from which you can derive your own classes that are designed to contain custom
repositories. Instances of this class can be queried from the GUI and are capable of notifying the GUI when the contents
of the instance change.
The RepositorySupport object is derived from the CommandRegister object.
Access
import customKernel
mdb.customData
session.customData
session.odbs[name].customData
RepositorySupport()
This method creates a RepositorySupport object.
Path
customKernel.RepositorySupport
Arguments
None.
Return value
A RepositorySupport object.
Exceptions
None.
Repository(...)
This method installs a repository on the class. The repository is an instance of a RegisteredDictionary class. Refer to
RegisteredDictionary for details on its methods.
The objects stored in the repository are assumed to have an attribute called name that stores the key used to access the
object in the repository. The name attribute will be modiﬁed by the changeKey method.
Required arguments
A String specifying the name of the repository.
name
A constructor or sequence of constructors specifying which classes will store their
instances in the repository.
constructors
Optional arguments
None.
507
RepositorySupport object

Return value
None.
Exceptions
None.
Members
The RepositorySupport object has no members.
Abaqus Scripting Reference Guide
508
RepositorySupport object

RegisteredDictionary object
This class allows you to create a dictionary that can be queried from the GUI and is capable of notifying the GUI when
the contents of the dictionary change. The keys to a RegisteredDictionary must be either strings or integers.
The RegisteredDictionary object is derived from the CommandRegister object.
Access
import customKernel
RegisteredDictionary()
This method creates a RegisteredDictionary object.
Path
customKernel.RegisteredDictionary
Arguments
None.
Return value
A RegisteredDictionary object.
Exceptions
None.
Methods()
The RegisteredDictionary object supports the same methods as a Python dictionary. In addition, the RegisteredDictionary
object supports the changeKey method.
Arguments
None.
Return value
None.
Exceptions
None.
changeKey(...)
This method changes the name of a key in the dictionary.
509
RegisteredDictionary object

Required arguments
A String or an integer specifying the name of the key to be changed.
fromName
A String or an integer specifying the new name for the key.
toName
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The RegisteredDictionary object has no members.
Abaqus Scripting Reference Guide
510
RegisteredDictionary object

RegisteredList object
This class allows you to create a list that can be queried from the GUI and is capable of notifying the GUI when the
contents of the list change.
The RegisteredList object is derived from the CommandRegister object.
Access
import customKernel
RegisteredList()
This method creates a RegisteredList object.
Path
customKernel.RegisteredList
Arguments
None.
Return value
A RegisteredList object.
Exceptions
None.
Methods()
The RegisteredList object supports the same methods as a standard Python list object.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The RegisteredList object has no members.
511
RegisteredList object

RegisteredTuple object
This class allows you to create a tuple that can be queried from the GUI and is capable of notifying the GUI when the
contents of any of the tuple's members change.
The RegisteredTuple object is derived from the CommandRegister object.
Access
import customKernel
RegisteredTuple(...)
This method creates a RegisteredTuple object.
Path
customKernel.RegisteredTuple
Required arguments
A tuple of objects. These objects must be derived from the CommandRegister class.
tuple
Optional arguments
None.
Return value
A RegisteredTuple object.
Exceptions
None.
Methods()
The RegisteredTuple object supports the same methods as a standard Python list object.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The RegisteredTuple object has no members.
Abaqus Scripting Reference Guide
512
RegisteredTuple object

Datum commands
Datum commands return Feature objects and inherit the methods of Feature objects.
For more details, see Feature commands. Datums can be created using methods on a Part or Assembly object.
Each command also creates a Datum object in the corresponding datum repository. The Datum object is used
as an argument to other commands, such as Part and Partition commands.
In this section:
•
Datum object
•
DatumAxis object
•
DatumCsys object
•
DatumPlane object
•
DatumPoint object
513

Datum object
The Datum object is the abstract base type for other Datum objects. The Datum object has no explicit constructor. The
methods and members of the Datum object are common to all objects derived from the Datum.
Access
import part
mdb.models[name].parts[name].datums[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].datums[i]
mdb.models[name].rootAssembly.datums[i]
mdb.models[name].rootAssembly.instances[name].datums[i]
mdb.models[name].rootAssembly.modelInstances[i].datums[i]
Members
The Datum object has no members.
Abaqus Scripting Reference Guide
514
Datum object

DatumAxis object
The DatumAxis object has no direct constructor; it is created when a Feature object is created. For example, the
DatumAxisByCylFace method creates a Feature object that creates a DatumAxis object.
The DatumAxis object is derived from the Datum object.
Access
import part
mdb.models[name].parts[name].datums[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].datums[i]
mdb.models[name].rootAssembly.datums[i]
mdb.models[name].rootAssembly.instances[name].datums[i]
Members
The DatumAxis object has the following members:
A tuple of Floats specifying the X-, Y-, and Z-coordinates of a point located on the datum.
pointOn
A tuple of Floats specifying a sequence of three Floats specifying the direction of the
axis.
direction
515
DatumAxis object

DatumCsys object
The DatumCsys object has no direct constructor; it is created when a Feature object is created. For example, the
DatumCsysByOffset method creates a Feature object that creates a DatumCsys object.
The DatumCsys object is derived from the Datum object.
Access
import part
mdb.models[name].parts[name].datums[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].datums[i]
mdb.models[name].rootAssembly.connectorOrientations[i].localCsys1
mdb.models[name].rootAssembly.connectorOrientations[i].localCsys2
mdb.models[name].rootAssembly.datums[i]
mdb.models[name].rootAssembly.instances[name].datums[i]
import odbAccess
session.odbs[name].rootAssembly.connectorOrientations[i].localCsys1
session.odbs[name].rootAssembly.connectorOrientations[i].localCsys2
globalToLocal(...)
This method transforms speciﬁed coordinates in the global coordinate system into this local coordinate system.
Required arguments
A tuple of three Floats representing the coordinates in the global coordinate system.
coordinates
Optional arguments
None.
Return value
A tuple of three Floats representing the coordinates in this local coordinate system.
Exceptions
None.
localToGlobal(...)
This method transforms speciﬁed coordinates in this local coordinate system into the global coordinate system.
Required arguments
A tuple of three Floats representing the coordinates in this local coordinate system.
coordinates
Optional arguments
None.
Abaqus Scripting Reference Guide
516
DatumCsys object

Return value
A tuple of three Floats representing the coordinates in the global coordinate system.
Exceptions
None.
Members
The DatumCsys object has the following members:
A SymbolicConstant specifying the type of the coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
A DatumPoint object specifying the origin of the coordinate system.
origin
A DatumAxis object specifying the 1-direction of the coordinate system.
axis1
A DatumAxis object specifying the 2-direction of the coordinate system.
axis2
A DatumAxis object specifying the 3-direction of the coordinate system.
axis3
517
Abaqus Scripting Reference Guide
DatumCsys object

DatumPlane object
The DatumPlane object has no direct constructor; it is created when a Feature object is created. For example, the
DatumPlaneByPrincipalPlane method creates a Feature object that creates a DatumPlane object.
The DatumPlane object is derived from the Datum object.
Access
import part
mdb.models[name].parts[name].datums[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].datums[i]
mdb.models[name].rootAssembly.datums[i]
mdb.models[name].rootAssembly.instances[name].datums[i]
Members
The DatumPlane object has the following members:
A tuple of Floats specifying the X-, Y-, and Z-coordinates of a point located on the datum.
pointOn
A tuple of Floats specifying a sequence of three Floats specifying the normal.
normal
Abaqus Scripting Reference Guide
518
DatumPlane object

DatumPoint object
The DatumPoint object has no direct constructor; it is created when a Feature object is created. For example, the
DatumPointByCoordinate method creates a Feature object that creates a DatumPoint object.
The DatumPoint object is derived from the Datum object.
Access
import part
mdb.models[name].parts[name].datums[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].datums[i]
mdb.models[name].rootAssembly.datums[i]
mdb.models[name].rootAssembly.instances[name].datums[i]
Members
The DatumPoint object has the following member:
A tuple of Floats specifying the X-, Y-, and Z-coordinates of a point located on the datum.
pointOn
519
DatumPoint object

Display Group commands
Display group commands are used to select a subset of the entities displayed in the viewport.
In this section:
•
DisplayGroup object
•
DisplayGroupInstance object
•
DisplayGroupInstanceRepository object
•
Leaf object
•
LeafFromConstraintNames object
•
LeafFromDatums object
•
LeafFromDisplayGroup object
•
LeafFromElementLabels object
•
LeafFromElementSets object
•
LeafFromElementVarRange object
•
LeafFromGeometry object
•
LeafFromInstance object
•
LeafFromInstanceElementLabels object
•
LeafFromInstanceNodeLabels object
•
LeafFromMeshElementLabels object
•
LeafFromMeshNodeLabels object
•
LeafFromMeshSurfaceSets object
•
LeafFromModelElemLabels object
•
LeafFromModelNodeLabels object
•
LeafFromNodeLabels object
•
LeafFromNodeSets object
•
LeafFromNodeVarRange object
•
LeafFromOdbElementLayups object
•
LeafFromOdbElementMaterials object
•
LeafFromOdbElementPick object
•
LeafFromOdbElementPlies object
•
LeafFromOdbElementSections object
•
LeafFromOdbElementTypes object
•
LeafFromOdbNodePick object
•
LeafFromOdbEdgePick object
•
LeafFromPartElementLabels object
•
LeafFromPartInstance object
•
LeafFromPartNodeLabels object
•
LeafFromReferencePoint object
•
LeafFromSets object
•
LeafFromSurfaceSets object
•
LeafFromSurfaceVarRange object
Abaqus Scripting Reference Guide
520

DisplayGroup object
DisplayGroup objects are used to select a subset of the entities displayed in the viewport.
Access
        session.displayGroups[name]
        import assembly
        session.viewports[name].assemblyDisplay.displayGroup
        session.viewports[name].layers[name].assemblyDisplay.displayGroup
        import visualization
        session.viewports[name].layers[name].odbDisplay.displayGroup
        import part
        session.viewports[name].layers[name].partDisplay.displayGroup
        session.viewports[name].odbDisplay.displayGroup
        session.viewports[name].partDisplay.displayGroup
DisplayGroup(...)
This method creates a DisplayGroup object.
Path
session.DisplayGroup
Required arguments
A String specifying the repository key.
name
A Leaf object specifying the items in the display group.
leaf
Optional arguments
None.
Return value
A DisplayGroup object.
Exceptions
InvalidNameError.
add(...)
This method adds the speciﬁed items to the display group.
Required arguments
A Leaf object specifying the items to add to the display group.
leaf
521
DisplayGroup object

Optional arguments
None.
Return value
None.
Exceptions
None.
either(...)
This method redeﬁnes the display group to be only those items that are not shared by the leaf argument and by the
display group.
Required arguments
A Leaf object specifying the items to be excluded from the display group.
leaf
Optional arguments
None.
Return value
None.
Exceptions
None.
intersect(...)
This method redeﬁnes the display group to be only those items that are shared by the leaf argument and the display
group.
Required arguments
A Leaf object specifying the items to be included in the display group.
leaf
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
522
DisplayGroup object

redoLast()
This method redoes the last undone operation on the display group.
Arguments
None.
Return value
None.
Exceptions
None.
remove(...)
This method removes the speciﬁed items from the display group.
Required arguments
A Leaf object specifying the items to remove from the display group.
leaf
Optional arguments
None.
Return value
None.
Exceptions
None.
replace(...)
This method replaces the contents of the display group with the speciﬁed items.
Required arguments
A Leaf object specifying the items with which to replace the current display group contents.
leaf
Optional arguments
None.
Return value
None.
523
Abaqus Scripting Reference Guide
DisplayGroup object

Exceptions
None.
undoLast()
This method undoes the last operation performed on the display group.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The DisplayGroup object has the following members:
A Boolean specifying whether Undo is possible or not.
canUndo
A Boolean specifying whether Redo is possible or not.
canRedo
A String specifying the repository key.
name
A SymbolicConstant specifying the module in which the display group has been created.
The possible values are PART, ASSEMBLY, PART_ASSEMBLY, ODB, and ALL.
module
A String specifying the name of the model to which the display group belongs when the
module is part- or assembly-based.
modelName
A String specifying the name of the part to which the display group belongs when the
module is part-based.
partName
Abaqus Scripting Reference Guide
524
DisplayGroup object

DisplayGroupInstance object
A DisplayGroupInstance object stores the IDs of the entities displayed in a viewport. The DisplayGroupInstance object
has no constructor. When you set a display group to be plotted in a viewport, Abaqus/CAE creates a
DisplayGroupInstance object for each display group and places it in the DisplayGroupInstanceRepository object.
Access
        import assembly
        session.viewports[name].assemblyDisplay.displayGroupInstances[name]
        session.viewports[name].layers[name].assemblyDisplay\
        .displayGroupInstances[name]
        import visualization
        session.viewports[name].layers[name].odbDisplay\
        .displayGroupInstances[name]
        import part
        session.viewports[name].layers[name].partDisplay\
        .displayGroupInstances[name]
        session.viewports[name].odbDisplay.displayGroupInstances[name]
        session.viewports[name].partDisplay.displayGroupInstances[name]
nodes()
This method is used to obtain the list of nodes present in the DisplayGroupInstance object. It returns a Dictionary
object keyed by part instance names, the value of which is a list of user node labels belonging to the part instance and
contained in the DisplayGroupInstance object. This method is available only for DisplayGroupInstance objects that
are members of the DisplayGroupInstance repository member of OdbDisplay object.
Arguments
None.
Return value
A Dictionary object.
Exceptions
None.
elements()
This method returns the list of elements present in the DisplayGroupInstance object. The elements method returns
a Dictionary object that uses part instance names for the keys. The value of the items in the Dictionary object is a List
of user element labels that belong to the part instance and are contained in the DisplayGroupInstance object. This
method is available only for DisplayGroupInstance objects that are members of the DisplayGroupInstance repository
member of the OdbDisplay object.
Arguments
None.
525
DisplayGroupInstance object

Return value
A Dictionary object.
Exceptions
None.
setValues(...)
This method modiﬁes the DisplayGroupInstance object. The setValues method is available only for
DisplayGroupInstance objects that are members of the DisplayGroupInstance repository member of the OdbDisplay
object.
Required arguments
None.
Optional arguments
A Boolean specifying whether the display options stored on the DisplayGroupInstance object
should be synchronized with changes to the viewport display options. This member is available
lockOptions
only for DisplayGroupInstance objects that are members of the DisplayGroupInstance repository
member of the OdbDisplay object. The default value is OFF.
Return value
None.
Exceptions
None.
Members
The DisplayGroupInstance object can have the following members:
A String specifying the repository key.
name
A Boolean specifying whether the display options stored on the DisplayGroupInstance object
should be synchronized with changes to the viewport display options. This member is available
lockOptions
only for DisplayGroupInstance objects that are members of the DisplayGroupInstance
repository member of the OdbDisplay object. The default value is OFF.
An OdbDisplayOptions object specifying this member is available only for
DisplayGroupInstance objects that are members of the DisplayGroupInstance repository
member of the OdbDisplay object.
odbDisplayOptions
Abaqus Scripting Reference Guide
526
DisplayGroupInstance object

DisplayGroupInstanceRepository object
The DisplayGroupInstanceRepository object stores DisplayGroupInstance objects. In addition to all the standard
Python repository methods, the DisplayGroupInstance repository deﬁnes additional methods as described below.
Access
        import visualization
        session.viewports[name].layers[name].odbDisplay.displayGroupInstances
        session.viewports[name].odbDisplay.displayGroupInstances
syncOptions(...)
This method synchronizes the display options stored on the OdbDisplay object with the display options stored on the
DisplayGroupInstance object.
Required arguments
A String specifying the repository key.
name
Optional arguments
A Boolean specifying whether to synchronize the display options on all the
DisplayGroupInstance objects stored in the DisplayGroupInstanceRepository for which
lockOptions is OFF. The default value of updateInstances is ON.
updateInstances
Return value
None.
Exceptions
None.
Members
The DisplayGroupInstanceRepository object has no members.
527
DisplayGroupInstanceRepository object

Leaf object
Leaf objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which
are then used as arguments to DisplayGroup commands.
Leaf objects have similarities to Set objects; however, Leaf objects are evaluated when the DisplayGroup expression
is evaluated, and they can have SymbolicConstant values (which are also evaluated when the DisplayGroup expression
is evaluated).
Access
        import displayGroupMdbToolset
        import displayGroupOdbToolset
Leaf(...)
This method creates a Leaf object.
Path
Leaf
Required arguments
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Optional arguments
None.
Return value
A Leaf object.
Exceptions
None.
Members
The Leaf object has members with the same names and descriptions as the arguments to the Leaf  method.
Abaqus Scripting Reference Guide
528
Leaf object

LeafFromConstraintNames object
The LeafFromConstraintNames object can be used whenever a Leaf object is expected as an argument.
A Leaf object is used used to specify the items in a display group. Leaf objects are constructed as temporary objects
that are used as arguments to DisplayGroup (DisplayGroup object) commands.
The LeafFromConstraintNames object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromConstraintNames(...)
This method creates a Leaf object from a sequence of constraint objects. Leaf objects specify the items in a display
group.
Path
LeafFromConstraintNames
Required arguments
A sequence of tuples of name objects.
name
A SymbolicConstant specifying the Leaf type. Possible values are TIE,
SHELL_TO_SOLID_COUPLING, DISTRIBUTING_COUPLING, KINEMATIC_COUPLING,
RIGID_BODY, and MPC.
type
Optional arguments
None.
Return value
A LeafFromConstraintNames object.
Exceptions
None.
Members
The LeafFromConstraintNames object has members with the same names and descriptions as the arguments to the
LeafFromConstraintNames method.
In addition, the LeafFromConstraintNames object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are TIE,
SHELL_TO_SOLID_COUPLING, DISTRIBUTING_COUPLING, KINEMATIC_COUPLING,
RIGID_BODY, and MPC.
leafType
529
LeafFromConstraintNames object

LeafFromDatums object
The LeafFromDatums object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to
specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments
to DisplayGroup commands.
The LeafFromDatums object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromDatums(...)
This method creates a Leaf object from a sequence of datum objects. Leaf objects specify the items in a display group.
Path
LeafFromDatums
Required arguments
A sequence of datum objects.
datumSeq
Optional arguments
None.
Return value
A LeafFromDatums object.
Exceptions
None.
Members
The LeafFromDatums object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
530
LeafFromDatums object

LeafFromDisplayGroup object
The LeafFromDisplayGroup object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromDisplayGroup object is derived from the Leaf object.
Access
        import displayGroupMdbToolset
        import displayGroupOdbToolset
LeafFromDisplayGroup(...)
This method creates a Leaf object from a sequence of Display Group objects.
Path
LeafFromDisplayGroup
Required arguments
A DisplayGroupArray object.
displayGroup
Optional arguments
None.
Return value
A LeafFromDisplayGroup object.
Exceptions
None.
Members
The LeafFromDisplayGroup object has members with the same names and descriptions as the arguments to the
LeafFromDisplayGroup  method.
In addition, the LeafFromDisplayGroup object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
531
LeafFromDisplayGroup object

LeafFromElementLabels object
The LeafFromElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromElementLabels object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromElementLabels(...)
This method creates a Leaf object from a sequence of element labels that belong to a single part instance.
Path
LeafFromElementLabels
Required arguments
A String specifying the name of the part instance to which elementLabels refers.
partInstanceName
A sequence of Strings specifying expressions that denote element labels. The expression
can be any of the following:
elementLabels
•
An Int specifying a single element label; for example, 1.
•
A String specifying a single element label; for example, '7'.
•
A String specifying a sequence of element labels; for example, '3:5' and '3:15:3'.
Optional arguments
None.
Return value
A LeafFromElementLabels object.
Exceptions
None.
Members
The LeafFromElementLabels object has members with the same names and descriptions as the arguments to the
LeafFromElementLabels  method.
In addition, the LeafFromElementLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
532
LeafFromElementLabels object

LeafFromElementSets object
The LeafFromElementSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromElementSets object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromElementSets(...)
This method creates a Leaf object from a sequence of element sets.
Path
LeafFromElementSets
Required arguments
A sequence of Strings specifying element sets or a String specifying a single element
set.
elementSets
Optional arguments
None.
Return value
A LeafFromElementSets object.
Exceptions
None.
Members
The LeafFromElementSets object has members with the same names and descriptions as the arguments to the
LeafFromElementSets  method.
In addition, the LeafFromElementSets object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
533
LeafFromElementSets object

LeafFromElementVarRange object
The LeafFromElementVarRange object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromElementVarRange object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromElementVarRange(...)
This method creates a Leaf object from elements with values lying in a variable range.
Path
LeafFromElementVarRange
Required arguments
None.
Optional arguments
A Float specifying the minimum value for the variable range. The default value is
−3.40282346639E38.
minimumRange
A Float specifying the maximum value for the variable range. The default value is
3.40282346639e+038.
maximumRange
A Boolean specifying the method used to evaluate the range. If insideRange=ON, the
range falls inside the speciﬁed minimum and maximum values. The default value is
ON.
insideRange
Return value
A LeafFromElementVarRange object.
Exceptions
None.
Members
The LeafFromElementVarRange object has members with the same names and descriptions as the arguments to the
LeafFromElementVarRange  method.
In addition, the LeafFromElementVarRange object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
534
LeafFromElementVarRange object

LeafFromGeometry object
The LeafFromGeometry object can be used whenever a Leaf object is expected as an argument. Leaf objects are used
to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromGeometry object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromGeometry(...)
This method creates a Leaf object from a sequence of edge, face and cell geometry objects. Any combination of edge,
face or cell arguments is allowed however the arguments must specify at least one object--it is not permissible to create
an empty leaf.
Path
LeafFromGeometry
Required arguments
None.
Optional arguments
A sequence of geometry edges.
edgeSeq
A sequence of geometry faces.
faceSeq
A sequence of geometry cells.
cellSeq
Return value
A LeafFromGeometry object.
Exceptions
Cannot deﬁne empty leaf.
If at least one of the sequences is not passed to this method:
Members
The LeafFromGeometry object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
535
LeafFromGeometry object

LeafFromInstance object
The LeafFromInstance object can be used whenever a Leaf object is expected as an argument. Leaf objects are used
to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromInstance object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromInstance(...)
This method creates a Leaf object from a sequence of part instance objects.
Path
LeafFromInstance
Required arguments
A PartInstance object or a Sequence of PartInstance objects.
instances
Optional arguments
None.
Return value
A LeafFromInstance object.
Exceptions
Cannot deﬁne empty leaf.
If an invalid argument is passed to this method:
Members
The LeafFromInstance object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
536
LeafFromInstance object

LeafFromInstanceElementLabels object
The LeafFromInstanceElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf
objects are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are
then used as arguments to DisplayGroup commands.
The LeafFromInstanceElementLabels object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromInstanceElementLabels(...)
This method creates a Leaf object from a sequence of Strings specifying the element labels. Leaf objects specify the
items in a display group.
Path
LeafFromInstanceElementLabels
Required arguments
A sequence of sequences specifying element labels. Each inner sequence consists of a
PartInstance object followed by a sequence of Strings specifying element labels.
elementLabels
Optional arguments
None.
Return value
A LeafFromInstanceElementLabels object.
Exceptions
None.
Members
The LeafFromInstanceElementLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
537
LeafFromInstanceElementLabels object

LeafFromInstanceNodeLabels object
The LeafFromInstanceNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromInstanceNodeLabels object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromInstanceNodeLabels(...)
This method creates a Leaf object from a sequence of Strings specifying the node labels. Leaf objects specify the items
in a display group.
Path
LeafFromInstanceNodeLabels
Required arguments
A sequence of sequences specifying node labels. Each inner sequence consists of a
PartInstance object followed by a sequence of Strings specifying node labels.
nodeLabels
Optional arguments
None.
Return value
A LeafFromInstanceNodeLabels object.
Exceptions
None.
Members
The LeafFromInstanceNodeLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
538
LeafFromInstanceNodeLabels object

LeafFromMeshElementLabels object
The LeafFromMeshElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromMeshElementLabels object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromMeshElementLabels(...)
This method creates a Leaf object from a sequence of mesh element objects. Leaf objects specify the items in a display
group.
Path
LeafFromMeshElementLabels
Required arguments
A sequence of MeshElement objects specifying elements.
elementSeq
Optional arguments
None.
Return value
A LeafFromMeshElementLabels object.
Exceptions
None.
Members
The LeafFromMeshElementLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
539
LeafFromMeshElementLabels object

LeafFromMeshNodeLabels object
The LeafFromMeshNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromMeshNodeLabels object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromMeshNodeLabels(...)
This method creates a Leaf object from a sequence of mesh node objects. Leaf objects specify the items in a display
group.
Path
LeafFromMeshNodeLabels
Required arguments
A sequence of MeshNode objects specifying nodes.
nodeSeq
Optional arguments
None.
Return value
A LeafFromMeshNodeLabels object.
Exceptions
None.
Members
The LeafFromMeshNodeLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
540
LeafFromMeshNodeLabels object

LeafFromMeshSurfaceSets object
The LeafFromMeshSurfaceSets object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromMeshSurfaceSets object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromMeshSurfaceSets(...)
This method creates a Leaf object from a sequence of surface sets.
Path
LeafFromMeshSurfaceSets
Required arguments
A sequence of Surface objects.
surfaceSets
Optional arguments
None.
Return value
A LeafFromMeshSurfaceSets object.
Exceptions
None.
Members
The LeafFromMeshSurfaceSets object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
541
LeafFromMeshSurfaceSets object

LeafFromModelElemLabels object
The LeafFromModelElemLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromModelElemLabels object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromModelElemLabels(...)
This method creates a Leaf object from a sequence of element labels spanning several part instances.
Path
LeafFromModelElemLabels
Required arguments
A sequence of Strings specifying expressions that denote element labels per part instance in the model.
Each part instance element expression is a sequence of a String specifying the part instance name
elementLabels
and a sequence of element expressions; for example,
(('partInstance1',(1,'7','3:15;3'),), ('partInstance2','8'),)). The
element expressions can be any of the following:
•
An Int specifying a single element label; for example, 1.
•
A String specifying a single element label; for example, '7'.
•
A String specifying a sequence of element labels; for example, '3:5' and '3:15:3'.
Optional arguments
None.
Return value
A LeafFromModelElemLabels object.
Exceptions
None.
Members
The LeafFromModelElemLabels object has members with the same names and descriptions as the arguments to the
LeafFromModelElemLabels  method.
In addition, the LeafFromModelElemLabels object has the following member:
Abaqus Scripting Reference Guide
542
LeafFromModelElemLabels object

A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
543
Abaqus Scripting Reference Guide
LeafFromModelElemLabels object

LeafFromModelNodeLabels object
The LeafFromModelNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromModelNodeLabels object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromModelNodeLabels(...)
This method creates a Leaf object from a sequence of node labels spanning several part instances.
Path
LeafFromModelNodeLabels
Required arguments
A sequence of Strings specifying expressions that denote node labels per part instance in the model.
Each part instance node expression is a sequence of a String specifying the part instance name and a
nodeLabels
sequence of node expressions; for example, (('partInstance1',(1,'7','3:15;3'),),
('partInstance2','8'),)). The node expressions can be any of the following:
•
An Int specifying a single node label; for example, 1.
•
A String specifying a single node label; for example, '7'.
•
A String specifying a sequence of node labels; for example, '3:5' and '3:15:3'.
Optional arguments
None.
Return value
A LeafFromModelNodeLabels object.
Exceptions
None.
Members
The LeafFromModelNodeLabels object has members with the same names and descriptions as the arguments to the
LeafFromModelNodeLabels  method.
In addition, the LeafFromModelNodeLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
544
LeafFromModelNodeLabels object

LeafFromNodeLabels object
The LeafFromNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromNodeLabels object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromNodeLabels(...)
This method creates a Leaf object from a sequence of node labels that belong to a single part instance.
Path
LeafFromNodeLabels
Required arguments
A String specifying the name of the part instance to which nodeLabels refers.
partInstanceName
A sequence of Strings specifying expressions that denote node labels. The expression can
be any of the following:
nodeLabels
•
An Int specifying a single node label; for example, 1.
•
A String specifying a single node label; for example, '7'.
•
A String specifying a sequence of node labels; for example, '3:5' and '3:15:3'.
Optional arguments
None.
Return value
A LeafFromNodeLabels object.
Exceptions
None.
Members
The LeafFromNodeLabels object has members with the same names and descriptions as the arguments to the
LeafFromNodeLabels  method.
In addition, the LeafFromNodeLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
545
LeafFromNodeLabels object

LeafFromNodeSets object
The LeafFromNodeSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used
to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromNodeSets object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromNodeSets(...)
This method creates a Leaf object from a sequence of node sets.
Path
LeafFromNodeSets
Required arguments
A sequence of Strings specifying node sets or a String specifying a single node set.
nodeSets
Optional arguments
None.
Return value
A LeafFromNodeSets object.
Exceptions
None.
Members
The LeafFromNodeSets object has members with the same names and descriptions as the arguments to the
LeafFromNodeSets  method.
In addition, the LeafFromNodeSets object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
546
LeafFromNodeSets object

LeafFromNodeVarRange object
The LeafFromNodeVarRange object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromNodeVarRange object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromNodeVarRange(...)
This method creates a Leaf object from nodes with values lying in a variable range.
Path
LeafFromNodeVarRange
Required arguments
None.
Optional arguments
A Float specifying the minimum value for the variable range. The default value is
−3.40282346639E38.
minimumRange
A Float specifying the maximum value for the variable range. The default value is
3.40282346639e+038.
maximumRange
A Boolean specifying the method used to evaluate the range. If insideRange=ON, the
range falls inside the speciﬁed minimum and maximum values. The default value is
ON.
insideRange
Return value
A LeafFromNodeVarRange object.
Exceptions
None.
Members
The LeafFromNodeVarRange object has members with the same names and descriptions as the arguments to the
LeafFromNodeVarRange  method.
In addition, the LeafFromNodeVarRange object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
547
LeafFromNodeVarRange object

LeafFromOdbElementLayups object
The LeafFromOdbElementLayups object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromOdbElementLayups object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbElementLayups(...)
This method creates a Leaf object from a sequence of Strings specifying layup names. Leaf objects specify the items
in a display group.
Path
LeafFromOdbElementLayups
Required arguments
A sequence of Strings specifying element layups.
elementLayups
Optional arguments
None.
Return value
A LeafFromOdbElementLayups object.
Exceptions
None.
Members
The LeafFromOdbElementLayups object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
548
LeafFromOdbElementLayups object

LeafFromOdbElementMaterials object
The LeafFromOdbElementMaterials object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromOdbElementMaterials object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbElementMaterials(...)
This method creates a Leaf object from a sequence of Strings specifying material names. Leaf objects specify the items
in a display group.
Path
LeafFromOdbElementMaterials
Required arguments
A sequence of Strings specifying element materials.
elementMaterials
Optional arguments
None.
Return value
A LeafFromOdbElementMaterials object.
Exceptions
None.
Members
The LeafFromOdbElementMaterials object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
549
LeafFromOdbElementMaterials object

LeafFromOdbElementPick object
The LeafFromOdbElementPick object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromOdbElementPick object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbElementPick(...)
This method creates a Leaf object from a tuple containing machine readable, compact strings deﬁning the elements
picked for each part instance. Leaf objects specify the items in a display group.
Path
LeafFromOdbElementPick
Required arguments
A sequence of tuples of the form [part name, entity count, machine readable pick
strings].
elementPick
Optional arguments
None.
Return value
A LeafFromOdbElementPick object.
Exceptions
None.
Members
The LeafFromOdbElementPick object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
550
LeafFromOdbElementPick object

LeafFromOdbElementPlies object
The LeafFromOdbElementPlies object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromOdbElementPlies object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbElementPlies(...)
This method creates a Leaf object from a sequence of Strings specifying ply names. Leaf objects specify the items in
a display group.
Path
LeafFromOdbElementPlies
Required arguments
A sequence of Strings specifying element plies.
elementPlies
Optional arguments
None.
Return value
A LeafFromOdbElementPlies object.
Exceptions
None.
Members
The LeafFromOdbElementPlies object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
551
LeafFromOdbElementPlies object

LeafFromOdbElementSections object
The LeafFromOdbElementSections object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromOdbElementSections object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbElementSections(...)
This method creates a Leaf object from a sequence of Strings specifying section names. Leaf objects specify the items
in a display group.
Path
LeafFromOdbElementSections
Required arguments
A sequence of Strings specifying element Sections.
elementSections
Optional arguments
None.
Return value
A LeafFromOdbElementSections object.
Exceptions
None.
Members
The LeafFromOdbElementSections object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
552
LeafFromOdbElementSections object

LeafFromOdbElementTypes object
The LeafFromOdbElementTypes object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromOdbElementTypes object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbElementTypes(...)
This method creates a Leaf object from a sequence of Strings specifying element names. Leaf objects specify the items
in a display group.
Path
LeafFromOdbElementTypes
Required arguments
A sequence of Strings specifying element Types.
elementTypes
Optional arguments
None.
Return value
A LeafFromOdbElementTypes object.
Exceptions
None.
Members
The LeafFromOdbElementTypes object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
553
LeafFromOdbElementTypes object

LeafFromOdbNodePick object
The LeafFromOdbNodePick object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromOdbNodePick object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbNodePick(...)
This method creates a Leaf object from a tuple containing machine readable, compact strings deﬁning the nodes picked
for each part instance. Leaf objects specify the items in a display group.
Path
LeafFromOdbNodePick
Required arguments
A sequence of tuples of the form [part name, entity count, machine readable pick strings].
nodePick
Optional arguments
None.
Return value
A LeafFromOdbNodePick object.
Exceptions
None.
Members
The LeafFromOdbNodePick object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
554
LeafFromOdbNodePick object

LeafFromOdbEdgePick object
The LeafFromOdbEdgePick object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromOdbEdgePick object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromOdbEdgePick(...)
This method creates a Leaf object from a tuple containing machine readable, compact strings deﬁning the edges picked
for each part instance. Leaf objects specify the items in a display group.
Path
LeafFromOdbEdgePick
Required arguments
A sequence of tuples of the form [part name, entity count, machine readable pick strings].
edgePick
Optional arguments
None.
Return value
A LeafFromOdbEdgePick object.
Exceptions
None.
Members
The LeafFromOdbEdgePick object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
555
LeafFromOdbEdgePick object

LeafFromPartElementLabels object
The LeafFromPartElementLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromPartElementLabels object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromPartElementLabels(...)
This method creates a Leaf object from a sequence of Strings specifying element labels. Leaf objects specify the items
in a display group.
Path
LeafFromPartElementLabels
Required arguments
A Part object.
part
A sequence of Strings specifying element labels.
elementLabels
Optional arguments
None.
Return value
A LeafFromPartElementLabels object.
Exceptions
None.
Members
The LeafFromPartElementLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
556
LeafFromPartElementLabels object

LeafFromPartInstance object
The LeafFromPartInstance object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromPartInstance object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromPartInstance(...)
This method creates a Leaf object from a list of part instance names.
Path
LeafFromPartInstance
Required arguments
A sequence of Strings specifying the names of the part instances.
partInstanceName
Optional arguments
None.
Return value
A LeafFromPartInstance object.
Exceptions
None.
Members
The LeafFromPartInstance object has members with the same names and descriptions as the arguments to the
LeafFromPartInstance  method.
In addition, the LeafFromPartInstance object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
557
LeafFromPartInstance object

LeafFromPartNodeLabels object
The LeafFromPartNodeLabels object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromPartNodeLabels object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromPartNodeLabels(...)
This method creates a Leaf object from a sequence of Strings specifying node labels. Leaf objects specify the items in
a display group.
Path
LeafFromPartNodeLabels
Required arguments
A Part object.
part
A sequence of Strings specifying node labels.
nodeLabels
Optional arguments
None.
Return value
A LeafFromPartNodeLabels object.
Exceptions
None.
Members
The LeafFromPartNodeLabels object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
558
LeafFromPartNodeLabels object

LeafFromReferencePoint object
The LeafFromReferencePoint object can be used whenever a Leaf object is expected as an argument. Leaf objects are
used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromReferencePoint object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromReferencePoint(...)
This method creates a Leaf object from a sequence of ReferencePoint objects.
Path
LeafFromReferencePoint
Required arguments
A sequence of Reference Point objects.
refPtSeq
Optional arguments
None.
Return value
A LeafFromReferencePoint object.
Exceptions
None.
Members
The LeafFromReferencePoint object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
559
LeafFromReferencePoint object

LeafFromSets object
The LeafFromSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used to
specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as arguments
to DisplayGroup commands.
The LeafFromSets object is derived from the Leaf object.
Access
import displayGroupMdbToolset
LeafFromSets(...)
This method creates a Leaf object from a sequence of Set objects.
Path
LeafFromSets
Required arguments
A sequence of Set objects.
sets
Optional arguments
None.
Return value
A LeafFromSets object.
Exceptions
None.
Members
The LeafFromSets object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
560
LeafFromSets object

LeafFromSurfaceSets object
The LeafFromSurfaceSets object can be used whenever a Leaf object is expected as an argument. Leaf objects are used
to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used as
arguments to DisplayGroup commands.
The LeafFromSurfaceSets object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromSurfaceSets(...)
This method creates a Leaf object from a sequence of surface sets.
Path
LeafFromSurfaceSets
Required arguments
A sequence of Strings specifying surface sets, or a String specifying a single surface
set.
surfaceSets
Optional arguments
None.
Return value
A LeafFromSurfaceSets object.
Exceptions
None.
Members
The LeafFromSurfaceSets object has members with the same names and descriptions as the arguments to the
LeafFromSurfaceSets  method.
In addition, the LeafFromSurfaceSets object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
561
LeafFromSurfaceSets object

LeafFromSurfaceVarRange object
The LeafFromSurfaceVarRange object can be used whenever a Leaf object is expected as an argument. Leaf objects
are used to specify the items in a display group. Leaf objects are constructed as temporary objects, which are then used
as arguments to DisplayGroup commands.
The LeafFromSurfaceVarRange object is derived from the Leaf object.
Access
import displayGroupOdbToolset
LeafFromSurfaceVarRange(...)
This method creates a Leaf object from surfaces with values lying in a variable range.
Path
LeafFromSurfaceVarRange
Required arguments
None.
Optional arguments
A Float specifying the minimum value for the variable range. The default value is
−3.40282346639E38.
minimumRange
A Float specifying the maximum value for the variable range. The default value is
3.40282346639e+038.
maximumRange
A Boolean specifying the method used to evaluate the range. If insideRange=ON, the
range falls inside the speciﬁed minimum and maximum values. The default value is
ON.
insideRange
Return value
A LeafFromSurfaceVarRange object.
Exceptions
None.
Members
The LeafFromSurfaceVarRange object has members with the same names and descriptions as the arguments to the
LeafFromSurfaceVarRange  method.
In addition, the LeafFromSurfaceVarRange object has the following member:
A SymbolicConstant specifying the leaf type. Possible values are EMPTY_LEAF,
DEFAULT_MODEL, ALL_ELEMENTS, ALL_NODES, and ALL_SURFACES.
leafType
Abaqus Scripting Reference Guide
562
LeafFromSurfaceVarRange object

Display Options commands
Display options commands are used to store settings that specify how assemblies and parts are to be displayed
and how annotations are to be rendered in a particular viewport.
In this section:
•
AssemblyDisplayOptions object
•
BCDisplayOptions object
•
ConstraintDisplayOptions object
•
EngineeringFeatureDisplayOptions object
•
PredefinedFieldDisplayOptions object
•
GeometryDisplayOptions object
•
GeometricRestrictionDisplayOptions object
•
GraphicsInfo object
•
GraphicsOptions object
•
InteractionDisplayOptions object
•
Light object
•
LightOptions object
•
LoadDisplayOptions object
•
MeshDisplayOptions object
•
OptimizationTaskDisplayOptions object
•
PartDisplayOptions object
•
StopConditionDisplayOptions object
•
SymbolDisplayOptions object
•
ViewportAnnotationOptions object
563

AssemblyDisplayOptions object
The AssemblyDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular
viewport. The AssemblyDisplayOptions object has no constructor. When you create a new viewport, the settings are
copied from the current viewport.
Access
import assembly
session.viewports[name].assemblyDisplay
session.viewports[name].layers[name].assemblyDisplay
setValues(...)
This method modiﬁes the AssemblyDisplayOptions object.
Required arguments
None.
Optional arguments
A sequence of Strings specifying the names of the part instances that are visible in the
viewport. The default value is an empty sequence.
visibleInstances
A String specifying the step for which objects are to be displayed. Possible values are
any valid step name. The default value is "Initial".
step
A SymbolicConstant specifying how the image in the viewport is rendered. Possible
values are WIREFRAME, HIDDEN, SHADED, and FILLED. The default value is
WIREFRAME.
renderStyle
A Boolean specifying whether the mesh is shown. The default value is OFF.
mesh
A Boolean specifying whether loads are shown. The default value is OFF.
loads
A Boolean specifying whether boundary conditions are shown. The default value is
OFF.
bcs
A Boolean specifying whether interactions are shown. The default value is OFF.
interactions
A Boolean specifying whether constraints are shown. The default value is OFF.
constraints
A Boolean specifying whether connectors are shown. The default value is OFF.
connectors
A Boolean specifying whether the connector end points are shown. This member is
applicable only if connectors=ON. The default value is ON.
cnxEndPoints
A Boolean specifying whether the connector local coordinate system axes are shown.
This member is applicable only if connectors=ON. The default value is ON.
cnxLocalAxes
Abaqus Scripting Reference Guide
564
AssemblyDisplayOptions object

A Boolean specifying whether the connector section type labels are shown. This member
is applicable only if connectors=ON. The default value is ON.
cnxTypeLabels
A Boolean specifying whether the tag information is displayed along with the connector
section type labels. This member is applicable only if connectors=ON and if
cnxTypeLabels=ON. The default value is OFF.
cnxTagDisplay
A Boolean specifying whether ﬁelds and initial conditions are shown. The default value
is OFF.
predeﬁnedFields
A sequence of DisplayGroup objects specifying the DisplayGroups visible in the
viewport. Currently the sequence can contain a maximum of one DisplayGroup object.
The default value is an empty sequence.
visibleDisplayGroups
A Boolean specifying whether to display engineering features. The default value is
OFF.
engineeringFeatures
A Boolean specifying whether to render the beam proﬁles. The default value is OFF.
renderBeamProﬁles
A Float specifying the beam proﬁle scale factor. The beamScaleFactor must be greater
than zero. The default value is 1.0.
beamScaleFactor
A Boolean specifying whether optimization tasks are shown. The default value is OFF.
optimizationTasks
A Boolean specifying whether geometric restrictions are shown. The default value is
OFF.
geometricRestrictions
A Boolean specifying whether stop conditions are shown. The default value is OFF.
stopConditions
Return value
None.
Exceptions
RangeError.
Members
The AssemblyDisplayOptions object can have the following members:
A Boolean specifying whether boundary conditions are shown. The default value
is OFF.
bcs
A Boolean specifying whether connectors are shown. The default value is OFF.
connectors
A Boolean specifying whether the connector end points are shown. This member
is applicable only if connectors=ON. The default value is ON.
cnxEndPoints
565
Abaqus Scripting Reference Guide
AssemblyDisplayOptions object

A Boolean specifying whether the connector local coordinate system axes are
shown. This member is applicable only if connectors=ON. The default value is
ON.
cnxLocalAxes
A Boolean specifying whether the connector section type labels are shown. This
member is applicable only if connectors=ON. The default value is ON.
cnxTypeLabels
A Boolean specifying whether the tag information is displayed along with the
connector section type labels. This member is applicable only if connectors=ON
and if cnxTypeLabels=ON. The default value is OFF.
cnxTagDisplay
A Boolean specifying whether constraints are shown. The default value is OFF.
constraints
A Boolean specifying whether to display engineering features. The default value
is OFF.
engineeringFeatures
A Boolean specifying whether geometric restrictions are shown. The default value
is OFF.
geometricRestrictions
A Boolean specifying whether to render the beam proﬁles. The default value is
OFF.
renderBeamProﬁles
A Float specifying the beam proﬁle scale factor. The beamScaleFactor must be
greater than zero. The default value is 1.0.
beamScaleFactor
A Boolean specifying whether ﬁelds and initial conditions are shown. The default
value is OFF.
predeﬁnedFields
A Boolean specifying whether interactions are shown. The default value is OFF.
interactions
A Boolean specifying whether loads are shown. The default value is OFF.
loads
A Boolean specifying whether the mesh is shown. The default value is OFF.
mesh
A Boolean specifying whether optimization tasks are shown. The default value
is OFF.
optimizationTasks
A Boolean specifying whether stop conditions are shown. The default value is
OFF.
stopConditions
A SymbolicConstant specifying how the image in the viewport is rendered.
Possible values are WIREFRAME, HIDDEN, SHADED, and FILLED. The
default value is WIREFRAME.
renderStyle
A BCDisplayOptions object.
bcOptions
A ConstraintDisplayOptions object.
constraintOptions
Abaqus Scripting Reference Guide
566
AssemblyDisplayOptions object

A DisplayGroup object specifying the current display group and referring to an
object in the displayGroups member of Session.
displayGroup
A repository of DisplayGroupInstance objects.
displayGroupInstances
An EngineeringFeatureDisplayOptions object.
engineeringFeatureOptions
A PredeﬁnedFieldDisplayOptions object.
predeﬁnedFieldOptions
A GeometricRestrictionDisplayOptions object.
geometricRestrictionOptions
A GeometryDisplayOptions object.
geometryOptions
An InteractionDisplayOptions object.
interactionOptions
A LoadDisplayOptions object.
loadOptions
A MeshDisplayOptions object.
meshOptions
An OptimizationTaskDisplayOptions object.
optimizationTaskOptions
A StopConditionDisplayOptions object.
stopConditionOptions
A SymbolDisplayOptions object.
symbolOptions
A tuple of Strings specifying the names of the part instances that are visible in
the viewport. The default value is an empty sequence.
visibleInstances
A String specifying the step for which objects are to be displayed. Possible values
are any valid step name. The default value is "Initial".
step
567
Abaqus Scripting Reference Guide
AssemblyDisplayOptions object

BCDisplayOptions object
The BCDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular viewport
when
session.viewports[name].assemblyDisplay.bcs=ON
The BCDisplayOptions object has no constructor. When you create a new viewport, the settings are copied from the
current viewport.
Access
session.viewports[name].assemblyDisplay.bcOptions
session.viewports[name].layers[name].assemblyDisplay.bcOptions
setValues(...)
This method modiﬁes the BCDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether displacement symbols are shown. The default value
is ON.
displacement
A Boolean specifying whether velocity symbols are shown. The default value is ON.
velocity
A Boolean specifying whether acceleration symbols are shown. The default value is
ON.
acceleration
A Boolean specifying whether symmetry symbols are shown. The default value is
ON.
symmetry
A Boolean specifying whether anti- symmetry symbols are shown. The default value
is ON.
antiSymmetry
A Boolean specifying whether temperature symbols are shown. The default value is
ON.
temperature
A Boolean specifying whether pore pressure symbols are shown. The default value
is ON.
porePressure
A Boolean specifying whether ﬂuid cavity pressure symbols are shown. The default
value is ON.
ﬂuidCavityPressure
A Boolean specifying whether acoustic pressure symbols are shown. The default
value is ON.
acousticPressure
Abaqus Scripting Reference Guide
568
BCDisplayOptions object

A Boolean specifying whether electric potential symbols are shown. The default
value is ON.
electricPotential
A Boolean specifying whether concentration mass diffusion symbols are shown. The
default value is ON.
concentration
A Boolean specifying whether encastre symbols are shown. The default value is ON.
encastre
A Boolean specifying whether pinned symbols are shown. The default value is ON.
pinned
Return value
None.
Exceptions
None.
Members
The BCDisplayOptions object has members with the same names and descriptions as the arguments to the setValues
method.
569
Abaqus Scripting Reference Guide
BCDisplayOptions object

ConstraintDisplayOptions object
The ConstraintDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular
viewport when
session.viewports[name].assemblyDisplay.constraints=ON
The ConstraintDisplayOptions object has no constructor. When you create a new viewport, the settings are copied
from the current viewport.
Access
session.viewports[name].assemblyDisplay.constraintOptions
session.viewports[name].layers[name].assemblyDisplay.constraintOptions
setValues(...)
This method modiﬁes the ConstraintDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether constraint equation symbols are shown. The
default value is ON.
constraintEquation
A Boolean specifying whether tie constraint symbols are shown. The default
value is ON.
tieConstraint
A Boolean specifying whether rigid body constraint symbols are shown. The
default value is ON.
rigidBodyConstraint
A Boolean specifying whether display body constraint symbols are shown. The
default value is ON.
displayBodyConstraint
A Boolean specifying whether coupling constraint symbols are shown. The
default value is ON.
couplingConstrain
Return value
None.
Exceptions
None.
Members
The ConstraintDisplayOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
Abaqus Scripting Reference Guide
570
ConstraintDisplayOptions object

EngineeringFeatureDisplayOptions object
The EngineeringFeatureDisplayOptions object stores settings that specify how assemblies are to be displayed in a
particular viewport when
session.viewports[name].assemblyDisplay.engineeringFeatures=ON
The EngineeringFeatureDisplayOptions object has no constructor. When you create a new viewport, the settings are
copied from the current viewport.
Access
session.viewports[name].assemblyDisplay.engineeringFeatureOptions
session.viewports[name].layers[name].assemblyDisplay\
.engineeringFeatureOptions
import part
session.viewports[name].layers[name].partDisplay\
.engineeringFeatureOptions
session.viewports[name].partDisplay.engineeringFeatureOptions
setValues(...)
This method modiﬁes the EngineeringFeatureDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether point mass inertia symbols are shown. The default
value is ON.
pointMassInertia
A Boolean specifying whether nonstructural mass symbols are shown. The default
value is ON.
nonstructuralMass
A Boolean specifying whether heat capacitance symbols are shown. The default
value is ON.
heatCapacitance
A Boolean specifying whether contour integral symbols are shown. The default
value is ON.
contourIntegral
A Boolean specifying whether spring-to-ground symbols are shown. The default
value is ON.
springToGround
A Boolean specifying whether two-point spring symbols are shown. The default
value is ON.
twoPointSpring
Return value
None.
571
EngineeringFeatureDisplayOptions object

Exceptions
RangeError.
Members
The EngineeringFeatureDisplayOptions object has members with the same names and descriptions as the arguments
to the setValues  method.
Abaqus Scripting Reference Guide
572
EngineeringFeatureDisplayOptions object

PredefinedFieldDisplayOptions object
The PredeﬁnedFieldDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular
viewport when
session.viewports[name].assemblyDisplay.predefinedFields=ON
The PredeﬁnedFieldDisplayOptions object has no constructor. When you create a new viewport, the settings are copied
from the current viewport.
Access
session.viewports[name].assemblyDisplay.predefinedFieldOptions
session.viewports[name].layers[name].assemblyDisplay\
.predefinedFieldOptions
setValues(...)
This method modiﬁes the PredeﬁnedFieldDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether temperature ﬁeld symbols are shown. The default
value is ON.
temperatureField
A Boolean specifying whether translational velocity symbols are shown. The default
value is ON.
velocityField
A Boolean specifying whether general ﬁeld symbols are shown. The default value
is ON.
generalField
A Boolean specifying whether stress ﬁeld symbols are shown. The default value is
ON.
stressField
A Boolean specifying whether hardening ﬁeld symbols are shown. The default value
is ON.
hardeningField
Return value
None.
Exceptions
RangeError.
Members
The PredeﬁnedFieldDisplayOptions object has members with the same names and descriptions as the arguments to
the setValues  method.
573
PredefinedFieldDisplayOptions object

GeometryDisplayOptions object
The GeometryDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular
viewport. The GeometryDisplayOptions object has no constructor. When you create a new viewport, the settings are
copied from the current viewport.
Access
session.viewports[name].assemblyDisplay.geometryOptions
session.viewports[name].layers[name].assemblyDisplay.geometryOptions
session.viewports[name].layers[name].partDisplay.geometryOptions
session.viewports[name].partDisplay.geometryOptions
setValues(...)
This method modiﬁes the GeometryDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether geometry edges are displayed in shaded mode.
The default value is ON.
geometryEdgesInShaded
A Boolean specifying whether geometry hidden edges are displayed (dotted) in
hidden line mode. The default value is OFF.
geometryHiddenEdges
A Boolean specifying whether geometry silhouette edges are displayed. The
default value is ON.
geometrySilhouetteEdges
A Boolean specifying whether datum axes are shown. The default value is ON.
datumAxes
A Boolean specifying whether datum coordinate systems are shown. The default
value is ON.
datumCoordSystems
A Boolean specifying whether datum planes are shown. The default value is
ON.
datumPlanes
A Boolean specifying whether referencePoint labels are shown. The default
value is ON.
referencePointLabels
A Boolean specifying whether referencePoint symbols are shown. The default
value is ON.
referencePointSymbols
A Boolean specifying whether geometry that belongs to the reference
representation of the Part or Instance is shown. The default value is OFF.
referenceRepresentation
Abaqus Scripting Reference Guide
574
GeometryDisplayOptions object

A Boolean specifying whether to apply translucency to the geometry that belongs
to the reference representation of the Part or Instance. The default value is ON.
referenceRepTranslucency
Return value
None.
Exceptions
RangeError.
Members
The GeometryDisplayOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
575
Abaqus Scripting Reference Guide
GeometryDisplayOptions object

GeometricRestrictionDisplayOptions object
The GeometricRestrictionDisplayOptions object stores settings that specify how assemblies are to be displayed in a
particular viewport when
session.viewports[name].assemblyDisplay.geometricRestrictions=ON
The GeometricRestrictionDisplayOptions object has no constructor. When you create a new viewport, the settings are
copied from the current viewport.
Access
session.viewports[name].assemblyDisplay.geometricRestrictionOptions
session.viewports[name].layers[name].assemblyDisplay\
.geometricRestrictionOptions
setValues(...)
This method modiﬁes the GeometricRestrictionDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether drill control geometric restriction symbols are shown.
The default value is ON.
drillControl
A Boolean specifying whether ﬁxed region geometric restriction symbols are shown.
The default value is ON.
ﬁxedRegion
A Boolean specifying whether frozen area geometric restriction symbols are shown.
The default value is ON.
frozenArea
A Boolean specifying whether growth geometric restriction symbols are shown.
The default value is ON.
growth
A Boolean specifying whether penetration check geometric restriction symbols are
shown. The default value is ON.
penetrationCheck
A Boolean specifying whether demold control (shape) geometric restriction symbols
are shown. The default value is ON.
shapeDemoldControl
A Boolean specifying whether design direction geometric restriction symbols are
shown. The default value is ON.
designDirection
A Boolean specifying whether member size (shape) geometric restriction symbols
are shown. The default value is ON.
shapeMemberSize
Abaqus Scripting Reference Guide
576
GeometricRestrictionDisplayOptions object

A Boolean specifying whether planar symmetry (shape) geometric restriction
symbols are shown. The default value is ON.
shapePlanarSymmetry
A Boolean specifying whether point symmetry (shape) geometric restriction symbols
are shown. The default value is ON.
shapePointSymmetry
A Boolean specifying whether rotational symmetry (shape) geometric restriction
symbols are shown. The default value is ON.
shapeRotationalSymmetry
A Boolean specifying whether stamp control geometric restriction symbols are
shown. The default value is ON.
stampControl
A Boolean specifying whether slide region control geometric restriction symbols
are shown. The default value is ON.
slideRegionControl
A Boolean specifying whether cyclic symmetry geometric restriction symbols are
shown. The default value is ON.
topologyCyclicSymmetry
A Boolean specifying whether demold control (topology) geometric restriction
symbols are shown. The default value is ON.
topologyDemoldControl
A Boolean specifying whether member size (topology) geometric restriction symbols
are shown. The default value is ON.
topologyMemberSize
A Boolean specifying whether planar symmetry (topology) geometric restriction
symbols are shown. The default value is ON.
topologyPlanarSymmetry
A Boolean specifying whether point symmetry (topology) geometric restriction
symbols are shown. The default value is ON.
topologyPointSymmetry
A Boolean specifying whether rotational symmetry (topology) geometric restriction
symbols are shown. The default value is ON.
topologyRotationalSymmetry
A Boolean specifying whether turn control geometric restriction symbols are shown.
The default value is ON.
turnControl
Return value
None.
Exceptions
RangeError.
Members
The GeometricRestrictionDisplayOptions object has members with the same names and descriptions as the arguments
to the setValues  method.
577
Abaqus Scripting Reference Guide
GeometricRestrictionDisplayOptions object

GraphicsInfo object
The GraphicsInfo object stores information about the graphics adapter installed in your system. The GraphicsInfo
object has no constructor or methods; Abaqus creates the GraphicsInfo member when a session is started.
If you execute Abaqus/CAE on a remote system and display the main window locally, the glx server is your local
machine and the glx client is the remote machine. This deﬁnition of client and server follows the X11 naming convention.
If you execute and display Abaqus/CAE on the same machine, you will typically see identical values for both the name
of the server and the name of the client.
The members are all read-only.
Access
session.graphicsInfo
Members
The GraphicsInfo object has the following members:
A sequence of the type (Int, Int, String) specifying the three components of the OpenGL
version. The sequence consists of an Int with the OpenGL major version number, an Int
with the OpenGL minor version number, and a String with any additional information.
glVersion
A sequence of the type (Int, Int, String) specifying the three components of the glx version
of the server. The sequence consists of an Int with the glx major version number, an Int
with the glx minor version number, and a String with any additional information.
glxServerVersion
A sequence of the type (Int, Int, String) specifying the three components of the of glx
version of the client. The sequence consists of an Int with the glx major version number,
an Int with the glx minor version number, and String with any additional information.
glxClientVersion
A String specifying the graphics adapter vendor. On hardware accelerated systems glVendor
speciﬁes the vendor that manufactured the adapter. On systems without hardware
acceleration glVendor speciﬁes the developer of the software graphics library.
glVendor
A String specifying the name of the rendering device or the name of the software graphics
library.
glRenderer
A String specifying the glx developer on the server side.
glxServerVendor
A String specifying the glx developer on the client side.
glxClientVendor
Abaqus Scripting Reference Guide
578
GraphicsInfo object

GraphicsOptions object
The GraphicsOptions object stores settings that control how objects are rendered in all viewports. GraphicsOptions
objects are accessed in one of two ways:
•
The default graphics options. These settings are used as defaults when you start a session and by the Defaults button
on the Graphics Options dialog box.
•
The current graphics options.
The GraphicsOptions object has no constructor; Abaqus creates both the defaultGraphicsOptions and the graphicsOptions
members when a session is started.
When you start a session, Abaqus detects the graphics hardware installed on your system and uses the setValues
method in the environment ﬁle (abaqus_v6.env ) to modify the members of the GraphicsOptions object. If your
graphics hardware is not supported by Abaqus/CAE, or if you wish to override the default graphics options, you can
modify settings in the environment ﬁle. For more information, see Tuning graphics cards.
Access
session.defaultGraphicsOptions
session.graphicsOptions
setValues(...)
This method modiﬁes the GraphicsOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the graphics driver to use. Abaqus/CAE currently
uses OpenGL exclusively so the only possible value is OPEN_GL. OPEN_GL takes
advantage of graphics adapter hardware acceleration.
graphicsDriver
A Boolean specifying whether double buffering is used. The default value is ON.
doubleBuffering
Double buffering controls where Abaqus/CAE draws its graphics. When
doubleBuffering=OFF, everything is drawn directly to the screen and on many
systems you can see the progress of the drawing operations. Most users ﬁnd this
distracting, especially in dynamic situations such as view manipulation or animation
of results. When doubleBuffering=ON, the drawing occurs in a separate graphics
buffer that is displayed when all the drawing operations are complete. This results
in a much smoother display during view changes or animation. It is recommended
that you set double buffering to ON.
A Boolean specifying whether a display list will be used to accelerate graphics
performance. The default value is ON.
displayLists
When displayLists=ON, drawing operations are recorded in a list that can be quickly
replayed. This results in faster drawing on most systems but requires extra memory
to record the drawing operations. In the Visualization module, display lists are only
579
GraphicsOptions object

used during view manipulations and then their use is subject to the setting of
viewManipDisplayListThreshold.
A sequence of SymbolicConstants specifying a hint used to modify the highlight
method. Possible values are:
highlightMethodHint
•
HARDWARE_OVERLAY, specifying a hint of hardware overlay. The best
graphics performance is achieved using hardware overlay, but not all systems
and graphics adapters support hardware overlay.
•
XOR, specifying a hint of XOR technique. The XOR technique uses a boolean
pixel operation to simulate the drawing operations but can produce different
colors depending on the color of the underlying pixels.
•
SOFTWARE_OVERLAY, specifying a hint of software overlay. The software
overlay method simulates the effect of hardware overlay.
•
BLEND, specifying a hint of blend method. The blend method combines the
color of the underlying pixel with the desired color producing an approximation
of the transient graphics.
The default value is (HARDWARE_OVERLAY, XOR, SOFTWARE_OVERLAY,
BLEND).
The values of this sequence are applied by Abaqus when you start a session in ﬁrst
to last order. The ﬁrst successful value becomes the default highlight method. Not
all graphics adapters support the HARDWARE_OVERLAY value and you must
use the highlightMethodHint argument to provide an alternative.
You can use a single value to set the ﬁrst element of the list, or you can use a tuple
with one to four unique values. Abaqus sets any remaining elements of the tuple to
unique values based on the default order.
A SymbolicConstant specifying which rendering is used during dynamic rotations
of the view. Possible values are:
dragMode
•
FAST, specifying a rendering mode where the image is rendered in wireframe.
•
AS_IS, specifying a rendering mode where the image is rendered as is.
The default value is AS_IS.
When set to dragMode=FAST, a wireframe outline is drawn during view changes
by rotation, pan, or zoom. When dragMode=AS_IS, everything displayed in the
window will be drawn during view changes; however, the display may lag behind
the mouse movement when the model is complex especially if you are using an
older or slower system. For newer systems with graphics hardware acceleration the
AS_IS setting can be accommodated without signiﬁcant loss of performance.
A Boolean specifying whether lines will be smoothed to reduce the jagged effect
of rasterization. The default value is ON.
antiAlias
A Boolean specifying whether the model is automatically resized to ﬁt the viewport
after each view rotation. The default value is OFF.
autoFitAfterRotate
A Float specifying the offset added when drawing the faces of a polygon. The
polygonOffsetConstant argument affects the behavior of only the OpenGL driver.
polygonOffsetConstant
Abaqus Scripting Reference Guide
580
GraphicsOptions object

Possible values are 0.0 
polygonOffsetConstant
 100.0. The default value is
platform dependent and is typically between 0.0 and 2.0.
A Float specifying the factor that multiplies the slope of each line before the line
is added to the vertexes of a polygon face. The polygonOffsetSlope argument affects
polygonOffsetSlope
the behavior of only the OpenGL driver. Possible values are 0.0 
polygonOffsetSlope
 100.0. The default value is platform dependent and is
typically between 0.0 and 2.0.
A Float specifying the offset added when drawing the faces of a polygon.
printPolygonOffsetConstant is similar to polygonOffsetConstant; however,
printPolygonOffsetConstant
printPolygonOffsetConstant is used when printing and polygonOffsetConstant is
used for display. Some systems, especially Windows, use different OpenGL drivers
for printing and display, and you may have to use different offset values for each
driver.
A Float specifying the factor that multiplies the slope of each line before the line
is added to the vertexes of a polygon face. printPolygonOffsetSlope is similar to
printPolygonOffsetSlope
polygonOffsetSlope; however, printPolygonOffsetSlope is used when printing and
polygonOffsetSlope is used for display. Some systems, especially Windows, use
different OpenGL drivers for printing and display, and you may have to use different
offset values for each driver.
A Boolean specifying how the three-dimensional vertices of the model are processed.
When vertexArrays=OFF, each vertex of the model is processed separately. When
vertexArrays
vertexArrays=ON, the vertices are processed in large blocks resulting in faster
display. Not all graphics adapters support this capability correctly. An indicator
that the graphics adapters is not processing three-dimensional vertices correctly is
the absence of graphics during “rubber banding” operations. For example, when
dynamically dragging the radius of a circle in the Sketcher, the circle should be
visible. The default value is ON.
A Boolean specifying whether the vertexArrays setting should temporarily be set
to OFF when building a display list. The default value is ON.
vertexArraysInDisplayLists
Some graphics adapters do not properly support using vertex arrays inside a display
list. Setting vertexArraysInDisplayLists to OFF has a smaller impact on graphics
performance than setting vertexArrays or displayLists to OFF.
An Int specifying how large a display list may be created in order to accelerate view
manipulation operations. Increasing this value when viewing large models will
viewManipDisplayListThreshold
increase the delay before a view manipulation operation begins in order to obtain
improved graphics performance during the view manipulation. If set high with a
large model, the delay can be many seconds. In excessive cases, graphics memory
can be exceeded and the result may be an empty display list (no visible model) for
the view manipulation. This setting is treated as 0 if displayLists=OFF. Possible
values are 0 
viewManipDisplayListThreshold
 20000. The default value is 40.
A Boolean specifying how Abaqus renders X11 graphics operations. When
directRendering=OFF, the graphics are rendered through the X Server. When
directRendering
directRendering=ON, the graphics operations are sent directly to the graphics
581
Abaqus Scripting Reference Guide
GraphicsOptions object

adapter producing faster displays. For maximum performance, the initial value is
ON. This argument is used only when you ﬁrst start Abaqus/CAE; you cannot
conﬁgure directRendering during a session.
A Boolean specifying whether a hardware accelerated OpenGL graphics driver will
be used on Windows platforms. The default value is ON.
hardwareAcceleration
When hardwareAcceleration=OFF, the graphics driver uses a software
implementation of OpenGL that is included with the operating system. This results
in slower drawing on most systems; however, you may have to use the software
implementation of OpenGL if the hardware graphics driver is incompatible with
Abaqus/CAE.
hardwareAcceleration is used only when you ﬁrst start Abaqus/CAE on a Windows
platform; you cannot conﬁgure hardwareAcceleration during a
session.hardwareAcceleration is not used when you start Abaqus/CAE on an
X-Windows platform and display to a Windows platform running Exceed or any
other X-Windows server.
A Boolean specifying whether hardware overlay planes will be used if available.
The default value is the same value as the hardwareOverlayAvailable member.
hardwareOverlay
When hardwareOverlayAvailable=OFF, it will not be possible to set
hardwareOverlay to ON and the HARDWARE_OVERLAY highlight method will
not be available. If viewports display a solid color and will not display the model,
it will be necessary to inhibit hardware overlay completely by setting the
ABAQUS_EMULATE_OVERLAYS environment variable (to any value) before
starting Abaqus/CAE.
hardwareOverlay is used only when you ﬁrst start Abaqus/CAE; you cannot
conﬁgure hardwareOverlay during a session.
A Boolean specifying whether textures will be used to display contour plots. The
default value is ON.
textureMapping
Turning off texture mapping is necessary only if viewports will not correctly display
a contour plot of your model.
A Boolean specifying whether textures will be used to display contour plots. The
default value is ON.
printTextureMapping
Turning off texture mapping for printing is necessary only if printed output does
not correctly display a contour plot of your model. printTextureMapping is similar
to textureMapping; however, printTextureMapping is used when printing and
textureMapping is used for display. Some systems, especially Windows, use different
OpenGL drivers for printing and display, and you may have to use different settings
for each driver.
A SymbolicConstant specifying the background style to be used for all viewport
windows. Possible values are SOLID and GRADIENT. The default value is SOLID.
backgroundStyle
If backgroundStyle=SOLID, the viewport background will appear as a solid color
as speciﬁed by backgroundColor. If backgroundStyle=GRADIENT, the viewport
background will be drawn as a gradient beginning with the backgroundColor at the
Abaqus Scripting Reference Guide
582
GraphicsOptions object

top of the viewport and gradually blending to the backgroundBottomColor at the
bottom of the viewport.
A String specifying one of the two background colors for all viewport windows.
The initial color is black. A list of valid color strings is in the colors map in the
Session object.
backgroundColor
A String specifying one of the two background colors for all viewport windows.
This color is used only if backgroundStyle =GRADIENT. The initial color is black.
A list of valid color strings is in the colors map in the Session object.
backgroundBottomColor
A Boolean specifying whether a viewport background style of GRADIENT can be
overridden when displaying certain objects, such as sketches or XY plots. When
overridden, the background will be the top color of the gradient background.
backgroundOverride
A Boolean specifying whether facets that are determined to be facing away from
the viewer will be drawn. The default value is ON. backfaceCulling provides a
backfaceCulling
performance enhancement when displaying solid elements where the front side of
the element occludes the back side of the element. Set backfaceCulling=OFF if it
appears that you are seeing the back side of an element and the front side is missing.
You should also set backfaceCulling=OFF if you believe the display is not complete.
A Boolean specifying whether the hardware accelerated graphics driver will be
used for off-screen rendering. The default value is ON if graphics hardware
accelerateOffScreen
acceleration is available and has not been disabled via the hardwareAcceleration
option, and the graphics driver supports the underlying technology. When set to
OFF, an alternate (slower) technique will be used to create off-screen images.
Off-screen rendering is used for Printing, Probe, and backing store (viewport refresh).
Setting this value to OFF will force printed images to be rendered without hardware
acceleration. This is useful when writing automated tests to produce raster images
that you will want to compare across multiple machines that may have different
graphics environments.
A Boolean specifying whether a backing store will be used to refresh a viewport
after a window occluding the viewport is moved or dismissed. The default value is
ON.
backingStore
A Boolean specifying if the graphics hardware supports the OpenGL Shading
Language (GLSL).
shadersAvailable
An Int specifying whether speed or accuracy is more important when drawing
translucent objects. Lower values optimize for speed while higher values optimize
translucencyMode
for accuracy. The actual meaning of each setting will depend on the setting of
shadersAvailable and the capabilities of the graphics hardware and driver. Possible
values are 1 
translucencyMode
 6. The default value is 4.
None or a GraphicsOptions object specifying the object from which values are to
be copied. If other arguments are also supplied to setValues, they will override
the values in the options member. The default value is None.
options
583
Abaqus Scripting Reference Guide
GraphicsOptions object

A Float specifying a tolerance used when computing the appropriate scale for
transforming result (contour) values to texture values. When set too low the 'out of
contourRangeTexturePrecision
range' colors may be incorrectly shown for values near the range limits. The default
value is 0.5×10–5.
Return value
None.
Exceptions
RangeError.
Members
The GraphicsOptions object can have the following members:
A Boolean specifying whether a viewport background style of GRADIENT can be
overridden when displaying certain objects, such as sketches or XY plots. When
overridden, the background will be the top color of the gradient background.
backgroundOverride
A Boolean specifying whether facets that are determined to be facing away from
the viewer will be drawn. The default value is ON. backfaceCulling provides a
backfaceCulling
performance enhancement when displaying solid elements where the front side of
the element occludes the back side of the element. Set backfaceCulling=OFF if it
appears that you are seeing the back side of an element and the front side is missing.
You should also set backfaceCulling=OFF if you believe the display is not complete.
A SymbolicConstant specifying the graphics driver to use. Abaqus/CAE currently
uses OpenGL exclusively so the only possible value is OPEN_GL. OPEN_GL takes
advantage of graphics adapter hardware acceleration.
graphicsDriver
A Boolean specifying whether double buffering is used. The default value is ON.
doubleBuffering
Double buffering controls where Abaqus/CAE draws its graphics. When
doubleBuffering=OFF, everything is drawn directly to the screen and on many
systems you can see the progress of the drawing operations. Most users ﬁnd this
distracting, especially in dynamic situations such as view manipulation or animation
of results. When doubleBuffering=ON, the drawing occurs in a separate graphics
buffer that is displayed when all the drawing operations are complete. This results
in a much smoother display during view changes or animation. It is recommended
that you set double buffering to ON.
A Boolean specifying whether a display list will be used to accelerate graphics
performance. The default value is ON.
displayLists
When displayLists=ON, drawing operations are recorded in a list that can be quickly
replayed. This results in faster drawing on most systems but requires extra memory
to record the drawing operations. In the Visualization module, display lists are only
used during view manipulations and then their use is subject to the setting of
viewManipDisplayListThreshold.
Abaqus Scripting Reference Guide
584
GraphicsOptions object

A SymbolicConstant specifying which rendering is used during dynamic rotations
of the view. Possible values are:
dragMode
•
FAST, specifying a rendering mode where the image is rendered in wireframe.
•
AS_IS, specifying a rendering mode where the image is rendered as is.
The default value is AS_IS.
When set to dragMode=FAST, a wireframe outline is drawn during view changes
by rotation, pan, or zoom. When dragMode=AS_IS, everything displayed in the
window will be drawn during view changes; however, the display may lag behind
the mouse movement when the model is complex especially if you are using an
older or slower system. For newer systems with graphics hardware acceleration the
AS_IS setting can be accommodated without signiﬁcant loss of performance.
A Boolean specifying whether lines will be smoothed to reduce the jagged effect
of rasterization. The default value is ON.
antiAlias
A Boolean specifying whether the model is automatically resized to ﬁt the viewport
after each view rotation. The default value is OFF.
autoFitAfterRotate
A Float specifying the offset added when drawing the faces of a polygon. The
polygonOffsetConstant argument affects the behavior of only the OpenGL driver.
polygonOffsetConstant
Possible values are 0.0 
polygonOffsetConstant
 100.0. The default value is
platform dependent and is typically between 0.0 and 2.0.
A Float specifying the factor that multiplies the slope of each line before the line
is added to the vertexes of a polygon face. The polygonOffsetSlope argument affects
polygonOffsetSlope
the behavior of only the OpenGL driver. Possible values are 0.0 
polygonOffsetSlope
 100.0. The default value is platform dependent and is
typically between 0.0 and 2.0.
A Float specifying the offset added when drawing the faces of a polygon.
printPolygonOffsetConstant is similar to polygonOffsetConstant; however,
printPolygonOffsetConstant
printPolygonOffsetConstant is used when printing and polygonOffsetConstant is
used for display. Some systems, especially Windows, use different OpenGL drivers
for printing and display, and you may have to use different offset values for each
driver.
A Float specifying the factor that multiplies the slope of each line before the line
is added to the vertexes of a polygon face. printPolygonOffsetSlope is similar to
printPolygonOffsetSlope
polygonOffsetSlope; however, printPolygonOffsetSlope is used when printing and
polygonOffsetSlope is used for display. Some systems, especially Windows, use
different OpenGL drivers for printing and display, and you may have to use different
offset values for each driver.
A Boolean specifying how the three-dimensional vertices of the model are processed.
When vertexArrays=OFF, each vertex of the model is processed separately. When
vertexArrays
vertexArrays=ON, the vertices are processed in large blocks resulting in faster
display. Not all graphics adapters support this capability correctly. An indicator
that the graphics adapters is not processing three-dimensional vertices correctly is
585
Abaqus Scripting Reference Guide
GraphicsOptions object

the absence of graphics during “rubber banding” operations. For example, when
dynamically dragging the radius of a circle in the Sketcher, the circle should be
visible. The default value is ON.
A Boolean specifying whether the vertexArrays setting should temporarily be set
to OFF when building a display list. The default value is ON.
vertexArraysInDisplayLists
Some graphics adapters do not properly support using vertex arrays inside a display
list. Setting vertexArraysInDisplayLists to OFF has a smaller impact on graphics
performance than setting vertexArrays or displayLists to OFF.
An Int specifying how large a display list may be created in order to accelerate view
manipulation operations. Increasing this value when viewing large models will
viewManipDisplayListThreshold
increase the delay before a view manipulation operation begins in order to obtain
improved graphics performance during the view manipulation. If set high with a
large model, the delay can be many seconds. In excessive cases, graphics memory
can be exceeded and the result may be an empty display list (no visible model) for
the view manipulation. This setting is treated as 0 if displayLists=OFF. Possible
values are 0 
viewManipDisplayListThreshold
 20000. The default value is 40.
A Boolean specifying how Abaqus renders X11 graphics operations. When
directRendering=OFF, the graphics are rendered through the X Server. When
directRendering
directRendering=ON, the graphics operations are sent directly to the graphics
adapter producing faster displays. For maximum performance, the initial value is
ON. This argument is used only when you ﬁrst start Abaqus/CAE; you cannot
conﬁgure directRendering during a session.
A Boolean specifying whether a hardware accelerated OpenGL graphics driver will
be used on Windows platforms. The default value is ON.
hardwareAcceleration
When hardwareAcceleration=OFF, the graphics driver uses a software
implementation of OpenGL that is included with the operating system. This results
in slower drawing on most systems; however, you may have to use the software
implementation of OpenGL if the hardware graphics driver is incompatible with
Abaqus/CAE.
hardwareAcceleration is used only when you ﬁrst start Abaqus/CAE on a Windows
platform; you cannot conﬁgure hardwareAcceleration during a
session.hardwareAcceleration is not used when you start Abaqus/CAE on an
X-Windows platform and display to a Windows platform running Exceed or any
other X-Windows server.
A Boolean specifying whether hardware overlay planes will be used if available.
The default value is the same value as the hardwareOverlayAvailable member.
hardwareOverlay
When hardwareOverlayAvailable=OFF, it will not be possible to set
hardwareOverlay to ON and the HARDWARE_OVERLAY highlight method will
not be available. If viewports display a solid color and will not display the model,
it will be necessary to inhibit hardware overlay completely by setting the
ABAQUS_EMULATE_OVERLAYS environment variable (to any value) before
starting Abaqus/CAE.
hardwareOverlay is used only when you ﬁrst start Abaqus/CAE; you cannot
conﬁgure hardwareOverlay during a session.
Abaqus Scripting Reference Guide
586
GraphicsOptions object

A Boolean specifying whether textures will be used to display contour plots. The
default value is ON.
textureMapping
Turning off texture mapping is necessary only if viewports will not correctly display
a contour plot of your model.
A Boolean specifying whether textures will be used to display contour plots. The
default value is ON.
printTextureMapping
Turning off texture mapping for printing is necessary only if printed output does
not correctly display a contour plot of your model. printTextureMapping is similar
to textureMapping; however, printTextureMapping is used when printing and
textureMapping is used for display. Some systems, especially Windows, use different
OpenGL drivers for printing and display, and you may have to use different settings
for each driver.
A SymbolicConstant specifying the background style to be used for all viewport
windows. Possible values are SOLID and GRADIENT. The default value is SOLID.
backgroundStyle
If backgroundStyle=SOLID, the viewport background will appear as a solid color
as speciﬁed by backgroundColor. If backgroundStyle=GRADIENT, the viewport
background will be drawn as a gradient beginning with the backgroundColor at the
top of the viewport and gradually blending to the backgroundBottomColor at the
bottom of the viewport.
A Boolean specifying whether the hardware accelerated graphics driver will be
used for off-screen rendering. The default value is ON if graphics hardware
accelerateOffScreen
acceleration is available and has not been disabled via the hardwareAcceleration
option, and the graphics driver supports the underlying technology. When set to
OFF, an alternate (slower) technique will be used to create off-screen images.
Off-screen rendering is used for Printing, Probe, and backing store (viewport refresh).
Setting this value to OFF will force printed images to be rendered without hardware
acceleration. This is useful when writing automated tests to produce raster images
that you will want to compare across multiple machines that may have different
graphics environments.
A Boolean specifying whether a backing store will be used to refresh a viewport
after a window occluding the viewport is moved or dismissed. The default value is
ON.
backingStore
A SymbolicConstant specifying the highlight method. For the GraphicsOptions
object, possible values of the member are HARDWARE_OVERLAY, XOR,
SOFTWARE_OVERLAY, and BLEND.
highlightMethod
A Boolean specifying if the graphics hardware supports hardware overlay.
hardwareOverlayAvailable
A Boolean specifying if the graphics hardware supports the OpenGL Shading
Language (GLSL).
shadersAvailable
An Int specifying whether speed or accuracy is more important when drawing
translucent objects. Lower values optimize for speed while higher values optimize
translucencyMode
for accuracy. The actual meaning of each setting will depend on the setting of
587
Abaqus Scripting Reference Guide
GraphicsOptions object

shadersAvailable and the capabilities of the graphics hardware and driver. Possible
values are 1 
translucencyMode
 6. The default value is 4.
A Float specifying a tolerance used when computing the appropriate scale for
transforming result (contour) values to texture values. When set too low the 'out of
contourRangeTexturePrecision
range' colors may be incorrectly shown for values near the range limits. The default
value is 0.5×10–5.
None or a GraphicsOptions object specifying the object from which values are to
be copied. If other arguments are also supplied to setValues, they will override
the values in the options member. The default value is None.
options
A tuple of SymbolicConstants specifying a hint used to modify the highlight method.
Possible values are:
highlightMethodHint
•
HARDWARE_OVERLAY, specifying a hint of hardware overlay. The best
graphics performance is achieved using hardware overlay, but not all systems
and graphics adapters support hardware overlay.
•
XOR, specifying a hint of XOR technique. The XOR technique uses a boolean
pixel operation to simulate the drawing operations but can produce different
colors depending on the color of the underlying pixels.
•
SOFTWARE_OVERLAY, specifying a hint of software overlay. The software
overlay method simulates the effect of hardware overlay.
•
BLEND, specifying a hint of blend method. The blend method combines the
color of the underlying pixel with the desired color producing an approximation
of the transient graphics.
The default value is (HARDWARE_OVERLAY, XOR, SOFTWARE_OVERLAY,
BLEND).
The values of this sequence are applied by Abaqus when you start a session in ﬁrst
to last order. The ﬁrst successful value becomes the default highlight method. Not
all graphics adapters support the HARDWARE_OVERLAY value and you must
use the highlightMethodHint argument to provide an alternative.
You can use a single value to set the ﬁrst element of the list, or you can use a tuple
with one to four unique values. Abaqus sets any remaining elements of the tuple to
unique values based on the default order.
A String specifying one of the two background colors for all viewport windows.
The initial color is black. A list of valid color strings is in the colors map in the
Session object.
backgroundColor
A String specifying one of the two background colors for all viewport windows.
This color is used only if backgroundStyle =GRADIENT. The initial color is black.
A list of valid color strings is in the colors map in the Session object.
backgroundBottomColor
Abaqus Scripting Reference Guide
588
GraphicsOptions object

InteractionDisplayOptions object
The InteractionDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular
viewport when
session.viewports[name].assemblyDisplay.interactions=ON
The InteractionDisplayOptions object has no constructor. When you create a new viewport, the settings are copied
from the current viewport.
Access
session.viewports[name].assemblyDisplay.interactionOptions
session.viewports[name].layers[name].assemblyDisplay\
.interactionOptions
setValues(...)
This method modiﬁes the InteractionDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether surface contact symbols are shown. The default
value is ON.
surfaceContact
A Boolean specifying whether self contact symbols are shown. The default value
is ON.
selfContact
A Boolean specifying whether elastic foundation symbols are shown. The default
value is ON.
elasticFoundation
A Boolean specifying whether actuator/sensor symbols are shown. The default
value is ON.
actuatorSensor
A Boolean specifying whether surface radiation-to-ambient symbols are shown.
The default value is ON.
radiationAmbient
A Boolean specifying whether surface ﬁlm condition symbols are shown. The
default value is ON.
ﬁlmCondition
A Boolean specifying whether concentrated radiation-to-ambient symbols are
shown. The default value is ON.
concentratedRadiationToAmbient
A Boolean specifying whether concentrated ﬁlm condition symbols are shown.
The default value is ON.
concentratedFilmCondition
589
InteractionDisplayOptions object

Return value
None.
Exceptions
RangeError.
Members
The InteractionDisplayOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
Abaqus Scripting Reference Guide
590
InteractionDisplayOptions object

Light object
The Light object stores settings that control how objects are lit when the renderStyle is set to SHADED.
The Light object has no constructor; Abaqus creates them as part of the defaultLightOptions and the lightOptions
objects when a session is started.
Access
session.defaultLightOptions.lights[i]
session.viewports[name].lightOptions.lights[i]
setValues(...)
This method modiﬁes the Light object.
Required arguments
None.
Optional arguments
A Boolean specifying whether the light is on or off. The default value is OFF.
enabled
A SymbolicConstant specifying how the effect of the light should be calculated. Possible values
are:
type
•
DIRECTIONAL, specifying a constant vector should be used for the direction from the light
to a vertex.
•
POINT, specifying the vector from the light to each vertex should be calculated.
The default value is DIRECTIONAL.
When set to type =DIRECTIONAL, a constant vector is used for the direction from the light to
a vertex. When type =POINT, the result is more realistic because the actual vector from the light
to each vertex is calculated. However, overall performance is decreased.
A Float specifying the altitude of the light above or below the camera. Possible values are -90.0
latitude
 90.0. The default value is 0.0.
latitude
A Float specifying the east/west position of the light to the left or right of the camera. Possible
values are -90.0 
longitude
 90.0. The default value is 0.0.
longitude
A String specifying the color of the light added to the scene by this light source. The initial value
is 70% gray. A list of valid color strings is in the colors map in the session object.
diffuseColor
A String specifying the color of the specular highlights created by this light source. The initial
value is 36% gray. A list of valid color strings is in the colors map in the session object.
specularColor
Return value
None.
591
Light object

Exceptions
RangeError.
Members
The Light object has members with the same names and descriptions as the arguments to the setValues  method.
Abaqus Scripting Reference Guide
592
Light object

LightOptions object
The LightOptions object stores settings that control how objects are lit when the renderStyle is set to SHADED.
LightOptions objects are accessed in one of two ways:
•
The default light options. These settings are used as defaults when you start a session and by the Defaults button
on the Light Options dialog box.
•
The light options associated with a particular viewport.
The LightOptions object has no constructor; Abaqus creates the defaultLightOptions member when a session is started.
When a new viewport is created, the lightOptions member is copied from the current viewport.
Access
session.defaultLightOptions
session.viewports[name].lightOptions
setValues(...)
This method modiﬁes the LightOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the shading technique that should be used to ﬁll facets for geometric
bodies when renderStyle =SHADED. The lighting of facets for meshed geometry is not affected
by this setting. Possible values are:
shading
•
GOURAUD, specifying that lighting values should be computed for each corner of a facet and
interpolated to ﬁll the remainder of the facet.
•
PHONG, specifying that lighting values should be computed for each pixel of a facet.
The default value is GOURAUD.
When set to shading =GOURAUD, lighting values are computed for each corner of a facet and
the lighting for the remainder of the facet is interpolated from the corner values. When shading
=PHONG, lighting values are computed for each pixel of a facet.
Note:
The shading technique can only be set to PHONG when the shadersAvailable member of
GraphicsOptions is True.
Printed output will only contain Phong shading if the output format is raster and the
accelerateOffScreen member of GraphicsOptions is ON.
The renderStyle setting is part of AssemblyDisplayOptions, PartDisplayOptions, and various other
options objects not listed here since they are generally used for meshed geometry.
A SymbolicConstant specifying how specular highlights should be calculated. Possible values are:
viewpoint
593
LightOptions object

•
INFINITE, specifying that a constant vector should be used for the direction from the camera
to a vertex when computing specular highlights.
•
LOCAL, specifying that the vector from the camera to each vertex should be calculated when
computing specular highlights.
The default value is INFINITE.
When set to viewpoint =INFINITE, a constant vector is used for the direction from the camera
(viewpoint) to a vertex. When viewpoint =LOCAL, the result is more realistic because the actual
vector from the camera to each vertex is calculated. However, overall performance is decreased.
A String specifying the light applied evenly to the entire scene independent of any individual light.
The initial value is 20% gray. A list of valid color strings is in the colors map in the session object.
ambientColor
A Float specifying the degree to which specular reﬂection is focused. The higher the
materialShininess argument, the more focused the specular highlight. Possible values are 0.0 
polygonOffsetConstant
 128.0. The default value is 105.0.
materialShininess
Return value
None.
Exceptions
RangeError.
Members
The LightOptions object has the following members:
A SymbolicConstant specifying the shading technique that should be used to ﬁll facets for geometric
bodies when renderStyle =SHADED. The lighting of facets for meshed geometry is not affected
by this setting. Possible values are:
shading
•
GOURAUD, specifying that lighting values should be computed for each corner of a facet and
interpolated to ﬁll the remainder of the facet.
•
PHONG, specifying that lighting values should be computed for each pixel of a facet.
The default value is GOURAUD.
When set to shading =GOURAUD, lighting values are computed for each corner of a facet and
the lighting for the remainder of the facet is interpolated from the corner values. When shading
=PHONG, lighting values are computed for each pixel of a facet.
Note:
The shading technique can only be set to PHONG when the shadersAvailable member of
GraphicsOptions is True.
Printed output will only contain Phong shading if the output format is raster and the
accelerateOffScreen member of GraphicsOptions is ON.
The renderStyle setting is part of AssemblyDisplayOptions, PartDisplayOptions, and various other
options objects not listed here since they are generally used for meshed geometry.
Abaqus Scripting Reference Guide
594
LightOptions object

A SymbolicConstant specifying how specular highlights should be calculated. Possible values are:
viewpoint
•
INFINITE, specifying that a constant vector should be used for the direction from the camera
to a vertex when computing specular highlights.
•
LOCAL, specifying that the vector from the camera to each vertex should be calculated when
computing specular highlights.
The default value is INFINITE.
When set to viewpoint =INFINITE, a constant vector is used for the direction from the camera
(viewpoint) to a vertex. When viewpoint =LOCAL, the result is more realistic because the actual
vector from the camera to each vertex is calculated. However, overall performance is decreased.
A Float specifying the degree to which specular reﬂection is focused. The higher the
materialShininess argument, the more focused the specular highlight. Possible values are 0.0 
polygonOffsetConstant
 128.0. The default value is 105.0.
materialShininess
A LightArray object of length 8.
lights
A String specifying the light applied evenly to the entire scene independent of any individual light.
The initial value is 20% gray. A list of valid color strings is in the colors map in the session object.
ambientColor
595
Abaqus Scripting Reference Guide
LightOptions object

LoadDisplayOptions object
The LoadDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular viewport
when
session.viewports[name].assemblyDisplay.loads=ON
The LoadDisplayOptions object has no constructor. When you create a new viewport, the settings are copied from the
current viewport.
Access
session.viewports[name].assemblyDisplay.loadOptions
session.viewports[name].layers[name].assemblyDisplay.loadOptions
setValues(...)
This method modiﬁes the LoadDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether concentrated force symbols are shown. The default
value is ON.
concentratedForce
A Boolean specifying whether moment symbols are shown. The default value is
ON.
moment
A Boolean specifying whether pressure symbols are shown. The default value is
ON.
pressure
A Boolean specifying whether pipe pressure symbols are shown. The default value
is ON.
pipePressure
A Boolean specifying whether body force symbols are shown. The default value
is ON.
bodyForce
A Boolean specifying whether line load symbols are shown. The default value is
ON.
lineLoad
A Boolean specifying whether gravity symbols are shown. The default value is
ON.
gravity
A Boolean specifying whether bolt load symbols are shown. The default value is
ON.
boltLoad
A Boolean specifying whether PEG load symbols are shown. The default value is
ON.
pegLoad
Abaqus Scripting Reference Guide
596
LoadDisplayOptions object

A Boolean specifying whether connector force symbols are shown. The default
value is ON.
connectorForce
A Boolean specifying whether connector moment symbols are shown. The default
value is ON.
connectorMoment
A Boolean specifying whether inertia relief symbols are shown. The default value
is ON.
inertiaRelief
A Boolean specifying whether rotational inertia load symbols are shown. The
default value is ON.
rotationalIntertiaLoad
A Boolean specifying whether coriolis force symbols are shown. The default value
is ON.
coriolisForce
A Boolean specifying whether body heat ﬂux symbols are shown. The default
value is ON.
bodyHeatFlux
A Boolean specifying whether surface heat ﬂux symbols are shown. The default
value is ON.
surfaceHeatFlux
A Boolean specifying whether concentrated heat ﬂux symbols are shown. The
default value is ON.
concentratedHeatFlux
A Boolean specifying whether concentrated pore ﬂuid symbols are shown. The
default value is ON.
concentratedPoreFluid
A Boolean specifying whether surface pore ﬂuid symbols are shown. The default
value is ON.
surfacePoreFluid
A Boolean specifying whether hydro ﬂuid ﬂow symbols are shown. The default
value is ON.
hydroFluidFlow
A Boolean specifying whether concentrated charge symbols are shown. The default
value is ON.
concentratedCharge
A Boolean specifying whether concentrated current symbols are shown. The default
value is ON.
concentratedCurrent
A Boolean specifying whether surface charge symbols are shown. The default
value is ON.
surfaceCharge
A Boolean specifying whether surface current symbols are shown. The default
value is ON.
surfaceCurrent
A Boolean specifying whether body charge symbols are shown. The default value
is ON.
bodyCharge
597
Abaqus Scripting Reference Guide
LoadDisplayOptions object

A Boolean specifying whether body current symbols are shown. The default value
is ON.
bodyCurrent
A Boolean specifying whether inward volume acceleration symbols are shown.
The default value is ON.
inwardVolAccel
A Boolean specifying whether body concentration ﬂux symbols are shown. The
default value is ON.
bodyConcentrationFlux
A Boolean specifying whether surface concentration ﬂux symbols are shown. The
default value is ON.
surfaceConcentrationFlux
A Boolean specifying whether concentrated concentration ﬂux symbols are shown.
The default value is ON.
concentratedConcentrationFlux
Return value
None.
Exceptions
RangeError.
Members
The LoadDisplayOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
598
LoadDisplayOptions object

MeshDisplayOptions object
The MeshDisplayOptions object stores settings that specify how the assembly is displayed in a particular viewport
when
session.viewports[name].assemblyDisplay.mesh=ON
The MeshDisplayOptions object has no constructor. When you create a new viewport, the settings are copied from the
current viewport.
Access
session.viewports[name].assemblyDisplay.meshOptions
session.viewports[name].layers[name].assemblyDisplay.meshOptions
session.viewports[name].layers[name].partDisplay.meshOptions
session.viewports[name].partDisplay.meshOptions
setValues(...)
This method modiﬁes the MeshDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether node labels are shown. The default value is OFF.
nodeLabels
A Boolean specifying whether element labels are shown. The default value is OFF.
elementLabels
A SymbolicConstant specifying how the mesh's edges are drawn. Possible values are:
meshVisibleEdges
•
ALL, specifying that all edges are shown.
•
EXTERIOR, specifying that only exterior edges are shown.
•
FEATURE, specifying that edges are shown based on featureAngle.
•
FREE, specifying that only free edges are shown.
•
NONE, specifying that no display edges are shown.
The default value is EXTERIOR.
A Float specifying the angle in degrees to be used in calculating a feature edge plot.
Possible values are 0 featureAngle  90. The default value is 20.0.
featureAngle
A Boolean specifying whether mesh edges are displayed in shaded mode. The default
value is ON.
meshEdgesInShaded
A Boolean specifying whether the regions of the assembly will be color coded based on
the meshing technique assigned to the regions. This argument is ignored in partDisplay.
The default value is OFF.
meshTechnique
599
MeshDisplayOptions object

A Boolean specifying whether seeds are shown. This argument is ignored in partDisplay.
The default value is OFF.
seeds
Return value
None.
Exceptions
RangeError.
Members
The MeshDisplayOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
Abaqus Scripting Reference Guide
600
MeshDisplayOptions object

OptimizationTaskDisplayOptions object
The OptimizationTaskDisplayOptions object stores settings that specify how assemblies are to be displayed in a
particular viewport when
session.viewports[name].assemblyDisplay.optimizationTasks=ON
The OptimizationTaskDisplayOptions object has no constructor. When you create a new viewport, the settings are
copied from the current viewport.
Access
session.viewports[name].assemblyDisplay.optimizationTaskOptions
session.viewports[name].layers[name].assemblyDisplay\
.optimizationTaskOptions
setValues(...)
This method modiﬁes the OptimizationTaskDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether topology task symbols are shown. The default value
is ON.
topologyTask
A Boolean specifying whether shape task symbols are shown. The default value is
ON.
shapeTask
Return value
None.
Exceptions
RangeError.
Members
The OptimizationTaskDisplayOptions object has members with the same names and descriptions as the arguments to
the setValues  method.
601
OptimizationTaskDisplayOptions object

PartDisplayOptions object
The PartDisplayOptions object stores settings that specify how parts are to be displayed in a particular viewport. The
PartDisplayOptions object has no constructor. When you create a new viewport, the settings are copied from the current
viewport.
Access
session.viewports[name].layers[name].partDisplay
import part
session.viewports[name].partDisplay
setValues(...)
This method modiﬁes the PartDisplayOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying how the image in the viewport is rendered. Possible
values are WIREFRAME, HIDDEN, and SHADED. The default value is
WIREFRAME.
renderStyle
A sequence of DisplayGroup objects specifying the DisplayGroups visible in the
viewport. Currently the sequence can contain a maximum of one DisplayGroup object.
The default value is an empty sequence.
visibleDisplayGroups
A Boolean specifying whether engineering features are shown. The default value is
OFF.
engineeringFeatures
A Boolean specifying whether to render the beam proﬁles. The default value is OFF.
renderBeamProﬁles
A Float specifying the beam proﬁle scale factor. The beamScaleFactor must be greater
than zero. The default value is 1.0.
beamScaleFactor
Return value
None.
Exceptions
RangeError.
Members
The PartDisplayOptions object can have the following members:
Abaqus Scripting Reference Guide
602
PartDisplayOptions object

A Boolean specifying whether engineering features are shown. The default value
is OFF.
engineeringFeatures
A Boolean specifying whether to render the beam proﬁles. The default value is
OFF.
renderBeamProﬁles
A Float specifying the beam proﬁle scale factor. The beamScaleFactor must be
greater than zero. The default value is 1.0.
beamScaleFactor
A Boolean specifying whether the mesh should be displayed.
mesh
A SymbolicConstant specifying how the image in the viewport is rendered.
Possible values are WIREFRAME, HIDDEN, and SHADED. The default value
is WIREFRAME.
renderStyle
A DisplayGroup object specifying the current display group and referring to an
object in the displayGroups member of Session.
displayGroup
A repository of DisplayGroupInstance objects.
displayGroupInstances
An EngineeringFeatureDisplayOptions object.
engineeringFeatureOptions
A GeometryDisplayOptions object.
geometryOptions
A MeshDisplayOptions object.
meshOptions
603
Abaqus Scripting Reference Guide
PartDisplayOptions object

StopConditionDisplayOptions object
The StopConditionDisplayOptions object stores settings that specify how assemblies are to be displayed in a particular
viewport when
session.viewports[name].assemblyDisplay.stopConditions=ON
The StopConditionDisplayOptions object has no constructor. When you create a new viewport, the settings are copied
from the current viewport.
Access
session.viewports[name].assemblyDisplay.stopConditionOptions
session.viewports[name].layers[name].assemblyDisplay\
.stopConditionOptions
setValues(...)
This method modiﬁes the StopConditionDisplayOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether local stop condition symbols are shown. The
default value is ON.
localStopCondition
Return value
None.
Exceptions
RangeError.
Members
The StopConditionDisplayOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
Abaqus Scripting Reference Guide
604
StopConditionDisplayOptions object

SymbolDisplayOptions object
The SymbolDisplayOptions object stores settings that specify how the assembly is displayed in a particular viewport.
The SymbolDisplayOptions object has no constructor. When you create a new viewport, the settings are copied from
the current viewport.
Access
session.viewports[name].assemblyDisplay.symbolOptions
session.viewports[name].layers[name].assemblyDisplay.symbolOptions
setValues(...)
This method modiﬁes the SymbolDisplayOptions object.
Required arguments
None.
Optional arguments
An Int specifying the size of the scalar attribute symbols. Possible values are 1
scalarSymbolSize  30. The default value is 12.
otherSymbolSize
An Int specifying the size of the vector and tensor attribute symbols. Possible values
are 1 vectorSymbolSize  30. The default value is 12.
arrowSymbolSize
An Int specifying the relative density of the attribute symbols drawn on geometric
faces. Possible values are 1 faceSymbolDensity  10. The default value is 5.
faceSymbolDensity
An Int specifying the relative density of the attribute symbols drawn on geometric
edges. Possible values are 1 edgeSymbolDensity  10. The default value is 5.
edgeSymbolDensity
A Float specifying the fraction of the attribute symbols drawn on orphan mesh regions.
Possible values are 0.0 meshSymbolFraction  1.0. The default value is 1.0.
meshSymbolFraction
A Boolean specifying whether symbols should be scaled based on analytical ﬁeld
value. The default value is ON.
showFields
Return value
None.
Exceptions
None.
605
SymbolDisplayOptions object

Members
The SymbolDisplayOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
Abaqus Scripting Reference Guide
606
SymbolDisplayOptions object

ViewportAnnotationOptions object
The ViewportAnnotationOptions object stores settings that control how annotations are rendered in a particular viewport.
ViewportAnnotationOptions objects are accessed in one of two ways:
•
The default viewport annotations. These settings are used as defaults when other viewportAnnotationOptions
members are created and can be set to customize user preferences.
•
The viewport annotations associated with a particular viewport.
The ViewportAnnotationOptions object has no constructor; Abaqus creates the defaultViewportAnnotationOptions
member when a session is started. When a new viewport is created, the settings are copied from the current viewport.
Access
session.defaultViewportAnnotationOptions
session.viewports[name].viewportAnnotationOptions
setValues(...)
This method modiﬁes the ViewportAnnotationOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether the view orientation triad is shown. The default value is
ON.
triad
A pair of Ints specifying the position of the view orientation triad as a percentage of the
viewport size. Possible values are (0, 0) 
triadPosition
 (100, 100). The default value
is (6, 12).
triadPosition
A String specifying the color of the view orientation triad. Possible values are any valid
color. The default value is "White".
triadColor
A SymbolicConstant specifying how the view orientation triad is labeled. Possible values
are:
triadLabels
•
NUMBERS, specifying the label axes 1, 2, 3.
•
LETTERS, specifying the label axes X, Y, Z.
The default value is NUMBERS.
A String specifying the font of the view orientation triad labels. Possible values are any
valid font. The default value is "-*-verdana-bold-r-normal--120-*".
triadFont
An Int specifying the length of each triad axis as a percentage of the viewport size. Possible
values are 1 
legendDecimalPlaces
 50. The default value is 4.
triadSize
607
ViewportAnnotationOptions object

A Boolean specifying whether the legend is shown. The default value is ON.
legend
A Boolean specifying whether the minimum and maximum values for X–Y and contour
plots are shown. The default value is OFF.
legendMinMax
A Boolean specifying whether the box around the legend is shown. The default value is
ON.
legendBox
An Int specifying the number of decimal places to display in the legend. Possible values
are 0 
legendDecimalPlaces
 9. The default value is 3.
legendDecimalPlaces
A pair of Ints specifying the position of the legend as a percentage of the viewport size.
Possible values are (0, 0)
legendPosition
 (100, 100). The default value is (2, 98).
legendPosition
A String specifying the font of the legend labels. Possible values are any valid font. The
default value is "-*-verdana-medium-r-*-*-*-120-*-*-*-*-iso8859-1".
legendFont
A String specifying the color of the legend. Possible values are any valid color. The
default value is "White".
legendTextColor
A SymbolicConstant specifying the legend background style. Possible values are MATCH,
TRANSPARENT, and OTHER. The default value is TRANSPARENT.
legendBackgroundStyle
The default color when OTHER is speciﬁed is the background color (black).
A String specifying the color of the legend background. Possible values are any valid
color. The initial value matches the viewport background.
legendBackgroundColor
A Boolean specifying whether the title block is shown. The default value is ON.
title
A Boolean specifying whether the box around the title block is shown. The default value
is OFF.
titleBox
A pair of Ints specifying the position of the title block as a percentage of the viewport
size. Possible values are (0, 0) 
titlePosition
 (100, 100). The default value is (13,
20).
titlePosition
A String specifying the font of the title. Possible values are any valid font. The default
value is "-*-verdana-medium-r-*-*-*-120-*-*-*-*-iso8859-1".
titleFont
A String specifying the color of the title. Possible values are any valid color. The default
value is "White".
titleTextColor
A SymbolicConstant specifying the title block background style. Possible values are
MATCH, TRANSPARENT, and OTHER. The default value is TRANSPARENT.
titleBackgroundStyle
The default color when OTHER is speciﬁed is the background color (black).
Abaqus Scripting Reference Guide
608
ViewportAnnotationOptions object

A String specifying the color of the title block background. Possible values are any valid
color. The initial value matches the viewport background.
titleBackgroundColor
A Boolean specifying whether the state block is shown. The default value is ON.
state
A Boolean specifying whether the box around the state block is shown. The default value
is OFF.
stateBox
A pair of Ints specifying the position of the state block as a percentage of the viewport
size. Possible values are (0, 0) 
statePosition
 (100, 100). The default value is (13,
12).
statePosition
A String specifying the font of the state label. Possible values are any valid font. The
default value is "-*-verdana-medium-r-*-*-*-120-*-*-*-*-iso8859-1".
stateFont
A String specifying the color of the state block label. Possible values are any valid color.
The default value is "White".
stateTextColor
A SymbolicConstant specifying the state block background style. Possible values are
MATCH, TRANSPARENT, and OTHER. The default value is TRANSPARENT.
stateBackgroundStyle
The default color when OTHER is speciﬁed is the background color (black).
A String specifying the color of the state block background. Possible values are any valid
color. The initial value matches the viewport background.
stateBackgroundColor
A Boolean specifying whether the 3D Compass is shown. The default value is ON.
compass
A Float specifying the relative size of the 3D Compass in the viewport. Possible values
are 0.5 
compassScale
 2.0. The default value is 0.8.
compassScale
A SymbolicConstant specifying the plane that will be used for the base of the 3D Compass.
Possible values are XYPLANE, XZPLANE, and YZPLANE. The default value is
XZPLANE.
compassPrivilegedPlane
Return value
None.
Exceptions
RangeError.
Members
The ViewportAnnotationOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
609
Abaqus Scripting Reference Guide
ViewportAnnotationOptions object

Edit mesh commands
Edit mesh commands are used to edit an orphan mesh part or part instance or an Abaqus native mesh.
In this section:
•
Assembly object
•
Part object
•
MeshEditOptions object
Abaqus Scripting Reference Guide
610

Assembly object
The following commands operate on Assembly objects. For more information about the Assembly object, see Assembly
object.
Access
import meshEdit
collapseMeshEdge(...)
This method collapses an edge of a quadrilateral or triangular element of a part instance.
Required arguments
A single MeshEdge object specifying the element edge to collapse.
edge
A SymbolicConstant specifying the method used to collapse the edge. Possible values
are FORWARD, REVERSE, and AVERAGE.
collapseMethod
Optional arguments
None.
Return value
None.
Exceptions
None.
combineElement(...)
This method combines two triangular elements of a part instance.
Required arguments
A sequence of triangular MeshElement objects specifying the elements to combine.
elements
Optional arguments
None.
Return value
None.
Exceptions
None.
611
Assembly object

deleteElement(...)
This method deletes the given elements from a part instance. The elements must have been generated using the bottom-up
meshing technique.
Required arguments
A sequence of MeshElement objects or a Set object containing elements.
elements
Optional arguments
A Boolean specifying whether to delete all those associated nodes that become
unreferenced after the given elements are deleted. The default value is OFF.
deleteUnreferencedNodes
Return value
None.
Exceptions
None.
projectNode(...)
This method projects the given nodes of a part instance onto a mesh entity, geometric entity, or a datum object.
Required arguments
A sequence of MeshNode objects to be projected.
nodes
An object specifying the target for the node projection operation. The projectionReference
can be any one of the following objects: MeshNode, MeshEdge, MeshFace, Vertex, Edge,
Face, DatumPoint, DatumAxis, or DatumPlane.
projectionReference
Optional arguments
None.
Return value
None.
Exceptions
None.
editNode(...)
This method changes the coordinates of the given nodes on a part instance.
Abaqus Scripting Reference Guide
612
Assembly object

Required arguments
A sequence of MeshNode objects or a Set object containing nodes.
nodes
Optional arguments
A Float specifying the value of the ﬁrst coordinate. If coordinate1 and offset1 are unspeciﬁed,
the existing value does not change.
coordinate1
A Float specifying the value of the second coordinate. If coordinate2 and offset2 are
unspeciﬁed, the existing value does not change.
coordinate2
A Float specifying the value of the third coordinate. If coordinate3 and offset3 are unspeciﬁed,
the existing value does not change.
coordinate3
A sequence of three-dimensional coordinate tuples specifying the coordinates for each of
the given nodes. When speciﬁed, the number of coordinate tuples must match the number
coordinates
of given nodes, and be ordered to correspond to the given nodes in ascending order according
to index. Furthermore, coordinate1, coordinate2, coordinate3, offset1, offset2, or offset3
may not be speciﬁed.
A Float specifying an offset to apply to the value of the ﬁrst coordinate of the speciﬁed
nodes.
offset1
A Float specifying an offset to apply to the value of the second coordinate of the speciﬁed
nodes.
offset2
A Float specifying an offset to apply to the value of the third coordinate of the speciﬁed
nodes.
offset3
A DatumCsys object specifying the local coordinate system. If unspeciﬁed, the global
coordinate system will be used.
localCsys
A Boolean specifying whether to project nodes back to their original geometry. For example,
if a node is on a face, this method ﬁrst positions the node at the new location and then projects
it back to the original face. The default value is ON.
projectToGeometry
Return value
None.
Exceptions
A coordinate and an offset may not both be speciﬁed for the same coordinate component.
mergeNodes(...)
Merge the nodes of a part instance. The nodes must have been generated using the bottom-up meshing technique.
613
Abaqus Scripting Reference Guide
Assembly object

Required arguments
A sequence of MeshNode objects specifying the nodes to merge.
nodes
Optional arguments
A Float specifying the maximum distance between nodes that will be merged to a single
node. The location of the new node is the average position of the merged nodes. The
default value is 10–6.
tolerance
A Boolean specifying whether elements with the same connectivity after the merge will
merged into a single element. The default value is True.
removeDuplicateElements
Return value
None.
Exceptions
None.
mergeNodes(...)
Merge two nodes of a part instance. At least one of the two nodes must have been generated using the bottom-up
meshing technique.
Required arguments
A MeshNode object specifying the ﬁrst node to merge.
node1
A MeshNode object specifying the second node to merge.
node2
Optional arguments
A Boolean specifying whether elements with the same connectivity after the
merge will merged into a single element. The default value is True.
removeDuplicateElements
Return value
None.
Exceptions
None.
splitElement(...)
This method splits quadrilateral elements into triangular elements.
Abaqus Scripting Reference Guide
614
Assembly object

Required arguments
A sequence of quadrilateral MeshElement objects specifying the elements to split. Each
quadrilateral element is split into two triangular elements by the shorter diagonal.
elements
Optional arguments
None.
Return value
None.
Exceptions
None.
splitMeshEdge(...)
This method splits an edge of a quadrilateral or triangular element of a part instance.
Required arguments
A single MeshEdge object specifying the element edge to split.
edge
Optional arguments
A Float specifying the normalized distance along the edge at which to split. Possible values
are 0.0 parameter  1.0. The default value is 0.5.
parameter
Return value
None.
Exceptions
None.
swapMeshEdge(...)
This method swaps the diagonal of two adjacent triangular elements of a part instance.
Required arguments
A single MeshEdge object specifying the element edge to swap.
edge
Optional arguments
None.
Return value
None.
615
Abaqus Scripting Reference Guide
Assembly object

Exceptions
None.
generateMeshByOffset(...)
This method generates a solid or shell mesh from an orphan mesh surface by generating layers of elements that propagate
out normal to the surface boundary.
Required arguments
A Region object specifying the domain to be offset.
region
A Symbolic Constant specifying the type of mesh to be generated. Possible values
are SOLID or SHELL.
meshType
A Float specifying the total thickness of the solid layers. This argument applies only
when meshType=SOLID.
totalThickness
A Float specifying the distance between shell layers. This argument applies only
when meshType=SHELL.
distanceBetweenLayers
An Int specifying the number of element layers to be generated.
numLayers
Optional arguments
A Symbolic Constant specifying the direction of the offset. This argument is required
only when the given region relates to a shell mesh. Possible values are OUTWARD,
INWARD, and BOTH. The default value is OUTWARD.
offsetDirection
A Float specifying the magnitude of the initial offset. The default value is zero.
initialOffset
Boolean specifying whether the ﬁrst layer of nodes should be shared with nodes on
the base surface. The default value is False.
shareNodes
A Boolean specifying whether to delete the shell elements after the offset layers are
generated. The default value is False. This argument applies only when
meshType=SHELL.
deleteBaseElements
A Boolean specifying whether to use element-based thickness or nodal-based thickness.
The default value is False.
constantThicknessCorners
A Boolean specifying whether existing element sets that include base elements will be
extended to include corresponding offset elements. The default value is False.
extendElementSets
Return value
None.
Abaqus Scripting Reference Guide
616
Assembly object

Exceptions
None.
redoMeshEdit()
This method executes the edit mesh or the bottom-up meshing operation most recently undone by the undoMeshEdit
method on an assembly. A redo action must be currently available for the assembly. This implies that the user must
have executed the undoMeshEdit method on the assembly and that the user has not subsequently executed any
further edit mesh commands on the assembly. It also implies that the user provided a sufﬁcient cache allowance to
store the undo operation.
Arguments
None.
Return value
None.
Exceptions
None.
undoMeshEdit()
This method undoes the most recent edit mesh or the bottom-up meshing operation on an assembly and restores the
mesh on the affected part instance to its previous state. An edit mesh undo action must be available for the assembly.
This implies that prior to executing an edit mesh command on the assembly, the user enabled edit mesh undo with a
sufﬁcient cache allowance to store the edit mesh operation.
Arguments
None.
Return value
None.
Exceptions
None.
617
Abaqus Scripting Reference Guide
Assembly object

Part object
The following commands operate on Part objects. For more information about the Part object, see Part object.
Access
import meshEdit
adjustMidsideNode(...)
This method is used to adjust the midside node of second-order elements of an orphan mesh part.
Required arguments
A sequence of Node objects specifying the nodes towards which connected midside nodes
will be biased.
cornerNodes
A Float specifying the normalized distance along the edge of the midside nodes. Possible
values are 0.0 parameter  1.0, where 0.0 speciﬁes the position of the corner node. The
default value is 0.5.
parameter
Optional arguments
None.
Return value
None.
Exceptions
None.
cleanMesh(...)
This method is used to collapse short element edges and delete collapsed elements, or grow short element edges, on
an orphan mesh part composed of linear elements.
Required arguments
A Float specifying the edge length tolerance. During the operation, edges shorter than
the given tolerance will be collapsed, or grown to the speciﬁed length.
mergeTolerance
Optional arguments
A Boolean specifying whether short element edges will be grown to the speciﬁed tolerance. Default
is False, meaning short edges will be collapsed.
growEdges
Abaqus Scripting Reference Guide
618
Part object

The elements to consider as the domain for the operation. By default all elements on the part are
considered. The elements may be given as a MeshElementArray, a list of MeshElement objects,
a Set, or a list of Set objects.
elements
A MeshEdge specifying a reference edge to indicate a topological direction in a structured mesh
that will limit which edges within the element domain are considered. That is, only edges that are
refEdge
found to be topologically parallel to the given reference edge will be considered by the operation.
By default all edges of the element domain are considered, unless thicknessDir is speciﬁed, in
which case the operation will attempt to determine the topological edges from the thickness
direction.
A tuple of two or three Floats indicating a vector along which element edge lengths will be
measured.
thicknessDir
A Boolean indicating whether element edges will be all grown in the direction of the thickness
vector speciﬁed by thicknessDir. This argument is ignored unless growEdges is True and
moveLayers
thicknessDir is provided. When this argument is True the growth of any given element edge will
no longer be constrained by short edges on neighboring elements, but elements could move from
their original positions in cases where there are multiple adjacent layers of thin elements. The
default value is False.
Return value
None.
Exceptions
None.
collapseMeshEdge(...)
This method collapses an edge of a quadrilateral or triangular element of an orphan mesh part or part instance.
Required arguments
A single MeshEdge object specifying the element edge to collapse.
edge
A SymbolicConstant specifying the method used to collapse the edge. Possible values
are FORWARD, REVERSE, and AVERAGE.
collapseMethod
Optional arguments
None.
Return value
None.
Exceptions
None.
619
Abaqus Scripting Reference Guide
Part object

combineElement(...)
This method combines two triangular elements of an orphan mesh part or an Abaqus native mesh.
Required arguments
A sequence of triangular MeshElement objects specifying the elements to combine.
elements
Optional arguments
None.
Return value
None.
Exceptions
None.
convertSolidMeshToShell()
This method removes all solid elements from an orphan mesh part and creates triangular or quadrilateral shell elements
along their outer faces.
Arguments
None.
Return value
None.
Exceptions
None.
deleteElement(...)
This method deletes the given elements from an orphan mesh part or an Abaqus native mesh. If the elements belong
to an Abaqus native mesh then the elements must have been generated using the bottom-up meshing technique.
Required arguments
A sequence of MeshElement objects or a Set object containing elements.
elements
Optional arguments
A Boolean specifying whether to delete all those associated nodes that become
unreferenced after the given elements are deleted. The default value is OFF.
deleteUnreferencedNodes
Abaqus Scripting Reference Guide
620
Part object

Return value
None.
Exceptions
None.
deleteNode(...)
This method deletes the given nodes from an orphan mesh part.
Required arguments
A sequence of MeshNode objects or a Set object containing nodes.
nodes
Optional arguments
A Boolean specifying whether to delete all those associated nodes that become
unreferenced after the given nodes and the connected elements are deleted. The
default value is OFF.
deleteUnreferencedNodes
Return value
None.
Exceptions
None.
editNode(...)
This method changes the coordinates of the given nodes on an orphan mesh part or on an Abaqus native mesh.
Required arguments
A sequence of MeshNode objects or a Set object containing nodes.
nodes
Optional arguments
A Float specifying the value of the ﬁrst coordinate. If coordinate1 and offset1 are unspeciﬁed,
the existing value does not change.
coordinate1
A Float specifying the value of the second coordinate. If coordinate2 and offset2 are
unspeciﬁed, the existing value does not change.
coordinate2
A Float specifying the value of the third coordinate. If coordinate3 and offset3 are unspeciﬁed,
the existing value does not change.
coordinate3
A sequence of three-dimensional coordinate tuples specifying the coordinates for each of
the given nodes. When speciﬁed, the number of coordinate tuples must match the number
coordinates
621
Abaqus Scripting Reference Guide
Part object

of given nodes, and be ordered to correspond to the given nodes in ascending order according
to index. Furthermore, coordinate1, coordinate2, coordinate3, offset1, offset2, or offset3
may not be speciﬁed.
A Float specifying an offset to apply to the value of the ﬁrst coordinate of the speciﬁed
nodes.
offset1
A Float specifying an offset to apply to the value of the second coordinate of the speciﬁed
nodes.
offset2
A Float specifying an offset to apply to the value of the third coordinate of the speciﬁed
nodes.
offset3
A DatumCsys object specifying the local coordinate system. If unspeciﬁed, the global
coordinate system will be used.
localCsys
A Boolean specifying whether to project nodes back to their original geometry. For example,
if a node is on a face, this method ﬁrst positions the node at the new location and then projects
it back to the original face. The default value is ON.
projectToGeometry
Return value
None.
Exceptions
A coordinate and an offset may not both be speciﬁed for the same coordinate component.
projectNode(...)
This method projects the given nodes onto a mesh entity, geometric entity, or a datum object. The nodes may belong
to an orphan mesh part or to an Abaqus native mesh.
Required arguments
A sequence of MeshNode objects to be projected.
nodes
An object specifying the target for the node projection operation. The projectionReference
can be any one of the following objects: MeshNode, MeshEdge, MeshFace, Vertex, Edge,
Face, DatumPoint, DatumAxis, or DatumPlane.
projectionReference
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
622
Part object

generateMesh(...)
This method generates a new mesh on an orphan mesh part based on the original mesh.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the element shape to be used for meshing. Possible values are:
elemShape
TRI
Reﬁne a planar triangular mesh and replace it with a new one. If no element sizes are attached,
the new mesh will be governed by the sizes of the boundary edges in the old mesh.
TET
Create a tetrahedral mesh from a closed shell of triangular elements.
Return value
None.
Exceptions
None.
generateMeshByOffset(...)
This method generates a solid or shell mesh from an orphan mesh surface by generating layers of elements that propagate
out normal to the surface boundary.
Required arguments
A Region object specifying the domain to be offset.
region
A Symbolic Constant specifying the type of mesh to be generated. Possible values
are SOLID or SHELL.
meshType
A Float specifying the total thickness of the solid layers. This argument applies only
when meshType=SOLID.
totalThickness
A Float specifying the distance between shell layers. This argument applies only
when meshType=SHELL.
distanceBetweenLayers
An Int specifying the number of element layers to be generated.
numLayers
623
Abaqus Scripting Reference Guide
Part object

Optional arguments
A Symbolic Constant specifying the direction of the offset. This argument is required
only when the given region relates to a shell mesh. Possible values are OUTWARD,
INWARD, and BOTH. The default value is OUTWARD.
offsetDirection
A Float specifying the magnitude of the initial offset. The default value is zero.
initialOffset
Boolean specifying whether the ﬁrst layer of nodes should be shared with nodes on
the base surface. The default value is False.
shareNodes
A Boolean specifying whether to delete the shell elements after the offset layers are
generated. The default value is False. This argument applies only when
meshType=SHELL.
deleteBaseElements
A Boolean specifying whether to use element-based thickness or nodal-based thickness.
The default value is False.
constantThicknessCorners
A Boolean specifying whether existing element sets that include base elements will be
extended to include corresponding offset elements. The default value is False.
extendElementSets
Return value
None.
Exceptions
None.
mergeNodes(...)
Merge the nodes of an orphan mesh part, or nodes that were generated using the bottom-up meshing technique.
Required arguments
A sequence of Node objects specifying the nodes to merge.
nodes
Optional arguments
A Float specifying the maximum distance between nodes that will be merged to a single
node. The location of the new node is the average position of the merged nodes. The
default value is 10–6.
tolerance
A Boolean specifying whether elements with the same connectivity after the merge will
merged into a single element. The default value is True.
removeDuplicateElements
A Boolean specifying which node labels will remain after nodes are merged. If True then
the highest node labels are kept; when False the lowest node labels are kept. The default
value is False. This argument applies only to merging of orphan mesh nodes.
keepHighLabels
Abaqus Scripting Reference Guide
624
Part object

Return value
None.
Exceptions
None.
mergeElement(...)
Merge a selection of elements arranged in layers on an orphan mesh part into a single layer.
Required arguments
A MeshEdge of one of the speciﬁed elements that serves as a reference edge to indicate the
topological direction for merging elements. All speciﬁed elements must be reachable by topological
navigation from this element edge, and the topological direction must be unambiguous.
edge
A MeshElementArray, a list of MeshElement objects, a Set, or a list of Set objects containing the
elements to be included in the merge operation.
elements
Optional arguments
None.
Return value
None.
Exceptions
None.
mergeNodes(...)
Merge two nodes of an orphan mesh part or an Abaqus native mesh. If the nodes belong to an Abaqus native mesh
then at least one of the two nodes must have been generated using the bottom-up meshing technique.
Required arguments
A MeshNode object specifying the ﬁrst node to merge.
node1
A MeshNode object specifying the second node to merge.
node2
Optional arguments
A Boolean specifying whether elements with the same connectivity after the merge will
merged into a single element. The default value is True.
removeDuplicateElements
A Boolean specifying which node label will remain after nodes are merged. If True
then the higher node label is kept; when False the lower node label is kept. The default
value is False. This argument applies only to merging of orphan mesh nodes.
keepHighLabels
625
Abaqus Scripting Reference Guide
Part object

Return value
None.
Exceptions
None.
orientElements(...)
This method orients the stack direction of elements in a continuum shell or gasket mesh.
Required arguments
A sequence of MeshElement objects specifying the elements to orient.
pickedElements
A MeshFace object specifying a reference top face that indicates the desired
orientation.
referenceRegion
Optional arguments
None.
Return value
None.
Exceptions
None.
removeElementSize()
This method removes the global element size from an orphan mesh part.
Arguments
None.
Return value
None.
Exceptions
None.
renumberElement(...)
This method assigns new labels to orphan mesh elements.
Required arguments
None.
Abaqus Scripting Reference Guide
626
Part object

Optional arguments
Either startLabel and increment, or offset, or labels must be speciﬁed.
A MeshElementArray or a tuple or list of MeshElement objects, or a Set containing elements
to be renumbered. If unspeciﬁed, all elements in the part will be renumbered.
elements
A positive Int specifying the new label for the ﬁrst element in elements.
startLabel
A positive Int specifying the increment used for computation of new labels for all consecutive
elements in elements.
increment
An Int by which existing labels of the speciﬁed elements will be offset.
offset
A list of labels for the speciﬁed elements. The length of this list must match the number of
speciﬁed elements.
labels
Return value
None.
Exceptions
Error: Renumbering can be applied to orphan mesh parts only
Renumbering is attempted on a native part:
Error: Either startLabel and increment or offset must be
speciﬁed
Renumbering data is speciﬁed incorrectly:
Error: Speciﬁed data will result in invalid labels
Renumbering will result in invalid labels:
Error: Speciﬁed data will result in conﬂicting labels
Renumbering will result in conﬂicting labels:
renumberNode(...)
This method assigns new labels to orphan mesh nodes.
Required arguments
None.
Optional arguments
Either startLabel and increment, or offset, or labels must be speciﬁed.
A MeshNodeArray or a tuple or list of MeshNode objects, or a Set containing nodes to be
renumbered. If unspeciﬁed, all nodes in the part will be renumbered.
nodes
A positive Int specifying the new label for the ﬁrst node in nodes.
startLabel
A positive Int specifying the increment used for computation of new labels for all consecutive
nodes in nodes.
increment
627
Abaqus Scripting Reference Guide
Part object

An Int by which existing labels of the speciﬁed nodes will be offset.
offset
A list of labels for the speciﬁed nodes. The length of this list must match the number of
speciﬁed nodes.
labels
Return value
None.
Exceptions
Error: Renumbering can be applied to orphan mesh parts only
Renumbering is attempted on a native part:
Error: Either startLabel and increment or offset must be
speciﬁed
Renumbering data is speciﬁed incorrectly:
Error: Speciﬁed data will result in invalid labels
Renumbering will result in invalid labels:
Error: Speciﬁed data will result in conﬂicting labels
Renumbering will result in conﬂicting labels:
setElementSize(...)
This method sets the global element size for an orphan mesh part.
Required arguments
A Float specifying the desired element size.
size
Optional arguments
None.
Return value
None.
Exceptions
None.
splitElement(...)
This method splits quadrilateral elements of an orphan mesh part or a Abaqus native mesh into triangular elements.
Required arguments
A sequence of quadrilateral MeshElement objects specifying the elements to split. Each
quadrilateral element is split into two triangular elements by the shorter diagonal.
elements
Abaqus Scripting Reference Guide
628
Part object

Optional arguments
None.
Return value
None.
Exceptions
None.
splitMeshEdge(...)
This method splits an edge of a quadrilateral or triangular element of an orphan mesh part or an Abaqus native mesh.
Required arguments
A single MeshEdge object specifying the element edge to split.
edge
Optional arguments
A Float specifying the normalized distance along edge at which to split. Possible values are
0.0 parameter  1.0. The default value is 0.5.
parameter
Return value
None.
Exceptions
None.
subdivideElement(...)
Subdivide a selection of elements on an orphan mesh part in one or more directions.
Required arguments
None.
Optional arguments
A MeshElementArray, a list of MeshElement objects, a Set, or a list of Set objects containing the
elements to be subdivided. By default all the elements of the part are subdivided.
elements
An Int specifying the number of resulting elements for each input element in each direction of the
subdivision. If face or edge are not speciﬁed, elements will be subdivided according to this number
in all possible directions. Must be greater than one. Default is 2.
divisionNumber
A MeshFace object that serves as a reference for indicating two topological directions for the
subdivision operation. Must be a face of one of the speciﬁed elements, and all speciﬁed elements
face
629
Abaqus Scripting Reference Guide
Part object

must be reachable by topological navigation from this element face. May not be combined with
edge.
A MeshEdge object that serves as a reference for indicating a single topological direction for the
subdivision operation. Must be an edge of one of the speciﬁed elements, and all speciﬁed elements
edge
must be reachable by topological navigation from this element edge. May not be combined with
face.
Return value
None.
Exceptions
None.
swapMeshEdge(...)
This method swaps the diagonal of two adjacent triangular elements of an orphan mesh part or an Abaqus native mesh.
Required arguments
A single MeshEdge object specifying the element edge to swap.
edge
Optional arguments
None.
Return value
None.
Exceptions
None.
wrapMesh(...)
This method wraps a planar orphan mesh part about the Z-axis.
Required arguments
A Float specifying the radius of the cylinder about which the part is to be wrapped. The wrapping
procedure will relocate a node at point ( , ) on the planar mesh to (
), where  is the speciﬁed
radius,  = , and = .
radius
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
630
Part object

Exceptions
None.
redoMeshEdit()
This method executes the edit mesh or the bottom-up meshing operation most recently undone by the undoMeshEdit
method on an part. A redo action must be currently available for the part. This implies that the user must have executed
the undoMeshEdit method on the part and that the user has not subsequently executed any further edit mesh
commands on the assembly. It also implies that the user provided a sufﬁcient cache allowance to store the undo
operation.
Arguments
None.
Return value
None.
Exceptions
None.
undoMeshEdit()
This method undoes the most recent edit mesh or the bottom-up meshing operation on a part and restores the mesh to
its previous state. An edit mesh undo action must be available for the part. This implies that prior to executing an edit
mesh command on the part, the user enabled edit mesh undo with a sufﬁcient cache allowance to store the edit mesh
operation.
Arguments
None.
Return value
None.
Exceptions
None.
631
Abaqus Scripting Reference Guide
Part object

MeshEditOptions object
The MeshEditOptions object stores settings that specify the behavior when editing meshes on parts or part instances.
The MeshEditOptions object has no constructor. Abaqus creates the MeshEditOptions member when a session is
started.
Access
mdb.meshEditOptions
setValues(...)
This method modiﬁes the MeshEditOptions object.
Required arguments
None.
Optional arguments
A Float specifying the maximum allowable mesh edit undo cache size in millions of
elements. If this value is set to at least the number of elements on a given part or part
maxUndoCacheElements
instance, at least one level of undo/redo capability is assured for subsequent mesh edit
operations on that part or part instance. The default value is 0.0.
A Boolean specifying whether undo/redo of mesh edit operations will be enabled. If
enableUndo =OFF any existing cache for undo/redo operations will be cleared for all parts
and assemblies in all models. The default value is OFF.
enableUndo
A Boolean specifying the suspension of undo/redo for mesh edit operations. When undo/redo
is suspended, undo/redo will not be available after subsequent mesh edit operations on a
_suspendUndo
given part or part instances. Any pre-existing cache for mesh edit operations on other parts
or assemblies in any model will be unaffected. The default value is OFF.
If you change the value of enableUndo to True, Abaqus sets _suspendUndo to False.
Return value
None.
Exceptions
None.
Members
The MeshEditOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
632
MeshEditOptions object

Engineering Feature commands
A speciﬁc type of engineering feature object is designed for each type of engineering feature.
In this section:
•
EngineeringFeature object
•
AssembledFastener object
•
ContourIntegral object
•
Crack object
•
DebondVCCT object
•
DiscreteFastener object
•
Fastener object
•
HeatCapacitance object
•
Inertia object
•
NonstructuralMass object
•
PointFastener object
•
PointMassInertia object
•
SpringDashpot object
•
SpringDashpotToGround object
•
TwoPointSpringDashpot object
•
XFEMCrack object
•
Imperfection object
•
FileImperfection object
•
InputImperfection object
•
DataImperfection object
633

EngineeringFeature object
The EngineeringFeature object is a container for various speciﬁc engineering feature repositories.
The EngineeringFeature object has no explicit constructor or methods.
Access
import part
mdb.models[name].parts[name].engineeringFeatures
import assembly
mdb.models[name].rootAssembly.engineeringFeatures
assignSeam(...)
This method creates a seam crack along an edge or a face.
Required arguments
A sequence of Region objects specifying the domain of the seam crack. The Region objects
must be faces or edges.
regions
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteSeam(...)
This method deletes a seam crack.
Required arguments
A sequence of Region objects specifying the domain of the seam crack. The Region objects
must be faces or edges.
regions
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
634
EngineeringFeature object

Members
The EngineeringFeature object can have the following members:
A repository of Inertia objects.
inertias
A repository of Crack objects.
cracks
A repository of Fastener objects.
fasteners
A repository of SpringDashpot objects.
springDashpots
A repository of Imperfection objects.
imperfections
635
Abaqus Scripting Reference Guide
EngineeringFeature object

AssembledFastener object
The AssembledFastener object deﬁnes an assembled fastener.
The AssembledFastener object is derived from the Fastener object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.fasteners[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.fasteners[name]
AssembledFastener(...)
This method creates an AssembledFastener object. Although the constructor is available both for parts and for the
assembly, AssembledFastener objects are currently supported only under the assembly.
Path
mdb.models[name].parts[name].engineeringFeatures.AssembledFastener
mdb.models[name].rootAssembly.engineeringFeatures.AssembledFastener
Required arguments
A String specifying the repository key.
name
A Region object specifying the region of attachment points to which assembled fasteners
are applied.
region
A String specifying the name of the template model.
templateModel
A Region object specifying the template model control point set. The set must contain
a single node or vertex.
controlSet
A sequence of Strings specifying the names of the template model surfaces that are
referenced by tie or coupling constraints.
templateSurfaces
A sequence of Strings specifying the names of the main model surfaces that will be
substituted for the template model constraint surfaces.
assignedSurfaces
A String specifying the name of the property preﬁx string. This string will be prepended
to every property name as it is copied to the main model from the template model.
propertyPreﬁx
Optional arguments
A SymbolicConstant specifying the method used to orient the virtual instances of the template
model at each attachment point. Possible values are NORMALS and CSYS. The default value
is NORMALS.
orientMethod
Abaqus Scripting Reference Guide
636
AssembledFastener object

None or a DatumCsys object specifying the local coordinate system. If localCsys=None, the
global coordinate system is used. When this member is queried, it returns an Int. The default
value is None.
localCsys
This argument applies only when orientMethod=CSYS.
A String specifying the name of the property generation script. The default value is an empty
string.
scriptName
Return value
An AssembledFastener object.
Exceptions
None.
setValues(...)
This method modiﬁes the AssembledFastener object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AssembledFastener  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The AssembledFastener object has members with the same names and descriptions as the arguments to the
AssembledFastener  method.
In addition, the AssembledFastener object has the following member:
A Boolean specifying whether the fastener is suppressed or not. The default value is
OFF.
suppressed
637
Abaqus Scripting Reference Guide
AssembledFastener object

ContourIntegral object
The ContourIntegral object deﬁnes contour integral objects on an region. Currently only assembly regions are supported.
The ContourIntegral object is derived from the Crack object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.cracks[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.cracks[name]
ContourIntegral(...)
This method creates a ContourIntegral object. Although the constructor is available both for parts and for the assembly,
ContourIntegral objects are currently supported only under the assembly.
Path
mdb.models[name].parts[name].engineeringFeatures.ContourIntegral
mdb.models[name].rootAssembly.engineeringFeatures.ContourIntegral
Required arguments
A String specifying the repository key.
name
A RegionArray object specifying the crack-front region to which the contour integral is
applied. If the crack-front consists of a single region, a Region object may be speciﬁed
instead of a sequence with a single item in it.
crackFront
A RegionArray object specifying the crack-tip region to which the contour integral is
applied. If the crack-tip consists of a single region, a Region object may be speciﬁed
instead of a sequence with a single item in it.
crackTip
A SymbolicConstant specifying how the virtual crack extension direction vectors are
deﬁned. Possible values are CRACK_NORMAL and Q_VECTORS.
extensionDirectionMethod
Optional arguments
A Boolean specifying whether the crack is deﬁned on a half model (about a symmetry plane)
or whether it is deﬁned on the whole model. The default value is OFF.
symmetric
A Boolean specifying whether the regions speciﬁed by crackFront and crackTip are speciﬁed
using a single region or tuples of region objects. The default value is OFF.
listOfRegions
A String specifying the name of the crack-front region generated from the tuple of regions
specifying the crack-front region. This argument is valid only when listOfRegions is ON.
The default value is name+“Front.”
crackFrontName
Abaqus Scripting Reference Guide
638
ContourIntegral object

A String specifying the name of the crack-tip region generated from the tuple of regions
specifying the crack-tip region. This parameter is valid only when listOfRegions=ON. The
default value is name+“Tip.”
crackTipName
A sequence of sequences of Floats specifying the two points of the vector that describes the
crack normal direction. Each point is deﬁned by a tuple of two or three coordinates indicating
crackNormal
its position. This argument is required only when
extensionDirectionMethod=CRACK_NORMAL. The default value is an empty sequence.
A sequence of sequences of sequences of Floats specifying the vectors that indicate the set
of crack extension directions. Each vector is described by a tuple of two points, and each
qVectors
point is described by a tuple of two or three coordinates indicating its position. This argument
is required only when extensionDirectionMethod=Q_VECTORS. The default value is an
empty sequence.
A Float specifying the position of the midside node along the edges of the second-order
elements that radiate from the crack tip. Possible values are 0.0 midNodeParameter  1.0.
The default value is 0.5.
midNodePosition
A SymbolicConstant specifying the crack-tip singularity. Possible values are NONE,
SINGLE_NODE, and DUPLICATE_NODES. The default value is NONE.
collapsedElementAtTip
Return value
A ContourIntegral object.
Exceptions
None.
setValues(...)
This method modiﬁes the ContourIntegral object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ContourIntegral  method, except for
the name argument.
Return value
None.
Exceptions
None.
639
Abaqus Scripting Reference Guide
ContourIntegral object

Members
The ContourIntegral object has members with the same names and descriptions as the arguments to the ContourIntegral
method.
In addition, the ContourIntegral object has the following member:
A Boolean specifying whether the crack is suppressed or not. The default value is
OFF.
suppressed
Corresponding analysis keywords
•
*CONTOUR INTEGRAL
Abaqus Scripting Reference Guide
640
ContourIntegral object

Crack object
The Crack object is the abstract base type for ContourIntegral and future crack objects.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.cracks[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.cracks[name]
resume()
This method resumes the crack that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the crack.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Crack object has the following members:
A String specifying the repository key.
name
A Boolean specifying whether the crack is suppressed or not. The default value is
OFF.
suppressed
641
Crack object

DebondVCCT object
The DebondVCCT object deﬁnes the parameters needed to activate crack propagation using VCCT.
The DebondVCCT object is derived from the Crack object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.cracks[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.cracks[name]
DebondVCCT(...)
This method creates a DebondVCCT object. Although the constructor is available both for parts and for the assembly,
DebondVCCT objects are currently supported only under the assembly.
Path
mdb.models[name].parts[name].engineeringFeatures.DebondVCCT
mdb.models[name].rootAssembly.engineeringFeatures.DebondVCCT
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the DebondVCCT object is
created.
initiationStep
A String specifying the name of the SurfaceToSurfaceContactStd object that deﬁnes
the surface to surface interaction for the crack surfaces.
surfToSurfInteraction
Optional arguments
A SymbolicConstant specifying whether the debond force between the two surfaces
at the crack tip is to be released immediately or gradually during the following
debondingForceAmplitude
increment after debonding. Possible values are STEP and RAMP. The default value
is STEP.
An Int specifying the frequency at which output will be printed to DAT ﬁle. The
default value is 1.
printToDATFrequency
Return value
A DebondVCCT object.
Exceptions
None.
Abaqus Scripting Reference Guide
642
DebondVCCT object

setValues(...)
This method modiﬁes the DebondVCCT object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DebondVCCT  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The DebondVCCT object has members with the same names and descriptions as the arguments to the DebondVCCT
method.
In addition, the DebondVCCT object has the following member:
A Boolean specifying whether the crack is suppressed or not. The default value is
OFF.
suppressed
Corresponding analysis keywords
•
*DEBOND
643
Abaqus Scripting Reference Guide
DebondVCCT object

DiscreteFastener object
The DiscreteFastener object deﬁnes a discrete fastener.
The DiscreteFastener object is derived from the Fastener object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.fasteners[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.fasteners[name]
DiscreteFastener(...)
This method creates a DiscreteFastener object. Although the constructor is available both for parts and for the assembly,
DiscreteFastener objects are currently supported only under the assembly.
Path
mdb.models[name].parts[name].engineeringFeatures.DiscreteFastener
mdb.models[name].rootAssembly.engineeringFeatures.DiscreteFastener
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the fastener is applied.
region
The SymbolicConstant WHOLE_SURFACE or a Float specifying the coupling
inﬂuence radius.
inﬂuenceRadius
Optional arguments
A Boolean specifying whether to constrain rotational displacement component about the
1-direction. The default value is ON.
ur1
A Boolean specifying whether to constrain rotational displacement component about the
2-direction. The default value is ON.
ur2
A Boolean specifying whether to constrain rotational displacement component about the
3-direction. The default value is ON.
ur3
A SymbolicConstant specifying the coupling method used to couple the displacement and rotation
of each attachment point to the average motion of the surface nodes within the radius of inﬂuence
coupling
from the fastening point. Possible values are CONTINUUM and STRUCTURAL. The default
value is CONTINUUM.
A SymbolicConstant specifying the rotational coupling method used. Possible values are
ROTATIONAL_CONTINUUM and ROTATIONAL_STRUCTURAL. The default value is
ROTATIONAL_STRUCTURAL.
rotatonalCoupling
Abaqus Scripting Reference Guide
644
DiscreteFastener object

A SymbolicConstant specifying the weighting scheme to be used to weight the contribution of
the displacements of the surface nodes within the radius of inﬂuence to the motion of the fastening
weightingMethod
point. UNIFORM, LINEAR, QUADRATIC, and CUBIC indicate uniform, linear decreasing,
quadratic polynomial decreasing, and cubic polynomial monotonic decreasing weight distributions.
Possible values are UNIFORM, LINEAR, QUADRATIC, and CUBIC. The default value is
UNIFORM.
None or a DatumCsys object specifying the local coordinate system of fastener couplings. If
localCsys=None, couplings are deﬁned in the global coordinate system. When this member is
queried, it returns an Int. The default value is None.
localCsys
Return value
A DiscreteFastener object.
Exceptions
None.
setValues(...)
This method modiﬁes the DiscreteFastener object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DiscreteFastener method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The DiscreteFastener object has members with the same names and descriptions as the arguments to the DiscreteFastener
method.
In addition, the DiscreteFastener object has the following member:
A Boolean specifying whether the fastener is suppressed or not. The default value is
OFF.
suppressed
Corresponding analysis keywords
•
*COUPLING, *DISTRIBUTING
645
Abaqus Scripting Reference Guide
DiscreteFastener object

Fastener object
The Fastener object is the abstract base type for PointFastener, DiscreteFastener, and AssembledFastener.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.fasteners[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.fasteners[name]
resume()
This method resumes the fastener that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the fastener.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Fastener object has the following members:
A String specifying the repository key.
name
A Boolean specifying whether the fastener is suppressed or not. The default value is
OFF.
suppressed
Abaqus Scripting Reference Guide
646
Fastener object

HeatCapacitance object
The HeatCapacitance object deﬁnes point heat capacitance on a part or an assembly region.
The HeatCapacitance object is derived from the Inertia object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.inertias[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.inertias[name]
HeatCapacitance(...)
This method creates a HeatCapacitance object.
Path
mdb.models[name].parts[name].engineeringFeatures.HeatCapacitance
mdb.models[name].rootAssembly.engineeringFeatures.HeatCapacitance
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the heat capacitance is applied.
region
A sequence of sequences of Floats specifying heat capacitance properties. The items in the
table data are described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
The table data specify the following:
•
Heat capacitance magnitude, 
 (density × speciﬁc heat × volume).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
647
HeatCapacitance object

Return value
A HeatCapacitance object.
Exceptions
None.
setValues(...)
This method modiﬁes the HeatCapacitance object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the HeatCapacitance  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The HeatCapacitance object has members with the same names and descriptions as the arguments to the HeatCapacitance
method.
In addition, the HeatCapacitance object has the following member:
A Boolean specifying whether the inertia is suppressed or not. The default value is
OFF.
suppressed
Corresponding analysis keywords
•
*HEATCAP
Abaqus Scripting Reference Guide
648
HeatCapacitance object

Inertia object
The Inertia object is the abstract base type for HeatCapacitance, NonstructuralMass, and PointMassInertia.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.inertias[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.inertias[name]
resume()
This method resumes the inertia that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the inertia.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Inertia object has the following members:
A String specifying the repository key.
name
A Boolean specifying whether the inertia is suppressed or not. The default value is
OFF.
suppressed
649
Inertia object

NonstructuralMass object
The NonstructuralMass object deﬁnes the mass contribution from nonstructural features into the model.
The NonstructuralMass object is derived from the Inertia object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.inertias[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.inertias[name]
NonstructuralMass(...)
This method creates a NonstructuralMass object.
Path
mdb.models[name].parts[name].engineeringFeatures.NonstructuralMass
mdb.models[name].rootAssembly.engineeringFeatures.NonstructuralMass
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the mass is applied.
region
A SymbolicConstant specifying the units used to specify the nonstructural mass. Possible
values are TOTAL_MASS, MASS_PER_VOLUME, MASS_PER_AREA, and
MASS_PER_LENGTH.
units
A Float specifying the mass magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying the distribution of the nonstructural mass. Possible values are
MASS_PROPORTIONAL and VOLUME_PROPORTIONAL. The default value is
MASS_PROPORTIONAL.
distribution
The distribution argument applies only when units=TOTAL_MASS.
Return value
A NonstructuralMass object.
Exceptions
None.
Abaqus Scripting Reference Guide
650
NonstructuralMass object

setValues(...)
This method modiﬁes the NonstructuralMass object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the NonstructuralMass  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The NonstructuralMass object has members with the same names and descriptions as the arguments to the
NonstructuralMass  method.
In addition, the NonstructuralMass object has the following member:
A Boolean specifying whether the inertia is suppressed or not. The default value is
OFF.
suppressed
Corresponding analysis keywords
•
*NONSTRUCTURAL MASS
651
Abaqus Scripting Reference Guide
NonstructuralMass object

PointFastener object
The PointFastener object deﬁnes a point fastener.
The PointFastener object is derived from the Fastener object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.fasteners[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.fasteners[name]
PointFastener(...)
This method creates a PointFastener object. Although the constructor is available both for parts and for the assembly,
PointFastener objects are currently supported only under the assembly.
Path
mdb.models[name].parts[name].engineeringFeatures.PointFastener
mdb.models[name].rootAssembly.engineeringFeatures.PointFastener
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which fasteners are applied.
region
A Float specifying the physical fastener radius.
physicalRadius
Optional arguments
A VertexArray object of length 2 specifying the direction of projection. Instead of
through a Vertex, each point might be speciﬁed through a tuple of coordinates. The
default value is None.
directionVector
A RegionArray object specifying surfaces to be fastened. The default value is
MODEL.
targetSurfaces
A Boolean specifying whether to constrain the rotational displacement component
about the 1-direction. The default value is ON.
ur1
A Boolean specifying whether to constrain the rotational displacement component
about the 2-direction. The default value is ON.
ur2
A Boolean specifying whether to constrain the rotational displacement component
about the 3-direction. The default value is ON.
ur3
Abaqus Scripting Reference Guide
652
PointFastener object

A SymbolicConstant specifying the method used to locate points for attaching
fasteners. Possible values are FACETOFACE, EDGETOFACE, FACETOEDGE,
and EDGETOEDGE. The default value is FACETOFACE.
attachmentMethod
The SymbolicConstant DEFAULT or a Float specifying the maximum distance
from the projection point on a connected surface within which the nodes on that
inﬂuenceRadius
surface must lie to contribute to the motion of the projection point. If the value is
DEFAULT, a radius is computed from the fastener diameter and the surface facet
lengths. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a Float specifying the distance from the
positioning points within which the connected points must lie. The default value
is DEFAULT.
searchRadius
The SymbolicConstant ALL or an Int specifying the maximum number of layers
for each fastener. If the value is ALL, the maximum possible number of layers
within the searchRadius will be used for each fastener. The default value is ALL.
maximumLayers
A SymbolicConstant specifying the coupling method used to couple the
displacement and rotation of each attachment point to the average motion of the
coupling
surface nodes within the radius of inﬂuence from the fastener projection point.
Possible values are CONTINUUM and STRUCTURAL. The default value is
CONTINUUM.
A SymbolicConstant specifying the weighting scheme to be used to weight the
contribution of the displacements of the surface nodes within the radius of inﬂuence
weightingMethod
to the motion of the fastener projection point. UNIFORM, LINEAR, QUADRATIC,
and CUBIC indicate uniform, linear decreasing, quadratic polynomial decreasing,
and cubic polynomial monotonic decreasing weight distributions. Possible values
are UNIFORM, LINEAR, QUADRATIC, and CUBIC. The default value is
UNIFORM.
A Boolean specifying whether to adjust localCsys such that the local z-axis for
each fastener is normal to the surface that is closest to the reference node for that
fastener. The default value is ON.
adjustOrientation
None or a DatumCsys object specifying the local coordinate system. If
localCsys=None, the global coordinate system is used. When this member is
queried, it returns an Int. The default value is None.
localCsys
A SymbolicConstant specifying the fastener connection type. Possible values are
CONNECTOR and BEAM_MPC. The default value is CONNECTOR.
connectionType
A String specifying the connector section assigned to generated connectors. The
default value is an empty string.
sectionName
None or a DatumCsys object specifying the local coordinate system of the ﬁrst
connector point in generated connectors. If connectorOrientationLocalCsys1=None,
connectorOrientationLocalCsys1
the degrees of freedom are deﬁned in the global coordinate system. When this
member is queried, it returns an Int. The default value is None.
653
Abaqus Scripting Reference Guide
PointFastener object

A SymbolicConstant specifying the axis of a datum coordinate system about which
an additional rotation is applied for the ﬁrst point in generated connectors. Possible
values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis1
A Float specifying the angle of the additional rotation for the ﬁrst point in generated
connectors. The default value is 0.0.
angle1
A Boolean specifying whether or not the second connector point in generated
connectors is to use the same local coordinate system, axis, and angle as the ﬁrst
point. The default value is ON.
orient2SameAs1
None or a DatumCsys object specifying the local coordinate system of the second
connector point in generated connectors. If connectorOrientationLocalCsys2=None,
connectorOrientationLocalCsys2
the degrees of freedom are deﬁned in the global coordinate system. When this
member is queried, it returns an Int. The default value is None.
A SymbolicConstant specifying the axis of a datum coordinate system about which
an additional rotation is applied for the second point in generated connectors.
Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis2
A Float specifying the angle of the additional rotation for the second point in
generated connectors. The default value is 0.0.
angle2
A Boolean specifying whether the analysis product should leave targetSurfaces in
the given unsorted order, or sort them by proximity to determine the connectivity
of fastening points. The default value is OFF.
unsorted
Return value
A PointFastener object.
Exceptions
None.
setValues(...)
This method modiﬁes the PointFastener object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PointFastener method, except for the
name argument.
Return value
None.
Abaqus Scripting Reference Guide
654
PointFastener object

Exceptions
None.
Members
The PointFastener object has members with the same names and descriptions as the arguments to the PointFastener
method.
In addition, the PointFastener object has the following member:
A Boolean specifying whether the fastener is suppressed or not. The default value is
OFF.
suppressed
Corresponding analysis keywords
•
*FASTENER
655
Abaqus Scripting Reference Guide
PointFastener object

PointMassInertia object
The PointMassInertia object deﬁnes point masses and point rotary inertia on a part or an assembly region.
The PointMassInertia object is derived from the Inertia object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.inertias[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.inertias[name]
PointMassInertia(...)
This method creates a PointMassInertia object.
Path
mdb.models[name].parts[name].engineeringFeatures.PointMassInertia
mdb.models[name].rootAssembly.engineeringFeatures.PointMassInertia
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the mass or rotary inertia is applied.
region
Optional arguments
A Float specifying the mass magnitude for isotropic mass. This parameter cannot be speciﬁed
when anisotropic mass terms are speciﬁed. The default value is 0.0.
mass
A Float specifying the mass in the 1-direction for anisotropic mass. This parameter cannot be
speciﬁed when isotropic mass is also speciﬁed. The default value is 0.0.
mass1
A Float specifying the mass in the 2-direction for anisotropic mass. This parameter cannot be
speciﬁed when isotropic mass is also speciﬁed. The default value is 0.0.
mass2
A Float specifying the mass in the 3-direction for anisotropic mass. This parameter cannot be
speciﬁed when isotropic mass is also speciﬁed. The default value is 0.0.
mass3
A Float specifying the rotary inertia about the local 1-axis, 
. The default value is 0.0.
i11
A Float specifying the rotary inertia about the local 2-axis, 
. The default value is 0.0.
i22
A Float specifying the rotary inertia about the local 3-axis, 
. The default value is 0.0.
i33
A Float specifying the product of inertia, 
. The default value is 0.0.
i12
Abaqus Scripting Reference Guide
656
PointMassInertia object

A Float specifying the product of inertia, 
. The default value is 0.0.
i13
A Float specifying the product of inertia, 
. The default value is 0.0.
i23
None or a DatumCsys object specifying the local coordinate system for the anisotropic mass
terms (when speciﬁed), and the rotary inertia (when speciﬁed). If localCsys=None, the anisotropic
localCsys
mass and rotary inertia data are deﬁned in the global coordinate system. The default value is
None.
A Float specifying the alpha damping magnitude. The default value is 0.0.
alpha
This argument applies only to Abaqus/Standard analyses.
A Float specifying the composite damping magnitude. The default value is 0.0.
composite
This argument applies only to Abaqus/Standard analyses.
Return value
A PointMassInertia object.
Exceptions
None.
setValues(...)
This method modiﬁes the PointMassInertia object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PointMassInertia  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The PointMassInertia object has members with the same names and descriptions as the arguments to the
PointMassInertia  method.
In addition, the PointMassInertia object has the following member:
657
Abaqus Scripting Reference Guide
PointMassInertia object

A Boolean specifying whether the inertia is suppressed or not. The default value is
OFF.
suppressed
Corresponding analysis keywords
•
*MASS, *ROTARY INERTIA
Abaqus Scripting Reference Guide
658
PointMassInertia object

SpringDashpot object
The SpringDashpot object is the abstract base type for the SpringDashpotToGround and TwoPointSpringDashpot
objects.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.springDashpots[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.springDashpots[name]
resume()
This method resumes the spring/dashpot that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the spring/dashpot.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The SpringDashpot object has the following members:
A String specifying the repository key.
name
A Boolean specifying whether the spring/dashpot is suppressed or not. The default
value is OFF.
suppressed
659
SpringDashpot object

SpringDashpotToGround object
The SpringDashpotToGround object deﬁnes springs and/or dashpots between points and ground on a part or an assembly
region.
The SpringDashpotToGround object is derived from the SpringDashpot object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.springDashpots[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.springDashpots[name]
SpringDashpotToGround(...)
This method creates a SpringDashpotToGround object.
Path
mdb.models[name].parts[name].engineeringFeatures.SpringDashpotToGround
mdb.models[name].rootAssembly.engineeringFeatures\
.SpringDashpotToGround
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the springs and/or dashpots are applied.
region
An Int specifying the degree of freedom associated with the spring and dashpot behaviors.
dof
Optional arguments
None or a DatumCsys object specifying the local directions for the spring and/or dashpot.
If orientation=None, the spring and/or dashpot data are deﬁned in the global coordinate
system. The default value is None.
orientation
A Boolean specifying whether to apply spring behavior to the selected points. The default
value is OFF.
springBehavior
At least one of the arguments springBehavior=ON or dashpotBehavior=ON must be
speciﬁed.
A Boolean specifying whether to apply dashpot behavior to the selected points. The
default value is OFF.
dashpotBehavior
At least one of the arguments springBehavior=ON or dashpotBehavior=ON must be
speciﬁed.
A Float specifying the force per relative displacement for the spring. The default value
is 0.0.
springStiffness
Abaqus Scripting Reference Guide
660
SpringDashpotToGround object

A Float specifying the force per relative velocity for the dashpot. The default value is
0.0.
dashpotCoefﬁcient
Return value
A SpringDashpotToGround object.
Exceptions
None.
setValues(...)
This method modiﬁes the SpringDashpotToGround object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SpringDashpotToGround  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The SpringDashpotToGround object has members with the same names and descriptions as the arguments to the
SpringDashpotToGround  method.
In addition, the SpringDashpotToGround object has the following member:
A Boolean specifying whether the spring/dashpot is suppressed or not. The default
value is OFF.
suppressed
Corresponding analysis keywords
•
*ELEMENT, TYPE=SPRING1; *ELEMENT, TYPE=DASHPOT1; *SPRING; *DASHPOT
661
Abaqus Scripting Reference Guide
SpringDashpotToGround object

TwoPointSpringDashpot object
The TwoPointSpringDashpot object deﬁnes springs and/or dashpots between two points on a part or an assembly.
The TwoPointSpringDashpot object is derived from the SpringDashpot object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.springDashpots[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.springDashpots[name]
TwoPointSpringDashpot(...)
This method creates a TwoPointSpringDashpot object.
Path
mdb.models[name].parts[name].engineeringFeatures.TwoPointSpringDashpot
mdb.models[name].rootAssembly.engineeringFeatures\
.TwoPointSpringDashpot
Required arguments
A String specifying the repository key.
name
A sequence of pairs of Region objects specifying the points between which the springs and/or
dashpots are applied.
regionPairs
A SymbolicConstant specifying whether the axis of the springs and/or dashpots follows the
rotation of the nodes or is in a speciﬁed direction. Possible values are NODAL_LINE and
FIXED_DOF.
axis
Optional arguments
An Int specifying the degree of freedom with which the springs and/or dashpots are associated
at their ﬁrst points. The dof1 argument applies only when axis=FIXED_DOFS. The default
value is 0.
dof1
An Int specifying the degree of freedom with which the springs and/or dashpots are associated
at their second points. The dof2 argument applies only when axis=FIXED_DOFS. The default
value is 0.
dof2
None or a DatumCsys object specifying the local directions for the spring and/or dashpot.
If orientation=None, the spring and/or dashpot data are deﬁned in the global coordinate
system. The default value is None.
orientation
The orientation argument applies only when axis=FIXED_DOFS.
Abaqus Scripting Reference Guide
662
TwoPointSpringDashpot object

A Boolean specifying whether to apply spring behavior to the selected point pairs. The default
value is OFF.
springBehavior
At least one of the arguments springBehavior=ON or dashpotBehavior=ON must be speciﬁed.
A Boolean specifying whether to apply dashpot behavior to the selected point pairs. The
default value is OFF.
dashpotBehavior
At least one of the arguments springBehavior=ON or dashpotBehavior=ON must be speciﬁed.
A Float specifying the force per relative displacement for the springs. The default value is
0.0.
springStiffness
A Float specifying the force per relative velocity for the dashpots. The default value is 0.0.
dashpotCoefﬁcient
Return value
A TwoPointSpringDashpot object.
Exceptions
None.
setValues(...)
This method modiﬁes the TwoPointSpringDashpot object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TwoPointSpringDashpot  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The TwoPointSpringDashpot object has members with the same names and descriptions as the arguments to the
TwoPointSpringDashpot  method.
In addition, the TwoPointSpringDashpot object has the following member:
A Boolean specifying whether the spring/dashpot is suppressed or not. The default
value is OFF.
suppressed
663
Abaqus Scripting Reference Guide
TwoPointSpringDashpot object

Corresponding analysis keywords
•
*ELEMENT, TYPE=SPRINGA; *ELEMENT, TYPE=SPRING2; *ELEMENT, TYPE=DASHPOTA;
*ELEMENT, TYPE=DASHPOT2; *SPRING; *DASHPOT
Abaqus Scripting Reference Guide
664
TwoPointSpringDashpot object

XFEMCrack object
The XFEMCrack object deﬁnes the parameters needed to model crack initiation or crack growth using XFEM technology.
Currently only assembly regions are supported.
The XFEMCrack object is derived from the Crack object.
Access
import part
mdb.models[name].parts[name].engineeringFeatures.cracks[name]
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.cracks[name]
XFEMCrack(...)
This method creates a XFEMCrack object. Although the constructor is available both for parts and for the assembly,
XFEMCrack objects are currently supported only under the assembly.
Path
mdb.models[name].parts[name].engineeringFeatures.XFEMCrack
mdb.models[name].rootAssembly.engineeringFeatures.XFEMCrack
Required arguments
A String specifying the repository key.
name
A Region object specifying the region that contains the crack or is likely to contain
the crack.
crackDomain
Optional arguments
A Boolean specifying whether the crack is allowed to propagate (grow). The default
value is ON.
allowCrackGrowth
A Region object specifying the initial crack location. This parameter is required when
allowCrackGrowth=OFF.
crackLocation
None or a Float specifying the radius from the crack tips within which the elements are
used for crack singularity calculations. This argument applies only when
allowCrackGrowth=OFF. The default value is None.
singularityCalcRadius
A String specifying the name of the ContactProperty object that deﬁnes the contact
properties for the crack surfaces. The default value is an empty string.
interactionProperty
A sequence of Ints specifying the labels of the elements that are intersected by the initial
crack location. This argument is used only by the input ﬁle reader.
elemId
A sequence of Ints specifying the position of a node in the corresponding element
connectivity. This argument is used only by the input ﬁle reader.
nodeId
665
XFEMCrack object

A sequence of Ints specifying the values indicating the inclusion/exclusion of the
crackFrontDist values. A zero value indicates that crackFrontDist is not speciﬁed for
the ith pair elemId and nodeId. This argument is used only by the input ﬁle reader.
hasCrackFront
A sequence of Floats specifying the values of the ﬁrst signed distance function. This
argument is used by the input ﬁle reader.
crackPlaneDist
A sequence of Floats specifying the values of the second signed distance function. This
argument is used only by the input ﬁle reader.
crackFrontDist
An integer specifying the number of element layers around the crack location, to which
the crack domain is shrunk.
autoDetectValue
Return value
A XFEMCrack object.
Exceptions
None.
setValues(...)
This method modiﬁes the XFEMCrack object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the XFEMCrack  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The XFEMCrack object has members with the same names and descriptions as the arguments to the XFEMCrack
method.
In addition, the XFEMCrack object has the following member:
A Boolean specifying whether the crack is suppressed or not. The default value is
OFF.
suppressed
Abaqus Scripting Reference Guide
666
XFEMCrack object

Corresponding analysis keywords
•
*ENRICHMENT
•
*INITIAL CONDITIONS, TYPE=ENRICHMENT
667
Abaqus Scripting Reference Guide
XFEMCrack object

Imperfection object
The Imperfection object is the abstract base type for FileImperfection, InputImperfection, and DataImperfection.
Access
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.imperfections[name]
resume()
This method resumes the imperfection that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the imperfection.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Imperfection object has the following members:
A String specifying the repository key.
name
A Boolean specifying whether the imperfection is suppressed or not. The default
value is OFF.
suppressed
Abaqus Scripting Reference Guide
668
Imperfection object

FileImperfection object
The FileImperfection object deﬁnes geometric imperfection on an assembly region.
The FileImperfection object is derived from the Imperfection object.
Access
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.imperfections[name]
FileImperfection(...)
This method creates a FileImperfection object.
Path
mdb.models[name].rootAssembly.engineeringFeatures.FileImperfection
Required arguments
A String specifying the repository key.
name
A String specifying the results ﬁle from a previous analysis from which the ﬁle
imperfection is applied.
ﬁle
An Int specifying the step number (in the analysis whose ﬁle is being used as input to this
option) from which the modal or displacement data are to be read.
step
A sequence of sequences of Integers and Floats specifying linearSuperpositions. The items
in the table data are described below.
linearSuperpositions
Optional arguments
A Region object specifying the region to which the ﬁle imperfection is applied. By default, the
imperfection will be applied to all nodes in the model.
region
An Int specifying the increment number (in the analysis whose ﬁle is being used as input to this
option) from which the displacement data are to be read. By default, the data will be read from
the last increment available for the speciﬁed step.
increment
Table data
The table data specify the following:
•
Mode Number.
•
Scaling factor for this mode.
Return value
A FileImperfection object.
669
FileImperfection object

Exceptions
None.
setValues(...)
This method modiﬁes the FileImperfection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FileImperfection method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The FileImperfection object has members with the same names and descriptions as the arguments to the FileImperfection
method.
In addition, the FileImperfection object has the following member:
A Boolean specifying whether the imperfection is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*IMPERFECTION
Abaqus Scripting Reference Guide
670
FileImperfection object

InputImperfection object
The InputImperfection object deﬁnes geometric imperfection on an assembly region.
The InputImperfection object is derived from the Imperfection object.
Access
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.imperfections[name]
InputImperfection(...)
This method creates an InputImperfection object.
Path
mdb.models[name].parts[name].engineeringFeatures.InputImperfection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the alternate input ﬁle containing the imperfection data.
ﬁle
Optional arguments
A SymbolicConstant specifying the coordinate system. The imperfection values in the alternate
input ﬁle being used as input to this option would be treated as perturbation values of respective
coordinates. Possible values areR, C and S. The default value is R.
system
Return value
A InputImperfection object.
Exceptions
None.
setValues(...)
This method modiﬁes the InputImperfection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the InputImperfection method, except for
the name argument.
671
InputImperfection object

Return value
None.
Exceptions
None.
Members
The InputImperfection object has members with the same names and descriptions as the arguments to the
InputImperfection method.
In addition, the InputImperfection object has the following member:
A Boolean specifying whether the imperfection is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*IMPERFECTION
Abaqus Scripting Reference Guide
672
InputImperfection object

DataImperfection object
The DataImperfection object deﬁnes geometric imperfection on an assembly region.
The DataImperfection object is derived from the Imperfection object.
Access
import assembly
mdb.models[name].rootAssembly.engineeringFeatures.imperfections[name]
DataImperfection(...)
This method creates a DataImperfection object.
Path
mdb.models[name].parts[name].engineeringFeatures.DataImperfection
Required arguments
A String specifying the repository key.
name
A sequence of sequences of Ints and Floats specifying the imperfection components
at a given node. The items in the table data are described below.
imperfectionTable
Optional arguments
A SymbolicConstant specifying the coordinate system. The imperfection values in the data lines
would be treated as perturbation values of the respective coordinates. Possible values are R, C,
and S. The default value is R.
system
Table data
The imperfectionTable data specify the following:
•
Node number.
•
Component of imperfection in the ﬁrst coordinate direction.
•
Component of imperfection in the second coordinate direction.
•
Component of imperfection in the third coordinate direction.
Return value
A DataImperfection object.
Exceptions
None.
673
DataImperfection object

setValues(...)
This method modiﬁes the DataImperfection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DataImperfection method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The DataImperfection object has members with the same names and descriptions as the arguments to the
DataImperfection method.
In addition, the DataImperfection object has the following member:
A Boolean specifying whether the imperfection is suppressed or not. The default value
is OFF.
suppressed
Corresponding analysis keywords
•
*IMPERFCTION
Abaqus Scripting Reference Guide
674
DataImperfection object

Feature commands
Features in Abaqus/CAE include Parts, Datums, Partitions, and Assembly operations.
The commands that create Feature objects on only the Part object are described in Part commands. The commands
that create Feature objects in only the rootAssembly object are described in Assembly commands. The commands
that create Feature objects on both the Part and the rootAssembly objects are described here.
In this section:
•
Feature object
•
FeatureOptions object
675

Feature object
Abaqus/CAE is a feature-based modeling system, and features are stored in the Feature object. The user deﬁnes the
parameters of the feature, and Abaqus/CAE modiﬁes the model based on the value of the parameters. This evaluation
of the parameters is called regeneration of the feature. Feature objects contain both the parameters and the resulting
model modiﬁcation.
Access
import part
mdb.models[name].parts[name].features[name]
mdb.models[name].parts[name].featuresById[i]
import assembly
mdb.models[name].rootAssembly.features[name]
mdb.models[name].rootAssembly.featuresById[i]
AttachmentPoints(...)
This method creates an attachment points Feature. Attachment points may be created using datum points, vertices,
reference points, attachment points, interesting points, orphan mesh nodes or coordinates. Optionally, the attachment
points can be projected on geometric faces or element faces.
Path
mdb.models[name].parts[name].AttachmentPoints
mdb.models[name].rootAssembly.AttachmentPoints
Required arguments
A String specifying a unique Feature name.
name
A tuple of points. Each point can be a Vertex, Datum point, Reference point, Attachment point,
orphan mesh Node, Interesting point object, or a tuple of Floats representing the coordinates of
a point.
points
Optional arguments
A SymbolicConstant specifying the projection method. Possible values are
PROJECT_BY_PROXIMITY and PROJECT_BY_DIRECTION. The default value
is PROJECT_BY_PROXIMITY.
projectionMethod
A sequence of Face objects specifying the geometry faces onto which the points are
to be projected.
projectOnFaces
A sequence of MeshFace objects specifying the orphan mesh element faces onto which
the points are to be projected.
projectOnElementFaces
A point specifying the start point of the projection direction. The point can be a Vertex,
Datum point, Reference point, Attachment point, orphan mesh Node, Interesting point
object, or a tuple of Floats representing the coordinates of a point.
projectionDirStartPt
Abaqus Scripting Reference Guide
676
Feature object

A point specifying the end point of the projection direction. The point can be a Vertex,
Datum point, Reference point, Attachment point, orphan mesh Node, Interesting point
object, or a tuple of Floats representing the coordinates of a point.
projectionDirEndPt
A String specifying a unique set name.
setName
Return value
A Feature object.
Exceptions
None.
AttachmentPointsAlongDirection(...)
This method creates a Feature object by creating attachment points along a direction or between two points. A Datum
point, a Vertex, a Reference point, an Attachment point, an Interesting point, or an orphan mesh Node can be speciﬁed
as the start or end point. The direction can be speciﬁed using a straight edge or a datum axis.
Path
mdb.models[name].parts[name].AttachmentPointsAlongDirection
mdb.models[name].rootAssembly.AttachmentPointsAlongDirection
Required arguments
A String specifying a unique Feature name.
name
A point specifying the start point of the direction along which to create points. The point
can be a Vertex, Datum point, Reference point, Attachment point, orphan mesh Node,
Interesting point object, or a tuple of Floats representing the coordinates of a point.
startPoint
A SymbolicConstant specifying the point creation method. Possible values are AUTO_FIT,
NUM_PTS_ALONG_DIR, and NUM_PTS_BETWEEN_PTS.
pointCreationMethod
Optional arguments
A point specifying the end point if creating points between two points. The point can
be a Vertex, Datum point, Reference point, Attachment point, orphan mesh Node,
Interesting point object, or a tuple of Floats representing the coordinates of a point.
endPoint
The direction can be speciﬁed by a straight edge or a datum axis.
direction
A ﬂoat specifying the spacing to be used between two points.
spacing
An integer specifying the number of points to be created along the speciﬁed direction.
numPtsAlongDir
677
Abaqus Scripting Reference Guide
Feature object

An integer specifying the number of points to be created between the start and end
points.
numPtsBetweenPts
A Boolean specifying whether to create an attachment point at the start point. The
default value is True.
createPtAtStartPt
A Boolean specifying whether to create an attachment point at the end point. The default
value is True.
createPtAtEndPt
A SymbolicConstant specifying the projection method. Possible values are
PROJECT_BY_PROXIMITY and PROJECT_BY_DIRECTION. The default value is
PROJECT_BY_PROXIMITY.
projectionMethod
A sequence of Face objects specifying the geometry faces onto which the points are
to be projected.
projectOnFaces
A sequence of MeshFace objects specifying the orphan mesh element faces onto which
the points are to be projected.
projectOnElementFaces
A point specifying the start point of the projection direction. The point can be a Vertex,
Datum point, Reference point, Attachment point, orphan mesh Node, Interesting point
object, or a tuple of Floats representing the coordinates of a point.
projectionDirStartPt
A point specifying the end point of the projection direction. The point can be a Vertex,
Datum point, Reference point, Attachment point, orphan mesh Node, Interesting point
object, or a tuple of Floats representing the coordinates of a point.
projectionDirEndPt
A Boolean specifying if the direction along which the attachment points are created
should be reversed. This argument is valid only when
pointCreationMethod=NUM_PTS_ALONG_DIR.
ﬂipDirection
A String specifying a unique set name.
setName
Return value
A Feature object.
Exceptions
None.
AttachmentPointsOffsetFromEdges(...)
This method creates a Feature object by creating attachment points along or offset from one or more connected edges.
Path
mdb.models[name].parts[name].AttachmentPointsOffsetFromEdges
mdb.models[name].rootAssembly.AttachmentPointsOffsetFromEdges
Abaqus Scripting Reference Guide
678
Feature object

Required arguments
A String specifying a unique Feature name.
name
A sequence of connected Edge objects specifying the geometry edges from which to offset
the points.
edges
Optional arguments
A Vertex of the selected edges that speciﬁes the point from which to create points.
This point can be one of the two end vertices of the connected edges. In case of edges
startPoint
forming a closed loop and having multiple vertices, this point can be any one of the
vertices on the edges.
This parameter is required to indicate the direction in which to create the points. This
parameter is required only in case of edges forming a closed loop.
ﬂipDirection
A SymbolicConstant specifying the point creation method. Possible values are
BY_NUMBER or BY_SPACING.
pointCreationMethod
An integer specifying the number of points to be created along the selected edges.
numberOfPoints
A ﬂoat specifying the spacing to be used between two points while creating the points
between the start and end points of the edges.
spacingBetweenPoints
A ﬂoat specifying the distance by which to offset the ﬁrst point from the start vertex
of the edge chain. The default value is 0.0.
offsetFromStartPoint
A ﬂoat specifying the distance by which to offset the last point from the end vertex
of the edge chain. This parameter should be speciﬁed only if the point creation method
is BY_NUMBER. The default value is 0.0.
offsetFromEndPoint
A SymbolicConstant specifying the spacing method. Possible values are
AUTO_FIT_PTS or SPECIFY_NUM_PTS. The default value is AUTO_FIT_PTS.
spacingMethod
A SymbolicConstant specifying the method to pattern of points. Possible values are
PATTERN_ORTHOGONALLY or PATTERN_ALONG_DIRECTION.
patterningMethod
A geometry Face object adjacent to one of the edges from which to offset the points
to create a pattern of points when the PATTERN_ORTHOGONALLY method is
referenceFace
chosen for patterning. The face is used to identify the patterning direction. If the
number of rows is one and the initial offset is zero, the reference face may not be
speciﬁed.
A point specifying the start point of the direction along which to create a pattern of
points when the PATTERN_ALONG_DIRECTION method is chosen for patterning.
startPointForPatternDirection
The point can be a Vertex, Datum point, Reference point, Attachment point, orphan
mesh Node, Interesting point object, or a tuple of Floats representing the coordinates
of a point.
679
Abaqus Scripting Reference Guide
Feature object

A point specifying the end point of the direction along which to create a pattern of
points when the PATTERN_ALONG_DIRECTION method is chosen for patterning.
endPointForPatternDirection
The point can be a Vertex, Datum point, Reference point, Attachment point, orphan
mesh Node, Interesting point object, or a tuple of Floats representing the coordinates
of a point.
A ﬂoat specifying the distance by which to offset the ﬁrst row of points from the
edges.
offsetFromEdges
An integer specifying the number of rows of points to be created for the pattern. The
default value is 1.
numberOfRows
A ﬂoat specifying the spacing to be used between two rows while creating a pattern
of points.
spacingBetweenRows
A SymbolicConstant specifying the projection method. Possible values are
PROJECT_BY_PROXIMITY and PROJECT_BY_DIRECTION. The default value
is PROJECT_BY_PROXIMITY.
projectionMethod
A sequence of Face objects specifying the geometry faces onto which the points are
to be projected.
projectOnFaces
A sequence of MeshFace objects specifying the orphan mesh element faces onto
which the points are to be projected.
projectOnElementFaces
A point specifying the start point of the projection direction. The point can be a Vertex,
Datum point, Reference point, Attachment point, orphan mesh Node, Interesting point
object, or a tuple of Floats representing the coordinates of a point.
projectionDirStartPt
A point specifying the end point of the projection direction. The point can be a Vertex,
Datum point, Reference point, Attachment point, orphan mesh Node, Interesting point
object, or a tuple of Floats representing the coordinates of a point.
projectionDirEndPt
A String specifying a unique set name.
setName
Return value
A Feature object.
Exceptions
None.
DatumAxisByCylFace(...)
This method creates a Feature object and a DatumAxis object along the axis of a cylinder or cone.
Path
mdb.models[name].rootAssembly.DatumAxisByCylFace
Abaqus Scripting Reference Guide
680
Feature object

mdb.models[name].parts[name].DatumAxisByCylFace
Required arguments
A cylindrical or conical Face object.
face
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByNormalToPlane(...)
This method creates a Feature object and a DatumAxis object normal to the speciﬁed plane and passing through the
speciﬁed point.
Path
mdb.models[name].rootAssembly.DatumAxisByNormalToPlane
mdb.models[name].parts[name].DatumAxisByNormalToPlane
Required arguments
A planar Face, an ElementFace, or a Datum object representing a datum plane.
plane
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByParToEdge(...)
This method creates a Feature object and a DatumAxis object parallel to the speciﬁed edge and passing through the
speciﬁed point.
681
Abaqus Scripting Reference Guide
Feature object

Path
mdb.models[name].rootAssembly.DatumAxisByParToEdge
mdb.models[name].parts[name].DatumAxisByParToEdge
Required arguments
A straight Edge, an ElementEdge, or a Datum object representing a datum axis.
edge
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByPrincipalAxis(...)
This method creates a Feature object and a DatumAxis object along one of the three principal axes.
Path
mdb.models[name].rootAssembly.DatumAxisByPrincipalAxis
mdb.models[name].parts[name].DatumAxisByPrincipalAxis
Required arguments
A SymbolicConstant specifying the principal axis. Possible values are XAXIS,
YAXIS, and ZAXIS.
principalAxis
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
Abaqus Scripting Reference Guide
682
Feature object

DatumAxisByRotation(...)
This method creates a Feature object and a DatumAxis object in a three-dimensional model by rotating a line about the
speciﬁed axis through the speciﬁed angle.
Path
mdb.models[name].rootAssembly.DatumAxisByRotation
mdb.models[name].parts[name].DatumAxisByRotation
Required arguments
A straight Edge, a Datum object representing a datum axis, or an ElementEdge object specifying
the line to rotate.
line
A straight Edge, a Datum object representing a datum axis, or an ElementEdge object specifying
the axis about which to rotate the line.
axis
A Float specifying the angle in degrees to rotate the line.
angle
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByRotation(...)
This method creates a Feature object and a DatumAxis object in a two-dimensional model by rotating a line about the
speciﬁed point through the speciﬁed angle.
Path
mdb.models[name].rootAssembly.DatumAxisByRotation
mdb.models[name].parts[name].DatumAxisByRotation
Required arguments
A straight Edge, a Datum object representing a datum axis, or an ElementEdge object specifying
the line to rotate.
line
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point
specifying the point about which to rotate the line.
point
683
Abaqus Scripting Reference Guide
Feature object

A Float specifying the angle in degrees to rotate the line.
angle
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByThreePoint(...)
This method creates a Feature object and a DatumAxis object normal to the circle described by three points and through
its center.
Path
mdb.models[name].rootAssembly.DatumAxisByThreePoint
mdb.models[name].parts[name].DatumAxisByThreePoint
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point
specifying the ﬁrst point on the circle.
point1
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point
specifying the second point on the circle.
point2
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point
specifying the third point on the circle.
point3
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByThruEdge(...)
This method creates a Feature object and a DatumAxis object along the speciﬁed edge.
Abaqus Scripting Reference Guide
684
Feature object

Path
mdb.models[name].rootAssembly.DatumAxisByThruEdge
mdb.models[name].parts[name].DatumAxisByThruEdge
Required arguments
A straight Edge or an ElementEdge object.
edge
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByTwoPlane(...)
This method creates a Feature object and a DatumAxis object at the intersection of two planes.
Path
mdb.models[name].rootAssembly.DatumAxisByTwoPlane
mdb.models[name].parts[name].DatumAxisByTwoPlane
Required arguments
A planar Face, an ElementFace, or a Datum object representing a datum plane.
plane1
A planar Face, an ElementFace, or a Datum object representing a datum plane.
plane2
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumAxisByTwoPoint(...)
This method creates a Feature object and a DatumAxis object along the line joining two points.
685
Abaqus Scripting Reference Guide
Feature object

Path
mdb.models[name].rootAssembly.DatumAxisByTwoPoint
mdb.models[name].parts[name].DatumAxisByTwoPoint
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point1
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point2
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumCsysByDefault(...)
This method creates a Feature object and a DatumCsys object from the speciﬁed default coordinate system at the origin.
Path
mdb.models[name].rootAssembly.DatumCsysByDefault
mdb.models[name].parts[name].DatumCsysByDefault
Required arguments
A SymbolicConstant specifying the default coordinate system to be used. Possible values
are CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
Optional arguments
A String specifying the name of the DatumCsys.
name
Return value
A Feature object.
Exceptions
AbaqusException.
Abaqus Scripting Reference Guide
686
Feature object

DatumCsysByOffset(...)
This method creates a Feature object and a DatumCsys object by offsetting the origin of an existing datum coordinate
system to a speciﬁed point.
Path
mdb.models[name].rootAssembly.DatumCsysByOffset
mdb.models[name].parts[name].DatumCsysByOffset
Required arguments
A SymbolicConstant specifying the type of coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
A Datum object representing a datum coordinate system from which to offset.
datumCoordSys
A sequence of three Floats specifying the X-, Y-, and Z-offsets from datumCoordSys. The
arguments vector and point are mutually exclusive, and one of them must be speciﬁed.
vector
A Vertex, InterestingPoint, DatumPoint object or a sequence of three Floats specifying the
X-, Y-, and Z-coordinates of a point in space. The point represents the origin of the new datum
point
coordinate system. The arguments vector and point are mutually exclusive, and one of them
must be speciﬁed.
Optional arguments
A String specifying the name of the DatumCsys.
name
Return value
A Feature object.
Exceptions
AbaqusException.
DatumCsysByThreePoints(...)
This method creates a Feature object and a DatumCsys object from three points.
Path
mdb.models[name].parts[name].DatumCsysByThreePoints
mdb.models[name].rootAssembly.DatumCsysByThreePoints
Required arguments
A SymbolicConstant specifying the type of coordinate system. Possible values are CARTESIAN,
CYLINDRICAL, and SPHERICAL.
coordSysType
687
Abaqus Scripting Reference Guide
Feature object

A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point specifying
the origin of the coordinate system.
origin
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point specifying
a point on the X-axis or the -axis. The point1 and line1 arguments are mutually exclusive. One
of them must be speciﬁed.
point1
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point specifying
a point in the X–Y plane or the –  plane. The point2 and line2 arguments are mutually exclusive.
One of them must be speciﬁed.
point2
An Edge, an Element Edge, or a Datum object representing a datum axis specifying the X-axis or
the -axis. The point1 and line1 arguments are mutually exclusive. One of them must be speciﬁed.
line1
An Edge, an Element Edge, or a Datum object representing a datum axis specifying a vector in
the X–Y plane or the –  plane. The point2 and line2 arguments are mutually exclusive. One of
them must be speciﬁed.
line2
Optional arguments
A String specifying the name of the DatumCsys.
name
Return value
A Feature object.
Exceptions
AbaqusException.
DatumCsysByTwoLines(...)
This method creates a Feature object and a DatumCsys object from two orthogonal lines. The origin of the new datum
coordinate system is placed at the intersection of the two lines.
Path
mdb.models[name].rootAssembly.DatumCsysByTwoLines
mdb.models[name].parts[name].DatumCsysByTwoLines
Required arguments
A SymbolicConstant specifying the type of coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
A straight Edge, an ElementEdge, or a Datum object representing a datum axis specifying
the X-axis or the -axis.
line1
Abaqus Scripting Reference Guide
688
Feature object

A straight Edge, an ElementEdge, or a Datum object representing a datum axis specifying a
line in the X–Y plane or in the –  plane.
line2
Optional arguments
A String specifying the name of the DatumCsys.
name
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPlaneByPrincipalPlane(...)
This method creates a Feature object and a DatumPlane object through the origin along one of the three principal
planes.
Path
mdb.models[name].rootAssembly.DatumPlaneByPrincipalPlane
mdb.models[name].parts[name].DatumPlaneByPrincipalPlane
Required arguments
A SymbolicConstant specifying the principal plane. Possible values are XYPLANE,
YZPLANE, and XZPLANE.
principalPlane
A Float specifying the offset from the plane.
offset
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPlaneByOffset(...)
This method creates a Feature object and a DatumPlane object offset by a speciﬁed distance from an existing plane.
Path
mdb.models[name].rootAssembly.DatumPlaneByOffset
689
Abaqus Scripting Reference Guide
Feature object

mdb.models[name].parts[name].DatumPlaneByOffset
Required arguments
A planar Face, an ElementFace, or a Datum object representing a datum plane.
plane
A SymbolicConstant specifying whether the normal should be ﬂipped. Possible values are
SIDE1 and SIDE2.
ﬂip
A Float specifying the offset from the plane.
offset
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPlaneByOffset(...)
This method creates a Feature object and a DatumPlane object offset from an existing plane and passing through the
speciﬁed point.
Path
mdb.models[name].rootAssembly.DatumPlaneByOffset
mdb.models[name].parts[name].DatumPlaneByOffset
Required arguments
A planar Face, an ElementFace, or a Datum object representing a datum plane.
plane
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
Abaqus Scripting Reference Guide
690
Feature object

DatumPlaneByRotation(...)
This method creates a Feature object and a DatumPlane object by rotating a plane about the speciﬁed axis through the
speciﬁed angle.
Path
mdb.models[name].rootAssembly.DatumPlaneByRotation
mdb.models[name].parts[name].DatumPlaneByRotation
Required arguments
A planar Face, an ElementFace, or a Datum object representing a datum plane.
plane
A straight Edge, an ElementEdge, or a Datum object representing a datum axis.
axis
A Float specifying the angle in degrees to rotate the plane.
angle
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPlaneByThreePoints(...)
This method creates a Feature object and a DatumPlane object deﬁned by passing through three points.
Path
mdb.models[name].rootAssembly.DatumPlaneByThreePoints
mdb.models[name].parts[name].DatumPlaneByThreePoints
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point1
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point2
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point3
Optional arguments
None.
691
Abaqus Scripting Reference Guide
Feature object

Return value
A Feature object.
Exceptions
AbaqusException.
DatumPlaneByLinePoint(...)
This method creates a Feature object and a DatumPlane object that pass through the speciﬁed line and through the
speciﬁed point that does not lie on the line.
Path
mdb.models[name].rootAssembly.DatumPlaneByLinePoint
mdb.models[name].parts[name].DatumPlaneByLinePoint
Required arguments
A straight Edge, an ElementEdge, or a Datum object representing a datum axis.
line
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPlaneByPointNormal(...)
This method creates a Feature object and a DatumPlane object normal to the speciﬁed line and running through the
speciﬁed point.
Path
mdb.models[name].rootAssembly.DatumPlaneByPointNormal
mdb.models[name].parts[name].DatumPlaneByPointNormal
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
A straight Edge, an ElementEdge, or a Datum object representing a datum axis.
normal
Abaqus Scripting Reference Guide
692
Feature object

Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPlaneByTwoPoint(...)
This method creates a Feature object and a DatumPlane object midway between two points and normal to the line
connecting the points.
Path
mdb.models[name].rootAssembly.DatumPlaneByTwoPoint
mdb.models[name].parts[name].DatumPlaneByTwoPoint
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point1
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point2
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPointByCoordinate(...)
This method creates a Feature object and a DatumPoint object at the point deﬁned by the speciﬁed coordinates.
Path
mdb.models[name].rootAssembly.DatumPointByCoordinate
mdb.models[name].parts[name].DatumPointByCoordinate
Required arguments
A sequence of three Floats specifying the X-, Y-, and Z-coordinates of the datum point.
coords
693
Abaqus Scripting Reference Guide
Feature object

Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
DatumPointByOffset(...)
This method creates a Feature object and a DatumPoint object offset from an existing point by a vector.
Path
mdb.models[name].rootAssembly.DatumPointByOffset
mdb.models[name].parts[name].DatumPointByOffset
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
A sequence of three Floats specifying the X-, Y-, and Z-offsets from point.
vector
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
DatumPointByMidPoint(...)
This method creates a Feature object and a DatumPoint object midway between two points.
Path
mdb.models[name].rootAssembly.DatumPointByMidPoint
mdb.models[name].parts[name].DatumPointByMidPoint
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point1
Abaqus Scripting Reference Guide
694
Feature object

A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point2
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
DatumPointByOnFace(...)
This method creates a Feature object and a DatumPoint object on the speciﬁed face, offset from two edges.
Path
mdb.models[name].rootAssembly.DatumPointByOnFace
mdb.models[name].parts[name].DatumPointByOnFace
Required arguments
A planar Face or a Datum object representing a datum plane.
face
A straight Edge or a Datum object representing a datum axis.
edge1
A Float specifying the offset from edge1.
offset1
A straight Edge or a Datum object representing a datum axis.
edge2
A Float specifying the offset from edge2.
offset2
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
DatumPointByEdgeParam(...)
This method creates a Feature object and a DatumPoint object along an edge at a selected distance from one end of
the edge.
695
Abaqus Scripting Reference Guide
Feature object

Path
mdb.models[name].rootAssembly.DatumPointByEdgeParam
mdb.models[name].parts[name].DatumPointByEdgeParam
Required arguments
An Edge object.
edge
A Float specifying the distance along edge to the DatumPoint object. Possible values
are 0 parameter  1.
parameter
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException and RangeError.
DatumPointByProjOnEdge(...)
This method creates a Feature object and a DatumPoint object along an edge by projecting an existing point along the
normal to the edge.
Path
mdb.models[name].rootAssembly.DatumPointByProjOnEdge
mdb.models[name].parts[name].DatumPointByProjOnEdge
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
An Edge, an ElementEdge or a Datum object representing a datum axis.
edge
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
Abaqus Scripting Reference Guide
696
Feature object

DatumPointByProjOnFace(...)
This method creates a Feature object and a DatumPoint object on a speciﬁed face by projecting an existing point onto
the face.
Path
mdb.models[name].rootAssembly.DatumPointByProjOnFace
mdb.models[name].parts[name].DatumPointByProjOnFace
Required arguments
A Vertex, an InterestingPoint, a MeshNode, or a Datum object representing a datum point.
point
A Face object or a Datum object representing a datum plane.
face
Note:
Any other types of planes are not supported.
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
MakeSketchTransform(...)
This method creates a Transform object. A Transform object is a 4x3 matrix of Floats that represents the transformation
from sketch coordinates to part coordinates.
Path
mdb.models[name].parts[name].MakeSketchTransform
mdb.models[name].rootAssembly.MakeSketchTransform
Required arguments
A Datum plane object or a planar Face object specifying the sketch plane.
sketchPlane
697
Abaqus Scripting Reference Guide
Feature object

Optional arguments
A sequence of Floats specifying the X-, Y-, and Z-coordinates that will be used as the origin
of the sketch. The default value is computed as the centroid of the face.
origin
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
A SymbolicConstant specifying on which side of the sketchPlane the sketch is positioned.
Possible values are SIDE1 and SIDE2. The default value is SIDE1.
sketchPlaneSide
An Edge or DatumAxis object specifying the orientation of the sketch. If unspeciﬁed, the
sketch is assumed to be oriented with the Y-direction pointing up.
sketchUpEdge
Return value
A Transform object. A Transform is an object with one method that returns the transform matrix.
Exceptions
Up direction is parallel to plane normal
If the sketchUpEdge is parallel to the sketchPlane:
PartitionCellByDatumPlane(...)
This method partitions one or more cells using the given datum plane.
Path
mdb.models[name].parts[name].PartitionCellByDatumPlane
mdb.models[name].rootAssembly.PartitionCellByDatumPlane
Required arguments
A sequence of Cell objects specifying the cells to partition.
cells
A DatumPlane object.
datumPlane
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
Abaqus Scripting Reference Guide
698
Feature object

PartitionCellByExtendFace(...)
This method partitions one or more cells by extending the underlying geometry of a given face to partition the target
cells.
Path
mdb.models[name].parts[name].PartitionCellByExtendFace
mdb.models[name].rootAssembly.PartitionCellByExtendFace
Required arguments
A sequence of Cell objects specifying the cells to partition.
cells
A planar, cylindrical, conical, or spherical Face object.
extendFace
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionCellByExtrudeEdge(...)
This method partitions one or more cells by extruding selected edges in the given direction.
Path
mdb.models[name].parts[name].PartitionCellByExtrudeEdge
mdb.models[name].rootAssembly.PartitionCellByExtrudeEdge
Required arguments
A sequence of Cell objects specifying the cells to partition.
cells
The Edge objects to be extruded. The edges must be in the same plane. The edges must form a
continuous chain, without branches. The edges must belong to the same PartInstance object.
edges
A straight Edge or DatumAxis object specifying the extrude direction. line must be perpendicular
to the plane formed by edges.
line
A SymbolicConstant specifying the direction of the extrusion. Possible values are FORWARD
and REVERSE. If sense=FORWARD, the extrusion is in the direction of line.
sense
699
Abaqus Scripting Reference Guide
Feature object

Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionCellByPatchNCorners(...)
This method partitions a cell using an N-sided cutting patch deﬁned by the given corner points.
Path
mdb.models[name].parts[name].PartitionCellByPatchNCorners
mdb.models[name].rootAssembly.PartitionCellByPatchNCorners
Required arguments
A Cell object specifying the cell to partition.
cell
A sequence of Vertex, InterestingPoint, or DatumPoint objects. 3  len(cornerPoints)
 5. The corner points must not coincide.
cornerPoints
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionCellByPatchNEdges(...)
This method partitions a cell using an N-sided cutting patch deﬁned by the given edges.
Path
mdb.models[name].parts[name].PartitionCellByPatchNEdges
mdb.models[name].rootAssembly.PartitionCellByPatchNEdges
Required arguments
A Cell specifying the cell to partition.
cell
Abaqus Scripting Reference Guide
700
Feature object

A sequence of Edge objects bounding the patch. The edges must form a closed loop. The Edge
objects must belong to the same PartInstance object as cell.
edges
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionCellByPlaneNormalToEdge(...)
This method partitions one or more cells using a plane normal to an edge at the given edge point.
Path
mdb.models[name].parts[name].PartitionCellByPlaneNormalToEdge
mdb.models[name].rootAssembly.PartitionCellByPlaneNormalToEdge
Required arguments
A sequence of Cell objects specifying the cells to partition.
cells
An Edge object specifying the normal to the plane.
edge
A Vertex, InterestingPoint, or DatumPoint object specifying a point on edge.
point
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionCellByPlanePointNormal(...)
This method partitions one or more cells using a plane deﬁned by a point and a normal direction.
Path
mdb.models[name].parts[name].PartitionCellByPlanePointNormal
701
Abaqus Scripting Reference Guide
Feature object

mdb.models[name].rootAssembly.PartitionCellByPlanePointNormal
Required arguments
A sequence of Cell objects specifying the cells to partition.
cells
A Vertex, InterestingPoint, or DatumPoint object specifying a point on the plane.
point
A straight Edge or DatumAxis object specifying the normal to the plane.
normal
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionCellByPlaneThreePoints(...)
This method partitions one or more cells using a plane deﬁned by three points.
Path
mdb.models[name].parts[name].PartitionCellByPlaneThreePoints
mdb.models[name].rootAssembly.PartitionCellByPlaneThreePoints
Required arguments
A sequence of Cell objects specifying the cells to partition.
cells
A Vertex, InterestingPoint, or DatumPoint object specifying a point on the plane.
point1
A Vertex, InterestingPoint, or DatumPoint object specifying a point on the plane.
point2
A Vertex, InterestingPoint, or DatumPoint object specifying a point on the plane.
point3
Note:
point1, point2, and point3 must not be colinear and must not coincide.
Optional arguments
None.
Abaqus Scripting Reference Guide
702
Feature object

Return value
A Feature object.
Exceptions
AbaqusException.
PartitionCellBySweepEdge(...)
This method partitions one or more cells by sweeping selected edges along the given sweep path.
Path
mdb.models[name].parts[name].PartitionCellBySweepEdge
mdb.models[name].rootAssembly.PartitionCellBySweepEdge
Required arguments
A sequence of Cell objects specifying the cells to partition.
cells
A sequence of Edge objects to be swept. The edges must be in the same plane. The edges must
form a continuous chain without branches. The Edge objects must all belong to the same
PartInstance object.
edges
An Edge object specifying the sweep path. The start of sweepPath must be in the plane and
perpendicular to the plane formed by edges. The sweep path must be planar.
sweepPath
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionEdgeByDatumPlane(...)
This method partitions an edge where it intersects with a datum plane.
Path
mdb.models[name].parts[name].PartitionEdgeByDatumPlane
mdb.models[name].rootAssembly.PartitionEdgeByDatumPlane
Required arguments
A sequence of Edge objects specifying the edges to partition.
edges
703
Abaqus Scripting Reference Guide
Feature object

A DatumPlane object specifying the location of the partition.
datumPlane
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionEdgeByParam(...)
This method partitions one or more edges at the given normalized edge parameter.
Path
mdb.models[name].parts[name].PartitionEdgeByParam
mdb.models[name].rootAssembly.PartitionEdgeByParam
Required arguments
A sequence of Edge objects specifying the edges to partition.
edges
A Float specifying the normalized distance along edge at which to partition. Possible
values are 0.0 parameter  1.0.
parameter
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionEdgeByPoint(...)
This method partitions an edge at the given point.
Path
mdb.models[name].parts[name].PartitionEdgeByPoint
mdb.models[name].rootAssembly.PartitionEdgeByPoint
Abaqus Scripting Reference Guide
704
Feature object

Required arguments
An Edge object specifying the edge to partition.
edge
An InterestingPoint or DatumPoint object specifying a point on edge.
point
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionFaceByAuto(...)
This method automatically partitions a target face into simple regions that can be meshed using a structured meshing
technique.
Path
mdb.models[name].parts[name].PartitionFaceByAuto
mdb.models[name].rootAssembly.PartitionFaceByAuto
Required arguments
A Face object specifying the face to partition.
face
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
PartitionFaceByCurvedPathEdgeParams(...)
This method partitions a face normal to two edges, using a curved path between the two given edge points deﬁned by
the normalized edge parameters.
Path
mdb.models[name].parts[name].PartitionFaceByCurvedPathEdgeParams
705
Abaqus Scripting Reference Guide
Feature object

mdb.models[name].rootAssembly.PartitionFaceByCurvedPathEdgeParams
Required arguments
A Face object specifying the face to partition.
face
An Edge object specifying the start of the partition. The edge must belong to face.
edge1
A Float specifying the distance along edge1 at which to partition. Possible values are 0.0
distance1  1.0.
parameter1
An Edge object specifying the end of the partition. The edge must belong to face.
edge2
A Float specifying the distance along edge2 at which to partition. Possible values are 0.0
distance2  1.0.
parameter2
Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionFaceByCurvedPathEdgePoints(...)
This method partitions a face normal to two edges, using a curved path between the two given edge points.
Path
mdb.models[name].parts[name].PartitionFaceByCurvedPathEdgePoints
mdb.models[name].rootAssembly.PartitionFaceByCurvedPathEdgePoints
Required arguments
A Face object specifying the face to partition.
face
An Edge object specifying the start of the partition. The edge must belong to face.
edge1
A Vertex, InterestingPoint, or DatumPoint object specifying a point on edge1.
point1
An Edge object specifying the end of the partition. The edge must belong to face.
edge2
A Vertex, InterestingPoint, or DatumPoint object specifying a point on edge2.
point2
Abaqus Scripting Reference Guide
706
Feature object

Optional arguments
None.
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionFaceByDatumPlane(...)
This method partitions one or more faces using the given datum plane.
Path
mdb.models[name].parts[name].PartitionFaceByDatumPlane
mdb.models[name].rootAssembly.PartitionFaceByDatumPlane
Required arguments
A sequence of Face objects specifying the faces to partition.
faces
A DatumPlane object specifying the location of the partition.
datumPlane
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
PartitionFaceByExtendFace(...)
This method partitions one or more faces by extending the underlying geometry of another given face to partition the
target faces.
Path
mdb.models[name].parts[name].PartitionFaceByExtendFace
mdb.models[name].rootAssembly.PartitionFaceByExtendFace
Required arguments
A sequence of Face objects specifying the faces to partition.
faces
707
Abaqus Scripting Reference Guide
Feature object

A Face object that is to be extended to create the partition. The face to extend can be a
planar, cylindrical, conical, or spherical face.
extendFace
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
PartitionFaceByIntersectFace(...)
This method partitions one or more faces using the given cutting faces to partition the target faces.
Path
mdb.models[name].parts[name].PartitionFaceByIntersectFace
mdb.models[name].rootAssembly.PartitionFaceByIntersectFace
Required arguments
A sequence of Face objects specifying the faces to partition.
faces
A sequence of Face objects that specify the cutting faces.
cuttingFaces
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
PartitionFaceByProjectingEdges(...)
This method partitions one or more faces by projecting the given edges on the target faces.
Path
mdb.models[name].parts[name].PartitionFaceByProjectingEdges
mdb.models[name].rootAssembly.PartitionFaceByProjectingEdges
Abaqus Scripting Reference Guide
708
Feature object

Required arguments
A sequence of Face objects specifying the faces to partition.
faces
A sequence of Edge objects specifying the edges that will be projected onto the target faces.
edges
Optional arguments
A boolean specifying whether to extend the given edges at their free ends in the tangent
direction before partitioning the target faces. The default value is False.
extendEdges
Return value
A Feature object.
Exceptions
None.
PartitionFaceByShortestPath(...)
This method partitions one or more faces using a minimum distance path between the two given points.
Path
mdb.models[name].parts[name].PartitionFaceByShortestPath
mdb.models[name].rootAssembly.PartitionFaceByShortestPath
Required arguments
A sequence of Face objects specifying the face to partition.
faces
A Vertex, InterestingPoint, or DatumPoint object.
point1
A Vertex, InterestingPoint, or DatumPoint object.
point2
Note:
point1 and point2 must not coincide, and they must both lie on the underlying surface
geometry of at least one of the target faces.
Optional arguments
None.
Return value
A Feature object.
709
Abaqus Scripting Reference Guide
Feature object

Exceptions
AbaqusException.
PartitionFaceBySketch(...)
This method partitions one or more planar faces by sketching on them.
Path
mdb.models[name].parts[name].PartitionFaceBySketch
mdb.models[name].rootAssembly.PartitionFaceBySketch
Required arguments
A sequence of Face objects specifying the faces to partition.
faces
A ConstrainedSketch object specifying the partition.
sketch
Optional arguments
An Edge or DatumAxis object specifying the orientation of sketch. This edge or datum
axis must not be orthogonal to the plane deﬁned by faces. If unspeciﬁed, sketch is assumed
to be oriented in with the Y direction pointing up.
sketchUpEdge
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionFaceBySketchDistance(...)
This method partitions one or more faces by sketching on a sketch plane and then projecting the sketch toward the
target faces through the given distance.
Path
mdb.models[name].parts[name].PartitionFaceBySketchDistance
mdb.models[name].rootAssembly.PartitionFaceBySketchDistance
Required arguments
A sequence of Face objects specifying the faces to partition.
faces
Abaqus Scripting Reference Guide
710
Feature object

A planar Face or DatumPlane object.
sketchPlane
A SymbolicConstant specifying the side of the plane to be used for sketching. Possible
values are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object specifying the orientation of sketch. This edge must not be orthogonal
to sketchPlane.
sketchUpEdge
A ConstrainedSketch object specifying the partition.
sketch
A Float specifying the projection distance. Possible values are distance  0.0.
distance
Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionFaceBySketchRefPoint(...)
This method partitions one or more faces by sketching on a sketch plane and then projecting the sketch toward the
target faces through a distance governed by the reference point.
Path
mdb.models[name].parts[name].PartitionFaceBySketchRefPoint
mdb.models[name].rootAssembly.PartitionFaceBySketchRefPoint
Required arguments
A sequence of Face objects specifying the faces to partition.
faces
A planar Face or DatumPlane object.
sketchPlane
An Edge object or a DatumAxis object specifying the orientation of sketch. This edge
or datum axis must not be orthogonal to sketchPlane.
sketchUpEdge
A ConstrainedSketch object specifying the partition.
sketch
A Vertex, InterestingPoint, or DatumPoint object specifying the distance to project
sketch. The point must not lie on sketchPlane.
point
711
Abaqus Scripting Reference Guide
Feature object

Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
Return value
A Feature object.
Exceptions
AbaqusException.
PartitionFaceBySketchThruAll(...)
This method partitions one or more faces by sketching on a sketch plane and then projecting toward the target faces
through an inﬁnite distance.
Path
mdb.models[name].parts[name].PartitionFaceBySketchThruAll
mdb.models[name].rootAssembly.PartitionFaceBySketchThruAll
Required arguments
A sequence of Face objects specifying the faces to partition.
faces
A planar Face or DatumPlane object.
sketchPlane
A SymbolicConstant specifying the extrude direction of the sketch. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge or a DatumAxis object specifying the orientation of sketch. This edge or
datum axis must not be orthogonal to sketchPlane.
sketchUpEdge
A ConstrainedSketch object specifying the partition.
sketch
Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
Return value
A Feature object.
Exceptions
AbaqusException.
Abaqus Scripting Reference Guide
712
Feature object

ReferencePoint(...)
This method creates a Feature object and a ReferencePoint object at the speciﬁed location.
Path
mdb.models[name].rootAssembly.ReferencePoint
mdb.models[name].parts[name].ReferencePoint
Required arguments
A Vertex, InterestingPoint, a MeshNode, or a Datum object specifying a reference point. point can
also be a sequence of three Floats representing the X-, Y-, and Z-coordinates of the point.
point
Optional arguments
Used internally by the input ﬁle writer.
instanceName
Return value
A Feature Object.
Exceptions
None.
RemoveWireEdges(...)
This method removes wire edges.
Path
mdb.models[name].parts[name].RemoveWireEdges
mdb.models[name].rootAssembly.RemoveWireEdges
Required arguments
A sequence of Edge objects specifying the edges to remove. Any speciﬁed edge that is
not a wire edge will not be removed.
wireEdgeList
Optional arguments
None.
Return value
A Feature object.
713
Abaqus Scripting Reference Guide
Feature object

Exceptions
None.
WirePolyLine(...)
This method creates an additional Feature object by creating a series of wires joining points in pairs. When such a
feature is created at the Part level, then each point can be either a datum point, a vertex, a reference point, an interesting
point, an orphan mesh node, or the coordinates of a point. When such a feature is created at the Assembly level, then
each point can only be a vertex, a reference point, or an orphan mesh node.
Path
mdb.models[name].parts[name].WirePolyLine
mdb.models[name].rootAssembly.WirePolyLine
Required arguments
A tuple of point pairs, each pair being itself represented by a tuple. For part level features each point can
be a Vertex, Datum point, Reference point, orphan mesh Node, or InterestingPoint object specifying the
points
points through which the polyline wire will pass. Each point can also be a tuple of Floats representing the
coordinates of a point. For assembly level features each point can only be a Vertex, Reference point, or
orphan mesh Node specifying the points through which the polyline wire will pass (coordinates cannot be
speciﬁed). In any of the pairs, the ﬁrst or second point can be NONE. In that case, the point pair will create
a zero-length wire, which is required for certain types of connectors. You must specify at least one pair.
Optional arguments
A SymbolicConstant specifying the merge behavior of the wire with existing geometry. If mergeType
is MERGE, Abaqus merges the wire into solid regions of the part if the wire passes through them.
mergeType
If mergeType is IMPRINT, Abaqus imprints the wire on existing geometry as edges. If mergeType
is SEPARATE, Abaqus neither merges nor imprints the spline wire with existing geometry. It
creates the wire separately. The default value is IMPRINT.
A Boolean specifying whether the wire should be available for selection for meshing operations.
If meshable=OFF, the wire can be used for connector section assignment. The default value is ON.
meshable
Return value
A Feature object.
Exceptions
None.
isSuppressed()
This method queries the suppressed state of the feature.
Arguments
None.
Abaqus Scripting Reference Guide
714
Feature object

Return value
A Boolean value of True if the feature is suppressed and False if it is not suppressed.
Exceptions
None.
restore()
This method restores the parameters of a feature to the value they had when the backup method was invoked on the
part or assembly. Use the restore method after the backup method.
Arguments
None.
Return value
None.
Exceptions
None.
resume()
This method resumes suppressed features. Resuming a feature fully restores it to the part or assembly. You can resume
the last feature you suppressed, all suppressed features, or just selected features. When you resume a child feature,
Abaqus/CAE also resumes the parent features automatically.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the Feature object.
Required arguments
None.
715
Abaqus Scripting Reference Guide
Feature object

Optional arguments
A Float specifying the normalized distance along edge at which to partition. Possible values are
0.0 parameter  1.0. You use this argument to modify a partition created with the created with
the PartitionEdgeByParam method.
parameter
A Float specifying the distance along edge1 at which to partition. Possible values are 0.0
parameter1  1.0. You use this argument to modify a partition object created with the
PartitionFaceByCurvedPathEdgeParam method.
parameter1
A Float specifying the distance along edge2 at which to partition. Possible values are 0.0
parameter2  1.0. You use this argument to modify a partition object created with the
PartitionFaceByCurvedPathEdgeParam method.
parameter2
A ConstrainedSketch object specifying the partition. You use this argument to modify a partition
object created with a sketch; for example, using the PartitionFaceBySketch method.
sketch
A Float specifying the projection distance. Possible values are distance  0.0. You use this
argument to modify a partition object created with the PartitionFaceBySketchDistance method.
distance
Return value
None.
Exceptions
AbaqusException.
suppress()
This method suppresses features. Suppressing a feature is equivalent to temporarily removing the feature from the part
or assembly. Suppressed features remain suppressed when you regenerate a part or assembly. You cannot suppress the
base feature. In addition, if you suppress a parent feature, all of its child features are also suppressed automatically.
Suppressed features can be restored with the resume command.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Feature object has the following members:
A String specifying the repository key.
name
Abaqus Scripting Reference Guide
716
Feature object

An Int specifying the ID of the feature.
id
717
Abaqus Scripting Reference Guide
Feature object

FeatureOptions object
The FeatureOptions object stores the options that control the behavior of feature regeneration for all features in a model.
Access
import part
mdb.models[name].featureOptions
setValues(...)
This method modiﬁes the FeatureOptions object for the speciﬁed model.
Required arguments
None.
Optional arguments
A Boolean specifying whether Abaqus/CAE should perform self-intersection checks
while regenerating features. The default value is ON.
checkSelfIntersection
A Boolean specifying whether geometric states should be automatically cached. The
default value is ON.
autoCaching
An Int specifying the maximum number of caches to be stored with each part or with
the assembly. The default value is 5.
maxCachedStates
Return value
None.
Exceptions
None.
Members
The FeatureOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
718
FeatureOptions object

Field commands
A Field object stores the non-propagating data of a ﬁeld as well as a number of instances of the corresponding
FieldState object.
The FieldState object stores the propagating data of the ﬁeld in a single step. A speciﬁc type of Field object and
a speciﬁc type of FieldState object are designed for each type of predeﬁned ﬁeld. Instances of the FieldState
object are created and deleted internally by its corresponding Field object.
In this section:
•
Field object
•
AnalyticalField object
•
DataTable object
•
DiscreteField object
•
ExpressionField object
•
MappedField object
•
OdbMeshRegionData object
719

Field object
The Field object is the abstract base type for other Field objects. The Field object has no explicit constructor. The
methods and members of the Field object are common to all objects derived from the Field.
Access
import fields
Members
The Field object can have the following members:
A String specifying the repository key.
name
A String specifying the description of the ﬁeld. The default value is an empty string.
description
Abaqus Scripting Reference Guide
720
Field object

AnalyticalField object
The AnalyticalField object is the abstract base type for other AnalyticalField objects. The AnalyticalField object has
no explicit constructor. The methods and members of the AnalyticalField object are common to all objects derived
from the AnalyticalField.
The AnalyticalField object is derived from the Field object.
Access
import fields
mdb.models[name].analyticalFields[name]
Members
The AnalyticalField object can have the following members:
A String specifying the repository key.
name
None or a DatumCsys object specifying the local coordinate system of the ﬁeld. If
localCsys=None, the ﬁeld is deﬁned in the global coordinate system. The default value
is None.
localCsys
A String specifying the description of the ﬁeld. The default value is an empty string.
description
721
AnalyticalField object

DataTable object
A DataTable is an object used to deﬁne the domain and data for a DiscreteField.
Access
import field
mdb.models[name].discreteFields[name].data[i]
Members
The DataTable object has the following members:
An Int specifying the width of the data. Valid widths are 1, 6, 21, corresponding to
scalar data, orientations and 4D tensors.
dataWidth
A String specifying the index.
name
A String specifying the instance name.
instanceName
A tuple of Ints specifying the domain node, element or integration point identiﬁers.
domain
A tuple of Floats specifying the data within the domain.
table
Abaqus Scripting Reference Guide
722
DataTable object

DiscreteField object
The DiscreteField object deﬁnes a varying ﬁeld whose values correspond to distinct points within a domain.
The DiscreteField object is derived from the Field object.
Access
import fields
mdb.models[name].discreteFields[name]
DiscreteField(...)
This method creates a DiscreteField object.
Path
mdb.models[name].DiscreteField
Required arguments
A String specifying the repository key.
name
A sequence of Floats specifying a sequence of ﬂoats specifying the default values.
defaultValues
A SymbolicConstant or an Int specifying the type of data represented by this discrete
ﬁeld. Possible values are SCALAR, ORIENTATION, and
PRESCRIBEDCONDITION_DOF.
ﬁeldType
Optional arguments
A SymbolicConstant or an Int specifying the location of the domain data. Possible values
are NODES and ELEMENTS. The default value is NODES.
location
An Int specifying the width of the supplied data. The default value is 1.
dataWidth
A DataTableArray object.
data
A String specifying the description of the ﬁeld. The default value is an empty string.
description
A SymbolicConstant specifying the type of the system being described by a discrete
ﬁeld used for an orientation. Possible values are CARTESIAN, CYLINDRICAL, and
SPHERICAL. The default value is CARTESIAN.
orientationType
A Boolean specifying whether or not the orientations are described in terms of part level
coordinates. The default value is OFF.
partLevelOrientation
Return value
A DiscreteField object.
723
DiscreteField object

Exceptions
AbaqusException.
DiscreteFieldByVolumeFraction(...)
This method creates a DiscreteField object that represents the volume fraction of each element of an Eulerian Instance
that is occupied by a reference instance.
Path
mdb.models[name].rootAssembly.DiscreteFieldByVolumeFraction
Required arguments
A String specifying the repository key.
name
A PartInstance object specifying the elements for which volume fraction values
will be computed.
eulerianInstance
A PartInstance object specifying the region that either contains material or is
empty of material.
referenceInstance
Optional arguments
A Symbolic Constant specifying the level of accuracy that will be used in computing
volume fractions. Possible values are LOW, MEDIUM, or HIGH. The default value is
MEDIUM.
accuracy
A Symbolic Constant indicating whether the material is inside or outside the
referenceInstance. Possible values are INSIDE or OUTSIDE. The default value is INSIDE.
materialLocation
A String specifying the description of the ﬁeld. The default value is an empty string.
description
A ﬂoat specifying the fraction of the volume that is occupied by the referenceInstance.
Valid values are between 0 and 1.
scaleFactor
Return value
A DiscreteField object.
Exceptions
AbaqusException.
DiscreteFieldFromAnalytic(...)
This method creates a DiscreteField object from a AnalyticalField object.
Path
mdb.models[name].DiscreteFieldFromAnalytic
Abaqus Scripting Reference Guide
724
DiscreteField object

Required arguments
A String specifying the repository key.
name
A SymbolicConstant or an Int specifying the location of the domain data. Possible
values are NODES and ELEMENTS. The default value is NODES.
location
A String specifying the name of the AnalyticalField containing the source data.
analyticFieldName
A Region object for the ﬁeld.
region
Optional arguments
None.
Return value
A DiscreteField object.
Exceptions
AbaqusException.
setValues(...)
This method modiﬁes the DiscreteField object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DiscreteField  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The DiscreteField object has members with the same names and descriptions as the arguments to the DiscreteField
method.
725
Abaqus Scripting Reference Guide
DiscreteField object

ExpressionField object
The ExpressionField object deﬁnes a spatially varying ﬁeld whose value is calculated from a user-supplied mathematical
expression.
The ExpressionField object is derived from the AnalyticalField object.
Access
import fields
mdb.models[name].analyticalFields[name]
ExpressionField(...)
This method creates an ExpressionField object.
Path
mdb.models[name].ExpressionField
Required arguments
A String specifying the repository key.
name
A String specifying the Python expression to evaluate in space. Variables are X, Y, and Z;
R, Th, and Z; or R, Th, and P based on the selected coordinate system.
expression
Optional arguments
None or a DatumCsys object specifying the local coordinate system of the ﬁeld. If
localCsys=None, the ﬁeld is deﬁned in the global coordinate system. The default value is
None.
localCsys
A String specifying the description of the ﬁeld. The default value is an empty string.
description
Return value
An ExpressionField object.
Exceptions
TextException.
setValues(...)
This method modiﬁes the ExpressionField object.
Required arguments
None.
Abaqus Scripting Reference Guide
726
ExpressionField object

Optional arguments
The optional arguments to setValues are the same as the arguments to the ExpressionField  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The ExpressionField object has members with the same names and descriptions as the arguments to the ExpressionField
method.
727
Abaqus Scripting Reference Guide
ExpressionField object

MappedField object
The MappedField object deﬁnes a spatially varying ﬁeld whose value is calculated from an external source data.
The MappedField object is derived from the AnalyticalField object.
Access
import fields
mdb.models[name].analyticalFields[name]
MappedField(...)
This method creates an MappedField object.
Path
mdb.models[name].MappedField
Required arguments
A String specifying the repository key.
name
Optional arguments
A SymbolicConstant specifying the data source region type. It can be either an ODB mesh
or a cloud of points. Possible values are MESH and POINT. The default value is POINT.
regionType
A Boolean specifying whether or not the point cloud source data are described in terms
of part level coordinates. If part level coordinates is employed, the local coordinate system
deﬁned in localCsys will be ignored. The default value is OFF.
partLevelData
A SymbolicConstant specifying point cloud source data format. Possible values are GRID
and XYZ. The default value is XYZ.
pointDataFormat
A SymbolicConstant specifying the plane on which the point cloud source data of grid
format are described. Possible values are XYPLANE, YZPLANE, and XZPLANE. The
default value is XYPLANE.
gridPointPlane
A Float specifying the parameter (ﬁeld) value reported when a value cannot be calculated
from the data source. The default value is 0.0.
defaultUnMappedValue
A SymbolicConstant specifying the mapping algorithm for target surface, or on mesh
target model when the parameter value are located at nodes, for example nodal
mappingAlgorithm
temperatures. Possible values are SURFACE and VOLUMETRIC. The default value is
SURFACE.
A SymbolicConstant specifying searching tolerance type in terms of absolute value or a
fraction of the average of all element characteristic length in target model region. Possible
values are ABSOLUTE and RELATIVE. The default value is RELATIVE.
searchTolType
Abaqus Scripting Reference Guide
728
MappedField object

A Float specifying the search distance tolerance value on the exterior boundary of target
model region. Source points within this distance will be included in computing the
boundarySearchTol
parameter value of target region. This tolerance applies to both surface and volumetric
mapping. The default value is 0.01.
A Float specifying the search distance tolerance value used for distance weighting
algorithm. Source points within this distance will be included in computing the parameter
neighborhoodSearchTol
value of target region. This tolerance only applies to surface mapping. The default value
is 1000000.0.
A Float specifying the search distance tolerance value in the negative normal of target
surface region. Source points within this distance will be included in computing the
negativeNormalSearchTol
parameter value of target region. This tolerance only applies to surface mapping. The
default value is 0.15.
A Float specifying the search distance tolerance value in the positive normal of target
surface region. Source points within this distance will be included in computing the
positiveNormalSearchTol
parameter value of target region. This tolerance only applies to surface mapping. The
default value is 0.05.
A Boolean specifying whether or not to scale the user-supplied coordinate values from
the point cloud or indicated ODB. The default value is OFF.
scaleCoordinates
A sequence of sequences of Floats specifying the point cloud source data of grid format.
The default value is an empty sequence.
gridPointData
A sequence of sequences of Floats specifying the point cloud source data of XYZ format.
Each data item is deﬁning the XYZ coordinates of a point and its ﬁeld value. The default
value is an empty sequence.
xyzPointData
A sequence of Floats specifying the scaling factors for the global 1, 2 and 3 directions.
The default value is (1.0, 1.0, 1.0).
coordinateScalingFactors
None or a DatumCsys object specifying the local coordinate system of the ﬁeld. If
localCsys=None, the ﬁeld is deﬁned in the global coordinate system. The default value
is None.
localCsys
A String specifying the description of the ﬁeld. The default value is an empty string.
description
Return value
A MappedField object.
Exceptions
AbaqusException.
setValues(...)
This method modiﬁes the MappedField object.
729
Abaqus Scripting Reference Guide
MappedField object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MappedField  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The MappedField object has the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the data source region type. It can be either an ODB
mesh or a cloud of points. Possible values are MESH and POINT. The default value is
POINT.
regionType
A Boolean specifying whether or not the point cloud source data are described in terms
of part level coordinates. If part level coordinates is employed, the local coordinate system
deﬁned in localCsys will be ignored. The default value is OFF.
partLevelData
A SymbolicConstant specifying point cloud source data format. Possible values are GRID
and XYZ. The default value is XYZ.
pointDataFormat
A SymbolicConstant specifying the plane on which the point cloud source data of grid
format are described. Possible values are XYPLANE, YZPLANE, and XZPLANE. The
default value is XYPLANE.
gridPointPlane
A Float specifying default parameter (ﬁeld) value of target model region while its value
cannot be calculated from the data source. The default value is 0.0.
defaultUnMappedValue
A SymbolicConstant specifying the mapping algorithm for target surface, or on mesh
target model when the parameter value are located at nodes, for example nodal
mappingAlgorithm
temperatures. Possible values are SURFACE and VOLUMETRIC. The default value is
SURFACE.
A SymbolicConstant specifying searching tolerance type in terms of absolute value or a
fraction of the average of all element characteristic length in target model region. Possible
values are ABSOLUTE and RELATIVE. The default value is RELATIVE.
searchTolType
A Float specifying the search distance tolerance value on the exterior boundary of target
model region. Source points within this distance will be included in computing the
boundarySearchTol
Abaqus Scripting Reference Guide
730
MappedField object

parameter value of target region. This tolerance applies to both surface and volumetric
mapping. The default value is 0.01.
A Float specifying the search distance tolerance value used for distance weighting
algorithm. Source points within this distance will be included in computing the parameter
neighborhoodSearchTol
value of target region. This tolerance only applies to surface mapping. The default value
is 1000000.0.
A Float specifying the search distance tolerance value in the negative normal of target
surface region. Source points within this distance will be included in computing the
negativeNormalSearchTol
parameter value of target region. This tolerance only applies to surface mapping. The
default value is 0.15.
A Float specifying the search distance tolerance value in the positive normal of target
surface region. Source points within this distance will be included in computing the
positiveNormalSearchTol
parameter value of target region. This tolerance only applies to surface mapping. The
default value is 0.05.
A Boolean specifying whether or not to scale the user-supplied coordinate values from
the point cloud or indicated ODB. The default value is OFF.
scaleCoordinates
A tuple of tuples of Floats specifying the point cloud source data of grid format. The
default value is an empty sequence.
gridPointData
A tuple of tuples of Floats specifying the point cloud source data of XYZ format. Each
data item is deﬁning the XYZ coordinates of a point and its ﬁeld value. The default value
is an empty sequence.
xyzPointData
An OdbMeshRegionData object specifying the external source data from ODB mesh
region.
odbMeshRegionData
A tuple of Floats specifying the scaling factors for the global 1, 2 and 3 directions. The
default value is (1.0, 1.0, 1.0).
coordinateScalingFactors
None or a DatumCsys object specifying the local coordinate system of the ﬁeld. If
localCsys=None, the ﬁeld is deﬁned in the global coordinate system. The default value
is None.
localCsys
A String specifying the description of the ﬁeld. The default value is an empty string.
description
731
Abaqus Scripting Reference Guide
MappedField object

OdbMeshRegionData object
The OdbMeshRegionData object deﬁnes the external source data of MappedField from an ODB ﬁle.
Access
import
field
mdb.models[name].analyticalFields[name].odbMeshRegionData
OdbMeshRegionData(...)
This method creates an OdbMeshRegionData object.
Path
mdb.models[name].analyticalFields[name].OdbMeshRegionData
Required arguments
A String specifying the name of the output database ﬁle (including the .odb extension)
to be read into as the source data. This String can also be the full path to the output
database ﬁle if it is located in another directory.
odbFileName
A String specifying the ﬁeld output variable.
variableLabel
Optional arguments
An Int specifying the step index. Possible values are 0 stepIndex  (numSteps − 1). The
default value is 0.
stepIndex
An Int specifying the frame in the speciﬁed step. Valid values are 0 frameIndex
(numFramesInStep − 1). The default value is 0.
frameIndex
A SymbolicConstant specifying the position where the data is written in the output
database. Data can be obtained only from the position at which it was written to the output
outputPosition
database during the analysis. This position should be aligned with the ﬁeld output variable.
Possible values are:
•
UNDEFINED_POSITION
•
NODAL
•
INTEGRATION_POINT
•
ELEMENT_FACE
•
ELEMENT_NODAL
•
ELEMENT_CENTROID
•
WHOLE_ELEMENT
•
WHOLE_REGION
•
WHOLE_PART_INSTANCE
Abaqus Scripting Reference Guide
732
OdbMeshRegionData object

•
WHOLE_MODEL
•
GENERAL_PARTICLE
The default value is UNDEFINED_POSITION.
A SymbolicConstant specifying the data type of the ﬁeld output variable which should
be aligned with the variable. Currently only SCALAR is supported. Possible values are:
dataType
•
ENUMERATION
•
BOOLEAN
•
INTEGER
•
SCALAR
•
VECTOR
•
QUATERNION_2D
•
QUATERNION_3D
•
TENSOR
•
TENSOR_3D_FULL
•
TENSOR_3D_PLANAR
•
TENSOR_3D_SURFACE
•
TENSOR_2D_PLANAR
•
TENSOR_2D_SURFACE
The default value is SCALAR.
A SymbolicConstant specifying the storage type of the ﬁeld output variable which should
be aligned with the variable. Possible values are FLOAT, DOUBLE, INTEGER, and
BOOLEAN. The default value is FLOAT.
storageType
A SymbolicConstant specifying the quantity to plot. Currently only FIELD_OUTPUT is
supported. Possible values are FIELD_OUTPUT and DISCONTINUITIES. The default
value is FIELD_OUTPUT.
quantityToPlot
A Boolean specifying whether to average the element output. The default value is OFF.
averageElementOutput
A Boolean specifying whether to use region boundaries when averaging. The default
value is OFF.
useRegionBoundaries
A SymbolicConstant specifying the type of averaging region boundaries. Currently only
NONE and ODB_REGIONS are supported. Possible values are NONE, ODB_REGIONS,
ELEMENT_SET, and DISPLAY_GROUPS. The default value is NONE.
regionBoundaries
A Boolean specifying whether to include additional averaging boundaries for shells and
membranes based on feature edges. The default value is ON.
includeFeatureBoundaries
A Float specifying the feature angle to be used when includeFeatureBoundaries=ON.
The default value is 20.0.
featureAngle
733
Abaqus Scripting Reference Guide
OdbMeshRegionData object

A Boolean specifying whether to average only values on displayed elements. The default
value is OFF.
averageOnlyDisplayed
A Float specifying the nodal averaging threshold percentage. 0 averagingThreshold 100.
The default value is 75.0.
averagingThreshold
A SymbolicConstant specifying the order or the computations to be performed on the
interested ﬁeld output variable. Possible values are
computeOrder
EXTRAPOLATE_AVERAGE_COMPUTE, EXTRAPOLATE_COMPUTE_AVERAGE,
EXTRAPOLATE_COMPUTE, EXTRAPOLATE_COMPUTE_DISCONTINUITIES,
and RAW_DATA. The default value is EXTRAPOLATE_COMPUTE_AVERAGE.
A SymbolicConstant specifying the numeric form in which to display results that contain
complex numbers. Possible values are COMPLEX_MAGNITUDE, COMPLEX_PHASE,
REAL, IMAGINARY, and COMPLEX_MAG_AT_ANGLE. The default value is REAL.
numericForm
A Float specifying the angle (in degrees) at which to display results that contain complex
numbers when
complexAngle
numericForm=COMPLEX_MAG_AT_ANGLE=COMPLEX_MAG_AT_ANGLE. The
default value is 0.0.
A Dictionary with String keys and String values. Each key speciﬁes a region in the model;
the corresponding value speciﬁes a section point within that region. For example:
                   sectionPoint={'shell < MAT > < 7 section
sectionPoint
 points >':'SPOS,
                   (fraction = 1.0)', 'shell < MAT > < 5 
section points >':
                   'SPOS, (fraction = 1.0)', }
A SymbolicConstant specifying the type of the FieldOutput object. Possible values for
the SymbolicConstant are NO_REFINEMENT, INVARIANT and COMPONENT. Default
reﬁnementType
argument is NO_REFINEMENT. reﬁnementType is mandetory if variableLabel has an
INVARIANT or a COMPONENT.
A String specifying the Label of FieldOutput object. This is required only if the
reﬁnementType is INVARIANT or COMPONENT.
reﬁnementLabel
A SymbolicConstant specifying the position from which to obtain the data. Possible
values are NODAL, INTEGRATION_POINT, ELEMENT_FACE, ELEMENT_NODAL,
displayOutputPosition
ELEMENT_CENTROID, WHOLE_ELEMENT, WHOLE_REGION,
WHOLE_PART_INSTANCE, WHOLE_MODEL, and GENERAL_PARTICLE.
Return value
An OdbMeshRegionData object.
Exceptions
TextException.
Abaqus Scripting Reference Guide
734
OdbMeshRegionData object

setValues(...)
This method modiﬁes the OdbMeshRegionData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the OdbMeshRegionData  method.
Return value
None.
Exceptions
None.
Members
The OdbMeshRegionData object has the following members:
An Int specifying the step index. Possible values are 0 stepIndex  (numSteps − 1). The
default value is 0.
stepIndex
An Int specifying the frame in the speciﬁed step. Valid values are 0 frameIndex
(numFramesInStep − 1). The default value is 0.
frameIndex
A SymbolicConstant specifying the position from which to obtain data. Data can be
obtained only from the position at which they were written to the output database during
outputPosition
the analysis. This position should be aligned with the ﬁeld output variable. Possible values
are:
•
UNDEFINED_POSITION
•
NODAL
•
INTEGRATION_POINT
•
ELEMENT_FACE
•
ELEMENT_NODAL
•
ELEMENT_CENTROID
•
WHOLE_ELEMENT
•
WHOLE_REGION
•
WHOLE_PART_INSTANCE
•
WHOLE_MODEL
•
GENERAL_PARTICLE
The default value is UNDEFINED_POSITION.
735
Abaqus Scripting Reference Guide
OdbMeshRegionData object

A SymbolicConstant specifying the data type of the ﬁeld output variable which should
be aligned with the variable. Currently only SCALAR is supported. Possible values are:
dataType
•
ENUMERATION
•
BOOLEAN
•
INTEGER
•
SCALAR
•
VECTOR
•
QUATERNION_2D
•
QUATERNION_3D
•
TENSOR
•
TENSOR_3D_FULL
•
TENSOR_3D_PLANAR
•
TENSOR_3D_SURFACE
•
TENSOR_2D_PLANAR
•
TENSOR_2D_SURFACE
The default value is SCALAR.
A SymbolicConstant specifying the storage type of the ﬁeld output variable which should
be aligned with the variable. Possible values are FLOAT, DOUBLE, INTEGER, and
BOOLEAN. The default value is FLOAT.
storageType
A SymbolicConstant specifying the quantity to plot. Currently only FIELD_OUTPUT is
supported. Possible values are FIELD_OUTPUT and DISCONTINUITIES. The default
value is FIELD_OUTPUT.
quantityToPlot
A Boolean specifying whether to average the element output. The default value is OFF.
averageElementOutput
A Boolean specifying whether to use region boundaries when averaging. The default
value is OFF.
useRegionBoundaries
A SymbolicConstant specifying the type of averaging region boundaries. Currently only
NONE and ODB_REGIONS are supported. Possible values are NONE, ODB_REGIONS,
ELEMENT_SET, and DISPLAY_GROUPS. The default value is NONE.
regionBoundaries
A Boolean specifying whether to include additional averaging boundaries for shells and
membranes based on feature edges. The default value is ON.
includeFeatureBoundaries
A Float specifying the feature angle to be used when includeFeatureBoundaries=ON.
The default value is 20.0.
featureAngle
A Boolean specifying whether to average only values on displayed elements. The default
value is OFF.
averageOnlyDisplayed
Abaqus Scripting Reference Guide
736
OdbMeshRegionData object

A Float specifying the nodal averaging threshold percentage. 0 averagingThreshold 100.
The default value is 75.0.
averagingThreshold
A SymbolicConstant specifying the order or the computations to be performed on the
interested ﬁeld output variable. Possible values are
computeOrder
EXTRAPOLATE_AVERAGE_COMPUTE, EXTRAPOLATE_COMPUTE_AVERAGE,
EXTRAPOLATE_COMPUTE, EXTRAPOLATE_COMPUTE_DISCONTINUITIES,
and RAW_DATA. The default value is EXTRAPOLATE_COMPUTE_AVERAGE.
A SymbolicConstant specifying the numeric form in which to display results that contain
complex numbers. Possible values are COMPLEX_MAGNITUDE, COMPLEX_PHASE,
REAL, IMAGINARY, and COMPLEX_MAG_AT_ANGLE. The default value is REAL.
numericForm
A Float specifying the angle (in degrees) at which to display results that contain complex
numbers when
complexAngle
numericForm=COMPLEX_MAG_AT_ANGLE=COMPLEX_MAG_AT_ANGLE. The
default value is 0.0.
A String specifying the name of the output database ﬁle (including the .odb extension)
to be read into as the source data. This String can also be the full path to the output
database ﬁle if it is located in another directory.
odbFileName
A String specifying the ﬁeld output variable.
variableLabel
A SymbolicConstant specifying the position where the output is displayed in the viewport.
Possible values are:
displayOutputPosition
•
UNDEFINED_POSITION
•
NODAL
•
INTEGRATION_POINT
•
ELEMENT_FACE
•
ELEMENT_NODAL
•
ELEMENT_CENTROID
•
WHOLE_ELEMENT
•
WHOLE_REGION
•
WHOLE_PART_INSTANCE
•
WHOLE_MODEL
•
GENERAL_PARTICLE
The default value is UNDEFINED_POSITION.
737
Abaqus Scripting Reference Guide
OdbMeshRegionData object

Field Report commands
Field report commands are used to write a ﬁeld output report and free body computational results to an ASCII
ﬁle.
In this section:
•
FieldReportOptions object
•
FreeBodyReportOptions object
•
OdbFieldVarList object
•
OdbModelFieldVarList object
•
writeFieldReport
•
writeFreeBodyReport
Abaqus Scripting Reference Guide
738

FieldReportOptions object
The FieldReportOptions object stores settings used by the writeFieldReport method when you write a FieldOutput
object to an ASCII ﬁle. The FieldReportOptions object has no constructor. Abaqus creates the ﬁeldReportOptions
member when you import the Visualization module.
Access
import visualization
session.defaultFieldReportOptions
session.fieldReportOptions
setValues(...)
This method modiﬁes the FieldReportOptions object.
Required arguments
None.
Optional arguments
An Int specifying the number of columns to display for the tabular report. The default
value is 80.
numColumns
A NumberFormat object specifying the format type, number of digits and precision used
to print the numeric output.
numberFormat
A Boolean specifying whether to include X–Y data values in the tabular report. The default
value is ON.
printXYData
A Boolean specifying whether to include column totals in the tabular report. The default
value is ON.
printTotal
A Boolean specifying whether to include column summary minimum and maximum
values in the tabular report. The default value is ON.
printMinMax
A SymbolicConstant specifying how the width of the tabular report is to be determined.
Possible values are NO_LIMIT and SPECIFY. The default value is NO_LIMIT.
pageWidth
A SymbolicConstant specifying how values are to be presented in the tabular report.
Possible values are SINGLE_TABLE and SEPARATE_TABLES. The default value is
SINGLE_TABLE.
columnLayout
A SymbolicConstant specifying the order in which values are to be sorted within a tabular
report. Possible values are ASCENDING and DESCENDING. The default value is
ASCENDING.
sort
A Boolean specifying whether to include the local coordinate system values in the tabular
report. The default value is OFF.
printLocalCSYS
739
FieldReportOptions object

Return value
A FieldReportOptions object.
Exceptions
None.
Members
The FieldReportOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
740
FieldReportOptions object

FreeBodyReportOptions object
The FreeBodyReportOptions object stores settings used by the writeFreeBodyReport method when you write
free body computational results to an ASCII ﬁle. The FreeBodyReportOptions object has no constructor. Abaqus
creates the freeBodyReportOptions member when you import the Visualization module.
Access
import visualization
session.defaultFreeBodyReportOptions
session.freeBodyReportOptions
setValues(...)
This method modiﬁes the FreeBodyReportOptions object.
Required arguments
None.
Optional arguments
An Int specifying the number of decimal places. The default value is 3.
numDigits
A Float specifying the threshold value for force. The default value is 10–6.
forceThreshold
A Float specifying the threshold value for moment. The default value is 10–6.
momentThreshold
A SymbolicConstant specifying the number format. Possible values are SCIENTIFIC,
FIXED, and ENGINEERING. The default value is SCIENTIFIC.
numberFormat
A SymbolicConstant specifying the report format. Possible values are
NORMAL_ANNOTATED and COMMA_SEPARATED_VALUES. The default value
is NORMAL_ANNOTATED.
reportFormat
A SymbolicConstant specifying the coordinate system type. Possible values are
GLOBAL and LOCAL. The default value is GLOBAL.
csysType
Return value
A FreeBodyReportOptions object.
Exceptions
None.
Members
The FreeBodyReportOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
741
FreeBodyReportOptions object

OdbFieldVarList object
The read-only OdbFieldVarList object is a sequence listing all variables available for the current step and frame. Each
item in the sequence is itself a sequence fully describing the given variable.
Access
import visualization
session.viewports[name].layers[name].odbDisplay.fieldVariables
session.viewports[name].odbDisplay.fieldVariables
Members
The OdbFieldVarList object has no members.
Abaqus Scripting Reference Guide
742
OdbFieldVarList object

OdbModelFieldVarList object
The read-only OdbModelFieldVarList object lists all variables available for the model in the current OdbDisplay object.
Access
import visualization
session.viewports[name].layers[name].odbDisplay.modelVariableList
session.viewports[name].odbDisplay.modelVariableList
Members
The OdbModelFieldVarList object has no members.
743
OdbModelFieldVarList object

writeFieldReport
This command writes a ﬁeld output report to a ﬁle.
writeFieldReport
This method writes a FieldOutput object to a user-deﬁned ASCII ﬁle.
Path
session.writeFieldReport
Required arguments
A String specifying the name of the ﬁle to which ﬁeld output will be written.
ﬁlename
A Boolean specifying whether to append the ﬁeld output to an existing ﬁle. The default value
is ON.
append
A String specifying the item by which to sort the tabular values.
sortItem
An Odb object from which to obtain ﬁeld output values.
odb
An Int (or stepIndex) specifying the step from which to obtain ﬁeld output values. Possible
values are 0 step  (numSteps − 1).
step
An Int (or frameIndex) specifying the frame from which to obtain ﬁeld output values. Possible
values are 0 frame  (numFramesInStep − 1).
frame
A SymbolicConstant specifying the position from which to obtain data. Possible values are
NODAL, INTEGRATION_POINT, ELEMENT_FACE, ELEMENT_NODAL,
outputPosition
ELEMENT_CENTROID, WHOLE_ELEMENT, WHOLE_REGION,
WHOLE_PART_INSTANCE, WHOLE_MODEL, and GENERAL_PARTICLE.
A DisplayGroup object specifying the subset of the model for which to obtain data.
displayGroup
A sequence of variable description sequences specifying one or more ﬁeld output variables
for which to obtain data. Each variable description sequence contains the following elements:
variable
•
element0: A String specifying the name of the variable.
•
element1: A SymbolicConstant specifying the output position at which to report data.
Possible values are ELEMENT_CENTROID, ELEMENT_FACE, ELEMENT_NODAL,
GENERAL_PARTICLE, INTEGRATION_POINT, NODAL, WHOLE_ELEMENT,
WHOLE_MODEL, WHOLE_PART_INSTANCE, and WHOLE_REGION.
•
element2: A Sequence of tuples each consisting of a SymbolicConstant specifying the
reﬁnement (COMPONENT or INVARIANT), followed by a String specifying the name
of a component or invariant for which to obtain values.
If this element is omitted, data are written for all components and invariants (if applicable).
This element is required if element3 (the following element in the tuple) is included.
Abaqus Scripting Reference Guide
744
writeFieldReport

•
element3 (if applicable): A Dictionary with a String key and a String value specifying a
single section point at which to report data. The key speciﬁes a region in the model; the
corresponding value speciﬁes a section point within that region. For example:
{'shell < MAT > < 7 section points >':'SPOS,
    (fraction = 1.0)'}
If this element is omitted, data are written for all section points (if applicable).
Optional arguments
A SymbolicConstant specifying the numeric form in which to display results that contain
complex numbers. Possible values are COMPLEX_MAGNITUDE, COMPLEX_PHASE,
numericForm
REAL, IMAGINARY, and COMPLEX_MAG_AT_ANGLE. The initial value is
COMPLEX_MAGNITUDE.
A Float specifying the angle (in degrees) at which to display results that contain complex
numbers when numericForm=COMPLEX_MAG_AT_ANGLE. The initial value is 0.
complexAngle
A SymbolicConstant indicating whether to obtain the values from the speciﬁed frame
or from all active frames. Possible values are SPECIFY and ALL. The default value is
SPECIFY.
stepFrame
Return value
None.
Exceptions
None.
745
Abaqus Scripting Reference Guide
writeFieldReport

writeFreeBodyReport
This command writes a free body output report to a ﬁle.
writeFreeBodyReport
This method writes a FreeBody object to a user-deﬁned ASCII ﬁle.
Path
session.writeFreeBodyReport
Required arguments
A String specifying the name of the ﬁle to which the free body output will be written.
ﬁleName
A Boolean specifying whether to append the free body output to an existing ﬁle. The
default value is ON.
append
Optional arguments
An Int identifying the step from which to obtain values. The default value is the current
step.
step
An Int identifying the frame from which to obtain values. The default value is the current
frame.
frame
A SymbolicConstant indicating whether to obtain the values from the speciﬁed frame or
from all active frames. Possible values are SPECIFY and ALL. The default value is
SPECIFY.
stepFrame
An Odb object specifying the output database from which data will be read.
odb
Abaqus Scripting Reference Guide
746
writeFreeBodyReport

Filter commands
Filter commands are used to create real-time ﬁlters of output request data.
In this section:
•
Filter object
•
ButterworthFilter object
•
Chebyshev1Filter object
•
Chebyshev2Filter object
•
OperatorFilter object
747

Filter object
The Filter object is the abstract base type for other Filter objects. The Filter object has no explicit constructor. The
methods and members of the Filter object are common to all objects derived from the Filter.
Access
import filter
mdb.models[name].filters[name]
import odbFilter
session.odbs[name].filters[name]
Members
The Filter object has the following members:
A String specifying the repository key. This name ANTIALIASING is reserved for ﬁlters
generated internally by the program.
name
A Float specifying the attenuation point of the ﬁlter. Possible values are non-negative numbers.
Order is not available for OperatorFilter.
cutoffFrequency
An Int specifying the highest power of the ﬁlter transfer function. Possible values are
non-negative numbers less than or equal to 20. Order is not available for OperatorFilter. The
default value is 2.
order
A SymbolicConstant specifying the ﬁlter operator. Possible values are NONE, MIN, MAX,
and ABS. The default value is NONE.
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is OFF.
halt
None or a Float specifying the threshold limit, an upper or lower bound for output values
depending on the operation, or a bound for stopping the analysis when Halt is used. The default
value is None.
limit
A SymbolicConstant specifying the invariant to which ﬁltering is applied. Possible values are
NONE, FIRST, and SECOND. The default value is NONE.
invariant
Abaqus Scripting Reference Guide
748
Filter object

ButterworthFilter object
The ButterworthFilter object deﬁnes a Butterworth type ﬁlter.
The ButterworthFilter object is derived from the Filter object.
Access
import filter
mdb.models[name].filters[name]
import odbFilter
session.odbs[name].filters[name]
ButterworthFilter(...)
This method creates a ButterworthFilter object.
Path
mdb.models[name].ButterworthFilter
session.odbs[name].ButterworthFilter
Required arguments
A String specifying the repository key. This name ANTIALIASING is reserved for ﬁlters
generated internally by the program.
name
A Float specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
An Int specifying the highest power of the ﬁlter transfer function. Possible values are non-negative
numbers less than or equal to 20. Order is not available for OperatorFilter. The default value is
2.
order
A SymbolicConstant specifying the ﬁlter operator. Possible values are NONE, MIN, MAX, and
ABS. The default value is NONE.
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is OFF.
halt
None or a Float specifying the threshold limit, an upper or lower bound for output values
depending on the operation, or a bound for stopping the analysis when Halt is used. The default
value is None.
limit
A SymbolicConstant specifying the invariant to which ﬁltering is applied. Possible values are
NONE, FIRST, and SECOND. The default value is NONE.
invariant
749
ButterworthFilter object

Return value
A ButterworthFilter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the ButterworthFilter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ButterworthFilter  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The ButterworthFilter object has members with the same names and descriptions as the arguments to the
ButterworthFilter  method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
750
ButterworthFilter object

Chebyshev1Filter object
The Chebyshev1Filter object deﬁnes a Chebyshev type 1 ﬁlter.
The Chebyshev1Filter object is derived from the Filter object.
Access
import filter
mdb.models[name].filters[name]
import odbFilter
session.odbs[name].filters[name]
Chebyshev1Filter(...)
This method creates a Chebyshev1Filter object.
Path
mdb.models[name].Chebyshev1Filter
session.odbs[name].Chebyshev1Filter
Required arguments
A String specifying the repository key. This name ANTIALIASING is reserved for ﬁlters
generated internally by the program.
name
A Float specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
A Float specifying the amount of allowable ripple in the ﬁlter. Possible values are non-negative
numbers. The default value is 0.225.
rippleFactor
An Int specifying the highest power of the ﬁlter transfer function. Possible values are
non-negative numbers less than or equal to 20. Order is not available for OperatorFilter. The
default value is 2.
order
A SymbolicConstant specifying the ﬁlter operator. Possible values are NONE, MIN, MAX,
and ABS. The default value is NONE.
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is OFF.
halt
None or a Float specifying the threshold limit, an upper or lower bound for output values
depending on the operation, or a bound for stopping the analysis when Halt is used. The default
value is None.
limit
A SymbolicConstant specifying the invariant to which ﬁltering is applied. Possible values are
NONE, FIRST, and SECOND. The default value is NONE.
invariant
751
Chebyshev1Filter object

Return value
A Chebyshev1Filter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the Chebyshev1Filter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Chebyshev1Filter  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The Chebyshev1Filter object has members with the same names and descriptions as the arguments to the
Chebyshev1Filter  method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
752
Chebyshev1Filter object

Chebyshev2Filter object
The Chebyshev2Filter object deﬁnes a Chebyshev type 2 ﬁlter.
The Chebyshev2Filter object is derived from the Filter object.
Access
import filter
mdb.models[name].filters[name]
import odbFilter
session.odbs[name].filters[name]
Chebyshev2Filter(...)
This method creates a Chebyshev2Filter object.
Path
mdb.models[name].Chebyshev2Filter
session.odbs[name].Chebyshev2Filter
Required arguments
A String specifying the repository key. This name ANTIALIASING is reserved for ﬁlters
generated internally by the program.
name
A Float specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
A Float specifying the amount of allowable ripple in the ﬁlter. Possible values are non-negative
numbers less than 1. The default value is 0.025.
rippleFactor
An Int specifying the highest power of the ﬁlter transfer function. Possible values are
non-negative numbers less than or equal to 20. Order is not available for OperatorFilter. The
default value is 2.
order
A SymbolicConstant specifying the ﬁlter operator. Possible values are NONE, MIN, MAX,
and ABS. The default value is NONE.
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is OFF.
halt
None or a Float specifying the threshold limit, an upper or lower bound for output values
depending on the operation, or a bound for stopping the analysis when Halt is used. The default
value is None.
limit
A SymbolicConstant specifying the invariant to which ﬁltering is applied. Possible values are
NONE, FIRST, and SECOND. The default value is NONE.
invariant
753
Chebyshev2Filter object

Return value
A Chebyshev2Filter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the Chebyshev2Filter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Chebyshev2Filter  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The Chebyshev2Filter object has members with the same names and descriptions as the arguments to the
Chebyshev2Filter  method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
754
Chebyshev2Filter object

OperatorFilter object
The OperatorFilter object deﬁnes an operator ﬁlter.
The OperatorFilter object is derived from the Filter object.
Access
import filter
mdb.models[name].filters[name]
import odbFilter
session.odbs[name].filters[name]
OperatorFilter(...)
This method creates an OperatorFilter object.
Path
mdb.models[name].OperatorFilter
session.odbs[name].OperatorFilter
Required arguments
A String specifying the repository key. This name ANTIALIASING is reserved for ﬁlters
generated internally by the program.
name
A Float specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
An Int specifying the highest power of the ﬁlter transfer function. Possible values are non-negative
numbers less than or equal to 20. Order is not available for OperatorFilter. The default value is
2.
order
A SymbolicConstant specifying the ﬁlter operator. Possible values are NONE, MIN, MAX, and
ABS. The default value is NONE.
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is OFF.
halt
None or a Float specifying the threshold limit, an upper or lower bound for output values
depending on the operation, or a bound for stopping the analysis when Halt is used. The default
value is None.
limit
A SymbolicConstant specifying the invariant to which ﬁltering is applied. Possible values are
NONE, FIRST, and SECOND. The default value is NONE.
invariant
755
OperatorFilter object

Return value
An OperatorFilter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the OperatorFilter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the OperatorFilter  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The OperatorFilter object has members with the same names and descriptions as the arguments to the OperatorFilter
method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
756
OperatorFilter object

Input File Parser commands
The inpParser module provides functions that allow you to parse an Abaqus input ﬁle.
In this section:
•
InputFile object
•
Keyword object
•
AbaqusNDarray object
757

InputFile object
The InputFile object is used to store the deﬁnitions in an Abaqus input ﬁle. InputFile objects can be created using the
methods described in this section.
Access
import inpParser
InputFile(...)
This method creates an InputFile object by reading an Abaqus input ﬁle.
Path
inpParser.InputFile
Required arguments
A String specifying the path to the input ﬁle.
ﬁle
Optional arguments
A String specifying the path to the directory containing the input ﬁle.
directory
Return value
An InputFile object.
Exceptions
None.
parse(...)
This method parses the input ﬁle associated with the InputFile object.
Optional arguments
A Boolean specifying whether keywords should be organized into suboptions. The default is
False.
organize
A Boolean specifying whether verbose output is to be printed. If verbose is True, information
about fatal errors is printed. If no fatal errors occur, there is no output. The default is False.
verbose
A Boolean specifying whether the input ﬁle includes bulk data that should be parsed. The
default is True.
bulk
Abaqus Scripting Reference Guide
758
InputFile object

A Boolean specifying that parse method can return an AbaqusNDarray object for a keyword
data value. In cases where large amounts of numerical data (i.e., large node arrays) are expected,
it is recommended that you use the option usePyArray=True. The default is False.
usePyArray
Return value
A KeywordSequence object.
Exceptions
If you parse an input ﬁle more than once, a ValueError is raised for each subsequent parsing.
Members
The InputFile object has the following members:
A String specifying the source ﬁle name of the Abaqus input ﬁle.
ﬁle
A String specifying the directory where the input ﬁle is located.
directory
A sequence of Strings specifying any additional input ﬁles included in the speciﬁed
input ﬁle.
includes
A sequence of Strings for input ﬁles included in the speciﬁed input ﬁle that could not
be located.
missingIncludes
759
Abaqus Scripting Reference Guide
InputFile object

Keyword object
The Keyword object is used to store a keyword deﬁnition from an Abaqus input ﬁle.
Keyword objects are returned via the InputFile.parse() method.
Access
import inpParser
Members
The InputFile object has the following members:
A String specifying the name of the keyword.
name
A Dictionary of Strings specifying the keyword parameters.
parameter
A sequence of sequences or an AbaqusNDarray object specifying the keyword data. The type
of the leaf objects depends on the keyword. The AbaqusNDarray object is returned only if
data
the data is suitable and if the InputFile.parse() method was called with the option
usePyArray=True. In cases where large amounts of numerical data (i.e., large node arrays)
are expected, it is recommended that you use the option usePyArray=True.
A KeywordSequence specifying the suboptions of the keyword.
suboptions
A sequence of Strings specifying the comments.
comments
Abaqus Scripting Reference Guide
760
Keyword object

AbaqusNDarray object
The AbaqusNDarray object is a sequence object derived from numpy.ndarray and is used to store numeric keyword
data from an Abaqus input ﬁle. This object is similar to the numpy.ndarray object, but the numeric elements are
returned as standard Python objects, not numpy numeric types.
The numeric elements can be:
•
All ints.
•
All ﬂoats.
•
First column int, all other columns ﬂoats.
In the last of these cases, the member colZeroIsInt will be True; in the other two cases, it will be False.
761
AbaqusNDarray object

Interaction commands
A speciﬁc type of interaction object and a speciﬁc type of interaction state object are designed for each type of
interaction.
An interaction object stores the non-propagating data of an interaction as well as a number of instances of the
corresponding interaction state object, each of which stores the propagating data of the interaction in a single
step. Instances of the interaction state object are created and deleted internally by its corresponding interaction
object.
In this section:
•
Interaction object
•
AcousticImpedance object
•
AcousticImpedanceProp object
•
AcousticImpedanceState object
•
ActuatorSensor object
•
ActuatorSensorProp object
•
ActuatorSensorState object
•
CavityRadiation object
•
CavityRadiationProp object
•
CavityRadiationState object
•
CohesiveBehavior object
•
ConcentratedFilmCondition object
•
ConcentratedFilmConditionState object
•
ConcentratedRadiationToAmbient object
•
ConcentratedRadiationToAmbientState object
•
ContactControl object
•
ContactDamage object
•
ContactDamping object
•
ContactExp object
•
ContactInitialization object
•
ContactMassScalingExp object
•
ContactProperty object
•
ContactPropertyAssignment object
•
ContactStabilization object
•
ContactStd object
•
ContactTangentialBehavior object
•
CyclicSymmetry object
•
CyclicSymmetryState object
•
ElasticFoundation object
•
ElasticFoundationState object
•
ExpContactControl object
•
ExpInitialization object
•
FilmCondition object
•
FilmConditionProp object
Abaqus Scripting Reference Guide
762

•
FilmConditionState object
•
FluidCavity object
•
FluidCavityProperty object
•
FluidCavityState object
•
FluidExchangeActivation object
•
FluidExchangeActivationState object
•
FluidExchange object
•
FluidExchangeProperty object
•
FluidExchangeState object
•
FluidInflatorActivation object
•
FluidInflatorActivationState object
•
FluidInflator object
•
FluidInflatorProperty object
•
FluidInflatorState object
•
FractureCriterion object
•
GapElectricalConductance object
•
GapHeatGeneration object
•
GeometricProperties object
•
IncidentWave object
•
IncidentWaveProperty object
•
IncidentWaveState object
•
InitializationAssignment object
•
InteractionProperty object
•
InteractionState object
•
MainSecondaryAssignment object
•
Model object
•
ModelChange object
•
NormalBehavior object
•
PolarityAssignments object
•
PressurePenetration object
•
PressurePenetrationState object
•
Radiation object
•
RadiationToAmbient object
•
RadiationToAmbientState object
•
RegionPairs object
•
SelfContactExp object
•
SelfContactExpState object
•
SelfContactStd object
•
SelfContactStdState object
•
SlidingFormulationAssignment object
•
slidingTransitionAssignments object
•
SmoothingAssignment object
•
StabilizationAssignment object
•
StdContactControl object
•
StdInitialization object
•
StdStabilization object
763
Abaqus Scripting Reference Guide

•
StdXplCosimulation object
•
StdXplCosimulationState object
•
SurfaceBeamSmoothingAssignment object
•
SurfaceCrushTriggerAssignment object
•
SurfaceFeatureAssignment object
•
SurfaceFrictionAssignment object
•
SurfaceOffsetAssignment object
•
SurfaceThicknessAssignment object
•
SurfaceToSurfaceContactExp object
•
SurfaceToSurfaceContactStd object
•
SurfaceToSurfaceExpState object
•
SurfaceToSurfaceStdState object
•
SurfaceVertexCriteriaAssignment object
•
ThermalConductance object
•
WearProperty object
•
WearSurfacePropertyAssignment object
•
XFEMCrackGrowth object
•
XFEMCrackGrowthState object
Abaqus Scripting Reference Guide
764

Interaction object
The Interaction object is the abstract base type for other Interaction objects. The Interaction object has no explicit
constructor. Each of the Interaction objects has the following methods:
•
deactivate
•
move
•
reset
•
resume
•
suppress
•
delete
The methods are described below.
Access
import interaction
mdb.models[name].interactions[name]
deactivate(...)
This method deactivates the interaction in the speciﬁed step and all its subsequent steps.
Required arguments
A String specifying the name of the step in which the interaction is deactivated.
stepName
Optional arguments
None.
Return value
None.
Exceptions
None.
move(...)
This method moves an interaction from one step to another.
Required arguments
A String specifying the name of the step from which to move the interaction.
fromStepName
A String specifying the name of the step to which to move the interaction.
toStepName
765
Interaction object

Optional arguments
None.
Return value
None.
Exceptions
None.
reset(...)
This method reactivates an interaction that was deactivated previously. The reset method is available during the
step in which the interaction was deactivated originally.
Required arguments
A String specifying the name of the step in which the interaction is reactivated.
stepName
Optional arguments
None.
Return value
None.
Exceptions
None.
resume()
This method resumes an interaction that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses an interaction.
Arguments
None.
Abaqus Scripting Reference Guide
766
Interaction object

Return value
None.
Exceptions
None.
delete(...)
This method allows you to delete existing interactions.
Required arguments
A sequence of Ints specifying the index of each interaction to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The Interaction object has the following member:
A String specifying the repository key.
name
767
Abaqus Scripting Reference Guide
Interaction object

AcousticImpedance object
The AcousticImpedance object deﬁnes surface impedance information or nonreﬂecting boundaries for acoustic and
coupled acoustic-structural analyses.
The AcousticImpedance object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
AcousticImpedance(...)
This method creates an AcousticImpedance object.
Path
mdb.models[name].AcousticImpedance
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the AcousticImpedance object is
created.
createStepName
A Region object specifying the acoustic boundary surface.
surface
Optional arguments
A SymbolicConstant specifying the type of acoustic impedance to be deﬁned. Possible values
are TABULAR and NONREFLECTING. The default value is TABULAR.
deﬁnition
A String specifying the AcousticImpedanceProp object associated with this interaction.
interactionProperty
A SymbolicConstant specifying the type of nonreﬂecting geometry to be deﬁned. Possible
values are PLANE, IMPROVED, CIRCULAR, SPHERICAL, ELLIPTICAL, and PROLATE.
The default value is PLANE.
nonreﬂectingType
This argument is valid only when deﬁnition=NONREFLECTING.
A Float specifying the radius of the circle or sphere deﬁning the boundary surface. The default
value is 1.0.
radius
This argument is valid only when deﬁnition=NONREFLECTING, and
nonreﬂectingType=CIRCULAR or SPHERICAL.
A Float specifying the semimajor axis length of the ellipse or prolate spheroid deﬁning the
boundary surface. The default value is 1.0.
semimajorAxis
Abaqus Scripting Reference Guide
768
AcousticImpedance object

This argument is valid only when deﬁnition=NONREFLECTING, and
nonreﬂectingType=ELLIPTICAL or PROLATE.
A Float specifying the eccentricity of the ellipse or prolate spheroid deﬁning the boundary
surface. The default value is 0.0.
eccentricity
This argument is valid only when deﬁnition=NONREFLECTING, and
nonreﬂectingType=ELLIPTICAL or PROLATE.
A sequence of three Floats specifying the X, Y, and Z coordinates of the center of the ellipse
or prolate spheroid deﬁning the boundary surface. The default value is (0, 0, 0).
centerCoordinates
This argument is valid only when deﬁnition=NONREFLECTING, and
nonreﬂectingType=ELLIPTICAL or PROLATE.
A sequence of three Floats specifying the X, Y, and Z components of the direction cosine of
the major axis of the ellipse or prolate spheroid deﬁning the boundary surface. The default
value is (0, 0, 1).
directionCosine
This argument is valid only when deﬁnition=NONREFLECTING, and
nonreﬂectingType=ELLIPTICAL or PROLATE.
Return value
An AcousticImpedance object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing AcousticImpedance object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AcousticImpedance  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing AcousticImpedance object in the speciﬁed step.
769
Abaqus Scripting Reference Guide
AcousticImpedance object

Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A String specifying the AcousticImpedanceProp object associated with this
interaction.
interactionProperty
Return value
None.
Exceptions
None.
Members
The AcousticImpedance object has members with the same names and descriptions as the arguments to the
AcousticImpedance  method except the optional arguments to the setValuesInStep  method.
Corresponding analysis keywords
•
*SIMPEDANCE
Abaqus Scripting Reference Guide
770
AcousticImpedance object

AcousticImpedanceProp object
The AcousticImpedanceProp object is an interaction property that deﬁnes the properties referred to by an
AcousticImpedance object.
The AcousticImpedanceProp object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
AcousticImpedanceProp(...)
This method creates an AcousticImpedanceProp object.
Path
mdb.models[name].AcousticImpedanceProp
Required arguments
A String specifying the interaction property repository key.
name
A SymbolicConstant specifying the type of tabular data to be deﬁned. Possible values are
IMPEDANCE and ADMITTANCE.
tableType
A sequence of sequences of Floats specifying acoustic impedance properties.
table
If tableType=IMPEDANCE, each sequence of the table data speciﬁes:
•
The real part of the complex impedance.
•
The imaginary part of the complex impedance.
•
Frequency, if the data depend on frequency.
If tableType=ADMITTANCE, each sequence of the table data speciﬁes:
•
The real part of the complex admittance.
•
The imaginary part of the complex admittance.
•
Frequency, if the data depend on frequency.
Optional arguments
A Boolean specifying whether the table data depend on frequency. The default
value is OFF.
frequencyDependency
Return value
An AcousticImpedanceProp object.
771
AcousticImpedanceProp object

Exceptions
None.
setValues(...)
This method modiﬁes the AcousticImpedanceProp object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AcousticImpedanceProp  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The AcousticImpedanceProp object has members with the same names and descriptions as the arguments to the
AcousticImpedanceProp  method.
Corresponding analysis keywords
•
*IMPEDANCE PROPERTY
Abaqus Scripting Reference Guide
772
AcousticImpedanceProp object

AcousticImpedanceState object
The AcousticImpedanceState object stores the propagating data of an AcousticImpedance object in a step. One instance
of this object is created internally by the AcousticImpedance object for each step. The instance is also deleted internally
by the AcousticImpedance object.
The AcousticImpedanceState object has no constructor or methods.
The AcousticImpedanceState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The AcousticImpedanceState object has the following members:
A SymbolicConstant specifying the propagation state of the interactionProperty member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
interactionPropertyState
A String specifying the name of the AcousticImpedanceProp object associated with this
interaction.
interactionProperty
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*SIMPEDANCE
773
AcousticImpedanceState object

ActuatorSensor object
The ActuatorSensor object deﬁnes a single point actuator where the actuation is determined by a user subroutine (UEL).
The subroutine senses the data at the same point as the actuator.
The ActuatorSensor object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ActuatorSensor(...)
This method creates an ActuatorSensor object.
Path
mdb.models[name].ActuatorSensor
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the actuator/sensor interaction is
created. createStepName must be set to 'Initial'.
createStepName
A Region object specifying the point at which the constraint is applied.
point
A String specifying the ActuatorSensorProp object associated with this interaction.
interactionProperty
An Int specifying the number of coordinate components supplied to the user
subroutine (UEL).
noCoordComponents
A Boolean specifying whether the element matrices are symmetric (ON) or
unsymmetric (OFF). The default value is OFF.
unsymm
An Int specifying the number of solution-dependent variables. The default value is
0.
noSolutionDepVar
A String specifying the name of the user subroutine (UEL) that deﬁnes the user
element.
userSubUel
A String specifying the degrees of freedom, separated by commas.
dof
A sequence of Floats specifying the initial values of the solution-dependent variables.
solutionDepVars
Optional arguments
None.
Abaqus Scripting Reference Guide
774
ActuatorSensor object

Return value
An ActuatorSensor object.
Exceptions
None.
setValues(...)
This method modiﬁes the ActuatorSensor object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ActuatorSensor  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
Members
The ActuatorSensor object has members with the same names and descriptions as the arguments to the ActuatorSensor
method.
Corresponding analysis keywords
•
*ELEMENT
•
*USER ELEMENT
•
*INITIAL CONDITIONS, TYPE=SOLUTION
775
Abaqus Scripting Reference Guide
ActuatorSensor object

ActuatorSensorProp object
The ActuatorSensorProp object is an interaction property that deﬁnes the properties referred to by an ActuatorSensor
object.
The ActuatorSensorProp object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
ActuatorSensorProp(...)
This method creates an ActuatorSensorProp object.
Path
mdb.models[name].ActuatorSensorProp
Required arguments
A String specifying the interaction property repository key.
name
Optional arguments
A sequence of Floats specifying the PROPS array used by user subroutine UEL. The
default value is an empty sequence.
realProperties
A sequence of Ints specifying the JPROPS array used by user subroutine UEL. The
default value is an empty sequence.
integerProperties
Return value
An ActuatorSensorProp object.
Exceptions
None.
setValues(...)
This method modiﬁes the ActuatorSensorProp object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ActuatorSensorProp  method, except
for the name argument.
Abaqus Scripting Reference Guide
776
ActuatorSensorProp object

Return value
None.
Exceptions
None.
Members
The ActuatorSensorProp object has members with the same names and descriptions as the arguments to the
ActuatorSensorProp  method.
Corresponding analysis keywords
•
*UEL PROPERTY
777
Abaqus Scripting Reference Guide
ActuatorSensorProp object

ActuatorSensorState object
The ActuatorSensorState object stores the propagating data of an actuator sensor in a step. One instance of this object
is created internally by the ActuatorSensor object for each step. The instance is also deleted internally by the
ActuatorSensor object.
The ActuatorSensorState object has no constructor, methods, or members.
The ActuatorSensorState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The ActuatorSensorState object has the following member:
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Abaqus Scripting Reference Guide
778
ActuatorSensorState object

CavityRadiation object
The CavityRadiation object deﬁnes cavities for thermal radiation heat transfer and controls the calculation of viewfactors.
The CavityRadiation object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
CavityRadiation(...)
This method creates a CavityRadiation object.
Path
mdb.models[name].CavityRadiation
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the cavity radiation interaction
should be created.
createStepName
A RegionArray object specifying the surfaces for which radiation viewfactor control
is being speciﬁed.
surfaces
Optional arguments
A sequence of Strings specifying the names of the Cavity Radiation properties containing
the surface emissivity data. One name per speciﬁed surface. The emissivity data is ignored
when surfaceReﬂection=OFF.
surfaceEmissivities
None or a Float specifying the reference ambient temperature value, 
. Specifying a value
indicates an open cavity. The default value is None.
ambientTemp
A SymbolicConstant specifying the blocking checks to be performed in the viewfactor
calculations. Possible values are BLOCKING_ALL, NO_BLOCKING, and
PARTIAL_BLOCKING. The default value is BLOCKING_ALL.
blocking
A RegionArray object specifying the surfaces that provide blocking inside the cavity. This
argument applies only when blocking=PARTIAL_BLOCKING.
blockingSurfaces
None or a Float specifying the maximum distance between surface facets at which
viewfactors are calculated. More distant facets are deemed too far apart to exchange
rangeOfView
signiﬁcant amounts of heat through radiation effects, and the viewfactors between these
facets are assumed to be zero. If rangeOfView=None, there is no upper limit. The default
value is None.
779
CavityRadiation object

A Boolean specifying whether heat reﬂections are to be included in the cavity radiation
calculations. The default value is ON.
surfaceReﬂection
A Float specifying the acceptable tolerance for the viewfactor calculations. The default
value is 0.05.
viewfactorAccurTol
A Float specifying the facet area ratio above which the inﬁnitesimal-to-ﬁnite area
approximation is used for viewfactor calculations. The default value is 64.0.
minInﬁnitesimalRatio
An Int specifying the number of Gauss integration points to be used along each edge when
the numerical integration of contour integrals is used for viewfactor calculations. One to
ﬁve integration points are allowed. The default value is 3.
numPointsPerEdge
A Float specifying the nondimensional distance-square value above which the lumped area
approximation is used for viewfactor calculations. The default value is 5.0.
minLumpedAreaDS
A Boolean specifying whether cyclic symmetry will be applied. This argument cannot be
speciﬁed for axisymmetric models. The default value is OFF.
cyclicSymmetry
An Int specifying the number of cyclically similar images that compose the cavity formed
as a result of this symmetry. This argument applies only when cyclicSymmetry=ON. The
default value is 2.
cyclicImages
A ModelDot object specifying the rotation axis point. This argument applies only when
cyclicSymmetry=ON.
cyclicRotPt
A ModelDot object specifying the rotation axis end point. This argument applies only for
three-dimensional models, and only when cyclicSymmetry=ON.
cyclicRotEndPt
A ModelDot object specifying the symmetry axis end point. This argument applies only
when cyclicSymmetry=ON.
cyclicSymPt
An Int specifying the number of periodic symmetries that will be applied. The default value
is 0.
periodicSymmetries
An Int specifying the number of repetitions used in the numerical calculation of the cavity
viewfactors resulting from the ﬁrst periodic symmetry. The result of this symmetry is a
periodicImages_1
cavity composed of the cavity surface deﬁned in the model plus twice the value of
periodicImages_1. This argument applies only when periodicSymmetries is greater than
zero. The default value is 2.
An Int specifying the number of repetitions used in the numerical calculation of the cavity
viewfactors resulting from the second periodic symmetry. The result of this symmetry is
periodicImages_2
a cavity composed of the cavity surface deﬁned in the model plus twice the value of
periodicImages_2. This argument applies only when periodicSymmetries is greater than
one. The default value is 2.
An Int specifying the number of repetitions used in the numerical calculation of the cavity
viewfactors resulting from the third periodic symmetry. The result of this symmetry is a
periodicImages_3
Abaqus Scripting Reference Guide
780
CavityRadiation object

cavity composed of the cavity surface deﬁned in the model plus twice the value of
periodicImages_3. This argument applies only when periodicSymmetries = 3. The default
value is 2.
A straight Edge, a Datum object representing a datum axis, or an ElementEdge object
indicating the ﬁrst line of symmetry in two-dimensional models. This argument applies
only for 2D models, and when periodicSymmetries is greater than zero.
periodicSymAxis_1
A straight Edge, a Datum object representing a datum axis, or an ElementEdge object
indicating the second line of symmetry in two-dimensional models. This argument applies
only for two-dimensional models, and when periodicSymmetries = 2.
periodicSymAxis_2
A planar Face, an ElementFace, or a Datum object representing a datum plane; indicating
the ﬁrst plane of symmetry in three-dimensional models. This argument applies only for
three-dimensional models, and when periodicSymmetries is greater than zero.
periodicSymPlane_1
A planar Face, an ElementFace, or a Datum object representing a datum plane; indicating
the second plane of symmetry in three-dimensional models. This argument applies only
for three-dimensional models, and when periodicSymmetries is greater than one.
periodicSymPlane_2
A planar Face, an ElementFace, or a Datum object representing a datum plane; indicating
the third plane of symmetry in three-dimensional models. This argument applies only for
three-dimensional models, and when periodicSymmetries = 3.
periodicSymPlane_3
A sequence of sequences of Floats specifying the two points of the vector that describes
the periodic distance for the ﬁrst periodic symmetry. Each point is deﬁned by a tuple of
periodicDistance_1
three coordinates indicating its position. This argument applies only when
periodicSymmetries is greater than zero. The default value is an empty sequence.
A sequence of sequences of Floats specifying the two points of the vector that describes
the periodic distance for the second periodic symmetry. Each point is deﬁned by a tuple
periodicDistance_2
of three coordinates indicating its position. This argument applies only when
periodicSymmetries is greater than one. The default value is an empty sequence.
A sequence of sequences of Floats specifying the two points of the vector that describes
the periodic distance for the third periodic symmetry. Each point is deﬁned by a tuple of
periodicDistance_3
three coordinates indicating its position. This argument applies only when
periodicSymmetries = 3. The default value is an empty sequence.
None or a Float specifying the Z value indicating the symmetry reference line in
axisymmetric models. This argument applies only for axisymmetric models, and when
periodicSymmetries = 1. The default value is None.
periodicSymZ
None or a Float specifying the Z value indicating the periodic distance in axisymmetric
models. This argument applies only for axisymmetric models, and when periodicSymmetries
= 1. The default value is None.
periodicDistZ
An Int specifying the number of reﬂection symmetries will be applied. The default value
is 0.
reﬂectionSymmetries
781
Abaqus Scripting Reference Guide
CavityRadiation object

A straight Edge, a Datum object representing a datum axis, or an ElementEdge object
indicating the ﬁrst line of symmetry in two-dimensional models. This argument applies
only for two-dimensional models, and when reﬂectionSymmetries is greater than zero.
reﬂectionSymAxis_1
A straight Edge, a Datum object representing a datum axis, or an ElementEdge object
indicating the second line of symmetry in two-dimensional models. This argument applies
only for two-dimensional models, and when reﬂectionSymmetries = 2.
reﬂectionSymAxis_2
A planar Face, an ElementFace, or a Datum object representing a datum plane; indicating
the ﬁrst plane of symmetry in three-dimensional models. This argument applies only for
three-dimensional models, and when reﬂectionSymmetries is greater than zero.
reﬂectionSymPlane_1
A planar Face, an ElementFace, or a Datum object representing a datum plane; indicating
the second plane of symmetry in three-dimensional models. This argument applies only
for three-dimensional models, and when reﬂectionSymmetries is greater than one.
reﬂectionSymPlane_2
A planar Face, an ElementFace, or a Datum object representing a datum plane; indicating
the third plane of symmetry in three-dimensional models. This argument applies only for
three-dimensional models, and when reﬂectionSymmetries = 3.
reﬂectionSymPlane_3
None or a Float specifying the Z value indicating the symmetry reference line in
axisymmetric models. This argument applies only for axisymmetric models, and when
reﬂectionSymmetries = 1. The default value is None.
reﬂectionSymZ
Return value
A CavityRadiation object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing CavityRadiation object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CavityRadiation  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
782
CavityRadiation object

setValuesInStep(...)
This method modiﬁes the propagating data of an existing CavityRadiation object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A SymbolicConstant specifying the blocking checks to be performed in the viewfactor
calculations. Possible values are BLOCKING_ALL, NO_BLOCKING, and
PARTIAL_BLOCKING. The default value is BLOCKING_ALL.
blocking
A RegionArray object specifying the surfaces that provide blocking inside the cavity. This
argument applies only when blocking=PARTIAL_BLOCKING.
blockingSurfaces
None or a Float specifying the maximum distance between surface facets at which
viewfactors are calculated. More distant facets are deemed too far apart to exchange
rangeOfView
signiﬁcant amounts of heat through radiation effects, and the viewfactors between these
facets are assumed to be zero. If rangeOfView=None, there is no upper limit. The default
value is None.
A Boolean specifying whether heat reﬂections are to be included in the cavity radiation
calculations. The default value is ON.
surfaceReﬂection
A Float specifying the acceptable tolerance for the viewfactor calculations. The default
value is 0.05.
viewfactorAccurTol
Return value
None.
Exceptions
None.
Members
The CavityRadiation object can have the following members:
A String specifying the repository key.
name
None or a Float specifying the reference ambient temperature value, 
. Specifying a value
indicates an open cavity. The default value is None.
ambientTemp
A Float specifying the facet area ratio above which the inﬁnitesimal-to-ﬁnite area
approximation is used for viewfactor calculations. The default value is 64.0.
minInﬁnitesimalRatio
783
Abaqus Scripting Reference Guide
CavityRadiation object

An Int specifying the number of Gauss integration points to be used along each edge when
the numerical integration of contour integrals is used for viewfactor calculations. One to
ﬁve integration points are allowed. The default value is 3.
numPointsPerEdge
A Float specifying the nondimensional distance-square value above which the lumped area
approximation is used for viewfactor calculations. The default value is 5.0.
minLumpedAreaDS
A Boolean specifying whether cyclic symmetry will be applied. This argument cannot be
speciﬁed for axisymmetric models. The default value is OFF.
cyclicSymmetry
An Int specifying the number of cyclically similar images that compose the cavity formed
as a result of this symmetry. This argument applies only when cyclicSymmetry=ON. The
default value is 2.
cyclicImages
An Int specifying the number of periodic symmetries that will be applied. The default value
is 0.
periodicSymmetries
An Int specifying the number of repetitions used in the numerical calculation of the cavity
viewfactors resulting from the ﬁrst periodic symmetry. The result of this symmetry is a
periodicImages_1
cavity composed of the cavity surface deﬁned in the model plus twice the value of
periodicImages_1. This argument applies only when periodicSymmetries is greater than
zero. The default value is 2.
An Int specifying the number of repetitions used in the numerical calculation of the cavity
viewfactors resulting from the second periodic symmetry. The result of this symmetry is
periodicImages_2
a cavity composed of the cavity surface deﬁned in the model plus twice the value of
periodicImages_2. This argument applies only when periodicSymmetries is greater than
one. The default value is 2.
An Int specifying the number of repetitions used in the numerical calculation of the cavity
viewfactors resulting from the third periodic symmetry. The result of this symmetry is a
periodicImages_3
cavity composed of the cavity surface deﬁned in the model plus twice the value of
periodicImages_3. This argument applies only when periodicSymmetries = 3. The default
value is 2.
None or a Float specifying the Z value indicating the symmetry reference line in
axisymmetric models. This argument applies only for axisymmetric models, and when
periodicSymmetries = 1. The default value is None.
periodicSymZ
None or a Float specifying the Z value indicating the periodic distance in axisymmetric
models. This argument applies only for axisymmetric models, and when periodicSymmetries
= 1. The default value is None.
periodicDistZ
An Int specifying the number of reﬂection symmetries will be applied. The default value
is 0.
reﬂectionSymmetries
None or a Float specifying the Z value indicating the symmetry reference line in
axisymmetric models. This argument applies only for axisymmetric models, and when
reﬂectionSymmetries = 1. The default value is None.
reﬂectionSymZ
Abaqus Scripting Reference Guide
784
CavityRadiation object

A String specifying the name of the step in which the cavity radiation interaction should
be created.
createStepName
A RegionArray object specifying the surfaces for which radiation viewfactor control is
being speciﬁed.
surfaces
A tuple of Strings specifying the names of the Cavity Radiation properties containing the
surface emissivity data. One name per speciﬁed surface. The emissivity data is ignored
when surfaceReﬂection=OFF.
surfaceEmissivities
A ModelDot object specifying the rotation axis point. This argument applies only when
cyclicSymmetry=ON.
cyclicRotPt
A ModelDot object specifying the rotation axis end point. This argument applies only for
three-dimensional models, and only when cyclicSymmetry=ON.
cyclicRotEndPt
A ModelDot object specifying the symmetry axis end point. This argument applies only
when cyclicSymmetry=ON.
cyclicSymPt
A tuple of tuples of Floats specifying the two points of the vector that describes the periodic
distance for the ﬁrst periodic symmetry. Each point is deﬁned by a tuple of three coordinates
periodicDistance_1
indicating its position. This argument applies only when periodicSymmetries is greater
than zero. The default value is an empty sequence.
A tuple of tuples of Floats specifying the two points of the vector that describes the periodic
distance for the second periodic symmetry. Each point is deﬁned by a tuple of three
periodicDistance_2
coordinates indicating its position. This argument applies only when periodicSymmetries
is greater than one. The default value is an empty sequence.
A tuple of tuples of Floats specifying the two points of the vector that describes the periodic
distance for the third periodic symmetry. Each point is deﬁned by a tuple of three coordinates
periodicDistance_3
indicating its position. This argument applies only when periodicSymmetries = 3. The
default value is an empty sequence.
Corresponding analysis keywords
•
*CAVITY DEFINITION, SET PROPERTY
•
*CYCLIC
•
*EMISSIVITY
•
*PERIODIC
•
*RADIATION SYMMETRY
•
*RADIATION VIEWFACTOR
•
*REFLECTION
785
Abaqus Scripting Reference Guide
CavityRadiation object

CavityRadiationProp object
The CavityRadiationProp object is an interaction property that deﬁnes emissivity as a function of temperature and ﬁeld
variables.
The CavityRadiationProp object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
CavityRadiationProp(...)
This method creates a CavityRadiationProp object.
Path
mdb.models[name].CavityRadiationProp
Required arguments
A String specifying the interaction property repository key.
name
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A sequence of sequences of Floats specifying the following:
property
•
The emissivity, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CavityRadiationProp object.
Exceptions
None.
setValues(...)
This method modiﬁes the CavityRadiationProp object.
Abaqus Scripting Reference Guide
786
CavityRadiationProp object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CavityRadiationProp  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The CavityRadiationProp object has members with the same names and descriptions as the arguments to the
CavityRadiationProp  method.
Corresponding analysis keywords
•
*EMISSIVITY
787
Abaqus Scripting Reference Guide
CavityRadiationProp object

CavityRadiationState object
The CavityRadiationState object stores the propagating data for a CavityRadiation object. One instance of this object
is created internally by the CavityRadiation object for each step. The instance is also deleted internally by the
CavityRadiation object.
The CavityRadiationState object has no constructor or methods.
The CavityRadiationState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The CavityRadiationState object has the following members:
A SymbolicConstant specifying the blocking checks to be performed in the viewfactor
calculations. Possible values are BLOCKING_ALL, NO_BLOCKING, and
PARTIAL_BLOCKING.
blocking
A SymbolicConstant specifying the propagation state of the blocking member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
blockingState
A SymbolicConstant specifying the propagation state of the blockingSurfaces member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
blockingSurfacesState
A Float specifying the distance beyond which factors need not be calculated because
surfaces are judged to be too far apart to “see” each other (due to blocking by other
surfaces).
rangeOfView
A SymbolicConstant specifying the propagation state of the rangeOfView member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
rangeOfViewState
A Boolean specifying whether reﬂection must be included in the cavity radiation
calculations. The default value is ON.
surfaceReﬂection
A SymbolicConstant specifying the propagation state of the surfaceReﬂection member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
surfaceReﬂectionState
A Float specifying the acceptable tolerance for the viewfactor calculations.
viewfactorAccuracyTol
A SymbolicConstant specifying the propagation state of the viewfactorAccuracyTol
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
viewfactorAccuracyTolState
A tuple of Strings specifying the surfaces that provide blocking inside the cavity.
blockingSurfaces
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
Abaqus Scripting Reference Guide
788
CavityRadiationState object

•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*RADIATION VIEWFACTOR
789
Abaqus Scripting Reference Guide
CavityRadiationState object

CohesiveBehavior object
The CohesiveBehavior object speciﬁes cohesive behavior for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].cohesiveBehavior
CohesiveBehavior(...)
This method creates a CohesiveBehavior object.
Path
mdb.models[name].interactionProperties[name].CohesiveBehavior
Required arguments
None.
Optional arguments
A Boolean specifying whether to enforce cohesive behavior for recurrent contacts at nodes
on the secondary surface subsequent to ultimate failure. The default value is OFF.
repeatedContacts
A SymbolicConstant specifying the eligible secondary nodes. Possible values are
ALL_NODES, INITIAL_NODES, and SPECIFIED. The default value is ALL_NODES.
eligibility
A Boolean specifying whether to use the default contact penalties. The default value is
ON.
defaultPenalties
A SymbolicConstant specifying whether the traction-separation coefﬁcients are coupled
or uncoupled. This argument is valid only for defaultPenalties=OFF. Possible values are
UNCOUPLED and COUPLED. The default value is UNCOUPLED.
coupling
A Boolean specifying whether the coefﬁcient data depend on temperature. This argument
is valid only for defaultPenalties=OFF. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variables. This argument is valid only for
defaultPenalties=OFF. The default value is 0.
dependencies
A sequence of sequences of Floats specifying the traction-separation coefﬁcients. The
items in the table data are described below. This argument is valid only for
defaultPenalties=OFF.
table
Table data
If coupling=UNCOUPLED, the table data specify the following:
•
Stiffness coefﬁcient in the normal direction, 
.
Abaqus Scripting Reference Guide
790
CohesiveBehavior object

•
Stiffness coefﬁcient in the ﬁrst shear direction, 
.
•
Stiffness coefﬁcient in the second shear direction, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If coupling=COUPLED, the table data specify the following:
•
Stiffness coefﬁcient in the normal direction, 
.
•
Stiffness coefﬁcient in the ﬁrst shear direction, 
.
•
Stiffness coefﬁcient in the second shear direction, 
.
•
Coupled stiffness coefﬁcient, 
.
•
Coupled stiffness coefﬁcient, 
.
•
Coupled stiffness coefﬁcient, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CohesiveBehavior object.
Exceptions
None.
setValues(...)
This method modiﬁes the CohesiveBehavior object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CohesiveBehavior method.
Return value
None.
Exceptions
None.
791
Abaqus Scripting Reference Guide
CohesiveBehavior object

Members
The CohesiveBehavior object has members with the same names and descriptions as the arguments to the
CohesiveBehavior method.
Corresponding analysis keywords
•
*COHESIVE BEHAVIOR
Abaqus Scripting Reference Guide
792
CohesiveBehavior object

ConcentratedFilmCondition object
The ConcentratedFilmCondition object deﬁnes concentrated ﬁlm coefﬁcients and associated sink temperatures.
The ConcentratedFilmCondition object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ConcentratedFilmCondition(...)
This method creates a ConcentratedFilmCondition object.
Path
mdb.models[name].ConcentratedFilmCondition
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the ConcentratedFilmCondition object
is created.
createStepName
A Region object specifying the region to which the concentrated ﬁlm condition interaction
is applied. The interaction is applied to each node in the region.
region
A SymbolicConstant specifying how the concentrated ﬁlm condition is deﬁned. Possible
values are EMBEDDED_COEFF, PROPERTY_REF, USER_SUB, and FIELD.
deﬁnition
Optional arguments
A Float specifying the area associated with the node where the concentrated ﬁlm condition
is applied. The default value is 1.0.
nodalArea
A SymbolicConstant specifying how the concentrated ﬁlm condition is applied to the boundary
of an adaptive mesh domain. Possible values are LAGRANGIAN, SLIDING, and EULERIAN.
The default value is LAGRANGIAN.
explicitRegionType
This argument applies only during an Abaqus/Explicit analysis.
A String specifying the name of the FilmConditionProp object associated with this interaction.
The interactionProperty argument applies only when deﬁnition=PROPERTY_REF. The
default value is an empty string.
interactionProperty
A String specifying the name of the AnalyticalField object associated with this interaction.
The ﬁeld argument applies only when deﬁnition=FIELD. The default value is an empty string.
ﬁeld
793
ConcentratedFilmCondition object

A Float specifying the reference sink temperature, 
. The default value is 0.0.
sinkTemperature
A String specifying the name of the Amplitude object that gives the variation of the sink
temperature, 
, with time. The default value is an empty string.
sinkAmplitude
Note:
Use None in an Abaqus/Standard analysis to specify that the reference sink temperature
is applied immediately at the beginning of the step or linearly over the step. Use None
in an Abaqus/Explicit analysis to specify that the reference sink temperature is applied
throughout the step.
A Float specifying the reference ﬁlm coefﬁcient value, . The ﬁlmCoeff argument applies
when deﬁnition=EMBEDDED_COEFF, deﬁnition=USER_SUB, or deﬁnition=FIELD. The
default value is 0.0.
ﬁlmCoeff
A String specifying the name of the Amplitude object that gives the variation of the ﬁlm
coefﬁcient, , with time. The default value is an empty string.
ﬁlmCoeffAmplitude
Note:
Use None in an Abaqus/Standard analysis to specify that the reference ﬁlm coefﬁcient
is applied immediately at the beginning of the step or linearly over the step. Use None
in an Abaqus/Explicit analysis to specify that the reference ﬁlm coefﬁcient is applied
throughout the step.
A String specifying the name of the AnalyticalField or DiscreteField object associated with
the sink temperature. The sinkFieldName argument applies only when
sinkFieldName
sinkDistributionType=ANALYTICAL_FIELD or sinkDistributionType=DISCRETE_FIELD.
The default value is an empty string.
A SymbolicConstant specifying how the sink temperature is distributed. Possible values are
UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD. The default value is
UNIFORM.
sinkDistributionType
Return value
A ConcentratedFilmCondition object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConcentratedFilmCondition object in the step where it is created.
Required arguments
None.
Abaqus Scripting Reference Guide
794
ConcentratedFilmCondition object

Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcentratedFilmCondition  method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing ConcentratedFilmCondition object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
The optional arguments to setValuesInStep are the same as the optional arguments to the
ConcentratedFilmConditionState method.
Return value
None.
Exceptions
None.
Members
The ConcentratedFilmCondition object has members with the same names and descriptions as the arguments to the
ConcentratedFilmCondition  method except the optional arguments to the setValuesInStep method.
795
Abaqus Scripting Reference Guide
ConcentratedFilmCondition object

ConcentratedFilmConditionState object
The ConcentratedFilmConditionState object stores the propagating data for a ConcentratedFilmCondition object. One
instance of this object is created internally by the ConcentratedFilmCondition object for each step. The instance is also
deleted internally by the ConcentratedFilmCondition object.
The ConcentratedFilmConditionState object has no constructor or methods.
The ConcentratedFilmConditionState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The ConcentratedFilmConditionState object has the following members:
A SymbolicConstant specifying the propagation state of the interactionProperty
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
interactionPropertyState
A Float specifying the sink temperature.
sinkTemperature
A SymbolicConstant specifying the propagation state of the sinkTemperature member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
sinkTemperatureState
A SymbolicConstant specifying the propagation state of the sinkAmplitude member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
sinkAmplitudeState
A Float specifying the ﬁlm coefﬁcient.
ﬁlmCoeff
A SymbolicConstant specifying the propagation state of the ﬁlmCoeff member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
ﬁlmCoeffState
A SymbolicConstant specifying the propagation state of the ﬁlmCoeffAmplitude
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
ﬁlmCoeffAmplitudeState
A Float specifying the area associated with the node where the concentrated ﬁlm
condition is applied.
nodalArea
A SymbolicConstant specifying the propagation state of the nodalArea member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
nodalAreaState
A String specifying the FilmConditionProp object associated with this interaction.
interactionProperty
A String specifying the name of the Amplitude object that gives the variation of the
sink temperature.
sinkAmplitude
Abaqus Scripting Reference Guide
796
ConcentratedFilmConditionState object

A String specifying the name of the Amplitude object that gives the variation of the
ﬁlm coefﬁcient.
ﬁlmCoeffAmplitude
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CFILM
797
Abaqus Scripting Reference Guide
ConcentratedFilmConditionState object

ConcentratedRadiationToAmbient object
The ConcentratedRadiationToAmbient object deﬁnes radiant heat transfer between a point and its nonreﬂecting
environment.
The ConcentratedRadiationToAmbient object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ConcentratedRadiationToAmbient(...)
This method creates a ConcentratedRadiationToAmbient object.
Path
mdb.models[name].ConcentratedRadiationToAmbient
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the ConcentratedRadiationToAmbient
object is created.
createStepName
A Region object specifying the region to which the concentrated radiation interaction
is applied. The interaction is applied to each node in the region.
region
A Float specifying the reference ambient temperature, 
.
ambientTemperature
A String specifying the name of the Amplitude object that gives the variation of the
ambient temperature with time.
ambientTemperatureAmp
Note:
Use None in an Abaqus/Standard analysis to specify that the reference ambient
temperature is applied immediately at the beginning of the step or linearly over
the step. Use None in an Abaqus/Explicit analysis to specify that the reference
ambient temperature is applied throughout the step.
A Float specifying the emissivity, .
emissivity
Optional arguments
A Float specifying the area associated with the node where the concentrated radiation
interaction is applied. The default value is 1.0.
nodalArea
Abaqus Scripting Reference Guide
798
ConcentratedRadiationToAmbient object

A SymbolicConstant specifying how the concentrated radiation is applied to the boundary
of an adaptive mesh domain. Possible values are LAGRANGIAN, SLIDING, and EULERIAN.
The default value is LAGRANGIAN.
explicitRegionType
Note:
explicitRegionType applies only during an Abaqus/Explicit analysis.
A String specifying the name of the AnalyticalField object associated with this interaction.
The ﬁeld argument applies only when distributionType=ANALYTICAL_FIELD. The default
value is an empty string.
ﬁeld
A SymbolicConstant specifying how the radiation is deﬁned. Possible values are UNIFORM
and ANALYTICAL_FIELD. The default value is UNIFORM.
distributionType
Return value
A ConcentratedRadiationToAmbient object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConcentratedRadiationToAmbient object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcentratedRadiationToAmbient
method, except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing ConcentratedRadiationToAmbient object in the speciﬁed
step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
799
Abaqus Scripting Reference Guide
ConcentratedRadiationToAmbient object

Optional arguments
The optional arguments to setValuesInStep are the same as the arguments to the
ConcentratedRadiationToAmbient  method, except for the name, createStepName, region, and
explicitRegionType arguments.
Return value
None.
Exceptions
None.
Members
The ConcentratedRadiationToAmbient object has members with the same names and descriptions as the arguments
to the ConcentratedRadiationToAmbient  method.
Abaqus Scripting Reference Guide
800
ConcentratedRadiationToAmbient object

ConcentratedRadiationToAmbientState object
The ConcentratedRadiationToAmbientState object stores the propagating data for a ConcentratedRadiationToAmbient
object. One instance of this object is created internally by the ConcentratedRadiationToAmbient object for each step.
The instance is also deleted internally by the ConcentratedRadiationToAmbient object.
The ConcentratedRadiationToAmbientState object has no constructor or methods.
The ConcentratedRadiationToAmbientState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The ConcentratedRadiationToAmbientState object has the following members:
A Float specifying the ambient temperature.
ambientTemperature
A SymbolicConstant specifying the propagation state of the ambientTemperature
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
ambientTemperatureState
A SymbolicConstant specifying the propagation state of the ambientTemperatureAmp
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
ambientTemperatureAmpState
A Float specifying the emissivity.
emissivity
A SymbolicConstant specifying the propagation state of the emissivity member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
emissivityState
A Float specifying the area associated with the node where the concentrated radiation
is applied.
nodalArea
A SymbolicConstant specifying the propagation state of the nodalArea member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
nodalAreaState
A String specifying the name of the Amplitude object that gives the variation of the
ambient temperature with time.
ambientTemperatureAmp
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
801
ConcentratedRadiationToAmbientState object

•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CRADIATE
Abaqus Scripting Reference Guide
802
ConcentratedRadiationToAmbientState object

ContactControl object
The ContactControl object is the abstract base type for other ContactControl objects. The ContactControl object has
no explicit constructor, members, or methods.
Access
import interaction
mdb.models[name].contactControls[name]
Members
The ContactControl object has no members.
803
ContactControl object

ContactDamage object
The ContactDamage object speciﬁes damage options for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].damage
Damage(...)
This method creates a ContactDamage object.
Path
mdb.models[name].interactionProperties[name].Damage
Required arguments
A sequence of sequences of Floats specifying the values deﬁning the damage initiation. The
items in the table data are described below.
initTable
Optional arguments
A SymbolicConstant specifying the type of data used to deﬁne the initiation of damage.
Possible values are MAX_STRESS, MAX_SEPARATION, QUAD_TRACTION, and
QUAD_SEPARATION. The default value is MAX_STRESS.
criterion
A Boolean specifying whether the initiation data depend on temperature. The default value
is OFF.
initTempDep
An Int specifying the number of initiation data ﬁeld variables. The default value is 0.
initDependencies
A Boolean specifying whether evolution data will be deﬁned. The default value is OFF.
useEvolution
A SymbolicConstant specifying the type of data used to deﬁne the evolution of damage.
This argument is valid only when useEvolution=ON. Possible values are DISPLACEMENT
and ENERGY. The default value is DISPLACEMENT.
evolutionType
A SymbolicConstant specifying the type of data used to deﬁne the evolution softening
response. This argument is valid only when useEvolution=ON. The TABULAR value can
softening
be used only when evolutionType=DISPLACEMENT. Possible values are LINEAR,
EXPONENTIAL, and TABULAR. The default value is LINEAR.
A Boolean specifying whether evolution data be deﬁned using dependent behavior modes.
This argument is valid only when useEvolution=ON. The default value is OFF.
useMixedMode
A SymbolicConstant specifying the mode mix fracture criterion. This argument is valid only
when useEvolution=ON and when useMixedMode=ON. The POWER_LAW and BK values
mixedModeType
Abaqus Scripting Reference Guide
804
ContactDamage object

can be used only when evolutionType=ENERGY. Possible values are TABULAR,
POWER_LAW, and BK. The default value is TABULAR.
A SymbolicConstant specifying the mode mix ratio type. This argument is valid only when
useEvolution=ON and when useMixedMode=ON. The TRACTION value can be used only
modeMixRatio
when mixedModeType=TABULAR. Possible values are ENERGY and TRACTION. The
default value is ENERGY.
None or a Float specifying the exponent in the power-law or BK criterion that deﬁnes the
variation of fracture energy with mode mix. This argument is valid only when
exponent
useEvolution=ON and when mixedModeType=POWER_LAW or BK. The default value is
None.
A Boolean specifying whether the evolution data depend on temperature. This argument is
valid only when useEvolution=ON. The default value is OFF.
evolTempDep
An Int specifying the number of evolution data ﬁeld variables. This argument is valid only
when useEvolution=ON. The default value is 0.
evolDependencies
A sequence of sequences of Floats specifying the values deﬁning the damage evolution. The
items in the table data are described below. This argument is valid only when
useEvolution=ON.
evolTable
A Boolean specifying whether stabilization data will be deﬁned. This argument is valid only
when useEvolution=ON. The default value is OFF.
useStabilization
None or a Float specifying the viscosity coefﬁcient. This argument is valid only when
useStabilization=ON. The default value is None.
viscosityCoef
Table data
Table data for initTable:
If criterion=MAX_STRESS or QUAD_TRACTION, the table data specify the following:
•
Maximum nominal stress in the normal-only mode.
•
Maximum nominal stress in the ﬁrst shear direction (for a mode that involves separation only in this direction).
•
Maximum nominal stress in the second shear direction (for a mode that involves separation only in this direction).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If criterion=MAX_SEPARATION or QUAD_SEPARATION, the table data specify the following:
•
Separation at damage initiation in a normal-only mode.
•
Separation at damage initiation in a shear-only mode that involves separation only along the ﬁrst shear direction.
•
Separation at damage initiation in a shear-only mode that involves separation only along the second shear direction.
•
Temperature, if the data depend on temperature.
805
Abaqus Scripting Reference Guide
ContactDamage object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Table data for evolTable:
If evolutionType=DISPLACEMENT, softening=LINEAR, and useMixedMode=OFF, the table data specify the following:
•
Effective total or plastic displacement at failure, measured from the time of damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=ENERGY, softening=LINEAR or EXPONENTIAL, and useMixedMode=OFF, the table data specify
the following:
•
Fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=DISPLACEMENT, softening=LINEAR, useMixedMode=ON, mixedModeType=TABULAR, and
modeMixRatio=ENERGY or TRACTION, the table data specify the following:
•
Total displacement at failure, measured from the time of damage initiation.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=ENERGY, softening=LINEAR or EXPONENTIAL, useMixedMode=ON, mixedModeType=TABULAR,
and modeMixRatio=ENERGY or TRACTION, the table data specify the following:
•
Fracture energy.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=DISPLACEMENT, softening=EXPONENTIAL, and useMixedMode=OFF, the table data specify
the following:
•
Effective total or plastic displacement at failure, measured from the time of damage initiation.
Abaqus Scripting Reference Guide
806
ContactDamage object

•
Exponential law parameter.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=DISPLACEMENT, softening=EXPONENTIAL, useMixedMode=ON, mixedModeType=TABULAR,
and modeMixRatio=ENERGY or TRACTION, the table data specify the following:
•
Total displacement at failure, measured from the time of damage initiation.
•
Exponential law parameter.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=DISPLACEMENT, softening=TABULAR, and useMixedMode=OFF, the table data specify the
following:
•
Damage variable.
•
Effective total or plastic displacement at failure, measured from the time of damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=DISPLACEMENT, softening=TABULAR, useMixedMode=ON, mixedModeType=TABULAR, and
modeMixRatio=ENERGY or TRACTION, the table data specify the following:
•
Damage variable.
•
Effective total displacement, measured from the time of damage initiation.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=ENERGY, softening=LINEAR or EXPONENTIAL, useMixedMode=ON,
mixedModeType=POWER_LAW or BK, and modeMixRatio=ENERGY, the table data specify the following:
•
Normal mode fracture energy.
•
Shear mode fracture energy for failure in the ﬁrst shear direction.
•
Shear mode fracture energy for failure in the second shear direction.
807
Abaqus Scripting Reference Guide
ContactDamage object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ContactDamage object.
Exceptions
None.
setValues(...)
This method modiﬁes the ContactDamage object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ContactDamage  method.
Return value
None.
Exceptions
None.
Members
The ContactDamage object has the following members:
A SymbolicConstant specifying the type of data used to deﬁne the initiation of damage.
Possible values are MAX_STRESS, MAX_SEPARATION, QUAD_TRACTION, and
QUAD_SEPARATION. The default value is MAX_STRESS.
criterion
A Boolean specifying whether the initiation data depend on temperature. The default value
is OFF.
initTempDep
An Int specifying the number of initiation data ﬁeld variables. The default value is 0.
initDependencies
A Boolean specifying whether evolution data will be deﬁned. The default value is OFF.
useEvolution
A SymbolicConstant specifying the type of data used to deﬁne the evolution of damage.
This argument is valid only when useEvolution=ON. Possible values are DISPLACEMENT
and ENERGY. The default value is DISPLACEMENT.
evolutionType
Abaqus Scripting Reference Guide
808
ContactDamage object

A SymbolicConstant specifying the type of data used to deﬁne the evolution softening
response. This argument is valid only when useEvolution=ON. The TABULAR value can
softening
be used only when evolutionType=DISPLACEMENT. Possible values are LINEAR,
EXPONENTIAL, and TABULAR. The default value is LINEAR.
A Boolean specifying whether evolution data be deﬁned using dependent behavior modes.
This argument is valid only when useEvolution=ON. The default value is OFF.
useMixedMode
A SymbolicConstant specifying the mode mix fracture criterion. This argument is valid only
when useEvolution=ON and when useMixedMode=ON. The POWER_LAW and BK values
mixedModeType
can be used only when evolutionType=ENERGY. Possible values are TABULAR,
POWER_LAW, and BK. The default value is TABULAR.
A SymbolicConstant specifying the mode mix ratio type. This argument is valid only when
useEvolution=ON and when useMixedMode=ON. The TRACTION value can be used only
modeMixRatio
when mixedModeType=TABULAR. Possible values are ENERGY and TRACTION. The
default value is ENERGY.
None or a Float specifying the exponent in the power-law or BK criterion that deﬁnes the
variation of fracture energy with mode mix. This argument is valid only when
exponent
useEvolution=ON and when mixedModeType=POWER_LAW or BK. The default value is
None.
A Boolean specifying whether the evolution data depend on temperature. This argument is
valid only when useEvolution=ON. The default value is OFF.
evolTempDep
An Int specifying the number of evolution data ﬁeld variables. This argument is valid only
when useEvolution=ON. The default value is 0.
evolDependencies
A Boolean specifying whether stabilization data will be deﬁned. This argument is valid only
when useEvolution=ON. The default value is OFF.
useStabilization
None or a Float specifying the viscosity coefﬁcient. This argument is valid only when
useStabilization=ON. The default value is None.
viscosityCoef
A tuple of tuples of Floats specifying the values deﬁning the damage initiation. The items
in the table data are described below.
initTable
A tuple of tuples of Floats specifying the values deﬁning the damage evolution. The items
in the table data are described below. This argument is valid only when useEvolution=ON.
evolTable
Corresponding analysis keywords
•
*DAMAGE INITIATION
•
*DAMAGE EVOLUTION
•
*DAMAGE STABILIZATION
809
Abaqus Scripting Reference Guide
ContactDamage object

ContactDamping object
The ContactDamping object speciﬁes damping for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].damping
Damping(...)
This method creates a ContactDamping object.
Path
mdb.models[name].interactionProperties[name].Damping
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the method used to deﬁne the damping. Possible values are
DAMPING_COEFFICIENT and CRITICAL_DAMPING_FRACTION. The default value
is DAMPING_COEFFICIENT.
deﬁnition
The SymbolicConstant DEFAULT or a Float specifying the tangential damping coefﬁcient
divided by the normal damping coefﬁcient. The default value is DEFAULT.
tangentFraction
A SymbolicConstant specifying the variation of the damping coefﬁcient or fraction with
respect to clearance. Possible values are STEP, LINEAR, and BILINEAR. The default value
is STEP.
clearanceDependence
If deﬁnition=CRITICAL_DAMPING_FRACTION, the only possible value is STEP.
A sequence of pairs of Floats specifying the damping properties. The items in the table data
are described below.
table
Table data
If deﬁnition=DAMPING_COEFFICIENT and clearanceDependence=STEP, the table data specify the following:
•
Damping coefﬁcient.
If deﬁnition=DAMPING_COEFFICIENT and clearanceDependence=LINEAR or BILINEAR, the table data specify
the following:
•
Damping coefﬁcient.
•
Clearance.
Two pairs must be given for clearanceDependence=LINEAR and three pairs for clearanceDependence=BILINEAR.
The ﬁrst pair must have clearance=0.0, and the last pair must have coefﬁcient=0.0.
Abaqus Scripting Reference Guide
810
ContactDamping object

If deﬁnition=CRITICAL_DAMPING_FRACTION, the table data specify the following:
•
Critical damping fraction.
Return value
A ContactDamping object.
Exceptions
None.
setValues(...)
This method modiﬁes the ContactDamping object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ContactDamping  method.
Return value
None.
Exceptions
None.
Members
The ContactDamping object has the following members:
A SymbolicConstant specifying the method used to deﬁne the damping. Possible values are
DAMPING_COEFFICIENT and CRITICAL_DAMPING_FRACTION. The default value
is DAMPING_COEFFICIENT.
deﬁnition
The SymbolicConstant DEFAULT or a Float specifying the tangential damping coefﬁcient
divided by the normal damping coefﬁcient. The default value is DEFAULT.
tangentFraction
A SymbolicConstant specifying the variation of the damping coefﬁcient or fraction with
respect to clearance. Possible values are STEP, LINEAR, and BILINEAR. The default value
is STEP.
clearanceDependence
If deﬁnition=CRITICAL_DAMPING_FRACTION, the only possible value is STEP.
A tuple of pairs of Floats specifying the damping properties. The items in the table data are
described below.
table
811
Abaqus Scripting Reference Guide
ContactDamping object

Corresponding analysis keywords
•
*CONTACT DAMPING
Abaqus Scripting Reference Guide
812
ContactDamping object

ContactExp object
The ContactExp object deﬁnes the contact domain and associated properties during contact in an Abaqus/Explicit
analysis.
The ContactExp object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ContactExp(...)
This method creates a ContactExp object.
Path
mdb.models[name].ContactExp
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which this contact interaction is created.
createStepName
Optional arguments
A Boolean specifying whether the contacting surface pair consists of all exterior
faces, shell edges, beam segments, analytical rigid surfaces, and, when
applicable, Eulerian material surfaces.
useAllstar
A Boolean specifying whether surface smoothing (geometric correction) is
automatically applied to all eligible surfaces. The default value is ON.
globalSmoothing
A RegionPairs object specifying the domain pairs included in contact.
includedPairs
A RegionPairs object specifying the domain pairs excluded from contact.
excludedPairs
A ContactPropertyAssignment object specifying the contact property
assignments in the contact domain.
contactPropertyAssignments
A SurfaceThicknessAssignment object specifying the surface thickness
assignments in the contact domain.
surfaceThicknessAssignments
A SurfaceOffsetAssignment object specifying the surface offset fraction
assignments in the contact domain.
surfaceOffsetAssignments
A SurfaceFeatureAssignment object specifying the surface feature angle
assignments in the contact domain.
surfaceFeatureAssignments
813
ContactExp object

A SmoothingAssignment object specifying the surface smoothing assignments
in the contact domain.
smoothingAssignments
A SurfaceCrushTriggerAssignment object specifying the surface crush trigger
assignments in the contact domain.
surfaceCrushTriggerAssignments
A SurfaceFrictionAssignment object specifying the surface friction assignments
in the contact domain.
surfaceFrictionAssignments
A MainSecondaryAssignment object specifying the main-secondary assignments
in the contact domain.
mainSecondaryAssignments
A PolarityAssignments object specifying the polarity assignments in the contact
domain.
PolarityAssignments
Return value
A ContactExp object.
Exceptions
None.
ContactExp(...)
This method creates a ContactExp object.
Path
mdb.models[name].ContactExp
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which this contact interaction is created.
createStepName
Optional arguments
A Boolean specifying whether surface smoothing (geometric correction) is
automatically applied to all eligible surfaces. The default value is ON.
globalSmoothing
A sequence of tuples specifying the surface crush trigger assignments. Each tuple
contains four entries:
surfaceCrushTriggerAssignments
•
A region or a material object or the SymbolicConstant GLOBAL specifying
the surface to which the feature angle is assigned.
•
A SymbolicConstant specifying the trigger option to be used for the surface.
Possible values of the SymbolicConstant are TRIGGER, NO_TRIGGER, or
NO_CRUSH.
Abaqus Scripting Reference Guide
814
ContactExp object

•
A Float specifying the crush stress value to be used for the surface.
•
A Float specifying the crush initiation angle value to be used for the surface.
•
A Float specifying the crush continuation angle value to be used for the surface.
A sequence of tuples specifying the surface friction assignments. Each tuple
contains two entries:
surfaceFrictionAssignments
•
A region or a material object or the SymbolicConstant GLOBAL specifying
the surface to which the friction coefﬁcient is assigned.
•
A Float specifying the overriding friction coefﬁcient to be used in the contact
deﬁnition.
A Boolean specifying whether the contacting surface pair consists of all exterior
faces, shell edges, beam segments, analytical rigid surfaces, and, when applicable,
Eulerian material surfaces.
useAllstar
A sequence of pairs of Region objects or SymbolicConstants that speciﬁes the
surface pairs in contact. Possible values of the SymbolicConstants are ALLSTAR
and SELF. This argument is valid only when useAllstar=OFF.
includedPairs
A sequence of pairs of Region objects or SymbolicConstants that specify the
surface pairs excluded from contact. Possible values of the SymbolicConstants
are ALLSTAR and SELF.
excludedPairs
A sequence of tuples specifying the properties assigned to each surface pair. Each
tuple contains three entries:
contactPropertyAssignments
•
A Region object or the SymbolicConstant GLOBAL.
•
A Region object or the SymbolicConstant SELF.
•
A String specifying an InteractionProperty object associated with this pair of
regions.
A sequence of tuples specifying the surface thickness assignments in the contact
domain. Each tuple contains three entries:
surfaceThicknessAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface to
which the surface thickness is assigned.
•
A Float or a SymbolicConstant specifying the overriding thickness value to
be used in the contact deﬁnition. Possible values of the SymbolicConstant are
ORIGINAL or THINNING.
•
A Float specifying a scale factor that multiplies the thickness value speciﬁed
in the second entry.
A sequence of tuples specifying the surface offset fraction assignments in the
contact domain. Each tuple contains two entries:
surfaceOffsetAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface to
which the surface offset fraction is assigned.
815
Abaqus Scripting Reference Guide
ContactExp object

•
A Float or a SymbolicConstant specifying the offset fraction value to be used
in the contact deﬁnition. Possible values of the SymbolicConstant are
ORIGINAL, SPOS, or SNEG.
A sequence of tuples specifying the surface feature angle assignments in the contact
domain. Each tuple contains two entries:
surfaceFeatureAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface to
which the surface feature angle is assigned.
•
A Float or a SymbolicConstant specifying the overriding feature angle value
to be used in the contact deﬁnition. Possible values of the SymbolicConstant
are PERIMETER, ALL, PICKED, or NONE.
A sequence of tuples specifying the surface smoothing assignments in the contact
domain. Each tuple contains two entries:
smoothingAssignments
•
A region object specifying the surface to which the smoothing option is
assigned.
•
A SymbolicConstant specifying the smoothing option to be used in the contact
deﬁnition. Possible values of the SymbolicConstant are NONE,
REVOLUTION, SPHERICAL, or TOROIDAL.
A sequence of tuples specifying pure main-secondary assignments in the contact
domain. Each tuple contains three entries:
mainSecondaryAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the ﬁrst surface
that deﬁnes the main-secondary assignment.
•
A region object specifying the second surface in the main-secondary assignment
deﬁnition.
•
A SymbolicConstant specifying the status of the ﬁrst surface. Possible values
are MAIN and SECONDARY.
A sequence of tuples specifying polarity assignments in the contact domain. Each
tuple contains three entries:
polarityAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the ﬁrst surface
that deﬁnes the polarity assignment.
•
A region object specifying the second surface in the polarity assignment
deﬁnition.
•
A SymbolicConstant specifying the polarity of the second surface. Possible
values are SPOS, SNEG, and TWO_SIDED.
Return value
A ContactExp object.
Exceptions
None.
Abaqus Scripting Reference Guide
816
ContactExp object

Members
The ContactExp object can have the following members:
A String specifying the repository key.
name
A Boolean specifying whether surface smoothing (geometric correction) is
automatically applied to all eligible surfaces. The default value is ON.
globalSmoothing
A RegionPairs object specifying the domain pairs included in contact.
includedPairs
A RegionPairs object specifying the domain pairs excluded from contact.
excludedPairs
A ContactPropertyAssignment object specifying the contact property assignments
in the contact domain.
contactPropertyAssignments
A SurfaceThicknessAssignment object specifying the surface thickness
assignments in the contact domain.
surfaceThicknessAssignments
A SurfaceOffsetAssignment object specifying the surface offset fraction
assignments in the contact domain.
surfaceOffsetAssignments
A SurfaceFeatureAssignment object specifying the surface feature angle
assignments in the contact domain.
surfaceFeatureAssignments
A SmoothingAssignment object specifying the surface smoothing assignments
in the contact domain.
smoothingAssignments
A MainSecondaryAssignment object specifying the main-secondary assignments
in the contact domain.
mainSecondaryAssignments
A PolarityAssignment object specifying the polarity assignments in the contact
domain.
polarityAssignments
A Boolean specifying whether to assign the beam cross section. The default
value is False.
assignBeamCrossSection
A SymbolicConstant specifying whether the contact calculations should be
based on a circumferential approximation or the actual cross section of the beam
element. Possible values are CIRCUMSCRIBED_CIRCLE and EXACT.
beamCrossSection
Corresponding analysis keywords
•
*CONTACT
817
Abaqus Scripting Reference Guide
ContactExp object

ContactInitialization object
The ContactInitialization object is the abstract base type for other ContactInitialization objects. The ContactInitialization
object has no explicit constructor, members, or methods.
Access
import interaction
mdb.models[name].contactInitializations[name]
Members
The ContactInitialization object has no members.
Abaqus Scripting Reference Guide
818
ContactInitialization object

ContactMassScalingExp object
The ContactMassScalingExp object deﬁnes contact mass scaling during an Abaqus/Explicit analysis.
The ContactMassScalingExp object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ContactMassScalingExp(...)
This method creates a ContactMassScalingExp object.
Path
mdb.models[name].ContactMassScalingExp
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the ContactMassScalingExp object
is created.
createStepName
A SymbolicConstant specifying the location. Possible values are ELEMENT MASS
SCALING (default), NONE, ALL CONTACT SURFACES, and SPECIFIED
SURFACES.
location
A tuple of Region objects specifying the surfaces when LOCATION=SPECIFIED
SURFACES.
surfaces
Return value
A ContactMassScalingExp object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ContactMassScalingExp object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ContactMassScalingExp method, except
for the name and createStepName arguments.
819
ContactMassScalingExp object

Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing ContactMassScalingExp object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
The optional arguments to setValuesInStep are the same as the arguments to the ContactMassScalingExp method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
820
ContactMassScalingExp object

ContactProperty object
The ContactProperty object deﬁnes a contact interaction property.
The ContactProperty object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
ContactProperty(...)
This method creates a ContactProperty object.
Path
mdb.models[name].ContactProperty
Required arguments
A String specifying the interaction property repository key.
name
Optional arguments
None.
Return value
A ContactProperty object.
Exceptions
None.
Members
The ContactProperty object can have the following members:
A ContactTangentialBehavior object.
tangentialBehavior
A NormalBehavior object.
normalBehavior
A ContactDamping object.
damping
A ContactDamage object.
damage
A FractureCriterion object.
fractureCriterion
A CohesiveBehavior object.
cohesiveBehavior
821
ContactProperty object

A ThermalConductance object.
thermalConductance
A GapHeatGeneration object.
heatGeneration
A Radiation object.
radiation
A GeometricProperties object.
geometricProperties
A GapElectricalConductance object.
electricalConductance
Corresponding analysis keywords
•
*SURFACE INTERACTION
Abaqus Scripting Reference Guide
822
ContactProperty object

ContactPropertyAssignment object
The ContactPropertyAssignment object stores the contact property assignment deﬁnition for domain pairs in ContactExp
and ContactStd objects. The ContactPropertyAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].contactPropertyAssignments
changeValuesInStep(...)
This method allows modiﬁcation of contact property assignments to domain pairs already deﬁned in a given step.
Required arguments
A String specifying the name of the step in which the contact property assignments are to be
modiﬁed.
stepName
An Int specifying the position of the contact property assignment whose value is to be
modiﬁed.
index
A String specifying the value of the contact property to be assigned to the domain pair whose
index is referenced.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of contact property assignments to new domain pairs in a given step.
Required arguments
A String specifying the name of the step in which new contact property assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the properties assigned to each surface pair. Each tuple contains
three entries:
assignments
•
A region or a material object or the SymbolicConstant GLOBAL.
823
ContactPropertyAssignment object

•
A region or a material object or the SymbolicConstant SELF. When used with a ContactExp
object, this parameter can also be a string that references an Eulerian material surface.
•
A String specifying a ContactProperty object associated with this pair of regions.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing contact property assignments.
Required arguments
A sequence of Ints specifying the index of each contact property assignment to delete. The indices
and surfPair arguments are mutually exclusive.
indices
A sequence of tuples specifying the surface pair of each contact property assignment to delete. Each
tuple contains two entries:
surfPair
•
A region or a material object or the SymbolicConstant GLOBAL.
•
A region or a material object or the SymbolicConstant SELF. When used with a ContactExp
object, this parameter can also be a string that references an Eulerian material surface.
surfPair and indices arguments are mutually exclusive.
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The ContactPropertyAssignment object has no members.
Abaqus Scripting Reference Guide
824
ContactPropertyAssignment object

Corresponding analysis keywords
•
*CONTACT PROPERTY ASSIGNMENT
825
Abaqus Scripting Reference Guide
ContactPropertyAssignment object

ContactStabilization object
The ContactStabilization object is the abstract base type for other ContactStabilization objects. The ContactStabilization
object has no explicit constructor, members, or methods.
Access
import interaction
mdb.models[name].contactStabilizations[name]
Members
The ContactStabilization object has no members.
Abaqus Scripting Reference Guide
826
ContactStabilization object

ContactStd object
The ContactStd object deﬁnes the contact domain and associated properties during contact in an Abaqus/Standard
analysis.
The ContactStd object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ContactStd(...)
This method creates a ContactStd object.
Path
mdb.models[name].ContactStd
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which this contact interaction is created.
createStepName
Optional arguments
A Boolean specifying whether the contacting surface pairs consist of all
exterior faces in the model.
useAllstar
A Boolean specifying whether surface smoothing (geometric correction) is
automatically applied to all eligible surfaces. The default value is ON.
globalSmoothing
A RegionPairs object specifying the domain pairs included in contact.
includedPairs
A RegionPairs object specifying the domain pairs excluded from contact.
excludedPairs
A ContactPropertyAssignment object specifying the contact property
assignments in the contact domain.
contactPropertyAssignments
A SurfaceThicknessAssignment object specifying the surface thickness
assignments in the contact domain.
surfaceThicknessAssignments
A SurfaceOffsetAssignment object specifying the surface offset fraction
assignments in the contact domain.
surfaceOffsetAssignments
A SurfaceFeatureAssignment object specifying the surface feature angle
assignments in the contact domain.
surfaceFeatureAssignments
827
ContactStd object

A SurfaceBeamSmoothingAssignment object specifying the surface beam
smoothing assignments in the contact domain.
surfaceBeamSmoothingAssignments
A SurfaceVertexCriteriaAssignment object specifying the surface vertex
criteria assignments in the contact domain.
surfaceVertexCriteriaAssignments
A MainSecondaryAssignment object specifying the main-secondary
assignments in the contact domain.
mainSecondaryAssignments
An InitializationAssignment object specifying the contact initialization
assignments in the contact domain.
initializationAssignments
A StabilizationAssignment object specifying the contact stabilization
assignments in the contact domain.
stabilizationAssignments
A SmoothingAssignment object specifying the surface smoothing assignments
in the contact domain.
smoothingAssignments
A SlidingTransitionAssignment object specifying the sliding transition
assignments in the contact domain.
slidingTransitionAssignments
A SlidingFormulationAssignment object specifying the sliding formulation
assignments in the contact domain.
slidingFormulationAssignments
Return value
A ContactStd object.
Exceptions
None.
ContactStd(...)
This method creates a ContactStd object.
Path
mdb.models[name].ContactStd
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which this contact interaction is created.
createStepName
Abaqus Scripting Reference Guide
828
ContactStd object

Optional arguments
A Boolean specifying whether surface smoothing (geometric correction) is
automatically applied to all eligible surfaces. The default value is ON.
globalSmoothing
A sequence of tuples specifying the surface beam smoothing assignments. Each
tuple contains two entries:
surfaceBeamSmoothingAssignments
•
A region object specifying the surface to which the smoothing is assigned.
•
A Float specifying the surface smoothing value to be used for the surface.
A sequence of tuples specifying the surface vertex criteria assignments. Each
tuple contains two entries:
surfaceVertexCriteriaAssignments
•
A region or a material object or the SymbolicConstant GLOBAL specifying
the surface to which the vertex criteria is assigned.
•
A Float or a SymbolicConstant specifying the vertex criteria value to be
used for the surface. Possible values of the SymbolicConstant are
ALL_VERTICES or NO_VERTICES.
A sequence of tuples specifying the sliding formulation assignments. Each
tuple contains two entries:
slidingFormulationAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface
to which the sliding formulation attribute is assigned.
•
A SymbolicConstant specifying the overriding the smoothness value to be
used for the ﬁrst surface. Possible values of the SymbolicConstant are
NONE and SMALL_SLIDING.
A Boolean specifying whether the contacting surface pairs consist of all exterior
faces in the model.
useAllstar
A sequence of pairs of Region objects or SymbolicConstants that speciﬁes the
surface pairs in contact. Possible values of the SymbolicConstants are
ALLSTAR and SELF. This argument is valid only when useAllstar=OFF.
includedPairs
A sequence of pairs of Region objects or SymbolicConstants that speciﬁes the
surface pairs excluded from contact. Possible values of the SymbolicConstants
are ALLSTAR and SELF.
excludedPairs
A sequence of tuples specifying the properties assigned to each surface pair.
Each tuple contains three entries:
contactPropertyAssignments
•
A Region object or the SymbolicConstant GLOBAL.
•
A Region object or the SymbolicConstant SELF.
•
A String specifying an InteractionProperty object associated with this pair
of regions.
A sequence of tuples specifying the surface feature angle assignments in the
contact domain. Each tuple contains two entries:
surfaceFeatureAssignments
829
Abaqus Scripting Reference Guide
ContactStd object

•
A region object or the SymbolicConstant GLOBAL specifying the surface
to which the surface feature angle is assigned.
•
A Float or a SymbolicConstant specifying the overriding feature angle value
to be used in the contact deﬁnition. Possible values of the SymbolicConstant
are PERIMETER or NONE.
A sequence of tuples specifying the surface thickness assignments in the contact
domain. Each tuple contains three entries:
surfaceThicknessAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface
to which the surface thickness is assigned.
•
A Float or a SymbolicConstant specifying the overriding thickness value
to be used in the contact deﬁnition. The SymbolicConstant ORIGINAL
may be speciﬁed instead of a ﬂoating point value.
•
A Float specifying a scale factor that multiplies the thickness value speciﬁed
in the second entry.
A sequence of tuples specifying the surface offset fraction assignments in the
contact domain. Each tuple contains two entries:
surfaceOffsetAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface
to which the surface offset fraction is assigned.
•
A Float or a SymbolicConstant specifying the offset fraction value to be
used in the contact deﬁnition. Possible values of the SymbolicConstant are
ORIGINAL, SPOS, or SNEG.
A sequence of tuples specifying main-secondary assignments in the contact
domain. Each tuple contains three entries:
mainSecondaryAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the ﬁrst
surface that deﬁnes the main-secondary assignment.
•
A region object specifying the second surface in the main-secondary
assignment deﬁnition.
•
A SymbolicConstant specifying the status of the ﬁrst surface. Possible
values are MAIN, SECONDARY, and BALANCED.
A sequence of tuples specifying the contact initialization data assigned to each
surface pair. Each tuple contains three entries:
initializationAssignments
•
A Region object or the SymbolicConstant GLOBAL.
•
A Region object or the SymbolicConstant SELF.
•
A String specifying a StdInitialization object associated with this pair of
regions.
A sequence of tuples specifying the contact stabilization assigned to each surface
pair. Each tuple contains three entries:
stabilizationAssignments
•
A Region object or the SymbolicConstant GLOBAL.
Abaqus Scripting Reference Guide
830
ContactStd object

•
A Region object or the SymbolicConstant SELF.
•
A String specifying a StdStabilization object associated with this pair of
regions.
A sequence of tuples specifying the surface smoothing assignments in the
contact domain. Each tuple contains two entries:
smoothingAssignments
•
A region object specifying the surface to which the smoothing option is
assigned.
•
A SymbolicConstant specifying the smoothing option to be used in the
contact deﬁnition. Possible values of the SymbolicConstant are NONE,
REVOLUTION, SPHERICAL, or TOROIDAL.
A sequence of tuples specifying sliding transition assignments in the contact
domain. Each tuple contains three entries:
slidingTransitionAssignments
•
A region object or the SymbolicConstant GLOBAL specifying the ﬁrst
surface that deﬁnes the sliding transition assignment.
•
A region object specifying the second surface in the sliding transition
assignment deﬁnition.
•
A SymbolicConstant specifying the smoothness value. Possible values are
ELEMENT_ORDER_SMOOTHING, LINEAR_SMOOTHING, and
QUADRATIC_SMOOTHING.
Return value
A ContactStd object.
Exceptions
None.
Members
The ContactStd object can have the following members:
A String specifying the repository key.
name
A Boolean specifying whether surface smoothing (geometric correction) is
automatically applied to all eligible surfaces. The default value is ON.
globalSmoothing
A RegionPairs object specifying the domain pairs included in contact.
includedPairs
A RegionPairs object specifying the domain pairs excluded from contact.
excludedPairs
A ContactPropertyAssignment object specifying the contact property
assignments in the contact domain.
contactPropertyAssignments
831
Abaqus Scripting Reference Guide
ContactStd object

A SurfaceThicknessAssignment object specifying the surface thickness
assignments in the contact domain.
surfaceThicknessAssignments
A SurfaceOffsetAssignment object specifying the surface offset fraction
assignments in the contact domain.
surfaceOffsetAssignments
A MainSecondaryAssignment object specifying the main-secondary assignments
in the contact domain.
mainSecondaryAssignments
An InitializationAssignment object specifying the contact initialization
assignments in the contact domain.
initializationAssignments
A StabilizationAssignment object specifying the contact stabilization
assignments in the contact domain.
stabilizationAssignments
A SmoothingAssignment object specifying the surface smoothing assignments
in the contact domain.
smoothingAssignments
A SurfaceFeatureAssignment object specifying the surface feature angle
assignments in the contact domain.
surfaceFeatureAssignments
A SlidingTransitionAssignment object specifying the sliding transition
assignments in the contact domain.
slidingTransitionAssignments
A Boolean specifying whether to assign the beam cross section. The default
value is False.
assignBeamCrossSection
A SymbolicConstant specifying whether the contact calculations should be
based on a circumferential approximation or the actual cross section of the
beam element. Possible values are CIRCUMSCRIBED_CIRCLE and EXACT.
beamCrossSection
A Boolean specifying whether to assign the edge-to-edge formulation. The
default value is False.
assignEdgeToEdgeformulation
A symbolic constant specifying edge-to-edge formulation. The default value
is NO.
edgeToEdgeFormulation
Corresponding analysis keywords
•
*CONTACT
Abaqus Scripting Reference Guide
832
ContactStd object

ContactTangentialBehavior object
The ContactTangentialBehavior object speciﬁes tangential behavior for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].tangentialBehavior
TangentialBehavior(...)
This method creates a ContactTangentialBehavior object.
Path
mdb.models[name].interactionProperties[name].TangentialBehavior
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the friction formulation. Possible values are
FRICTIONLESS, PENALTY, EXPONENTIAL_DECAY, ROUGH, LAGRANGE,
and USER_DEFINED. The default value is FRICTIONLESS.
formulation
A SymbolicConstant specifying the directionality of the friction. Possible values
are ISOTROPIC and ANISOTROPIC. The default value is ISOTROPIC.
directionality
A Boolean specifying whether the data depend on slip rate. The default value is
OFF.
slipRateDependency
A Boolean specifying whether the data depend on contact pressure. The default
value is OFF.
pressureDependency
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variables. The default value is 0.
dependencies
A SymbolicConstant specifying the exponential decay deﬁnition. Possible values
are COEFFICIENTS and TEST_DATA. The default value is COEFFICIENTS.
exponentialDecayDeﬁnition
A sequence of sequences of Floats specifying tangential behavior. The items in the
table data are described below.
table
None or a Float specifying the shear stress limit. If shearStressLimit=None, there
is no upper limit. The default value is None.
shearStressLimit
833
ContactTangentialBehavior object

A SymbolicConstant specifying what the maximum elastic slip will be. Possible
values are FRACTION and ABSOLUTE_DISTANCE. The default value is
FRACTION.
maximumElasticSlip
A Float specifying the fraction of a characteristic surface dimension. The default
value is 0.0.
fraction
A Float specifying the absolute distance. The default value is 0.0.
absoluteDistance
None or a Float specifying the elastic slip stiffness. If elasticSlipStiffness=None,
there is no upper limit. The default value is None.
elasticSlipStiffness
An Int specifying the number of state-dependent variables. The default value is 0.
nStateDependentVars
A Boolean specifying whether property values will be used. The default value is
OFF.
useProperties
Table data
If formulation=PENALTY or LAGRANGE, the table data specify the following:
•
Friction coefﬁcient in the ﬁrst slip direction, 
.
•
Friction coefﬁcient in the second slip direction, 
 (if directionality=ANISOTROPIC).
•
Slip rate, if the data depend on slip rate.
•
Contact pressure, if the data depend on contact pressure.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If formulation=EXPONENTIAL_DECAY and exponentialDecayDeﬁnition=COEFFICIENTS, the table data specify
the following:
•
Static friction coefﬁcient.
•
Kinetic friction coefﬁcient.
•
Decay coefﬁcient.
If formulation=EXPONENTIAL_DECAY and exponentialDecayDeﬁnition=TEST_DATA, the table data specify the
following:
•
Friction coefﬁcient.
•
Slip rate.
If formulation=USER_DEFINED, the table data specify the following:
•
Friction property.
Abaqus Scripting Reference Guide
834
ContactTangentialBehavior object

Return value
A ContactTangentialBehavior object.
Exceptions
None.
setValues(...)
This method modiﬁes the ContactTangentialBehavior object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ContactTangentialBehavior  method.
Return value
None.
Exceptions
None.
Members
The ContactTangentialBehavior object has the following members:
A SymbolicConstant specifying the friction formulation. Possible values are
FRICTIONLESS, PENALTY, EXPONENTIAL_DECAY, ROUGH, LAGRANGE,
and USER_DEFINED. The default value is FRICTIONLESS.
formulation
A SymbolicConstant specifying the directionality of the friction. Possible values
are ISOTROPIC and ANISOTROPIC. The default value is ISOTROPIC.
directionality
A Boolean specifying whether the data depend on slip rate. The default value is
OFF.
slipRateDependency
A Boolean specifying whether the data depend on contact pressure. The default
value is OFF.
pressureDependency
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variables. The default value is 0.
dependencies
A SymbolicConstant specifying the exponential decay deﬁnition. Possible values
are COEFFICIENTS and TEST_DATA. The default value is COEFFICIENTS.
exponentialDecayDeﬁnition
835
Abaqus Scripting Reference Guide
ContactTangentialBehavior object

None or a Float specifying the shear stress limit. If shearStressLimit=None, there
is no upper limit. The default value is None.
shearStressLimit
A SymbolicConstant specifying what the maximum elastic slip will be. Possible
values are FRACTION and ABSOLUTE_DISTANCE. The default value is
FRACTION.
maximumElasticSlip
A Float specifying the fraction of a characteristic surface dimension. The default
value is 0.0.
fraction
A Float specifying the absolute distance. The default value is 0.0.
absoluteDistance
None or a Float specifying the elastic slip stiffness. If elasticSlipStiffness=None,
there is no upper limit. The default value is None.
elasticSlipStiffness
An Int specifying the number of state-dependent variables. The default value is 0.
nStateDependentVars
A Boolean specifying whether property values will be used. The default value is
OFF.
useProperties
A tuple of tuples of Floats specifying tangential behavior. The items in the table
data are described below.
table
Corresponding analysis keywords
•
*FRICTION
•
*CHANGE FRICTION
Abaqus Scripting Reference Guide
836
ContactTangentialBehavior object

CyclicSymmetry object
The CyclicSymmetry object deﬁnes a cyclic symmetry analysis.
The CyclicSymmetry object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
CyclicSymmetry(...)
This method creates a CyclicSymmetry object.
Path
mdb.models[name].CyclicSymmetry
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the cyclic symmetry interaction should
be created.
createStepName
A Region object specifying the main surface.
main
A Region object specifying the secondary surface.
secondary
An Int specifying the total number of sectors in the cyclic symmetric model.
repetitiveSectors
A Region object specifying the ﬁrst point of the axis of symmetry. The region should
contain exactly one mesh node, vertex, interesting point, reference point, or datum point.
axisPoint1
In a two-dimensional model axisPoint1 is the only point used to deﬁne the axis of
symmetry.
A Region object specifying the second point of the axis of symmetry. The region should
contain exactly one mesh node, vertex, interesting point, reference point, or datum point.
This point is ignored in a two-dimensional model.
axisPoint2
Optional arguments
A SymbolicConstant specifying whether Abaqus should extract all possible nodal diameters
or the nodal diameters between the user-speciﬁed values for lowestNodalDiameter and
extractedNodalDiameter
highestNodalDiameter. Possible values are ALL_NODAL_DIAMETER and
SPECIFIED_NODAL_DIAMETER. The default value is ALL_NODAL_DIAMETER.
An Int specifying the lowest nodal diameter to be used in the eigenfrequency analysis.
The default value is 0.
lowestNodalDiameter
837
CyclicSymmetry object

An Int specifying the highest nodal diameter to be used in the eigenfrequency analysis.
This argument value should be less than or equal to the half of the total number of sectors
(as speciﬁed in the repetitiveSectors parameter). The default value is 0.
highestNodalDiameter
An Int specifying the nodal diameter for which the modal-based steady-state dynamic
analysis will be performed. This value should be greater than or equal to the lowest nodal
excitationNodalDiameter
diameter (speciﬁed in the lowestNodalDiameter parameter), and less than or equal to the
highest nodal diameter (speciﬁed in the highestNodalDiameter parameter). The default
value is 0.
A Boolean specifying whether or not to adjust the secondary surface of the cyclic symmetry
to tie it to the main surface. The default value is ON.
adjustTie
A Float specifying the position tolerance. ThepositionTolerance argument applies only
when positionToleranceMethod=SPECIFY_TOLERANCE. The default value is 0.0.
positionTolerance
A SymbolicConstant specifying the method used to determine the position tolerance.
Possible values are COMPUTED_TOLERANCE and SPECIFY_TOLERANCE. The
default value is COMPUTED_TOLERANCE.
positionToleranceMethod
Return value
A CyclicSymmetry object.
Exceptions
None.
swapSurfaces()
This method switches the main and secondary surfaces of a cyclic symmetry interaction. This command is valid only
during the step in which the interaction is created.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing CyclicSymmetry object in the step where it is created.
Required arguments
None.
Abaqus Scripting Reference Guide
838
CyclicSymmetry object

Optional arguments
The optional arguments to setValues are the same as the arguments to the CyclicSymmetry method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing CyclicSymmetry object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A SymbolicConstant specifying whether Abaqus should extract all possible nodal diameters
or the nodal diameters between the user-speciﬁed values for lowestNodalDiameter and
extractedNodalDiameter
highestNodalDiameter. Possible values are ALL_NODAL_DIAMETER and
SPECIFIED_NODAL_DIAMETER. The default value is ALL_NODAL_DIAMETER.
An Int specifying the lowest nodal diameter to be used in the eigenfrequency analysis.
The default value is 0.
lowestNodalDiameter
An Int specifying the highest nodal diameter to be used in the eigenfrequency analysis.
This argument value should be less than or equal to the half of the total number of sectors
(as speciﬁed in the repetitiveSectors parameter). The default value is 0.
highestNodalDiameter
An Int specifying the nodal diameter for which the modal-based steady-state dynamic
analysis will be performed. This value should be greater than or equal to the lowest nodal
excitationNodalDiameter
diameter (speciﬁed in the lowestNodalDiameter parameter), and less than or equal to the
highest nodal diameter (speciﬁed in the highestNodalDiameter parameter). The default
value is 0.
Return value
None.
Exceptions
None.
Members
The CyclicSymmetry object has members with the same names and descriptions as the arguments to the CyclicSymmetry
method except the optional arguments to the setValuesInStep method.
839
Abaqus Scripting Reference Guide
CyclicSymmetry object

Corresponding analysis keywords
•
*CLOAD, CYCLIC MODE
•
*CYCLIC SYMMETRY MODEL
•
*DLOAD, CYCLIC MODE
•
*DSLOAD, CYCLIC MODE
•
*SELECT CYCLIC SYMMETRY MODES
•
*TIE, CYCLIC SYMMETRY
Abaqus Scripting Reference Guide
840
CyclicSymmetry object

CyclicSymmetryState object
The CyclicSymmetryState object stores the propagating data for a CyclicSymmetry object. One instance of this object
is created internally by the CyclicSymmetry object for each step. The instance is also deleted internally by the
CyclicSymmetry object.
The CyclicSymmetryState object has no constructor or methods.
The CyclicSymmetryState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The CyclicSymmetryState object has the following members:
A SymbolicConstant specifying whether Abaqus should extract all possible nodal
diameters or the nodal diameters between the user-speciﬁed values for
extractedNodalDiameter
lowestNodalDiameter and highestNodalDiameter. Possible values are
ALL_NODAL_DIAMETER and SPECIFIED_NODAL_DIAMETER. The default
value is ALL_NODAL_DIAMETER.
A SymbolicConstant specifying the propagation state of the extractedNodalDiameter
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
extractedNodalDiameterState
An Int specifying the lowest nodal diameter to be used in the eigenfrequency analysis.
The default value is 0.
lowestNodalDiameter
A SymbolicConstant specifying the propagation state of the lowestNodalDiameter
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
lowestNodalDiameterState
An Int specifying the highest nodal diameter to be used in the eigenfrequency analysis.
This argument value should be less than or equal to the half of the total number of
sectors. The default value is 0.
highestNodalDiameter
A SymbolicConstant specifying the propagation state of the highestNodalDiameter
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
highestNodalDiameterState
An Int specifying the nodal diameter for which the modal-based steady-state dynamic
analysis will be performed. This value should be greater than or equal to the lowest
excitiationNodalDiameter
nodal diameter (speciﬁed in the lowestNodalDiameter parameter), and less than or
equal to the highest nodal diameter (speciﬁed in the highestNodalDiameter parameter).
The default value is 0.
A SymbolicConstant specifying the propagation state of the excitiationNodalDiameter
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
excitiationNodalDiameterState
841
CyclicSymmetryState object

A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CLOAD, CYCLIC MODE
•
*DLOAD, CYCLIC MODE
•
*DSLOAD, CYCLIC MODE
•
*SELECT CYCLIC SYMMETRY MODES
Abaqus Scripting Reference Guide
842
CyclicSymmetryState object

ElasticFoundation object
The ElasticFoundation object deﬁnes a mechanical foundation.
The ElasticFoundation object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ElasticFoundation(...)
This method creates an ElasticFoundation object.
Path
mdb.models[name].ElasticFoundation
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the ElasticFoundation object is
created. createStepName must be set to 'Initial'.
createStepName
A Region object specifying the surface to which the foundation applies.
surface
A Float specifying the foundation stiffness per area (or per length for beams).
stiffness
Optional arguments
None.
Return value
An ElasticFoundation object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ElasticFoundation object in the step where it is created.
Required arguments
None.
843
ElasticFoundation object

Optional arguments
The optional arguments to setValues are the same as the arguments to the ElasticFoundation  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing ElasticFoundation object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A Float specifying the foundation stiffness per area (or per length for beams).
stiffness
Return value
None.
Exceptions
None.
Members
The ElasticFoundation object has members with the same names and descriptions as the arguments to the
ElasticFoundation  method except the optional arguments to the setValuesInStep  method.
Corresponding analysis keywords
•
*FOUNDATION
Abaqus Scripting Reference Guide
844
ElasticFoundation object

ElasticFoundationState object
The ElasticFoundationState object stores the propagating data for an ElasticFoundation object. One instance of this
object is created internally by the ElasticFoundation object for each step. The instance is also deleted internally by the
ElasticFoundation object.
The ElasticFoundationState object has no constructor or methods.
The ElasticFoundationState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The ElasticFoundationState object has the following members:
A Float specifying the foundation stiffness per area.
stiffness
A SymbolicConstant specifying the propagation state of the stiffness member. Possible values
are UNSET, SET, UNCHANGED, and FREED.
stiffnessState
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
845
ElasticFoundationState object

ExpContactControl object
The ExpContactControl object is used in Abaqus/Explicit analyses to specify optional solution controls for problems
involving contact between bodies.
The ExpContactControl object is derived from the ContactControl object.
Access
import interaction
mdb.models[name].contactControls[name]
ExpContactControl(...)
This method creates an ExpContactControl object.
Path
mdb.models[name].ExpContactControl
Required arguments
A String specifying the contact controls repository key.
name
Optional arguments
A SymbolicConstant specifying whether or not the default value will be used for the
maximum number of increments between global contact searches. Possible values are
DEFAULT and SPECIFY. The default value is DEFAULT.
globTrkChoice
An Int specifying the maximum number of increments between global contact searches.
The globTrkInc argument applies only when globTrkChoice=SPECIFY. The default value
is 100 for surface-to-surface contact and 4 for self-contact.
globTrkInc
A Boolean specifying whether to use the more computationally efﬁcient local tracking
method. The default value is ON.
fastLocalTrk
A Float specifying the factor by which Abaqus/Explicit will scale the default penalty
stiffness to obtain the stiffnesses used for the penalty contact pairs. The default value is
1.0.
scalePenalty
An Int specifying the number of increments between checks for highly warped facets on
main surfaces. The default value is 20.
warpCheckPeriod
A Float specifying the out-of-plane warping angle (in degrees), at which a facet will be
considered to be highly warped. The default value is 20.0.
warpCutoff
Return value
An ExpContactControl object.
Abaqus Scripting Reference Guide
846
ExpContactControl object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the ExpContactControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ExpContactControl method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The ExpContactControl object has members with the same names and descriptions as the arguments to the
ExpContactControl method.
Corresponding analysis keywords
•
*CONTACT CONTROLS
847
Abaqus Scripting Reference Guide
ExpContactControl object

ExpInitialization object
The ExpInitialization object is used in conjunction with ContactExp in Abaqus/Explicit analyses to specify contact
initialization data.
The ExpInitialization object is derived from the ContactInitialization object.
Access
import interaction
mdb.models[name].contactInitializations[name]
ExpInitialization(...)
This method creates an ExpInitialization object.
Path
mdb.models[name].ExpInitialization
Required arguments
A String specifying the contact initialization repository key.
name
Optional arguments
A SymbolicConstant specifying the type of overclosure to be deﬁned. Possible values are
ADJUST, INTERFERENCE, and CLEARANCE. The default value is ADJUST.
overclosureType
None or a Float specifying the interference distance. This argument is valid only when
overclosureType=INTERFERENCE. The default value is None.
interferenceDistance
None or a Float specifying the initial clearance distance. This argument is valid only
when overclosureType=CLEARANCE and must be speciﬁed in that case. The default
value is None.
clearanceDistance
None or a Float specifying the distance tolerance within which initial openings will
undergo strain-free adjustments. This argument is not valid when
openingTolerance
overclosureType=INTERFERENCE unless a value has been speciﬁed for
interferenceDistance. The default value is None.
None or a Float specifying the distance tolerance within which initial overclosures will
undergo strain-free adjustments. The default value is None.
overclosureTolerance
A Boolean specifying whether to resolve clearances/overclosures by adjusting the nodal
coordinates without creating strain in the model. adjustNodalCoords=True can be used
adjustNodalCoords
only for clearances/overclosures deﬁned in the ﬁrst step of an analysis. The default value
is True.
Abaqus Scripting Reference Guide
848
ExpInitialization object

A String specifying the name of the node set containing the secondary nodes to be included
in the initial clearance speciﬁcation. This argument is not valid when
secondaryNodesetName
overclosureType=INTERFERENCE and if openingTolerance or overclosureTolerance
is speciﬁed. The default value is None.
A Float specifying the fraction of the step time (between 0.0 and 1.0) in which the
interference ﬁt has to be solved. The default value is 1.0. This argument is valid only
when overclosureType=INTERFERENCE.
stepFraction
Return value
An ExpInitialization object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ExpInitialization object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ExpInitialization method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The ExpInitialization object has members with the same names and descriptions as the arguments to the ExpInitialization
method.
Corresponding analysis keywords
•
*CONTACT INITIALIZATION DATA
849
Abaqus Scripting Reference Guide
ExpInitialization object

FilmCondition object
The FilmCondition object deﬁnes ﬁlm coefﬁcients and associated sink temperatures for coupled
temperature-displacement analyses.
The FilmCondition object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
FilmCondition(...)
This method creates a FilmCondition object.
Path
mdb.models[name].FilmCondition
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the FilmCondition object is created.
createStepName
A Region object specifying the name of the surface to which the ﬁlm condition interaction
is applied.
surface
A SymbolicConstant specifying how the ﬁlm condition is deﬁned. Possible values are
EMBEDDED_COEFF, PROPERTY_REF, USER_SUB, and FIELD.
deﬁnition
Optional arguments
A String specifying the name of the FilmConditionProp object associated with this interaction.
The interactionProperty argument applies only when deﬁnition=PROPERTY_REF. The
default value is an empty string.
interactionProperty
A Float specifying the reference sink temperature, 
. The default value is 0.0.
sinkTemperature
A String specifying the name of the Amplitude object that gives the variation of the sink
temperature, 
, with time. The default value is an empty string.
sinkAmplitude
Note:
Use empty string in an Abaqus/Standard analysis to specify that the reference sink
temperature is applied immediately at the beginning of the step or linearly over the step.
Use empty string in an Abaqus/Explicit analysis to specify that the reference sink
temperature is applied throughout the step.
Abaqus Scripting Reference Guide
850
FilmCondition object

A Float specifying the reference ﬁlm coefﬁcient value, . The ﬁlmCoeff argument applies
when deﬁnition=EMBEDDED_COEFF, deﬁnition=USER_SUB, or deﬁnition=FIELD. The
default value is 0.0.
ﬁlmCoeff
A String specifying the name of the Amplitude object that gives the variation of the ﬁlm
coefﬁcient, , with time. The default value is an empty string.
ﬁlmCoeffAmplitude
Note:
Use empty string in an Abaqus/Standard analysis to specify that the reference ﬁlm
coefﬁcient is applied immediately at the beginning of the step or linearly over the step.
Use empty string in an Abaqus/Explicit analysis to specify that the reference ﬁlm
coefﬁcient is applied throughout the step.
A String specifying the name of the AnalyticalField object associated with this interaction.
The ﬁeld argument applies only when deﬁnition=FIELD. The default value is an empty string.
ﬁeld
A String specifying the name of the AnalyticalField or DiscreteField object associated with
the sink temperature. The sinkFieldName argument applies only when
sinkFieldName
sinkDistributionType=ANALYTICAL_FIELD or sinkDistributionType=DISCRETE_FIELD.
The default value is an empty string.
A SymbolicConstant specifying how the sink temperature is distributed. Possible values are
UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD. The default value is UNIFORM.
sinkDistributionType
Return value
A FilmCondition object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing FilmCondition object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FilmCondition  method, except for the
name and createStepName arguments.
Return value
None.
851
Abaqus Scripting Reference Guide
FilmCondition object

Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing FilmCondition object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
The optional arguments to setValuesInStep are the same as the optional arguments to the FilmConditionState
method.
Return value
None.
Exceptions
None.
Members
The FilmCondition object has members with the same names and descriptions as the arguments to the FilmCondition
method except the optional arguments to the setValuesInStep method.
Abaqus Scripting Reference Guide
852
FilmCondition object

FilmConditionProp object
The FilmConditionProp object is an interaction property that deﬁnes a ﬁlm coefﬁcient as a function of temperature
and ﬁeld variables.
The FilmConditionProp object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
FilmConditionProp(...)
This method creates a FilmConditionProp object.
Path
mdb.models[name].FilmConditionProp
Required arguments
A String specifying the interaction property repository key.
name
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A sequence of sequences of Floats specifying the following:
property
•
The ﬁlm coefﬁcient, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A FilmConditionProp object.
Exceptions
None.
setValues(...)
This method modiﬁes the FilmConditionProp object.
853
FilmConditionProp object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FilmConditionProp  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The FilmConditionProp object has members with the same names and descriptions as the arguments to the
FilmConditionProp  method.
Corresponding analysis keywords
•
*FILM PROPERTY
Abaqus Scripting Reference Guide
854
FilmConditionProp object

FilmConditionState object
The FilmConditionState object stores the propagating data for a FilmCondition object. One instance of this object is
created internally by the FilmCondition object for each step. The instance is also deleted internally by the FilmCondition
object.
The FilmConditionState object has no constructor or methods.
The FilmConditionState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The FilmConditionState object has the following members:
A SymbolicConstant specifying the propagation state of the interactionProperty
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
interactionPropertyState
A Float specifying the sink temperature.
sinkTemperature
A SymbolicConstant specifying the propagation state of the sinkTemperature member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
sinkTemperatureState
A SymbolicConstant specifying the propagation state of the sinkAmplitude member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
sinkAmplitudeState
A Float specifying the ﬁlm coefﬁcient.
ﬁlmCoeff
A SymbolicConstant specifying the propagation state of the ﬁlmCoeff member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
ﬁlmCoeffState
A SymbolicConstant specifying the propagation state of the ﬁlmCoeffAmplitude
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
ﬁlmCoeffAmplitudeState
A String specifying the FilmConditionProp object associated with this interaction.
interactionProperty
A String specifying the name of the Amplitude object that gives the variation of the
sink temperature.
sinkAmplitude
A String specifying the name of the Amplitude object that gives the variation of the
ﬁlm coefﬁcient.
ﬁlmCoeffAmplitude
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
855
FilmConditionState object

•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*SFILM
•
*FILM
Abaqus Scripting Reference Guide
856
FilmConditionState object

FluidCavity object
The FluidCavity object deﬁnes a surface-based cavity.
The FluidCavity object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
FluidCavity(...)
This method creates an FluidCavity object.
Path
mdb.models[name].FluidCavity
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the FluidCavity object is created.
createStepName
A Region object specifying the ﬂuid cavity reference point.
cavityPoint
A Region object specifying the surface forming the boundary of the ﬂuid cavity.
cavitySurface
A String specifying the FluidCavityProperty object associated with this
interaction.
interactionProperty
Optional arguments
A Float specifying the magnitude of the ambient pressure. The default value is 0.0.
ambientPressure
A Float specifying the out-of-plane thickness of the surface for two-dimensional models.
This argument is valid only when using two-dimensional models. The default value is
1.0.
thickness
A Boolean specifying whether adiabatic behavior is assumed for the ideal gas. This
argument is valid only when interactionProperty speciﬁes a pneumatic deﬁnition. The
default value is OFF.
useAdiabatic
A Boolean specifying whether the analysis will check the consistency of the surface
normals. The default value is ON.
checkNormals
Return value
A FluidCavity object.
857
FluidCavity object

Exceptions
None.
setValues(...)
This method modiﬁes the FluidCavity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidCavity  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
Members
The FluidCavity object has members with the same names and descriptions as the arguments to the FluidCavity
method.
Corresponding analysis keywords
•
*FLUID CAVITY
Abaqus Scripting Reference Guide
858
FluidCavity object

FluidCavityProperty object
The FluidCavityProperty object is an interaction property that deﬁnes the ﬂuid behavior for a surface-based ﬂuid
cavity.
The FluidCavityProperty object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
FluidCavityProperty(...)
This method creates a FluidCavityProperty object.
Path
mdb.models[name].FluidCavityProperty
Required arguments
A String specifying the interaction property repository key.
name
Optional arguments
A SymbolicConstant specifying the type of ﬂuid cavity property to be deﬁned. Possible
values are HYDRAULIC and PNEUMATIC. The default value is HYDRAULIC.
deﬁnition
None or a Float specifying the reference ﬂuid density. This argument is applicable only
when deﬁnition=HYDRAULIC, and is required in that case. The default value is None.
ﬂuidDensity
None or a Float specifying the molecular weight of the ideal gas species. This argument
is applicable only when deﬁnition=PNEUMATIC, and is required in that case. The default
value is None.
molecularWeight
A Boolean specifying whether thermal expansion coefﬁcients will be deﬁned. This
argument is applicable only when deﬁnition=HYDRAULIC. The default value is OFF.
useExpansion
A Boolean specifying whether the thermal ﬂuid expansion data will have temperature
dependency. This argument is applicable only when deﬁnition=HYDRAULIC and when
useExpansion=True. The default value is OFF.
expansionTempDep
An Int specifying the number of ﬁeld variable dependencies in the thermal ﬂuid expansion
data. This argument is applicable only when deﬁnition=HYDRAULIC and when
useExpansion=True. The default value is 0.
expansionDependencies
A Float specifying the reference temperature for the coefﬁcient of thermal expansion.
This argument is applicable only when deﬁnition=HYDRAULIC, when
referenceTemperature
859
FluidCavityProperty object

useExpansion=True, and when either expansionTempDep=True or when
expansionDependencies is greater than 0. The default value is 0.0.
A sequence of sequences of Floats specifying the thermal expansion coefﬁcients. This
argument is applicable only when deﬁnition=HYDRAULIC and when useExpansion=True.
Each sequence contains the following data:
expansionTable
•
The mean coefﬁcient of thermal expansion.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
A Boolean specifying whether ﬂuid bulk modulus values will be deﬁned. This argument
is applicable only when deﬁnition=HYDRAULIC. The default value is OFF.
useBulkModulus
A Boolean specifying whether the ﬂuid bulk modulus data will have temperature
dependency. This argument is applicable only when deﬁnition=HYDRAULIC and when
useBulkModulus=True. The default value is OFF.
bulkModulusTempDep
An Int specifying the number of ﬁeld variable dependencies in the ﬂuid bulk modulus
data. This argument is applicable only when deﬁnition=HYDRAULIC and when
useBulkModulus=True. The default value is 0.
bulkModulusDependencies
A sequence of sequences of Floats specifying the ﬂuid bulk modulus values. This argument
is applicable only when deﬁnition=HYDRAULIC and when useBulkModulus=True.
Each sequence contains the following data:
bulkModulusTable
•
The ﬂuid bulk modulus.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
A Boolean specifying whether molar heat capacity values will be deﬁned. This argument
is applicable only when deﬁnition=PNEUMATIC. The default value is OFF.
useCapacity
A SymbolicConstant specifying the method to deﬁne the molar heat capacity. Possible
values are POLYNOMIAL and TABULAR. The default value is POLYNOMIAL.
capacityType
A Boolean specifying whether the molar heat capacity data will have temperature
dependency. This argument is applicable only when deﬁnition=PNEUMATIC, when
useCapacity=True, and when capacityType=TABULAR. The default value is OFF.
capacityTempDep
An Int specifying the number of ﬁeld variable dependencies in the molar heat capacity
data. This argument is applicable only when deﬁnition=PNEUMATIC, when
useCapacity=True, and when capacityType=TABULAR. The default value is 0.
capacityDependencies
Abaqus Scripting Reference Guide
860
FluidCavityProperty object

A sequence of sequences of Floats specifying the molar heat capacity values in the form
of a polynomial expression. This argument is applicable only when
capacityTable
deﬁnition=PNEUMATIC, when useCapacity=True, and when
capacityType=POLYNOMIAL. In this form, only one sequence is speciﬁed and that
sequence contains the following data:
•
The ﬁrst molar heat capacity coefﬁcient.
•
The second molar heat capacity coefﬁcient.
•
The third molar heat capacity coefﬁcient.
•
The fourth molar heat capacity coefﬁcient.
•
The ﬁfth molar heat capacity coefﬁcient.
Alternatively, the sequence data may specify the molar heat capacity values at constant
pressure for an ideal gas species. This argument is applicable only when
deﬁnition=PNEUMATIC, when useCapacity=True, and when capacityType=TABULAR.
Each sequence contains the following data:
•
The molar heat capacity at constant pressure.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A FluidCavityProperty object.
Exceptions
None.
setValues(...)
This method modiﬁes the FluidCavityProperty object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidCavityProperty  method, except
for the name argument.
Return value
None.
Exceptions
None.
861
Abaqus Scripting Reference Guide
FluidCavityProperty object

Members
The FluidCavityProperty object has members with the same names and descriptions as the arguments to the
FluidCavityProperty  method.
Corresponding analysis keywords
•
*FLUID BEHAVIOR
•
*CAPACITY
•
*FLUID BULK MODULUS
•
*FLUID DENSITY
•
*FLUID EXPANSION
•
*MOLECULAR WEIGHT
Abaqus Scripting Reference Guide
862
FluidCavityProperty object

FluidCavityState object
The FluidCavityState object stores the propagating data for an FluidCavity object. One instance of this object is created
internally by the FluidCavity object for each step. The instance is also deleted internally by the FluidCavity object.
The FluidCavityState object has no constructor or methods.
The FluidCavityState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The FluidCavityState object has the following member:
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
863
FluidCavityState object

FluidExchangeActivation object
The FluidExchnageActivation object is used to deﬁne the activation of ﬂuid exchanges within the ﬂuid cavity.
The FluidExchangeActivation object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
FluidExchangeActivation(...)
This method creates a FluidExchangeActivation object.
Path
mdb.models[name].FluidExchangeActivation
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the FluidExchange object is
created.
createStepName
A List specifying ﬂuid exchanges to be activated.
exchanges
Optional arguments
A String specifying the name of the amplitude curve deﬁning a mapping between the
inﬂation time and the actual time.
amplitude
A Boolean specifying the vent and leakage area obstruction by contacted surfaces.
isBlockage
A Boolean specifying if the ﬂow of ﬂuid is only from the ﬁrst ﬂuid cavity to the
second ﬂuid cavity deﬁned in the FluidExchange object.
isOnlyOutﬂow
A Float specifying the ratio of the actual surface area over the initial surface area at
which you want the ﬂuid to leak.
deltaLeakageArea
Return value
A FluidExchangeActivation object.
Exceptions
None.
Abaqus Scripting Reference Guide
864
FluidExchangeActivation object

setValues(...)
This method modiﬁes the FluidExchangeActivation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidExchangeActivation method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
Members
The FluidExchangeActivation object has members with the same names and descriptions as the arguments to the
FluidExchangeActivation method.
Corresponding analysis keywords
•
*FLUIDEXCHANGEACTIVATION
865
Abaqus Scripting Reference Guide
FluidExchangeActivation object

FluidExchangeActivationState object
The FluidExchangeActivationState object stores the propagating data for a FluidExchangeActivation object.
One instance of this object is created internally by the FluidExchangeActivation object for each step. The instance is
also deleted internally by the FluidExchangeActivation object.
The FluidExchangeActivationState object has no constructor or methods.
The FluidExchangeActivationState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The FluidExchangeActivationState object has the following members:
A SymbolicConstant specifying the propagation state of the exchanges member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
exchangesState
A String specifying the name of the FluidExchange object associated with this interaction.
exchanges
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A String specifying the name of the Amplitude object associated with this interaction.
amplitude
A SymbolicConstant specifying the propagation state of the isBlockage member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
isBlockageState
A Boolean specifying whether to consider vent and leakage area obstruction by contacted
surfaces.
isBlockage
A SymbolicConstant specifying the propagation state of the isOnlyOutﬂow member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
isOnlyOutﬂowState
A Boolean specifying whether the ﬂow of ﬂuid is allowed only from the ﬁrst ﬂuid cavity
to the second ﬂuid cavity deﬁned in the FluidExchange object.
isOnlyOutﬂow
A SymbolicConstant specifying the propagation state of the deltaLeakageArea member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
deltaLeakageAreaState
A Float specifying the ratio of the actual surface area over the initial surface area at
which you want the ﬂuid to leak.
deltaLeakageArea
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
Abaqus Scripting Reference Guide
866
FluidExchangeActivationState object

•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
867
Abaqus Scripting Reference Guide
FluidExchangeActivationState object

FluidExchange object
The FluidExchange object is used to deﬁne ﬂuid exchange between two ﬂuid cavities or between a ﬂuid cavity and
its environment.
The FluidExchange object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
FluidExchange(...)
This method creates an FluidExchange object.
Path
mdb.models[name].FluidExchange
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the FluidExchange object is created.
createStepName
A String specifying the ﬁrst FluidCavity object associated with this interaction. This
will be the only cavity speciﬁed if deﬁnition=TO_ENVIRONMENT.
ﬁrstCavity
A String specifying the FluidExchangeProperty object associated with this interaction.
interactionProperty
Optional arguments
A SymbolicConstant specifying the type of ﬂuid exchange to be deﬁned. Possible values
are TO_ENVIRONMENT and BETWEEN_CAVITIES. The default value is
TO_ENVIRONMENT.
deﬁnition
A String specifying the second FluidCavity object associated with this interaction. This
argument is applicable only when deﬁnition=BETWEEN_CAVITIES.
secondCavity
A Float specifying the effective exchange area. The default value is 1.0.
exchangeArea
Return value
A FluidExchange object.
Exceptions
None.
Abaqus Scripting Reference Guide
868
FluidExchange object

setValues(...)
This method modiﬁes the FluidExchange object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidExchange  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
Members
The FluidExchange object has members with the same names and descriptions as the arguments to the FluidExchange
method.
Corresponding analysis keywords
•
*FLUID EXCHANGE
869
Abaqus Scripting Reference Guide
FluidExchange object

FluidExchangeProperty object
The FluidExchangeProperty object is an interaction property that deﬁnes the ﬂuid exchange property for a ﬂow between
two ﬂuid cavities or between a ﬂuid cavity and its environment.
The FluidExchangeProperty object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
FluidExchangeProperty(...)
This method creates a FluidExchangeProperty object.
Path
mdb.models[name].FluidExchangeProperty
Required arguments
A String specifying the interaction property repository key.
name
A sequence of sequences of Floats specifying the viscous and hydrodynamic resistance coefﬁcients when
deﬁnition=BULK_VISCOSITY. Each sequence contains the following data:
dataTable
•
The viscous resistance coefﬁcient.
•
The hydrodynamic resistance coefﬁcient.
•
The average absolute pressure, if the data depend on pressure.
•
The average temperature, if the data depend on temperature.
•
The value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
The value of the second ﬁeld variable.
•
Etc.
Alternatively, the sequence data may specify the mass ﬂow rate. This is applicable only when
deﬁnition=MASS_FLUX. In this form, only one sequence is speciﬁed and that sequence contains the
following data:
•
The mass ﬂow rate per unit area.
Alternatively, the sequence data may specify the mass rate leakage. This is applicable only when
deﬁnition=MASS_RATE_LEAK. Each sequence contains the following data:
•
The absolute value of the mass ﬂow rate per unit area. (The ﬁrst tabular value entered must always be
zero.)
•
The absolute value of the pressure difference. (The ﬁrst tabular value entered must always be zero.)
•
The average absolute pressure, if the data depend on pressure.
•
The average temperature, if the data depend on temperature.
•
The value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
Abaqus Scripting Reference Guide
870
FluidExchangeProperty object

•
The value of the second ﬁeld variable.
•
Etc.
Alternatively, the sequence data may specify the volume ﬂow rate. This is applicable only when
deﬁnition=VOL_FLUX. In this form, only one sequence is speciﬁed and that sequence contains the following
data:
•
The volumetric ﬂow rate per unit area.
Alternatively, the sequence data may specify the volume rate leakage. This is applicable only when
deﬁnition=VOL_RATE_LEAK. Each sequence contains the following data:
•
The absolute value of the volumetric ﬂow rate per unit area. (The ﬁrst tabular value entered must always
be zero.)
•
The absolute value of the pressure difference. (The ﬁrst tabular value entered must always be zero.)
•
The average absolute pressure, if the data depend on pressure.
•
The average temperature, if the data depend on temperature.
•
The value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
The value of the second ﬁeld variable.
•
Etc.
Optional arguments
A SymbolicConstant specifying the type of ﬂuid exchange property to be deﬁned. Possible
values are BULK_VISCOSITY, MASS_FLUX, MASS_RATE_LEAK, VOL_FLUX, and
VOL_RATE_LEAK. The default value is BULK_VISCOSITY.
deﬁnition
A Boolean specifying whether the data will have pressure dependency. This argument is
applicable only when deﬁnition=BULK_VISCOSITY, or when
pressureDependency
deﬁnition=MASS_RATE_LEAK, or when deﬁnition=VOL_RATE_LEAK. The default
value is OFF.
A Boolean specifying whether the data will have temperature dependency. This argument
is applicable only when deﬁnition=BULK_VISCOSITY, or when
temperatureDependency
deﬁnition=MASS_RATE_LEAK, or when deﬁnition=VOL_RATE_LEAK. The default
value is OFF.
An Int specifying the number of ﬁeld variable dependencies in the data. This argument is
applicable only when deﬁnition=BULK_VISCOSITY, or when
ﬁeldDependencies
deﬁnition=MASS_RATE_LEAK, or when deﬁnition=VOL_RATE_LEAK. The default
value is 0.
Return value
A FluidExchangeProperty object.
Exceptions
None.
871
Abaqus Scripting Reference Guide
FluidExchangeProperty object

setValues(...)
This method modiﬁes the FluidExchangeProperty object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidExchangeProperty  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The FluidExchangeProperty object has members with the same names and descriptions as the arguments to the
FluidExchangeProperty  method.
Corresponding analysis keywords
•
*FLUID EXCHANGE PROPERTY
Abaqus Scripting Reference Guide
872
FluidExchangeProperty object

FluidExchangeState object
The FluidExchangeState object stores the propagating data for an FluidExchange object. One instance of this object
is created internally by the FluidExchange object for each step. The instance is also deleted internally by the
FluidExchange object.
The FluidExchangeState object has no constructor or methods.
The FluidExchangeState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The FluidExchangeState object has the following member:
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
873
FluidExchangeState object

FluidInflatorActivation object
The FluidInﬂatorActivation object is used to deﬁne the activation of ﬂuid inﬂators to model the deployment of an
airbag.
The FluidInﬂatorActivation object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
FluidInflatorActivation(...)
This method creates a FluidInﬂatorActivation object.
Path
mdb.models[name].FluidInflatorActivation
Required arguments
A string specifying the repository key.
name
A string specifying the name of the step in which the FluidInﬂator object is
created.
createStepName
A list specifying ﬂuid inﬂators to be activated.
inﬂators
Optional arguments
A string specifying the name of the amplitude curve deﬁning a mapping between
the inﬂation time and the actual time.
inﬂationTimeAmplitude
A string specifying the name of the amplitude curve by which to modify the
mass ﬂow rate.
massFlowAmplitude
Return value
A FluidInﬂatorActivation object.
Exceptions
None.
setValues(...)
This method modiﬁes the FluidInﬂatorActivation object.
Required arguments
None.
Abaqus Scripting Reference Guide
874
FluidInflatorActivation object

Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidInﬂatorActivation method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
Members
The FluidInﬂatorActivation object has members with the same names and descriptions as the arguments to the
FluidInﬂatorActivation method.
Corresponding analysis keywords
•
*FLUIDINFLATORACTIVATION
875
Abaqus Scripting Reference Guide
FluidInflatorActivation object

FluidInflatorActivationState object
The FluidInﬂatorActivationState object stores the propagating data for a FluidInﬂatorActivation object.
One instance of this object is created internally by the FluidInﬂatorActivation object for each step. The instance is also
deleted internally by the FluidInﬂatorActivation object.
The FluidInﬂatorActivationState object has no constructor or methods.
The FluidInﬂatorActivationState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The FluidInﬂatorActivationState object has the following member:
A SymbolicConstant specifying the propagation state of the inﬂators member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
inﬂatorsState
A String specifying the name of the FluidInﬂator object associated with this interaction.
inﬂators
A SymbolicConstant specifying the propagation state of the inﬂationTimeAmplitude
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
inﬂationTimeAmplitudeState
A String specifying the name of the Amplitude object associated with this interaction.
inﬂationTimeAmplitude
A SymbolicConstant specifying the propagation state of the massFlowAmplitude
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
massFlowAmplitudeState
A String specifying the name of the Amplitude object associated with this interaction.
massFlowAmplitude
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Abaqus Scripting Reference Guide
876
FluidInflatorActivationState object

FluidInflator object
The FluidInﬂator object is used to deﬁne a ﬂuid inﬂator to model deployment of an airbag.
The FluidInﬂator object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
FluidInflator(...)
This method creates a FluidInﬂator object.
Path
mdb.models[name].FluidInflator
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the FluidInﬂator object is created.
createStepName
A String specifying the ﬁrst FluidCavity object associated with this interaction.
cavity
A String specifying the FluidInﬂatorProperty object associated with this interaction.
interactionProperty
Return value
A FluidInﬂator object.
Exceptions
None.
setValues(...)
This method modiﬁes the FluidInﬂator object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidInﬂator method, except for the
name and createStepName arguments.
Return value
None.
877
FluidInflator object

Exceptions
None.
Members
The FluidInﬂator object has members with the same names and descriptions as the arguments to the FluidInﬂator
method.
Corresponding analysis keywords
•
*FLUID INFLATOR
Abaqus Scripting Reference Guide
878
FluidInflator object

FluidInflatorProperty object
The FluidInﬂatorProperty object is an interaction property that deﬁnes a ﬂuid inﬂator property to model the deployment
of an airbag.
The inﬂator property deﬁnes the mass ﬂow rate and temperature as a function of inﬂation time either directly or by
entering tank test data. It also deﬁnes the mixture of gases entering the ﬂuid cavity.
The FluidInﬂatorProperty object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
FluidInflatorProperty(...)
This method creates a FluidInﬂatorProperty object.
Path
mdb.models[name].FluidInflatorProperty
Required arguments
A String specifying the interaction property repository key.
name
A Symbolic constant specifying the method used for modeling the ﬂow characteristics of
inﬂators. The default value is deﬁnition=DUAL PRESSURE. The possible values are DUAL
PRESSURE, PRESSURE AND MASS, TANK TEST, and TEMPERATURE AND MASS.
deﬁnition
A Float specifying the total inﬂator oriﬁce area. This argument is applicable only if
deﬁnition=DUAL PRESSURE or deﬁnition=PRESSURE AND MASS.
effectiveArea
A Float specifying the tank volume. This argument is applicable only if deﬁnition=DUAL
PRESSURE or deﬁnition=TANK TEST.
tankVolume
Optional arguments
A Float specifying the discharge coefﬁcient. This argument is applicable only if
deﬁnition=DUAL PRESSURE or deﬁnition=PRESSURE AND MASS.
dischargeCoefﬁcient
A sequence of sequences of Floats specifying the items described in the "Table data"
section below.
dataTable
An Int specifying the number of gas species used for this inﬂator.
numFluids
A Symbolic constant specifying whether to use mass fraction or the molar fraction
for a mixture of ideal gases. The default value is MASS FRACTION. The possible
values are MASS FRACTION or MOLAR FRACTION.
mixtureType
A sequence of sequences of Floats specifying the inﬂation time.
inﬂationTime
879
FluidInflatorProperty object

A sequence of sequences of Strings specifying ﬂuid behavior names.
ﬂuidbehaviorName
A sequence of sequences of Floats specifying the mass fraction or the molar fraction
corresponding to entered ﬂuid behavior.
massFraction
Table data
If deﬁnition=DUAL PRESSURE, the table data specify the following:
•
Inﬂation time.
•
Inﬂator pressure.
•
Tank pressure.
If deﬁnition=PRESSURE AND MASS, the table data specify the following:
•
Inﬂation time.
•
Inﬂator pressure.
•
Inﬂator mass ﬂow rate.
If deﬁnition=TANK TEST, the table data specify the following:
•
Inﬂation time.
•
Inﬂator gas temperature.
•
Tank pressure.
If deﬁnition=TEMPERATURE AND MASS, the table data specify the following:
•
Inﬂation time.
•
Inﬂator gas temperature.
•
Inﬂator mass ﬂow rate.
Return value
A FluidInﬂatorProperty object.
Exceptions
None.
setValues(...)
This method modiﬁes the FluidInﬂatorProperty object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidInﬂatorProperty  method, except
for the name argument.
Abaqus Scripting Reference Guide
880
FluidInflatorProperty object

Return value
None.
Exceptions
None.
Members
The FluidInﬂatorProperty object has members with the same names and descriptions as the arguments to the
FluidInﬂatorProperty  method.
Corresponding analysis keywords
•
*FLUID INFLATOR PROPERTY
881
Abaqus Scripting Reference Guide
FluidInflatorProperty object

FluidInflatorState object
The FluidInﬂatorState object stores the propagating data for a FluidInﬂator object.
One instance of this object is created internally by the FluidInﬂator object for each step. The instance is also deleted
internally by the FluidInﬂator object.
The FluidInﬂatorState object has no constructor or methods.
The FluidInﬂatorState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The FluidInﬂatorState object has the following member:
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Abaqus Scripting Reference Guide
882
FluidInflatorState object

FractureCriterion object
The FractureCriterion object speciﬁes fractureCriterion options for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].fractureCriterion
FractureCriterion(...)
This method creates a FractureCriterion object.
Path
mdb.models[name].interactionProperties[name].FractureCriterion
Required arguments
A sequence of sequences of Floats specifying the value deﬁning the fracture criterion. The
items in the table data are described below.
initTable
Optional arguments
A SymbolicConstant specifying the type of data used to deﬁne the fracture criterion.
Possible values are VCCT and ENHANCED VCCT. The default value is VCCT.
type
A SymbolicConstant specifying the mixed mode behavior type used to deﬁne fracture
criterion. Possible values are BK, POWER, and REEDER. The default value is BK.
mixedModeBehavior
A Boolean specifying whether the fracture criterion data depend on temperature. The
default value is OFF.
temperatureDependency
An Int specifying the number of fracture criterion data ﬁeld variables. The default
value is 0.
dependencies
A Float specifying the tolerance for VCCT\Enhanced VCCT type. The default value
is 0.2.
tolerance
A SymbolicConstant specifying whether to include unstable crack growth tolerance
in fracture criterion. Possible values are ON and OFF. The default value is OFF.
specifyUnstableCrackProp
The SymbolicConstant DEFAULT or a Float specifying the tolerance for unstable
crack propagation. This parameter speciﬁed only if specifyUnstableCrackProp=ON.
The default value is DEFAULT.
unstableTolerance
Table data
Table data for initTable:
883
FractureCriterion object

If type=VCCT for mixedModeBehavior=BK or REEDER, the table data specify the following:
•
Mode I critical energy release rate, 
.
•
Mode II critical energy release rate, 
.
•
Mode III critical energy release rate, 
.
•
Exponent, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=VCCT for mixedModeBehavior=POWER, the table data specify the following:
•
Mode I critical energy release rate, 
.
•
Mode II critical energy release rate, 
.
•
Mode III critical energy release rate, 
.
•
Exponent, 
.
•
Exponent, 
.
•
Exponent, 
.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENHANCED VCCT for mixedModeBehavior=BK or REEDER, the table data specify the following:
•
Mode I critical energy release rate for onset crack, 
.
•
Mode II critical energy release rate for onset crack, 
.
•
Mode III critical energy release rate for onset crack, 
.
•
Mode I critical energy release rate for crack propagation, 
.
•
Mode II critical energy release rate for crack propagation, 
.
•
Mode III critical energy release rate for crack propagation, 
.
•
Exponent, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENHANCED VCCT for mixedModeBehavior=POWER, the table data specify the following:
•
Mode I critical energy release rate for onset crack, 
.
•
Mode II critical energy release rate for onset crack, 
.
Abaqus Scripting Reference Guide
884
FractureCriterion object

•
Mode III critical energy release rate for onset crack, 
.
•
Mode I critical energy release rate for crack propagation, 
.
•
Mode II critical energy release rate for crack propagation, 
.
•
Mode III critical energy release rate for crack propagation, 
.
•
Exponent, 
.
•
Exponent, 
.
•
Exponent, 
.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A FractureCriterion object.
Exceptions
None.
setValues(...)
This method modiﬁes the FractureCriterion object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FractureCriterion  method.
Return value
None.
Exceptions
None.
Members
The FractureCriterion object has members with the same names and descriptions as the arguments to the
FractureCriterion  method.
Corresponding analysis keywords
•
*FRACTURE CRITERION
885
Abaqus Scripting Reference Guide
FractureCriterion object

GapElectricalConductance object
The GapElectricalConductance object speciﬁes electrical conductance for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].electricalConductance
GapElectricalConductance(...)
This method creates a GapElectricalConductance object.
Path
mdb.models[name].interactionProperties[name].GapElectricalConductance
Required arguments
None.
Optional arguments
A SymbolicConstant specifying how the electrical conductance is deﬁned. Possible
values are TABULAR and USER_DEFINED. The default value is TABULAR.
deﬁnition
A Boolean specifying whether to use clearance-dependent data. The default value
is ON.
clearanceDependency
A Boolean specifying whether to use pressure-dependent data. The default value
is OFF.
pressureDependency
A Boolean specifying whether to use temperature-dependent data with clearance
dependency. The default value is OFF.
temperatureDependencyC
An Int specifying the number of ﬁeld variables to use with clearance dependency.
The default value is 0.
dependenciesC
A sequence of sequences of Floats specifying clearance dependency data. The
items in the table data are described below.
clearanceDepTable
A Boolean specifying whether to use temperature-dependent data with pressure
dependency. The default value is OFF.
temperatureDependencyP
An Int specifying the number of ﬁeld variables to use with pressure dependency.
The default value is 0.
dependenciesP
A sequence of sequences of Floats specifying pressure dependency data. The items
in the table data are described below.
pressureDepTable
Abaqus Scripting Reference Guide
886
GapElectricalConductance object

Table data
The clearanceDepTable data specify the following:
•
Conductivity.
•
Clearance.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
The pressureDepTable data specify the following:
•
Conductivity.
•
Pressure.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GapElectricalConductance object.
Exceptions
None.
setValues(...)
This method modiﬁes the GapElectricalConductance object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GapElectricalConductance  method.
Return value
None.
Exceptions
None.
Members
The GapElectricalConductance object has members with the same names and descriptions as the arguments to the
GapElectricalConductance  method.
887
Abaqus Scripting Reference Guide
GapElectricalConductance object

Corresponding analysis keywords
•
*GAP ELECTRICAL CONDUCTANCE
Abaqus Scripting Reference Guide
888
GapElectricalConductance object

GapHeatGeneration object
The GapHeatGeneration object speciﬁes heat generation for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].heatGeneration
HeatGeneration(...)
This method creates a GapHeatGeneration object.
Path
mdb.models[name].interactionProperties[name].HeatGeneration
Required arguments
None.
Optional arguments
A Float specifying the fraction of dissipated energy caused by friction or electric
currents that is converted to heat. The default value is 1.0.
conversionFraction
A Float specifying the fraction of converted heat distributed to the secondary surface.
The default value is 0.5.
secondaryFraction
Return value
A GapHeatGeneration object.
Exceptions
None.
setValues(...)
This method modiﬁes the GapHeatGeneration object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GapHeatGeneration method.
Return value
None.
889
GapHeatGeneration object

Exceptions
None.
Members
The GapHeatGeneration object has the following members:
A Float specifying the fraction of dissipated energy caused by friction or electric
currents that is converted to heat. The default value is 1.0.
conversionFraction
A Float specifying the fraction of converted heat distributed to the secondary surface.
The default value is 0.5.
secondaryFraction
Corresponding analysis keywords
•
*GAP HEAT GENERATION
Abaqus Scripting Reference Guide
890
GapHeatGeneration object

GeometricProperties object
The GeometricProperties object speciﬁes surface interaction properties.
Access
import interaction
mdb.models[name].interactionProperties[name].geometricProperties
GeometricProperties(...)
This method creates a GeometricProperties object.
Path
mdb.models[name].interactionProperties[name].GeometricProperties
Required arguments
None.
Optional arguments
A Float specifying the out-of-plane thickness of the surface for a two-dimensional
model or cross-sectional area for every node in the node-based surface. The default
value is 1.0.
contactArea
None or a Float specifying the thickness of an interfacial layer between the
contacting surfaces. If padThickness=None, there is no interfacial layer. The default
value is None.
padThickness
None or a Float specifying the thickness that determines the contacting surfaces
to be tracked. The input value for this parameter cannot be negative. An internal
default value is used if a zero value is input or if the parameter is omitted.
trackingThickness
An Int specifying the number of state-dependent variables. The default value is 0.
This argument is applicable only if modelType=MODELTYPE_USER or
modelType=MODELTYPE_USER_INTERACTION.
dependentVariables
An Int specifying the number of property values required. The default value is 0.
This argument is applicable only if modelType=MODELTYPE_USER or
modelType=MODELTYPE_USER_INTERACTION.
numProperties
A Boolean specifying whether to use unsymmetric equation solution procedures.
This argument is applicable only if modelType=MODELTYPE_USER or
modelType=MODELTYPE_USER_INTERACTION.
useUnsymmetricEqunProcedure
A SymbolicConstant specifying the surface interaction model type.
modelType
891
GeometricProperties object

Return value
A GeometricProperties object.
Exceptions
None.
setValues(...)
This method modiﬁes the GeometricProperties object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GeometricProperties method.
Return value
None.
Exceptions
None.
Members
The GeometricProperties object has members with the same names and descriptions as the arguments to the
GeometricProperties method.
Corresponding analysis keywords
•
*SURFACE INTERACTION
Abaqus Scripting Reference Guide
892
GeometricProperties object

IncidentWave object
The IncidentWave object deﬁnes incident wave interactions for acoustic and coupled acoustic-structural analyses.
The IncidentWave object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
IncidentWave(...)
This method creates an IncidentWave object.
Path
mdb.models[name].IncidentWave
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the IncidentWave object is created.
createStepName
A Region object specifying the incident wave source point.
sourcePoint
A Region object specifying the incident wave standoff point.
standoffPoint
This argument is not valid when deﬁnition=CONWEP.
A Region object specifying the surface deﬁning the incident wave interaction. In
problems involving ﬂuid/surface boundaries, both the ﬂuid surface and the solid surface
comprising the boundary must have an incident wave interaction speciﬁed.
surface
A String specifying the IncidentWaveProperty object associated with this interaction.
interactionProperty
Optional arguments
A SymbolicConstant specifying the type of incident wave to be deﬁned. The value must be
PRESSURE for linear perturbation steps. An Explicit step is required when the value is set
deﬁnition
to CONWEP. Possible values are PRESSURE, ACCELERATION, UNDEX, and CONWEP.
The default value is PRESSURE.
A String specifying the name of the Amplitude object that deﬁnes the ﬂuid pressure time
history at the standoff point, if deﬁnition=PRESSURE. If deﬁnition=ACCELERATION,
amplitude
then this string speciﬁes the name of the Amplitude object that deﬁnes the ﬂuid particle
acceleration time history at the standoff point. This member can be speciﬁed only if
deﬁnition=PRESSURE or ACCELERATION. The default value is an empty string.
893
IncidentWave object

A String specifying the name of the Amplitude object that deﬁnes the imaginary component
of the ﬂuid pressure time history at the standoff point. This member is applicable only for
linear perturbation steps and if deﬁnition=PRESSURE. The default value is an empty string.
imaginaryAmplitude
A sequence of three Floats specifying the X, Y, and Z components of the direction cosine
of the ﬂuid surface normal.
surfaceNormal
This argument is valid only when deﬁnition=UNDEX.
None or a Float specifying the initial depth of the UNDEX bubble. The default value is
None.
initialDepth
This argument is valid only when deﬁnition=UNDEX.
A Float specifying the reference magnitude.
referenceMagnitude
This argument is not valid when deﬁnition=CONWEP.
A Float specifying the time of detonation, given in total time.
detonationTime
This argument is valid only when deﬁnition=CONWEP.
A Float specifying the magnitude scale factor. The default value is 1.0.
magnitudeFactor
This argument is valid only when deﬁnition=CONWEP.
Return value
An IncidentWave object.
Exceptions
None.
setValues(...)
This method modiﬁes the IncidentWave object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the IncidentWave  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
894
IncidentWave object

Members
The IncidentWave object has members with the same names and descriptions as the arguments to the IncidentWave
method.
Corresponding analysis keywords
•
*INCIDENT WAVE INTERACTION
895
Abaqus Scripting Reference Guide
IncidentWave object

IncidentWaveProperty object
The IncidentWaveProperty object is an interaction property that deﬁnes the properties referred to by an IncidentWave
object.
The IncidentWaveProperty object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
IncidentWaveProperty(...)
This method creates an IncidentWaveProperty object.
Path
mdb.models[name].IncidentWaveProperty
Required arguments
A String specifying the interaction property repository key.
name
Optional arguments
A SymbolicConstant specifying the type of wave to be deﬁned. Possible values are PLANAR,
SPHERICAL, DIFFUSE, AIR_BLAST, and SURFACE_BLAST. The default value is
PLANAR.
deﬁnition
A SymbolicConstant specifying the spherical propagation model. Possible values are
ACOUSTIC, UNDEX_CHARGE, and GENERALIZED_DECAY. The default value is
ACOUSTIC.
propagationModel
This argument is valid only when deﬁnition=SPHERICAL.
A Float specifying the speed of sound in the ﬂuid.
soundSpeed
This argument is not valid when deﬁnition=AIR_BLAST or when
deﬁnition=SURFACE_BLAST.
A Float specifying the ﬂuid mass density.
ﬂuidDensity
This argument is not valid when deﬁnition=AIR_BLAST or when
deﬁnition=SURFACE_BLAST.
None or a Float specifying the ratio of speciﬁc heats for gas. The default value is None.
speciﬁcHeatRatio
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the acceleration due to gravity. The default value is None.
gravity
Abaqus Scripting Reference Guide
896
IncidentWaveProperty object

This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the atmospheric pressure. The default value is None.
atmosphericPressure
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the ﬂuid drag coefﬁcient. The default value is None.
dragCoefﬁcient
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
A Float specifying the ﬂuid drag exponent. The default value is 2.0.
dragExponent
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
A Boolean specifying whether or not to include wave effects in the ﬂuid and gas. The default
value is ON.
waveEffects
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the density of the charge material. The default value is None.
chargeDensity
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the mass of the charge material. The default value is None.
chargeMass
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the charge material constant K. The default value is None.
constantK1
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the charge material constant k. The default value is None.
constantK2
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the charge material constant A. The default value is None.
constantA
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the charge material constant B. The default value is None.
constantB
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the charge material constant Kc. The default value is None.
constantKc
897
Abaqus Scripting Reference Guide
IncidentWaveProperty object

This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
None or a Float specifying the time duration for the bubble simulation. The default value
is None.
duration
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
An Int specifying the maximum number of time steps for the bubble simulation. The default
value is 1500.
maximumSteps
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
A Float specifying the relative step size control parameter. The default value is 1×10–11.
relativeStepControl
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
A Float specifying the absolute step size control parameter. The default value is 1×10–11.
absoluteStepControl
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
A Float specifying the step size control exponent. The default value is 0.2.
stepControlExponent
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=UNDEX_CHARGE.
A Float specifying the constant A associated with the generalized decay propagation model.
The default value is 0.0.
genDecayA
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=GENERALIZED_DECAY.
A Float specifying the constant B associated with the generalized decay propagation model.
The default value is 0.0.
genDecayB
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=GENERALIZED_DECAY.
A Float specifying the constant C associated with the generalized decay propagation model.
The default value is 0.0.
genDecayC
This argument is valid only when deﬁnition=SPHERICAL and
propagationModel=GENERALIZED_DECAY.
An Int specifying the seed number (N) for the diffuse source calculation. N2 sources will be
used in the simulation.
seedNumber
This argument is valid only when deﬁnition=DIFFUSE.
A Float specifying the equivalent mass of TNT, in any preferred mass unit.
massTNT
Abaqus Scripting Reference Guide
898
IncidentWaveProperty object

This argument is valid only when deﬁnition=AIR_BLAST or deﬁnition=SURFACE_BLAST.
A Float specifying the multiplication factor to convert from the preferred mass unit to
kilograms. The default value is 1.0.
massFactor
This argument is valid only when deﬁnition=AIR_BLAST or deﬁnition=SURFACE_BLAST.
A Float specifying the multiplication factor to convert from the analysis length unit to meters.
The default value is 1.0.
lengthFactor
This argument is valid only when deﬁnition=AIR_BLAST or deﬁnition=SURFACE_BLAST.
A Float specifying the multiplication factor to convert from the analysis time unit to seconds.
The default value is 1.0.
timeFactor
This argument is valid only when deﬁnition=AIR_BLAST or deﬁnition=SURFACE_BLAST.
A Float specifying the multiplication factor to convert from the analysis pressure unit to
pascals. The default value is 1.0.
pressureFactor
This argument is valid only when deﬁnition=AIR_BLAST or deﬁnition=SURFACE_BLAST.
Return value
An IncidentWaveProperty object.
Exceptions
None.
setValues(...)
This method modiﬁes the IncidentWaveProperty object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the IncidentWaveProperty  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The IncidentWaveProperty object has members with the same names and descriptions as the arguments to the
IncidentWaveProperty  method.
899
Abaqus Scripting Reference Guide
IncidentWaveProperty object

Corresponding analysis keywords
•
*INCIDENT WAVE INTERACTION PROPERTY
•
*UNDEX CHARGE PROPERTY
•
*CONWEP CHARGE PROPERTY
Abaqus Scripting Reference Guide
900
IncidentWaveProperty object

IncidentWaveState object
The IncidentWaveState object stores the propagating data of an IncidentWave object in a step. One instance of this
object is created internally by the IncidentWave object for each step. The instance is also deleted internally by the
IncidentWave object.
The IncidentWaveState object has no constructor or methods.
The IncidentWaveState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The IncidentWaveState object has the following member:
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*INCIDENT WAVE INTERACTION
901
IncidentWaveState object

InitializationAssignment object
The InitializationAssignment object stores the contact initialization assignment deﬁnition for domain pairs in a
ContactStd or ContactExp object. The InitializationAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].initializationAssignments
changeValuesInStep(...)
This method allows modiﬁcation of contact initialization assignments to domain pairs already deﬁned in a given step.
Required arguments
A String specifying the name of the step in which the contact initialization assignments are
to be modiﬁed.
stepName
An Int specifying the position of the contact initialization assignment whose value is to be
modiﬁed.
index
A String specifying the value of the contact initialization to be assigned to the domain pair
whose index is referenced.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of contact initialization assignments to new domain pairs in a given step.
Required arguments
A String specifying the name of the step in which new contact initialization assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the initializations assigned to each surface pair. Each tuple contains
four entries (fourth entry is for Abaqus/Explicit and is optional):
assignments
•
A region object or the SymbolicConstant GLOBAL (for Abaqus/Standard only).
•
A region object or the SymbolicConstant SELF (for Abaqus/Standard only).
Abaqus Scripting Reference Guide
902
InitializationAssignment object

•
A String specifying a StdInitialization or ExpInitializationobject associated with this pair of
regions.
•
A String specifying a secondary surface type. This entry is applicable only if the ExpInitialization
object is deﬁned with overclosureType=CLEARANCE and adjustNodalCoords=True.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing contact initialization assignments from a ContactStd or ContactExp
object.
Required arguments
A sequence of Ints specifying the index of each contact initialization assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The InitializationAssignment object has no members.
Corresponding analysis keywords
•
*CONTACT INITIALIZATION ASSIGNMENT
903
Abaqus Scripting Reference Guide
InitializationAssignment object

InteractionProperty object
The InteractionProperty object is the abstract base type for other InteractionProperty objects. The InteractionProperty
object has no explicit constructor, members, or methods.
Access
import interaction
mdb.models[name].interactionProperties[name]
Members
The InteractionProperty object has no members.
Abaqus Scripting Reference Guide
904
InteractionProperty object

InteractionState object
The InteractionState object is the abstract base type for other InteractionState objects. The InteractionState object has
no explicit constructor. The members of the InteractionState object are common to all objects derived from
InteractionState.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The InteractionState object has the following member:
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
905
InteractionState object

MainSecondaryAssignment object
The MainSecondaryAssignment object stores the main-secondary assignment deﬁnition for surfaces in ContactExp
and ContactStd objects. The MainSecondaryAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].mainSecondaryAssignments
changeValuesInStep(...)
This method allows modiﬁcation of main-secondary assignments already deﬁned on surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the main-secondary assignments are to be
modiﬁed.
stepName
An Int specifying the position of the main-secondary assignment whose value is to be modiﬁed.
index
A SymbolicConstant specifying the value of the main-secondary role to be assigned to the
surface whose index is referenced. Possible values are MAIN, SECONDARY, and BALANCED.
The SymbolicConstant BALANCED can be speciﬁed only in an Abaqus/Standard analysis.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of main-secondary assignments to new surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the main-secondary assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the main-secondary assignments. Each tuple contains two entries:
assignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface to which the
main-secondary attribute is assigned.
Abaqus Scripting Reference Guide
906
MainSecondaryAssignment object

•
A SymbolicConstant specifying the overriding main-secondary value to be used for the ﬁrst
surface. Possible values of the SymbolicConstant are MAIN, SECONDARY, and BALANCED.
The SymbolicConstant BALANCED can be speciﬁed only in an Abaqus/Standard analysis.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing main-secondary assignments.
Required arguments
A sequence of Ints specifying the index of each main-secondary assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The MainSecondaryAssignment object has no members.
Corresponding analysis keywords
•
*CONTACT FORMULATION, TYPE=PURE MAIN-SECONDARY
•
*CONTACT FORMULATION, TYPE=MAIN SECONDARY ROLES
907
Abaqus Scripting Reference Guide
MainSecondaryAssignment object

Model object
The following commands operate on Model objects. For more information about the Model object, see Model object.
Access
import interaction
contactDetection(...)
This method uses contact detection to create SurfaceToSurfaceContactStd, SurfaceToSurfaceContactExp, and Tie
objects.
Required arguments
None.
Optional arguments
A String specifying the preﬁx used to generate repository keys. The default
value is "CP-"
name
A String specifying the name of the step in which the
SurfaceToSurfaceContactStd, SurfaceToSurfaceContactExp, and Tie objects
are created. The default value is "Initial."
createStepName
A SymbolicConstant MODEL or a sequence of Strings specifying the names
of instances to search. MODEL indicates the whole model is searched. The
default value is MODEL.
searchDomain
A SymbolicConstant specifying the default type of object to create. Possible
values are CONTACT, CONTACT_STANDARD, CONTACT_EXPLICIT,
defaultType
and TIE. If CONTACT is used, the behavior is determined by the type of
Step in the model. If an ExplicitDynamicsStep or
TempDisplacementDynamicsStep exists, then SurfaceToSurfaceContactExp
is created by default. Otherwise SurfaceToSurfaceContactStd is created by
default. The default value is CONTACT.
A String specifying the name of the ContactProperty object associated with
any interactions created.
interactionProperty
A Float specifying the maximum separation for considering two surfaces to
be candidates for contact, where separation is the maximum distance between
separationTolerance
the points of closest approach on the two surfaces. The default value is a
function of the model.
None or a Float specifying the angle for extending surface deﬁnitions to
include adjacent faces. The default value is 20.
extendByAngle
Abaqus Scripting Reference Guide
908
Model object

None or a Float specifying the angle for merging adjacent contact pairs that
lie within the angle. The default value is 20.
mergeWithinAngle
A Boolean specifying whether to include surface pairs within a single
instance. The default value is OFF.
searchSingleInstances
A Boolean specifying whether to assign a name to each surface found. The
default value is ON.
nameEachSurfaceFound
A Boolean specifying whether to create a surface that is the union of all
main surfaces found. The default value is OFF.
createUnionOfMainSurfaces
A Boolean specifying whether to create a surface that is the union of all
secondary surfaces found. The default value is OFF.
createUnionOfSecondarySurfaces
A Boolean specifying whether to create a surface that is the union of all
main and secondary surfaces found. The default value is OFF.
createUnionOfMainSecondarySurfaces
A Boolean specifying whether to include planar geometry. The default value
is ON.
includePlanar
A Boolean specifying whether to include cylindrical, spherical, and toric
geometry. The default value is ON.
includeCylindricalSphericalToric
A Boolean specifying whether to include spline-based geometry. The default
value is ON.
includeSplineBased
A Boolean specifying whether to include solid mesh entities. The default
value is ON.
includeMeshSolid
A Boolean specifying whether to include shell mesh entities. The default
value is ON.
includeMeshShell
A Boolean specifying whether to include mesh membrane entities. The
default value is OFF.
includeMeshMembrane
A Boolean specifying whether to include overclosed pairs. The default value
is ON.
includeOverclosed
A Boolean specifying whether to include opposing geometry surfaces that
do not overlap. The default value is OFF.
includeNonOverlapping
A SymbolicConstant USE_GEOMETRY or USE_MESH specifying whether
to locate pairs in meshed geometry using the geometric entities or mesh
entities. The default value is USE_GEOMETRY.
meshedGeometrySearchTechnique
A Boolean specifying whether to account for shell thickness and offset
during contact detection. The default value is ON.
useShellThickness
909
Abaqus Scripting Reference Guide
Model object

A SymbolicConstant specifying whether to use surface smoothing for
geometric surfaces in SurfaceToSurfaceContactStd interactions. Possible
values are NONE and AUTOMATIC. The default value isAUTOMATIC.
surfaceSmoothing
Return value
None
Exceptions
None.
getSurfaceSeparation(...)
This method returns a list of all possible contacts that can be created using the ContactDetection method.
Required arguments
None.
Optional arguments
The optional arguments to getSurfaceSeparation are the same as the arguments to the ContactDetection method,
with the exception of the createStepName, defaultType, interactionProperty, and nameEachSurfaceFound arguments.
Return value
Tuple of tuples, where each tuple holds information, to be used in contact creation as follows:
A string specifying the name of the main surface used in contact.
A string specifying the name of the secondary surface used in contact.
A ﬂoat specifying the separation distance between the main surface and the secondary surface.
A boolean specifying whether or not contact surfaces are overclosed.
Exceptions
None.
Abaqus Scripting Reference Guide
910
Model object

ModelChange object
The ModelChange object deﬁnes model change interactions for element removal and reactivation.
The ModelChange object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
ModelChange(...)
This method creates a ModelChange object.
Path
mdb.models[name].ModelChange
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the ModelChange object is
created.
createStepName
Optional arguments
A Boolean specifying whether this interaction is being used solely to indicate that model
change may be required in a subsequent restart analysis (either for elements or contact pairs).
The default value is OFF.
isRestart
A SymbolicConstant specifying the region selection type. This argument is valid only when
isRestart=False. Possible values are GEOMETRY, SKINS, STRINGERS, and ELEMENTS.
The default value is GEOMETRY.
regionType
A Region object specifying the elements to be removed or reactivated. This argument is valid
only when isRestart=False.
region
A Boolean specifying whether elements are being removed or reactivated. This argument is
valid only when isRestart=False. The default value is OFF.
activeInStep
A Boolean specifying whether stress/displacement elements are reactivated with strain. This
argument is valid only when isRestart=False and when activeInStep=True. The default value
is OFF.
includeStrain
Return value
A ModelChange object.
911
ModelChange object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ModelChange object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ModelChange  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing ModelChange object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A Boolean specifying whether elements are being removed or reactivated. This argument
is valid only when isRestart=False. The default value is OFF.
activeInStep
A Boolean specifying whether stress/displacement elements are reactivated with strain.
This argument is valid only when isRestart=False and when activeInStep=True. The default
value is OFF.
includeStrain
Return value
None.
Exceptions
None.
Members
The ModelChange object has members with the same names and descriptions as the arguments to the ModelChange
method.
Abaqus Scripting Reference Guide
912
ModelChange object

Corresponding analysis keywords
•
*MODEL CHANGE, TYPE=ELEMENT
•
*MODEL CHANGE, ACTIVATE
913
Abaqus Scripting Reference Guide
ModelChange object

NormalBehavior object
The NormalBehavior object speciﬁes normal behavior for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].normalBehavior
NormalBehavior(...)
This method creates a NormalBehavior object.
Path
mdb.models[name].interactionProperties[name].NormalBehavior
Required arguments
None.
Optional arguments
The SymbolicConstant DEFAULT or a Float specifying the contact stiffness. This
argument is valid for pressureOverclosure=LINEAR. This argument is also valid
contactStiffness
for pressureOverclosure=HARD when
constraintEnforcementMethod=AUGMENTED_LAGRANGE or PENALTY. A
value of DEFAULT is valid only when the later conditions are met. A value of
zero is equivalent to specifying DEFAULT. The default value is DEFAULT.
A SymbolicConstant specifying the pressure-overclosure relationship to be used.
Possible values are HARD, EXPONENTIAL, LINEAR, TABULAR, and
SCALE_FACTOR. The default value is HARD.
pressureOverclosure
A Boolean specifying whether to allow separation after contact. The default value
is ON.
allowSeparation
None or a Float specifying the maximum stiffness. If maxStiffness=None, there
is no upper limit. The default value is None.
maxStiffness
A sequence of sequences of Floats specifying the normal behavior properties. This
argument is valid only for pressureOverclosure=EXPONENTIAL or TABULAR.
The items in the table data are described below.
table
A SymbolicConstant specifying the method for enforcement of the contact
constraint. Possible values are DEFAULT, AUGMENTED_LAGRANGE,
PENALTY, and DIRECT. The default value is DEFAULT.
constraintEnforcementMethod
A Float specifying the overclosure measure (used to delineate the segments of the
pressure-overclosure curve) as a percentage of the minimum element size in the
contact region. The default value is 0.0.
overclosureFactor
Abaqus Scripting Reference Guide
914
NormalBehavior object

A Float specifying the overclosure measure (used to delineate the segments of the
pressure-overclosure curve) directly. The default value is 0.0.
overclosureMeasure
A Float specifying scale factor for the penalty stiffness or the geometric scaling
of the "base" stiffness. The default value is 1.0.
contactStiffnessScaleFactor
A Float specifying an additional scale factor for the "base" default contact stiffness.
The default value is 1.0.
initialStiffnessScaleFactor
A Float specifying the clearance at which the contact pressure is zero. The default
value is 0.0.
clearanceAtZeroContactPressure
A SymbolicConstant specifying the type of penalty stiffness to be deﬁned. This
argument is valid only when constraintEnforcementMethod=PENALTY. Possible
values are LINEAR and NONLINEAR. The default value is LINEAR.
stiffnessBehavior
A Float specifying the ratio of the initial stiffness divided by the ﬁnal stiffness.
This argument is valid only when stiffnessBehavior=NONLINEAR. Possible values
are 0 stiffnessRatio  1. The default value is 0.01.
stiffnessRatio
A Float specifying the ratio of the overclosure at the maximum stiffness divided
by the characteristic facet length. This argument is valid only when
stiffnessBehavior=NONLINEAR. The default value is 0.03.
upperQuadraticFactor
A Float specifying the ratio of the overclosure at the initial stiffness divided by the
overclosure at the maximum stiffness, both relative to the clearance at which the
lowerQuadraticRatio
contact pressure is zero. This argument is valid only when
stiffnessBehavior=NONLINEAR. Possible values are 0 stiffnessRatio  1. The
default value is 0.33333.
Table data
If pressureOverclosure=EXPONENTIAL, the table data specify the following:
•
Pressure at zero clearance, 
.
•
Clearance at which the contact pressure is zero, 
.
If pressureOverclosure=TABULAR, the table data specify the following:
•
Pressure.
•
Overclosure.
Return value
A NormalBehavior object.
Exceptions
None.
915
Abaqus Scripting Reference Guide
NormalBehavior object

setValues(...)
This method modiﬁes the NormalBehavior object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the NormalBehavior  method.
Return value
None.
Exceptions
None.
Members
The NormalBehavior object has members with the same names and descriptions as the arguments to the NormalBehavior
method.
Corresponding analysis keywords
•
*SURFACE BEHAVIOR
Abaqus Scripting Reference Guide
916
NormalBehavior object

PolarityAssignments object
The PolarityAssignments object stores the polarity assignment deﬁnition for surfaces in ContactExp objects. The
PolarityAssignments object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].polarityAssignments
changeValuesInStep(...)
This method allows you to modify polarity assignments already deﬁned on surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the main-secondary assignments are to be
modiﬁed.
stepName
An Int specifying the position of the polarity assignment whose value is to be modiﬁed.
index
A SymbolicConstant specifying the value of the polarity to be assigned to the surface whose
index is referenced. Possible values are SPOS, SNEG, and TWO_SIDED.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows you to add polarity assignments to new surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the polarity assignments are to be deﬁned.
stepName
A sequence of tuples specifying the polarity assignments. Each tuple contains two entries:
assignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface to which the
polarity attribute is assigned.
•
A SymbolicConstant specifying the overriding polarity value to be used for the ﬁrst surface.
Possible values of the SymbolicConstant are SPOS, SNEG, and TWO_SIDED.
917
PolarityAssignments object

Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing polarity assignments.
Required arguments
A sequence of Ints specifying the index of each polarity assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The PolarityAssignments object has no members.
Corresponding analysis keywords
•
*CONTACT FORMULATION, TYPE=POLARITY
Abaqus Scripting Reference Guide
918
PolarityAssignments object

PressurePenetration object
The PressurePenetration object deﬁnes pressure penetration loading simulated with surface-to-surface contact.
The PressurePenetration object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
PressurePenetration(...)
This method creates a PressurePenetration object.
Path
mdb.models[name].PressurePenetration
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the PressurePenetration object
is created.
createStepName
A String specifying the name of the Surface-to-surface contact (Standard) interaction.
contactInteraction
A RegionArray object specifying the points on the main surface that are exposed
to the ﬂuid.
mainPoints
A RegionArray object specifying the points on the secondary surface that are
exposed to the ﬂuid.
secondaryPoints
A tuple of Floats specifying the ﬂuid pressure magnitude. For steady state dynamic
analyses, a tuple of Complexes specifying the ﬂuid pressure magnitude.
penetrationPressure
A tuple of Floats specifying the critical contact pressure below which ﬂuid
penetration starts to occur.
criticalPressure
Optional arguments
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Float specifying the fraction of the current step time over which the ﬂuid pressure on newly
penetrated contact surface segments is ramped up to the current magnitude. The default value
is 0.001.
penetrationTime
919
PressurePenetration object

Return value
A PressurePenetration object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing PressurePenetration object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PressurePenetration method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing PressurePenetration object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A tuple of Floats specifying the ﬂuid pressure magnitude. For steady state dynamic analyses,
a tuple of Complexes specifying the ﬂuid pressure magnitude.
penetrationPressure
A tuple of Floats specifying the critical contact pressure below which ﬂuid penetration starts
to occur.
criticalPressure
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible
values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should
amplitude
be used if the amplitude is propagated from the previous analysis step. FREED should be
used if the load is changed to have no amplitude reference. You should provide the amplitude
argument only if it is valid for the speciﬁed step.
Abaqus Scripting Reference Guide
920
PressurePenetration object

A Float specifying the fraction of the current step time over which the ﬂuid pressure on
newly penetrated contact surface segments is ramped up to the current magnitude. The
default value is 0.001.
penetrationTime
Return value
None.
Exceptions
None.
Members
The PressurePenetration object has the following members:
A String specifying the repository key.
name
A String specifying the name of the step in which the PressurePenetration object
is created.
createStepName
A String specifying the name of the Surface-to-surface contact (Standard)
interaction.
contactInteraction
A RegionArray object specifying the points on the main surface that are exposed
to the ﬂuid.
mainPoints
A RegionArray object specifying the points on the secondary surface that are
exposed to the ﬂuid.
secondaryPoints
Corresponding analysis keywords
•
*PRESSURE PENETRATION
921
Abaqus Scripting Reference Guide
PressurePenetration object

PressurePenetrationState object
The PressurePenetrationState object stores the propagating data of a PressurePenetration object in a step. One instance
of this object is created internally by the PressurePenetration object for each step. The instance is also deleted internally
by the PressurePenetration object.
The PressurePenetrationState object has no constructor or methods.
The PressurePenetrationState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The PressurePenetrationState object has the following members:
A Float specifying the fraction of the current step time over which the ﬂuid pressure on
newly penetrated contact surface segments is ramped up to the current magnitude. The
default value is 10–3.
penetrationTime
A SymbolicConstant specifying the propagation state of the penetrationTime member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
penetrationTimeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the criticalPressure member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
criticalPressureState
A SymbolicConstant specifying the propagation state of the penetrationPressure member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
penetrationPressureState
A tuple of Floats specifying the ﬂuid pressure magnitude. For steady state dynamic
analyses, a tuple of Complexes specifying the ﬂuid pressure magnitude.
penetrationPressure
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
A tuple of Floats specifying the critical contact pressure below which ﬂuid penetration
starts to occur.
criticalPressure
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
Abaqus Scripting Reference Guide
922
PressurePenetrationState object

•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*PRESSURE PENETRATION
923
Abaqus Scripting Reference Guide
PressurePenetrationState object

Radiation object
The Radiation object speciﬁes radiation for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].radiation
Radiation(...)
This method creates a Radiation object.
Path
mdb.models[name].interactionProperties[name].Radiation
Required arguments
A Float specifying the emissivity of the main surface.
mainEmissivity
A Float specifying the emissivity of the secondary surface.
secondaryEmissivity
A sequence of sequences of Floats specifying the following:
table
•
Effective viewfactor, .
•
Gap clearance, .
Optional arguments
None.
Return value
A Radiation object.
Exceptions
None.
setValues(...)
This method modiﬁes the Radiation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Radiation method.
Abaqus Scripting Reference Guide
924
Radiation object

Return value
None.
Exceptions
None.
Members
The Radiation object has members with the same names and descriptions as the arguments to the Radiation method.
Corresponding analysis keywords
•
*GAP RADIATION
925
Abaqus Scripting Reference Guide
Radiation object

RadiationToAmbient object
The RadiationToAmbient object deﬁnes radiant heat transfer between a surface and its environment.
The RadiationToAmbient object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
RadiationToAmbient(...)
This method creates a RadiationToAmbient object.
Path
mdb.models[name].RadiationToAmbient
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the RadiationToAmbient object
is created.
createStepName
A Region object specifying the surface to which the radiation interaction is applied.
surface
A Float specifying the emissivity, .
emissivity
Optional arguments
A String specifying the name of the AnalyticalField object associated with this interaction.
The ﬁeld argument applies only when distributionType=ANALYTICAL_FIELD. The
default value is an empty string.
ﬁeld
A SymbolicConstant specifying how the radiation is distributed. This argument applies
only when radiationType=AMBIENT. Possible values are UNIFORM and
ANALYTICAL_FIELD. The default value is UNIFORM.
distributionType
A SymbolicConstant specifying whether to use the default surface radiation behavior, or
the cavity radiation approximation. Possible values are AMBIENT and CAVITY. The
default value is AMBIENT.
radiationType
A Float specifying the reference ambient temperature, 
. This argument applies only when
radiationType=AMBIENT. The default value is 0.0.
ambientTemperature
Abaqus Scripting Reference Guide
926
RadiationToAmbient object

A String specifying the name of the Amplitude object that gives the variation of the ambient
temperature with time.
ambientTemperatureAmp
Note:
Use None in an Abaqus/Standard analysis to specify that the reference ambient
temperature is applied immediately at the beginning of the step or linearly over the
step. Use None in an Abaqus/Explicit analysis to specify that the reference ambient
temperature is applied throughout the step. This argument applies only when
radiationType=AMBIENT.
Return value
A RadiationToAmbient object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing RadiationToAmbient object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RadiationToAmbient  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing RadiationToAmbient object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
The optional arguments to setValuesInStep are emissivity, ambientTemperature, and ambientTemperatureAmp
arguments.
927
Abaqus Scripting Reference Guide
RadiationToAmbient object

Return value
None.
Exceptions
None.
Members
The RadiationToAmbient object has members with the same names and descriptions as the arguments to the
RadiationToAmbient  method except the optional arguments to the setValuesInStep method.
Abaqus Scripting Reference Guide
928
RadiationToAmbient object

RadiationToAmbientState object
The RadiationToAmbientState object stores the propagating data for a RadiationToAmbient object. One instance of
this object is created internally by the RadiationToAmbient object for each step. The instance is also deleted internally
by the RadiationToAmbient object.
The RadiationToAmbientState object has no constructor or methods.
The RadiationToAmbientState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The RadiationToAmbientState object has the following members:
A Float specifying the ambient temperature.
ambientTemperature
A SymbolicConstant specifying the propagation state of the ambientTemperature
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
ambientTemperatureState
A SymbolicConstant specifying the propagation state of the ambientTemperatureAmp
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
ambientTemperatureAmpState
A Float specifying the emissivity.
emissivity
A SymbolicConstant specifying the propagation state of the emissivity member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
emissivityState
A String specifying the name of the Amplitude object that gives the variation of the
ambient temperature with time.
ambientTemperatureAmp
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
929
RadiationToAmbientState object

Corresponding analysis keywords
•
*SRADIATE
Abaqus Scripting Reference Guide
930
RadiationToAmbientState object

RegionPairs object
The RegionPairs object stores the domain pair deﬁnition for ContactExp and ContactStd objects. The RegionPairs
object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].excludedPairs
mdb.models[name].interactions[name].includedPairs
setValuesInStep(...)
This method allows addition and removal of domain pairs in a given step.
Required arguments
A String specifying the name of the step in which the region pair assignments are to be
modiﬁed.
stepName
Optional arguments
A Boolean specifying whether the contacting surface pair consists of all exterior faces and -- in an
Abaqus/Explicit analysis -- analytical rigid surfaces, shell edges, and beam segments in the model.
useAllstar
A sequence of pairs of region objects or SymbolicConstants that specify the surface pairs to add
to the included pairs of the ContactExp or ContactStd object in the given step. Possible values of
addPairs
the SymbolicConstants are GLOBAL and SELF. When used with a ContactExp object, the second
parameter of each pair can also be a string that references an Eulerian material surface.
A sequence of pairs of region objects or SymbolicConstants that specify the surface pairs to remove
from the included pairs of the ContactExp or ContactStd object in the given step. Possible values
removePairs
of the SymbolicConstants are GLOBAL and SELF. When used with a ContactExp object, the
second parameter of each pair can also be a string that references an Eulerian material surface.
Return value
None.
Exceptions
None.
Members
The RegionPairs object has no members.
Corresponding analysis keywords
•
*CONTACT INCLUSIONS
•
*CONTACT EXCLUSIONS
931
RegionPairs object

SelfContactExp object
The SelfContactExp object deﬁnes self-contact during an Abaqus/Explicit analysis.
The SelfContactExp object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
SelfContactExp(...)
This method creates a SelfContactExp object.
Path
mdb.models[name].SelfContactExp
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the SelfContactExp object is
created.
createStepName
A Region object specifying the surface where self-contact is deﬁned.
surface
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
Optional arguments
A SymbolicConstant specifying the mechanical constraint formulation. Possible values
are KINEMATIC and PENALTY. The default value is KINEMATIC.
mechanicalConstraint
A String specifying the name of the ContactControl object associated with this
interaction. An empty string indicates that the default contact controls will be used. The
default value is an empty string.
contactControls
Return value
A SelfContactExp object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SelfContactExp object in the step where it is created.
Abaqus Scripting Reference Guide
932
SelfContactExp object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SelfContactExp  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SelfContactExp object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
A String specifying the name of the ContactControl object associated with this
interaction. An empty string indicates that the default contact controls will be used.
The default value is an empty string.
contactControls
Return value
None.
Exceptions
None.
Members
The SelfContactExp object has members with the same names and descriptions as the arguments to the SelfContactExp
method except the optional arguments to the setValuesInStep  method.
933
Abaqus Scripting Reference Guide
SelfContactExp object

SelfContactExpState object
The SelfContactExpState object stores the propagating data for a SelfContactExp object. One instance of this object
is created internally by the SelfContactExp object for each step. The instance is also deleted internally by the
SelfContactExp object.
The SelfContactExpState object has no constructor or methods.
The SelfContactExpState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The SelfContactExpState object has the following members:
A SymbolicConstant specifying the propagation state of the interactionProperty member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
interactionPropertyState
A SymbolicConstant specifying the propagation state of the contactControls member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
contactControlsState
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
A String specifying the name of the ContactControl object associated with this
interaction.
contactControls
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CONTACT CONTROLS
•
*CONTACT PAIR
Abaqus Scripting Reference Guide
934
SelfContactExpState object

•
*MODEL CHANGE, TYPE=CONTACT PAIR
935
Abaqus Scripting Reference Guide
SelfContactExpState object

SelfContactStd object
The SelfContactStd object deﬁnes self-contact during an Abaqus/Standard analysis.
The SelfContactStd object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
SelfContactStd(...)
This method creates a SelfContactStd object.
Path
mdb.models[name].SelfContactStd
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the SelfContactStd object is
created.
createStepName
A Region object specifying the surface where self-contact is deﬁned.
surface
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
Optional arguments
A SymbolicConstant specifying the discretization method. Possible values are
NODE_TO_SURFACE and SURFACE_TO_SURFACE. The default value is
SURFACE_TO_SURFACE.
enforcement
A Boolean specifying whether shell/membrane element thickness is considered. The default
value is ON.
thickness
This argument in valid only when enforcement=SURFACE_TO_SURFACE.
A Float specifying the degree of smoothing used for deformable or rigid main surfaces involved
when enforcement=NODE_TO_SURFACE. The value given must lie between 0.0 and 0.5.
The default value is 0.2.
smooth
A String specifying the name of the ContactControl object associated with this interaction.
An empty string indicates that the default contact controls will be used. The default value is
an empty string.
contactControls
Abaqus Scripting Reference Guide
936
SelfContactStd object

Return value
A SelfContactStd object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SelfContactStd object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SelfContactStd method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data of an existing SelfContactStd object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
A String specifying the name of the ContactControl object associated with this
interaction. An empty string indicates that the default contact controls will be used.
The default value is an empty string.
contactControls
Return value
None.
Exceptions
None.
937
Abaqus Scripting Reference Guide
SelfContactStd object

Members
The SelfContactStd object has members with the same names and descriptions as the arguments to the SelfContactStd
method except the optional arguments to the setValuesInStep method.
In addition, the SelfContactStd object has the following members:
A SymbolicConstant specifying the choice of contact tracking algorithm. The STATE tracking
algorithm uses only normal projections and is speciﬁed by using ONE_CONFIG. The PATH
contactTracking
tracking algorithm uses crossing and normal projections and is speciﬁed by using
TWO_CONFIG. Possible values are ONE_CONFIG and TWO_CONFIG. The default value
is TWO_CONFIG.
This argument is valid only when enforcement=SURFACE_TO_SURFACE.
A SymbolicConstant specifying the manner in which mid-face constraints are employed.
Possible values are SELECTIVE, NEVER, and ALWAYS. The default value is SELECTIVE.
supplementaryContact
This argument is valid only when enforcement=NODE_TO_SURFACE.
Abaqus Scripting Reference Guide
938
SelfContactStd object

SelfContactStdState object
The SelfContactStdState object stores the propagating data for a SelfContactStd object. One instance of this object is
created internally by the SelfContactStd object for each step. The instance is also deleted internally by the SelfContactStd
object.
The SelfContactStdState object has no constructor or methods.
The SelfContactStdState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The SelfContactStdState object has the following members:
A SymbolicConstant specifying the propagation state of the interactionProperty member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
interactionPropertyState
A SymbolicConstant specifying the propagation state of the contactControls member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
contactControlsState
A String specifying the ContactProperty object associated with this interaction.
interactionProperty
A String specifying the name of the ContactControl object associated with this
interaction.
contactControls
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CONTACT CONTROLS
•
*CONTACT PAIR
•
*MODEL CHANGE, TYPE=CONTACT PAIR
939
SelfContactStdState object

SlidingFormulationAssignment object
The SlidingFormulationAssignment object stores the sliding formulation assignment deﬁnition for surfaces in ContactStd
objects. The SlidingFormulationAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].slidingFormulationAssignments
changeValuesInStep(...)
This method allows you to modify sliding formulation assignments already deﬁned on surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the sliding formulation assignments are to
be modiﬁed.
stepName
An Int specifying the position of the sliding formulation assignment whose value is to be
modiﬁed.
index
A SymbolicConstant specifying the value of the smoothness of the surface-to-surface
formulation on sliding to be assigned to the surface whose index is referenced. Possible values
are NONE and SMALL_SLIDING.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows you to add sliding formulation assignments to new surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the sliding formulation assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the sliding formulation assignments. Each tuple contains two
entries:
assignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface to which the
sliding formulation attribute is assigned.
Abaqus Scripting Reference Guide
940
SlidingFormulationAssignment object

•
A SymbolicConstant specifying the overriding the smoothness value to be used for the ﬁrst
surface. Possible values of the SymbolicConstant are NONE and SMALL_SLIDING.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing sliding formulation assignments.
Required arguments
A sequence of Ints specifying the index of each sliding formulation assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SlidingFormulationAssignment object has no members.
Corresponding analysis keywords
•
*CONTACT FORMULATION, TYPE=SLIDING FORMULATION
941
Abaqus Scripting Reference Guide
SlidingFormulationAssignment object

slidingTransitionAssignments object
The SlidingTransitionAssignment object stores the sliding transition assignment deﬁnition for surfaces in ContactStd
objects. The SlidingTransitionAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].slidingTransitionAssignments
changeValuesInStep(...)
This method allows you to modify sliding transition assignments already deﬁned on surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the sliding transition assignments are to be
modiﬁed.
stepName
An Int specifying the position of the sliding transition assignment whose value is to be modiﬁed.
index
A SymbolicConstant specifying the value of the smoothness of the surface-to-surface formulation
on sliding to be assigned to the surface whose index is referenced. Possible values are
value
ELEMENT_ORDER_SMOOTHING, LINEAR_SMOOTHING, and
QUADRATIC_SMOOTHING.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows you to add sliding transition assignments to new surface pairs in a given step.
Required arguments
A String specifying the name of the step in which the sliding transition assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the sliding transition assignments. Each tuple contains two
entries:
assignments
•
A region object or the SymbolicConstant GLOBAL specifying the surface to which the sliding
transition attribute is assigned.
Abaqus Scripting Reference Guide
942
slidingTransitionAssignments object

•
A SymbolicConstant specifying the overriding the smoothness value to be used for the ﬁrst
surface. Possible values of the SymbolicConstant are ELEMENT_ORDER_SMOOTHING,
LINEAR_SMOOTHING, and QUADRATIC_SMOOTHING.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing sliding transition assignments.
Required arguments
A sequence of Ints specifying the index of each sliding transition assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SlidingTransitionAssignment object has no members.
Corresponding analysis keywords
•
*CONTACT FORMULATION, TYPE=SLIDING TRANSITION
943
Abaqus Scripting Reference Guide
slidingTransitionAssignments object

SmoothingAssignment object
The SmoothingAssignment object stores the surface smoothing assignment deﬁnition for surfaces in ContactExp and
ContactStd objects. The SmoothingAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].smoothingAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface smoothing assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface smoothing assignments are to be
modiﬁed.
stepName
An Int specifying the position of the surface smoothing assignment whose value is to be modiﬁed.
index
A tuple specifying the value of the surface smoothing assignments for the surface whose index
is referenced. Each tuple contains one entry:
value
•
A SymbolicConstant specifying the surface smoothing value to be used for the surface. Possible
values of the SymbolicConstant are NONE, REVOLUTION, SPHERICAL, and TOROIDAL.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of surface smoothing assignments to new surfaces in a given step.
Required arguments
A String specifying the name of the step in which new surface smoothing assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the surface smoothing assignments. Each tuple contains two
entries:
assignments
Abaqus Scripting Reference Guide
944
SmoothingAssignment object

•
A region object specifying the surface to which the smoothing is assigned.
•
A SymbolicConstant specifying the surface smoothing value to be used for the surface.
Possible values of the SymbolicConstant are NONE, REVOLUTION, SPHERICAL, and
TOROIDAL.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface smoothing assignments from ContactExp and ContactStd
objects.
Required arguments
A sequence of Ints specifying the index of each surface smoothing assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SmoothingAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=GEOMETRIC CORRECTION
945
Abaqus Scripting Reference Guide
SmoothingAssignment object

StabilizationAssignment object
The StabilizationAssignment object stores the contact stabilization assignment deﬁnition for domain pairs in a ContactStd
object. The StabilizationAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].stabilizationAssignments
changeValuesInStep(...)
This method allows modiﬁcation of contact stabilization assignments to domain pairs already deﬁned in a given step.
Required arguments
A String specifying the name of the step in which the contact stabilization assignments are
to be modiﬁed.
stepName
An Int specifying the position of the contact stabilization assignment whose value is to be
modiﬁed.
index
A String specifying the value of the contact stabilization to be assigned to the domain pair
whose index is referenced.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of contact stabilization assignments to new domain pairs in a given step.
Required arguments
A String specifying the name of the step in which new contact stabilization assignments are
to be deﬁned.
stepName
A sequence of tuples specifying the stabilizations assigned to each surface pair. Each tuple
contains three entries:
assignments
•
A region object or the SymbolicConstant GLOBAL.
•
A region object or the SymbolicConstant SELF.
Abaqus Scripting Reference Guide
946
StabilizationAssignment object

•
A String specifying a StdStabilization object associated with this pair of regions.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing contact stabilization assignments from a ContactStd object.
Required arguments
A sequence of Ints specifying the index of each contact stabilization assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The StabilizationAssignment object has no members.
Corresponding analysis keywords
•
*CONTACT STABILIZATION
947
Abaqus Scripting Reference Guide
StabilizationAssignment object

StdContactControl object
The StdContactControl object is used in Abaqus/Standard analyses to specify optional solution controls for problems
involving contact between bodies.
The StdContactControl object is derived from the ContactControl object.
Access
import interaction
mdb.models[name].contactControls[name]
StdContactControl(...)
This method creates an StdContactControl object.
Path
mdb.models[name].StdContactControl
Required arguments
A String specifying the contact controls repository key.
name
Optional arguments
A Float specifying the factor by which Abaqus/Standard will scale the default
penalty stiffness to obtain the stiffnesses used for the contact pairs. Only contact
stiffnessScaleFactor
interactions deﬁned with augmented Lagrangian surface behavior will be affected
by this argument. The default value is 1.0.
A SymbolicConstant specifying whether the allowable penetration is an absolute
value or a value relative to the characteristic contact surface face dimension. Only
penetrationTolChoice
contact interactions deﬁned with augmented Lagrangian surface behavior will be
affected by this argument. Possible values are RELATIVE and ABSOLUTE. The
default value is RELATIVE.
A Float specifying the ratio of the allowable penetration to the characteristic contact
surface face dimension. The ﬂoat values represent percentages (e.g.: 0.001=0.1%).
relativePenetrationTolerance
Only contact interactions deﬁned with augmented Lagrangian surface behavior
will be affected by this argument. The default value is 10–3.
The relativePenetrationTolerance argument applies only when
penetrationTolChoice=RELATIVE. The relativePenetrationTolerance and
absolutePenetrationTolerance arguments are mutually exclusive.
None or a Float specifying the allowable penetration. Only contact interactions
deﬁned with augmented Lagrangian surface behavior will be affected by this
absolutePenetrationTolerance
argument. The absolutePenetrationTolerance argument applies only when
penetrationTolChoice=ABSOLUTE. The relativePenetrationTolerance and
absolutePenetrationTolerance arguments are mutually exclusive. The default value
is None.
Abaqus Scripting Reference Guide
948
StdContactControl object

A SymbolicConstant specifying when the application of friction occurs. Possible
values are:
frictionOnset
•
IMMEDIATE, specifying the friction is included in the increment when contact
occurs.
•
DELAYED, specifying the application of friction is delayed until the increment
after contact occurs.
The default value is IMMEDIATE.
A Boolean specifying whether Abaqus/Standard should automatically compute an
overclosure tolerance and a separation tolerance to prevent chattering in contact.
The default value is OFF.
automaticTolerances
The automaticTolerances argument cannot be used with the maxchp, perrmx, and
uerrmx arguments.
An Int specifying the maximum number of points that are permitted to violate
contact conditions in any increment. The default value is 0.
maxchp
Either the perrmx or the uerrmx argument must be speciﬁed in conjunction with
the maxchp argument.
A Float specifying the maximum value of tensile stress (tensile force in GAP- or
ITT-type contact elements) allowed to be transmitted at a contact point. The default
value is 0.0.
perrmx
The perrmx argument must be speciﬁed in conjunction with the maxchp argument.
A Float specifying the maximum overclosure distance allowed at a secondary node
that is considered to be open. The default value is 0.0.
uerrmx
The uerrmx argument must be speciﬁed in conjunction with the maxchp argument.
A SymbolicConstant specifying whether or not viscous damping will be speciﬁed,
and if so, how it will be speciﬁed. Possible values are NONE, AUTOMATIC, and
COEFFICIENT. The default value is NONE.
stabilizeChoice
A Float specifying the value of the damping factor. This value is multiplied by the
calculated damping coefﬁcient. The default value is 1.0.
dampFactor
This argument is only valid when stabilizeChoice=AUTOMATIC.
A Float specifying the damping coefﬁcient. The default value is 0.0.
dampCoef
This argument is only valid when stabilizeChoice=COEFFICIENT.
A Float specifying the tangential stabilization as a fraction of the normal
stabilization (damping). The default value is 1.0.
tangFraction
This argument is valid only if stabilizeChoice = AUTOMATIC or COEFFICIENT.
A Float specifying the fraction of the damping that remains at the end of the step.
The default value is 0.0.
eosFraction
949
Abaqus Scripting Reference Guide
StdContactControl object

This argument is valid only if stabilizeChoice = AUTOMATIC or COEFFICIENT.
A SymbolicConstant specifying how the zero-damping clearance will be speciﬁed.
Possible values are COMPUTE and SPECIFY. The default value is COMPUTE.
zeroDampingChoice
This argument is valid only if stabilizeChoice = AUTOMATIC or COEFFICIENT.
None or a Float specifying the clearance at which damping becomes zero. This
argument is valid only when zeroDampingChoice=SPECIFY. This argument is
zeroDamping
valid only if stabilizeChoice = AUTOMATIC or COEFFICIENT. The default value
is None.
A SymbolicConstant specifying whether to enforce the contact constraints with
Lagrange multipliers. Possible values are DEFAULT, ENFORCEMENT_OFF,
and ENFORCEMENT_ON. The default value is DEFAULT.
enforceWithLagrangeMultipliers
Return value
A StdContactControl object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the StdContactControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StdContactControl method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The StdContactControl object has members with the same names and descriptions as the arguments to the
StdContactControl method.
Corresponding analysis keywords
•
*CONTACT CONTROLS
Abaqus Scripting Reference Guide
950
StdContactControl object

StdInitialization object
The StdInitialization object is used in conjunction with ContactStd in Abaqus/Standard analyses to specify contact
initialization data.
The StdInitialization object is derived from the ContactInitialization object.
Access
import interaction
mdb.models[name].contactInitializations[name]
StdInitialization(...)
This method creates a StdInitialization object.
Path
mdb.models[name].StdInitialization
Required arguments
A String specifying the contact initialization repository key.
name
Optional arguments
A SymbolicConstant specifying the type of overclosure to be deﬁned. Possible values
are ADJUST, INTERFERENCE, and CLEARANCE. The default value is ADJUST.
overclosureType
None or a Float specifying the interference distance. This argument is valid only when
overclosureType=INTERFERENCE. The default value is None.
interferenceDistance
None or a Float specifying the initial clearance distance. This argument is valid only
when overclosureType=CLEARANCE, and must be speciﬁed in that case. The default
value is None.
clearanceDistance
None or a Float specifying the distance tolerance within which initial openings will
undergo strain-free adjustments. This argument is not valid when
openingTolerance
overclosureType=INTERFERENCE unless a value has been speciﬁed for
interferenceDistance. The default value is None.
None or a Float specifying the distance tolerance within which initial overclosures will
undergo strain-free adjustments.. The default value is None.
overclosureTolerance
Return value
A StdInitialization object.
Exceptions
RangeError.
951
StdInitialization object

setValues(...)
This method modiﬁes the StdInitialization object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StdInitialization  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The StdInitialization object has members with the same names and descriptions as the arguments to the StdInitialization
method.
Corresponding analysis keywords
•
*CONTACT INITIALIZATION DATA
Abaqus Scripting Reference Guide
952
StdInitialization object

StdStabilization object
The StdStabilization object is used in conjunction with ContactStd in Abaqus/Standard analyses to specify contact
stabilization.
The StdStabilization object is derived from the ContactStabilization object.
Access
import interaction
mdb.models[name].contactStabilizations[name]
StdStabilization(...)
This method creates a StdStabilization object.
Path
mdb.models[name].StdStabilization
Required arguments
A String specifying the contact stabilization repository key.
name
Optional arguments
None or a Float specifying the clearance distance at which the stabilization becomes zero.
The default value is None.
zeroDistance
A Float specifying the factor by which the analysis will reduce the contact stabilization
coefﬁcient per increment. The default value is 0.1.
reductionFactor
A Float specifying the factor by which the analysis will scale the contact stabilization
coefﬁcient. The default value is 1.0.
scaleFactor
A Float specifying the factor that scales the contact stabilization coefﬁcient in the tangential
direction. The default value is 0.0.
tangentialFactor
A String specifying the name of the Amplitude object that deﬁnes a time-dependent scale
factor for contact stabilization over the step. The default value is an empty string.
amplitude
A Boolean specifying whether to cancel carryover effects from contact stabilization
speciﬁcations involving nondefault amplitudes that appeared in previous steps. The default
value is OFF.
reset
Return value
A StdStabilization object.
953
StdStabilization object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the StdStabilization object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StdStabilization  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The StdStabilization object has members with the same names and descriptions as the arguments to the StdStabilization
method.
Corresponding analysis keywords
•
*CONTACT STABILIZATION
Abaqus Scripting Reference Guide
954
StdStabilization object

StdXplCosimulation object
The StdXplCosimulation object deﬁnes co-simulation behavior between Abaqus/Standard and Abaqus/Explicit.
The StdXplCosimulation object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
StdXplCosimulation(...)
This method creates a StdXplCosimulation object.
Path
mdb.models[name].StdXplCosimulation
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the StdXplCosimulation object is
created.
createStepName
A Region object specifying the import and export region upon which the co-simulation
exchanges data with the coupled analysis program.
region
Optional arguments
A SymbolicConstant specifying whether the analysis programs use the same time increments
or one is allowed to use more time increments than the other before exchanging data. Possible
incrementation
values are ALLOW_SUBCYCLING and LOCKSTEP. The default value is
ALLOW_SUBCYCLING.
A Float specifying the size of the increments to be used by Abaqus/Standard and
Abaqus/Explicit. The default value is 0.0.
stepSize
A SymbolicConstant specifying whether the increment size is the analysis default or a
supplied variable. Possible values are DEFAULT and SPECIFIED. The default value is
DEFAULT.
stepSizeDeﬁnition
Return value
A StdXplCosimulation object.
Exceptions
None.
955
StdXplCosimulation object

setValues(...)
This method modiﬁes the StdXplCosimulation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StdXplCosimulation  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
Members
The StdXplCosimulation object has members with the same names and descriptions as the arguments to the
StdXplCosimulation  method.
Abaqus Scripting Reference Guide
956
StdXplCosimulation object

StdXplCosimulationState object
The StdXplCosimulationState object stores the propagating data for a StdXplCosimulation object. One instance of this
object is created internally by the StdXplCosimulation object for each step. The instance is also deleted internally by
the StdXplCosimulation object.
The StdXplCosimulationState object has no constructor or methods.
The StdXplCosimulationState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The StdXplCosimulationState object has the following member:
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CO-SIMULATION,
•
*CO-SIMULATION REGION,
957
StdXplCosimulationState object

SurfaceBeamSmoothingAssignment object
The SurfaceBeamSmoothingAssignment object stores the surface beam smoothing assignment deﬁnition for surfaces
in ContactStd objects. The SurfaceBeamSmoothingAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].surfaceBeamSmoothingAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface beam smoothing assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface beam smoothing assignments
are to be modiﬁed.
stepName
An Int specifying the position of the surface beam smoothing assignment whose value is to be
modiﬁed.
index
A tuple specifying the value of the surface beam smoothing assignments for the surface whose
index is referenced. Each tuple contains one entry:
value
•
A Float specifying the surface beam smoothing value to be used for the surface.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of surface beam smoothing assignments to new surfaces in a given step.
Required arguments
A String specifying the name of the step in which new surface beam smoothing assignments
are to be deﬁned.
stepName
A sequence of tuples specifying the surface beam smoothing assignments. Each tuple contains
two entries:
assignments
Abaqus Scripting Reference Guide
958
SurfaceBeamSmoothingAssignment object

•
A region object specifying the surface to which the smoothing is assigned.
•
A Float specifying the surface smoothing value to be used for the surface.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface beam smoothing assignments from ContactStd objects.
Required arguments
A sequence of Ints specifying the index of each surface beam smoothing assignment to
delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SurfaceBeamSmoothingAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=BEAM SMOOTHING
959
Abaqus Scripting Reference Guide
SurfaceBeamSmoothingAssignment object

SurfaceCrushTriggerAssignment object
The SurfaceCrushTriggerAssignment object stores the surface crush trigger assignment deﬁnition for surfaces in
ContactExp objects. The SurfaceCrushTriggerAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].surfaceCrushTriggerAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface crush trigger assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface crush trigger assignments are to be
modiﬁed.
stepName
An Int specifying the position of the surface crush trigger assignment whose value is to be modiﬁed.
index
A tuple specifying the value of the surface crush trigger assignments for the surface whose index
is referenced. Each tuple contains three entries:
value
•
A SymbolicConstant specifying the trigger option to be used for the surface. Possible values
of the SymbolicConstant are TRIGGER, NO_TRIGGER, or NO_CRUSH.
•
A Float specifying the crush stress value to be used for the surface.
•
A Float specifying the crush initiation angle value to be used for the surface.
•
A Float specifying the crush continuation angle value to be used for the surface.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of surface crush trigger assignments to new surfaces in a given step.
Required arguments
A String specifying the name of the step in which new surface crush trigger assignments are to be
deﬁned.
stepName
Abaqus Scripting Reference Guide
960
SurfaceCrushTriggerAssignment object

A sequence of tuples specifying the surface crush trigger assignments. Each tuple contains four
entries:
assignments
•
A region or a material object or the SymbolicConstant GLOBAL specifying the surface to
which the feature angle is assigned.
•
A SymbolicConstant specifying the trigger option to be used for the surface. Possible values
of the SymbolicConstant are TRIGGER, NO_TRIGGER, or NO_CRUSH.
•
A Float specifying the crush stress value to be used for the surface.
•
A Float specifying the crush initiation angle value to be used for the surface.
•
A Float specifying the crush continuation angle value to be used for the surface.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface crush trigger assignments from a ContactExp object.
Required arguments
A sequence of Ints specifying the index of each surface crush trigger assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SurfaceCrushTriggerAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=CRUSH TRIGGER
961
Abaqus Scripting Reference Guide
SurfaceCrushTriggerAssignment object

SurfaceFeatureAssignment object
The SurfaceFeatureAssignment object stores the surface feature angle assignment deﬁnition for surfaces in ContactExp
or ContactStd objects. The SurfaceFeatureAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].surfaceFeatureAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface feature angle assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface feature assignments are to be modiﬁed.
stepName
An Int specifying the position of the surface feature angle assignment whose value is to be modiﬁed.
index
A tuple specifying the value of the surface feature assignments for the surface whose index is referenced.
Each tuple contains two entries for Abaqus/Standard and three entries for Abaqus/Explicit:
value
•
A Float or a SymbolicConstant specifying the overriding surface primary feature angle value to be
used for the surface. Possible values of the SymbolicConstant are PERIMETER, ALL, PICKED,
or NONE. The ALL and PICKED values cannot be speciﬁed with the GLOBAL region constant
and can be used only in the Abaqus/Explicit version of general contact.
•
A Float or a SymbolicConstant specifying the overriding surface secondary feature angle value to
be used for the surface. Possible values of the SymbolicConstant are PERIMETER, ALL, PICKED,
or NONE. The ALL and PICKED values cannot be speciﬁed with the GLOBAL region constant
and can be used only in the Abaqus/Explicit version of general contact.
•
A SymbolicConstant ORIGINAL or CURRENT specifying the conﬁguration.
Optional arguments
A Boolean specifying whether the dynamic feature edge criterion should be activated
for the contact surface in an Abaqus/Explicit analysis. This argument can be set to ON
(default) or OFF.
useDynFeatEdge
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows the addition of surface feature angle assignments to new surfaces in a given step.
Abaqus Scripting Reference Guide
962
SurfaceFeatureAssignment object

Required arguments
A String specifying the name of the step in which new surface feature angle assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the surface feature angle assignments. Each tuple contains three entries
for Abaqus/Standard and four entries for Abaqus/Explicit:
assignments
•
A region or a material object or the SymbolicConstant GLOBAL specifying the surface to which
the feature angle is assigned.
•
A Float or a SymbolicConstant specifying the overriding surface primary feature angle value to be
used for the surface. Possible values of the SymbolicConstant are PERIMETER, ALL, PICKED,
or NONE. The ALL and PICKED values cannot be speciﬁed with the GLOBAL region constant
and can be used only in the Abaqus/Explicit version of general contact.
•
A Float or a SymbolicConstant specifying the overriding surface secondary feature angle value to
be used for the surface. Possible values of the SymbolicConstant are PERIMETER, ALL, PICKED,
or NONE. The ALL and PICKED values cannot be speciﬁed with the GLOBAL region constant
and can be used only in the Abaqus/Explicit version of general contact.
•
A SymbolicConstant ORIGINAL or CURRENT specifying the conﬁguration.
Optional arguments
A Boolean specifying whether the dynamic feature edge criterion should be activated
for the contact surface in an Abaqus/Explicit analysis. This argument can be set to ON
(default) or OFF.
useDynFeatEdge
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface feature angle assignments from a ContactExp object.
Required arguments
A sequence of Ints specifying the index of each surface feature angle assignment to delete.
indices
Optional arguments
None.
Return value
None.
963
Abaqus Scripting Reference Guide
SurfaceFeatureAssignment object

Exceptions
None.
Members
The SurfaceFeatureAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=FEATURE EDGE CRITERIA
Abaqus Scripting Reference Guide
964
SurfaceFeatureAssignment object

SurfaceFrictionAssignment object
The SurfaceFrictionAssignment object stores the surface friction assignment deﬁnition for surfaces in ContactExp
objects. The SurfaceFrictionAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].surfaceFrictionAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface friction assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface friction assignments are to be
modiﬁed.
stepName
An Int specifying the position of the surface friction assignment whose value is to be modiﬁed.
index
A tuple specifying the value of the surface friction assignments for the surface whose index
is referenced. Each tuple contains:
value
•
A Float specifying the overriding friction coefﬁcient value to be used in the contact
deﬁnition.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of surface friction assignments to new surfaces in a given step.
Required arguments
A String specifying the name of the step in which new surface friction assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the surface friction assignments. Each tuple contains two
entries:
assignments
965
SurfaceFrictionAssignment object

•
A region or a material object or the SymbolicConstant GLOBAL specifying the surface
to which the friction coefﬁcient is assigned.
•
A Float specifying the overriding friction coefﬁcient to be used in the contact deﬁnition.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface friction assignments.
Required arguments
A sequence of Ints specifying the index of each surface friction assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SurfaceFrictionAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=FRICTION
Abaqus Scripting Reference Guide
966
SurfaceFrictionAssignment object

SurfaceOffsetAssignment object
The SurfaceOffsetAssignment object stores the surface offset fraction assignment deﬁnition for surfaces in ContactExp
and ContactStd objects. The SurfaceOffsetAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].surfaceOffsetAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface offset fraction assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface offset assignments are to be modiﬁed.
stepName
An Int specifying the position of the surface offset fraction assignment whose value is to be
modiﬁed.
index
A tuple specifying the value of the surface offset assignments for the surface whose index is
referenced. Each tuple contains one entry:
value
•
A Float or a SymbolicConstant specifying the surface offset fraction value to be used for the
surface. Possible values of the SymbolicConstant are ORIGINAL, SPOS, and SNEG.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of surface offset fraction assignments to new surfaces in a given step.
Required arguments
A String specifying the name of the step in which new surface offset fraction assignments are to
be deﬁned.
stepName
A sequence of tuples specifying the surface offset fraction assignments. Each tuple contains two
entries:
assignments
967
SurfaceOffsetAssignment object

•
A region or a material object or the SymbolicConstant GLOBAL specifying the surface to
which the offset fraction is assigned.
•
A Float or a SymbolicConstant specifying the surface offset fraction value to be used for the
surface. Possible values of the SymbolicConstant are ORIGINAL, SPOS, and SNEG.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface offset fraction assignments.
Required arguments
A sequence of Ints specifying the index of each surface offset fraction assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SurfaceOffsetAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=OFFSET FRACTION
Abaqus Scripting Reference Guide
968
SurfaceOffsetAssignment object

SurfaceThicknessAssignment object
The SurfaceThicknessAssignment object stores the surface thickness assignment deﬁnition for surfaces in ContactExp
and ContactStd objects. The SurfaceThicknessAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].surfaceThicknessAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface thickness assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface thickness assignments are to be
modiﬁed.
stepName
An Int specifying the position of the surface thickness assignment whose value is to be modiﬁed.
index
A tuple specifying the value of the surface thickness assignments for the surface whose index is
referenced. Each tuple contains two entries:
value
•
A Float or a SymbolicConstant specifying the overriding thickness value to be used in the contact
deﬁnition. Possible values of the SymbolicConstant are ORIGINAL and THINNING. The
SymbolicConstant THINNING can be speciﬁed only in an Abaqus/Explicit analysis.
•
A Float specifying a scale factor that multiplies the thickness value speciﬁed in the second entry.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of surface thickness assignments to new surfaces in a given step.
Required arguments
A String specifying the name of the step in which new surface thickness assignments are to be
deﬁned.
stepName
A sequence of tuples specifying the surface thickness assignments. Each tuple contains three entries:
assignments
969
SurfaceThicknessAssignment object

•
A region or a material object or the SymbolicConstant GLOBAL specifying the surface to which
the thickness is assigned.
•
A Float or a SymbolicConstant specifying the overriding thickness value to be used in the contact
deﬁnition. Possible values of the SymbolicConstant are ORIGINAL and THINNING. The
SymbolicConstant THINNING can be speciﬁed only in an Abaqus/Explicit analysis.
•
A Float specifying a scale factor that multiplies the thickness value speciﬁed in the second entry.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface thickness assignments.
Required arguments
A sequence of Ints specifying the index of each surface thickness assignment to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SurfaceThicknessAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=THICKNESS
Abaqus Scripting Reference Guide
970
SurfaceThicknessAssignment object

SurfaceToSurfaceContactExp object
The SurfaceToSurfaceContactExp object deﬁnes surface-to-surface contact during an Abaqus/Explicit analysis.
The SurfaceToSurfaceContactExp object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
SurfaceToSurfaceContactExp(...)
This method creates a SurfaceToSurfaceContactExp object.
Path
mdb.models[name].SurfaceToSurfaceContactExp
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the SurfaceToSurfaceContactExp
object is created.
createStepName
A Region object specifying the main surface.
main
A Region object specifying the secondary surface.
secondary
A SymbolicConstant specifying the contact formulation. Possible values are FINITE
and SMALL.
sliding
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
Optional arguments
A SymbolicConstant specifying the mechanical constraint formulation. Possible values
are KINEMATIC and PENALTY. The default value is KINEMATIC.
mechanicalConstraint
A SymbolicConstant specifying the weighting for node-to-face contact. Possible values
are DEFAULT and SPECIFIED. The default value is DEFAULT.
weightingFactorType
A Float specifying the weighting factor for the contact surfaces when
weightingFactorType=SPECIFIED. The default value is 0.0.
weightingFactor
A String specifying the name of the ContactControl object associated with this
interaction. An empty string indicates that the default contact controls will be used.
The default value is an empty string.
contactControls
971
SurfaceToSurfaceContactExp object

A SymbolicConstant or a Float specifying the initial clearance at regions of contact.
Possible values are OMIT and COMPUTED. The default value is OMIT.
initialClearance
None or a sequence of Floats specifying the half thread angle used for bolt clearance.
The default value is None.
halfThreadAngle
None or a sequence of Floats specifying the pitch used for bolt clearance. The default
value is None.
pitch
The SymbolicConstant COMPUTED or a Float specifying the major diameter of the
bolt used for bolt clearance. The default value is COMPUTED.
majorBoltDiameter
The SymbolicConstant COMPUTED or a Float specifying the mean diameter of the
bolt used for bolt clearance. The default value is COMPUTED.
meanBoltDiameter
A DatumAxis object specifying the orientation of the bolt hole when specifying bolt
clearance.
datumAxis
A Boolean specifying whether to reverse the bolt clearance direction given by the
datum axis. The default value is OFF.
useReverseDatumAxis
A Region object specifying the contact region for which clearance is speciﬁed.
clearanceRegion
Return value
A SurfaceToSurfaceContactExp object.
Exceptions
None.
swapSurfaces()
This method switches the main and secondary surfaces of a surface-to-surface contact pair. This command is valid
only during the step in which the interaction is created.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SurfaceToSurfaceContactExp object in the step where it is created.
Abaqus Scripting Reference Guide
972
SurfaceToSurfaceContactExp object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceToSurfaceContactExp method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceToSurfaceContactExp object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
A String specifying the name of the ContactControl object associated with this
interaction. An empty string indicates that the default contact controls will be used.
The default value is an empty string.
contactControls
Return value
None.
Exceptions
None.
Members
The SurfaceToSurfaceContactExp object has members with the same names and descriptions as the arguments to the
SurfaceToSurfaceContactExp method except the optional arguments to the setValuesInStep method.
973
Abaqus Scripting Reference Guide
SurfaceToSurfaceContactExp object

SurfaceToSurfaceContactStd object
The SurfaceToSurfaceContactStd object deﬁnes surface-to-surface contact during an Abaqus/Standard analysis.
The SurfaceToSurfaceContactStd object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
SurfaceToSurfaceContactStd(...)
This method creates a SurfaceToSurfaceContactStd object.
Path
mdb.models[name].SurfaceToSurfaceContactStd
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the SurfaceToSurfaceContactStd
object is created.
createStepName
A Region object specifying the main surface.
main
A Region object specifying the secondary surface.
secondary
A SymbolicConstant specifying the contact formulation. Possible values are FINITE
and SMALL.
sliding
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
Optional arguments
A SymbolicConstant specifying the type of time-dependent allowable interference for
contact pairs and contact elements. Possible values are:
interferenceType
•
NONE, specifying no allowable contact interference.
•
SHRINK_FIT.
•
UNIFORM.
The default value is NONE.
A Float specifying the maximum overclosure distance allowed. This argument applies
only when interferenceType=UNIFORM. The default value is 0.0.
overclosure
Abaqus Scripting Reference Guide
974
SurfaceToSurfaceContactStd object

A SymbolicConstant specifying the method used to determine the interference direction.
Possible values are COMPUTED and DIRECTION_COSINE. The default value is
COMPUTED.
interferenceDirectionType
A sequence of three Floats specifying the following:
direction
•
-direction cosine of the interference direction vector.
•
-direction cosine of the interference direction vector.
•
-direction cosine of the interference direction vector.
This argument is required only when interferenceDirectionType=DIRECTION_COSINE.
A String specifying the name of the amplitude curve that deﬁnes the magnitude of the
prescribed interference during the step. Use None to specify that the prescribed interference
amplitude
is applied immediately at the beginning of the step and ramped down to zero linearly over
the step.
A Float specifying the degree of smoothing used for deformable or rigid main surfaces
involved when enforcement=NODE_TO_SURFACE. The value given must lie between
0.0 and 0.5. The default value is 0.2.
smooth
A Float specifying the distance by which a secondary node must penetrate the main surface
before Abaqus/Standard abandons the current increment and tries again with a smaller
increment. The default value is 0.0.
hcrit
A Float specifying a fraction of the end segment or facet edge length by which the main
surface is to be extended to avoid numerical round-off errors associated with contact
modeling. The value given must lie between 0.0 and 0.2. The default value is 0.1.
extensionZone
A SymbolicConstant specifying the adjust method. Possible values are NONE,
OVERCLOSED, TOLERANCE, and SET. The default value is NONE.
adjustMethod
A Float specifying the adjust tolerance. The default value is 0.0.
adjustTolerance
A Region object specifying the Set object to which the adjustment is to be applied.
adjustSet
A SymbolicConstant specifying the discretization method. Possible values are
NODE_TO_SURFACE and SURFACE_TO_SURFACE. The default value is
SURFACE_TO_SURFACE.
enforcement
A Boolean specifying whether shell/membrane element thickness is considered. The
default value is ON.
thickness
This argument is not valid when sliding=FINITE and enforcement=NODE_TO_SURFACE.
A String specifying the name of the ContactControl object associated with this interaction.
The empty string indicates that the default contact controls will be used. The default value
is an empty string.
contactControls
975
Abaqus Scripting Reference Guide
SurfaceToSurfaceContactStd object

A Boolean specifying whether the surfaces are to be "tied" together for the duration of
the simulation. The default value is OFF.
tied
A SymbolicConstant or a Float specifying the initial clearance at regions of contact.
Possible values are OMIT and COMPUTED. The default value is OMIT.
initialClearance
None or a sequence of Floats specifying the half thread angle used for bolt clearance.
The default value is None.
halfThreadAngle
None or a sequence of Floats specifying the pitch used for bolt clearance. The default
value is None.
pitch
The SymbolicConstant COMPUTED or a Float specifying the major diameter of the bolt
used for bolt clearance. The default value is COMPUTED.
majorBoltDiameter
The SymbolicConstant COMPUTED or a Float specifying the mean diameter of the bolt
used for bolt clearance. The default value is COMPUTED.
meanBoltDiameter
A DatumAxis object specifying the orientation of the bolt hole when specifying bolt
clearance.
datumAxis
A Boolean specifying whether to reverse the bolt clearance direction given by the datum
axis. The default value is OFF.
useReverseDatumAxis
A Region object specifying the contact region for which clearance is speciﬁed.
clearanceRegion
A SymbolicConstant specifying whether to use surface smoothing for geometric surfaces
in SurfaceToSurfaceContactStd interactions. Possible values are AUTOMATIC and
NONE. The default value is NONE.
surfaceSmoothing
A Region object specifying the secondary node sub-set for bonding, used only when the
contact property CohesiveBehavior option speciﬁes use.
bondingSet
A SymbolicConstant specifying the bolt handedness formulation. Possible values are
RIGHT and LEFT. The default value is RIGHT.
handedness
A SymbolicConstant specifying the bolt normal adjustment formulation for all secondary
nodes. Possible values are UNIFORM AXIAL COMPONENT and LOCATION
DEPENDENT. The default value is UNIFORM AXIAL COMPONENT.
normalAdjustment
Return value
A SurfaceToSurfaceContactStd object.
Exceptions
None.
Abaqus Scripting Reference Guide
976
SurfaceToSurfaceContactStd object

swapSurfaces()
This method switches the main and secondary surfaces of a surface-to-surface contact pair. This command is valid
only for the step in which the interaction is created.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SurfaceToSurfaceContactStd object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceToSurfaceContactStd method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceToSurfaceContactStd object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A String specifying the name of the ContactProperty object associated with this interaction.
interactionProperty
A SymbolicConstant specifying the type of time-dependent allowable interference for
contact pairs and contact elements. Possible values are:
interferenceType
977
Abaqus Scripting Reference Guide
SurfaceToSurfaceContactStd object

•
NONE, specifying no allowable contact interference.
•
SHRINK_FIT.
•
UNIFORM.
The default value is NONE.
A Float specifying the maximum overclosure distance allowed. This argument applies
only when interferenceType=UNIFORM. The default value is 0.0.
overclosure
A SymbolicConstant specifying the method used to determine the interference direction.
Possible values are COMPUTED and DIRECTION_COSINE. The default value is
COMPUTED.
interferenceDirectionType
A sequence of three Floats specifying the following:
direction
•
-direction cosine of the interference direction vector.
•
-direction cosine of the interference direction vector.
•
-direction cosine of the interference direction vector.
This argument is required only when interferenceDirectionType=DIRECTION_COSINE.
A String specifying the name of the amplitude curve that deﬁnes the magnitude of the
prescribed interference during the step. Use None to specify that the prescribed interference
amplitude
is applied immediately at the beginning of the step and ramped down to zero linearly over
the step.
A String specifying the name of the ContactControl object associated with this interaction.
The empty string indicates that the default contact controls will be used. The default value
is an empty string.
contactControls
Return value
None.
Exceptions
None.
Members
The SurfaceToSurfaceContactStd object has members with the same names and descriptions as the arguments to the
SurfaceToSurfaceContactStd method except the optional arguments to the setValuesInStep method.
In addition, the SurfaceToSurfaceContactStd object has the following members:
A SymbolicConstant specifying the choice of contact tracking algorithm. The STATE tracking
algorithm uses only normal projections and is speciﬁed by using ONE_CONFIG. The PATH
contactTracking
tracking algorithm uses crossing and normal projections and is speciﬁed by using
TWO_CONFIG. Possible values are ONE_CONFIG and TWO_CONFIG. The default value
is TWO_CONFIG.
Abaqus Scripting Reference Guide
978
SurfaceToSurfaceContactStd object

This argument is valid only when sliding=FINITE and
enforcement=SURFACE_TO_SURFACE.
A SymbolicConstant specifying the manner in which midface constraints are employed.
Possible values are SELECTIVE, NEVER, and ALWAYS. The default value is SELECTIVE.
supplementaryContact
This argument is not valid when sliding=FINITE and enforcement=SURFACE_TO_SURFACE.
979
Abaqus Scripting Reference Guide
SurfaceToSurfaceContactStd object

SurfaceToSurfaceExpState object
The SurfaceToSurfaceExpState object stores the propagating data for a SurfaceToSurfaceContactExp object. One
instance of this object is created internally by the SurfaceToSurfaceContactExp object for each step. The instance is
also deleted internally by the SurfaceToSurfaceContactExp object.
The SurfaceToSurfaceExpState object has no constructor or methods.
The SurfaceToSurfaceExpState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The SurfaceToSurfaceExpState object has the following members:
A SymbolicConstant specifying the propagation state of the interactionProperty member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
interactionPropertyState
A SymbolicConstant specifying the propagation state of the contactControls member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
contactControlsState
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
A String specifying the name of the ContactControl object associated with this
interaction.
contactControls
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CONTACT CONTROLS
•
*CONTACT PAIR
Abaqus Scripting Reference Guide
980
SurfaceToSurfaceExpState object

SurfaceToSurfaceStdState object
The SurfaceToSurfaceStdState object stores the propagating data for a SurfaceToSurfaceContactStd object. One instance
of this object is created internally by the SurfaceToSurfaceContactStd object for each step. The instance is also deleted
internally by the SurfaceToSurfaceContactStd object.
The SurfaceToSurfaceStdState object has no constructor or methods.
The SurfaceToSurfaceStdState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The SurfaceToSurfaceStdState object has the following members:
A SymbolicConstant specifying the propagation state of the interactionProperty
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
interactionPropertyState
A SymbolicConstant specifying the interference type. Possible values are NONE,
SHRINK_FIT, and UNIFORM.
interferenceType
A SymbolicConstant specifying the propagation state of the interferenceType member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
interferenceTypeState
A Float specifying the allowable overclosure.
overclosure
A SymbolicConstant specifying the propagation state of the overclosure member.
Possible values are COMPUTED and DIRECTION_COSINE.
overclosureState
A SymbolicConstant specifying the interference direction type. Possible values are
COMPUTED and DIRECTION_COSINE.
interferenceDirectionType
A SymbolicConstant specifying the propagation state of the interferenceDirectionType
member. Possible values are UNSET, SET, UNCHANGED, and FREED.
interferenceDirectionTypeState
A SymbolicConstant specifying the propagation state of the direction member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
directionState
A SymbolicConstant specifying the propagation state of the amplitude member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the contactControls member.
Possible values are UNSET, SET, UNCHANGED, and FREED.
contactControlsState
A String specifying the name of the ContactProperty object associated with this
interaction.
interactionProperty
981
SurfaceToSurfaceStdState object

A String specifying the name of the Amplitude object that deﬁnes the magnitude of
the prescribed interference during the step.
amplitude
A String specifying the name of the ContactControl object associated with this
interaction.
contactControls
A tuple of three Floats specifying the following:
direction
•
-direction cosine of the interference direction vector.
•
-direction cosine of the interference direction vector.
•
-direction cosine of the interference direction vector.
A SymbolicConstant specifying the propagation state of the InteractionState object.
Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*CONTACT CONTROLS
•
*CONTACT PAIR
•
*CONTACT INTERFERENCE
Abaqus Scripting Reference Guide
982
SurfaceToSurfaceStdState object

SurfaceVertexCriteriaAssignment object
The SurfaceVertexCriteriaAssignment object stores the surface vertex criteria assignment deﬁnition for surfaces in
ContactStd objects. The SurfaceVertexCriteriaAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].surfacevertexCriteriaAssignments
changeValuesInStep(...)
This method allows modiﬁcation of surface vertex criteria assignments already deﬁned on surfaces in a given step.
Required arguments
A String specifying the name of the step in which the surface vertex criteria assignments are to
be modiﬁed.
stepName
An Int specifying the position of the surface vertex criteria assignment whose value is to be
modiﬁed.
index
A tuple specifying the value of the surface vertex criteria assignments for the surface whose
index is referenced. Each tuple contains:
value
•
A Float or a SymbolicConstant specifying the vertex criteria value to be used for the surface.
Possible values of the SymbolicConstant are ALL_VERTICES or NO_VERTICES.
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows addition of surface vertex criteria assignments to new surfaces in a given step.
Required arguments
A String specifying the name of the step in which new surface vertex criteria assignments are
to be deﬁned.
stepName
A sequence of tuples specifying the surface vertex criteria assignments. Each tuple contains two
entries:
assignments
983
SurfaceVertexCriteriaAssignment object

•
A region or a material object or the SymbolicConstant GLOBAL specifying the surface to
which the vertex criteria is assigned.
•
A Float or a SymbolicConstant specifying the vertex criteria value to be used for the surface.
Possible values of the SymbolicConstant are ALL_VERTICES or NO_VERTICES.
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing surface vertex criteria assignments from a ContactStd object.
Required arguments
A sequence of Ints specifying the index of each surface vertex criteria assignment to
delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The SurfaceVertexCriteriaAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT, PROPERTY=VERTEX CRITERIA
Abaqus Scripting Reference Guide
984
SurfaceVertexCriteriaAssignment object

ThermalConductance object
The ThermalConductance object speciﬁes thermal conductance for a contact interaction property.
Access
import interaction
mdb.models[name].interactionProperties[name].thermalConductance
ThermalConductance(...)
This method creates a ThermalConductance object.
Path
mdb.models[name].interactionProperties[name].ThermalConductance
Required arguments
None.
Optional arguments
A SymbolicConstant specifying how the thermal conductance is deﬁned. Possible
values are TABULAR and USER_DEFINED. The default value is TABULAR.
deﬁnition
A Boolean specifying whether to use clearance-dependent data. The default value
is ON.
clearanceDependency
A Boolean specifying whether to use pressure-dependent data. The default value
is OFF.
pressureDependency
A Boolean specifying whether to use temperature-dependent data with clearance
dependency. The default value is OFF.
temperatureDependencyC
A Boolean specifying whether to use mass-ﬂow-rate-dependent data with clearance
dependency. The default value is OFF.
massFlowRateDependencyC
An Int specifying the number of ﬁeld variables to use with clearance dependency.
The default value is 0.
dependenciesC
A sequence of sequences of Floats specifying clearance dependency data. The
items in the table data are described below.
clearanceDepTable
A Boolean specifying whether to use temperature-dependent data with pressure
dependency. The default value is OFF.
temperatureDependencyP
A Boolean specifying whether to use mass-ﬂow-rate-dependent data with pressure
dependency. The default value is OFF.
massFlowRateDependencyP
985
ThermalConductance object

An Int specifying the number of ﬁeld variables to use with pressure dependency.
The default value is 0.
dependenciesP
A sequence of sequences of Floats specifying pressure dependency data. The
items in the table data are described below.
pressureDepTable
Table data
The clearanceDepTable data specify the following:
•
Conductivity.
•
Clearance.
•
Temperature, if the data depend on temperature.
•
Mass ﬂow rate, if the data depend on mass ﬂow rate.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
The pressureDepTable data specify the following:
•
Conductivity.
•
Pressure.
•
Temperature, if the data depend on temperature.
•
Mass ﬂow rate, if the data depend on mass ﬂow rate.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ThermalConductance object.
Exceptions
None.
setValues(...)
This method modiﬁes the ThermalConductance object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ThermalConductance  method.
Abaqus Scripting Reference Guide
986
ThermalConductance object

Return value
None.
Exceptions
None.
Members
The ThermalConductance object has members with the same names and descriptions as the arguments to the
ThermalConductance  method.
Corresponding analysis keywords
•
*GAP CONDUCTANCE
987
Abaqus Scripting Reference Guide
ThermalConductance object

WearProperty object
The WearProperty object deﬁnes a wear interaction property.
The WearProperty object is derived from the InteractionProperty object.
Access
import interaction
mdb.models[name].interactionProperties[name]
WearProperty(...)
This method creates a WearProperty object.
Path
mdb.models[name].WearProperty
Required arguments
A String specifying the interaction property repository key.
name
Optional arguments
A Boolean specifying whether the Archard's wear equation depends explicitly
on the friction coefﬁcient. The default value is OFF.
fricCoefDependency
A Boolean specifying whether the wear coefﬁcient is dimensionless. The default
value is OFF.
unitlessWearCoefDependency
A Float specifying the value of the reference stress. This parameter is required
if unitlessWearCoefDependency is ON.
referenceStress
A Boolean specifying whether the wear coefﬁcient is dependent on the wear
distance. The default value is OFF.
surfaceWearDistanceDependency
A Boolean specifying whether the wear coefﬁcient is dependent on the surface
temperature. The default value is OFF.
temperatureDependency
A Boolean specifying whether the wear coefﬁcient is dependent on the contact
pressure. The default value is OFF.
contactPressureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Return value
A WearProperty object.
Abaqus Scripting Reference Guide
988
WearProperty object

Exceptions
None.
Members
The WearProperty object can have the following members:
Corresponding analysis keywords
•
*SURFACE INTERACTION
989
Abaqus Scripting Reference Guide
WearProperty object

WearSurfacePropertyAssignment object
The WearSurfacePropertyAssignment object stores the wear surface property assignment deﬁnition for domain pairs
in ContactExp and ContactStd objects. The WearSurfacePropertyAssignment object has no constructor or members.
Access
import interaction
mdb.models[name].interactions[name].wearSurfacePropertyAssignments
changeValuesInStep(...)
This method allows modiﬁcation of contact property assignments to domain pairs already deﬁned in a given step.
Required arguments
A String specifying the name of the step in which the contact property assignments are to
be modiﬁed.
stepName
An Int specifying the position of the contact property assignment whose value is to be
modiﬁed.
index
A String specifying the value of the wear surface property to be assigned to the domain pair
whose index is referenced.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
appendInStep(...)
This method allows the addition of wear surface property assignments to new domain pairs in a given step.
Required arguments
A String specifying the name of the step in which new contact property assignments are to
be deﬁned.
stepName
A sequence of tuples specifying the properties assigned to each surface pair. Each tuple
contains two entries:
assignments
•
A region or a material object or the SymbolicConstant GLOBAL.
•
A String specifying a WearProperty object associated with this pair of regions.
Abaqus Scripting Reference Guide
990
WearSurfacePropertyAssignment object

Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
The delete method allows you to delete existing contact property assignments.
Required arguments
A sequence of Ints specifying the index of each contact property assignment to delete. The
indices and surfPair arguments are mutually exclusive.
indices
A sequence of tuples specifying the surface pair of each contact property assignment to delete.
Each tuple contains two entries:
surfPair
•
A region or a material object or the SymbolicConstant GLOBAL.
surfPair and indices arguments are mutually exclusive.
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The WearSurfacePropertyAssignment object has no members.
Corresponding analysis keywords
•
*SURFACE PROPERTY ASSIGNMENT
991
Abaqus Scripting Reference Guide
WearSurfacePropertyAssignment object

XFEMCrackGrowth object
The XFEMCrackGrowth object deﬁnes the enrichment activation state for an XFEMCrack.
The XFEMCrackGrowth object is derived from the Interaction object.
Access
import interaction
mdb.models[name].interactions[name]
XFEMCrackGrowth(...)
This method creates an XFEMCrackGrowth object.
Path
mdb.models[name].XFEMCrackGrowth
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the XFEMCrackGrowth object
is created.
createStepName
A String specifying the XFEMCrack object associated with this interaction.
crackName
Optional arguments
A Boolean specifying whether the crack is allowed to grow (propagate) during this
analysis step. The default value is ON.
allowGrowth
Return value
A XFEMCrackGrowth object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing XFEMCrackGrowth object in the step where it is created.
Required arguments
None.
Abaqus Scripting Reference Guide
992
XFEMCrackGrowth object

Optional arguments
The optional arguments to setValues are the same as the arguments to the XFEMCrackGrowth  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing XFEMCrackGrowth object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the interaction is modiﬁed.
stepName
Optional arguments
A Boolean specifying whether the crack is allowed to grow (propagate) during this
analysis step. The default value is ON.
allowGrowth
Return value
None.
Exceptions
None.
Members
The XFEMCrackGrowth object has members with the same names and descriptions as the arguments to the
XFEMCrackGrowth  method.
Corresponding analysis keywords
•
*ENRICHMENT ACTIVATION
993
Abaqus Scripting Reference Guide
XFEMCrackGrowth object

XFEMCrackGrowthState object
The XFEMCrackGrowthState object stores the propagating data of an XFEMCrackGrowth object in a step. One instance
of this object is created internally by the XFEMCrackGrowth object for each step. The instance is also deleted internally
by the XFEMCrackGrowth object.
The XFEMCrackGrowthState object has no constructor or methods.
The XFEMCrackGrowthState object is derived from the InteractionState object.
Access
import interaction
mdb.models[name].steps[name].interactionStates[name]
Members
The XFEMCrackGrowthState object has the following members:
A Boolean specifying whether the crack is allowed to grow (propagate) during this analysis
step. The default value is ON.
allowGrowth
A SymbolicConstant specifying the propagation state of the allowGrowth member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
allowGrowthState
A SymbolicConstant specifying the propagation state of the InteractionState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*ENRICHMENT ACTIVATION
Abaqus Scripting Reference Guide
994
XFEMCrackGrowthState object

Job commands
The Job commands provide methods to create, modify, submit, and control jobs.
In this section:
•
Job object
•
JobFromInputFile object
•
Message object
•
ModelJob object
•
Queue object
•
Coexecution object
•
OptimizationProcess object
995

Job object
The Job object is the abstract base type for other Job objects. The Job object has no explicit constructor. The methods
and members of the Job object are common to all objects derived from Job.
Access
import job
mdb.coexecutions[name].jobs[name]
mdb.jobs[name]
kill()
This method ends the analysis of a job.
Arguments
None.
Return value
None.
Exceptions
None.
submit(...)
This method submits a job for analysis.
Required arguments
None.
Optional arguments
A Boolean specifying whether to perform consistency checking for the job. The default
value is ON. It is not recommended that you turn off the consistency checking unless you
are absolutely sure the model is consistent.
consistencyChecking
A Boolean specifying whether to run the job as a datacheck analysis. The default value is
False. The datacheckJob and continueJob arguments cannot both be True.
datacheckJob
A Boolean specifying whether to run the job as a continuation analysis. The default value
is False. The datacheckJob and continueJob arguments cannot both be True.
continueJob
Return value
None.
Abaqus Scripting Reference Guide
996
Job object

Exceptions
None.
waitForCompletion()
This method interrupts the execution of the script until the end of the analysis. If you call the waitForCompletion
method and the status member is neither SUBMITTED nor RUNNING, Abaqus assumes that the analysis has either
completed or stopped and returns immediately.
Arguments
None.
Return value
None.
Exceptions
None.
clearMessages
This method clears messages and sets the status to NONE.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Job object can have the following members:
A String specifying the name of the new job. The name must be a valid Abaqus/CAE
object name.
name
A SymbolicConstant specifying the type of job. Possible values are ANALYSIS,
SYNTAXCHECK, RECOVER, and RESTART. The default value is ANALYSIS.
type
If the object has the type JobFromInputFile, type=RESTART is not available.
An Int specifying the number of hours to wait before submitting the job. This argument
is ignored if queue is set. The default value is 0.
waitHours
This argument works in conjunction with waitMinutes. waitHours and atTime are
mutually exclusive.
997
Abaqus Scripting Reference Guide
Job object

An Int specifying the number of minutes to wait before submitting the job. This argument
is ignored if queue is set. The default value is 0.
waitMinutes
This argument works in conjunction with waitHours. waitMinutes and atTime are
mutually exclusive.
An Int specifying the number of CPUs to use for this analysis if parallel processing is
available. Possible values are numCpus  0. The default value is 1.
numCpus
An Int specifying the amount of memory available to an Abaqus analysis. The value
should be expressed in the units supplied in memoryUnits. The default value is 90.
memory
A SymbolicConstant specifying the units for the amount of memory used in an Abaqus
analysis. Possible values are PERCENTAGE, MEGA_BYTES, and GIGA_BYTES.
The default value is PERCENTAGE.
memoryUnits
A Boolean specifying whether to retrieve the recommended memory settings from the
last datacheck or analysis run and use those values in subsequent submissions. The
default value is ON.
getMemoryFromAnalysis
A SymbolicConstant specifying whether to use the double precision version of
Abaqus/Explicit. Possible values are SINGLE, FORCE_SINGLE, DOUBLE,
explicitPrecision
DOUBLE_CONSTRAINT_ONLY, and DOUBLE_PLUS_PACK. The default value is
SINGLE.
A SymbolicConstant specifying the precision of the nodal output written to the output
database. Possible values are SINGLE and FULL. The default value is SINGLE.
nodalOutputPrecision
An Int specifying the number of domains for parallel execution in Abaqus/Explicit.
When using more than 1 numCpus, numDomains must be a multiple of numCpus. The
default value is 1.
numDomains
A Boolean specifying whether to activate dyanmic load balancing for jobs running on
multiple processors with multiple domains in Abaqus/Explicit. The default value is OFF.
activateLoadBalancing
A SymbolicConstant specifying whether an analysis is decomposed into threads or into
multiple processes that communicate through a message passing interface (MPI). Possible
values are DEFAULT, THREADS,MPI, and HYBRID. The default value is DEFAULT.
multiprocessingMode
An Int specifying the number of threads per MPI process to use for this analysis if parallel
processing is available. Possible values are numThreadsPerMpiProcess  0. The default
value is 1.
numThreadsPerMpiProcess
A SymbolicConstant specifying whether the job will be analyzed by Abaqus/Standard
or Abaqus/Explicit. Possible values are STANDARD, EXPLICIT, and UNKNOWN.
analysis
If the object has the type JobFromInputFile, analysis=UNKNOWN.
Abaqus Scripting Reference Guide
998
Job object

A SymbolicConstant specifying the status of the analysis. Possible values are
SUBMITTED, RUNNING, ABORTED, TERMINATED, COMPLETED,
CHECK_RUNNING, and CHECK_COMPLETED.
status
If the message member is empty, status is set to NONE.
A String specifying the name of the queue to which to submit the job. The default value
is an empty string.
queue
Note:
You can use the queue argument when creating a Job object on a Windows
workstation; however, remote queues are available only on Linux platforms.
A String specifying the time at which to submit the job. If queue is empty, the string
syntax must be valid for the Linuxat command. If queue is set, the syntax must be valid
according to the system administrator. The default value is an empty string.
atTime
Note:
You can use the atTime argument when creating a Job object on a Windows
workstation; however, the at command is available only on Linux platforms.
A String specifying the location of the scratch directory. The default value is an empty
string.
scratch
A String specifying the ﬁle containing the user's subroutine deﬁnitions. The default
value is an empty string.
userSubroutine
A MessageArray object specifying the messages received during an analysis.
messages
A tuple of Strings specifying the environment variables and their values.
environment
A SymbolicConstant specifying the type of license type being used in the case of the
DSLS SimUnit license model. Possible values are DEFAULT, TOKEN, and CREDIT.
The default value is DEFAULT.
licenseType
If the license model is not the DSLS SimUnit, the licenseType is not available.
Corresponding analysis keywords
•
*HEADING
•
*PREPRINT
999
Abaqus Scripting Reference Guide
Job object

JobFromInputFile object
The JobFromInputFile object deﬁnes a Job object that analyzes a model contained in an input ﬁle.
The JobFromInputFile object is derived from the Job object.
Access
import job
mdb.jobs[name]
JobFromInputFile(...)
This method creates an analysis job using an input ﬁle for the model deﬁnition.
Path
mdb.JobFromInputFile
Required arguments
A String specifying the name of the new job. The name must be a valid Abaqus/CAE object
name.
name
A String specifying the input ﬁle to read. Possible values are any valid ﬁle name. If the
.inp extension is not included in the value of the argument, the system will append it for
the user.
inputFileName
Optional arguments
A SymbolicConstant specifying the type of job. Possible values are ANALYSIS,
SYNTAXCHECK, and RECOVER. The default value is ANALYSIS.
type
For theJobFromInputFile object, type=RESTART is not currently supported.
A String specifying the name of the queue to which to submit the job. The default value is
an empty string.
queue
Note: You can use the queue argument when creating a Job object on a Windows
workstation; however, remote queues are available only on Linux platforms.
An Int specifying the number of hours to wait before submitting the job. This argument is
ignored if queue is set. The default value is 0.
waitHours
This argument works in conjunction with waitMinutes. waitHours and atTime are mutually
exclusive.
An Int specifying the number of minutes to wait before submitting the job. This argument is
ignored if queue is set. The default value is 0.
waitMinutes
This argument works in conjunction with waitHours. waitMinutes and atTime are mutually
exclusive.
Abaqus Scripting Reference Guide
1000
JobFromInputFile object

A String specifying the time at which to submit the job. If queue is empty, the string syntax
must be valid for the Linuxat command. If queue is set, the syntax must be valid according
to the system administrator. The default value is an empty string.
atTime
Note: You can use the atTime argument when creating a Job object on a Windows
workstation; however, the at command is available only on Linux platforms.
A String specifying the location of the scratch directory. The default value is an empty string.
scratch
A String specifying the ﬁle containing the user's subroutine deﬁnitions. The default value is
an empty string.
userSubroutine
An Int specifying the number of CPUs to use for this analysis if parallel processing is available.
Possible values are numCpus  0. The default value is 1.
numCpus
An Int specifying the amount of memory available to an Abaqus analysis. The value should
be expressed in the units supplied in memoryUnits. The default value is 90.
memory
A SymbolicConstant specifying the units for the amount of memory used in an Abaqus
analysis. Possible values are PERCENTAGE, MEGA_BYTES, and GIGA_BYTES. The
default value is PERCENTAGE.
memoryUnits
A SymbolicConstant specifying whether to use the double precision version of
Abaqus/Explicit. Possible values are SINGLE, FORCE_SINGLE, DOUBLE,
explicitPrecision
DOUBLE_CONSTRAINT_ONLY, and DOUBLE_PLUS_PACK. The default value is
SINGLE.
A SymbolicConstant specifying the precision of the nodal output written to the output database.
Possible values are SINGLE and FULL. The default value is SINGLE.
nodalOutputPrecision
An Int specifying the number of domains for parallel execution in Abaqus/Explicit. When
using more than 1 numCpus, numDomains must be a multiple of numCpus. The default value
is 1.
numDomains
A Boolean specifying whether to activate dyanmic load balancing for jobs running on multiple
processors with multiple domains in Abaqus/Explicit. The default value is OFF.
activateLoadBalancing
A SymbolicConstant specifying whether an analysis is decomposed into threads or into
multiple processes that communicate through a message passing interface (MPI). Possible
values are DEFAULT, THREADS, and MPI. The default value is DEFAULT.
multiprocessingMode
A SymbolicConstant specifying the type of license type being used in the case of the DSLS
SimUnit license model. Possible values are DEFAULT, TOKEN, and CREDIT. The default
value is DEFAULT.
licenseType
If the license model is not the DSLS SimUnit, the licenseType is not available.
1001
Abaqus Scripting Reference Guide
JobFromInputFile object

Return value
A JobFromInputFile object.
Exceptions
AbaqusException
ValueError
ValueError: RESTART of input ﬁle job is not currently
supported.
If the user attempts to provide RESTART as a value to
argument type:
setValues(...)
This method modiﬁes the JobFromInputFile object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the JobFromInputFile method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The JobFromInputFile object has members with the same names and descriptions as the arguments to the
JobFromInputFile method.
In addition, the JobFromInputFile object can have the following members:
A Boolean specifying whether to retrieve the recommended memory settings from the last
datacheck or analysis run and use those values in subsequent submissions. The default
value is ON.
getMemoryFromAnalysis
A SymbolicConstant specifying whether the job will be analyzed by Abaqus/Standard or
Abaqus/Explicit. Possible values are STANDARD, EXPLICIT, and UNKNOWN.
analysis
If the object has the type JobFromInputFile, analysis=UNKNOWN.
A SymbolicConstant specifying the status of the analysis. Possible values are SUBMITTED,
RUNNING, ABORTED, TERMINATED, COMPLETED, CHECK_RUNNING, and
CHECK_COMPLETED.
status
If the message member is empty, status is set to NONE.
Abaqus Scripting Reference Guide
1002
JobFromInputFile object

A MessageArray object specifying the messages received during an analysis.
messages
A tuple of Strings specifying the environment variables and their values.
environment
1003
Abaqus Scripting Reference Guide
JobFromInputFile object

Message object
The Message object contains information about a given phase of the simulation. Job messages are not returned if a
script is run without the Abaqus/CAE GUI (using the noGUI option).
Access
import job
mdb.coexecutions[name].jobs[name].messages[i]
mdb.jobs[name].messages[i]
Members
The Message object has the following members:
A SymbolicConstant specifying the type of message. Possible values are:
type
•
ABORTED
•
ANY_JOB
•
ANY_MESSAGE_TYPE
•
COMPLETED
•
END_STEP
•
ERROR
•
HEADING
•
HEALER_JOB
•
HEALER_TYPE
•
INTERRUPTED
•
ITERATION
•
JOB_ABORTED
•
JOB_COMPLETED
•
JOB_INTERRUPTED
•
JOB_SUBMITTED
•
MONITOR_DATA
•
ODB_FILE
•
ODB_FRAME
•
STARTED
•
STATE_FRAME
•
STATUS
•
STEP
•
WARNING
A Dictionary object specifying the data returned by the analysis product. The value depends on the
message returned. For a list of the possible entries, see the members of DataObject.
data
Abaqus Scripting Reference Guide
1004
Message object

ModelJob object
The ModelJob object deﬁnes a Job object that analyzes a model on a model database (MDB).
The ModelJob object is derived from the Job object.
Access
import job
mdb.adaptivityProcesses[name].job
mdb.jobs[name]
Job(...)
This method creates an analysis job using a model on a model database (MDB) for the model deﬁnition.
Path
mdb.Job
Required arguments
A String specifying the name of the new job. The name must be a valid Abaqus/CAE object
name.
name
A String specifying the name of the model to be analyzed or a Model object specifying the
model to be analyzed.
model
Optional arguments
A String specifying a description of the job.
description
A SymbolicConstant specifying the type of job. Possible values are ANALYSIS,
SYNTAXCHECK, RECOVER, and RESTART. The default value is ANALYSIS.
type
If the object has the type JobFromInputFile, type=RESTART is not available.
A String specifying the name of the queue to which to submit the job. The default value is
an empty string.
queue
Note:
You can use the queue argument when creating a Job object on a Windows workstation;
however, remote queues are available only on Linux platforms.
An Int specifying the number of hours to wait before submitting the job. This argument is
ignored if queue is set. The default value is 0.
waitHours
This argument works in conjunction with waitMinutes. waitHours and atTime are mutually
exclusive.
1005
ModelJob object

An Int specifying the number of minutes to wait before submitting the job. This argument
is ignored if queue is set. The default value is 0.
waitMinutes
This argument works in conjunction with waitHours. waitMinutes and atTime are mutually
exclusive.
A String specifying the time at which to submit the job. If queue is empty, the string syntax
must be valid for the Linuxat command. If queue is set, the syntax must be valid according
to the system administrator. The default value is an empty string.
atTime
Note:
You can use the atTime argument when creating a Job object on a Windows
workstation; however, the at command is available only on Linux platforms.
A Boolean specifying whether an echo of the input data is printed. The default value is OFF.
echoPrint
A Boolean specifying whether contact constraint data are printed. The default value is OFF.
contactPrint
A Boolean specifying whether model deﬁnition data are printed. The default value is OFF.
modelPrint
A Boolean specifying whether history data are printed. The default value is OFF.
historyPrint
A String specifying the location of the scratch directory. The default value is an empty string.
scratch
A String specifying the ﬁle containing the user's subroutine deﬁnitions. The default value is
an empty string.
userSubroutine
An Int specifying the number of CPUs to use for this analysis if parallel processing is
available. Possible values are numCpus  0. The default value is 1.
numCpus
An Int specifying the amount of memory available to an Abaqus analysis. The value should
be expressed in the units supplied in memoryUnits. The default value is 90.
memory
A SymbolicConstant specifying the units for the amount of memory used in an Abaqus
analysis. Possible values are PERCENTAGE, MEGA_BYTES, and GIGA_BYTES. The
default value is PERCENTAGE.
memoryUnits
A SymbolicConstant specifying whether to use the double precision version of
Abaqus/Explicit. Possible values are SINGLE, FORCE_SINGLE, DOUBLE,
explicitPrecision
DOUBLE_CONSTRAINT_ONLY, and DOUBLE_PLUS_PACK. The default value is
SINGLE.
A SymbolicConstant specifying the precision of the nodal output written to the output
database. Possible values are SINGLE and FULL. The default value is SINGLE.
nodalOutputPrecision
An Int specifying the number of domains for parallel execution in Abaqus/Explicit. When
using more than 1 numCpus, numDomains must be a multiple of numCpus. The default value
is 1.
numDomains
Abaqus Scripting Reference Guide
1006
ModelJob object

A Boolean specifying whether to activate dyanmic load balancing for jobs running on multiple
processors with multiple domains in Abaqus/Explicit. The default value is OFF.
activateLoadBalancing
A SymbolicConstant specifying whether an analysis is decomposed into threads or into
multiple processes that communicate through a message passing interface (MPI). Possible
values are DEFAULT, THREADS, and MPI. The default value is DEFAULT.
multiprocessingMode
A SymbolicConstant specifying the type of license type being used in the case of the DSLS
SimUnit license model. Possible values are DEFAULT, TOKEN, and CREDIT. The default
value is DEFAULT.
licenseType
If the license model is not the DSLS SimUnit, the licenseType is not available.
Return value
A ModelJob object.
Exceptions
AbaqusException.
writeInput(...)
This method writes an input ﬁle.
Required arguments
None.
Optional arguments
A Boolean specifying whether to perform consistency checking for the job. The default
value is ON. It is not recommended that you turn off the consistency checking unless you
are absolutely sure that the model is consistent.
consistencyChecking
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the ModelJob object.
Required arguments
None.
1007
Abaqus Scripting Reference Guide
ModelJob object

Optional arguments
The optional arguments to setValues are the same as the arguments to the ModelJob method.
Return value
None.
Exceptions
None.
Members
The ModelJob object can have the following members:
A String specifying the name of the new job. The name must be a valid Abaqus/CAE
object name.
name
A Boolean specifying whether an echo of the input data is printed. The default value
is OFF.
echoPrint
A Boolean specifying whether contact constraint data are printed. The default value
is OFF.
contactPrint
A Boolean specifying whether model deﬁnition data are printed. The default value is
OFF.
modelPrint
A Boolean specifying whether history data are printed. The default value is OFF.
historyPrint
A String specifying the name of the model to be analyzed or a Model object specifying
the model to be analyzed.
model
A String specifying a description of the job.
description
A SymbolicConstant specifying the type of job. Possible values are ANALYSIS,
SYNTAXCHECK, RECOVER, and RESTART. The default value is ANALYSIS.
type
If the object has the type JobFromInputFile, type=RESTART is not available.
An Int specifying the number of hours to wait before submitting the job. This argument
is ignored if queue is set. The default value is 0.
waitHours
This argument works in conjunction with waitMinutes. waitHours and atTime are
mutually exclusive.
An Int specifying the number of minutes to wait before submitting the job. This
argument is ignored if queue is set. The default value is 0.
waitMinutes
This argument works in conjunction with waitHours. waitMinutes and atTime are
mutually exclusive.
Abaqus Scripting Reference Guide
1008
ModelJob object

An Int specifying the number of CPUs to use for this analysis if parallel processing is
available. Possible values are numCpus  0. The default value is 1.
numCpus
An Int specifying the amount of memory available to an Abaqus analysis. The value
should be expressed in the units supplied in memoryUnits. The default value is 90.
memory
A SymbolicConstant specifying the units for the amount of memory used in an Abaqus
analysis. Possible values are PERCENTAGE, MEGA_BYTES, and GIGA_BYTES.
The default value is PERCENTAGE.
memoryUnits
A Boolean specifying whether to retrieve the recommended memory settings from the
last datacheck or analysis run and use those values in subsequent submissions. The
default value is ON.
getMemoryFromAnalysis
A SymbolicConstant specifying whether to use the double precision version of
Abaqus/Explicit. Possible values are SINGLE, FORCE_SINGLE, DOUBLE,
explicitPrecision
DOUBLE_CONSTRAINT_ONLY, and DOUBLE_PLUS_PACK. The default value
is SINGLE.
A SymbolicConstant specifying the precision of the nodal output written to the output
database. Possible values are SINGLE and FULL. The default value is SINGLE.
nodalOutputPrecision
A SymbolicConstant specifying the parallelization method for Abaqus/Explicit. This
value is ignored for Abaqus/Standard. Possible values are DOMAIN and LOOP. The
default value is DOMAIN.
parallelizationMethodExplicit
An Int specifying the number of domains for parallel execution in Abaqus/Explicit.
When parallelizationMethodExplicit=DOMAIN, numDomains must be a multiple of
numCpus. The default value is 1.
numDomains
A Boolean specifying whether to activate dyanmic load balancing for jobs running on
multiple processors with multiple domains in Abaqus/Explicit. The default value is
OFF.
activateLoadBalancing
A SymbolicConstant specifying whether an analysis is decomposed into threads or
into multiple processes that communicate through a message passing interface (MPI).
Possible values are DEFAULT, THREADS, and MPI. The default value is DEFAULT.
multiprocessingMode
A SymbolicConstant specifying whether the job will be analyzed by Abaqus/Standard
or Abaqus/Explicit. Possible values are STANDARD, EXPLICIT, and UNKNOWN.
analysis
If the object has the type JobFromInputFile, analysis=UNKNOWN.
A SymbolicConstant specifying the status of the analysis. Possible values are
SUBMITTED, RUNNING, ABORTED, TERMINATED, COMPLETED,
CHECK_RUNNING, and CHECK_COMPLETED.
status
If the message member is empty, status is set to NONE.
1009
Abaqus Scripting Reference Guide
ModelJob object

A String specifying the name of the queue to which to submit the job. The default
value is an empty string.
queue
Note:
You can use the queue argument when creating a Job object on a Windows
workstation; however, remote queues are available only on Linux platforms.
A String specifying the time at which to submit the job. If queue is empty, the string
syntax must be valid for the Linuxat command. If queue is set, the syntax must be
valid according to the system administrator. The default value is an empty string.
atTime
Note:
You can use the atTime argument when creating a Job object on a Windows
workstation; however, the at command is available only on Linux platforms.
A String specifying the location of the scratch directory. The default value is an empty
string.
scratch
A String specifying the ﬁle containing the user's subroutine deﬁnitions. The default
value is an empty string.
userSubroutine
A MessageArray object specifying the messages received during an analysis.
messages
A tuple of Strings specifying the environment variables and their values.
environment
Abaqus Scripting Reference Guide
1010
ModelJob object

Queue object
A Queue object tells the job where and how to submit a job remotely. A Queue object can be used as the queue argument
to the Job method.
Access
import job
session.queues[name]
Queue(...)
This method creates a Queue object.
Note:
Remote queues are available only on Linux platforms.
Path
session.Queue
Required arguments
A String specifying the name of the new Queue object.
name
A String specifying the name of the remote analysis queue.
queueName
Optional arguments
A String specifying the name of the remote host. The default value is an empty string.
hostName
A Boolean specifying if the results ﬁles are to be copied from the remote machine to the
local machine. The default value is ON.
ﬁleCopy
A String specifying the remote location for the execution of the simulation. The default
value is an empty string.
directory
A String specifying the designation of the remote driver. The default value is "abaqus".
driver
A SymbolicConstant specifying the type of operating system on the remote machine. The
default value is Linux.
remotePlatform
A list of Strings specifying the ﬁles to be copied from the remote location to the local
machine, or ALL. Strings speciﬁed in a list are the extensions of the job ﬁles that will be
copied, such as ('log', 'dat', 'msg', 'sta', 'odb'). The default value is ALL.
ﬁlesToCopy
A Boolean specifying whether remote ﬁles are to be deleted after they are copied to the
local machine. The default value is OFF.
deleteAfterCopy
1011
Queue object

A String specifying a description of the queue. The default value is an empty string.
description
Return value
A Queue object.
Exceptions
Remote queue host name is not set.
If ﬁleCopy=ON and hostName is empty:
Directory in which to run the job on the remote computer is
not set.
If ﬁleCopy=ON and directory is empty:
Members
The Queue object has members with the same names and descriptions as the arguments to the Queue  method.
Abaqus Scripting Reference Guide
1012
Queue object

Coexecution object
The Coexecution object contains a set of jobs as associated parameters to deﬁne a co-simulation analysis.
Access
import job
mdb.coexecutions[name]
kill()
This method ends the analysis of a co-execution.
Arguments
None.
Return value
None.
Exceptions
None.
submit(...)
This method submits a co-execution for analysis.
Required arguments
None.
Optional arguments
A Boolean specifying whether to perform consistency checking for the individual jobs.
The default value is ON. It is not recommended to turn the consistency checking off unless
you are absolutely sure the models are all consistent.
consistencyChecking
A Boolean specifying whether to run the co-execution as a datacheck analysis. The default
value is False. The datacheckJob and continueJob arguments cannot both be True.
datacheckJob
A Boolean specifying whether to run the co-execution as a continuation analysis. The
default value is False. The datacheckJob and continueJob arguments cannot both be True.
continueJob
Return value
None.
Exceptions
None.
1013
Coexecution object

writeInput(...)
This method writes an input ﬁle for each analysis in the co-execution.
Required arguments
None.
Optional arguments
A Boolean specifying whether to perform consistency checking for the individual jobs.
The default value is ON. It is not recommended to turn the consistency checking off unless
you are absolutely sure the models are all consistent.
consistencyChecking
Return value
None.
Exceptions
None.
waitForCompletion()
This method interrupts the execution of the script until the end of all the analyses. If you call the waitForCompletion
method and the status member is neither SUBMITTED nor RUNNING, Abaqus assumes the analysis has either
completed or aborted and returns immediately.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Coexecution object can have the following members:
A String specifying the name of the new job. The name must be a valid Abaqus/CAE
object name.
name
A SymbolicConstant specifying the type of analysis to execute for the co-execution.
Possible values are ANALYSIS, SYNTAXCHECK, RECOVER, and RESTART. The
default value is ANALYSIS.
type
A SymbolicConstant specifying the analysis product type of the main model for the
co-execution. The default value is ABAQUS.
mainAnalysisProduct
Abaqus Scripting Reference Guide
1014
Coexecution object

An Int specifying the number of hours to wait before submitting the co-execution. This
argument is ignored if queue is set. The default value is 0.
waitHours
This argument works in conjunction with waitMinutes. waitHours and atTime are mutually
exclusive.
An Int specifying the number of minutes to wait before submitting the job. This argument
is ignored if queue is set. The default value is 0.
waitMinutes
This argument works in conjunction with waitHours. waitMinutes and atTime are mutually
exclusive.
A SymbolicConstant specifying the status of the co-execution. Possible values are
SUBMITTED, RUNNING, ABORTED, TERMINATED, COMPLETED,
CHECK_SUBMITTED, CHECK_RUNNING, and CHECK_COMPLETED.
status
If the message member of all the jobs are empty, status is set to NONE.
A String specifying the name of the queue to which to submit the co-execution. The
default value is an empty string.
queue
Note:
You can use the queue argument when creating a Coexecution object on a Windows
workstation; however, remote queues are available only on Linux platforms.
A String specifying the time at which to submit the co-execution. If queue is empty, the
string syntax must be valid for the Linuxat command. If queue is set, the syntax must
be valid according to the system administrator. The default value is an empty string.
atTime
Note:
You can use the atTime argument when creating a Coexecution object on a
Windows workstation; however, the at command is available only on Linux
platforms.
A repository of Job objects specifying the jobs that comprise this co-execution.
jobs
A tuple of Strings specifying the names of the secondary models for the co-execution.
secondaryModels
A tuple of SymbolicConstants specifying the analysis product types of the secondary
models for the co-execution. The default value is an empty sequence.
secondaryAnalysisProducts
A String specifying the name of the main model for the co-execution.
mainModel
A SymbolicConstant specifying the type of license type being used in case of DSLS
SimUnit license model. Possible values are DEFAULT, TOKEN, and CREDIT. The
default value is DEFAULT.
licenseType
If the license model is not DSLS SimUnit then the licenseType is not available.
1015
Abaqus Scripting Reference Guide
Coexecution object

Corresponding analysis keywords
•
*HEADING
•
*PREPRINT
Abaqus Scripting Reference Guide
1016
Coexecution object

OptimizationProcess object
The OptimizationProcess object deﬁnes a process to perform an optimization of a model deﬁned using an optimization
task.
Access
import job
mdb.optimizationProcesses[name]
OptimizationProcess(...)
This method creates an OptimizationProcess object.
Path
mdb.OptimizationProcess
Required arguments
A String specifying name of the optimization process.
name
A String specifying name of the model to be used for the optimization process.
model
A String specifying name of the optimization task to be used for the optimization process.
task
A String specifying name of the job to be used as the prototype for all analysis jobs run
by the optimization process.
prototypeJob
Optional arguments
A String specifying a description of the optimization process.
description
An Int specifying the maximum number of allowed design cycles for the optimization process.
The default value is 15.
maxDesignCycle
An Enum specifying whether Abaqus should save every iteration ﬁle in the optimization
process or a selection of iteration ﬁles saved at a user-speciﬁed frequency. If you set
dataSaveFrequency
dataSaveFrequency=OPT_DATASAVE_EVERY_CYCLE, Abaqus saves every iteration ﬁle;
if you set dataSaveFrequency=OPT_DATASAVE_SPECIFY_CYCLE, Abaqus saves iteration
ﬁles according to the frequency deﬁned by the saveEvery parameter. The default value is
OPT_DATASAVE_SPECIFY_CYCLE.
A Boolean specifying whether the initial cycle should be saved when dataSaveFrequency is
OPT_DATASAVE_SPECIFY_CYCLE. The default value is True.
saveInitial
A Boolean specifying whether the ﬁrst cycle should be saved when dataSaveFrequency is
OPT_DATASAVE_SPECIFY_CYCLE. The default value is True.
saveFirst
1017
OptimizationProcess object

A Boolean specifying whether the last cycle should be saved when dataSaveFrequency is
OPT_DATASAVE_SPECIFY_CYCLE. The default value is True.
saveLast
An Int specifying every nth cycle iterations to be saved when dataSaveFrequency is
OPT_DATASAVE_SPECIFY_CYCLE. Abaqus saves ﬁle iterations for every nth iteration
saveEvery
after iteration 1; if you set saveEvery=3, Abaqus saves ﬁle iterations for cycles 1, 4, 7, and so
on. The default value is None.
A SymbolicConstant specifying the type of license type being used in the case of the DSLS
SimUnit license model. Possible values are DEFAULT, TOKEN, and CREDIT. The default
value is DEFAULT.
licenseType
For optimization job submission, the licenseType options are available regardless of the license
model.
Return value
An OptimizationProcess object.
Exceptions
AbaqusException.
writeParAndInputFiles()
This method allows you to write par and input ﬁles for an optimization task.
Arguments
None.
Return value
None.
Exceptions
None.
submit(...)
This method submits an optimization process.
Required arguments
None.
Optional arguments
A Boolean specifying whether Abaqus should perform the validation of the optimization
process only. The default value is False.
validate
Abaqus Scripting Reference Guide
1018
OptimizationProcess object

Return value
None.
Exceptions
None.
waitForCompletion()
This method interrupts the execution of the script until the end of all the analyses. If you call the waitForCompletion
method and the status member is neither SUBMITTED nor RUNNING, Abaqus assumes the analysis has either
completed or aborted and returns immediately.
Arguments
None.
Return value
None.
Exceptions
None.
extract(...)
This method extracts a surface mesh from the optimized model.
Required arguments
Name of the output ﬁle for the extracted surface mesh.
outputFileName
The design cycle number for which the surface mesh should be extracted.
designCycle
Optional arguments
Value used to determine the positions on the element edges where the new nodes are created.
Value between 0 and 1. The default value is 0.3.
isoValue
Number of smoothing cycles; if set to 0, no smoothing is performed. The default value is 5.
smoothCycles
Deﬁnes the percent of faces that should be removed during the data reduction. If set to 0, no
data reduction occurs. If set to 100, the data reduction stops when no faces can be removed
reductionPercent
(that is checked using reductionAngle parameter). Value between 0 and 100. The default
value is 0.
Deﬁnes the maximal angle between adjacent faces at a node such that the node may be
removed during the data reduction. Value in degrees between 0 and 90. The default value
is15.
reductionAngle
1019
Abaqus Scripting Reference Guide
OptimizationProcess object

Deﬁnes the target volume that is to be achieved iteratively by varying the isovalue. Value
between 0 and 1. The default value is 0.
targetVolume
A tuple for the types of format of the output. Possible values are
OPT_EXTRACT_SMOOTH_ABAQUS_INPUT_FILE, OPT_EXTRACT_SMOOTH_STL,
extractFormat
OPT_EXTRACT_SMOOTH_IGES1, OPT_EXTRACT_SMOOTH_IGES2, or
OPT_EXTRACT_SMOOTH_IGES3. The default value is
OPT_EXTRACT_SMOOTH_ABAQUS_INPUT_FILE.
Possible string values are OFF, MODERATE, or FULL. Deﬁnes if the element material
values are to be ﬁltered (averaged locally) before the isocut, and to what extent. The default
value is OFF.
resultFiltering
Deﬁnes a list of names of part instances to be used for surface extraction. One ﬁle (according
to extractFormat) is created for each part instance. If the argument is not speciﬁed, no part
instance is selected and surface is generated for the whole model.
instances
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the OptimizationProcess object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the OptimizationProcess method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The OptimizationProcess object has members with the same names and descriptions as the arguments to the
OptimizationProcess method.
Abaqus Scripting Reference Guide
1020
OptimizationProcess object

Load and Load Case commands
A speciﬁc type of load object and a speciﬁc type of load state object are designed for each type of load.
A load object stores the nonpropagating data of a load as well as a number of instances of the corresponding
load state object, each of which stores the propagating data of the load in a single step. Instances of the load state
object are created and deleted internally by its corresponding load object.
Load Case commands are used for conﬁguring load cases in speciﬁc types of steps that may use them.
In this section:
•
Load object
•
LoadCase object
•
LoadState object
•
BodyCharge object
•
BodyChargeState object
•
BodyConcentrationFlux object
•
BodyConcentrationFluxState object
•
BodyCurrent object
•
BodyCurrentDensity object
•
BodyCurrentState object
•
BodyForce object
•
BodyForceState object
•
BodyHeatFlux object
•
BodyHeatFluxState object
•
BoltLoad object
•
BoltLoadState object
•
ConcCharge object
•
ConcConcFlux object
•
ConcCurrent object
•
ConcCurrentState object
•
ConcentratedChargeState object
•
ConcentratedConcentrationFluxState object
•
ConcentratedForce object
•
ConcentratedForceState object
•
ConcentratedHeatFlux object
•
ConcentratedHeatFluxState object
•
ConcentratedPoreFluidState object
•
ConcPoreFluid object
•
ConnectorForce object
•
ConnectorForceState object
•
ConnectorMoment object
•
ConnectorMomentState object
•
CoriolisForce object
•
CoriolisForceState object
1021

•
FluidPressurePenetration object
•
FluidPressurePenetrationState object
•
Gravity object
•
GravityState object
•
HydrostaticFluidFlowState object
•
InertiaRelief object
•
InertiaReliefState object
•
InwardVolAccel object
•
InwardVolAccelState object
•
LineLoad object
•
LineLoadState object
•
Moment object
•
MomentState object
•
PEGLoad object
•
PEGLoadState object
•
PipePressure object
•
PipePressureState object
•
Pressure object
•
PressureState object
•
RotationalBodyForce object
•
RotationalBodyForceState object
•
ShellEdgeLoad object
•
ShellEdgeLoadState object
•
SubmodelSB object
•
SubmodelSBState object
•
SubstructureLoad object
•
SubstructureLoadState object
•
SurfaceCharge object
•
SurfaceChargeState object
•
SurfaceConcentrationFlux object
•
SurfaceConcentrationFluxState object
•
SurfaceCurrent object
•
SurfaceCurrentDensity object
•
SurfaceCurrentState object
•
SurfaceHeatFlux object
•
SurfaceHeatFluxState object
•
SurfacePoreFluid object
•
SurfacePoreFluidState object
•
SurfaceTraction object
•
SurfaceTractionState object
Abaqus Scripting Reference Guide
1022

Load object
The Load object is the abstract base type for other Load objects. The Load object has no explicit constructor. The
methods and members of the Load object are common to all objects derived from Load.
Access
import load
mdb.models[name].loads[name]
deactivate(...)
This method deactivates the load in the speciﬁed step and all its subsequent steps.
Required arguments
A String specifying the name of the step in which the load is deactivated.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
move(...)
This method moves the load state object from one step to a different step.
Required arguments
A String specifying the name of the step from which the load state is moved.
fromStepName
A String specifying the name of the step to which the load state is moved.
toStepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
1023
Load object

reset(...)
This method resets the load state of the speciﬁed step to the state of the previous general analysis step.
Required arguments
A String specifying the name of the step in which the load state is reset.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
resume()
This method resumes the load that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the load.
Arguments
None.
Return value
None.
Exceptions
None.
delete(...)
This method allows you to delete existing loads.
Abaqus Scripting Reference Guide
1024
Load object

Required arguments
A sequence of Ints specifying the index of each load to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The Load object can have the following members:
A String specifying the load repository key.
name
A Region object specifying the region to which the load is applied.
region
1025
Abaqus Scripting Reference Guide
Load object

LoadCase object
The LoadCase object is used to deﬁne the loads and constraints comprising a particular loading condition and the linear
response of a structure subjected to that loading condition.
Access
import step
mdb.models[name].steps[name].loadCases[name]
LoadCase(...)
This method creates a load case in a step.
Path
mdb.models[name].steps[name].LoadCase
Required arguments
A String specifying the name of the object.
name
Optional arguments
A sequence of (String, Float) sequences specifying the name of a BoundaryCondition
followed by a nonzero Float scaling factor. The default value is an empty sequence.
boundaryConditions
A sequence of (String, Float) sequences specifying the name of a Load followed by a
nonzero Float specifying a scale factor. The default value is an empty sequence.
loads
A Boolean specifying whether to include all active boundary conditions propagated or
modiﬁed from the base state. The default value is ON.
includeActiveBaseStateBC
Return value
A LoadCase object.
Exceptions
RangeError.
resume()
This method resumes the load case that was previously suppressed.
Arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
1026
LoadCase object

Exceptions
None.
suppress()
This method suppresses the load case.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the LoadCase object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the LoadCase  method, except for the name
argument.
Return value
None.
Exceptions
RangeError.
Members
The LoadCase object has members with the same names and descriptions as the arguments to the LoadCase  method.
In addition, the LoadCase object has the following member:
A Boolean specifying whether the load case is suppressed or not. The default value is
OFF.
suppressed
1027
Abaqus Scripting Reference Guide
LoadCase object

LoadState object
The LoadState object is the abstract base type for other LoadState objects. The LoadState object has no explicit
constructor or methods. The members of the LoadState object are common to all objects derived from LoadState.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The LoadState object has the following members:
A SymbolicConstant specifying the propagation state of the amplitude member. Possible values
are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Abaqus Scripting Reference Guide
1028
LoadState object

BodyCharge object
The BodyCharge object stores the data for a body charge.
The BodyCharge object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
BodyCharge(...)
This method creates a BodyCharge object.
Path
mdb.models[name].BodyCharge
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
Return value
A BodyCharge object.
Exceptions
None.
1029
BodyCharge object

setValues(...)
This method modiﬁes the data for an existing BodyCharge object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BodyCharge  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing BodyCharge object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The BodyCharge object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1030
BodyCharge object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1031
Abaqus Scripting Reference Guide
BodyCharge object

BodyChargeState object
The BodyChargeState object stores the propagating data of a body charge in a step. One instance of this object is
created internally by the BodyCharge object for each step. The instance is also deleted internally by the BodyCharge
object.
The BodyChargeState object has no constructor or methods.
The BodyChargeState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The BodyChargeState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DECHARGE (load type label: EBF)
Abaqus Scripting Reference Guide
1032
BodyChargeState object

BodyConcentrationFlux object
The BodyConcentrationFlux object deﬁnes body concentration ﬂux from a region or into a region.
The BodyConcentrationFlux object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
BodyConcentrationFlux(...)
This method creates a BodyConcentrationFlux object.
Path
mdb.models[name].BodyConcentrationFlux
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the body concentration ﬂux magnitude. magnitude is optional if
distributionType=USER_DEFINED.
magnitude
Optional arguments
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A SymbolicConstant specifying how the body concentration ﬂux is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A BodyConcentrationFlux object.
Exceptions
None.
1033
BodyConcentrationFlux object

setValues(...)
This method modiﬁes the data for an existing BodyConcentrationFlux object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BodyConcentrationFlux  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing BodyConcentrationFlux object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the Body heat ﬂux is modiﬁed.
stepName
Optional arguments
A Float specifying the Body concentration ﬂux magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the load
has no amplitude reference. You should provide the amplitude argument only if it is valid for
the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The BodyConcentrationFlux object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1034
BodyConcentrationFlux object

A SymbolicConstant specifying how the body concentration ﬂux is distributed spatially.
Possible values are UNIFORM, USER_DEFINED, and FIELD. The default value is
UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1035
Abaqus Scripting Reference Guide
BodyConcentrationFlux object

BodyConcentrationFluxState object
The BodyConcentrationFluxState object stores the propagating data for a BodyConcentrationFlux object in a step.
One instance of this object is created internally by the BodyConcentrationFlux object for each step. The instance is
also deleted internally by the BodyConcentrationFlux object.
The BodyConcentrationFluxState object has no constructor or methods.
The BodyConcentrationFluxState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The BodyConcentrationFluxState object has the following members:
A Float specifying the body concentration ﬂux magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the body concentration ﬂux
magnitude. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CFLUX
Abaqus Scripting Reference Guide
1036
BodyConcentrationFluxState object

BodyCurrent object
The BodyCurrent object stores the data for a body current.
The BodyCurrent object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
BodyCurrent(...)
This method creates a BodyCurrent object.
Path
mdb.models[name].BodyCurrent
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
Return value
A BodyCurrent object.
Exceptions
None.
1037
BodyCurrent object

setValues(...)
This method modiﬁes the data for an existing BodyCurrent object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BodyCurrent  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing BodyCurrent object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The BodyCurrent object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1038
BodyCurrent object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1039
Abaqus Scripting Reference Guide
BodyCurrent object

BodyCurrentDensity object
The BodyCurrentDensity object stores the data for a body current.
The BodyCurrentDensity object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
BodyCurrentDensity(...)
This method creates a BodyCurrentDensity object.
Path
mdb.models[name].BodyCurrentDensity
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be the
ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Complex specifying the ﬁrst component of the load.
comp1
A Complex specifying the second component of the load.
comp2
A Complex specifying the third component of the load.
comp3
Optional arguments
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
Return value
A BodyCurrentDensity object.
Exceptions
None.
Abaqus Scripting Reference Guide
1040
BodyCurrentDensity object

setValues(...)
This method modiﬁes the data for an existing BodyCurrentDensity object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BodyCurrentDensity  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing BodyCurrentDensity object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Complex specifying the ﬁrst component of the load.
comp1
A Complex specifying the second component of the load.
comp2
A Complex specifying the third component of the load.
comp3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if
the load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
1041
Abaqus Scripting Reference Guide
BodyCurrentDensity object

Members
The BodyCurrentDensity object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values
are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1042
BodyCurrentDensity object

BodyCurrentState object
The BodyCurrentState object stores the propagating data of a body current in a step. One instance of this object is
created internally by the BodyCurrent object for each step. The instance is also deleted internally by the BodyCurrent
object.
The BodyCurrentState object has no constructor or methods.
The BodyCurrentState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The BodyCurrentState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DECURRENT (load type label: CBF)
1043
BodyCurrentState object

BodyForce object
The BodyForce object deﬁnes a distributed load.
The BodyForce object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
BodyForce(...)
This method creates a BodyForce object.
Path
mdb.models[name].BodyForce
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
Optional arguments
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A Float or a Complex specifying the body force component in the 1-direction.
comp1
Note:
Although comp1, comp2, and comp3 are optional arguments, at least one of them must
be nonzero unless distributionType=USER_DEFINED.
A Float or a Complex specifying the body force component in the 2-direction.
comp2
A Float or a Complex specifying the body force component in the 3-direction.
comp3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Abaqus Scripting Reference Guide
1044
BodyForce object

Return value
A BodyForce object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing BodyForce object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BodyForce  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing BodyForce object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the body force component
in the 1-direction. UNCHANGED should be used if the body force component is propagated from
the previous analysis step.
comp1
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the body force component
in the 2-direction. UNCHANGED should be used if the body force component is propagated from
the previous analysis step.
comp2
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the body force component
in the 3-direction. UNCHANGED should be used if the body force component is propagated from
the previous analysis step.
comp3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
1045
Abaqus Scripting Reference Guide
BodyForce object

amplitude is propagated from the previous analysis step. FREED should be used if the load is changed
to have no amplitude reference. You should provide the amplitude argument only if it is valid for
the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The BodyForce object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Corresponding analysis keywords
•
*DLOAD (load type label: BX, BY, BZ, BR, BXNU, BYNU, BZNU, or BRNU)
Abaqus Scripting Reference Guide
1046
BodyForce object

BodyForceState object
The BodyForceState object stores the propagating data of a body force in a step. One instance of this object is created
internally by the BodyForce object for each step. The instance is also deleted internally by the BodyForce object.
The BodyForceState object has no constructor or methods.
The BodyForceState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The BodyForceState object has the following members:
A Float or a Complex specifying the body force component in the 1-direction.
comp1
A Float or a Complex specifying the body force component in the 2-direction.
comp2
A Float or a Complex specifying the body force component in the 3-direction.
comp3
A SymbolicConstant specifying the propagation state of the body force component in the
1-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
comp1State
A SymbolicConstant specifying the propagation state of the body force component in the
2-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
comp2State
A SymbolicConstant specifying the propagation state of the body force component in the
3-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
comp3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
1047
BodyForceState object

A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DLOAD (load type label: BX, BY, BZ, BR, BXNU, BYNU, BZNU, or BRNU)
Abaqus Scripting Reference Guide
1048
BodyForceState object

BodyHeatFlux object
The BodyHeatFlux object deﬁnes body heat ﬂux from a region or into a region.
The BodyHeatFlux object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
BodyHeatFlux(...)
This method creates a BodyHeatFlux object.
Path
mdb.models[name].BodyHeatFlux
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the body heat ﬂux magnitude. magnitude is optional if
distributionType=USER_DEFINED.
magnitude
Optional arguments
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A SymbolicConstant specifying how the body heat ﬂux is distributed spatially. Possible values
are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A BodyHeatFlux object.
Exceptions
None.
1049
BodyHeatFlux object

setValues(...)
This method modiﬁes the data for an existing BodyHeatFlux object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BodyHeatFlux  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing BodyHeatFlux object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the body heat ﬂux is modiﬁed.
stepName
Optional arguments
A Float specifying the body heat ﬂux magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the load
has no amplitude reference. You should provide the amplitude argument only if it is valid for
the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The BodyHeatFlux object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1050
BodyHeatFlux object

A SymbolicConstant specifying how the body heat ﬂux is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1051
Abaqus Scripting Reference Guide
BodyHeatFlux object

BodyHeatFluxState object
The BodyHeatFluxState object stores the propagating data for a Body BodyHeatFlux object in a step. One instance of
this object is created internally by the BodyHeatFlux object for each step. The instance is also deleted internally by
the BodyHeatFlux object.
The BodyHeatFluxState object has no constructor or methods.
The BodyHeatFluxState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The BodyHeatFluxState object has the following members:
A Float specifying the Body heat ﬂux magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the Body heat ﬂux magnitude.
Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DFLUX
Abaqus Scripting Reference Guide
1052
BodyHeatFluxState object

BoltLoad object
The BoltLoad object deﬁnes a bolt load.
The BoltLoad object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
BoltLoad(...)
This method creates a BoltLoad object.
Path
mdb.models[name].BoltLoad
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the bolt load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying the method of applying the bolt load. Possible values are
APPLY_FORCE and ADJUST_LENGTH. The default value is APPLY_FORCE.
boltMethod
A DatumAxis object specifying the orientation of the pre-tension section normal.
datumAxis
Note: datumAxis is applicable only for Solid and Shell regions; it has no meaning for
Wire regions.
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Boolean specifying whether the pre-tension section is to be deﬁned at the part level. The
default value is False. You should provide the preTenSecPartLevel argument only if the selected
preTenSecPartLevel
region belongs to a dependent part instance. A pre-tension section cannot be deﬁned at the
part level for independent and model instances.
1053
BoltLoad object

Return value
A BoltLoad object.
Exceptions
TextError.
setValues(...)
This method modiﬁes the data for an existing BoltLoad object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BoltLoad  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing BoltLoad object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A SymbolicConstant specifying the type of bolt load. Possible values are APPLY_FORCE,
ADJUST_LENGTH, and FIX_LENGTH. The default is APPLY_FORCE.
boltMethod
A Float specifying the bolt load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the load
is changed to have no amplitude reference. You should provide the amplitude argument only
if it is valid for the speciﬁed step.
Return value
None.
Abaqus Scripting Reference Guide
1054
BoltLoad object

Exceptions
None.
Members
The BoltLoad object can have the following members:
A String specifying the load repository key.
name
A DatumAxis object specifying the orientation of the pre-tension section normal.
datumAxis
Note:
datumAxis is required only for Solid and Shell regions; it has no meaning for Wire
regions.
A Region object specifying the region to which the load is applied.
region
Corresponding analysis keywords
•
*PRE-TENSION SECTION
•
*NODE (for the reference node)
•
*NSET (for the reference node)
1055
Abaqus Scripting Reference Guide
BoltLoad object

BoltLoadState object
The BoltLoadState object stores the propagating data of a bolt load in a step. One instance of this object is created
internally by the BoltLoad object for each step. The instance is also deleted internally by the BoltLoad object.
The BoltLoadState object has no constructor or methods.
The BoltLoadState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The BoltLoadState object has the following members:
A SymbolicConstant specifying the type of bolt load. Possible values are APPLY_FORCE,
ADJUST_LENGTH, and FIX_LENGTH.
boltMethod
A SymbolicConstant specifying the propagation state of the bolt load type. Possible values
are UNSET, SET, UNCHANGED, and MODIFIED.
boltMethodState
A Float specifying the bolt load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the bolt load magnitude. Possible
values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Abaqus Scripting Reference Guide
1056
BoltLoadState object

Corresponding analysis keywords
•
*CLOAD (when boltMethod=APPLY_FORCE)
•
*BOUNDARY (when boltMethod=ADJUST_LENGTH or FIX_LENGTH)
1057
Abaqus Scripting Reference Guide
BoltLoadState object

ConcCharge object
The ConcCharge object stores the data for a concentrated charge.
The ConcCharge object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConcCharge(...)
This method creates a ConcCharge object.
Path
mdb.models[name].ConcCharge
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A ConcCharge object.
Exceptions
None.
Abaqus Scripting Reference Guide
1058
ConcCharge object

setValues(...)
This method modiﬁes the data for an existing ConcCharge object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcCharge  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConcCharge object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConcCharge object can have the following members:
A String specifying the load repository key.
name
1059
Abaqus Scripting Reference Guide
ConcCharge object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1060
ConcCharge object

ConcConcFlux object
The ConcConcFlux object stores the data for a concentrated concentration ﬂux.
The ConcConcFlux object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConcConcFlux(...)
This method creates a ConcConcFlux object.
Path
mdb.models[name].ConcConcFlux
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A ConcConcFlux object.
Exceptions
None.
1061
ConcConcFlux object

setValues(...)
This method modiﬁes the data for an existing ConcConcFlux object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcConcFlux  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConcConcFlux object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConcConcFlux object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1062
ConcConcFlux object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1063
Abaqus Scripting Reference Guide
ConcConcFlux object

ConcCurrent object
The ConcCurrent object stores the data for a concentrated current.
The ConcCurrent object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConcCurrent(...)
This method creates a ConcCurrent object.
Path
mdb.models[name].ConcCurrent
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A ConcCurrent object.
Exceptions
None.
Abaqus Scripting Reference Guide
1064
ConcCurrent object

setValues(...)
This method modiﬁes the data for an existing ConcCurrent object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcCurrent  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConcCurrent object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConcCurrent object can have the following members:
A String specifying the load repository key.
name
1065
Abaqus Scripting Reference Guide
ConcCurrent object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1066
ConcCurrent object

ConcCurrentState object
The ConcCurrentState object stores the propagating data of a concentrated current in a step. One instance of this object
is created internally by the ConcCurrent object for each step. The instance is also deleted internally by the ConcCurrent
object.
The ConcCurrentState object has no constructor or methods.
The ConcCurrentState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConcCurrentState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CECURRENT
1067
ConcCurrentState object

ConcentratedChargeState object
The ConcentratedChargeState object stores the propagating data of a concentrated charge in a step. One instance of
this object is created internally by the ConcCharge object for each step. The instance is also deleted internally by the
ConcCharge object.
The ConcentratedChargeState object has no constructor or methods.
The ConcentratedChargeState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConcentratedChargeState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CECHARGE
Abaqus Scripting Reference Guide
1068
ConcentratedChargeState object

ConcentratedConcentrationFluxState object
The ConcentratedConcentrationFluxState object stores the propagating data of a concentrated concentration ﬂux in a
step. One instance of this object is created internally by the ConcConcFlux object for each step. The instance is also
deleted internally by the ConcConcFlux object.
The ConcentratedConcentrationFluxState object has no constructor or methods.
The ConcentratedConcentrationFluxState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConcentratedConcentrationFluxState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CFLUX (degree of freedom: 11, which is assumed)
1069
ConcentratedConcentrationFluxState object

ConcentratedForce object
The ConcentratedForce object deﬁnes a concentrated force.
The ConcentratedForce object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConcentratedForce(...)
This method creates a ConcentratedForce object.
Path
mdb.models[name].ConcentratedForce
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Float or a Complex specifying the concentrated force component in the 1-direction. Although
cf1, cf2, and cf3 are optional arguments, at least one of them must be nonzero.
cf1
A Float or a Complex specifying the concentrated force component in the 2-direction.
cf2
A Float or a Complex specifying the concentrated force component in the 3-direction.
cf3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET. You
should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Boolean specifying whether the direction of the force rotates with the rotation at each node of
the region. You should provide the follower argument only if it is valid for the speciﬁed step.
The default value is OFF.
follower
Abaqus Scripting Reference Guide
1070
ConcentratedForce object

None or a DatumCsys object specifying the local coordinate system of the load's degrees of
freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate system.
When this member is queried, it returns an Int. The default value is None.
localCsys
Return value
A ConcentratedForce object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConcentratedForce object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcentratedForce  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConcentratedForce object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the concentrated force
component in the 1-direction. UNCHANGED should be used if the concentrated force component is
propagated from the previous analysis step.
cf1
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the concentrated force
component in the 2-direction. UNCHANGED should be used if the concentrated force component is
propagated from the previous analysis step.
cf2
1071
Abaqus Scripting Reference Guide
ConcentratedForce object

A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the concentrated force
component in the 3-direction. UNCHANGED should be used if the concentrated force component is
propagated from the previous analysis step.
cf3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for
the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude
amplitude
is propagated from the previous analysis step. FREED should be used if the load is changed to have no
amplitude reference. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
Return value
None.
Exceptions
None.
Members
The ConcentratedForce object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A Boolean specifying whether the direction of the force rotates with the rotation at each node
of the region. You should provide the follower argument only if it is valid for the speciﬁed
step. The default value is OFF.
follower
None or a DatumCsys object specifying the local coordinate system of the load's degrees of
freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate
system. When this member is queried, it returns an Int. The default value is None.
localCsys
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1072
ConcentratedForce object

ConcentratedForceState object
The ConcentratedForceState object stores the propagating data for a concentrated force in a step. One instance of this
object is created internally by the ConcentratedForce object for each step. The instance is also deleted internally by
the ConcentratedForce object.
The ConcentratedForceState object has no constructor or methods.
The ConcentratedForceState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConcentratedForceState object has the following members:
A Float or a Complex specifying the concentrated force component in the 1-direction. Although
cf1, cf2, and cf3 are optional arguments, at least one of them must be nonzero.
cf1
A Float or a Complex specifying the concentrated force component in the 2-direction.
cf2
A Float or a Complex specifying the concentrated force component in the 3-direction.
cf3
A SymbolicConstant specifying the propagation state of the concentrated force component in
the 1-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
cf1State
A SymbolicConstant specifying the propagation state of the concentrated force component in
the 2-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
cf2State
A SymbolicConstant specifying the propagation state of the concentrated force component in
the 3-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
cf3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible values
are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
1073
ConcentratedForceState object

•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load has no
amplitude reference.
amplitude
Corresponding analysis keywords
•
*CLOAD (degree of freedom: 1, 2, or 3)
Abaqus Scripting Reference Guide
1074
ConcentratedForceState object

ConcentratedHeatFlux object
The ConcentratedHeatFlux object stores the data for a concentrated heat ﬂux load.
The ConcentratedHeatFlux object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConcentratedHeatFlux(...)
This method creates a ConcentratedHeatFlux object.
Path
mdb.models[name].ConcentratedHeatFlux
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
An Int specifying the degree of freedom of the node, to which the concentrated heat ﬂux should
be applied. The default value is 11.
dof
Return value
A ConcentratedHeatFlux object.
1075
ConcentratedHeatFlux object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConcentratedHeatFlux object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcentratedHeatFlux  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConcentratedHeatFlux object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConcentratedHeatFlux object can have the following members:
Abaqus Scripting Reference Guide
1076
ConcentratedHeatFlux object

A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
An Int specifying the degree of freedom of the node, to which the concentrated heat ﬂux
should be applied. The default value is 11.
dof
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1077
Abaqus Scripting Reference Guide
ConcentratedHeatFlux object

ConcentratedHeatFluxState object
The ConcentratedHeatFluxState object stores the propagating data of a concentrated heat ﬂux load in a step. One
instance of this object is created internally by the ConcentratedHeatFlux object for each step. The instance is also
deleted internally by the ConcentratedHeatFlux object.
The ConcentratedHeatFluxState object has no constructor or methods.
The ConcentratedHeatFluxState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConcentratedHeatFluxState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CFLUX (degree of freedom: one out of integers 11 to 31)
Abaqus Scripting Reference Guide
1078
ConcentratedHeatFluxState object

ConcentratedPoreFluidState object
The ConcentratedPoreFluidState object stores the propagating data of a concentrated pore ﬂuid ﬂow load in a step.
One instance of this object is created internally by the ConcPoreFluid object for each step. The instance is also deleted
internally by the ConcPoreFluid object.
The ConcentratedPoreFluidState object has no constructor or methods.
The ConcentratedPoreFluidState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConcentratedPoreFluidState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CLOAD (degree of freedom: 8)
1079
ConcentratedPoreFluidState object

ConcPoreFluid object
The ConcPoreFluid object stores the data for a concentrated pore ﬂuid ﬂow load.
The ConcPoreFluid object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConcPoreFluid(...)
This method creates a ConcPoreFluid object.
Path
mdb.models[name].ConcPoreFluid
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A ConcPoreFluid object.
Exceptions
None.
Abaqus Scripting Reference Guide
1080
ConcPoreFluid object

setValues(...)
This method modiﬁes the data for an existing ConcPoreFluid object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcPoreFluid  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConcPoreFluid object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConcPoreFluid object can have the following members:
A String specifying the load repository key.
name
1081
Abaqus Scripting Reference Guide
ConcPoreFluid object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1082
ConcPoreFluid object

ConnectorForce object
The ConnectorForce object deﬁnes a connector force.
The ConnectorForce object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConnectorForce(...)
This method creates a ConnectorForce object on a wire region. Alternatively, the load may also be applied to a wire
set referenced from an assembled fastener template model.
Path
mdb.models[name].ConnectorForce
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
Optional arguments
The wire region to which the load is applied. This argument is not valid when fastenerName and
fastenerSetName are speciﬁed.
region
A String specifying the name of the assembled fastener to which the load will be applied. This
argument is not valid when region is speciﬁed. When this argument is speciﬁed, fastenerSetName
must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the load will be applied.
This argument is not valid when region is speciﬁed. When this argument is speciﬁed, fastenerName
must also be speciﬁed. The default value is an empty string.
fastenerSetName
A Float or a Complex specifying the connector force component in the connector's local
1-direction.
f1
Note:
Although f1, f2, and f3 are optional arguments, at least one of them must be nonzero.
A Float or a Complex specifying the connector force component in the connector's local
2-direction.
f2
1083
ConnectorForce object

A Float or a Complex specifying the connector force component in the connector's local
3-direction.
f3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET. You
should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A ConnectorForce object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConnectorForce object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorForce  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConnectorForce object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the connector force component
in the connector's local 1-direction. UNCHANGED should be used if the connector force component is
propagated from the previous analysis step.
f1
Abaqus Scripting Reference Guide
1084
ConnectorForce object

A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the connector force component
in the connector's local 2-direction. UNCHANGED should be used if the connector force component is
propagated from the previous analysis step.
f2
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the connector force component
in the connector's local 3-direction. UNCHANGED should be used if the connector force component is
propagated from the previous analysis step.
f3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for the
SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude is
amplitude
propagated from the previous analysis step. FREED should be used if the load is changed to have no
amplitude reference. You should provide the amplitude argument only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ConnectorForce object can have the following members:
A String specifying the load repository key.
name
A String specifying the name of the assembled fastener to which the load will be applied.
This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the load will be
applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A Region object specifying the region to which the load is applied.
region
1085
Abaqus Scripting Reference Guide
ConnectorForce object

ConnectorForceState object
The ConnectorForceState object stores the propagating data for a connector force in a step. One instance of this object
is created internally by the ConnectorForce object for each step. The instance is also deleted internally by the
ConnectorForce object.
The ConnectorForceState object has no constructor or methods.
The ConnectorForceState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConnectorForceState object has the following members:
A Float or a Complex specifying the connector force component in the connector's local 1-direction.
f1
A Float or a Complex specifying the connector force component in the connector's local 2-direction.
f2
A Float or a Complex specifying the connector force component in the connector's local 3-direction.
f3
A SymbolicConstant specifying the propagation state of the connector force component in the
connector's local 1-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
f1State
A SymbolicConstant specifying the propagation state of the connector force component in the
connector's local 2-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
f2State
A SymbolicConstant specifying the propagation state of the connector force component in the
connector's local 3-direction. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
f3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible values
are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Abaqus Scripting Reference Guide
1086
ConnectorForceState object

A String specifying the name of the amplitude reference. The String is empty if the load has no
amplitude reference.
amplitude
Corresponding analysis keywords
•
*CONNECTOR LOAD (degree of freedom: 1, 2, or 3)
1087
Abaqus Scripting Reference Guide
ConnectorForceState object

ConnectorMoment object
The ConnectorMoment object stores the data for a connector moment.
The ConnectorMoment object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ConnectorMoment(...)
This method creates a ConnectorMoment object on a wire region. Alternatively, the load may also be applied to a wire
set referenced from an assembled fastener template model.
Path
mdb.models[name].ConnectorMoment
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
Optional arguments
The wire region to which the load is applied. This argument is not valid when fastenerName
and fastenerSetName are speciﬁed.
region
A String specifying the name of the assembled fastener to which the load will be applied. This
argument is not valid when region is speciﬁed. When this argument is speciﬁed, fastenerSetName
must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the load will be applied.
This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A Float or a Complex specifying the moment component in the connector's local 4-direction.
m1
A Float or a Complex specifying the moment component in the connector's local 5-direction.
m2
A Float or a Complex specifying the moment component in the connector's local 6-direction.
m3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Abaqus Scripting Reference Guide
1088
ConnectorMoment object

Return value
A ConnectorMoment object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ConnectorMoment object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorMoment  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing ConnectorMoment object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or a SymbolicConstant specifying the moment component in the connector's local
4-direction. Possible values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED
m1
should be used if the load component is propagated from the previous static analysis step. Use FREED
to remove a previously deﬁned load component.
A Float, a Complex, or a SymbolicConstant specifying the moment component in the connector's local
5-direction. Possible values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED
m2
should be used if the load component is propagated from the previous static analysis step. Use FREED
to remove a previously deﬁned load component.
A Float, a Complex, or a SymbolicConstant specifying the moment component in the connector's local
6-direction. Possible values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED
m3
should be used if the load component is propagated from the previous static analysis step. Use FREED
to remove a previously deﬁned load component.
1089
Abaqus Scripting Reference Guide
ConnectorMoment object

A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values for the
SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the amplitude is
amplitude
propagated from the previous static analysis step. FREED should be used if the load is changed to have
no amplitude reference. You should provide the amplitude argument only if it is valid for the speciﬁed
step.
Return value
None.
Exceptions
None.
Members
The ConnectorMoment object can have the following members:
A String specifying the load repository key.
name
A String specifying the name of the assembled fastener to which the load will be applied.
This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerSetName must also be speciﬁed. The default value is an empty string.
fastenerName
A String specifying the assembled fastener template model set to which the load will be
applied. This argument is not valid when region is speciﬁed. When this argument is speciﬁed,
fastenerName must also be speciﬁed. The default value is an empty string.
fastenerSetName
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1090
ConnectorMoment object

ConnectorMomentState object
The ConnectorMomentState object stores the propagating data for a connector moment in a step. One instance of this
object is created internally by the ConnectorMoment object for each step. The instance is also deleted internally by the
ConnectorMoment object.
The ConnectorMomentState object has no constructor or methods.
The ConnectorMomentState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ConnectorMomentState object has the following members:
A Float or a Complex specifying the connector moment component in the connector's local
4-direction. Although m1, m2, and m3 are optional arguments, at least one of them must be
nonzero.
m1
A Float or a Complex specifying the connector moment component in the connector's local
5direction.
m2
A Float or a Complex specifying the connector moment component in the connector's local
6-direction.
m3
A SymbolicConstant specifying the propagation state of the load component in the connector's
local 4-direction. Possible values are UNSET, SET, UNCHANGED, and FREED.
m1State
A SymbolicConstant specifying the propagation state of the load component in the connector's
local 5-direction. Possible values are UNSET, SET, UNCHANGED, and FREED.
m2State
A SymbolicConstant specifying the propagation state of the load component in the connector's
local 6-direction. Possible values are UNSET, SET, UNCHANGED, and FREED.
m3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible values
are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
1091
ConnectorMomentState object

•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load has no
amplitude reference.
amplitude
Corresponding analysis keywords
•
*CONNECTOR LOAD (degree of freedom: 4, 5, or 6)
Abaqus Scripting Reference Guide
1092
ConnectorMomentState object

CoriolisForce object
The CoriolisForce object stores the data for a coriolis force.
The CoriolisForce object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
CoriolisForce(...)
This method creates a CoriolisForce object.
Path
mdb.models[name].CoriolisForce
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be the
ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
A sequence of Floats specifying the ﬁrst point on the axis of rotation for the load.
point1
A sequence of Floats specifying the second point on the axis of rotation for the load.
point2
Optional arguments
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
Return value
A CoriolisForce object.
1093
CoriolisForce object

Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing CoriolisForce object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CoriolisForce  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing CoriolisForce object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The CoriolisForce object can have the following members:
Abaqus Scripting Reference Guide
1094
CoriolisForce object

A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A tuple of Floats specifying the ﬁrst point on the axis of rotation for the load.
point1
A tuple of Floats specifying the second point on the axis of rotation for the load.
point2
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1095
Abaqus Scripting Reference Guide
CoriolisForce object

CoriolisForceState object
The CoriolisForceState object stores the propagating data of a coriolis force in a step. One instance of this object is
created internally by the CoriolisForce object for each step. The instance is also deleted internally by the CoriolisForce
object.
The CoriolisForceState object has no constructor or methods.
The CoriolisForceState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The CoriolisForceState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DLOAD (load type label: CORIO)
Abaqus Scripting Reference Guide
1096
CoriolisForceState object

FluidPressurePenetration object
The FluidPressurePenetration object deﬁnes a ﬂuid pressure penetration load.
The FluidPressurePenetration object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
FluidPressurePenetration(...)
This method creates a FluidPressurePenetration object.
Path
mdb.models[name].FluidPressurePenetration
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the pressure is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the ﬂuid pressure magnitude.
magnitude
Optional arguments
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET. You
should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Float specifying the critical contact interface pressure threshold at which ﬂuid
penetration starts to occur. The default value is 0.0.
criticalPressure
A Float specifying the time period over which the ﬂuid pressure on the newly penetrated contact
surface segments is ramped up to the current magnitude. The timePeriod argument applies only
timePeriod
in Abaqus/Standard and is neglected in the linear perturbation analysis. The default value is
0.001.
A SymbolicConstant LOCAL or WETTING_ADVANCE used for specifying the algorithm
to control the evolution of the region exposed to the ﬂuid pressure. The
evolutionRegionMethod
evolutionRegionMethod argument applies WETTING_ADVANCE only in an
Abaqus/Explicit analysis. The default value is LOCAL.
1097
FluidPressurePenetration object

A Region object specifying the node or node set on the surface initially exposed to ﬂuid
pressure. The wettedRegion argument applies only when the evolutionRegionMethod argument
has the value WETTING_ADVANCE.
wettedRegion
Return value
A FluidPressurePenetration object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing FluidPressurePenetration object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Pressure method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing Pressure object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the ﬂuid pressure magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the load
has no amplitude reference. You should provide the amplitude argument only if it is valid for
the speciﬁed step.
Abaqus Scripting Reference Guide
1098
FluidPressurePenetration object

A Float specifying the critical contact interface pressure threshold at which ﬂuid
penetration starts to occur. The default value is 0.0.
criticalPressure
A Float specifying the time period over which the ﬂuid pressure on the newly penetrated contact
surface segments is ramped up to the current magnitude. The timePeriod argument applies only
timePeriod
in Abaqus/Standard and is neglected in the linear perturbation analysis. The default value is
0.001.
A SymbolicConstant LOCAL or WETTING_ADVANCE used for specifying the algorithm
to control the evolution of the region exposed to the ﬂuid pressure. The
evolutionRegionMethod
evolutionRegionMethod argument applies WETTING_ADVANCE only in an
Abaqus/Explicit analysis. The default value is LOCAL.
A Region object specifying the node or node set on the surface initially exposed to ﬂuid
pressure. The wettedRegion argument applies only when the evolutionRegionMethod argument
has the value WETTING_ADVANCE.
wettedRegion
Return value
None.
Exceptions
None.
Members
The Pressure object can have the following members:
A String specifying the load repository key.
name
A Region object specifying the region to which the load is applied.
region
1099
Abaqus Scripting Reference Guide
FluidPressurePenetration object

FluidPressurePenetrationState object
The FluidPressurePenetrationState object stores the propagating data for a pressure in a step.
One instance of this object is created internally by the FluidPressurePenetration object for each step. The instance is
also deleted internally by the FluidPressurePenetration object.
The FluidPressurePenetrationState object has no constructor or methods.
The FluidPressurePenetrationState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The FluidPressurePenetrationState object has the following members:
A Float specifying the pressure magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the pressure magnitude.
Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A String specifying the name of the amplitude reference. The String is empty if the
load has no amplitude reference.
amplitude
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A Float specifying the critical contact interface pressure threshold at which ﬂuid
penetration starts to occur. The default value is 0.0.
criticalPressure
A SymbolicConstant specifying the propagation state of the criticalPressure member.
Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
criticalPressureState
A Float specifying the time period over which the ﬂuid pressure on the newly penetrated contact
surface segments is ramped up to the current magnitude. The timePeriod argument applies only
timePeriod
in Abaqus/Standard and is neglected in the linear perturbation analysis. The default value is
0.001.
A SymbolicConstant specifying the propagation state of the timePeriod member.
Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
timePeriodState
A SymbolicConstant LOCAL or WETTING_ADVANCE used for specifying the algorithm
to control the evolution of the region exposed to the ﬂuid pressure. The
evolutionRegionMethod
evolutionRegionMethod argument applies WETTING_ADVANCE only in an
Abaqus/Explicit analysis. The default value is LOCAL.
Abaqus Scripting Reference Guide
1100
FluidPressurePenetrationState object

A SymbolicConstant specifying the propagation state of the
evolutionRegionMethod member. Possible values are UNSET, SET,
UNCHANGED, and MODIFIED.
evolutionRegionMethodState
A Region object specifying the node or node set on the surface initially exposed to ﬂuid
pressure. The wettedRegion argument applies only when the evolutionRegionMethod argument
has the value WETTING_ADVANCE.
wettedRegion
A SymbolicConstant specifying the propagation state of the wettedRegion member.
Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
wettedRegionState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Corresponding analysis keywords
•
*DSLOAD
•
*DLOAD
1101
Abaqus Scripting Reference Guide
FluidPressurePenetrationState object

Gravity object
The Gravity object stores the data of a gravity load.
The Gravity object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
Gravity(...)
This method creates a Gravity object.
Path
mdb.models[name].Gravity
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
A Float or a Complex specifying the component of the load in the 1-direction.
comp1
Note:
Although comp1, comp2, and comp3 are optional arguments, at least one of them must
be nonzero.
A Float or a Complex specifying the component of the load in the 2-direction.
comp2
A Float or a Complex specifying the component of the load in the 3-direction.
comp3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Abaqus Scripting Reference Guide
1102
Gravity object

Return value
A Gravity object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing Gravity object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Gravity  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing Gravity object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or a SymbolicConstant specifying the load component in the 1-direction.
Possible values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should
comp1
be used if the load component is propagated from the previous static analysis step. Use FREED to
remove a previously deﬁned load component.
A Float, a Complex, or a SymbolicConstant specifying the load component in the 2-direction. For
details see comp1.
comp2
A Float, a Complex, or a SymbolicConstant specifying the load component in the 3-direction. For
details see comp1.
comp3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous static analysis step. FREED should be used if the load
1103
Abaqus Scripting Reference Guide
Gravity object

is changed to have no amplitude reference. You should provide the amplitude argument only if it
is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The Gravity object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1104
Gravity object

GravityState object
The GravityState object stores the propagating data for a gravity load in a step. One instance of this object is created
internally by the Gravity object for each step. The instance is also deleted internally by the Gravity object.
The GravityState object has no constructor or methods.
The GravityState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The GravityState object has the following members:
A Float or a Complex specifying the load component in the 1-direction.
comp1
A Float or a Complex specifying the load component in the 2-direction.
comp2
A Float or a Complex specifying the load component in the 3-direction.
comp3
A SymbolicConstant specifying the propagation state of the load component in the 1-direction.
Possible values are UNSET, SET, UNCHANGED, and FREED.
comp1State
A SymbolicConstant specifying the propagation state of the load component in the 2-direction.
Possible values are UNSET, SET, UNCHANGED, and FREED.
comp2State
A SymbolicConstant specifying the propagation state of the load component in the 3-direction.
Possible values are UNSET, SET, UNCHANGED, and FREED.
comp3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
1105
GravityState object

A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DLOAD (load type label:GRAV)
Abaqus Scripting Reference Guide
1106
GravityState object

HydrostaticFluidFlowState object
The HydrostaticFluidFlowState object stores the propagating data for a concentrated HydrostaticFluidFlow object in
a step. One instance of this object is created internally by the HydrostaticFluidFlow object for each step. The instance
is also deleted internally by the HydrostaticFluidFlow object.
The HydrostaticFluidFlowState object has no constructor or methods.
The HydrostaticFluidFlowState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The HydrostaticFluidFlowState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*FLUID FLUX
1107
HydrostaticFluidFlowState object

InertiaRelief object
The InertiaRelief object deﬁnes an inertia relief load.
The InertiaRelief object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
InertiaRelief(...)
This method creates an InertiaRelief object.
Path
mdb.models[name].InertiaRelief
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
Optional arguments
A Boolean specifying the 1-direction as a free direction.
u1
Note:
Although u1, u2, u3, ur1, ur2, and ur3 are optional arguments, at least one of them must
be speciﬁed. Further, any speciﬁed set of free directions cannot include only two rotational
degrees of freedom.
A Boolean specifying the 2-direction as a free direction.
u2
A Boolean specifying the 3-direction as a free direction.
u3
A Boolean specifying the rotation about the 1–direction as a free direction.
ur1
A Boolean specifying the rotation about the 2–direction as a free direction.
ur2
A Boolean specifying the rotation about the 3–direction as a free direction.
ur3
A sequence of Floats specifying the X, Y and Z-coordinates of a ﬁxed rotation point or a point
on the rotation axis or a point on the symmetry line, about which rotations are deﬁned. Such a
point must be speciﬁed only for certain combinations of free directions.
referencePoint
Abaqus Scripting Reference Guide
1108
InertiaRelief object

None or a DatumCsys object specifying the local coordinate system of the rigid body degrees
of freedom for the inertia relief load. If localCoordinates=None, the free directions are deﬁned
localCoordinates
in the global coordinate system. When this member is queried, it returns an Int. The default value
is None.
Return value
An InertiaRelief object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing InertiaRelief object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the InertiaRelief  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing InertiaRelief object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Boolean specifying the 1-direction as a free direction.
u1
A Boolean specifying the 2-direction as a free direction.
u2
A Boolean specifying the 3-direction as a free direction.
u3
A Boolean specifying the rotation about the 1–direction as a free direction.
ur1
1109
Abaqus Scripting Reference Guide
InertiaRelief object

A Boolean specifying the rotation about the 2–direction as a free direction.
ur2
A Boolean specifying the rotation about the 3–direction as a free direction.
ur3
A sequence of Floats specifying the point about which rotations are deﬁned. The point can be
speciﬁed only for certain combinations of free directions. The referencePoint argument can be
one of the following:
referencePoint
•
The X, Y and Z-coordinates of a ﬁxed rotation point.
•
A point on the rotation axis.
•
A point on the symmetry line.
A Boolean specifying whether the inertia relief loading should remain ﬁxed at the current loading
at the start of the step. The default value is OFF.
ﬁxed
Return value
None.
Exceptions
None.
Members
The InertiaRelief object can have the following members:
A String specifying the load repository key.
name
None or a DatumCsys object specifying the local coordinate system of the rigid body degrees
of freedom for the inertia relief load. If localCoordinates=None, the free directions are
localCoordinates
deﬁned in the global coordinate system. When this member is queried, it returns an Int. The
default value is None.
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1110
InertiaRelief object

InertiaReliefState object
The InertiaReliefState object stores the propagating data for an inertia relief load in a step. One instance of this object
is created internally by the InertiaRelief object for each step. The instance is also deleted internally by the InertiaRelief
object.
The InertiaReliefState object has no constructor or methods.
The InertiaReliefState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The InertiaReliefState object has the following members:
A Boolean specifying the 1-direction as a free direction.
u1
A Boolean specifying the 2-direction as a free direction.
u2
A Boolean specifying the 3-direction as a free direction.
u3
A Boolean specifying the rotation about the 1–direction as a free direction.
ur1
A Boolean specifying the rotation about the 2–direction as a free direction.
ur2
A Boolean specifying the rotation about the 3–direction as a free direction.
ur3
A SymbolicConstant specifying the propagation state of the Boolean that identiﬁes the local
1-direction as a free direction. Possible values are UNSET, SET, UNCHANGED, and
MODIFIED.
u1State
A SymbolicConstant specifying the propagation state of the Boolean that identiﬁes the local
2-direction as a free direction. Possible values are UNSET, SET, UNCHANGED, and
MODIFIED.
u2State
A SymbolicConstant specifying the propagation state of the Boolean that identiﬁes the local
the 3-direction as a free direction. Possible values are UNSET, SET, UNCHANGED, and
MODIFIED.
u3State
A SymbolicConstant specifying the propagation state of the Boolean that identiﬁes rotation
about the local 1-direction as a free direction. Possible values are UNSET, SET, UNCHANGED,
and MODIFIED.
ur1State
A SymbolicConstant specifying the propagation state of the Boolean that identiﬁes the rotation
about the local the 2-direction as a free direction. Possible values are UNSET, SET,
UNCHANGED, and MODIFIED.
ur2State
1111
InertiaReliefState object

A SymbolicConstant specifying the propagation state of the Boolean that identiﬁes the rotation
about the local the 3-direction as a free direction. Possible values are UNSET, SET,
UNCHANGED, and MODIFIED.
ur3State
A Boolean specifying whether the inertia relief loading should remain ﬁxed at the current loading
at the start of the step. The default value is OFF.
ﬁxed
A SymbolicConstant specifying the propagation state of the Boolean that identiﬁes whether the
inertia relief load should remain ﬁxed at current level at the start of the step. Possible values
are UNSET, SET, UNCHANGED, and MODIFIED.
ﬁxedState
A SymbolicConstant specifying the propagation state of the reference point of the inertia relief
load. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
referencePointState
A tuple of Floats specifying the point about which rotations are deﬁned. The point can be
speciﬁed only for certain combinations of free directions. The referencePoint argument can be
one of the following:
referencePoint
•
The X, Y and Z-coordinates of a ﬁxed rotation point.
•
A point on the rotation axis.
•
A point on the symmetry line.
A SymbolicConstant specifying the propagation state of the amplitude member. Possible values
are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load has no
amplitude reference.
amplitude
Corresponding analysis keywords
•
*INERTIA RELIEF
Abaqus Scripting Reference Guide
1112
InertiaReliefState object

InwardVolAccel object
The InwardVolAccel object stores the data for an inward volume acceleration acoustic load.
The InwardVolAccel object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
InwardVolAccel(...)
This method creates a InwardVolAccel object.
Path
mdb.models[name].InwardVolAccel
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the name of the ﬁrst analysis step.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
An InwardVolAccel object.
Exceptions
None.
1113
InwardVolAccel object

setValues(...)
This method modiﬁes the data for an existing InwardVolAccel object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the InwardVolAccel  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing InwardVolAccel object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The InwardVolAccel object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1114
InwardVolAccel object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1115
Abaqus Scripting Reference Guide
InwardVolAccel object

InwardVolAccelState object
The InwardVolAccelState object stores the propagating data of an inward volume acceleration acoustic load in a step.
One instance of this object is created internally by the InwardVolAccel object for each step. The instance is also deleted
internally by the InwardVolAccel object.
The InwardVolAccelState object has no constructor or methods.
The InwardVolAccelState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The InwardVolAccelState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CLOAD (degree of freedom: 8)
Abaqus Scripting Reference Guide
1116
InwardVolAccelState object

LineLoad object
The LineLoad object stores the data of an applied line load.
The LineLoad object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
LineLoad(...)
This method creates a LineLoad object.
Path
mdb.models[name].LineLoad
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Float or a Complex specifying the component of the load in the global or the beam local
1-direction.
comp1
Note:
Although comp1, comp2, and comp3 are optional arguments, at least one of them must
be nonzero unless distributionType=USER_DEFINED.
A Float or a Complex specifying the component of the load in the global or the beam local
2-direction.
comp2
A Float or a Complex specifying the component of the load in the global 3-direction.
comp3
1117
LineLoad object

A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A SymbolicConstant specifying whether the load is applied in a global or the beam local frame
of reference. Possible values are GLOBAL and LOCAL. The default value is GLOBAL.
system
Return value
A LineLoad object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing LineLoad object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the LineLoad  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing LineLoad object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or a SymbolicConstant specifying the load component in the global or the beam
local 1-direction. Possible values for the SymbolicConstant are UNCHANGED and FREED.
comp1
UNCHANGED should be used if the load component is propagated from the previous static analysis
step. Use FREED to remove a previously deﬁned load component.
Abaqus Scripting Reference Guide
1118
LineLoad object

A Float, a Complex, or a SymbolicConstant specifying the load component in the global or the beam
local 2-direction. For details see comp1.
comp2
A Float, a Complex, or a SymbolicConstant specifying the load component in the global 3-direction.
For details see comp1.
comp3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous static analysis step. FREED should be used if the load
is changed to have no amplitude reference. You should provide the amplitude argument only if it
is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The LineLoad object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A SymbolicConstant specifying whether the load is applied in a global or the beam local
frame of reference. Possible values are GLOBAL and LOCAL. The default value is GLOBAL.
system
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1119
Abaqus Scripting Reference Guide
LineLoad object

LineLoadState object
The LineLoadState object stores the propagating data of a line load in a step. One instance of this object is created
internally by the LineLoad object for each step. The instance is also deleted internally by the LineLoad object.
The LineLoadState object has no constructor or methods.
The LineLoadState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The LineLoadState object has the following members:
A Float or a Complex specifying the load component in the global or the beam local 1-direction.
comp1
A Float or a Complex specifying the load component in the global or the beam local 2-direction.
comp2
A Float or a Complex specifying the load component in the global 3-direction.
comp3
A SymbolicConstant specifying the propagation state of the load component in the global or
the beam local 1-direction. Possible values are UNSET, SET, UNCHANGED, and FREED.
comp1State
A SymbolicConstant specifying the propagation state of the load component in the global or
the beam local 2-direction. Possible values are UNSET, SET, UNCHANGED, and FREED.
comp2State
A SymbolicConstant specifying the propagation state of the load component in the global
3-direction. Possible values are UNSET, SET, UNCHANGED, and FREED.
comp3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Abaqus Scripting Reference Guide
1120
LineLoadState object

A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DLOAD (load type label: PX, PY, PZ for a global reference frame, and P1, P2 for a local reference frame)
1121
Abaqus Scripting Reference Guide
LineLoadState object

Moment object
The Moment object stores the data for a moment.
The Moment object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
Moment(...)
This method creates a Moment object.
Path
mdb.models[name].Moment
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
Optional arguments
A Float or a Complex specifying the load component in the 4-direction.
cm1
Note:
Although comp1, comp2, and comp3 are optional arguments, at least one of them must be
nonzero.
A Float or a Complex specifying the load component in the 5- direction.
cm2
A Float or a Complex specifying the load component in the 6-direction.
cm3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Boolean specifying whether the direction of the force rotates with the rotation of the node.
You should provide the follower argument only if it is valid for the speciﬁed step. The default
value is OFF.
follower
Abaqus Scripting Reference Guide
1122
Moment object

None or a DatumCsys object specifying the ID of the Datum coordinate system used as the local
coordinate system of the load. If localCsys=None, the load is deﬁned in the global coordinate
system. When this member is queried, it returns an Int. The default value is None.
localCsys
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
Return value
A Moment object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing Moment object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Moment  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing Moment object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or a SymbolicConstant specifying the load component in the 4-direction.
Possible values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should
comp1
1123
Abaqus Scripting Reference Guide
Moment object

be used if the load component is propagated from the previous static analysis step. Use FREED to
remove a previously deﬁned load component.
A Float, a Complex, or a SymbolicConstant specifying the load component in the 5-direction. For
details see comp1.
comp2
A Float, a Complex, or a SymbolicConstant specifying the load component in the 6-direction. For
details see comp1.
comp3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous static analysis step. FREED should be used if the load
is changed to have no amplitude reference. You should provide the amplitude argument only if it
is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The Moment object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A Boolean specifying whether the direction of the force rotates with the rotation of the node.
You should provide the follower argument only if it is valid for the speciﬁed step. The default
value is OFF.
follower
None or a DatumCsys object specifying the ID of the Datum coordinate system used as the
local coordinate system of the load. If localCsys=None, the load is deﬁned in the global
coordinate system. When this member is queried, it returns an Int. The default value is None.
localCsys
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1124
Moment object

MomentState object
The MomentState object stores the propagating data for a moment in a step. One instance of this object is created
internally by the Moment object for each step. The instance is also deleted internally by the Moment object.
The MomentState object has no constructor or methods.
The MomentState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The MomentState object has the following members:
A Float or a Complex specifying the load component in the 4-direction.
cm1
A Float or a Complex specifying the load component in the 5-direction.
cm2
A Float or a Complex specifying the load component in the 6-direction.
cm3
A SymbolicConstant specifying the propagation state of the load component in the 4-direction.
Possible values are UNSET, SET, UNCHANGED, and FREED.
cm1State
A SymbolicConstant specifying the propagation state of the load component in the 5-direction.
Possible values are UNSET, SET, UNCHANGED, and FREED.
cm2State
A SymbolicConstant specifying the propagation state of the load component in the 6-direction.
Possible values are UNSET, SET, UNCHANGED, and FREED.
cm3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible values
are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
1125
MomentState object

A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CLOAD (degree of freedom: 4, 5, or 6)
Abaqus Scripting Reference Guide
1126
MomentState object

PEGLoad object
The PEGLoad object stores the data for a PEG load.
The PEGLoad object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
PEGLoad(...)
This method creates a PEGLoad object.
Path
mdb.models[name].PEGLoad
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Float or a Complex specifying the load component at dof 1 of reference node 1.
comp1
Note:
Although comp1, comp2, and comp3 are optional arguments, at least one of them must
be nonzero.
A Float or a Complex specifying the load component at dof 1 of reference node 2.
comp2
A Float or a Complex specifying the load component at dof 2 of reference node 2.
comp3
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
1127
PEGLoad object

Return value
A PEGLoad object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing PEGLoad object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PEGLoad  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing PEGLoad object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or a SymbolicConstant specifying the load component at dof 1 of reference
node 1. Possible values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED
comp1
should be used if the load component is propagated from the previous static analysis step. Use
FREED to remove a previously deﬁned load component.
A Float, a Complex, or a SymbolicConstant specifying the load component at dof 1 of reference
node 2. For details see comp1.
comp2
A Float, a Complex, or a SymbolicConstant specifying the load component at dof 2 of reference
node 2. For details see comp1.
comp3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous static analysis step. FREED should be used if the load
Abaqus Scripting Reference Guide
1128
PEGLoad object

is changed to have no amplitude reference. You should provide the amplitude argument only if it
is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The PEGLoad object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1129
Abaqus Scripting Reference Guide
PEGLoad object

PEGLoadState object
The PEGLoadState object stores the propagating data for a concentrated force in a step. One instance of this object is
created internally by the PEGLoad object for each step. The instance is also deleted internally by the PEGLoad object.
The PEGLoadState object has no constructor or methods.
The PEGLoadState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The PEGLoadState object has the following members:
A Float or a Complex specifying the load component at dof 1 of reference node 1.
comp1
A Float or a Complex specifying the load component at dof 1 of reference node 2.
comp2
A Float or a Complex specifying the load component at dof 2 of reference node 2.
comp3
A SymbolicConstant specifying the propagation state of the load component at dof 1 of
reference node 1. Possible values are UNSET, SET, UNCHANGED, and FREED.
comp1State
A SymbolicConstant specifying the propagation state of the load component at dof 1 of
reference node 2. Possible values are UNSET, SET, UNCHANGED, and FREED.
comp2State
A SymbolicConstant specifying the propagation state of the load component at dof 2 of
reference node 2. Possible values are UNSET, SET, UNCHANGED, and FREED.
comp3State
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Abaqus Scripting Reference Guide
1130
PEGLoadState object

A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*CLOAD (degree of freedom: 1 or 2)
1131
Abaqus Scripting Reference Guide
PEGLoadState object

PipePressure object
The PipePressure object stores the data for a pressure applied to pipe or elbow elements.
The PipePressure object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
PipePressure(...)
This method creates a Pressure object.
Path
mdb.models[name].PipePressure
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the pressure is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the pressure magnitude.
magnitude
Note:
magnitude is optional if distributionType=USER_DEFINED.
A Float specifying the effective inner or outer diameter.
diameter
A Float specifying the height of the zero pressure level when
distributionType=HYDROSTATIC.
hZero
A Float specifying the height of the reference pressure level when
distributionType=HYDROSTATIC.
hReference
Optional arguments
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Abaqus Scripting Reference Guide
1132
PipePressure object

A SymbolicConstant specifying whether the load is uniform. Possible values are UNIFORM,
HYDROSTATIC, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A SymbolicConstant specifying whether the pressure is applied internally or externally. Possible
values are INTERNAL and EXTERNAL. The default value is INTERNAL.
side
Return value
A PipePressure object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing PipePressure object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PipePressure  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing PipePressure object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the pressure magnitude.
magnitude
A Float specifying the height of the zero pressure level when
distributionType=HYDROSTATIC.
hZero
1133
Abaqus Scripting Reference Guide
PipePressure object

A Float specifying the height of the reference pressure level when
distributionType=HYDROSTATIC.
hReference
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible
values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be
amplitude
used if the amplitude is propagated from the previous static analysis step. FREED should be
used if the load has no amplitude reference. You should provide the amplitude argument only
if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The PipePressure object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying whether the load is uniform. Possible values are UNIFORM,
HYDROSTATIC, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A SymbolicConstant specifying whether the pressure is applied internally or externally.
Possible values are INTERNAL and EXTERNAL. The default value is INTERNAL.
side
A Float specifying the effective inner or outer diameter.
diameter
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1134
PipePressure object

PipePressureState object
The PipePressureState object stores the propagating data for a pipe pressure in a step. One instance of this object is
created internally by the PipePressure object for each step. The instance is also deleted internally by the PipePressure
object.
The PipePressureState object has no constructor or methods.
The PipePressureState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The PipePressureState object has the following members:
A Float or a Complex specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible
values are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A Float specifying the height of the zero pressure level when the pipe pressure
distributionType=HYDROSTATIC.
hZero
A SymbolicConstant specifying the propagation state of hZero. Possible values are UNSET,
SET, UNCHANGED, and FREED.
hZeroState
A Float specifying the height of the reference pressure level when the pipe pressure
distributionType=HYDROSTATIC.
hReference
A SymbolicConstant specifying the propagation state of hReference. Possible values are
UNSET, SET, UNCHANGED, and FREED.
hReferenceState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
1135
PipePressureState object

•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSLOAD
•
*DLOAD
Abaqus Scripting Reference Guide
1136
PipePressureState object

Pressure object
The Pressure object deﬁnes a pressure load.
The Pressure object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
Pressure(...)
This method creates a Pressure object.
Path
mdb.models[name].Pressure
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the pressure is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float or a Complex specifying the pressure magnitude.
magnitude
Note:
magnitude is optional if distributionType=USER_DEFINED.
A Float specifying the height of the zero pressure level when
distributionType=HYDROSTATIC.
hZero
A Float specifying the height of the reference pressure level when
distributionType=HYDROSTATIC.
hReference
Optional arguments
A String specifying the name of the AnalyticalField or DiscreteField object associated with this
load. The ﬁeld argument applies only when distributionType=FIELD or
distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeld
A Region specifying the reference point from which the relative velocity is determined when
distributionType=STAGNATION or VISCOUS.
refPoint
1137
Pressure object

A SymbolicConstant specifying how the pressure is distributed spatially. Possible values are
UNIFORM, USER_DEFINED, FIELD, HYDROSTATIC, STAGNATION, VISCOUS,
TOTAL_FORCE, and DISCRETE_FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET. You
should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A Pressure object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing Pressure object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Pressure  method, except for the name
and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing Pressure object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float or a Complex specifying the pressure magnitude.
magnitude
A Float specifying the height of the zero pressure level when
distributionType=HYDROSTATIC.
hZero
Abaqus Scripting Reference Guide
1138
Pressure object

A Float specifying the height of the reference pressure level when
distributionType=HYDROSTATIC.
hReference
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible
values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be
amplitude
used if the amplitude is propagated from the previous analysis step. FREED should be used
if the load has no amplitude reference. You should provide the amplitude argument only if it
is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The Pressure object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the pressure is distributed spatially. Possible values are
UNIFORM, USER_DEFINED, FIELD, HYDROSTATIC, STAGNATION, VISCOUS,
TOTAL_FORCE, and DISCRETE_FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField or DiscreteField object associated with
this load. The ﬁeld argument applies only when distributionType=FIELD or
distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1139
Abaqus Scripting Reference Guide
Pressure object

PressureState object
The PressureState object stores the propagating data for a pressure in a step. One instance of this object is created
internally by the Pressure object for each step. The instance is also deleted internally by the Pressure object.
The PressureState object has no constructor or methods.
The PressureState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The PressureState object has the following members:
A Float or a Complex specifying the pressure magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the pressure magnitude. Possible
values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A Float specifying the height of the zero pressure level when the pressure
distributionType=HYDROSTATIC.
hZero
A SymbolicConstant specifying the propagation state of hZero. Possible values are UNSET,
SET, UNCHANGED, and FREED.
hZeroState
A Float specifying the height of the reference pressure level when the pressure
distributionType=HYDROSTATIC.
hReference
A SymbolicConstant specifying the propagation state of hReference. Possible values are
UNSET, SET, UNCHANGED, and FREED.
hReferenceState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
Abaqus Scripting Reference Guide
1140
PressureState object

•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSLOAD
•
*DLOAD
1141
Abaqus Scripting Reference Guide
PressureState object

RotationalBodyForce object
The RotationalBodyForce object stores the data for a rotational body force.
The RotationalBodyForce object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
RotationalBodyForce(...)
This method creates a RotationalBodyForce object.
Path
mdb.models[name].RotationalBodyForce
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be the
ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
A sequence of Floats specifying the ﬁrst point on the axis of rotation for the load.
point1
A sequence of Floats specifying the second point on the axis of rotation for the load.
point2
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A Boolean specifying whether or not the effect of the load is centrifugal. The default value
is OFF.
centrifugal
Note: At least one of centrifugal or rotaryAcceleration or rotorDynamicloadsmust be
speciﬁed and only one must have the value ON.
Abaqus Scripting Reference Guide
1142
RotationalBodyForce object

A Boolean specifying whether or not the effect of the load is rotary acceleration. The default
value is OFF.
rotaryAcceleration
Note: At least one of centrifugal or rotaryAcceleration or rotorDynamicloads must
be speciﬁed and only one must have the value ON.
A Boolean specifying whether or not the effect of the load is rotordynamic. The default value
is OFF.
rotorDynamicloads
Note: At least one of centrifugal or rotaryAcceleration or rotorDynamicloads must
be speciﬁed and only one must have the value ON.
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A RotationalBodyForce object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing RotationalBodyForce object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RotationalBodyForce method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing RotationalBodyForce object in the speciﬁed step.
1143
Abaqus Scripting Reference Guide
RotationalBodyForce object

Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The RotationalBodyForce object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A Boolean specifying whether or not the effect of the load is centrifugal. The default value
is OFF.
centrifugal
Note:
At least one of centrifugal or rotaryAcceleration or rotorDynamicloads must be
speciﬁed and only one must have the value ON.
A Boolean specifying whether or not the effect of the load is rotary acceleration. The default
value is OFF.
rotaryAcceleration
Note:
At least one of centrifugal or rotaryAcceleration or rotarDynamicloads must be
speciﬁed and only one must have the value ON.
A Boolean specifying whether or not the effect of the load is rotordynamic. The default
value is OFF.
rotorDynamicloads
Abaqus Scripting Reference Guide
1144
RotationalBodyForce object

Note:
At least one of centrifugal or rotaryAcceleration or rotorDynamicloads must be
speciﬁed and only one must have the value ON.
A tuple of Floats specifying the ﬁrst point on the axis of rotation for the load.
point1
A tuple of Floats specifying the second point on the axis of rotation for the load.
point2
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1145
Abaqus Scripting Reference Guide
RotationalBodyForce object

RotationalBodyForceState object
The RotationalBodyForceState object stores the propagating data of a rotational body force in a step. One instance of
this object is created internally by the RotationalBodyForce object for each step. The instance is also deleted internally
by the RotationalBodyForce object.
The RotationalBodyForceState object has no constructor or methods.
The RotationalBodyForceState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The RotationalBodyForceState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DLOAD (load type labels: CENTRIF, ROTA)
Abaqus Scripting Reference Guide
1146
RotationalBodyForceState object

ShellEdgeLoad object
The ShellEdgeLoad object deﬁnes shell edge loads on a region.
The ShellEdgeLoad object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
ShellEdgeLoad(...)
This method creates a ShellEdgeLoad object.
Path
mdb.models[name].ShellEdgeLoad
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float or Complex specifying the load magnitude. magnitude is optional if
distributionType=USER_DEFINED
magnitude
Optional arguments
A SymbolicConstant specifying how the shell edge load is distributed spatially. Possible values
are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the load has no amplitude reference. The default value is UNSET. You should
provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Float specifying an additional rotation of directionVector about an axis. The default value is
0.This parameter is available only if traction is GENERAL.
angle
A SymbolicConstant specifying the axis about which to apply an additional rotation of
directionVector. Possible values are AXIS_1, AXIS_2, AXIS_3. The default value is AXIS_1.
axis
This parameter is available only if traction is GENERAL.
1147
ShellEdgeLoad object

A DatumCsys object specifying the local coordinate system of the load's degrees of freedom. The
default value is None, indicating that the degrees of freedom are deﬁned in the global coordinate
localCsys
system or by the userCsys parameter if deﬁned. This parameter is available only if traction is
GENERAL. When this member is queried, it returns an Int.
A String specifying a CSYS deﬁned by a user-subroutine. The default value is None, indicating
that the degrees of freedom are deﬁned in the global coordinate system or by the localCsys
parameter if deﬁned. This parameter is available only if traction is GENERAL.
userCsys
A tuple of two points specifying the direction of the load. Each point is speciﬁed as a point region
or a tuple of coordinates. If traction is SHEAR, then directionVector will be projected onto the
region surface. This parameter is available only if traction is GENERAL.
directionVector
A Boolean specifying whether the direction of the force changes with rotation. The default value
is ON. This parameter may be modiﬁed only if traction is GENERAL. You should provide the
follower argument only if it is valid for the speciﬁed step.
follower
A Boolean specifying whether to maintain a constant resultant force by deﬁning traction per unit
undeformed area. If resultant is OFF, traction is deﬁned per unit deformed area. The default value
is OFF. You should provide the resultant argument only if it is valid for the speciﬁed step.
resultant
A SymbolicConstant specifying how to apply surface traction. Possible values are NORMAL,
TRANSVERSE, SHEAR, MOMENT and GENERAL. The default value is NORMAL.
traction
Return value
A ShellEdgeLoad object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing ShellEdgeLoad object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShellEdgeLoad  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
1148
ShellEdgeLoad object

setValuesInStep(...)
This method modiﬁes the propagating data for an existing ShellEdgeLoad object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the surface pore ﬂuid ﬂow is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the load magnitude.
UNCHANGED should be used if the magnitude is propagated from the previous analysis step.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the load has
no amplitude reference. You should provide the amplitude argument only if it is valid for the
speciﬁed step.
Return value
None.
Exceptions
None.
Members
The ShellEdgeLoad object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the shell edge load is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1149
Abaqus Scripting Reference Guide
ShellEdgeLoad object

ShellEdgeLoadState object
The ShellEdgeLoadState object stores the propagating data for a ShellEdgeLoad object in a step. One instance of this
object is created internally by the ShellEdgeLoad object for each step. The instance is also deleted internally by the
ShellEdgeLoad object.
The ShellEdgeLoadState object has no constructor or methods.
The ShellEdgeLoadState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The ShellEdgeLoadState object has the following members:
A Float or a Complex specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSLOAD
•
*DLOAD
Abaqus Scripting Reference Guide
1150
ShellEdgeLoadState object

SubmodelSB object
The SubmodelSB object stores the data for a submodel surface based load.
The SubmodelSB object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SubmodelSB(...)
This method creates a SubmodelSB object.
Path
mdb.models[name].SubmodelSB
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A String specifying the step in the global model from which Abaqus reads the values of
the variables that will drive the submodel analysis. The String indicates the position of
globalStep
the step in the sequence of analysis steps. For example, globalStep='1' indicates the ﬁrst
step.
Optional arguments
A String specifying the element set in the global model that will be searched for elements
whose responses will be used to drive the submodel. An empty string indicates that the
entire global model will be searched. The default value is an empty string.
globalDrivingRegion
None or a Float specifying the absolute value by which a driven node of the submodel
can lie outside the region of the elements of the global model. The default value is None.
absoluteExteriorTolerance
None or a Float specifying the fraction of the average element size in the global model
by which a driven node of the submodel can lie outside the region of the elements of the
global model. The default value is 0.05.
exteriorTolerance
An Int specifying the increment number in the global model step from which the solution
will be used to specify the values of the driven variables. If globalIncrement=0, the
globalIncrement
solution from the last increment will be used. The globalIncrement argument is applicable
only for linear perturbation steps. The default value is 0.
1151
SubmodelSB object

Return value
A SubmodelSB object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SubmodelSB object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SubmodelSB  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SubmodelSB object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Boolean specifying whether the load should remain ﬁxed at the current values at the start of
the step. The default value is ON.
ﬁxed
A String specifying the step in the global model from which Abaqus reads the values of the
variables that will drive the submodel analysis. The String indicates the position of the step in
globalStep
the sequence of analysis steps. For example, globalStep='1' indicates the ﬁrst step. The globalStep
argument is applicable only if ﬁxed=OFF.
An Int specifying the increment number in the global model step at which the solution will be
used to specify the values of the driven variables. If globalIncrement=0, the solution from the
globalIncrement
last increment will be used. The globalIncrement argument is applicable only for linear perturbation
steps and if ﬁxed=OFF. The default value is 0.
Abaqus Scripting Reference Guide
1152
SubmodelSB object

Return value
None.
Exceptions
None.
Members
The SubmodelSB object can have the following members:
A String specifying the load repository key.
name
None or a Float specifying the absolute value by which a driven node of the submodel
can lie outside the region of the elements of the global model. The default value is None.
absoluteExteriorTolerance
None or a Float specifying the fraction of the average element size in the global model
by which a driven node of the submodel can lie outside the region of the elements of
the global model. The default value is 0.05.
exteriorTolerance
A String specifying the element set in the global model that will be searched for elements
whose responses will be used to drive the submodel. An empty string indicates that the
entire global model will be searched. The default value is an empty string.
globalDrivingRegion
A Region object specifying the region to which the load is applied.
region
1153
Abaqus Scripting Reference Guide
SubmodelSB object

SubmodelSBState object
The SubmodelSBState object stores the propagating data for a Submodel load in a step. One instance of this object is
created internally by the SubmodelSB object for each step. The instance is also deleted internally by the SubmodelSB
object.
The SubmodelSBState object has no constructor or methods.
The SubmodelSBState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SubmodelSBState object has the following members:
A SymbolicConstant specifying the propagation state of the globalStep member. Possible
values are SET and UNCHANGED.
globalStepState
An Int specifying the increment number in the global model step at which the solution will
be used to specify the values of the driven variables. This argument is applicable only for
linear perturbation steps.
globalIncrement
A SymbolicConstant specifying the propagation state of the globalIncrement member.
Possible values are SET and UNCHANGED.
globalIncrementState
A String specifying the step in the global model from which Abaqus reads the values of the
variables that will drive the submodel analysis. The String indicates the position of the step
in the sequence of analysis steps. For example, globalStep='1' indicates the ﬁrst step.
globalStep
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
Abaqus Scripting Reference Guide
1154
SubmodelSBState object

A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*SUBMODEL
•
*DSLOAD, SUBMODEL
1155
Abaqus Scripting Reference Guide
SubmodelSBState object

SubstructureLoad object
The SubstructureLoad object deﬁnes a substructure load.
The SubstructureLoad object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SubstructureLoad(...)
This method creates a SubstructureLoad object.
Path
mdb.models[name].SubstructureLoad
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the substructure load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A list of names of the load cases that should be activated by this substructure load.
loadCaseNames
A Float specifying the multiplier for the load case magnitude.
magnitude
Optional arguments
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference. UNSET
should be used if the load has no amplitude reference. The default value is UNSET. You should
provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A SubstructureLoad object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SubstructureLoad object in the step where it is created.
Abaqus Scripting Reference Guide
1156
SubstructureLoad object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SubstructureLoad  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SubstructureLoad object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A list of names of the load cases that should be activated by this substructure load.
loadCaseNames
A Float specifying the multiplier for the load case magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible
values for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should
amplitude
be used if the amplitude is propagated from the previous analysis step. FREED should be
used if the load has no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The SubstructureLoad object can have the following members:
A String specifying the load repository key.
name
A Region object specifying the region to which the load is applied.
region
1157
Abaqus Scripting Reference Guide
SubstructureLoad object

SubstructureLoadState object
The SubstructureLoadState object stores the propagating data for a substructure load in a step. One instance of this
object is created internally by the SubstructureLoad object for each step. The instance is also deleted internally by the
SubstructureLoad object.
The SubstructureLoadState object has no constructor or methods.
The SubstructureLoadState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SubstructureLoadState object has the following members:
A tuple of strings specifying the names of the load cases to be activated.
loadCaseNames
A Float or a Complex specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible
values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*SLOAD
Abaqus Scripting Reference Guide
1158
SubstructureLoadState object

SurfaceCharge object
The SurfaceCharge object stores the data for a surface charge.
The SurfaceCharge object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SurfaceCharge(...)
This method creates a SurfaceCharge object.
Path
mdb.models[name].SurfaceCharge
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A SurfaceCharge object.
Exceptions
None.
1159
SurfaceCharge object

setValues(...)
This method modiﬁes the data for an existing SurfaceCharge object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceCharge  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceCharge object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The SurfaceCharge object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1160
SurfaceCharge object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1161
Abaqus Scripting Reference Guide
SurfaceCharge object

SurfaceChargeState object
The SurfaceChargeState object stores the propagating data of a surface charge in a step. One instance of this object is
created internally by the SurfaceCharge object for each step. The instance is also deleted internally by the SurfaceCharge
object.
The SurfaceChargeState object has no constructor or methods.
The SurfaceChargeState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SurfaceChargeState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSECHARGE (load type label: ES)
Abaqus Scripting Reference Guide
1162
SurfaceChargeState object

SurfaceConcentrationFlux object
The SurfaceConcentrationFlux object deﬁnes surface concentration ﬂux from a region or into a region.
The SurfaceConcentrationFlux object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SurfaceConcentrationFlux(...)
This method creates a SurfaceConcentrationFlux object.
Path
mdb.models[name].SurfaceConcentrationFlux
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the surface concentration ﬂux magnitude. magnitude is optional
if distributionType=USER_DEFINED.
magnitude
Optional arguments
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A SymbolicConstant specifying how the surface concentration ﬂux is distributed spatially.
Possible values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A SurfaceConcentrationFlux object.
Exceptions
None.
1163
SurfaceConcentrationFlux object

setValues(...)
This method modiﬁes the data for an existing SurfaceConcentrationFlux object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceConcentrationFlux  method,
except for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceConcentrationFlux object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the surface concentration ﬂux is
modiﬁed.
stepName
Optional arguments
A Float specifying the surface concentration ﬂux magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the load
has no amplitude reference. You should provide the amplitude argument only if it is valid for
the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The SurfaceConcentrationFlux object can have the following members:
Abaqus Scripting Reference Guide
1164
SurfaceConcentrationFlux object

A String specifying the load repository key.
name
A SymbolicConstant specifying how the surface concentration ﬂux is distributed spatially.
Possible values are UNIFORM, USER_DEFINED, and FIELD. The default value is
UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1165
Abaqus Scripting Reference Guide
SurfaceConcentrationFlux object

SurfaceConcentrationFluxState object
The SurfaceConcentrationFluxState object stores the propagating data for a SurfaceConcentrationFlux object in a step.
One instance of this object is created internally by the SurfaceConcentrationFlux object for each step. The instance is
also deleted internally by the SurfaceConcentrationFlux object.
The SurfaceConcentrationFluxState object has no constructor or methods.
The SurfaceConcentrationFluxState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SurfaceConcentrationFluxState object has the following members:
A Float specifying the surface concentration ﬂux magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the surface concentration ﬂux
magnitude. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSFLUX
Abaqus Scripting Reference Guide
1166
SurfaceConcentrationFluxState object

SurfaceCurrent object
The SurfaceCurrent object stores the data for a surface current.
The SurfaceCurrent object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SurfaceCurrent(...)
This method creates a SurfaceCurrent object.
Path
mdb.models[name].SurfaceCurrent
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be
the ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the load magnitude.
magnitude
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A SurfaceCurrent object.
Exceptions
None.
1167
SurfaceCurrent object

setValues(...)
This method modiﬁes the data for an existing SurfaceCurrent object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceCurrent  method, except for the
name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceCurrent object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float specifying the load magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if the
load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The SurfaceCurrent object can have the following members:
A String specifying the load repository key.
name
Abaqus Scripting Reference Guide
1168
SurfaceCurrent object

A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
1169
Abaqus Scripting Reference Guide
SurfaceCurrent object

SurfaceCurrentDensity object
The SurfaceCurrentDensity object stores the data for a surface current.
The SurfaceCurrentDensity object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SurfaceCurrentDensity(...)
This method creates a SurfaceCurrentDensity object.
Path
mdb.models[name].SurfaceCurrentDensity
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created. This must be the
ﬁrst analysis step name.
createStepName
A Region object specifying the region to which the load is applied.
region
A Complex specifying the ﬁrst component of the load.
comp1
A Complex specifying the second component of the load.
comp2
A Complex specifying the third component of the load.
comp3
Optional arguments
A SymbolicConstant specifying how the load is distributed spatially. Possible values are
UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A SurfaceCurrentDensity object.
Exceptions
None.
Abaqus Scripting Reference Guide
1170
SurfaceCurrentDensity object

setValues(...)
This method modiﬁes the data for an existing SurfaceCurrentDensity object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceCurrentDensity  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceCurrentDensity object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Complex specifying the ﬁrst component of the load.
comp1
A Complex specifying the second component of the load.
comp2
A Complex specifying the third component of the load.
comp3
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous static analysis step. FREED should be used if
the load is changed to have no amplitude reference. You should provide the amplitude argument
only if it is valid for the speciﬁed step.
Return value
None.
Exceptions
None.
1171
Abaqus Scripting Reference Guide
SurfaceCurrentDensity object

Members
The SurfaceCurrentDensity object can have the following members:
A String specifying the load repository key.
name
A SymbolicConstant specifying how the load is distributed spatially. Possible values
are UNIFORM and USER_DEFINED. The default value is UNIFORM.
distributionType
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1172
SurfaceCurrentDensity object

SurfaceCurrentState object
The SurfaceCurrentState object stores the propagating data of a surface current in a step. One instance of this object
is created internally by the SurfaceCurrent object for each step. The instance is also deleted internally by the
SurfaceCurrent object.
The SurfaceCurrentState object has no constructor or methods.
The SurfaceCurrentState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SurfaceCurrentState object has the following members:
A Float specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and FREED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSECURRENT (load type label: CS)
1173
SurfaceCurrentState object

SurfaceHeatFlux object
The SurfaceHeatFlux object deﬁnes surface heat ﬂux from a region or into a region.
The SurfaceHeatFlux object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SurfaceHeatFlux(...)
This method creates a SurfaceHeatFlux object.
Path
mdb.models[name].SurfaceHeatFlux
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the surface heat ﬂux magnitude. magnitude is optional if
distributionType=USER_DEFINED.
magnitude
Optional arguments
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A SymbolicConstant specifying how the surface heat ﬂux is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A SurfaceHeatFlux object.
Exceptions
None.
Abaqus Scripting Reference Guide
1174
SurfaceHeatFlux object

setValues(...)
This method modiﬁes the data for an existing SurfaceHeatFlux object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceHeatFlux  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceHeatFlux object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the surface heat ﬂux is modiﬁed.
stepName
Optional arguments
A Float specifying the surface heat ﬂux magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the load
has no amplitude reference. You should provide the amplitude argument only if it is valid for
the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The SurfaceHeatFlux object can have the following members:
A String specifying the load repository key.
name
1175
Abaqus Scripting Reference Guide
SurfaceHeatFlux object

A SymbolicConstant specifying how the surface heat ﬂux is distributed spatially. Possible
values are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1176
SurfaceHeatFlux object

SurfaceHeatFluxState object
The SurfaceHeatFluxState object stores the propagating data for a surface SurfaceHeatFlux object in a step. One
instance of this object is created internally by the SurfaceHeatFlux object for each step. The instance is also deleted
internally by the SurfaceHeatFlux object.
The SurfaceHeatFluxState object has no constructor or methods.
The SurfaceHeatFluxState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SurfaceHeatFluxState object has the following members:
A Float specifying the surface heat ﬂux magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the surface heat ﬂux magnitude.
Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSFLUX
1177
SurfaceHeatFluxState object

SurfacePoreFluid object
The SurfacePoreFluid object deﬁnes surface pore ﬂuid ﬂow from a region or into a region.
The SurfacePoreFluid object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SurfacePoreFluid(...)
This method creates a SurfacePoreFluid object.
Path
mdb.models[name].SurfacePoreFluid
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float specifying the surface pore ﬂuid ﬂow magnitude. magnitude is optional if
distributionType=USER_DEFINED.
magnitude
Optional arguments
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A SymbolicConstant specifying whether the load is uniform. Possible values are UNIFORM,
USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET.
You should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
Return value
A SurfacePoreFluid object.
Exceptions
None.
Abaqus Scripting Reference Guide
1178
SurfacePoreFluid object

setValues(...)
This method modiﬁes the data for an existing SurfacePoreFluid object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfacePoreFluid  method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfacePoreFluid object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the surface pore ﬂuid ﬂow is modiﬁed.
stepName
Optional arguments
A Float specifying the surface pore ﬂuid ﬂow magnitude.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if
amplitude
the amplitude is propagated from the previous analysis step. FREED should be used if the load
has no amplitude reference. You should provide the amplitude argument only if it is valid for
the speciﬁed step.
Return value
None.
Exceptions
None.
Members
The SurfacePoreFluid object can have the following members:
A String specifying the load repository key.
name
1179
Abaqus Scripting Reference Guide
SurfacePoreFluid object

A SymbolicConstant specifying whether the load is uniform. Possible values are UNIFORM,
USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The
ﬁeld argument applies only when distributionType=FIELD. The default value is an empty
string.
ﬁeld
A Region object specifying the region to which the load is applied.
region
Abaqus Scripting Reference Guide
1180
SurfacePoreFluid object

SurfacePoreFluidState object
The SurfacePoreFluidState object stores the propagating data for a SurfacePoreFluid object in a step. One instance of
this object is created internally by the SurfacePoreFluid object for each step. The instance is also deleted internally by
the SurfacePoreFluid object.
The SurfacePoreFluidState object has no constructor or methods.
The SurfacePoreFluidState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SurfacePoreFluidState object has the following members:
A Float specifying the surface pore ﬂuid ﬂow magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the surface pore ﬂuid ﬂow
magnitude. Possible values are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load has
no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSFLOW
1181
SurfacePoreFluidState object

SurfaceTraction object
The SurfaceTraction object deﬁnes surface traction on a region.
The SurfaceTraction object is derived from the Load object.
Access
import load
mdb.models[name].loads[name]
SurfaceTraction(...)
This method creates a SurfaceTraction object.
Path
mdb.models[name].SurfaceTraction
Required arguments
A String specifying the load repository key.
name
A String specifying the name of the step in which the load is created.
createStepName
A Region object specifying the region to which the load is applied.
region
A Float or Complex specifying the load magnitude. magnitude is optional if
distributionType=USER_DEFINED.
magnitude
Optional arguments
A SymbolicConstant specifying how the surface traction is distributed spatially. Possible values
are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the load has no amplitude reference. The default value is UNSET. You
should provide the amplitude argument only if it is valid for the speciﬁed step.
amplitude
A Float specifying an additional rotation of directionVector about an axis. The default value is
0.0.
angle
A SymbolicConstant specifying the axis about which to apply an additional rotation of
directionVector. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system of the load's degrees of
freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate system
localCsys
Abaqus Scripting Reference Guide
1182
SurfaceTraction object

or by the userCsys parameter if deﬁned. When this member is queried, it returns an Int. The
default value is None.
A String specifying a CSYS deﬁned by a user-subroutine. If userCsys=None, the degrees of
freedom are deﬁned in the global coordinate system or by the localCsys parameter if deﬁned.
The default value is "None".
userCsys
A VertexArray object of length 2 specifying the direction of the load. Instead of through a Vertex,
each point may be speciﬁed through a tuple of coordinates. If traction is SHEAR, then
directionVector
directionVector will be projected onto the region surface. This parameter is available only if
traction is GENERAL or SHEAR.
A Boolean specifying whether the direction of the force changes with rotation. The default value
is ON.
follower
This parameter may be modiﬁed only if traction is GENERAL. You should provide the follower
argument only if it is valid for the speciﬁed step.
A Boolean specifying whether the to maintain a constant resultant force by deﬁning traction per
unit undeformed area. If resultant is OFF, traction is deﬁned per unit deformed area. The default
value is OFF.
resultant
You should provide the resultant argument only if it is valid for the speciﬁed step.
A SymbolicConstant specifying how to apply surface traction. Possible values are SHEAR and
GENERAL. The default value is SHEAR.
traction
Return value
A SurfaceTraction object.
Exceptions
None.
setValues(...)
This method modiﬁes the data for an existing SurfaceTraction object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SurfaceTraction  method, except for the
name and createStepName arguments.
Return value
None.
1183
Abaqus Scripting Reference Guide
SurfaceTraction object

Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing SurfaceTraction object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the load is modiﬁed.
stepName
Optional arguments
A Float, a Complex, or the SymbolicConstant UNCHANGED specifying the load magnitude.
UNCHANGED should be used if the magnitude is propagated from the previous analysis step.
magnitude
A String or a SymbolicConstant specifying the name of the amplitude reference. Possible values
for the SymbolicConstant are UNCHANGED and FREED. UNCHANGED should be used if the
amplitude
amplitude is propagated from the previous analysis step. FREED should be used if the load has
no amplitude reference. You should provide the amplitude argument only if it is valid for the
speciﬁed step.
Return value
None.
Exceptions
None.
Members
The SurfaceTraction object can have the following members:
A String specifying the load repository key.
name
A Float specifying an additional rotation of directionVector about an axis. The default value is
0.0.
angle
A SymbolicConstant specifying the axis about which to apply an additional rotation of
directionVector. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Boolean specifying whether the direction of the force changes with rotation. The default value
is ON.
follower
This parameter may be modiﬁed only if traction is GENERAL. You should provide the follower
argument only if it is valid for the speciﬁed step.
Abaqus Scripting Reference Guide
1184
SurfaceTraction object

A Boolean specifying whether the to maintain a constant resultant force by deﬁning traction per
unit undeformed area. If resultant is OFF, traction is deﬁned per unit deformed area. The default
value is OFF.
resultant
You should provide the resultant argument only if it is valid for the speciﬁed step.
A SymbolicConstant specifying how to apply surface traction. Possible values are SHEAR and
GENERAL. The default value is SHEAR.
traction
A SymbolicConstant specifying how the surface traction is distributed spatially. Possible values
are UNIFORM, USER_DEFINED, and FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField object associated with this load. The ﬁeld
argument applies only when distributionType=FIELD. The default value is an empty string.
ﬁeld
A String specifying a CSYS deﬁned by a user-subroutine. If userCsys=None, the degrees of
freedom are deﬁned in the global coordinate system or by the localCsys parameter if deﬁned.
The default value is "None".
userCsys
None or a DatumCsys object specifying the local coordinate system of the load's degrees of
freedom. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate system
localCsys
or by the userCsys parameter if deﬁned. When this member is queried, it returns an Int. The
default value is None.
A VertexArray object of length 2 specifying the direction of the load. Instead of through a Vertex,
each point may be speciﬁed through a tuple of coordinates. If traction is SHEAR, then
directionVector
directionVector will be projected onto the region surface. This parameter is available only if
traction is GENERAL or SHEAR.
A Region object specifying the region to which the load is applied.
region
1185
Abaqus Scripting Reference Guide
SurfaceTraction object

SurfaceTractionState object
The SurfaceTractionState object stores the propagating data for a SurfaceTraction object in a step. One instance of
this object is created internally by the SurfaceTraction object for each step. The instance is also deleted internally by
the SurfaceTraction object.
The SurfaceTractionState object has no constructor or methods.
The SurfaceTractionState object is derived from the LoadState object.
Access
import load
mdb.models[name].steps[name].loadStates[name]
Members
The SurfaceTractionState object has the following members:
A Float or a Complex specifying the load magnitude.
magnitude
A SymbolicConstant specifying the propagation state of the load magnitude. Possible values
are UNSET, SET, UNCHANGED, and MODIFIED.
magnitudeState
A SymbolicConstant specifying the propagation state of the amplitude member. Possible
values are UNSET, SET, UNCHANGED, and FREED.
amplitudeState
A SymbolicConstant specifying the propagation state of the LoadState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
NO_LONGER_ACTIVE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
•
BUILT_INTO_BASE_STATE
A String specifying the name of the amplitude reference. The String is empty if the load
has no amplitude reference.
amplitude
Corresponding analysis keywords
•
*DSLOAD
•
*DLOAD
Abaqus Scripting Reference Guide
1186
SurfaceTractionState object

Material commands
The Material commands are used to deﬁne the materials in a model.
In this section:
•
Material object
•
AcousticMedium object
•
AnnealTemperature object
•
BiaxialTestData object
•
BrittleCracking object
•
BrittleFailure object
•
BrittleShear object
•
CapCreepCohesion object
•
CapCreepConsolidation object
•
CapHardening object
•
CapPlasticity object
•
CastIronCompressionHardening object
•
CastIronPlasticity object
•
CastIronTensionHardening object
•
ClayHardening object
•
ClayPlasticity object
•
CombinedTestData object
•
Concrete object
•
ConcreteCompressionDamage object
•
ConcreteCompressionHardening object
•
ConcreteDamagedPlasticity object
•
ConcreteTensionDamage object
•
ConcreteTensionStiffening object
•
Conductivity object
•
ContactArea object
•
Creep object
•
CrushableFoam object
•
CrushableFoamHardening object
•
CrushStress object
•
CrushStressVelocityFactor object
•
CycledPlastic object
•
CyclicHardening object
•
DamageEvolution object
•
DamageInitiation object
•
DamageStabilization object
•
DamageStabilizationCohesive object
•
Damping object
•
DeformationPlasticity object
1187

•
Density object
•
Depvar object
•
DetonationPoint object
•
Dielectric object
•
Diffusivity object
•
DruckerPrager object
•
DruckerPragerCreep object
•
DruckerPragerHardening object
•
Elastic object
•
ElectricalConductivity object
•
Eos object
•
EosCompaction object
•
Expansion object
•
FailStrain object
•
FailStress object
•
FailureRatios object
•
FluidLeakoff object
•
GapConductance object
•
GapConvection object
•
GapFlow object
•
GapRadiation object
•
GasketMembraneElastic object
•
GasketThicknessBehavior object
•
GasketTransverseShearElastic object
•
Gel object
•
HeatGeneration object
•
Hyperelastic object
•
Hyperfoam object
•
Hypoelastic object
•
Hysteresis object
•
InelasticHeatFraction object
•
JouleHeatFraction object
•
LatentHeat object
•
LowDensityFoam object
•
MagneticPermeability object
•
MeanFieldHomogenization object
•
MeanFieldInclusion object
•
MeanFieldMatrix object
•
MeanFieldVoid object
•
MohrCoulombHardening object
•
MohrCoulombPlasticity object
•
MoistureSwelling object
•
MullinsEffect object
•
Ornl object
•
Permeability object
•
Piezoelectric object
Abaqus Scripting Reference Guide
1188

•
PlanarTestData object
•
Plastic object
•
PlasticityCorrection object
•
PoreFluidExpansion object
•
PorousBulkModuli object
•
PorousElastic object
•
PorousFailureCriteria object
•
PorousMetalPlasticity object
•
Potential object
•
PressureEffect object
•
RateDependent object
•
Ratios object
•
Regularization object
•
SaturationDependence object
•
ShearRetention object
•
ShearTestData object
•
SimpleShearTestData object
•
Solubility object
•
SoretEffect object
•
Sorption object
•
SpecificHeat object
•
SuperElasticHardening object
•
SuperElasticHardeningModifications object
•
SuperElasticity object
•
Swelling object
•
TensileFailure object
•
TensionCutOff object
•
TensionStiffening object
•
TriaxialTestData object
•
Trs object
•
UniaxialTestData object
•
UserDefinedField object
•
UserMaterial object
•
UserOutputVariables object
•
VelocityDependence object
•
Viscoelastic object
•
Viscosity object
•
Viscous object
•
VoidNucleation object
•
VolumetricTestData object
•
evaluateMaterial
1189
Abaqus Scripting Reference Guide

Material object
A Material object is the object used to specify a material. The Material object stores the various settings that determine
how a material behaves.
A material is created by combining one or more individual material options and sub options. A particular material
option is associated with the Material object through a member. For example: the acousticMedium member may contain
an AcousticMedium object. The alternative of having a MaterialOption abstract base class and a container of
MaterialOptions was rejected because it would make it more difﬁcult to enforce the fact that one Material object cannot
contain two AcousticMedium objects, for example.
Access
import material
mdb.models[name].materials[name]
import odbMaterial
session.odbs[name].materials[name]
Material(...)
This method creates a Material object.
Path
mdb.models[name].Material
session.odbs[name].Material
Required arguments
A String specifying the name of the new material.
name
Optional arguments
A String specifying user description of the material. The default value is an empty
string.
description
A String specifying material identiﬁer for customer use. The default value is an
empty string.
materialIdentiﬁer
Return value
A Material object.
Exceptions
InvalidNameError.
materialsFromOdb(...)
This methods creates Material objects by reading an output database. The new materials are placed in the materials
repository.
Abaqus Scripting Reference Guide
1190
Material object

Path
mdb.models[name].materialsFromOdb
Required arguments
A String specifying the name of the output database ﬁle (including the .odb extension) to be
read. This String can also be the full path to the output database ﬁle if it is located in another
directory.
ﬁleName
Optional arguments
None.
Return value
A list of Material objects.
Exceptions
None.
Members
The Material object has members with the same names and descriptions as the arguments to the Material method.
In addition, the Material object can have the following members:
An AcousticMedium object.
acousticMedium
A BrittleCracking object.
brittleCracking
A CapPlasticity object.
capPlasticity
A CastIronPlasticity object.
castIronPlasticity
A ClayPlasticity object.
clayPlasticity
A Concrete object.
concrete
A ConcreteDamagedPlasticity object.
concreteDamagedPlasticity
A Conductivity object.
conductivity
A Creep object.
creep
A CrushableFoam object.
crushableFoam
A CrushStress object.
crushStress
A CrushStressVelocityFactor object.
CrushStressVelocityFactor
1191
Abaqus Scripting Reference Guide
Material object

A DamageInitiation object.
ductileDamageInitiation
A DamageInitiation object.
ﬂdDamageInitiation
A DamageInitiation object.
ﬂsdDamageInitiation
A DamageInitiation object.
johnsonCookDamageInitiation
A DamageInitiation object.
maxeDamageInitiation
A DamageInitiation object.
maxsDamageInitiation
A DamageInitiation object.
maxpeDamageInitiation
A DamageInitiation object.
maxpsDamageInitiation
A DamageInitiation object.
mkDamageInitiation
A DamageInitiation object.
msﬂdDamageInitiation
A DamageInitiation object.
quadeDamageInitiation
A DamageInitiation object.
quadsDamageInitiation
A DamageInitiation object.
shearDamageInitiation
A DamageInitiation object.
hashinDamageInitiation
A Damping object.
damping
A DeformationPlasticity object.
deformationPlasticity
A Density object.
density
A Depvar object.
depvar
A Dielectric object.
dielectric
A Diffusivity object.
diffusivity
A DruckerPrager object.
druckerPrager
An Elastic object.
elastic
An ElectricalConductivity object.
electricalConductivity
An Eos object.
eos
Abaqus Scripting Reference Guide
1192
Material object

An Expansion object.
expansion
A FluidLeakoff object.
ﬂuidLeakoff
A GapFlow object.
gapFlow
A GasketThicknessBehavior object.
gasketThicknessBehavior
A GasketTransverseShearElastic object.
gasketTransverseShearElastic
A GasketMembraneElastic object.
gasketMembraneElastic
A Gel object.
gel
A HeatGeneration object.
heatGeneration
A Hyperelastic object.
hyperelastic
A Hyperfoam object.
hyperfoam
A Hypoelastic object.
hypoelastic
An InelasticHeatFraction object.
inelasticHeatFraction
A JouleHeatFraction object.
jouleHeatFraction
A LatentHeat object.
latentHeat
A LowDensityFoam object.
lowDensityFoam
A MagneticPermeability object.
magneticPermeability
A MohrCoulombPlasticity object.
mohrCoulombPlasticity
A MoistureSwelling object.
moistureSwelling
A MullinsEffect object.
mullinsEffect
A Permeability object.
permeability
A Piezoelectric object.
piezoelectric
A Plastic object.
plastic
A PoreFluidExpansion object.
poreFluidExpansion
A PorousBulkModuli object.
porousBulkModuli
1193
Abaqus Scripting Reference Guide
Material object

A PorousElastic object.
porousElastic
A PorousMetalPlasticity object.
porousMetalPlasticity
A Regularization object.
regularization
A Solubility object.
solubility
A Sorption object.
sorption
A SpeciﬁcHeat object.
speciﬁcHeat
A Swelling object.
swelling
A UserDeﬁnedField object.
userDeﬁnedField
A UserMaterial object.
userMaterial
A UserOutputVariables object.
userOutputVariables
A Viscoelastic object.
viscoelastic
A Viscosity object.
viscosity
A Viscous object.
viscous
Corresponding analysis keywords
•
*MATERIAL
Abaqus Scripting Reference Guide
1194
Material object

AcousticMedium object
The AcousticMedium object speciﬁes the acoustic properties of a material.
Access
import material
mdb.models[name].materials[name].acousticMedium
import odbMaterial
session.odbs[name].materials[name].acousticMedium
AcousticMedium(...)
This method creates an AcousticMedium object.
Path
mdb.models[name].materials[name].AcousticMedium
session.odbs[name].materials[name].AcousticMedium
Required arguments
None.
Optional arguments
A Boolean specifying whether the volumetricTable data is speciﬁed. The default value
is OFF.
acousticVolumetricDrag
A Boolean specifying whether the data in bulkTable depend on temperature. The
default value is OFF.
temperatureDependencyB
A Boolean specifying whether the data in volumetricTable depend on temperature.
The default value is OFF.
temperatureDependencyV
An Int specifying the number of ﬁeld variable dependencies for the data in bulkTable.
The default value is 0.
dependenciesB
An Int specifying the number of ﬁeld variable dependencies for the data in
volumetricTable. The default value is 0.
dependenciesV
A sequence of sequences of Floats specifying the following:
bulkTable
•
Bulk modulus.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
1195
AcousticMedium object

A sequence of sequences of Floats specifying the following:
volumetricTable
•
Volumetric drag.
•
Frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
Return value
An AcousticMedium object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the AcousticMedium object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AcousticMedium  method.
Return value
None.
Exceptions
RangeError.
Members
The AcousticMedium object has members with the same names and descriptions as the arguments to the AcousticMedium
method.
Corresponding analysis keywords
•
*ACOUSTIC MEDIUM
Abaqus Scripting Reference Guide
1196
AcousticMedium object

AnnealTemperature object
The AnnealTemperature object speciﬁes the material annealing temperature.
Access
import material
mdb.models[name].materials[name].plastic.annealTemperature
import odbMaterial
session.odbs[name].materials[name].plastic.annealTemperature
AnnealTemperature(...)
This method creates an AnnealTemperature object.
Path
mdb.models[name].materials[name].plastic.AnnealTemperature
session.odbs[name].materials[name].plastic.AnnealTemperature
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
•
The annealing temperature, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
An AnnealTemperature object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the AnnealTemperature object.
1197
AnnealTemperature object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AnnealTemperature  method.
Return value
None.
Exceptions
RangeError.
Members
The AnnealTemperature object has members with the same names and descriptions as the arguments to the
AnnealTemperature  method.
Corresponding analysis keywords
•
*ANNEAL TEMPERATURE
Abaqus Scripting Reference Guide
1198
AnnealTemperature object

BiaxialTestData object
The BiaxialTestData object provides equibiaxial test data (compression and/or tension).
Access
import material
mdb.models[name].materials[name].hyperelastic.biaxialTestData
mdb.models[name].materials[name].hyperfoam.biaxialTestData
mdb.models[name].materials[name].mullinsEffect.biaxialTests[i]
import odbMaterial
session.odbs[name].materials[name].hyperelastic.biaxialTestData
session.odbs[name].materials[name].hyperfoam.biaxialTestData
session.odbs[name].materials[name].mullinsEffect.biaxialTests[i]
BiaxialTestData(...)
This method creates a BiaxialTestData object.
Path
mdb.models[name].materials[name].hyperelastic.BiaxialTestData
mdb.models[name].materials[name].hyperfoam.BiaxialTestData
mdb.models[name].materials[name].mullinsEffect.BiaxialTestData
session.odbs[name].materials[name].hyperelastic.BiaxialTestData
session.odbs[name].materials[name].hyperfoam.BiaxialTestData
session.odbs[name].materials[name].mullinsEffect.BiaxialTestData
Required arguments
A sequence of sequences of Floats specifying the following:
table
•
Nominal stress, 
.
•
Nominal strain, 
.
Optional arguments
None or an Int specifying the value for smoothing. If smoothing=None, no
smoothing is employed. The default value is None.
smoothing
A Boolean specifying whether to include lateral nominal strain. The default value
is OFF.
lateralNominalStrain
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
1199
BiaxialTestData object

Return value
A BiaxialTestData object.
Exceptions
None.
setValues(...)
This method modiﬁes the BiaxialTestData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BiaxialTestData  method.
Return value
None.
Exceptions
None.
Members
The BiaxialTestData object has members with the same names and descriptions as the arguments to the BiaxialTestData
method.
Corresponding analysis keywords
•
*BIAXIAL TEST DATA
Abaqus Scripting Reference Guide
1200
BiaxialTestData object

BrittleCracking object
The BrittleCracking object speciﬁes cracking and postcracking properties for the brittle cracking material model.
Access
import material
mdb.models[name].materials[name].brittleCracking
import odbMaterial
session.odbs[name].materials[name].brittleCracking
BrittleCracking(...)
This method creates a BrittleCracking object.
Path
mdb.models[name].materials[name].BrittleCracking
session.odbs[name].materials[name].BrittleCracking
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the type of postcracking behavior. Possible values
are STRAIN, DISPLACEMENT, and GFI. The default value is STRAIN.
type
Table data
If type=STRAIN the table data specify the following:
•
Remaining direct stress after cracking.
•
Direct cracking strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT the table data specify the following:
•
Remaining direct stress after cracking.
•
Direct cracking displacement.
1201
BrittleCracking object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=GFI the table data specify the following:
•
Failure stress.
•
Mode I fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BrittleCracking object.
Exceptions
None.
setValues(...)
This method modiﬁes the BrittleCracking object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BrittleCracking  method.
Return value
None.
Exceptions
None.
Members
The BrittleCracking object has members with the same names and descriptions as the arguments to the BrittleCracking
method.
In addition, the BrittleCracking object can have the following members:
A BrittleShear object.
brittleShear
A BrittleFailure object.
brittleFailure
Abaqus Scripting Reference Guide
1202
BrittleCracking object

Corresponding analysis keywords
•
*BRITTLE CRACKING
1203
Abaqus Scripting Reference Guide
BrittleCracking object

BrittleFailure object
The BrittleFailure object speciﬁes the brittle failure of the material.
Access
import material
mdb.models[name].materials[name].brittleCracking.brittleFailure
import odbMaterial
session.odbs[name].materials[name].brittleCracking.brittleFailure
BrittleFailure(...)
This method creates a BrittleFailure object.
Path
mdb.models[name].materials[name].brittleCracking.BrittleFailure
session.odbs[name].materials[name].brittleCracking.BrittleFailure
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
A SymbolicConstant specifying the failure criteria. Possible values are
UNIDIRECTIONAL, BIDIRECTIONAL, and TRIDIRECTIONAL. The default
value is UNIDIRECTIONAL.
failureCriteria
Table data
If parent BrittleCracking member type=STRAIN the table data specify the following:
•
Direct cracking failure strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If parent BrittleCracking member type=DISPLACEMENT or type=GFI the table data specify the following:
•
Direct cracking failure displacement.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
1204
BrittleFailure object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BrittleFailure object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the BrittleFailure object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BrittleFailure  method.
Return value
None.
Exceptions
RangeError.
Members
The BrittleFailure object has members with the same names and descriptions as the arguments to the BrittleFailure
method.
Corresponding analysis keywords
•
*BRITTLE FAILURE
1205
Abaqus Scripting Reference Guide
BrittleFailure object

BrittleShear object
The BrittleShear object speciﬁes the postcracking shear behavior of a material used in a brittle cracking model.
Access
import material
mdb.models[name].materials[name].brittleCracking.brittleShear
import odbMaterial
session.odbs[name].materials[name].brittleCracking.brittleShear
BrittleShear(...)
This method creates a BrittleShear object.
Path
mdb.models[name].materials[name].brittleCracking.BrittleShear
session.odbs[name].materials[name].brittleCracking.BrittleShear
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the type of postcracking shear behavior. Possible
values are RETENTION_FACTOR and POWER_LAW. The default value is
RETENTION_FACTOR.
type
Table data
If type=RETENTION_FACTOR the table data specify the following:
•
Shear retention factor.
•
Crack opening strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=POWER_LAW the table data specify the following:
•
e.
•
p.
Abaqus Scripting Reference Guide
1206
BrittleShear object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BrittleShear object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the BrittleShear object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BrittleShear  method.
Return value
None.
Exceptions
RangeError.
Members
The BrittleShear object has members with the same names and descriptions as the arguments to the BrittleShear
method.
Corresponding analysis keywords
•
*BRITTLE SHEAR
1207
Abaqus Scripting Reference Guide
BrittleShear object

CapCreepCohesion object
The CapCreepCohesion object speciﬁes a cap creep model and material properties.
Access
import material
mdb.models[name].materials[name].capPlasticity.capCreepCohesion
import odbMaterial
session.odbs[name].materials[name].capPlasticity.capCreepCohesion
CapCreepCohesion(...)
This method creates a CapCreepCohesion object.
Path
mdb.models[name].materials[name].capPlasticity.CapCreepCohesion
session.odbs[name].materials[name].capPlasticity.CapCreepCohesion
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the cap creep law. Possible values are STRAIN, TIME,
SINGHM, USER, POWER_LAW, and TIME_POWER_LAW. The default value is
STRAIN.
law
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the time increment for the relevant laws. Possible values
are CREEP and TOTAL. The default value is TOTAL.
time
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1208
CapCreepCohesion object

If law=SINGHM, the table data specify the following:
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If law=POWER_LAW or law=TIME_POWER_LAW, the table data specify the following:
•
•
•
•
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CapCreepCohesion object.
Exceptions
None.
setValues(...)
This method modiﬁes the CapCreepCohesion object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CapCreepCohesion method.
Return value
None.
Exceptions
None.
1209
Abaqus Scripting Reference Guide
CapCreepCohesion object

Members
The CapCreepCohesion object has members with the same names and descriptions as the arguments to the
CapCreepCohesion method.
Corresponding analysis keywords
•
*CAP CREEP
Abaqus Scripting Reference Guide
1210
CapCreepCohesion object

CapCreepConsolidation object
The CapCreepConsolidation object speciﬁes a cap creep model and material properties.
Access
import material
mdb.models[name].materials[name].capPlasticity.capCreepConsolidation
import odbMaterial
session.odbs[name].materials[name].capPlasticity.capCreepConsolidation
CapCreepConsolidation(...)
This method creates a CapCreepConsolidation object.
Path
mdb.models[name].materials[name].capPlasticity.CapCreepConsolidation
session.odbs[name].materials[name].capPlasticity.CapCreepConsolidation
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the cap creep law. Possible values are STRAIN, TIME,
SINGHM, and USER. The default value is STRAIN.
law
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the time increment for the relevant laws. Possible values
are CREEP and TOTAL. The default value is TOTAL.
time
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If law=SINGHM, the table data specify the following:
1211
CapCreepConsolidation object

•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If law=POWER_LAW or law=TIME_POWER_LAW, the table data specify the following:
•
•
•
•
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CapCreepConsolidation object.
Exceptions
None.
setValues(...)
This method modiﬁes the CapCreepConsolidation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CapCreepConsolidation method.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
1212
CapCreepConsolidation object

Members
The CapCreepConsolidation object has members with the same names and descriptions as the arguments to the
CapCreepConsolidation method.
Corresponding analysis keywords
•
*CAP CREEP
1213
Abaqus Scripting Reference Guide
CapCreepConsolidation object

CapHardening object
The CapHardening object speciﬁes Drucker-Prager/Cap plasticity hardening.
Access
import material
mdb.models[name].materials[name].capPlasticity.capHardening
import odbMaterial
session.odbs[name].materials[name].capPlasticity.capHardening
CapHardening(...)
This method creates a CapHardening object.
Path
mdb.models[name].materials[name].capPlasticity.CapHardening
session.odbs[name].materials[name].capPlasticity.CapHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Hydrostatic pressure yield stress.
•
Absolute value of the corresponding volumetric inelastic strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CapHardening object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1214
CapHardening object

setValues(...)
This method modiﬁes the CapHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CapHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The CapHardening object has members with the same names and descriptions as the arguments to the CapHardening
method.
Corresponding analysis keywords
•
*CAP HARDENING
1215
Abaqus Scripting Reference Guide
CapHardening object

CapPlasticity object
The CapPlasticity object speciﬁes the modiﬁed Drucker-Prager/Cap plasticity model.
Access
import material
mdb.models[name].materials[name].capPlasticity
import odbMaterial
session.odbs[name].materials[name].capPlasticity
CapPlasticity(...)
This method creates a CapPlasticity object.
Path
mdb.models[name].materials[name].CapPlasticity
session.odbs[name].materials[name].CapPlasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Material cohesion, , in the –  plane (Abaqus/Standard) or in the –  plane (Abaqus/Explicit).
•
Material angle of friction, , in the –  plane (Abaqus/Standard) or in the –  plane (Abaqus/Explicit). Give the
value in degrees.
•
Cap eccentricity parameter, . Its value must be greater than zero (typically 0.0 
 1.0).
•
Initial cap yield surface position, 
.
•
Transition surface radius parameter, . The default value is 0.0 (i.e., no transition surface).
•
(Not used in Abaqus/Explicit) 
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial
compression. Possible values are 0.778 
 1.0. If the default value of 0.0 is accepted, Abaqus/Standard assumes
 1.0.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
Abaqus Scripting Reference Guide
1216
CapPlasticity object

•
Etc.
Return value
A CapPlasticity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the CapPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CapPlasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The CapPlasticity object has members with the same names and descriptions as the arguments to the CapPlasticity
method.
In addition, the CapPlasticity object can have the following members:
A CapCreepCohesion object.
capCreepCohesion
A CapCreepConsolidation object.
capCreepConsolidation
A CapHardening object.
capHardening
Corresponding analysis keywords
•
*CAP PLASTICITY
1217
Abaqus Scripting Reference Guide
CapPlasticity object

CastIronCompressionHardening object
The CastIronCompressionHardening object speciﬁes hardening for the Cast- Iron plasticity model.
Access
import material
mdb.models[name].materials[name].castIronPlasticity\
.castIronCompressionHardening
import odbMaterial
session.odbs[name].materials[name].castIronPlasticity\
.castIronCompressionHardening
CastIronCompressionHardening(...)
This method creates a CastIronCompressionHardening object.
Path
mdb.models[name].materials[name].castIronPlasticity\
.CastIronCompressionHardening
session.odbs[name].materials[name].castIronPlasticity\
.CastIronCompressionHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Yield stress in compression, 
.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CastIronCompressionHardening object.
Abaqus Scripting Reference Guide
1218
CastIronCompressionHardening object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the CastIronCompressionHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CastIronCompressionHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The CastIronCompressionHardening object has members with the same names and descriptions as the arguments to
the CastIronCompressionHardening  method.
Corresponding analysis keywords
•
*CAST IRON COMPRESSION HARDENING
1219
Abaqus Scripting Reference Guide
CastIronCompressionHardening object

CastIronPlasticity object
The CastIronPlasticity object speciﬁes the Cast Iron plasticity model.
Access
import material
mdb.models[name].materials[name].castIronPlasticity
import odbMaterial
session.odbs[name].materials[name].castIronPlasticity
CastIronPlasticity(...)
This method creates a CastIronPlasticity object.
Path
mdb.models[name].materials[name].CastIronPlasticity
session.odbs[name].materials[name].CastIronPlasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
The table data specify the following:
•
Plastic Poisson's ratio, 
 (dimensionless).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CastIronPlasticity object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1220
CastIronPlasticity object

setValues(...)
This method modiﬁes the CastIronPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CastIronPlasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The CastIronPlasticity object has members with the same names and descriptions as the arguments to the
CastIronPlasticity  method.
In addition, the CastIronPlasticity object can have the following members:
A CastIronTensionHardening object.
castIronTensionHardening
A CastIronCompressionHardening object.
castIronCompressionHardening
Corresponding analysis keywords
•
*CAST IRON PLASTICITY
1221
Abaqus Scripting Reference Guide
CastIronPlasticity object

CastIronTensionHardening object
The CastIronTensionHardening object speciﬁes hardening for the Cast- Iron plasticity model.
Access
import material
mdb.models[name].materials[name].castIronPlasticity\
.castIronTensionHardening
import odbMaterial
session.odbs[name].materials[name].castIronPlasticity\
.castIronTensionHardening
CastIronTensionHardening(...)
This method creates a CastIronTensionHardening object.
Path
mdb.models[name].materials[name].castIronPlasticity\
.CastIronTensionHardening
session.odbs[name].materials[name].castIronPlasticity\
.CastIronTensionHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Yield stress in uniaxial tension, 
.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CastIronTensionHardening object.
Abaqus Scripting Reference Guide
1222
CastIronTensionHardening object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the CastIronTensionHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CastIronTensionHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The CastIronTensionHardening object has members with the same names and descriptions as the arguments to the
CastIronTensionHardening  method.
Corresponding analysis keywords
•
*CAST IRON TENSION HARDENING
1223
Abaqus Scripting Reference Guide
CastIronTensionHardening object

ClayHardening object
The ClayHardening object speciﬁes hardening for the clay plasticity model.
Access
import material
mdb.models[name].materials[name].clayPlasticity.clayHardening
import odbMaterial
session.odbs[name].materials[name].clayPlasticity.clayHardening
ClayHardening(...)
This method creates a ClayHardening object.
Path
mdb.models[name].materials[name].clayPlasticity.ClayHardening
session.odbs[name].materials[name].clayPlasticity.ClayHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
The hydrostatic pressure stress at yield, 
.
•
The absolute value of the corresponding volumetric plastic strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ClayHardening object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1224
ClayHardening object

setValues(...)
This method modiﬁes the ClayHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ClayHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The ClayHardening object has members with the same names and descriptions as the arguments to the ClayHardening
method.
Corresponding analysis keywords
•
*CLAY HARDENING
1225
Abaqus Scripting Reference Guide
ClayHardening object

ClayPlasticity object
The ClayPlasticity object speciﬁes the extended Cam-clay plasticity model.
Access
import material
mdb.models[name].materials[name].clayPlasticity
import odbMaterial
session.odbs[name].materials[name].clayPlasticity
ClayPlasticity(...)
This method creates a ClayPlasticity object.
Path
mdb.models[name].materials[name].ClayPlasticity
session.odbs[name].materials[name].ClayPlasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or a Float specifying 
, the intercept of the virgin consolidation line with the void
ratio axis in a plot of void ratio versus the logarithm of pressure stress. The default value
is None.
intercept
This argument is valid only if hardening=EXPONENTIAL.
A SymbolicConstant specifying the type of hardening/softening deﬁnition. Possible
values are EXPONENTIAL and TABULAR. The default value is EXPONENTIAL.
hardening
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If hardening=EXPONENTIAL, the table data specify the following:
•
Logarithmic plastic bulk modulus,  (dimensionless).
•
Stress ratio at critical state, 
.
•
The initial yield surface size, 
.
•
, the parameter deﬁning the size of the yield surface on the “wet” side of critical state.
•
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial compression. 
. If the
default value of 0.0 is accepted, a value of 1.0 is assumed.
Abaqus Scripting Reference Guide
1226
ClayPlasticity object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=TABULAR, the table data specify the following:
•
Stress ratio at critical state, 
.
•
The initial volumetric plastic strain, 
, corresponding to 
 according to the ClayHardening deﬁnition.
•
, the parameter deﬁning the size of the yield surface on the “wet” side of critical state.
•
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial compression. 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ClayPlasticity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ClayPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ClayPlasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The ClayPlasticity object has members with the same names and descriptions as the arguments to the ClayPlasticity
method.
In addition, the ClayPlasticity object can have the following member:
1227
Abaqus Scripting Reference Guide
ClayPlasticity object

A ClayHardening object.
clayHardening
Corresponding analysis keywords
•
*CLAY PLASTICITY
Abaqus Scripting Reference Guide
1228
ClayPlasticity object

CombinedTestData object
The CombinedTestData object speciﬁes simultaneously the normalized shear and bulk compliances or relaxation
moduli as functions of time.
Access
import material
mdb.models[name].materials[name].viscoelastic.combinedTestData
import odbMaterial
session.odbs[name].materials[name].viscoelastic.combinedTestData
CombinedTestData(...)
This method creates a CombinedTestData object.
Path
mdb.models[name].materials[name].viscoelastic.CombinedTestData
session.odbs[name].materials[name].viscoelastic.CombinedTestData
Required arguments
A sequence of sequences of Floats specifying the items described below. The values of the table
data depend on the value of the time member of the Viscoelastic object.
table
Optional arguments
None or a Float specifying a normalized volume. The value of volinf depends on the value of the time
member of the Viscoelastic object. The default value is None.
volinf
If time=RELAXATION_TEST_DATA, volinf speciﬁes the value of the long-term normalized volumetric
modulus, 
.
If time=CREEP_TEST_DATA, volinf speciﬁes the value of the long-term normalized volumetric
compliance, 
.
None or a Float specifying a normalized shear. The value of shrinf depends on the value of the time
member of the Viscoelastic object. The default value is None.
shrinf
If time=RELAXATION_TEST_DATA, shrinf speciﬁes the value of the long-term normalized shear
modulus, 
.
If time=CREEP_TEST_DATA, shrinf speciﬁes the value of the long-term normalized shear compliance,
.
Table data
If time=RELAXATION_TEST_DATA, the table data specify the following:
•
Normalized shear modulus, 
.
1229
CombinedTestData object

•
Normalized volumetric (bulk) modulus, 
.
•
Time 
.
If time=CREEP_TEST_DATA, the table data specify the following:
•
Normalized shear compliance, 
.
•
Normalized volumetric (bulk) compliance, 
.
•
Time 
.
Return value
A CombinedTestData object.
Exceptions
None.
setValues(...)
This method modiﬁes the CombinedTestData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CombinedTestData  method.
Return value
None.
Exceptions
None.
Members
The CombinedTestData object has members with the same names and descriptions as the arguments to the
CombinedTestData  method.
Corresponding analysis keywords
•
*COMBINED TEST DATA
Abaqus Scripting Reference Guide
1230
CombinedTestData object

Concrete object
The Concrete object deﬁnes concrete properties beyond the elastic range.
Access
import material
mdb.models[name].materials[name].concrete
import odbMaterial
session.odbs[name].materials[name].concrete
Concrete(...)
This method creates a Concrete object.
Path
mdb.models[name].materials[name].Concrete
session.odbs[name].materials[name].Concrete
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Absolute value of compressive stress.
•
Absolute value of plastic strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Concrete object.
Exceptions
RangeError.
1231
Concrete object

setValues(...)
This method modiﬁes the Concrete object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Concrete  method.
Return value
None.
Exceptions
RangeError.
Members
The Concrete object has members with the same names and descriptions as the arguments to the Concrete  method.
In addition, the Concrete object can have the following members:
A FailureRatios object.
failureRatios
A ShearRetention object.
shearRetention
A TensionStiffening object.
tensionStiffening
Corresponding analysis keywords
•
*CONCRETE
Abaqus Scripting Reference Guide
1232
Concrete object

ConcreteCompressionDamage object
The ConcreteCompressionDamage object speciﬁes hardening for the concrete damaged plasticity model.
Access
import material
mdb.models[name].materials[name].concreteDamagedPlasticity\
.concreteCompressionDamage
import odbMaterial
session.odbs[name].materials[name].concreteDamagedPlasticity\
.concreteCompressionDamage
ConcreteCompressionDamage(...)
This method creates a ConcreteCompressionDamage object.
Path
mdb.models[name].materials[name].concreteDamagedPlasticity\
.ConcreteCompressionDamage
session.odbs[name].materials[name].concreteDamagedPlasticity\
.ConcreteCompressionDamage
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Float specifying the value of the stiffness recovery factor, 
, that determines the
amount of tension stiffness that is recovered as loading changes from compression
to tension. The default value is 0.0.
tensionRecovery
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Compressive damage variable, 
.
•
Inelastic (crushing) strain, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
1233
ConcreteCompressionDamage object

Return value
A ConcreteCompressionDamage object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ConcreteCompressionDamage object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcreteCompressionDamage  method.
Return value
None.
Exceptions
RangeError.
Members
The ConcreteCompressionDamage object has members with the same names and descriptions as the arguments to the
ConcreteCompressionDamage  method.
Corresponding analysis keywords
•
*CONCRETE COMPRESSION DAMAGE
Abaqus Scripting Reference Guide
1234
ConcreteCompressionDamage object

ConcreteCompressionHardening object
The ConcreteCompressionHardening object speciﬁes hardening for the concrete damaged plasticity model.
Access
import material
mdb.models[name].materials[name].concreteDamagedPlasticity\
.concreteCompressionHardening
import odbMaterial
session.odbs[name].materials[name].concreteDamagedPlasticity\
.concreteCompressionHardening
ConcreteCompressionHardening(...)
This method creates a ConcreteCompressionHardening object.
Path
mdb.models[name].materials[name].concreteDamagedPlasticity\
.ConcreteCompressionHardening
session.odbs[name].materials[name].concreteDamagedPlasticity\
.ConcreteCompressionHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on rate. The default value is OFF.
rate
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
•
Yield stress in compression, 
.
•
Inelastic (crushing) strain, 
.
•
Inelastic (crushing) strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
1235
ConcreteCompressionHardening object

Return value
A ConcreteCompressionHardening object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ConcreteCompressionHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcreteCompressionHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The ConcreteCompressionHardening object has members with the same names and descriptions as the arguments to
the ConcreteCompressionHardening  method.
Corresponding analysis keywords
•
*CONCRETE COMPRESSION HARDENING
Abaqus Scripting Reference Guide
1236
ConcreteCompressionHardening object

ConcreteDamagedPlasticity object
The ConcreteDamagedPlasticity object speciﬁes the concrete damaged plasticity model.
Access
import material
mdb.models[name].materials[name].concreteDamagedPlasticity
import odbMaterial
session.odbs[name].materials[name].concreteDamagedPlasticity
ConcreteDamagedPlasticity(...)
This method creates a ConcreteDamagedPlasticity object.
Path
mdb.models[name].materials[name].ConcreteDamagedPlasticity
session.odbs[name].materials[name].ConcreteDamagedPlasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
The table data specify the following:
•
Dilation angle,  (in degrees) in the –  plane.
•
Flow potential eccentricity, . The default value is 0.1.
•
, the ratio of initial equibiaxial compressive yield stress to initial uniaxial compressive yield stress. The
default value is 1.16.
•
, the ratio of the second stress invariant on the tensile meridian, to that on the compressive meridian, at initial
yield for any given value of the pressure invariant  such that the maximum principal stress is negative. The default
value is 2/3.
•
Viscosity parameter, , used for the viscoplastic regularization of the concrete constitutive equations in an
Abaqus/Standard analysis. This parameter is ignored in an Abaqus/Explicit analysis. The default value is 0.0.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
1237
ConcreteDamagedPlasticity object

•
Etc.
Return value
A ConcreteDamagedPlasticity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ConcreteDamagedPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcreteDamagedPlasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The ConcreteDamagedPlasticity object has members with the same names and descriptions as the arguments to the
ConcreteDamagedPlasticity  method.
In addition, the ConcreteDamagedPlasticity object can have the following members:
A ConcreteCompressionHardening object.
concreteCompressionHardening
A ConcreteTensionStiffening object.
concreteTensionStiffening
A ConcreteCompressionDamage object.
concreteCompressionDamage
A ConcreteTensionDamage object.
concreteTensionDamage
Corresponding analysis keywords
•
*CONCRETE DAMAGED PLASTICITY
Abaqus Scripting Reference Guide
1238
ConcreteDamagedPlasticity object

ConcreteTensionDamage object
The ConcreteTensionDamage object speciﬁes hardening for the concrete damaged plasticity model.
Access
import material
mdb.models[name].materials[name].concreteDamagedPlasticity\
.concreteTensionDamage
import odbMaterial
session.odbs[name].materials[name].concreteDamagedPlasticity\
.concreteTensionDamage
ConcreteTensionDamage(...)
This method creates a ConcreteTensionDamage object.
Path
mdb.models[name].materials[name].concreteDamagedPlasticity\
.ConcreteTensionDamage
session.odbs[name].materials[name].concreteDamagedPlasticity\
.ConcreteTensionDamage
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Float specifying the value of the stiffness recovery factor, 
, that determines the amount
of compression stiffness that is recovered as loading changes from tension to compression.
The default value is 1.0.
compressionRecovery
A SymbolicConstant specifying the type of tensile damage data. Set type=STRAIN to
specify the tensile damage variable as a function of cracking strain. Set
type
type=DISPLACEMENT to specify the tensile damage variable as a function of cracking
displacement. Possible values are STRAIN and DISPLACEMENT. The default value is
STRAIN.
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRAIN, the table data specify the following:
•
Tensile damage variable, 
.
•
Direct cracking strain, 
.
1239
ConcreteTensionDamage object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, the table data specify the following:
•
Tensile damage variable, 
.
•
Direct cracking displacement, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConcreteTensionDamage object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ConcreteTensionDamage object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcreteTensionDamage  method.
Return value
None.
Exceptions
RangeError.
Members
The ConcreteTensionDamage object has members with the same names and descriptions as the arguments to the
ConcreteTensionDamage  method.
Corresponding analysis keywords
•
*CONCRETE TENSION DAMAGE
Abaqus Scripting Reference Guide
1240
ConcreteTensionDamage object

ConcreteTensionStiffening object
The ConcreteTensionStiffening object speciﬁes hardening for the concrete damaged plasticity model.
Access
import material
mdb.models[name].materials[name].concreteDamagedPlasticity\
.concreteTensionStiffening
import odbMaterial
session.odbs[name].materials[name].concreteDamagedPlasticity\
.concreteTensionStiffening
ConcreteTensionStiffening(...)
This method creates a ConcreteTensionStiffening object.
Path
mdb.models[name].materials[name].concreteDamagedPlasticity\
.ConcreteTensionStiffening
session.odbs[name].materials[name].concreteDamagedPlasticity\
.ConcreteTensionStiffening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on rate. The default value is OFF.
rate
A SymbolicConstant specifying the type of postcracking behavior data. Possible values
are:
type
•
STRAIN, specifying postfailure stress as a function of cracking strain.
•
DISPLACEMENT, specifying postfailure stress as a function of cracking displacement.
•
GFI, specifying failure stress as a function of the fracture energy.
The default value is STRAIN.
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRAIN, the table data specify the following:
•
Remaining direct stress after cracking, 
.
•
Direct cracking strain, 
.
1241
ConcreteTensionStiffening object

•
Direct cracking strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, the table data specify the following:
•
Remaining direct stress after cracking, 
.
•
Direct cracking displacement, 
.
•
Direct cracking displacement rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=GFI, the table data specify the following:
•
Failure stress, 
.
•
Fracture energy, 
.
•
Direct cracking displacement rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConcreteTensionStiffening object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ConcreteTensionStiffening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConcreteTensionStiffening  method.
Abaqus Scripting Reference Guide
1242
ConcreteTensionStiffening object

Return value
None.
Exceptions
RangeError.
Members
The ConcreteTensionStiffening object has members with the same names and descriptions as the arguments to the
ConcreteTensionStiffening  method.
Corresponding analysis keywords
•
*CONCRETE TENSION STIFFENING
1243
Abaqus Scripting Reference Guide
ConcreteTensionStiffening object

Conductivity object
The Conductivity object speciﬁes thermal conductivity.
Access
import material
mdb.models[name].materials[name].conductivity
import odbMaterial
session.odbs[name].materials[name].conductivity
Conductivity(...)
This method creates a Conductivity object.
Path
mdb.models[name].materials[name].Conductivity
session.odbs[name].materials[name].Conductivity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of conductivity. Possible values are
ISOTROPIC, ORTHOTROPIC, and ANISOTROPIC. The default value is
ISOTROPIC.
type
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Conductivity, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
Abaqus Scripting Reference Guide
1244
Conductivity object

•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Conductivity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Conductivity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Conductivity  method.
Return value
None.
Exceptions
RangeError.
1245
Abaqus Scripting Reference Guide
Conductivity object

Members
The Conductivity object has members with the same names and descriptions as the arguments to the Conductivity
method.
Corresponding analysis keywords
•
*CONDUCTIVITY
Abaqus Scripting Reference Guide
1246
Conductivity object

ContactArea object
A ContactArea object speciﬁes a suboption of gasket thickness behavior when variableUnits=FORCE on the
GasketThicknessBehavior object. The ContactArea object deﬁnes the contact area or contact width versus closure
curves to output an average pressure through variable CS11.
Access
import material
mdb.models[name].materials[name].gasketThicknessBehavior.contactArea
import odbMaterial
session.odbs[name].materials[name].gasketThicknessBehavior.contactArea
ContactArea(...)
This method creates a ContactArea object.
Path
mdb.models[name].materials[name].gasketThicknessBehavior.ContactArea
session.odbs[name].materials[name].gasketThicknessBehavior.ContactArea
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether contact area data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies included in the deﬁnition
of the contact area data, in addition to temperature. The default value is 0.
dependencies
Table data
•
Contact area or width; this value must be positive.
•
Closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ContactArea object.
Exceptions
None.
1247
ContactArea object

setValues(...)
This method modiﬁes the ContactArea object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ContactArea  method.
Return value
None.
Exceptions
None.
Members
The ContactArea object has members with the same names and descriptions as the arguments to the ContactArea
method.
Corresponding analysis keywords
•
*GASKET CONTACT AREA
Abaqus Scripting Reference Guide
1248
ContactArea object

Creep object
The Creep object deﬁnes a creep law.
Access
import material
mdb.models[name].materials[name].creep
import odbMaterial
session.odbs[name].materials[name].creep
Creep(...)
This method creates a Creep object.
Path
mdb.models[name].materials[name].Creep
session.odbs[name].materials[name].Creep
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the strain-hardening law. Possible values are STRAIN,
TIME, HYPERBOLIC_SINE, USER, ANAND, DARVEAUX,DOUBLE_POWER,
POWER_LAW, and TIME_POWER_LAW. The default value is STRAIN.
law
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the time interval for relevant laws. Possible values are
CREEP and TOTAL. The default value is TOTAL.
time
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If law=HYPERBOLIC_SINE, the table data specify the following:
1249
Creep object

•
.
•
.
•
.
•
, if the data depend on temperature.
•
.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If law=ANAND, the table data specify the following:
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
If law=DARVEAUX, the table data specify the following:
•
•
•
•
•
•
If law=DOUBLE_POWER, the table data specify the following:
Abaqus Scripting Reference Guide
1250
Creep object

•
•
•
•
•
•
•
If law=POWER_LAW or law=TIME_POWER_LAW, the table data specify the following:
•
•
•
•
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Creep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Creep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Creep method.
Return value
None.
Exceptions
RangeError.
1251
Abaqus Scripting Reference Guide
Creep object

Members
The Creep object has members with the same names and descriptions as the arguments to the Creep method.
In addition, the Creep object can have the following members:
An Ornl object.
ornl
A Potential object.
potential
Corresponding analysis keywords
•
*CREEP
Abaqus Scripting Reference Guide
1252
Creep object

CrushableFoam object
The CrushableFoam object speciﬁes the crushable foam plasticity model.
Access
import material
mdb.models[name].materials[name].crushableFoam
import odbMaterial
session.odbs[name].materials[name].crushableFoam
CrushableFoam(...)
This method creates a CrushableFoam object.
Path
mdb.models[name].materials[name].CrushableFoam
session.odbs[name].materials[name].CrushableFoam
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of hardening/softening deﬁnition. Possible
values are VOLUMETRIC and ISOTROPIC. The default value is VOLUMETRIC.
hardening
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If hardening=VOLUMETRIC, the table data specify the following:
•
Ratio, , of initial yield stress in uniaxial compression, 
, to initial yield stress in hydrostatic compression, 
;
0.0 
 3.0.
•
Ratio, 
, of yield stress in hydrostatic tension, 
, to initial yield stress in hydrostatic compression, 
. The default
value is 1.0.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=ISOTROPIC, the table data specify the following:
1253
CrushableFoam object

•
Ratio, , of initial yield stress in uniaxial compression, 
, to initial yield stress in hydrostatic compression, 
;
0.0 
 3.0.
•
Plastic Poisson's ratio.
; -1
0.5.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CrushableFoam object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the CrushableFoam object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CrushableFoam  method.
Return value
None.
Exceptions
RangeError.
Members
The CrushableFoam object has members with the same names and descriptions as the arguments to the CrushableFoam
method.
In addition, the CrushableFoam object can have the following members:
A CrushableFoamHardening object.
crushableFoamHardening
A RateDependent object.
rateDependent
Corresponding analysis keywords
•
*CRUSHABLE FOAM
Abaqus Scripting Reference Guide
1254
CrushableFoam object

CrushableFoamHardening object
The CrushableFoamHardening object speciﬁes hardening for the crushable foam plasticity model.
Access
import material
mdb.models[name].materials[name].crushableFoam.crushableFoamHardening
import odbMaterial
session.odbs[name].materials[name].crushableFoam\
.crushableFoamHardening
CrushableFoamHardening(...)
This method creates a CrushableFoamHardening object.
Path
mdb.models[name].materials[name].crushableFoam.CrushableFoamHardening
session.odbs[name].materials[name].crushableFoam\
.CrushableFoamHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
The yield stress in uniaxial compression, 
.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CrushableFoamHardening object.
Exceptions
RangeError.
1255
CrushableFoamHardening object

setValues(...)
This method modiﬁes the CrushableFoamHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CrushableFoamHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The CrushableFoamHardening object has members with the same names and descriptions as the arguments to the
CrushableFoamHardening  method.
Corresponding analysis keywords
•
*CRUSHABLE FOAM HARDENING
Abaqus Scripting Reference Guide
1256
CrushableFoamHardening object

CrushStress object
The CrushStress object speciﬁes the crush stress of a material.
Access
import material
mdb.models[name].materials[name].crushStress
import odbMaterial
session.odbs[name].materials[name].crushStress
CrushStress(...)
This method creates a CrushStress object.
Path
mdb.models[name].materials[name].CrushStress
session.odbs[name].materials[name].CrushStress
Required arguments
A sequence of sequences of Floats specifying the items described below.
crushStressTable
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
The table data specify the following:
•
Crush Stress.
•
Material angle in degrees.
•
Temperature if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CrushStress object.
Exceptions
None.
1257
CrushStress object

setValues(...)
This method modiﬁes the CrushStress object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CrushStress method.
Return value
None.
Exceptions
None.
Members
The CrushStress object has members with the same names and descriptions as the arguments to the CrushStress method.
In addition, the CrushStress object can have the following members:
A CrushStressVelocityFactor object.
crushStressVelocityFactor
Corresponding analysis keywords
•
*CRUSH STRESS
Abaqus Scripting Reference Guide
1258
CrushStress object

CrushStressVelocityFactor object
The CrushStressVelocityFactor object deﬁnes how the approach velocity at a crushing interface inﬂuences a material's
resistance to crushing.
Access
import material
mdb.models[name].materials[name].crushStress.crushStressVelocityFactor
import odbMaterial
session.odbs[name].materials[name].crushStress.crushStressVelocityFactor
CrushStressVelocityFactor(...)
This method creates a CrushStressVelocityFactor object.
Path
mdb.models[name].materials[name].crushStress.CrushStressVelocityFactor
session.odbs[name].materials[name].crushStress.CrushStressVelocityFactor
Required arguments
A sequence of sequences of Floats specifying the items described
below.
crushStressVelocityFactorTable
Table data
The table data specify the following:
•
Scaling factor.
•
Relative velocity.
Return value
A CrushStressVelocityFactor object.
Exceptions
None.
setValues(...)
This method modiﬁes the CrushStressVelocityFactor object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CrushStressVelocityFactor method.
1259
CrushStressVelocityFactor object

Return value
None.
Exceptions
None.
Members
The CrushStressVelocityFactor object has members with the same names and descriptions as the arguments to the
CrushStressVelocityFactor method.
Corresponding analysis keywords
•
*CRUSH STRESS VELOCITY FACTOR
Abaqus Scripting Reference Guide
1260
CrushStressVelocityFactor object

CycledPlastic object
The CycledPlastic object speciﬁes cycled yield stress data for the ORNL constitutive model.
Access
import material
mdb.models[name].materials[name].plastic.cycledPlastic
import odbMaterial
session.odbs[name].materials[name].plastic.cycledPlastic
CycledPlastic(...)
This method creates a CycledPlastic object.
Path
mdb.models[name].materials[name].plastic.CycledPlastic
session.odbs[name].materials[name].plastic.CycledPlastic
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
Table data
•
Yield stress.
•
Plastic strain.
•
Temperature, if the data depend on temperature.
Return value
A CycledPlastic object.
Exceptions
None.
setValues(...)
This method modiﬁes the CycledPlastic object.
Required arguments
None.
1261
CycledPlastic object

Optional arguments
The optional arguments to setValues are the same as the arguments to the CycledPlastic  method.
Return value
None.
Exceptions
None.
Members
The CycledPlastic object has members with the same names and descriptions as the arguments to the CycledPlastic
method.
Corresponding analysis keywords
•
*CYCLED PLASTIC
Abaqus Scripting Reference Guide
1262
CycledPlastic object

CyclicHardening object
The CyclicHardening object deﬁnes the evolution of the elastic domain for the nonlinear isotropic/kinematic hardening
model.
Access
import material
mdb.models[name].materials[name].plastic.cyclicHardening
import odbMaterial
session.odbs[name].materials[name].plastic.cyclicHardening
CyclicHardening(...)
This method creates a CyclicHardening object.
Path
mdb.models[name].materials[name].plastic.CyclicHardening
session.odbs[name].materials[name].plastic.CyclicHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
A Boolean specifying whether material parameters are to be input directly. The
default value is OFF.
parameters
Table data
•
Equivalent stress.
•
 (only if parameters=ON).
•
Hardening parameter (only if parameters=ON).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
1263
CyclicHardening object

Return value
A CyclicHardening object.
Exceptions
None.
setValues(...)
This method modiﬁes the CyclicHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CyclicHardening  method.
Return value
None.
Exceptions
None.
Members
The CyclicHardening object has members with the same names and descriptions as the arguments to the CyclicHardening
method.
Corresponding analysis keywords
•
*CYCLIC HARDENING
Abaqus Scripting Reference Guide
1264
CyclicHardening object

DamageEvolution object
The DamageEvolution object speciﬁes material properties to deﬁne the evolution of damage.
Access
import material
mdb.models[name].materials[name].ductileDamageInitiation\
.damageEvolution
mdb.models[name].materials[name].fldDamageInitiation.damageEvolution
mdb.models[name].materials[name].flsdDamageInitiation.damageEvolution
mdb.models[name].materials[name].hashinDamageInitiation\
.damageEvolution
mdb.models[name].materials[name].johnsonCookDamageInitiation\
.damageEvolution
mdb.models[name].materials[name].maxeDamageInitiation.damageEvolution
mdb.models[name].materials[name].maxpeDamageInitiation.damageEvolution
mdb.models[name].materials[name].maxpsDamageInitiation.damageEvolution
mdb.models[name].materials[name].maxsDamageInitiation.damageEvolution
mdb.models[name].materials[name].mkDamageInitiation.damageEvolution
mdb.models[name].materials[name].msfldDamageInitiation.damageEvolution
mdb.models[name].materials[name].quadeDamageInitiation.damageEvolution
mdb.models[name].materials[name].quadsDamageInitiation.damageEvolution
mdb.models[name].materials[name].shearDamageInitiation.damageEvolution
import odbMaterial
session.odbs[name].materials[name].ductileDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].fldDamageInitiation.damageEvolution
session.odbs[name].materials[name].flsdDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].hashinDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].johnsonCookDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].maxeDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].maxpeDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].maxpsDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].maxsDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].mkDamageInitiation.damageEvolution
session.odbs[name].materials[name].msfldDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].quadeDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].quadsDamageInitiation\
.damageEvolution
session.odbs[name].materials[name].shearDamageInitiation\
.damageEvolution
DamageEvolution(...)
This method creates a DamageEvolution object.
1265
DamageEvolution object

Path
mdb.models[name].materials[name].ductileDamageInitiation\
.DamageEvolution
mdb.models[name].materials[name].fldDamageInitiation.DamageEvolution
mdb.models[name].materials[name].flsdDamageInitiation.DamageEvolution
mdb.models[name].materials[name].hashinDamageInitiation\
.DamageEvolution
mdb.models[name].materials[name].johnsonCookDamageInitiation\
.DamageEvolution
mdb.models[name].materials[name].maxeDamageInitiation.DamageEvolution
mdb.models[name].materials[name].maxpeDamageInitiation.DamageEvolution
mdb.models[name].materials[name].maxpsDamageInitiation.DamageEvolution
mdb.models[name].materials[name].maxsDamageInitiation.DamageEvolution
mdb.models[name].materials[name].mkDamageInitiation.DamageEvolution
mdb.models[name].materials[name].msfldDamageInitiation.DamageEvolution
mdb.models[name].materials[name].quadeDamageInitiation.DamageEvolution
mdb.models[name].materials[name].quadsDamageInitiation.DamageEvolution
mdb.models[name].materials[name].shearDamageInitiation.DamageEvolution
session.odbs[name].materials[name].ductileDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].fldDamageInitiation.DamageEvolution
session.odbs[name].materials[name].flsdDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].hashinDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].johnsonCookDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].maxeDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].maxpeDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].maxpsDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].maxsDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].mkDamageInitiation.DamageEvolution
session.odbs[name].materials[name].msfldDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].quadeDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].quadsDamageInitiation\
.DamageEvolution
session.odbs[name].materials[name].shearDamageInitiation\
.DamageEvolution
Required arguments
A SymbolicConstant specifying the type of damage evolution. Possible values are
DISPLACEMENT and ENERGY.
type
A sequence of sequences of Floats specifying the items described below.
table
Abaqus Scripting Reference Guide
1266
DamageEvolution object

Optional arguments
A SymbolicConstant specifying the degradation. Possible values are MAXIMUM and
MULTIPLICATIVE. The default value is MAXIMUM.
degradation
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the mixed mode behavior. Possible values are
MODE_INDEPENDENT, TABULAR, POWER_LAW, and BK. The default value is
MODE_INDEPENDENT.
mixedModeBehavior
A SymbolicConstant specifying the mode mix ratio. Possible values are ENERGY and
TRACTION. The default value is ENERGY.
modeMixRatio
None or a Float specifying the exponent in the power law or the Benzeggagh-Kenane
criterion that deﬁnes the variation of fracture energy with mode mix for cohesive
elements. The default value is None.
power
A SymbolicConstant specifying the softening. Possible values are LINEAR,
EXPONENTIAL, and TABULAR. The default value is LINEAR.
softening
Table data
If type=DISPLACEMENT, and softening=LINEAR, and mixedModeBehavior=MODE_INDEPENDENT, the table
data specify the following:
•
Equivalent total or plastic displacement at failure, measured from the time of damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=LINEAR, and mixedModeBehavior=MODE_INDEPENDENT, the table data specify
the following:
•
Fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=LINEAR, and mixedModeBehavior=TABULAR, the table data specify the
following:
•
Total displacement at failure, measured from the time of damage initiation.
•
Appropriate mode mix ratio.
1267
Abaqus Scripting Reference Guide
DamageEvolution object

•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=LINEAR, and mixedModeBehavior=TABULAR, the table data specify the following:
•
Fracture energy.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=EXPONENTIAL, and mixedModeBehavior=MODE_INDEPENDENT, the
table data specify the following:
•
Equivalent total or plastic displacement at failure, measured from the time of damage initiation.
•
Exponential law parameter.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=EXPONENTIAL, and mixedModeBehavior=MODE_INDEPENDENT, the table
data specify the following:
•
Fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=EXPONENTIAL, and mixedModeBehavior=TABULAR, the table data
specify the following:
•
Total displacement at failure, measured from the time of damage initiation.
•
Exponential law parameter.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1268
DamageEvolution object

If type=ENERGY, and softening=EXPONENTIAL, and mixedModeBehavior=TABULAR, the table data specify the
following:
•
Fracture energy.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=TABULAR, and mixedModeBehavior=MODE_INDEPENDENT, the table
data specify the following:
•
Damage variable.
•
Equivalent total or plastic displacement, measured from the time of damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=TABULAR, and mixedModeBehavior=TABULAR, the table data specify
the following:
•
Damage variable.
•
Equivalent total or plastic displacement, measured from the time of damage initiation.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=LINEAR or EXPONENTIAL, and mixedModeBehavior=POWER_LAW or BK, the
table data specify the following:
•
Normal mode fracture energy.
•
Shear mode fracture energy for failure in the ﬁrst shear direction.
•
Shear mode fracture energy for failure in the second shear direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, softening=LINEAR and constructor for DamageInitiation=HashinDamageInitiation the table data
specify the following:
1269
Abaqus Scripting Reference Guide
DamageEvolution object

•
Fiber tensile fracture energy.
•
Fiber compressive fracture energy.
•
Matrix tensile fracture energy.
•
Matrix compressive fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DamageEvolution object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DamageEvolution object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DamageEvolution  method.
Return value
None.
Exceptions
RangeError.
Members
The DamageEvolution object has members with the same names and descriptions as the arguments to the
DamageEvolution  method.
Corresponding analysis keywords
•
*DAMAGE EVOLUTION
Abaqus Scripting Reference Guide
1270
DamageEvolution object

DamageInitiation object
The DamageInitiation object speciﬁes material properties to deﬁne the initiation of damage.
Access
import material
mdb.models[name].materials[name].ductileDamageInitiation
mdb.models[name].materials[name].fldDamageInitiation
mdb.models[name].materials[name].flsdDamageInitiation
mdb.models[name].materials[name].hashinDamageInitiation
mdb.models[name].materials[name].johnsonCookDamageInitiation
mdb.models[name].materials[name].maxeDamageInitiation
mdb.models[name].materials[name].maxpeDamageInitiation
mdb.models[name].materials[name].maxpsDamageInitiation
mdb.models[name].materials[name].maxsDamageInitiation
mdb.models[name].materials[name].mkDamageInitiation
mdb.models[name].materials[name].msfldDamageInitiation
mdb.models[name].materials[name].quadeDamageInitiation
mdb.models[name].materials[name].quadsDamageInitiation
mdb.models[name].materials[name].shearDamageInitiation
mdb.models[name].materials[name].larc05DamageInitiation
mdb.models[name].materials[name].HosfordCoulombDamageInitiation
import odbMaterial
session.odbs[name].materials[name].ductileDamageInitiation
session.odbs[name].materials[name].fldDamageInitiation
session.odbs[name].materials[name].flsdDamageInitiation
session.odbs[name].materials[name].hashinDamageInitiation
session.odbs[name].materials[name].johnsonCookDamageInitiation
session.odbs[name].materials[name].maxeDamageInitiation
session.odbs[name].materials[name].maxpeDamageInitiation
session.odbs[name].materials[name].maxpsDamageInitiation
session.odbs[name].materials[name].maxsDamageInitiation
session.odbs[name].materials[name].mkDamageInitiation
session.odbs[name].materials[name].msfldDamageInitiation
session.odbs[name].materials[name].quadeDamageInitiation
session.odbs[name].materials[name].quadsDamageInitiation
session.odbs[name].materials[name].shearDamageInitiation
session.odbs[name].materials[name].laRC05DamageInitiation
session.odbs[name].materials[name].HosfordCoulombDamageInitiation
DuctileDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].DuctileDamageInitiation
session.odbs[name].materials[name].DuctileDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
1271
DamageInitiation object

Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A Boolean specifying whether the data depend on lode dependent data. The default value
is OFF.
lodeDependency
A Float specifying the value of the power coefﬁcient, N. The default value is 0.0.
accumulationPower
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Table data
If the constructor is DuctileDamageInitiation, the table data specify the following:
•
Equivalent fracture strain at damage initiation.
•
Stress triaxiality.
Abaqus Scripting Reference Guide
1272
DamageInitiation object

•
Lode-dependent, if the data depend on lode angle.
•
Strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is FldDamageInitiation, the table data specify the following:
•
Major principal strain at damage initiation.
•
Minor principal strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor FlsdDamageInitiation, the table data specify the following:
•
Major principal stress at damage initiation.
•
Minor principal stress.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is JohnsonCookDamageInitiation, the table data specify the following:
•
Johnson-Cook failure parameter D1.
•
Johnson-Cook failure parameter D2.
•
Johnson-Cook failure parameter D3.
•
Johnson-Cook failure parameter D4.
•
Johnson-Cook failure parameter D5.
•
Melting temperature.
•
Transition temperature.
•
Reference strain rate.
If the constructor is MkDamageInitiation, the table data specify the following:
•
Flaw size relative to the nominal thickness of the section.
•
Angle (in degrees) with respect to the 1-direction of the local material orientation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is MsﬂdDamageInitiation and deﬁnition=MSFLD, the table data specify the following:
1273
Abaqus Scripting Reference Guide
DamageInitiation object

•
Nominal strain at damage initiation in a normal-only mode.
•
Equivalent plastic strain at initiation of localized necking.
•
Ratio of minor to major principal strains.
•
Equivalent plastic strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is MsﬂdDamageInitiation and deﬁnition=FLD, the table data specify the following:
•
Major principal strain at initiation of localized necking.
•
Equivalent plastic strain at initiation of localized necking.
•
Ratio of minor to major principal strains.
•
Equivalent plastic strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is QuadeDamageInitiation or MaxeDamageInitiation, the table data specify the following:
•
Nominal strain at damage initiation in a normal-only mode.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the ﬁrst shear direction.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the second shear
direction.
•
Rate-dependent, if the data depend on the effective rate of separation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is QuadsDamageInitiation or MaxsDamageInitiation, the table data specify the following:
•
Nominal strain at damage initiation in a normal-only mode.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the ﬁrst shear direction.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the second shear
direction.
•
Rate-dependent, if the data depend on the effective rate of separation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is MaxpeDamageInitiation, the table data specify the following:
Abaqus Scripting Reference Guide
1274
DamageInitiation object

•
Maximum principal strain at damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is MaxpsDamageInitiation, the table data specify the following:
•
Maximum principal stress at damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is ShearDamageInitiation, the table data specify the following:
•
Equivalent fracture strain at damage initiation.
•
Shear stress ratio.
•
Strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is HosfordCoulombDamageInitiation, the table data specify the following:
•
a.
•
b.
•
c.
•
n.
•
d.
•
reference strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If the constructor is HashinDamageInitiation, the table data specify the following:
•
Fiber tensile strength.
•
Fiber compressive strength.
•
Matrix tensile strength.
•
Matrix compressive strength.
•
Longitudinal shear strength.
•
Transverse shear strength.
1275
Abaqus Scripting Reference Guide
DamageInitiation object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
•
If the constructor is LaRC05DamageInitiation, the table data specify the following:
-
Longitudinal tensile strength.
-
Longitudinal compressive strength.
-
Transverse tensile strength.
-
Transverse compressive strength.
-
In Plane shear strength.
-
Fracture plane angle for pure compression.
-
Misalignment angle at failure for pure compression
-
Transverse shear strength.
-
Longitudinal shear friction coefﬁcient.
-
Transverse shear friction coefﬁcient.
-
Temperature, if the data depend on temperature.
-
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
-
Value of the second ﬁeld variable.
-
Etc.
Return value
A DamageInitiation object.
Exceptions
RangeError.
FldDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].FldDamageInitiation
session.odbs[name].materials[name].FldDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
Abaqus Scripting Reference Guide
1276
DamageInitiation object

A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal to
the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains. The
default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for the
evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be satisﬁed.
The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
FlsdDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].FlsdDamageInitiation
session.odbs[name].materials[name].FlsdDamageInitiation
1277
Abaqus Scripting Reference Guide
DamageInitiation object

Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal to
the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains. The
default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for the
evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be satisﬁed.
The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Abaqus Scripting Reference Guide
1278
DamageInitiation object

Exceptions
RangeError.
JohnsonCookDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].JohnsonCookDamageInitiation
session.odbs[name].materials[name].JohnsonCookDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
1279
Abaqus Scripting Reference Guide
DamageInitiation object

A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A Float specifying the value of the power coefﬁcient, N. The default value is 0.0.
accumulationPower
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxeDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].MaxeDamageInitiation
session.odbs[name].materials[name].MaxeDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
Abaqus Scripting Reference Guide
1280
DamageInitiation object

An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A Float specifying a separate tolerance used for crack growth within which the damage
initiation criterion must be satisﬁed. The default value is equal to tolerance.
growthTolerance
A Float specifying a separate tolerance used for unstable crack growth within which the
damage initiation criterion must be satisﬁed. The default value is inﬁnity.
unstableGrowthTolerance
A Boolean specifying whether the data depend on the effective rate of separation. The
default value is OFF.
rateDependency
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
An SymbolicConstant specifying the damage initiation position. Possible values are
CENTROID, CRACKTIP, and COMBINED. The default value is CENTROID.
position
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxsDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].MaxsDamageInitiation
session.odbs[name].materials[name].MaxsDamageInitiation
1281
Abaqus Scripting Reference Guide
DamageInitiation object

Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A Float specifying a separate tolerance used for crack growth within which the damage
initiation criterion must be satisﬁed. The default value is equal to tolerance.
growthTolerance
A Float specifying a separate tolerance used for unstable crack growth within which the
damage initiation criterion must be satisﬁed. The default value is inﬁnity.
unstableGrowthTolerance
A Boolean specifying whether the data depend on the effective rate of separation. The
default value is OFF.
rateDependency
Abaqus Scripting Reference Guide
1282
DamageInitiation object

A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
An SymbolicConstant specifying the damage initiation position. Possible values are
CENTROID, CRACKTIP, and COMBINED. The default value is CENTROID.
position
Return value
A DamageInitiation object.
Exceptions
RangeError.
MkDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].MkDamageInitiation
session.odbs[name].materials[name].MkDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal to
the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains. The
default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
1283
Abaqus Scripting Reference Guide
DamageInitiation object

A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for the
evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be satisﬁed.
The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MsfldDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].MsfldDamageInitiation
session.odbs[name].materials[name].MsfldDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal to
the groove direction. The default value is 10.0.
fnn
Abaqus Scripting Reference Guide
1284
DamageInitiation object

A Float specifying the critical value of the deformation severity index for shear strains. The
default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for the
evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be satisﬁed.
The default value is 0.05.
tolerance
A Double specifying the accumulated increment in equivalent plastic strain used to trigger
the evaluation of the MSFLD damage initiation criterion. The default value is 0.002.
peinc
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
QuadeDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].QuadeDamageInitiation
session.odbs[name].materials[name].QuadeDamageInitiation
1285
Abaqus Scripting Reference Guide
DamageInitiation object

Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A Float specifying a separate tolerance used for crack growth within which the damage
initiation criterion must be satisﬁed. The default value is equal to tolerance.
growthTolerance
A Float specifying a separate tolerance used for unstable crack growth within which the
damage initiation criterion must be satisﬁed. The default value is inﬁnity.
unstableGrowthTolerance
A Boolean specifying whether the data depend on the effective rate of separation. The
default value is OFF.
rateDependency
Abaqus Scripting Reference Guide
1286
DamageInitiation object

A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
An SymbolicConstant specifying the damage initiation position. Possible values are
CENTROID, CRACKTIP, and COMBINED. The default value is CENTROID.
position
Return value
A DamageInitiation object.
Exceptions
RangeError.
QuadsDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].QuadsDamageInitiation
session.odbs[name].materials[name].QuadsDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
1287
Abaqus Scripting Reference Guide
DamageInitiation object

A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A Float specifying a separate tolerance used for crack growth within which the damage
initiation criterion must be satisﬁed. The default value is equal to tolerance.
growthTolerance
A Float specifying a separate tolerance used for unstable crack growth within which the
damage initiation criterion must be satisﬁed. The default value is inﬁnity.
unstableGrowthTolerance
A Boolean specifying whether the data depend on the effective rate of separation. The
default value is OFF.
rateDependency
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
An SymbolicConstant specifying the damage initiation position. Possible values are
CENTROID, CRACKTIP, and COMBINED. The default value is CENTROID.
position
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxpeDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].MaxpeDamageInitiation
session.odbs[name].materials[name].MaxpeDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Abaqus Scripting Reference Guide
1288
DamageInitiation object

Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
An SymbolicConstant specifying the damage initiation position. Possible values are
CENTROID, CRACKTIP, COMBINED, and NONLOCAL. The default value is
CENTROID.
position
A Float specifying a separate tolerance used for crack growth within which the damage
initiation criterion must be satisﬁed. The default value is equal to tolerance.
growthTolerance
A Float specifying a separate tolerance used for unstable crack growth within which the
damage initiation criterion must be satisﬁed. The default value is inﬁnity.
unstableGrowthTolerance
1289
Abaqus Scripting Reference Guide
DamageInitiation object

A Float specifying the maximum allowed change in the crack propagation angle (in degrees)
between the new crack propagation direction and the previous crack propagation direction.
The default value is 85.0.
anglemax
A Float specifying the maximum allowed difference (in degrees) below which the normals
of the crack facets are included in the moving least-squares approximation to smooth out
angSmooth
the crack normals to obtain the crack propagation direction along the crack front. The
default value is 70.0.
A Float specifying the radius around the crack tip within which the elements are included
for calculating the averaged stress/strain and for smoothing out the normals of the individual
rCrackDirection
crack facets along the crack front used to obtain the crack propagation direction. The
default value is 0.0.
An SymbolicConstant specifying the damage initiation inismooth. Possible values are
YES and NO. The default value is YES.
iniSmooth
An SymbolicConstant specifying the damage initiation smoothing. Possible values are
NONE and NODAL. The default value is NONE.
smoothing
An SymbolicConstant specifying the number of terms in the polynomial used for the
moving least-squares approximation to smooth out the crack normals. Possible values are
npoly
QUADRATIC, LEAST-SQUARE, LINEAR, and CUBIC. The default value is
QUADRATIC.
An SymbolicConstant specifying the damage initiation weighting method. Possible values
are UNIFORM, GAUSS, CUBIC, and USER. The default value is UNIFORM.
weightingMethod
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxpsDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].MaxpsDamageInitiation
session.odbs[name].materials[name].MaxpsDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Abaqus Scripting Reference Guide
1290
DamageInitiation object

Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
An SymbolicConstant specifying the damage initiation position. Possible values are
CENTROID, CRACKTIP, COMBINED, and NONLOCAL. The default value is
CENTROID.
position
A Float specifying a separate tolerance used for crack growth within which the damage
initiation criterion must be satisﬁed. The default value is equal to tolerance.
growthTolerance
A Float specifying a separate tolerance used for unstable crack growth within which the
damage initiation criterion must be satisﬁed. The default value is inﬁnity.
unstableGrowthTolerance
1291
Abaqus Scripting Reference Guide
DamageInitiation object

A Float specifying the maximum allowed change in the crack propagation angle (in degrees)
between the new crack propagation direction and the previous crack propagation direction.
The default value is 85.0.
anglemax
A Float specifying the maximum allowed difference (in degrees) below which the normals
of the crack facets are included in the moving least-squares approximation to smooth out
angSmooth
the crack normals to obtain the crack propagation direction along the crack front. The
default value is 70.0.
A Float specifying the radius around the crack tip within which the elements are included
for calculating the averaged stress/strain and for smoothing out the normals of the individual
rCrackDirection
crack facets along the crack front used to obtain the crack propagation direction. The
default value is 0.0.
An SymbolicConstant specifying the damage initiation inismooth. Possible values are
YES and NO. The default value is YES.
iniSmooth
An SymbolicConstant specifying the damage initiation smoothing. Possible values are
NONE and NODAL. The default value is NONE.
smoothing
An SymbolicConstant specifying the number of terms in the polynomial used for the
moving least-squares approximation to smooth out the crack normals. Possible values are
npoly
QUADRATIC, LEAST-SQUARE, LINEAR, and CUBIC. The default value is
QUADRATIC.
An SymbolicConstant specifying the damage initiation weighting method. Possible values
are UNIFORM, GAUSS, CUBIC, and USER. The default value is UNIFORM.
weightingMethod
Return value
A DamageInitiation object.
Exceptions
RangeError.
ShearDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].ShearDamageInitiation
session.odbs[name].materials[name].ShearDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Abaqus Scripting Reference Guide
1292
DamageInitiation object

Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A Float specifying the value of the power coefﬁcient, N. The default value is 0.0.
accumulationPower
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
1293
Abaqus Scripting Reference Guide
DamageInitiation object

HosfordCoulombDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].HosfordCoulombDamageInitiation
session.odbs[name].materials[name].HosfordCoulombDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
Abaqus Scripting Reference Guide
1294
DamageInitiation object

A Float specifying the value of the power coefﬁcient, N. The default value is 0.0.
accumulationPower
A SymbolicConstant specifying the damage initiation direction. Possible values are
NMORI and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
HashinDamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].HashinDamageInitiation
session.odbs[name].materials[name].HashinDamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
1295
Abaqus Scripting Reference Guide
DamageInitiation object

A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
LaRC05DamageInitiation(...)
This method creates a DamageInitiation object.
Path
mdb.models[name].materials[name].LaRC05DamageInitiation
session.odbs[name].materials[name].LaRC05DamageInitiation
Required arguments
A sequence of sequences of Floats specifying the items described in the "Table data" section.
table
Optional arguments
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are FLD
and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent plastic
strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
Abaqus Scripting Reference Guide
1296
DamageInitiation object

A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are NMORI
and TMORI. The default value is NMORI.
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DamageInitiation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DamageInitiation method.
Return value
None.
1297
Abaqus Scripting Reference Guide
DamageInitiation object

Exceptions
None.
Members
The DamageInitiation object can have the following members:
A SymbolicConstant specifying the damage initiation deﬁnition. Possible values are
FLD and MSFLD. The default value is MSFLD.
deﬁnition
A Float specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Float specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Float specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski
analysis is going to be performed. The default value is 1.
frequency
A Float specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of
the Marciniak-Kuczynski analysis. These imperfections are assumed to be equally
spaced in the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Float specifying the value of the coefﬁcient that will multiply the shear contribution
to the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Float specifying the factor used for ﬁltering the ratio of principal strain rates used
for the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Float specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
A SymbolicConstant specifying the damage initiation direction. Possible values are
NMORI and TMORI. The default value is NMORI.
direction
An SymbolicConstant specifying the damage initiation position. Possible values are
CENTROID, CRACKTIP, COMBINED, and NONLOCAL. The default value is
CENTROID.
position
Abaqus Scripting Reference Guide
1298
DamageInitiation object

A Float specifying a separate tolerance used for crack growth within which the damage
initiation criterion must be satisﬁed. The default value is equal to tolerance.
growthTolerance
A Float specifying a separate tolerance used for unstable crack growth within which
the damage initiation criterion must be satisﬁed. The default value is inﬁnity.
unstableGrowthTolerance
A Float specifying the maximum allowed change in the crack propagation angle (in
degrees) between the new crack propagation direction and the previous crack
propagation direction. The default value is 85.0.
anglemax
A Float specifying the maximum allowed difference (in degrees) below which the
normals of the crack facets are included in the moving least-squares approximation to
angSmooth
smooth out the crack normals to obtain the crack propagation direction along the crack
front. The default value is 70.0.
A Float specifying the radius around the crack tip within which the elements are included
for calculating the averaged stress/strain and for smoothing out the normals of the
rCrackDirection
individual crack facets along the crack front used to obtain the crack propagation
direction. The default value is 0.0.
An SymbolicConstant specifying the damage initiation inismooth. Possible values are
YES and NO. The default value is YES.
iniSmooth
An SymbolicConstant specifying the damage initiation smoothing. Possible values are
NONE and NODAL. The default value is NONE.
smoothing
An SymbolicConstant specifying the number of terms in the polynomial used for the
moving least-squares approximation to smooth out the crack normals. Possible values
npoly
are QUADRATIC, LEAST-SQUARE, LINEAR, and CUBIC. The default value is
QUADRATIC.
An SymbolicConstant specifying the damage initiation weighting method. Possible
values are UNIFORM, GAUSS, CUBIC, and USER. The default value is UNIFORM.
weightingMethod
A tuple of tuples of Floats specifying the items described in the "Table data" section.
table
A DamageEvolution object.
damageEvolution
A DamageStabilization object.
damageStabilization
A DamageStabilizationCohesive object.
damageStabilizationCohesive
Corresponding analysis keywords
•
*DAMAGE INITIATION
1299
Abaqus Scripting Reference Guide
DamageInitiation object

DamageStabilization object
The DamageStabilization object speciﬁes the viscosity coefﬁcients for the damage model for ﬁber-reinforced materials.
Access
import material
mdb.models[name].materials[name].ductileDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].fldDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].flsdDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].hashinDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].johnsonCookDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].maxeDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].maxpeDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].maxpsDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].maxsDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].mkDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].msfldDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].quadeDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].quadsDamageInitiation\
.damageStabilization
mdb.models[name].materials[name].shearDamageInitiation\
.damageStabilization
import odbMaterial
session.odbs[name].materials[name].ductileDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].fldDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].flsdDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].hashinDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].johnsonCookDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].maxeDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].maxpeDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].maxpsDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].maxsDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].mkDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].msfldDamageInitiation\
Abaqus Scripting Reference Guide
1300
DamageStabilization object

.damageStabilization
session.odbs[name].materials[name].quadeDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].quadsDamageInitiation\
.damageStabilization
session.odbs[name].materials[name].shearDamageInitiation\
.damageStabilization
DamageStabilization(...)
This method creates a DamageStabilization object.
Path
mdb.models[name].materials[name].ductileDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].fldDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].flsdDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].hashinDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].johnsonCookDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].maxeDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].maxpeDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].maxpsDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].maxsDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].mkDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].msfldDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].quadeDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].quadsDamageInitiation\
.DamageStabilization
mdb.models[name].materials[name].shearDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].ductileDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].fldDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].flsdDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].hashinDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].johnsonCookDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].maxeDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].maxpeDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].maxpsDamageInitiation\
1301
Abaqus Scripting Reference Guide
DamageStabilization object

.DamageStabilization
session.odbs[name].materials[name].maxsDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].mkDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].msfldDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].quadeDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].quadsDamageInitiation\
.DamageStabilization
session.odbs[name].materials[name].shearDamageInitiation\
.DamageStabilization
Required arguments
A Float specifying the viscosity coefﬁcient for the ﬁber tensile failure mode.
ﬁberTensileCoeff
A Float specifying the viscosity coefﬁcient for the ﬁber compressive failure
mode.
ﬁberCompressiveCoeff
A Float specifying the viscosity coefﬁcient for the matrix tensile failure
mode.
matrixTensileCoeff
A Float specifying the viscosity coefﬁcient for the matrix compressive failure
mode.
matrixCompressiveCoeff
Optional arguments
None.
Return value
A DamageStabilization object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DamageStabilization object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DamageStabilization  method.
Return value
None.
Abaqus Scripting Reference Guide
1302
DamageStabilization object

Exceptions
RangeError.
Members
The DamageStabilization object has members with the same names and descriptions as the arguments to the
DamageStabilization  method.
Corresponding analysis keywords
•
*DAMAGE STABILIZATION
1303
Abaqus Scripting Reference Guide
DamageStabilization object

DamageStabilizationCohesive object
The DamageStabilizationCohesive object speciﬁes the viscosity coefﬁcients for the damage model for surface-based
cohesive behavior or enriched cohesive behavior.
Access
import material
mdb.models[name].materials[name].ductileDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].fldDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].flsdDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].hashinDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].johnsonCookDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].maxeDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].maxpeDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].maxpsDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].maxsDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].mkDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].msfldDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].quadeDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].quadsDamageInitiation\
.damageStabilizationCohesive
mdb.models[name].materials[name].shearDamageInitiation\
.damageStabilizationCohesive
import odbMaterial
session.odbs[name].materials[name].ductileDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].fldDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].flsdDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].hashinDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].johnsonCookDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].maxeDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].maxpeDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].maxpsDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].maxsDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].mkDamageInitiation\
.damageStabilizationCohesive
Abaqus Scripting Reference Guide
1304
DamageStabilizationCohesive object

session.odbs[name].materials[name].msfldDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].quadeDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].quadsDamageInitiation\
.damageStabilizationCohesive
session.odbs[name].materials[name].shearDamageInitiation\
.damageStabilizationCohesive
DamageStabilizationCohesive(...)
This method creates a DamageStabilizationCohesive object.
Path
mdb.models[name].materials[name].ductileDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].fldDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].flsdDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].hashinDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].johnsonCookDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].maxeDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].maxpeDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].maxpsDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].maxsDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].mkDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].msfldDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].quadeDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].quadsDamageInitiation\
.DamageStabilizationCohesive
mdb.models[name].materials[name].shearDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].ductileDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].fldDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].flsdDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].hashinDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].johnsonCookDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].maxeDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].maxpeDamageInitiation\
.DamageStabilizationCohesive
1305
Abaqus Scripting Reference Guide
DamageStabilizationCohesive object

session.odbs[name].materials[name].maxpsDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].maxsDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].mkDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].msfldDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].quadeDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].quadsDamageInitiation\
.DamageStabilizationCohesive
session.odbs[name].materials[name].shearDamageInitiation\
.DamageStabilizationCohesive
Required arguments
None.
Optional arguments
None or a Float specifying the viscosity coefﬁcient. The default value is None.
cohesiveCoeff
Return value
A DamageStabilizationCohesive object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DamageStabilizationCohesive object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DamageStabilizationCohesive  method.
Return value
None.
Exceptions
RangeError.
Members
The DamageStabilizationCohesive object has members with the same names and descriptions as the arguments to the
DamageStabilizationCohesive  method.
Abaqus Scripting Reference Guide
1306
DamageStabilizationCohesive object

Corresponding analysis keywords
•
*DAMAGE STABILIZATION
1307
Abaqus Scripting Reference Guide
DamageStabilizationCohesive object

Damping object
The Damping object speciﬁes material damping.
Access
import material
mdb.models[name].materials[name].damping
import odbMaterial
session.odbs[name].materials[name].damping
Damping(...)
This method creates a Damping object.
Path
mdb.models[name].materials[name].Damping
session.odbs[name].materials[name].Damping
Required arguments
None.
Optional arguments
A Float specifying the 
 factor to create mass proportional damping in direct-integration and
explicit dynamics. The default value is 0.0.
alpha
A Float specifying the 
 factor to create stiffness proportional damping in direct-integration
and explicit dynamics. The default value is 0.0.
beta
A Float specifying the fraction of critical damping to be used with this material in calculating
composite damping factors for the modes (for use in modal dynamics). The default value is 0.0.
composite
This argument applies only to Abaqus/Standard analyses.
A Float specifying the structural factor to create material damping in direct-integration and
explicit dynamics. The default value is 0.0.
structural
Return value
A Damping object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Damping object.
Abaqus Scripting Reference Guide
1308
Damping object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Damping  method.
Return value
None.
Exceptions
RangeError.
Members
The Damping object has members with the same names and descriptions as the arguments to the Damping  method.
Corresponding analysis keywords
•
*DAMPING
1309
Abaqus Scripting Reference Guide
Damping object

DeformationPlasticity object
The DeformationPlasticity object speciﬁes the deformation plasticity model.
Access
import material
mdb.models[name].materials[name].deformationPlasticity
import odbMaterial
session.odbs[name].materials[name].deformationPlasticity
DeformationPlasticity(...)
This method creates a DeformationPlasticity object.
Path
mdb.models[name].materials[name].DeformationPlasticity
session.odbs[name].materials[name].DeformationPlasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
Table data
•
Young's modulus, .
•
Poisson's ratio, .
•
Yield stress, 
.
•
Exponent, .
•
Yield offset, .
•
Temperature, if the data depend on temperature.
Return value
A DeformationPlasticity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DeformationPlasticity object.
Abaqus Scripting Reference Guide
1310
DeformationPlasticity object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DeformationPlasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The DeformationPlasticity object has members with the same names and descriptions as the arguments to the
DeformationPlasticity  method.
Corresponding analysis keywords
•
*DEFORMATION PLASTICITY
1311
Abaqus Scripting Reference Guide
DeformationPlasticity object

Density object
The Density object speciﬁes the material density.
Access
import material
mdb.models[name].materials[name].density
import odbMaterial
session.odbs[name].materials[name].density
Density(...)
This method creates a Density object.
Path
mdb.models[name].materials[name].Density
session.odbs[name].materials[name].Density
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying how the density is distributed spatially. Possible values
are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD. The default value
is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField or DiscreteField object associated
with this material option. The ﬁeldName argument applies only when
ﬁeldName
distributionType=ANALYTICAL_FIELD or distributionType=DISCRETE_FIELD.
The default value is an empty string.
Table data
•
The mass density.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1312
Density object

Return value
A Density object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Density object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Density  method.
Return value
None.
Exceptions
RangeError.
Members
The Density object has members with the same names and descriptions as the arguments to the Density  method.
Corresponding analysis keywords
•
*DENSITY
1313
Abaqus Scripting Reference Guide
Density object

Depvar object
The Depvar object speciﬁes solution-dependent state variables.
Access
import material
mdb.models[name].materials[name].depvar
import odbMaterial
session.odbs[name].materials[name].depvar
Depvar(...)
This method creates a Depvar object.
Path
mdb.models[name].materials[name].Depvar
session.odbs[name].materials[name].Depvar
Required arguments
None.
Optional arguments
An Int specifying the state variable number controlling the element deletion ﬂag. The default
value is 0.
deleteVar
This argument applies only to Abaqus/Explicit analyses.
An Int specifying the number of solution-dependent state variables required at each integration
point. The default value is 0.
n
Return value
A Depvar object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Depvar object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Depvar  method.
Abaqus Scripting Reference Guide
1314
Depvar object

Return value
None.
Exceptions
RangeError.
Members
The Depvar object has members with the same names and descriptions as the arguments to the Depvar  method.
Corresponding analysis keywords
•
*DEPVAR
1315
Abaqus Scripting Reference Guide
Depvar object

DetonationPoint object
A DetonationPoint object speciﬁes a suboption of the Eos object. The DetonationPoint object deﬁnes either isotropic
linear elastic shear or linear viscous shear behavior for a hydrodynamic material.
Access
import material
mdb.models[name].materials[name].eos.detonationPoint
import odbMaterial
session.odbs[name].materials[name].eos.detonationPoint
DetonationPoint(...)
This method creates a DetonationPoint object.
Path
mdb.models[name].materials[name].eos.DetonationPoint
session.odbs[name].materials[name].eos.DetonationPoint
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
X value for coordinate of detonation point.
•
Y value for coordinate of detonation point.
•
Z value for coordinate of detonation point.
•
Detonation delay time.
Return value
A DetonationPoint object.
Exceptions
None.
setValues(...)
This method modiﬁes the DetonationPoint object.
Required arguments
None.
Abaqus Scripting Reference Guide
1316
DetonationPoint object

Optional arguments
The optional arguments to setValues are the same as the arguments to the DetonationPoint  method.
Return value
None.
Exceptions
None.
Members
The DetonationPoint object has members with the same names and descriptions as the arguments to the DetonationPoint
method.
Corresponding analysis keywords
•
*DETONATION POINT
1317
Abaqus Scripting Reference Guide
DetonationPoint object

Dielectric object
The Dielectric object speciﬁes dielectric material properties.
Access
import material
mdb.models[name].materials[name].dielectric
import odbMaterial
session.odbs[name].materials[name].dielectric
Dielectric(...)
This method creates a Dielectric object.
Path
mdb.models[name].materials[name].Dielectric
session.odbs[name].materials[name].Dielectric
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the dielectric behavior. Possible values are
ISOTROPIC, ORTHOTROPIC, and ANISOTROPIC. The default value is
ISOTROPIC.
type
A Boolean specifying whether the data depend on frequency. The default value is
OFF.
frequencyDependency
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Dielectric constant.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1318
Dielectric object

If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Dielectric object.
Exceptions
None.
setValues(...)
This method modiﬁes the Dielectric object.
Required arguments
None.
1319
Abaqus Scripting Reference Guide
Dielectric object

Optional arguments
The optional arguments to setValues are the same as the arguments to the Dielectric  method.
Return value
None.
Exceptions
None.
Members
The Dielectric object has members with the same names and descriptions as the arguments to the Dielectric  method.
Corresponding analysis keywords
•
*DIELECTRIC
Abaqus Scripting Reference Guide
1320
Dielectric object

Diffusivity object
The Diffusivity object speciﬁes mass diffusivity.
Access
import material
mdb.models[name].materials[name].diffusivity
import odbMaterial
session.odbs[name].materials[name].diffusivity
Diffusivity(...)
This method creates a Diffusivity object.
Path
mdb.models[name].materials[name].Diffusivity
session.odbs[name].materials[name].Diffusivity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of diffusivity. Possible values are ISOTROPIC,
ORTHOTROPIC, and ANISOTROPIC. The default value is ISOTROPIC.
type
A SymbolicConstant specifying the diffusion behavior. Possible values are GENERAL
and FICK. The default value is GENERAL.
law
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Diffusivity, 
.
•
Concentration, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
1321
Diffusivity object

•
.
•
.
•
.
•
Concentration, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Concentration, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Diffusivity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Diffusivity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Diffusivity  method.
Return value
None.
Abaqus Scripting Reference Guide
1322
Diffusivity object

Exceptions
RangeError.
Members
The Diffusivity object has members with the same names and descriptions as the arguments to the Diffusivity  method.
In addition, the Diffusivity object can have the following members:
A PressureEffect object.
pressureEffect
A SoretEffect object.
soretEffect
Corresponding analysis keywords
•
*DIFFUSIVITY
1323
Abaqus Scripting Reference Guide
Diffusivity object

DruckerPrager object
The DruckerPrager object speciﬁes the extended Drucker-Prager plasticity model.
Access
import material
mdb.models[name].materials[name].druckerPrager
import odbMaterial
session.odbs[name].materials[name].druckerPrager
DruckerPrager(...)
This method creates a DruckerPrager object.
Path
mdb.models[name].materials[name].DruckerPrager
session.odbs[name].materials[name].DruckerPrager
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the yield criterion. Possible values are LINEAR,
HYPERBOLIC, and EXPONENTIAL. The default value is LINEAR.
shearCriterion
This argument applies only to Abaqus/Standard analyses. Only the linear Drucker-Prager
model is available in Abaqus/Explicit analyses.
A Float specifying the ﬂow potential eccentricity, , a small positive number that deﬁnes
the rate at which the hyperbolic ﬂow potential approaches its asymptote. The default value
is 0.1.
eccentricity
This argument applies only to Abaqus/Standard analyses.
A Boolean specifying whether the material constants for the exponent model are to be
computed by Abaqus/Standard from triaxial test data at different levels of conﬁning pressure.
The default value is OFF.
testData
This argument is valid only if shearCriterion=EXPONENTIAL.
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If shearCriterion=LINEAR (the only option allowed in an Abaqus/Explicit analysis), the table data specify the following:
Abaqus Scripting Reference Guide
1324
DruckerPrager object

•
Material angle of friction, , in the –  plane. Give the value in degrees.
•
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial compression. 
. If the
default value of 0.0 is accepted, a value of 1.0 is assumed.
•
Dilation angle, , in the –  plane. Give the value in degrees.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If shearCriterion=HYPERBOLIC, the table data specify the following:
•
Material angle of friction, , at high conﬁning pressure in the –  plane. Give the value in degrees.
•
Initial hydrostatic tension strength, 
.
•
Dilation angle, , at high conﬁning pressure in the –  plane. Give the value in degrees.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If shearCriterion=EXPONENTIAL, the table data specify the following:
•
Dilation angle, , at high conﬁning pressure in the –  plane. Give the value in degrees.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DruckerPrager object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DruckerPrager object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DruckerPrager  method.
1325
Abaqus Scripting Reference Guide
DruckerPrager object

Return value
None.
Exceptions
RangeError.
Members
The DruckerPrager object has members with the same names and descriptions as the arguments to the DruckerPrager
method.
In addition, the DruckerPrager object can have the following members:
A DruckerPragerCreep object.
druckerPragerCreep
A DruckerPragerHardening object.
druckerPragerHardening
A RateDependent object.
rateDependent
A TriaxialTestData object.
triaxialTestData
Corresponding analysis keywords
•
*DRUCKER PRAGER
Abaqus Scripting Reference Guide
1326
DruckerPrager object

DruckerPragerCreep object
The DruckerPragerCreep object speciﬁes creep for Drucker-Prager plasticity models.
Access
import material
mdb.models[name].materials[name].druckerPrager.druckerPragerCreep
import odbMaterial
session.odbs[name].materials[name].druckerPrager.druckerPragerCreep
DruckerPragerCreep(...)
This method creates a DruckerPragerCreep object.
Path
mdb.models[name].materials[name].druckerPrager.DruckerPragerCreep
session.odbs[name].materials[name].druckerPrager.DruckerPragerCreep
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of data deﬁning the creep law. Possible values
are:
law
•
STRAIN, specifying a strain-hardening power law.
•
TIME, specifying a time-hardening power law.
•
SINGHM, specifying a Singh-Mitchell type law.
•
USER, specifying the creep law is input from user subroutine CREEP.
The default value is STRAIN.
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If law=TIME or law=STRAIN, the table data specify the following:
•
. (Units of F
L
T
.)
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
1327
DruckerPragerCreep object

•
Value of the second ﬁeld variable.
•
Etc.
If law=SINGHM, the table data specify the following:
•
. (Units of T−1.)
•
. (Units of F−1L2.)
•
.
•
. (Units of T.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DruckerPragerCreep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DruckerPragerCreep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DruckerPragerCreep  method.
Return value
None.
Exceptions
RangeError.
Members
The DruckerPragerCreep object has members with the same names and descriptions as the arguments to the
DruckerPragerCreep  method.
Corresponding analysis keywords
•
*DRUCKER PRAGER CREEP
Abaqus Scripting Reference Guide
1328
DruckerPragerCreep object

DruckerPragerHardening object
The DruckerPragerHardening object speciﬁes hardening for Drucker-Prager plasticity models.
Access
import material
mdb.models[name].materials[name].druckerPrager.druckerPragerHardening
import odbMaterial
session.odbs[name].materials[name].druckerPrager\
.druckerPragerHardening
DruckerPragerHardening(...)
This method creates a DruckerPragerHardening object.
Path
mdb.models[name].materials[name].druckerPrager.DruckerPragerHardening
session.odbs[name].materials[name].druckerPrager\
.DruckerPragerHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of data deﬁning the hardening behavior. Possible
values are COMPRESSION, TENSION, and SHEAR. The default value is
COMPRESSION.
type
A Boolean specifying whether the data depend on rate. The default value is OFF.
rate
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Yield stress.
•
Absolute value of the corresponding plastic strain. (The ﬁrst tabular value entered must always be zero.)
•
Equivalent plastic strain rate, 
, for which this hardening curve applies.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
1329
DruckerPragerHardening object

Return value
A DruckerPragerHardening object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DruckerPragerHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DruckerPragerHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The DruckerPragerHardening object has members with the same names and descriptions as the arguments to the
DruckerPragerHardening  method.
Corresponding analysis keywords
•
*DRUCKER PRAGER HARDENING
Abaqus Scripting Reference Guide
1330
DruckerPragerHardening object

Elastic object
The Elastic object speciﬁes elastic material properties.
Access
import material
mdb.models[name].materials[name].elastic
import odbMaterial
session.odbs[name].materials[name].elastic
Elastic(...)
This method creates an Elastic object.
Path
mdb.models[name].materials[name].Elastic
session.odbs[name].materials[name].Elastic
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of elasticity data provided. Possible values are:
type
•
ISOTROPIC
•
ORTHOTROPIC
•
ANISOTROPIC
•
ENGINEERING_CONSTANTS
•
LAMINA
•
TRACTION
•
COUPLED_TRACTION
•
SHORT_FIBER
•
SHEAR
•
BILAMINA
The default value is ISOTROPIC.
A Boolean specifying whether compressive stress is allowed. The default value is OFF.
noCompression
A Boolean specifying whether tensile stress is allowed. The default value is OFF.
noTension
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
1331
Elastic object

A SymbolicConstant specifying the time-dependence of the elastic material constants.
Possible values are INSTANTANEOUS and LONG_TERM. The default value is
LONG_TERM.
moduli
Table data
If type=ISOTROPIC, the table data specify the following:
•
The Young's modulus, .
•
The Poisson's ratio, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=SHEAR, the table data specify the following:
•
The shear modulus, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENGINEERING_CONSTANTS, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=LAMINA, the table data specify the following:
•
.
•
.
Abaqus Scripting Reference Guide
1332
Elastic object

•
.
•
.
•
. This shear modulus is needed to deﬁne transverse shear behavior in shells.
•
. This shear modulus is needed to deﬁne transverse shear behavior in shells.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
1333
Abaqus Scripting Reference Guide
Elastic object

•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=TRACTION, the table data specify the following:
•
 for warping elements; 
 for cohesive elements.
•
 for warping elements; 
 for cohesive elements.
•
 for warping elements; 
 for cohesive elements.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=BILAMINA, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
Abaqus Scripting Reference Guide
1334
Elastic object

•
Value of the second ﬁeld variable.
•
Etc.
If type=SHORT_FIBER, there is no table data.
Return value
An Elastic object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Elastic object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Elastic method.
Return value
None.
Exceptions
RangeError.
Members
The Elastic object has members with the same names and descriptions as the arguments to the Elastic method.
In addition, the Elastic object can have the following members:
A FailStress object.
failStress
A FailStrain object.
failStrain
Corresponding analysis keywords
•
*ELASTIC
1335
Abaqus Scripting Reference Guide
Elastic object

ElectricalConductivity object
The ElectricalConductivity object speciﬁes electrical conductivity.
Access
import material
mdb.models[name].materials[name].electricalConductivity
import odbMaterial
session.odbs[name].materials[name].electricalConductivity
ElectricalConductivity(...)
This method creates an ElectricalConductivity object.
Path
mdb.models[name].materials[name].ElectricalConductivity
session.odbs[name].materials[name].ElectricalConductivity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of electrical conductivity. Possible values
are ISOTROPIC, ORTHOTROPIC, and ANISOTROPIC. The default value is
ISOTROPIC.
type
A Boolean specifying whether the data depend on frequency. The default value is
OFF.
frequencyDependency
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Electrical conductivity.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1336
ElectricalConductivity object

If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
An ElectricalConductivity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ElectricalConductivity object.
Required arguments
None.
1337
Abaqus Scripting Reference Guide
ElectricalConductivity object

Optional arguments
The optional arguments to setValues are the same as the arguments to the ElectricalConductivity  method.
Return value
None.
Exceptions
RangeError.
Members
The ElectricalConductivity object has members with the same names and descriptions as the arguments to the
ElectricalConductivity  method.
Corresponding analysis keywords
•
*ELECTRICAL CONDUCTIVITY
Abaqus Scripting Reference Guide
1338
ElectricalConductivity object

Eos object
The Eos object speciﬁes an equation of state model.
Access
import material
mdb.models[name].materials[name].eos
import odbMaterial
session.odbs[name].materials[name].eos
Eos(...)
This method creates an Eos object.
Path
mdb.models[name].materials[name].Eos
session.odbs[name].materials[name].Eos
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the equation of state. Possible values are USUP, JWL,
IDEALGAS, TABULAR, and IGNITIONANDGROWTH. The default value is IDEALGAS.
type
A Boolean specifying whether the data in gasSpeciﬁcTable depend on temperature. The
default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies for the data in gasSpeciﬁcTable.
The default value is 0.
dependencies
A Float specifying the detonation energy text ﬁeld. The default value is 0.0.
detonationEnergy
A sequence of sequences of Floats specifying the following:
solidTable
•
$A_{s}$.
•
$B_{s}$.
•
${\omega}_{s}$.
•
$R_{1s}$.
•
$R_{2s}$.
The default value is an empty sequence.
A sequence of sequences of Floats specifying the following:
gasTable
•
$A_{g}$.
•
$B_{g}$.
1339
Eos object

•
${\omega}_{g}$.
•
$R_{1g}$.
•
$R_{2g}$.
The default value is an empty sequence.
A sequence of sequences of Floats specifying the following:
reactionTable
•
Initial Pressure, $I$.
•
Product co-volume, $a$.
•
Exponent on the unreacted fraction (ignition term), $x$.
•
First burn rate coefﬁcient, $G_{1}$
•
Exponent on the unreacted fraction (growth term), $c$.
•
Exponent on the reacted fraction (growth term), $d$.
•
Pressure exponent (growth term), $y$.
•
Second burn rate coefﬁcient, $G_{2}$.
•
Exponent on the unreacted fraction (completion term), $e$.
•
Exponent on the reacted fraction (completion term), $g$.
•
Pressure exponent (completion term), $z$.
•
Initial reacted fraction, ${F^{max}}_{ig}$.
•
Maximum reacted fraction for the growth term, ${F^{max}}_{G1}$.
•
Minimum reacted fraction, ${F^{min}}_{G2}$.
The default value is an empty sequence.
A sequence of sequences of Floats specifying the following:
gasSpeciﬁcTable
•
Speciﬁc Heat per unit mass.
•
Temperature dependent data.
•
Value of ﬁrst ﬁeld variable.
•
Value of second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
A sequence of sequences of Floats specifying the items described below. The default value
is an empty sequence.
table
Table data
If type=IDEALGAS, the table data represents the following:
•
Gas constant, .
•
The ambient pressure, 
. If this ﬁeld is left blank, a default of 0.0 is used.
If type=JWL, the table data represents the following:
Abaqus Scripting Reference Guide
1340
Eos object

•
Detonation wave speed, 
.
•
.
•
.
•
. (Dimensionless.)
•
. (Dimensionless.)
•
. (Dimensionless.)
•
Pre-detonation bulk modulus, 
.
•
Detonation energy density, 
.
If type=USUP, the table data represents the following:
•
.
•
. (Dimensionless.)
•
. (Dimensionless.)
If type=TABULAR, the table data represents the following:
•
.
•
.
•
. (Dimensionless.)
Return value
An Eos object.
Exceptions
None.
setValues(...)
This method modiﬁes the Eos object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Eos method.
Return value
None.
Exceptions
None.
1341
Abaqus Scripting Reference Guide
Eos object

Members
The Eos object has members with the same names and descriptions as the arguments to the Eos method.
In addition, the Eos object can have the following members:
A DetonationPoint object.
detonationPoint
An EosCompaction object.
eosCompaction
A TensileFailure object.
tensileFailure
Corresponding analysis keywords
•
*EOS
Abaqus Scripting Reference Guide
1342
Eos object

EosCompaction object
The EosCompaction object speciﬁes material eos compaction.
Access
import material
mdb.models[name].materials[name].eos.eosCompaction
import odbMaterial
session.odbs[name].materials[name].eos.eosCompaction
EosCompaction(...)
This method creates an EosCompaction object.
Path
mdb.models[name].materials[name].eos.EosCompaction
session.odbs[name].materials[name].eos.EosCompaction
Required arguments
A Float specifying reference sound speed in the porous material.
soundSpeed
A Float specifying value of the porosity of the unloaded material.
porosity
A Float specifying pressure required to initialize plastic behavior.
pressure
A Float specifying compaction pressure at which all pores are crushed.
compactionPressure
Optional arguments
None.
Return value
An EosCompaction object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the EosCompaction object.
Required arguments
None.
1343
EosCompaction object

Optional arguments
The optional arguments to setValues are the same as the arguments to the EosCompaction  method.
Return value
None.
Exceptions
RangeError.
Members
The EosCompaction object has members with the same names and descriptions as the arguments to the EosCompaction
method.
Corresponding analysis keywords
•
*EOS COMPACTION
Abaqus Scripting Reference Guide
1344
EosCompaction object

Expansion object
The Expansion object speciﬁes thermal expansion.
Access
import material
mdb.models[name].materials[name].expansion
import odbMaterial
session.odbs[name].materials[name].expansion
Expansion(...)
This method creates an Expansion object.
Path
mdb.models[name].materials[name].Expansion
session.odbs[name].materials[name].Expansion
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the type of expansion. Possible values are ISOTROPIC,
ORTHOTROPIC, ANISOTROPIC, and SHORT_FIBER. The default value is ISOTROPIC.
type
A Boolean specifying whether a user subroutine is used to deﬁne the increments of thermal
strain. The default value is OFF.
userSubroutine
A Float specifying the value of 
 if the thermal expansion is temperature-dependent or
ﬁeld-variable-dependent. The default value is 0.0.
zero
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A sequence of sequences of Floats specifying the items described below. The default value
is an empty sequence.
table
This argument is required only if type is not USER.
Table data
If type=ISOTROPIC, the table data specify the following:
•
 in Abaqus/Standard or Abaqus/Explicit analysis.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
1345
Expansion object

•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
. (Not used for plane stress case.)
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=SHORT_FIBER, there is no table data.
Return value
An Expansion object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Expansion object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Expansion  method.
Abaqus Scripting Reference Guide
1346
Expansion object

Return value
None.
Exceptions
RangeError.
Members
The Expansion object has members with the same names and descriptions as the arguments to the Expansion  method.
Corresponding analysis keywords
•
*EXPANSION
1347
Abaqus Scripting Reference Guide
Expansion object

FailStrain object
The FailStrain object deﬁnes parameters for strain-based failure measures.
Access
import material
mdb.models[name].materials[name].elastic.failStrain
import odbMaterial
session.odbs[name].materials[name].elastic.failStrain
FailStrain(...)
This method creates a FailStrain object.
Path
mdb.models[name].materials[name].elastic.FailStrain
session.odbs[name].materials[name].elastic.FailStrain
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Tensile strain limit in ﬁber direction, 
.
•
Compressive strain limit in ﬁber direction, 
.
•
Tensile strain limit in transverse direction, 
.
•
Compressive strain limit in transverse direction, 
.
•
Shear strain limit in the 
–  plane, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A FailStrain object.
Abaqus Scripting Reference Guide
1348
FailStrain object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the FailStrain object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FailStrain  method.
Return value
None.
Exceptions
RangeError.
Members
The FailStrain object has members with the same names and descriptions as the arguments to the FailStrain  method.
Corresponding analysis keywords
•
*FAIL STRAIN
1349
Abaqus Scripting Reference Guide
FailStrain object

FailStress object
The FailStress object deﬁnes parameters for stress-based failure measures.
Access
import material
mdb.models[name].materials[name].elastic.failStress
import odbMaterial
session.odbs[name].materials[name].elastic.failStress
FailStress(...)
This method creates a FailStress object.
Path
mdb.models[name].materials[name].elastic.FailStress
session.odbs[name].materials[name].elastic.FailStress
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Tensile stress limit in ﬁber direction, 
.
•
Compressive stress limit in ﬁber direction, 
.
•
Tensile stress limit in transverse direction, 
.
•
Compressive stress limit in transverse direction, 
.
•
Shear strength in the 
–  plane, .
•
Cross product term coefﬁcient,  (
). The default value is zero.
•
Biaxial stress limit, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1350
FailStress object

Return value
A FailStress object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the FailStress object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FailStress  method.
Return value
None.
Exceptions
RangeError.
Members
The FailStress object has members with the same names and descriptions as the arguments to the FailStress  method.
Corresponding analysis keywords
•
*FAIL STRESS
1351
Abaqus Scripting Reference Guide
FailStress object

FailureRatios object
The FailureRatios object speciﬁes the shape of the failure surface for a Concrete model.
Access
import material
mdb.models[name].materials[name].concrete.failureRatios
import odbMaterial
session.odbs[name].materials[name].concrete.failureRatios
FailureRatios(...)
This method creates a FailureRatios object.
Path
mdb.models[name].materials[name].concrete.FailureRatios
session.odbs[name].materials[name].concrete.FailureRatios
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Ratio of the ultimate biaxial compressive stress to the uniaxial compressive ultimate stress. The default value is
1.16.
•
Absolute value of the ratio of the uniaxial tensile stress at failure to the uniaxial compressive stress at failure. The
default value is 0.09.
•
Ratio of the magnitude of a principal component of plastic strain at ultimate stress in biaxial compression to the
plastic strain at ultimate stress in uniaxial compression. The default value is 1.28.
•
Ratio of the tensile principal stress value at shear in plane stress, when the other nonzero principal stress component
is at the ultimate compressive stress value, to the tensile cracking stress under uniaxial tension. The default value
is 1/3.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1352
FailureRatios object

Return value
A FailureRatios object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the FailureRatios object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FailureRatios  method.
Return value
None.
Exceptions
RangeError.
Members
The FailureRatios object has members with the same names and descriptions as the arguments to the FailureRatios
method.
Corresponding analysis keywords
•
*FAILURE RATIOS
1353
Abaqus Scripting Reference Guide
FailureRatios object

FluidLeakoff object
The FluidLeakoff object speciﬁes leak-off coefﬁcients for pore pressure cohesive elements.
Access
import material
mdb.models[name].materials[name].fluidLeakoff
import odbMaterial
session.odbs[name].materials[name].fluidLeakoff
FluidLeakoff(...)
This method creates a FluidLeakoff object.
Path
mdb.models[name].materials[name].FluidLeakoff
session.odbs[name].materials[name].FluidLeakoff
Required arguments
None.
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the type of ﬂuid leak-off. Possible values are
COEFFICIENTS and USER. The default value is COEFFICIENTS.
type
A sequence of sequences of Floats specifying the items described below. The default
value is an empty sequence.
table
Table data
The table data specify the following:
•
Fluid leak-off coefﬁcient at top element surface.
•
Fluid leak-off coefﬁcient at bottom element surface.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A FluidLeakoff object.
Abaqus Scripting Reference Guide
1354
FluidLeakoff object

Exceptions
None.
setValues(...)
This method modiﬁes the FluidLeakoff object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidLeakoff  method.
Return value
None.
Exceptions
None.
Members
The FluidLeakoff object has members with the same names and descriptions as the arguments to the FluidLeakoff
method.
Corresponding analysis keywords
•
*FLUID LEAKOFF
1355
Abaqus Scripting Reference Guide
FluidLeakoff object

GapConductance object
The GapConductance object speciﬁes conductive heat transfer between closely adjacent (or contacting) surfaces.
Access
import material
mdb.models[name].materials[name].gapConductance
import odbMaterial
session.odbs[name].materials[name].gapConductance
GapConductance(...)
This method creates a GapConductance object.
Path
mdb.models[name].materials[name].GapConductance
session.odbs[name].materials[name].GapConductance
Required arguments
Optional arguments
A Boolean specifying whether the data depend on pressure. The default value is
OFF.
pressureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
A sequence of sequences of Floats specifying the items described below.
table
Table data
•
Gap Conductance or Cohesive Separation.
•
Gap Clearance, Gap Pressure (if optional parameter pressureDependency is used), or Closure, c (for coupled
temperature-displacement gasket elements).
•
Average Temperature if the data depend on temperature.
•
Mass Flow Rate per unit area if the data depend on the average mass ﬂow rate.
•
Value of the ﬁrst ﬁeld variable if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GapConductance object.
Abaqus Scripting Reference Guide
1356
GapConductance object

setValues(...)
This method modiﬁes the GapConductance object.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GapConductance method.
Members
The GapConductance object has members with the same names and descriptions as the arguments to the GapConductance
method.
Corresponding analysis keywords
•
GAP CONDUCTANCE
1357
Abaqus Scripting Reference Guide
GapConductance object

GapConvection object
The GapConvection object speciﬁes the Nusselt number (
) to calculate the convective coefﬁcient for heat transfer
between the gap ﬂow and both the top and bottom surfaces of a coupled temperature-pore pressure cohesive element.
Access
import material
mdb.models[name].materials[name].gapConvection
import odbMaterial
session.odbs[name].materials[name].gapConvection
GapConvection(...)
This method creates a GapConvection object.
Path
mdb.models[name].materials[name].GapConvection
session.odbs[name].materials[name].GapConvection
Required arguments
An odb_String specifying the type of gap convection. Possible values are FLUX, TEMPERATURE,
and TABULAR. The default value is FLUX.
type
Optional arguments
If type=TABULAR, the following optional arguments can be used:
A sequence of sequences of Floats specifying the items described below.
table
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
For type=TABULAR the table data specify the following:
•
Nusselt number (
)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1358
GapConvection object

Return value
A GapConvection object.
Exceptions
None.
setValues(...)
This method modiﬁes the GapConvection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GapConvection method.
Return value
None.
Members
The GapConvection object has members with the same names and descriptions as the arguments to the GapConvection
method.
Corresponding analysis keywords
•
*GAP CONVECTION
1359
Abaqus Scripting Reference Guide
GapConvection object

GapFlow object
The GapFlow object speciﬁes tangential ﬂow constitutive parameters for pore pressure cohesive elements.
Access
import material
mdb.models[name].materials[name].gapFlow
import odbMaterial
session.odbs[name].materials[name].gapFlow
GapFlow(...)
This method creates a GapFlow object.
Path
mdb.models[name].materials[name].GapFlow
session.odbs[name].materials[name].GapFlow
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or a Float specifying the maximum permeability value that should be used. If
kmax=None, Abaqus assumes that the permeability is not bounded. This value is meaningful
only when type=NEWTONIAN. The default value is None.
kmax
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the type of gap ﬂow. Possible values are NEWTONIAN,
POWER_LAW, BINGHAM_PLASTIC, and HERSCHEL-BULKLEY. The default value
is NEWTONIAN.
type
Table data
If type=NEWTONIAN the table data specify the following:
•
Pore viscosity.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=POWER_LAW the table data specify the following:
Abaqus Scripting Reference Guide
1360
GapFlow object

•
Consistency.
•
Exponent.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=BINGHAM_PLASTIC the table data specify the following:
•
Consistency.
•
Yield stress.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=HERSCHEL-BULKLEY the table data specify the following:
•
Consistency.
•
Exponent.
•
Yield stress.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GapFlow object.
Exceptions
None.
setValues(...)
This method modiﬁes the GapFlow object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GapFlow method.
Return value
None.
1361
Abaqus Scripting Reference Guide
GapFlow object

Exceptions
None.
Members
The GapFlow object has members with the same names and descriptions as the arguments to the GapFlow method.
Corresponding analysis keywords
•
*GAP FLOW
Abaqus Scripting Reference Guide
1362
GapFlow object

GapRadiation object
The GapRadiation object speciﬁes radiative heat transfer between closely adjacent surfaces.
Access
import material
mdb.models[name].materials[name].gapRadiation
import odbMaterial
session.odbs[name].materials[name].gapRadiation
GapRadiation(...)
This method creates a GapRadiation object.
Path
mdb.models[name].materials[name].Gapradiation
session.odbs[name].materials[name].Gapradiation
Required arguments
A Float specifying the Emissivity of main surface.
mainSurfaceEmissivity
A Float specifying the Emissivity of the secondary surface
.
secondarySurfaceEmissivity
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
Table data
•
Effective view factor.
•
Gap clearance.
•
Repeat this data line as often as necessary to deﬁne the dependence of the view factor on gap clearance.
Return value
A Gapradiation object.
Exceptions
None.
setValues(...)
This method modiﬁes the GapRadiation object.
Required arguments
None.
1363
GapRadiation object

Optional arguments
The optional arguments to setValues are the same as the arguments to the GapRadiation method.
Return value
None.
Exceptions
None.
Members
The Gap Radiation object has members with the same names and descriptions as the arguments to the GapRadiation
method.
Corresponding analysis keywords
•
*GAP RADIATION
Abaqus Scripting Reference Guide
1364
GapRadiation object

GasketMembraneElastic object
The GasketMembraneElastic object deﬁnes the elastic parameters for the membrane shear behavior of a gasket.
Access
import material
mdb.models[name].materials[name].gasketMembraneElastic
import odbMaterial
session.odbs[name].materials[name].gasketMembraneElastic
GasketMembraneElastic(...)
This method creates a GasketMembraneElastic object.
Path
mdb.models[name].materials[name].GasketMembraneElastic
session.odbs[name].materials[name].GasketMembraneElastic
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Young's modulus, .
•
Poisson's ratio, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GasketMembraneElastic object.
Exceptions
RangeError.
1365
GasketMembraneElastic object

setValues(...)
This method modiﬁes the GasketMembraneElastic object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GasketMembraneElastic  method.
Return value
None.
Exceptions
RangeError.
Members
The GasketMembraneElastic object has members with the same names and descriptions as the arguments to the
GasketMembraneElastic  method.
Corresponding analysis keywords
•
*GASKET ELASTICITY
Abaqus Scripting Reference Guide
1366
GasketMembraneElastic object

GasketThicknessBehavior object
The GasketThicknessBehavior object deﬁnes the behavior in the thickness direction for a gasket.
Access
import material
mdb.models[name].materials[name].gasketThicknessBehavior
import odbMaterial
session.odbs[name].materials[name].gasketThicknessBehavior
GasketThicknessBehavior(...)
This method creates a GasketThicknessBehavior object.
Path
mdb.models[name].materials[name].GasketThicknessBehavior
session.odbs[name].materials[name].GasketThicknessBehavior
Required arguments
A sequence of sequences of Floats specifying loading data. The ﬁrst sequence must contain only 0. At
least two sequences must be speciﬁed if type=DAMAGE, and at least 3 sequences must be speciﬁed
if type=ELASTIC_PLASTIC. The items in the table data are described below.
table
Optional arguments
A Boolean specifying whether the loading data depend on temperature. The
default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies included in the
deﬁnition of the loading data, in addition to temperature. The default value is 0.
dependencies
A Float specifying the fraction of the initial compressive stiffness that deﬁnes
the stiffness in tension. The default value is 10–3.
tensileStiffnessFactor
A SymbolicConstant specifying a damage elasticity model or an elastic-plastic
model for gasket thickness-direction behavior. Possible values are
ELASTIC_PLASTIC and DAMAGE. The default value is ELASTIC_PLASTIC.
type
An Int specifying the number of ﬁeld variable dependencies included in the
deﬁnition of the unloading data, in addition to temperature. The default value is
0.
unloadingDependencies
A Boolean specifying whether unloading data depends on temperature. The
default value is OFF.
unloadingTemperatureDependency
1367
GasketThicknessBehavior object

A SymbolicConstant specifying the behavior in terms of units of force (or force
in unit length) versus closure or pressure versus closure. Possible values are
STRESS and FORCE. The default value is STRESS.
variableUnits
A Float specifying the closure value at which the onset of yield occurs or the
relative drop in slope on the loading curve that deﬁnes the onset of plastic
yieldOnset
deformation (depending on the value of yieldOnsetMethod). The default value
is 0.1.
A SymbolicConstant specifying the method used to determine yield onset.
Possible values are RELATIVE_SLOPE_DROP and CLOSURE_VALUE. The
default value is RELATIVE_SLOPE_DROP.
yieldOnsetMethod
A sequence of sequences of Floats specifying unloading data. The items in the
table data are described below. The default value is an empty sequence.
unloadingTable
Table data
If variableUnits=STRESS, the loading table data specify the following:
•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=FORCE, the loading table data specify the following:
•
Force or force per unit length; this value must be positive.
•
Closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=STRESS and type=ELASTIC_PLASTIC, the unloadingTable data specify the following:
•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Plastic closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=FORCE and type=ELASTIC_PLASTIC, the unloadingTable data specify the following:
Abaqus Scripting Reference Guide
1368
GasketThicknessBehavior object

•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Plastic closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=STRESS and type=DAMAGE, the unloadingTable data specify the following:
•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Maximum closure reached while loading the gasket; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=FORCE and type=DAMAGE, the unloadingTable data specify the following:
•
Force or force per unit length; this value must be positive.
•
Closure; this value must be positive.
•
Maximum closure reached while loading the gasket; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GasketThicknessBehavior object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the GasketThicknessBehavior object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GasketThicknessBehavior  method.
1369
Abaqus Scripting Reference Guide
GasketThicknessBehavior object

Return value
None.
Exceptions
RangeError.
Members
The GasketThicknessBehavior object has members with the same names and descriptions as the arguments to the
GasketThicknessBehavior  method.
In addition, the GasketThicknessBehavior object can have the following member:
A ContactArea object.
contactArea
Corresponding analysis keywords
•
*GASKET THICKNESS BEHAVIOR
Abaqus Scripting Reference Guide
1370
GasketThicknessBehavior object

GasketTransverseShearElastic object
The GasketTransverseShearElastic object deﬁnes the elastic parameters for the transverse shear behavior of a gasket.
Access
import material
mdb.models[name].materials[name].gasketTransverseShearElastic
import odbMaterial
session.odbs[name].materials[name].gasketTransverseShearElastic
GasketTransverseShearElastic(...)
This method creates a GasketTransverseShearElastic object.
Path
mdb.models[name].materials[name].GasketTransverseShearElastic
session.odbs[name].materials[name].GasketTransverseShearElastic
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the unit system in which the transverse shear behavior
will be deﬁned. Possible values are STRESS and FORCE. The default value is
STRESS.
variableUnits
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
•
Shear stiffness. (This value cannot be negative.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GasketTransverseShearElastic object.
1371
GasketTransverseShearElastic object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the GasketTransverseShearElastic object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GasketTransverseShearElastic  method.
Return value
None.
Exceptions
RangeError.
Members
The GasketTransverseShearElastic object has members with the same names and descriptions as the arguments to the
GasketTransverseShearElastic  method.
Corresponding analysis keywords
•
*GASKET ELASTICITY
Abaqus Scripting Reference Guide
1372
GasketTransverseShearElastic object

Gel object
The Gel object deﬁnes a swelling gel.
Access
import material
mdb.models[name].materials[name].gel
import odbMaterial
session.odbs[name].materials[name].gel
Gel(...)
This method creates a Gel object.
Path
mdb.models[name].materials[name].Gel
session.odbs[name].materials[name].Gel
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
Radius of gel particles when completely dry, 
.
•
Fully swollen radius of gel particles, 
.
•
Number of gel particles per unit volume, 
.
•
Relaxation time constant for long-term swelling of gel particles, 
.
Return value
A Gel object.
Exceptions
None.
setValues(...)
This method modiﬁes the Gel object.
Required arguments
None.
1373
Gel object

Optional arguments
The optional arguments to setValues are the same as the arguments to the Gel  method.
Return value
None.
Exceptions
None.
Members
The Gel object has members with the same names and descriptions as the arguments to the Gel  method.
Corresponding analysis keywords
•
*GEL
Abaqus Scripting Reference Guide
1374
Gel object

HeatGeneration object
The HeatGeneration object includes volumetric heat generation in heat transfer analyses.
Access
import material
mdb.models[name].materials[name].heatGeneration
import odbMaterial
session.odbs[name].materials[name].heatGeneration
HeatGeneration()
This method creates a HeatGeneration object.
Path
mdb.models[name].materials[name].HeatGeneration
session.odbs[name].materials[name].HeatGeneration
Arguments
None.
Return value
A HeatGeneration object.
Exceptions
None.
Members
The HeatGeneration object has no members.
Corresponding analysis keywords
•
*HEAT GENERATION
1375
HeatGeneration object

Hyperelastic object
The Hyperelastic object speciﬁes elastic properties for approximately incompressible elastomers.
Access
import material
mdb.models[name].materials[name].hyperelastic
import odbMaterial
session.odbs[name].materials[name].hyperelastic
Hyperelastic(...)
This method creates a Hyperelastic object.
Path
mdb.models[name].materials[name].Hyperelastic
session.odbs[name].materials[name].Hyperelastic
Required arguments
A sequence of sequences of Floats specifying the items described below. This argument is valid
only if testData=OFF.
table
Optional arguments
A SymbolicConstant specifying the type of strain energy potential. Possible values are:
type
•
ARRUDA_BOYCE
•
MARLOW
•
MOONEY_RIVLIN
•
NEO_HOOKE
•
OGDEN
•
POLYNOMIAL
•
REDUCED_POLYNOMIAL
•
USER
•
VAN_DER_WAALS
•
YEOH
•
UNKNOWN
•
VALANIS_LANDEL
The default value is UNKNOWN.
A SymbolicConstant specifying the nature of the time response. Possible values are
INSTANTANEOUS and LONG_TERM. The default value is LONG_TERM.
moduliTimeScale
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
Abaqus Scripting Reference Guide
1376
Hyperelastic object

An Int specifying the order of the strain energy potential. The default value is 1.
n
If testData=ON and type=POLYNOMIAL, n can take only the values 1 or 2.
If testData=ON and type=OGDEN or if testData=OFF for either type, 1 
 6.
If type=USER, this argument cannot be used.
The SymbolicConstant FITTED_VALUE or a Float specifying the invariant mixture
parameter. This argument is valid only if testData=ON and type=VAN_DER_WAALS.
The default value is FITTED_VALUE.
beta
A Boolean specifying whether test data are supplied. The default value is ON.
testData
A Boolean specifying whether the hyperelastic material is compressible. This parameter is
applicable only to user-deﬁned hyperelastic materials. The default value is OFF.
compressible
An Int specifying the number of property values needed as data for the user-deﬁned
hyperelastic material. The default value is 0.
properties
A SymbolicConstant specifying which test data to use. Possible values are UNIAXIAL,
BIAXIAL, and PLANAR. The default value is UNIAXIAL.
deviatoricResponse
A SymbolicConstant specifying the volumetric response. Possible values are DEFAULT,
VOLUMETRIC_DATA, POISSON_RATIO, and LATERAL_NOMINAL_STRAIN. The
default value is DEFAULT.
volumetricResponse
A Float specifying the Poisson's ratio. This argument is valid only if
volumetricResponse=POISSON_RATIO. The default value is 0.0.
poissonRatio
A SymbolicConstant specifying the type of material. Possible values are ISOTROPIC and
ANISOTROPIC. The default value is ISOTROPIC.
materialType
A SymbolicConstant specifying the type of strain energy potential. Possible values are
FUNG_ANISOTROPIC, FUNG_ORTHOTROPIC, HOLZAPFEL, and USER_DEFINED.
The default value is FUNG_ANISOTROPIC.
anisotropicType
A SymbolicConstant specifying the type of formulation. Possible values are STRAIN and
INVARIANT. The default value is STRAIN.
formulation
A SymbolicConstant specifying the type of anisotropic hyperelastic material behavior.
Possible values are INCOMPRESSIBLE and COMPRESSIBLE. The default value is
INCOMPRESSIBLE.
behaviorType
An Int specifying the number of ﬁeld variable dependencies for the data involumetricTable.
The default value is 0.
dependencies
An Int specifying the number of local directions for the data involumetricTable. The default
value is 0.
localDirections
1377
Abaqus Scripting Reference Guide
Hyperelastic object

Table data
If type=ARRUDA_BOYCE, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=MOONEY_RIVLIN, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=NEO_HOOKE, the table data specify the following:
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=OGDEN, the table data specify the following for values of :
•
 and 
 for  from 1 to .
•
 coefﬁcients 
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 4 
 6 in an
Abaqus/Explicit analysis.
If type=POLYNOMIAL, the table data specify the following for values of :
•
 for each value of 
 from  to  with  decreasing from 
 to zero and  increasing from zero to 
.
•
 coefﬁcients 
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 3 
 6 in an
Abaqus/Explicit analysis.
If type=REDUCED_POLYNOMIAL, the table data specify the following for values of :
•
 for  from 1 to .
•
 coefﬁcients 
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 4 
 6 in an
Abaqus/Explicit analysis.
If type=VAN_DER_WAALS, the table data specify the following:
•
.
•
.
Abaqus Scripting Reference Guide
1378
Hyperelastic object

•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=YEOH, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed in an Abaqus/Explicit
analysis.
The None object is the default value if testData=ON.
Return value
A Hyperelastic object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the Hyperelastic object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Hyperelastic method.
Return value
None.
Exceptions
RangeError.
Members
The Hyperelastic object has members with the same names and descriptions as the arguments to the Hyperelastic
method.
1379
Abaqus Scripting Reference Guide
Hyperelastic object

In addition, the Hyperelastic object can have the following members:
A BiaxialTestData object.
biaxialTestData
A PlanarTestData object.
planarTestData
A UniaxialTestData object.
uniaxialTestData
A VolumetricTestData object.
volumetricTestData
A Hysteresis object.
hysteresis
Corresponding analysis keywords
•
*HYPERELASTIC
Abaqus Scripting Reference Guide
1380
Hyperelastic object

Hyperfoam object
The Hyperfoam object speciﬁes elastic properties for a hyperelastic foam.
Access
import material
mdb.models[name].materials[name].hyperfoam
import odbMaterial
session.odbs[name].materials[name].hyperfoam
Hyperfoam(...)
This method creates a Hyperfoam object.
Path
mdb.models[name].materials[name].Hyperfoam
session.odbs[name].materials[name].Hyperfoam
Required arguments
None.
Optional arguments
A Boolean specifying whether test data are supplied. The default value is OFF.
testData
None or a Float specifying the effective Poisson's ratio, , of the material. This argument
is valid only when testData=ON. The default value is None.
poisson
An Int specifying the order of the strain energy potential. Possible values are 1 
 6.
The default value is 1.
n
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
A SymbolicConstant specifying the time-dependence of the material constants. Possible
values are INSTANTANEOUS and LONG_TERM. The default value is LONG_TERM.
moduli
A sequence of sequences of Floats specifying the items described below. This argument is
valid only when testData=OFF. The default value is an empty sequence.
table
Table data
The items in the table data specify the following for values of :
•
 and 
 for  from 1 to .
•
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 4 
 6 in an
Abaqus/Explicit analysis.
1381
Hyperfoam object

Return value
A Hyperfoam object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Hyperfoam object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Hyperfoam  method.
Return value
None.
Exceptions
RangeError.
Members
The Hyperfoam object has members with the same names and descriptions as the arguments to the Hyperfoam  method.
In addition, the Hyperfoam object can have the following members:
A BiaxialTestData object.
biaxialTestData
A VolumetricTestData object.
volumetricTestData
A PlanarTestData object.
planarTestData
A SimpleShearTestData object.
simpleShearTestData
A UniaxialTestData object.
uniaxialTestData
Corresponding analysis keywords
•
*HYPERFOAM
Abaqus Scripting Reference Guide
1382
Hyperfoam object

Hypoelastic object
The Hypoelastic object speciﬁes hypoelastic material properties.
Access
import material
mdb.models[name].materials[name].hypoelastic
import odbMaterial
session.odbs[name].materials[name].hypoelastic
Hypoelastic(...)
This method creates a Hypoelastic object.
Path
mdb.models[name].materials[name].Hypoelastic
session.odbs[name].materials[name].Hypoelastic
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying that hypoelasticity is deﬁned by user subroutine UHYPEL. The default
value is OFF.
user
Table data
•
Instantaneous Young's modulus, .
•
Instantaneous Poisson's ratio, .
•
First strain invariant, 
.
•
Second strain invariant, 
.
•
Third strain invariant, 
.
Return value
A Hypoelastic object.
Exceptions
None.
setValues(...)
This method modiﬁes the Hypoelastic object.
1383
Hypoelastic object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Hypoelastic  method.
Return value
None.
Exceptions
None.
Members
The Hypoelastic object has members with the same names and descriptions as the arguments to the Hypoelastic
method.
Corresponding analysis keywords
•
*HYPOELASTIC
Abaqus Scripting Reference Guide
1384
Hypoelastic object

Hysteresis object
The Hysteresis object speciﬁes the creep part of the material model for the hysteretic behavior of elastomers.
Access
import material
mdb.models[name].materials[name].hyperelastic.hysteresis
import odbMaterial
session.odbs[name].materials[name].hyperelastic.hysteresis
Hysteresis(...)
This method creates a Hysteresis object.
Path
mdb.models[name].materials[name].hyperelastic.Hysteresis
session.odbs[name].materials[name].hyperelastic.Hysteresis
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
Stress scaling factor.
•
Creep parameter.
•
Effective stress exponent.
•
Creep strain exponent.
Return value
A Hysteresis object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Hysteresis object.
Required arguments
None.
1385
Hysteresis object

Optional arguments
The optional arguments to setValues are the same as the arguments to the Hysteresis  method.
Return value
None.
Exceptions
RangeError.
Members
The Hysteresis object has members with the same names and descriptions as the arguments to the Hysteresis  method.
Corresponding analysis keywords
•
*HYSTERESIS
Abaqus Scripting Reference Guide
1386
Hysteresis object

InelasticHeatFraction object
The InelasticHeatFraction object deﬁnes the fraction of the rate of inelastic dissipation that appears as a heat source.
Access
import material
mdb.models[name].materials[name].inelasticHeatFraction
import odbMaterial
session.odbs[name].materials[name].inelasticHeatFraction
InelasticHeatFraction(...)
This method creates an InelasticHeatFraction object.
Path
mdb.models[name].materials[name].InelasticHeatFraction
session.odbs[name].materials[name].InelasticHeatFraction
Required arguments
None.
Optional arguments
A Float specifying the fraction of inelastic dissipation rate that appears as a heat ﬂux per unit
volume. The fraction may include a unit conversion factor if required. Possible values are 0.0
fraction  1.0. The default value is 0.9.
fraction
Return value
An InelasticHeatFraction object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the InelasticHeatFraction object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the InelasticHeatFraction  method.
Return value
None.
1387
InelasticHeatFraction object

Exceptions
RangeError.
Members
The InelasticHeatFraction object has members with the same names and descriptions as the arguments to the
InelasticHeatFraction  method.
Corresponding analysis keywords
•
*INELASTIC HEAT FRACTION
Abaqus Scripting Reference Guide
1388
InelasticHeatFraction object

JouleHeatFraction object
The JouleHeatFraction object deﬁnes the fraction of electric energy released as heat.
Access
import material
mdb.models[name].materials[name].jouleHeatFraction
import odbMaterial
session.odbs[name].materials[name].jouleHeatFraction
JouleHeatFraction(...)
This method creates a JouleHeatFraction object.
Path
mdb.models[name].materials[name].JouleHeatFraction
session.odbs[name].materials[name].JouleHeatFraction
Required arguments
None.
Optional arguments
A Float specifying the fraction of electrical energy released as heat, including any unit
conversion factor. The default value is 1.0.
fraction
Return value
A JouleHeatFraction object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the JouleHeatFraction object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the JouleHeatFraction  method.
Return value
None.
1389
JouleHeatFraction object

Exceptions
RangeError.
Members
The JouleHeatFraction object has members with the same names and descriptions as the arguments to the
JouleHeatFraction  method.
Corresponding analysis keywords
•
*JOULE HEAT FRACTION
Abaqus Scripting Reference Guide
1390
JouleHeatFraction object

LatentHeat object
The LatentHeat object speciﬁes a material's latent heat.
Access
import material
mdb.models[name].materials[name].latentHeat
import odbMaterial
session.odbs[name].materials[name].latentHeat
LatentHeat(...)
This method creates a LatentHeat object.
Path
mdb.models[name].materials[name].LatentHeat
session.odbs[name].materials[name].LatentHeat
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
Latent heat per unit mass.
•
Solidus temperature.
•
Liquidus temperature.
Return value
A LatentHeat object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the LatentHeat object.
Required arguments
None.
1391
LatentHeat object

Optional arguments
The optional arguments to setValues are the same as the arguments to the LatentHeat  method.
Return value
None.
Exceptions
RangeError.
Members
The LatentHeat object has members with the same names and descriptions as the arguments to the LatentHeat  method.
Corresponding analysis keywords
•
*LATENT HEAT
Abaqus Scripting Reference Guide
1392
LatentHeat object

LowDensityFoam object
The LowDensityFoam object speciﬁes properties for low-density foam.
Access
import material
mdb.models[name].materials[name].lowDensityFoam
import odbMaterial
session.odbs[name].materials[name].lowDensityFoam
LowDensityFoam(...)
This method creates a LowDensityFoam object.
Path
mdb.models[name].materials[name].LowDensityFoam
session.odbs[name].materials[name].LowDensityFoam
Required arguments
None.
Optional arguments
A Boolean specifying whether elements are removed if exceeding maximum principal
tensile stress. This argument is valid only when maxAllowablePrincipalStress is
deﬁned. The default value is OFF.
elementRemoval
None or a Float specifying the maximum allowable principal tensile stress. The default
value is None.
maxAllowablePrincipalStress
A Boolean specifying whether the stress-strain curve is extrapolated if exceeding
maximum strain rate. The default value is OFF.
extrapolateStressStrainCurve
A SymbolicConstant specifying strain rate measure used for constitutive calculations.
Possible values are PRINCIPAL and VOLUMETRIC. The default value is
VOLUMETRIC.
strainRateType
A Float specifying the relaxation coefﬁcient 
. The default value is 10–4.
mu0
A Float specifying the relaxation coefﬁcient 
. The default value is 0.5×10–2.
mu1
A Float specifying the relaxation coefﬁcient . The default value is 2.0.
alpha
Return value
A LowDensityFoam object.
1393
LowDensityFoam object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the LowDensityFoam object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the LowDensityFoam  method.
Return value
None.
Exceptions
RangeError.
Members
The LowDensityFoam object has members with the same names and descriptions as the arguments to the
LowDensityFoam  method.
In addition, the LowDensityFoam object can have the following members:
A UniaxialTestData object.
uniaxialTensionTestData
A UniaxialTestData object.
uniaxialCompressionTestData
Corresponding analysis keywords
•
*LOW DENSITY FOAM
Abaqus Scripting Reference Guide
1394
LowDensityFoam object

MagneticPermeability object
The MagneticPermeability object speciﬁes magnetic permeability.
Access
import material
mdb.models[name].materials[name].magneticPermeability
import odbMaterial
session.odbs[name].materials[name].magneticPermeability
MagneticPermeability(...)
This method creates a MagneticPermeability object.
Path
mdb.models[name].materials[name].MagneticPermeability
session.odbs[name].materials[name].MagneticPermeability
Required arguments
A sequence of sequences of Floats specifying the items described below in “Table data.” If
type=ORTHOTROPIC and nonlinearBH=ON, the data speciﬁed in the table is for the ﬁrst direction
and table2 and table3 must be speciﬁed.
table
A sequence of sequences of Floats specifying the items described below in “Table data” in the second
direction. table2 must be speciﬁed only if type=ORTHOTROPIC and nonlinearBH=ON.
table2
A sequence of sequences of Floats specifying the items described below in “Table data” in the third
direction. table3 must be speciﬁed only if type=ORTHOTROPIC and nonlinearBH=ON.
table3
Optional arguments
A SymbolicConstant specifying the type of magnetic permeability. Possible values
are ISOTROPIC, ORTHOTROPIC, and ANISOTROPIC. The default value is
ISOTROPIC.
type
A Boolean specifying whether the data depend on frequency. The default value is
OFF.
frequencyDependency
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Boolean specifying whether the magnetic behavior is nonlinear and available in
tabular form of magnetic ﬂux density versus magnetic ﬁeld values. The default value
is OFF.
nonlinearBH
1395
MagneticPermeability object

Table data
If type=ISOTROPIC, the table data specify the following:
•
Magnetic permeability.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ISOTROPIC, and nonlinearBH=TRUE, the table data specify the following:
•
Magntitude of the magnetic ﬂux density vector.
•
Magnitude of the magnetic ﬁeld vector.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, and nonlinearBH=TRUE, the table data specify the following:
•
Magntitude of the magnetic ﬂux density vector in the ﬁrst direction.
•
Magnitude of the magnetic ﬁeld vector in the second direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
Abaqus Scripting Reference Guide
1396
MagneticPermeability object

•
.
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A MagneticPermeability object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the MagneticPermeability object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MagneticPermeability  method.
Return value
None.
Exceptions
RangeError.
Members
The MagneticPermeability object has members with the same names and descriptions as the arguments to the
MagneticPermeability  method.
Corresponding analysis keywords
•
*MAGNETIC PERMEABILITY
1397
Abaqus Scripting Reference Guide
MagneticPermeability object

MeanFieldHomogenization object
The MeanFieldHomogenization object speciﬁes the multiscale material deﬁnition.
Access
import material
mdb.models[name].materials[name].meanFieldHomogenization
import odbMaterial
session.odbs[name].materials[name].meanFieldHomogenization
MeanFieldHomogenization(...)
This method creates a MeanFieldHomogenization object.
Path
mdb.models[name].materials[name].MeanFieldHomogenization
session.odbs[name].materials[name].MeanFieldHomogenization
Required arguments
None.
Optional arguments
An Int specifying the number of angle increments used for the discretization of the
orientation space.
angleSubdivision
A SymbolicConstant specifying the type of homogenization model. Possible values are
MT, REUSS, VOIGT, INVERSED_MT, BALANCED, and UNSPECIFIED. The default
value is MT.
formulation
A SymbolicConstant specifying the type of isotropization method. Possible values are
ALLISO, EISO, and PISO. The default value is ALLISO.
isotropization
A SymbolicConstant specifying whether the average strain in the matrix is uniform
across all pseudo-grains. Possible values are NO and YES. The default value is NO.
uniformMatrixStrain
Return value
A MeanFieldHomogenization object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the MeanFieldHomogenization object.
Abaqus Scripting Reference Guide
1398
MeanFieldHomogenization object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MeanFieldHomogenization(...) method.
Return value
None.
Exceptions
RangeError.
Members
The MeanFieldHomogenization object has members with the same names and descriptions as the arguments to the
MeanFieldHomogenization(...) method.
Corresponding analysis keywords
•
*MEAN FIELD HOMOGENIZATION
1399
Abaqus Scripting Reference Guide
MeanFieldHomogenization object

MeanFieldInclusion object
The MeanFieldInclusion object speciﬁes the inclusion type multiscale material property.
Access
import material
mdb.models[name].materials[name].constituents[name]
import odbMaterial
session.odbs[name].materials[name].constituents[name]
MeanFieldInclusion(...)
This method creates a MeanFieldInclusion object.
Path
mdb.models[name].materials[name].meanFieldHomogenization.MeanFieldInclusion
session.odbs[name].materials[name].meanFieldHomogenization.MeanFieldInclusion
Required arguments
A String specifying the constituent repository key.
name
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A String specifying the name of the material.
material
A Float specifying the factor used for scaling the plastic strain of the
constituent when calculating the isotropic part of the tangent.
isotropizationCoefﬁcient
A SymbolicConstant specifying the type of volume fraction. Possible
values are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD.
The default value is UNIFORM.
volumeFractionType
A String specifying the name of the AnalyticalField object or
DiscreteField object.
volumeFractionFieldName
A SymbolicConstant specifying the type of aspect ratio. Possible values
are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD. The
default value is UNIFORM.
aspectRatioType
A String specifying the name of the AnalyticalField object or
DiscreteField object.
aspectRatioFieldName
A SymbolicConstant specifying the type of orientation tensor. Possible
values are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD.
The default value is UNIFORM.
orientationTensorType
Abaqus Scripting Reference Guide
1400
MeanFieldInclusion object

A String specifying the name of the AnalyticalField object or
DiscreteField object.
orientationTensorFieldName
A SymbolicConstant specifying the type of inclusion shapes. Possible
values are SPHERE, PROLATE, OBLATE, CYLINDER, PENNY, and
ELLIPTIC_CYLINDER. The default value is SPHERE.
shape
A SymbolicConstant specifying the type of inclusion direction. Possible
values are FIXED, RANDOM3D, and ORIENTATION_TENSOR.
direction
A sequence of Floats deﬁning the 36 components of the strain
concentration tensor.
strainConcentrationTensor
A sequence of Floats deﬁning the 9 components of the temperature
gradient concentration tensor.
temperatureGradientConcentrationTensor
Table data
The table data specify the following:
•
Volume fraction.
•
Aspect ratio.
•
Components of the direction vector deﬁned in the local coordinate system when direction=FIXED. Components
of the second-order orientation tensor in the local coordinate system when direction=ORIENTATION_TENSOR.
•
Etc.
Return value
A MeanFieldInclusion object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the MeanFieldInclusion object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MeanFieldInclusion(...) method.
Return value
None.
1401
Abaqus Scripting Reference Guide
MeanFieldInclusion object

Exceptions
RangeError.
Members
The MeanFieldInclusion object has members with the same names and descriptions as the arguments to the
MeanFieldInclusion(...) method.
Corresponding analysis keywords
•
*CONSTITUENT
Abaqus Scripting Reference Guide
1402
MeanFieldInclusion object

MeanFieldMatrix object
The MeanFieldMatrix object speciﬁes the matrix property.
Access
import material
mdb.models[name].materials[name].constituents[name]
import odbMaterial
session.odbs[name].materials[name].constituents[name]
MeanFieldMatrix(...)
This method creates a MeanFieldMatrix object.
Path
mdb.models[name].materials[name].meanFieldHomogenization.MeanFieldMatrix
session.odbs[name].materials[name].meanFieldHomogenization.MeanFieldMatrix
Required arguments
A String specifying the constituent repository key.
name
Optional arguments
A String specifying the name of the material.
material
A Float specifying the factor used for scaling the plastic strain of the constituent
when calculating the isotropic part of the tangent.
isotropizationCoefﬁcient
Return value
A MeanFieldMatrix object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the MeanFieldMatrix object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MeanFieldMatrix(...) method.
1403
MeanFieldMatrix object

Return value
None.
Exceptions
RangeError.
Members
The MeanFieldMatrix object has members with the same names and descriptions as the arguments to the
MeanFieldMatrix(...) method.
Corresponding analysis keywords
•
*CONSTITUENT
Abaqus Scripting Reference Guide
1404
MeanFieldMatrix object

MeanFieldVoid object
The MeanFieldVoid object speciﬁes the void inclusion property.
Access
import material
mdb.models[name].materials[name].constituents[name]
import odbMaterial
session.odbs[name].materials[name].constituents[name]
MeanFieldVoid(...)
This method creates a MeanFieldVoid object.
Path
mdb.models[name].materials[name].meanFieldHomogenization.MeanFieldVoid
session.odbs[name].materials[name].meanFieldHomogenization.MeanFieldVoid
Required arguments
A String specifying the constituent repository key.
name
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A String specifying the name of the material.
material
A Float specifying the factor used for scaling the plastic strain of the
constituent when calculating the isotropic part of the tangent.
isotropizationCoefﬁcient
A SymbolicConstant specifying the type of volume fraction. Possible
values are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD.
The default value is UNIFORM.
volumeFractionType
A String specifying the name of the AnalyticalField object or
DiscreteField object.
volumeFractionFieldName
A SymbolicConstant specifying the type of aspect ratio. Possible values
are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD. The
default value is UNIFORM.
aspectRatioType
A String specifying the name of the AnalyticalField object or
DiscreteField object.
aspectRatioFieldName
A SymbolicConstant specifying the type of orientation tensor. Possible
values are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD.
The default value is UNIFORM.
orientationTensorType
1405
MeanFieldVoid object

A String specifying the name of the AnalyticalField object or
DiscreteField object.
orientationTensorFieldName
A SymbolicConstant specifying the type of inclusion shapes. Possible
values are SPHERE, PROLATE, OBLATE, CYLINDER, PENNY, and
ELLIPTIC_CYLINDER. The default value is SPHERE.
shape
A SymbolicConstant specifying the type of inclusion direction. Possible
values are FIXED, RANDOM3D, and ORIENTATION_TENSOR.
direction
A sequence of Floats deﬁning the 36 components of the strain
concentration tensor.
strainConcentrationTensor
A sequence of Floats deﬁning the 9 components of the temperature
gradient concentration tensor.
temperatureGradientConcentrationTensor
Table data
The table data specify the following:
•
Volume fraction.
•
Aspect ratio.
•
Components of the direction vector deﬁned in the local coordinate system when direction=FIXED. Components
of the second-order orientation tensor in the local coordinate system when direction=ORIENTATION_TENSOR.
•
Etc.
Return value
A MeanFieldVoid object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the MeanFieldVoid object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MeanFieldVoid(...) method.
Return value
None.
Abaqus Scripting Reference Guide
1406
MeanFieldVoid object

Exceptions
RangeError.
Members
The MeanFieldVoid object has members with the same names and descriptions as the arguments to the MeanFieldVoid(...)
method.
Corresponding analysis keywords
•
*CONSTITUENT
1407
Abaqus Scripting Reference Guide
MeanFieldVoid object

MohrCoulombHardening object
The MohrCoulombHardening object speciﬁes hardening for the Mohr-Coulomb plasticity model.
Access
import material
mdb.models[name].materials[name].mohrCoulombPlasticity\
.mohrCoulombHardening
import odbMaterial
session.odbs[name].materials[name].mohrCoulombPlasticity\
.mohrCoulombHardening
MohrCoulombHardening(...)
This method creates a MohrCoulombHardening object.
Path
mdb.models[name].materials[name].mohrCoulombPlasticity\
.MohrCoulombHardening
session.odbs[name].materials[name].mohrCoulombPlasticity\
.MohrCoulombHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Cohesion yield stress.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A MohrCoulombHardening object.
Abaqus Scripting Reference Guide
1408
MohrCoulombHardening object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the MohrCoulombHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MohrCoulombHardening  method.
Return value
None.
Exceptions
RangeError.
Members
The MohrCoulombHardening object has members with the same names and descriptions as the arguments to the
MohrCoulombHardening  method.
Corresponding analysis keywords
•
*MOHR COULOMB HARDENING
1409
Abaqus Scripting Reference Guide
MohrCoulombHardening object

MohrCoulombPlasticity object
The MohrCoulombPlasticity object speciﬁes the extended Mohr-Coulomb plasticity model.
Access
import material
mdb.models[name].materials[name].mohrCoulombPlasticity
import odbMaterial
session.odbs[name].materials[name].mohrCoulombPlasticity
MohrCoulombPlasticity(...)
This method creates a MohrCoulombPlasticity object.
Path
mdb.models[name].materials[name].MohrCoulombPlasticity
session.odbs[name].materials[name].MohrCoulombPlasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or a Float specifying the ﬂow potential eccentricity in the deviatoric plane,
; 1/2 
 1.0. If deviatoricEccentricity=None, Abaqus calculates the value
using the speciﬁed Mohr-Coulomb angle of friction. The default value is None.
deviatoricEccentricity
A Float specifying the ﬂow potential eccentricity in the meridional plane, . The
default value is 0.1.
meridionalEccentricity
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
A Boolean specifying whether tension cutoff speciﬁcation is needed. The default
value is OFF.
useTensionCutoff
Table data
The table data specify the following:
•
Friction angle (given in degrees), , at high conﬁning pressure in the –
 plane.
•
Dilation angle, , at high conﬁning pressure in the –
 plane.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
1410
MohrCoulombPlasticity object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A MohrCoulombPlasticity object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the MohrCoulombPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MohrCoulombPlasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The MohrCoulombPlasticity object has members with the same names and descriptions as the arguments to the
MohrCoulombPlasticity  method.
In addition, the MohrCoulombPlasticity object can have the following members:
A MohrCoulombHardening object.
mohrCoulombHardening
A TensionCutOff object.
tensionCutOff
Corresponding analysis keywords
•
*MOHR COULOMB
1411
Abaqus Scripting Reference Guide
MohrCoulombPlasticity object

MoistureSwelling object
The MoistureSwelling object deﬁnes moisture-driven swelling.
Access
import material
mdb.models[name].materials[name].moistureSwelling
import odbMaterial
session.odbs[name].materials[name].moistureSwelling
MoistureSwelling(...)
This method creates a MoistureSwelling object.
Path
mdb.models[name].materials[name].MoistureSwelling
session.odbs[name].materials[name].MoistureSwelling
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
Volumetric moisture swelling strain, 
.
•
Saturation, . This value must lie in the range 
.
Return value
A MoistureSwelling object.
Exceptions
None.
setValues(...)
This method modiﬁes the MoistureSwelling object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MoistureSwelling  method.
Abaqus Scripting Reference Guide
1412
MoistureSwelling object

Return value
None.
Exceptions
None.
Members
The MoistureSwelling object has members with the same names and descriptions as the arguments to the
MoistureSwelling  method.
In addition, the MoistureSwelling object can have the following member:
A Ratios object.
ratios
Corresponding analysis keywords
•
*MOISTURE SWELLING
1413
Abaqus Scripting Reference Guide
MoistureSwelling object

MullinsEffect object
The MullinsEffect speciﬁes properties for mullins data.
Access
import material
mdb.models[name].materials[name].mullinsEffect
import odbMaterial
session.odbs[name].materials[name].mullinsEffect
Members
The MullinsEffect object can have the following members:
A SymbolicConstant specifying the method of specifying the data. Possible values
are USER, CONSTANTS, and TEST_DATA. The default value is CONSTANTS.
deﬁnition
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
An Int specifying the number of property values needed as data for the user-deﬁned
hyperelastic material. The default value is 0.
properties
A tuple of tuples of Floats specifying the items described below. The default value
is an empty sequence.
table
A UniaxialTestDataArray object.
uniaxialTests
A BiaxialTestDataArray object.
biaxialTests
A PlanarTestDataArray object.
planarTests
Abaqus Scripting Reference Guide
1414
MullinsEffect object

Ornl object
The Ornl object speciﬁes the constitutive model developed by Oak Ridge National Laboratory.
Access
import material
mdb.models[name].materials[name].creep.ornl
mdb.models[name].materials[name].plastic.ornl
import odbMaterial
session.odbs[name].materials[name].creep.ornl
session.odbs[name].materials[name].plastic.ornl
Ornl(...)
This method creates an Ornl object.
Path
mdb.models[name].materials[name].creep.Ornl
mdb.models[name].materials[name].plastic.Ornl
session.odbs[name].materials[name].creep.Ornl
session.odbs[name].materials[name].plastic.Ornl
Required arguments
None.
Optional arguments
A Float specifying the saturation rates for kinematic shift caused by creep strain, as deﬁned by Equation (15)
of Section 4.3.3–3 of the Nuclear Standard. The default value corresponds to that section of the Standard.
Set a=0.0 to use the 1986 revision of the Standard. The default value is 0.3.
a
None or a Float specifying the rate of kinematic shift with respect to creep strain [Equation (7) of
Section 4.3.2–1 of the Nuclear Standard]. If h=None, the value of h is determined according to
h
Section 4.3.3–3 of the 1981 revision of the Standard. Set h=0.0 to use the 1986 revision of the Standard.
The default value is None.
A Boolean specifying whether to invoke the optional  reset procedure described in Section 4.3.5 of the
Nuclear Standard. The default value is OFF.
reset
Return value
An Ornl object.
Exceptions
RangeError.
1415
Ornl object

setValues(...)
This method modiﬁes the Ornl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Ornl  method.
Return value
None.
Exceptions
RangeError.
Members
The Ornl object has members with the same names and descriptions as the arguments to the Ornl  method.
Corresponding analysis keywords
•
*ORNL
Abaqus Scripting Reference Guide
1416
Ornl object

Permeability object
The Permeability object deﬁnes permeability for pore ﬂuid ﬂow.
Access
import material
mdb.models[name].materials[name].permeability
import odbMaterial
session.odbs[name].materials[name].permeability
Permeability(...)
This method creates a Permeability object.
Path
mdb.models[name].materials[name].Permeability
session.odbs[name].materials[name].Permeability
Required arguments
A Float specifying the speciﬁc weight of the wetting liquid, 
.
speciﬁcWeight
A Float specifying The inertial drag coefﬁcient of the wetting liquid, 
.
inertialDragCoefﬁcient
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of permeability. Possible values are
ISOTROPIC, ORTHOTROPIC, and ANISOTROPIC. The default value is ISOTROPIC.
type
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
.
•
Void ratio, .
•
Temperature, if the data depend on temperature.
If type=ORTHOTROPIC, the table data specify the following:
•
.
1417
Permeability object

•
.
•
.
•
Void ratio, .
•
Temperature, if the data depend on temperature.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Void ratio, .
•
Temperature, if the data depend on temperature.
Return value
A Permeability object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Permeability object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Permeability  method.
Return value
None.
Exceptions
RangeError.
Members
The Permeability object has members with the same names and descriptions as the arguments to the Permeability
method.
Abaqus Scripting Reference Guide
1418
Permeability object

In addition, the Permeability object can have the following members:
A SaturationDependence object specifying the dependence of the permeability of
a material on the saturation of the wetting liquid.
saturationDependence
A VelocityDependence object specifying the dependence of the permeability of a
material on the velocity of ﬂuid ﬂow.
velocityDependence
Corresponding analysis keywords
•
*PERMEABILITY
1419
Abaqus Scripting Reference Guide
Permeability object

Piezoelectric object
The Piezoelectric object speciﬁes piezoelectric material properties.
Access
import material
mdb.models[name].materials[name].piezoelectric
import odbMaterial
session.odbs[name].materials[name].piezoelectric
Piezoelectric(...)
This method creates a Piezoelectric object.
Path
mdb.models[name].materials[name].Piezoelectric
session.odbs[name].materials[name].Piezoelectric
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of material coefﬁcients for the piezoelectric
property. Possible values are STRAIN and STRESS. The default value is STRESS.
type
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRESS, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
Abaqus Scripting Reference Guide
1420
Piezoelectric object

•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=STRAIN, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
1421
Abaqus Scripting Reference Guide
Piezoelectric object

•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Piezoelectric object.
Exceptions
None.
setValues(...)
This method modiﬁes the Piezoelectric object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Piezoelectric  method.
Return value
None.
Exceptions
None.
Members
The Piezoelectric object has members with the same names and descriptions as the arguments to the Piezoelectric
method.
Corresponding analysis keywords
•
*PIEZOELECTRIC
Abaqus Scripting Reference Guide
1422
Piezoelectric object

PlanarTestData object
The PlanarTestData object speciﬁes planar test (or pure shear) data (compression and/or tension).
Access
import material
mdb.models[name].materials[name].hyperelastic.planarTestData
mdb.models[name].materials[name].hyperfoam.planarTestData
mdb.models[name].materials[name].mullinsEffect.planarTests[i]
import odbMaterial
session.odbs[name].materials[name].hyperelastic.planarTestData
session.odbs[name].materials[name].hyperfoam.planarTestData
session.odbs[name].materials[name].mullinsEffect.planarTests[i]
PlanarTestData(...)
This method creates a PlanarTestData object.
Path
mdb.models[name].materials[name].hyperelastic.PlanarTestData
mdb.models[name].materials[name].hyperfoam.PlanarTestData
mdb.models[name].materials[name].mullinsEffect.PlanarTestData
session.odbs[name].materials[name].hyperelastic.PlanarTestData
session.odbs[name].materials[name].hyperfoam.PlanarTestData
session.odbs[name].materials[name].mullinsEffect.PlanarTestData
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or an Int specifying the value for smoothing. If smoothing=None, no
smoothing is employed. The default value is None.
smoothing
A Boolean specifying whether to include lateral nominal strain. The default value
is OFF.
lateralNominalStrain
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
For a hyperelastic material model, the table data specify the following:
•
Nominal stress, 
.
1423
PlanarTestData object

•
Nominal strain in the direction of loading, 
.
For a hyperfoam material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain in the direction of loading, 
.
•
Nominal transverse strain, 
. The default value is 0.
Return value
A PlanarTestData object.
Exceptions
None.
setValues(...)
This method modiﬁes the PlanarTestData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PlanarTestData  method.
Return value
None.
Exceptions
None.
Members
The PlanarTestData object has members with the same names and descriptions as the arguments to the PlanarTestData
method.
Corresponding analysis keywords
•
*PLANAR TEST DATA
Abaqus Scripting Reference Guide
1424
PlanarTestData object

Plastic object
The Plastic object speciﬁes a metal plasticity model.
Access
import material
mdb.models[name].materials[name].plastic
import odbMaterial
session.odbs[name].materials[name].plastic
Plastic(...)
This method creates a Plastic object.
Path
mdb.models[name].materials[name].Plastic
session.odbs[name].materials[name].Plastic
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of hardening. Possible values are ISOTROPIC,
KINEMATIC, COMBINED, JOHNSON_COOK, and USER. The default value is
ISOTROPIC.
hardening
A Boolean specifying whether the data depend on rate. The default value is OFF.
rate
A SymbolicConstant specifying the type of combined hardening. This argument is only
valid if hardening=COMBINED. Possible values are HALF_CYCLE, PARAMETERS,
and STABILIZED. The default value is HALF_CYCLE.
dataType
A Boolean specifying whether the data depend on strain range. This argument is only
valid if hardening=COMBINED and dataType=STABILIZED. The default value is OFF.
strainRangeDependency
An Int specifying the number of backstresses. This argument is only valid if
hardening=COMBINED. The default value is 1.
numBackstresses
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the extrapolation method for the yield stress with respect
to the equivalent plastic strain. This argument is valid only if hardening=ISOTROPIC.
Possible values are CONSTANT and LINEAR . The default value is CONSTANT.
extrapolation
1425
Plastic object

Table data
If hardening=ISOTROPIC, or if hardening=COMBINED and dataType=HALF_CYCLE, the table data specify the
following:
•
Yield stress.
•
Plastic strain.
•
Equivalent plastic strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=COMBINED and dataType=STABILIZED, the table data specify the following:
•
Yield stress.
•
Plastic strain.
•
Strain range, if the data depend on strain range.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=COMBINED and dataType=PARAMETERS, the table data specify the following:
•
Yield stress at zero plastic strain.
•
The ﬁrst kinematic hardening parameter, 
.
•
The ﬁrst kinematic hardening parameter, 
.
•
If applicable, the second kinematic hardening parameter, 
.
•
If applicable, the second kinematic hardening parameter, 
.
•
Etc.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=KINEMATIC, the table data specify the following:
•
Yield stress.
•
Plastic strain.
•
Temperature, if the data depend on temperature.
If hardening=JOHNSON_COOK, the table data specify the following:
•
A.
•
B.
Abaqus Scripting Reference Guide
1426
Plastic object

•
n.
•
m.
•
Melting temperature.
•
Transition temperature.
If hardening=USER, the table data specify the following:
•
Hardening properties.
Return value
A Plastic object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Plastic object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Plastic method.
Return value
None.
Exceptions
RangeError.
Members
The Plastic object has members with the same names and descriptions as the arguments to the Plastic method.
In addition, the Plastic object can have the following members:
A RateDependent object.
rateDependent
A Potential object.
potential
A CyclicHardening object.
cyclicHardening
An Ornl object.
ornl
A CycledPlastic object.
cycledPlastic
1427
Abaqus Scripting Reference Guide
Plastic object

An AnnealTemperature object.
annealTemperature
A TensileFailure object.
tensileFailure
Corresponding analysis keywords
•
*PLASTIC
Abaqus Scripting Reference Guide
1428
Plastic object

PlasticityCorrection object
The PlasticityCorrection object speciﬁes the elastic-plastic response of the material with linear elasticity.
Access
import material
mdb.models[name].materials[name].plasticityCorrection
PlasticityCorrection(...)
This method creates a PlasticityCorrection object.
Path
mdb.models[name].materials[name].PlasticityCorrection
Required arguments
Set type=RAMBERG_OSGOOD to specify the Ramberg-Osgood relationship.
type
Set type=TABULAR to specify the tabular form.
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
If type=RAMBERG_OSGOOD, the table speciﬁes the following:
•
K.
•
n.
•
Temperature if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=TABULAR, the table speciﬁes the following:
•
Yield stress.
•
Plastic strain.
•
Temperature if the data depend on temperature.
1429
PlasticityCorrection object

•
Value of the ﬁrst ﬁeld variable if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PlasticityCorrection object.
Exceptions
None.
setValues(...)
This method modiﬁes the PlasticityCorrection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PlasticityCorrection method.
Return value
None.
Exceptions
None.
Members
The PlasticityCorrection object has members with the same names and descriptions as the arguments to the
PlasticityCorrection method.
Corresponding analysis keywords
•
*PLASTICITY CORRECTION
Abaqus Scripting Reference Guide
1430
PlasticityCorrection object

PoreFluidExpansion object
The PoreFluidExpansion object speciﬁes the thermal expansion coefﬁcient for a hydraulic ﬂuid.
Access
import material
mdb.models[name].materials[name].poreFluidExpansion
import odbMaterial
session.odbs[name].materials[name].poreFluidExpansion
PoreFluidExpansion(...)
This method creates a PoreFluidExpansion object.
Path
mdb.models[name].materials[name].PoreFluidExpansion
session.odbs[name].materials[name].PoreFluidExpansion
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Float specifying the value of 
. The default value is 0.0.
zero
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Mean coefﬁcient of thermal expansion, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PoreFluidExpansion object.
Exceptions
RangeError.
1431
PoreFluidExpansion object

setValues(...)
This method modiﬁes the PoreFluidExpansion object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PoreFluidExpansion  method.
Return value
None.
Exceptions
RangeError.
Members
The PoreFluidExpansion object has members with the same names and descriptions as the arguments to the
PoreFluidExpansion  method.
Corresponding analysis keywords
•
*EXPANSION
Abaqus Scripting Reference Guide
1432
PoreFluidExpansion object

PorousBulkModuli object
The PorousBulkModuli object deﬁnes bulk moduli for soils and rocks.
Access
import material
mdb.models[name].materials[name].porousBulkModuli
import odbMaterial
session.odbs[name].materials[name].porousBulkModuli
PorousBulkModuli(...)
This method creates a PorousBulkModuli object.
Path
mdb.models[name].materials[name].PorousBulkModuli
session.odbs[name].materials[name].PorousBulkModuli
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
Table data
•
Bulk modulus of solid grains.
•
Bulk modulus of permeating ﬂuid.
•
Temperature, if the data depend on temperature.
Return value
A PorousBulkModuli object.
Exceptions
None.
setValues(...)
This method modiﬁes the PorousBulkModuli object.
Required arguments
None.
1433
PorousBulkModuli object

Optional arguments
The optional arguments to setValues are the same as the arguments to the PorousBulkModuli  method.
Return value
None.
Exceptions
None.
Members
The PorousBulkModuli object has members with the same names and descriptions as the arguments to the
PorousBulkModuli  method.
Corresponding analysis keywords
•
*POROUS BULK MODULI
Abaqus Scripting Reference Guide
1434
PorousBulkModuli object

PorousElastic object
The PorousElastic object speciﬁes elastic material properties for porous materials.
Access
import material
mdb.models[name].materials[name].porousElastic
import odbMaterial
session.odbs[name].materials[name].porousElastic
PorousElastic(...)
This method creates a PorousElastic object.
Path
mdb.models[name].materials[name].PorousElastic
session.odbs[name].materials[name].PorousElastic
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the shear deﬁnition form. Possible values are G and
POISSON. The default value is POISSON.
shear
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If shear=G, the table data specify the following:
•
The logarithmic bulk modulus, . (Dimensionless.)
•
The shear modulus, .
•
The elastic tensile limit, 
. (This value cannot be negative.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If shear=POISSON, the table data specify the following:
•
The logarithmic bulk modulus, . (Dimensionless.)
1435
PorousElastic object

•
The Poisson's ratio, .
•
The elastic tensile limit, 
. (This value cannot be negative.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PorousElastic object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the PorousElastic object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PorousElastic  method.
Return value
None.
Exceptions
RangeError.
Members
The PorousElastic object has members with the same names and descriptions as the arguments to the PorousElastic
method.
Corresponding analysis keywords
•
*POROUS ELASTIC
Abaqus Scripting Reference Guide
1436
PorousElastic object

PorousFailureCriteria object
The PorousFailureCriteria object speciﬁes the material failure criteria for a porous metal.
Access
import material
mdb.models[name].materials[name].porousMetalPlasticity\
.porousFailureCriteria
import odbMaterial
session.odbs[name].materials[name].porousMetalPlasticity\
.porousFailureCriteria
PorousFailureCriteria(...)
This method creates a PorousFailureCriteria object.
Path
mdb.models[name].materials[name].porousMetalPlasticity\
.PorousFailureCriteria
session.odbs[name].materials[name].porousMetalPlasticity\
.PorousFailureCriteria
Required arguments
None.
Optional arguments
A Float specifying the void volume fraction at total failure, 
. The default value
is 1.0.
fraction
A Float specifying the critical void volume fraction, 
. The default value is 1.0.
criticalFraction
Return value
A PorousFailureCriteria object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the PorousFailureCriteria object.
Required arguments
None.
1437
PorousFailureCriteria object

Optional arguments
The optional arguments to setValues are the same as the arguments to the PorousFailureCriteria  method.
Return value
None.
Exceptions
RangeError.
Members
The PorousFailureCriteria object has members with the same names and descriptions as the arguments to the
PorousFailureCriteria  method.
Corresponding analysis keywords
•
*POROUS FAILURE CRITERIA
Abaqus Scripting Reference Guide
1438
PorousFailureCriteria object

PorousMetalPlasticity object
The PorousMetalPlasticity object speciﬁes a porous metal plasticity model.
Access
import material
mdb.models[name].materials[name].porousMetalPlasticity
import odbMaterial
session.odbs[name].materials[name].porousMetalPlasticity
PorousMetalPlasticity(...)
This method creates a PorousMetalPlasticity object.
Path
mdb.models[name].materials[name].PorousMetalPlasticity
session.odbs[name].materials[name].PorousMetalPlasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or a Float specifying the initial relative density of the material, 
. The
default value is None.
relativeDensity
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PorousMetalPlasticity object.
1439
PorousMetalPlasticity object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the PorousMetalPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PorousMetalPlasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The PorousMetalPlasticity object has members with the same names and descriptions as the arguments to the
PorousMetalPlasticity  method.
In addition, the PorousMetalPlasticity object can have the following members:
A PorousFailureCriteria object.
porousFailureCriteria
A VoidNucleation object.
voidNucleation
Corresponding analysis keywords
•
*POROUS METAL PLASTICITY
Abaqus Scripting Reference Guide
1440
PorousMetalPlasticity object

Potential object
The Potential object deﬁnes an anisotropic yield/creep model.
Access
import material
mdb.models[name].materials[name].creep.potential
mdb.models[name].materials[name].plastic.potential
mdb.models[name].materials[name].viscous.potential
import odbMaterial
session.odbs[name].materials[name].creep.potential
session.odbs[name].materials[name].plastic.potential
session.odbs[name].materials[name].viscous.potential
Potential(...)
This method creates a Potential object.
Path
mdb.models[name].materials[name].creep.Potential
mdb.models[name].materials[name].plastic.Potential
mdb.models[name].materials[name].viscous.Potential
session.odbs[name].materials[name].creep.Potential
session.odbs[name].materials[name].plastic.Potential
session.odbs[name].materials[name].viscous.Potential
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
.
•
.
•
.
•
.
•
.
•
.
1441
Potential object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Potential object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Potential object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Potential  method.
Return value
None.
Exceptions
RangeError.
Members
The Potential object has members with the same names and descriptions as the arguments to the Potential  method.
Corresponding analysis keywords
•
*POTENTIAL
Abaqus Scripting Reference Guide
1442
Potential object

PressureEffect object
The PressureEffect object deﬁnes equivalent pressure stress driven mass diffusion.
Access
import material
mdb.models[name].materials[name].diffusivity.pressureEffect
import odbMaterial
session.odbs[name].materials[name].diffusivity.pressureEffect
PressureEffect(...)
This method creates a PressureEffect object.
Path
mdb.models[name].materials[name].diffusivity.PressureEffect
session.odbs[name].materials[name].diffusivity.PressureEffect
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Pressure stress factor, 
.
•
Concentration.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PressureEffect object.
Exceptions
RangeError.
1443
PressureEffect object

setValues(...)
This method modiﬁes the PressureEffect object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PressureEffect  method.
Return value
None.
Exceptions
RangeError.
Members
The PressureEffect object has members with the same names and descriptions as the arguments to the PressureEffect
method.
Corresponding analysis keywords
•
*KAPPA
Abaqus Scripting Reference Guide
1444
PressureEffect object

RateDependent object
The RateDependent object deﬁnes a rate-dependent viscoplastic model.
Access
import material
mdb.models[name].materials[name].crushableFoam.rateDependent
mdb.models[name].materials[name].druckerPrager.rateDependent
mdb.models[name].materials[name].plastic.rateDependent
import odbMaterial
session.odbs[name].materials[name].crushableFoam.rateDependent
session.odbs[name].materials[name].druckerPrager.rateDependent
session.odbs[name].materials[name].plastic.rateDependent
RateDependent(...)
This method creates a RateDependent object.
Path
mdb.models[name].materials[name].crushableFoam.RateDependent
mdb.models[name].materials[name].druckerPrager.RateDependent
mdb.models[name].materials[name].plastic.RateDependent
session.odbs[name].materials[name].crushableFoam.RateDependent
session.odbs[name].materials[name].druckerPrager.RateDependent
session.odbs[name].materials[name].plastic.RateDependent
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of rate-dependent data. Possible values are
POWER_LAW, YIELD_RATIO, and JOHNSON_COOK. The default value is
POWER_LAW.
type
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=POWER_LAW, the table data specify the following:
•
.
•
.
•
Temperature, if the data depend on temperature.
1445
RateDependent object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=YIELD_RATIO, the table data specify the following:
•
Yield stress ratio, 
.
•
Equivalent plastic strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=JOHNSON_COOK, the table data specify the following:
•
.
•
.
Return value
A RateDependent object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the RateDependent object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RateDependent  method.
Return value
None.
Exceptions
RangeError.
Members
The RateDependent object has members with the same names and descriptions as the arguments to the RateDependent
method.
Abaqus Scripting Reference Guide
1446
RateDependent object

Corresponding analysis keywords
•
*RATE DEPENDENT
1447
Abaqus Scripting Reference Guide
RateDependent object

Ratios object
The Ratios object speciﬁes ratios that deﬁne anisotropic swelling.
Access
import material
mdb.models[name].materials[name].moistureSwelling.ratios
mdb.models[name].materials[name].swelling.ratios
import odbMaterial
session.odbs[name].materials[name].moistureSwelling.ratios
session.odbs[name].materials[name].swelling.ratios
Ratios(...)
This method creates a Ratios object.
Path
mdb.models[name].materials[name].moistureSwelling.Ratios
mdb.models[name].materials[name].swelling.Ratios
session.odbs[name].materials[name].moistureSwelling.Ratios
session.odbs[name].materials[name].swelling.Ratios
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Ratios object.
Abaqus Scripting Reference Guide
1448
Ratios object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the Ratios object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Ratios  method.
Return value
None.
Exceptions
RangeError.
Members
The Ratios object has members with the same names and descriptions as the arguments to the Ratios  method.
Corresponding analysis keywords
•
*RATIOS
1449
Abaqus Scripting Reference Guide
Ratios object

Regularization object
The Regularization object deﬁnes the tolerance to be used for regularizing material data.
Access
import material
mdb.models[name].materials[name].regularization
import odbMaterial
session.odbs[name].materials[name].regularization
Regularization(...)
This method creates a Regularization object.
Path
mdb.models[name].materials[name].Regularization
session.odbs[name].materials[name].Regularization
Required arguments
None.
Optional arguments
A Float specifying the tolerance to be used for regularizing material data. The default
value is 0.03.
rtol
A SymbolicConstant specifying the form of regularization of strain-rate-dependent
material data. Possible values are LOGARITHMIC and LINEAR. The default value is
LOGARITHMIC.
strainRateRegularization
Return value
A Regularization object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Regularization object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Regularization  method.
Abaqus Scripting Reference Guide
1450
Regularization object

Return value
None.
Exceptions
RangeError.
Members
The Regularization object has members with the same names and descriptions as the arguments to the Regularization
method.
Corresponding analysis keywords
•
*DASHPOT
1451
Abaqus Scripting Reference Guide
Regularization object

SaturationDependence object
The SaturationDependence object speciﬁes the dependence of the permeability of a material on the saturation of the
wetting liquid.
Access
import material
mdb.models[name].materials[name].permeability.saturationDependence
import odbMaterial
session.odbs[name].materials[name].permeability.saturationDependence
SaturationDependence(...)
This method creates a SaturationDependence object.
Path
mdb.models[name].materials[name].permeability.SaturationDependence
session.odbs[name].materials[name].permeability.SaturationDependence
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
. (Dimensionless.)
•
Saturation, . (Dimensionless.)
Return value
A SaturationDependence object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SaturationDependence object.
Required arguments
None.
Abaqus Scripting Reference Guide
1452
SaturationDependence object

Optional arguments
The optional arguments to setValues are the same as the arguments to the SaturationDependence  method.
Return value
None.
Exceptions
RangeError.
Members
The SaturationDependence object has members with the same names and descriptions as the arguments to the
SaturationDependence  method.
Corresponding analysis keywords
•
*PERMEABILITY
1453
Abaqus Scripting Reference Guide
SaturationDependence object

ShearRetention object
The ShearRetention object deﬁnes the reduction of the shear modulus associated with crack surfaces in a Concrete
model as a function of the tensile strain across the crack.
Access
import material
mdb.models[name].materials[name].concrete.shearRetention
import odbMaterial
session.odbs[name].materials[name].concrete.shearRetention
ShearRetention(...)
This method creates a ShearRetention object.
Path
mdb.models[name].materials[name].concrete.ShearRetention
session.odbs[name].materials[name].concrete.ShearRetention
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
 for dry concrete. The default value is 1.0.
•
 for dry concrete. The default value is a very large number (full shear retention).
•
 for wet concrete. The default value is 1.0.
•
 for wet concrete. The default value is a very large number (full shear retention).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ShearRetention object.
Abaqus Scripting Reference Guide
1454
ShearRetention object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the ShearRetention object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShearRetention  method.
Return value
None.
Exceptions
RangeError.
Members
The ShearRetention object has members with the same names and descriptions as the arguments to the ShearRetention
method.
Corresponding analysis keywords
•
*SHEAR RETENTION
1455
Abaqus Scripting Reference Guide
ShearRetention object

ShearTestData object
The ShearTestData object speciﬁes the normalized shear creep compliance or relaxation modulus as a function of time.
Access
import material
mdb.models[name].materials[name].viscoelastic.shearTestData
import odbMaterial
session.odbs[name].materials[name].viscoelastic.shearTestData
ShearTestData(...)
This method creates a ShearTestData object.
Path
mdb.models[name].materials[name].viscoelastic.ShearTestData
session.odbs[name].materials[name].viscoelastic.ShearTestData
Required arguments
A sequence of sequences of Floats specifying values that depend on the time member of the Viscoelastic
object.
table
If time=RELAXATION_TEST_DATA, the table data specify the following:
•
Normalized shear relaxation modulus 
. 
.
•
Time . 
.
If time=CREEP_TEST_DATA, the table data specify the following:
•
Normalized shear compliance 
. 
.
•
Time . 
.
Optional arguments
None or a Float specifying a normalized shear. The value of shrinf depends on the value of the time
member of the Viscoelastic object. The default value is None.
shrinf
If time=RELAXATION_TEST_DATA, shrinf speciﬁes the value of the long-term, normalized shear
modulus 
.
If time=CREEP_TEST_DATA, shrinf speciﬁes the value of the long-term, normalized shear compliance
.
Return value
A ShearTestData object.
Abaqus Scripting Reference Guide
1456
ShearTestData object

Exceptions
None.
setValues(...)
This method modiﬁes the ShearTestData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShearTestData  method.
Return value
None.
Exceptions
None.
Members
The ShearTestData object has members with the same names and descriptions as the arguments to the ShearTestData
method.
Corresponding analysis keywords
•
*SHEAR TEST DATA
1457
Abaqus Scripting Reference Guide
ShearTestData object

SimpleShearTestData object
The SimpleShearTestData object provides simple shear test data.
Access
import material
mdb.models[name].materials[name].hyperfoam.simpleShearTestData
import odbMaterial
session.odbs[name].materials[name].hyperfoam.simpleShearTestData
SimpleShearTestData(...)
This method creates a SimpleShearTestData object.
Path
mdb.models[name].materials[name].hyperfoam.SimpleShearTestData
session.odbs[name].materials[name].hyperfoam.SimpleShearTestData
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
Nominal shear stress, 
.
•
Nominal shear strain, .
•
Nominal transverse stress, 
 (normal to edge with shear stress). This stress value is optional.
Return value
A SimpleShearTestData object.
Exceptions
None.
setValues(...)
This method modiﬁes the SimpleShearTestData object.
Required arguments
None.
Abaqus Scripting Reference Guide
1458
SimpleShearTestData object

Optional arguments
The optional arguments to setValues are the same as the arguments to the SimpleShearTestData  method.
Return value
None.
Exceptions
None.
Members
The SimpleShearTestData object has members with the same names and descriptions as the arguments to the
SimpleShearTestData  method.
Corresponding analysis keywords
•
*SIMPLE SHEAR TEST DATA
1459
Abaqus Scripting Reference Guide
SimpleShearTestData object

Solubility object
The Solubility object speciﬁes solubility.
Access
import material
mdb.models[name].materials[name].solubility
import odbMaterial
session.odbs[name].materials[name].solubility
Solubility(...)
This method creates a Solubility object.
Path
mdb.models[name].materials[name].Solubility
session.odbs[name].materials[name].Solubility
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Solubility.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Solubility object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1460
Solubility object

setValues(...)
This method modiﬁes the Solubility object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Solubility  method.
Return value
None.
Exceptions
RangeError.
Members
The Solubility object has members with the same names and descriptions as the arguments to the Solubility  method.
Corresponding analysis keywords
•
*SOLUBILITY
1461
Abaqus Scripting Reference Guide
Solubility object

SoretEffect object
The SoretEffect object deﬁnes temperature gradient driven mass diffusion.
Access
import material
mdb.models[name].materials[name].diffusivity.soretEffect
import odbMaterial
session.odbs[name].materials[name].diffusivity.soretEffect
SoretEffect(...)
This method creates a SoretEffect object.
Path
mdb.models[name].materials[name].diffusivity.SoretEffect
session.odbs[name].materials[name].diffusivity.SoretEffect
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Soret effect factor, 
.
•
Concentration.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A SoretEffect object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1462
SoretEffect object

setValues(...)
This method modiﬁes the SoretEffect object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SoretEffect  method.
Return value
None.
Exceptions
RangeError.
Members
The SoretEffect object has members with the same names and descriptions as the arguments to the SoretEffect  method.
Corresponding analysis keywords
•
*KAPPA
1463
Abaqus Scripting Reference Guide
SoretEffect object

Sorption object
The Sorption object deﬁnes absorption and exsorption behaviors of a partially saturated porous medium in the analysis
of coupled wetting liquid ﬂow and porous medium stress.
Access
import material
mdb.models[name].materials[name].sorption
import odbMaterial
session.odbs[name].materials[name].sorption
Sorption(...)
This method creates a Sorption object.
Path
mdb.models[name].materials[name].Sorption
session.odbs[name].materials[name].Sorption
Required arguments
A sequence of sequences of Floats specifying the items described below.
absorptionTable
Optional arguments
A SymbolicConstant specifying absorption behavior. Possible values are LOG and
TABULAR. The default value is TABULAR.
lawAbsorption
A Boolean specifying whether the exsorption data is speciﬁed. The default value is OFF.
exsorption
A SymbolicConstant specifying exsorption behavior. Possible values are LOG and
TABULAR. The default value is TABULAR.
lawExsorption
A Float specifying the slope of the scanning line, 
. This slope must be positive
and larger than the slope of the absorption or exsorption behaviors. The default value is
0.0.
scanning
A sequence of sequences of Floats specifying the items described below. The default
value is an empty sequence.
exsorptionTable
Table data
If lawAbsorption=TABULAR or lawExsorption=TABULAR, the absorptionTable and exsorptionTable data respectively
specify the following:
•
Pore pressure, 
.
•
Saturation, .
Abaqus Scripting Reference Guide
1464
Sorption object

If lawAbsorption=LOG or lawExsorption=LOG, the absorptionTable and exsorptionTable data respectively specify
the following:
•
A.
•
B.
•
.
•
.
Return value
A Sorption object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Sorption object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Sorption  method.
Return value
None.
Exceptions
RangeError.
Members
The Sorption object has members with the same names and descriptions as the arguments to the Sorption  method.
Corresponding analysis keywords
•
*SORPTION
1465
Abaqus Scripting Reference Guide
Sorption object

SpecificHeat object
The SpeciﬁcHeat object speciﬁes a material's speciﬁc heat.
Access
import material
mdb.models[name].materials[name].specificHeat
import odbMaterial
session.odbs[name].materials[name].specificHeat
SpecificHeat(...)
This method creates a SpeciﬁcHeat object.
Path
mdb.models[name].materials[name].SpecificHeat
session.odbs[name].materials[name].SpecificHeat
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the speciﬁc heat behavior. Possible values are
CONSTANTVOLUME and CONSTANTPRESSURE. The default value is
CONSTANTVOLUME.
law
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Speciﬁc heat per unit mass.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A SpeciﬁcHeat object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1466
SpecificHeat object

setValues(...)
This method modiﬁes the SpeciﬁcHeat object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SpeciﬁcHeat  method.
Return value
None.
Exceptions
RangeError.
Members
The SpeciﬁcHeat object has members with the same names and descriptions as the arguments to the SpeciﬁcHeat
method.
Corresponding analysis keywords
•
*SPECIFIC HEAT
1467
Abaqus Scripting Reference Guide
SpecificHeat object

SuperElasticHardening object
The SuperElasticHardening object speciﬁes the dependence of the yield stress on the total strain to deﬁne the piecewise
linear hardening of a martensite material model.
Access
import material
mdb.models[name].materials[name].superElasticity.SuperElasticHardening
import odbMaterial
session.odbs[name].materials[name].superElasticity.SuperElasticHardening
SuperElasticHardening(...)
This method creates a SuperElasticHardening object.
Path
mdb.models[name].materials[name].superElasticity.SuperElasticHardening
session.odbs[name].materials[name].superElasticity.SuperElasticHardening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Table data
•
Yield Stress.
•
Total Strain.
Return value
A SuperElasticHardening object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SuperElasticHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SuperElasticHardening  method.
Return value
None.
Abaqus Scripting Reference Guide
1468
SuperElasticHardening object

Exceptions
RangeError.
Members
The SuperElasticHardening object has members with the same names and descriptions as the arguments to the
SuperElasticHardening  method.
Corresponding analysis keywords
•
*SUPERELASTIC HARDENING
1469
Abaqus Scripting Reference Guide
SuperElasticHardening object

SuperElasticHardeningModifications object
The SuperElasticHardeningModiﬁcations object speciﬁes the variation of the transformation stress levels of a material
model.
Access
import material
mdb.models[name].materials[name].superElasticity.SuperElasticHardening
import odbMaterial
session.odbs[name].materials[name].superElasticity.SuperElasticHardening
SuperElasticHardeningModifications(...)
This method creates a SuperElasticHardeningModiﬁcations object.
Path
mdb.models[name].materials[name].superElasticity.SuperElasticHardeningModifications
session.odbs[name].materials[name].superElasticity.SuperElasticHardeningModifications
Required arguments
A sequence of sequences of Floats specifying the items described below or user-deﬁned data if the
dependence of the transformation stress levels on plastic strain is speciﬁed in a user subroutine.
table
Table data
•
Start of Transformation (Loading).
•
End of Transformation (Loading).
•
Start of Transformation (Unloading).
•
End of Transformation (Unloading).
•
Plastic Strain.
Return value
A SuperElasticHardeningModiﬁcations object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SuperElasticHardeningModiﬁcations object.
Required arguments
None.
Abaqus Scripting Reference Guide
1470
SuperElasticHardeningModifications object

Optional arguments
The optional arguments to setValues are the same as the arguments to the SuperElasticHardeningModiﬁcations
method.
Return value
None.
Exceptions
RangeError.
Members
The SuperElasticHardeningModiﬁcations object has members with the same names and descriptions as the arguments
to the SuperElasticHardeningModiﬁcations  method.
Corresponding analysis keywords
•
*SUPERELASTIC HARDENING MODIFICATIONS
1471
Abaqus Scripting Reference Guide
SuperElasticHardeningModifications object

SuperElasticity object
The SuperElasticity object speciﬁes a superelastic material model.
Access
import material
mdb.models[name].materials[name].superElasticity
import odbMaterial
session.odbs[name].materials[name].superElasticity
SuperElasticity(...)
This method creates a SuperElasticity object.
Path
mdb.models[name].materials[name].SuperElasticity
session.odbs[name].materials[name].SuperElasticity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or a Float specifying the volumetric transformation strain. If nonassociated=None,
the value of the volumetric transformation strain is equal to the uniaxial transformation strain.
The default value is None.
nonassociated
Table data
•
Young's Modulus (Martensite).
•
Poisson's Ratio (Martensite).
•
Transformation Strain.
•
Start of Transformation (Loading).
•
End of Transformation (Loading).
•
Start of Transformation (Unloading).
•
End of Transformation (Unloading).
•
Start of Transformation in Compression (Loading).
•
Reference Temperature.
•
Loading.
•
Unloading.
Return value
A SuperElasticity object.
Abaqus Scripting Reference Guide
1472
SuperElasticity object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the SuperElasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SuperElasticity  method.
Return value
None.
Exceptions
RangeError.
Members
The SuperElasticity object has members with the same names and descriptions as the arguments to the SuperElasticity
method.
In addition, the SuperElasticity object can have the following members:
A SuperElasticHardening object.
superElasticHardening
A SuperElasticHardeningModiﬁcations object.
superElasticHardeningModiﬁcations
Corresponding analysis keywords
•
*SUPERELASTIC
1473
Abaqus Scripting Reference Guide
SuperElasticity object

Swelling object
The Swelling object speciﬁes time-dependent volumetric swelling for a material.
Access
import material
mdb.models[name].materials[name].swelling
import odbMaterial
session.odbs[name].materials[name].swelling
Swelling(...)
This method creates a Swelling object.
Path
mdb.models[name].materials[name].Swelling
session.odbs[name].materials[name].Swelling
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
This argument is valid only when law=INPUT.
Optional arguments
A SymbolicConstant specifying the type of data deﬁning the swelling behavior.
Possible values are INPUT and USER. The default value is INPUT.
law
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Volumetric swelling strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Swelling object.
Abaqus Scripting Reference Guide
1474
Swelling object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the Swelling object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Swelling  method.
Return value
None.
Exceptions
RangeError.
Members
The Swelling object has members with the same names and descriptions as the arguments to the Swelling  method.
In addition, the Swelling object can have the following member:
A Ratios object.
ratios
Corresponding analysis keywords
•
*SWELLING
1475
Abaqus Scripting Reference Guide
Swelling object

TensileFailure object
The TensileFailure object speciﬁes the material tensile failure.
Access
import material
mdb.models[name].materials[name].plastic.tensileFailure
mdb.models[name].materials[name].eos.tensileFailure
import odbMaterial
session.odbs[name].materials[name].plastic.tensileFailure
session.odbs[name].materials[name].eos.tensileFailure
tensileFailure(...)
This method creates a tensileFailure object.
Path
mdb.models[name].materials[name].plastic.TensileFailure
mdb.models[name].materials[name].eos.TensileFailure
session.odbs[name].materials[name].plastic.TensileFailure
session.odbs[name].materials[name].eos.TensileFailure
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
A boolean specifying whether the data depends on temperature. The default value
is OFF.
temperatureDependency
A boolean specifying whether element deletion is allowed. The default value is True.
elementDeletion
A SymbolicConstant specifying the pressure stress. The Possible values are BRITTLE
and DUCTILE.
pressure
A SymbolicConstant specifying the deviatoric stress. Possible values are BRITTLE
and DUCTILE.
shear
Table data
•
The Hydrostatic cutoff stress (positive in tension).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
Abaqus Scripting Reference Guide
1476
TensileFailure object

•
Etc.
Return value
An TensileFailure object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the TensileFailure object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TensileFailure method.
Return value
None.
Exceptions
RangeError.
Members
The TensileFailure object has members with the same names and descriptions as the arguments to the TensileFailure
method.
Corresponding analysis keywords
•
*TENSILE FAILURE
1477
Abaqus Scripting Reference Guide
TensileFailure object

TensionCutOff object
The TensionCutOff object speciﬁes tension cutoff for different material models for example the Mohr-Coulomb
plasticity model.
Access
import material
mdb.models[name].materials[name].mohrCoulombPlasticity.tensionCutOff
import odbMaterial
session.odbs[name].materials[name].mohrCoulombPlasticity.tensionCutOff
TensionCutOff(...)
This method creates a TensionCutOff object.
Path
mdb.models[name].materials[name].mohrCoulombPlasticity.TensionCutOff
session.odbs[name].materials[name].mohrCoulombPlasticity.TensionCutOff
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Tension cutoff stress.
•
The value of the corresponding tensile plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A TensionCutOff object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1478
TensionCutOff object

setValues(...)
This method modiﬁes the TensionCutOff object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TensionCutOff  method.
Return value
None.
Exceptions
RangeError.
Members
The TensionCutOff object has members with the same names and descriptions as the arguments to the TensionCutOff
method.
Corresponding analysis keywords
•
*TENSION CUTOFF
1479
Abaqus Scripting Reference Guide
TensionCutOff object

TensionStiffening object
The TensionStiffening object deﬁnes the retained tensile stress normal to a crack in a Concrete model.
Access
import material
mdb.models[name].materials[name].concrete.tensionStiffening
import odbMaterial
session.odbs[name].materials[name].concrete.tensionStiffening
TensionStiffening(...)
This method creates a TensionStiffening object.
Path
mdb.models[name].materials[name].concrete.TensionStiffening
session.odbs[name].materials[name].concrete.TensionStiffening
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying how the postcracking behavior is deﬁned. Possible
values are DISPLACEMENT and STRAIN. The default value is STRAIN.
type
A Boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRAIN, the table data specify the following:
•
Fraction of remaining stress to stress at cracking.
•
Absolute value of the direct strain minus the direct strain at cracking.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, the table data specify the following:
•
Displacement, 
, at which a linear loss of strength after cracking gives zero stress.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
1480
TensionStiffening object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A TensionStiffening object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the TensionStiffening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TensionStiffening  method.
Return value
None.
Exceptions
RangeError.
Members
The TensionStiffening object has members with the same names and descriptions as the arguments to the
TensionStiffening  method.
Corresponding analysis keywords
•
*TENSION STIFFENING
1481
Abaqus Scripting Reference Guide
TensionStiffening object

TriaxialTestData object
The TriaxialTestData object provides triaxial test data.
Access
import material
mdb.models[name].materials[name].druckerPrager.triaxialTestData
import odbMaterial
session.odbs[name].materials[name].druckerPrager.triaxialTestData
TriaxialTestData(...)
This method creates a TriaxialTestData object.
Path
mdb.models[name].materials[name].druckerPrager.TriaxialTestData
session.odbs[name].materials[name].druckerPrager.TriaxialTestData
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or a Float specifying the value of the material constant . None is used when the value is unknown
or it is not held ﬁxed at the input value. The default value is None.
a
None or a Float specifying the value of the material constant . None is used when the value is unknown
or it is not held ﬁxed at the input value. The default value is None.
b
None or a Float specifying the value of the material constant 
. None is used when the value is unknown
or it is not held ﬁxed at the input value. The default value is None.
pt
Table data
•
Sign and magnitude of conﬁning stress, 
.
•
Sign and magnitude of the stress in loading direction, 
.
Return value
A TriaxialTestData object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1482
TriaxialTestData object

setValues(...)
This method modiﬁes the TriaxialTestData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TriaxialTestData  method.
Return value
None.
Exceptions
RangeError.
Members
The TriaxialTestData object has members with the same names and descriptions as the arguments to the TriaxialTestData
method.
Corresponding analysis keywords
•
*TRIAXIAL TEST DATA
1483
Abaqus Scripting Reference Guide
TriaxialTestData object

Trs object
The Trs object deﬁnes the temperature-time shift for time history viscoelastic analysis.
Access
import material
mdb.models[name].materials[name].viscoelastic.trs
mdb.models[name].materials[name].viscosity.trs
import odbMaterial
session.odbs[name].materials[name].viscoelastic.trs
session.odbs[name].materials[name].viscosity.trs
Trs(...)
This method creates a Trs object.
Path
mdb.models[name].materials[name].viscoelastic.Trs
mdb.models[name].materials[name].viscosity.Trs
session.odbs[name].materials[name].viscoelastic.Trs
session.odbs[name].materials[name].viscosity.Trs
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the deﬁnition of the shift function. Possible values are WLF,
ARRHENIUS, and USER. The default value is WLF.
deﬁnition
A sequence of sequences of Floats specifying the items described below. The default value is
an empty sequence.
table
This argument is valid only when deﬁnition=WLF.
Table data
•
Reference temperature, 
.
•
Calibration constant, 
.
•
Calibration constant, 
.
Return value
A Trs object.
Exceptions
None.
Abaqus Scripting Reference Guide
1484
Trs object

setValues(...)
This method modiﬁes the Trs object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Trs  method.
Return value
None.
Exceptions
None.
Members
The Trs object has members with the same names and descriptions as the arguments to the Trs  method.
Corresponding analysis keywords
•
*TRS
1485
Abaqus Scripting Reference Guide
Trs object

UniaxialTestData object
The UniaxialTestData object provides uniaxial test data (compression and/or tension).
Access
import material
mdb.models[name].materials[name].hyperelastic.uniaxialTestData
mdb.models[name].materials[name].hyperfoam.uniaxialTestData
mdb.models[name].materials[name].lowDensityFoam\
.uniaxialCompressionTestData
mdb.models[name].materials[name].lowDensityFoam\
.uniaxialTensionTestData
mdb.models[name].materials[name].mullinsEffect.uniaxialTests[i]
import odbMaterial
session.odbs[name].materials[name].hyperelastic.uniaxialTestData
session.odbs[name].materials[name].hyperfoam.uniaxialTestData
session.odbs[name].materials[name].lowDensityFoam\
.uniaxialCompressionTestData
session.odbs[name].materials[name].lowDensityFoam\
.uniaxialTensionTestData
session.odbs[name].materials[name].mullinsEffect.uniaxialTests[i]
UniaxialTestData(...)
This method creates a UniaxialTestData object.
Path
mdb.models[name].materials[name].hyperelastic.UniaxialTestData
mdb.models[name].materials[name].hyperfoam.UniaxialTestData
mdb.models[name].materials[name].lowDensityFoam.UniaxialTestData
mdb.models[name].materials[name].mullinsEffect.UniaxialTestData
session.odbs[name].materials[name].hyperelastic.UniaxialTestData
session.odbs[name].materials[name].hyperfoam.UniaxialTestData
session.odbs[name].materials[name].lowDensityFoam.UniaxialTestData
session.odbs[name].materials[name].mullinsEffect.UniaxialTestData
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or an Int specifying the value for smoothing. If smoothing=None, no
smoothing is employed. The default value is None.
smoothing
A Boolean specifying whether to include lateral nominal strain. The default value
is OFF.
lateralNominalStrain
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
Abaqus Scripting Reference Guide
1486
UniaxialTestData object

An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
For a hyperelastic material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain, 
.
For a hyperfoam material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain, 
.
•
Nominal lateral strain, 
. The default value is 0.
For a low-density foam material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain, 
.
•
Nominal strain rate, 
.
Return value
A UniaxialTestData object.
Exceptions
None.
setValues(...)
This method modiﬁes the UniaxialTestData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the UniaxialTestData  method.
Return value
None.
Exceptions
None.
1487
Abaqus Scripting Reference Guide
UniaxialTestData object

Members
The UniaxialTestData object has members with the same names and descriptions as the arguments to the
UniaxialTestData  method.
Corresponding analysis keywords
•
*UNIAXIAL TEST DATA
Abaqus Scripting Reference Guide
1488
UniaxialTestData object

UserDefinedField object
The UserDeﬁnedField object redeﬁnes ﬁeld variables at a material point.
Access
import material
mdb.models[name].materials[name].userDefinedField
import odbMaterial
session.odbs[name].materials[name].userDefinedField
UserDefinedField()
This method deﬁnes a UserDeﬁnedField object.
Path
mdb.models[name].materials[name].UserDefinedField
session.odbs[name].materials[name].UserDefinedField
Arguments
None.
Return value
A UserDeﬁnedField object.
Exceptions
None.
Members
The UserDeﬁnedField object has no members.
Corresponding analysis keywords
•
*USER DEFINED FIELD
1489
UserDefinedField object

UserMaterial object
The UserMaterial object deﬁnes material constants for use in subroutines UMAT, UMATHT, or VUMAT.
Access
import material
mdb.models[name].materials[name].userMaterial
import odbMaterial
session.odbs[name].materials[name].userMaterial
UserMaterial(...)
This method creates a UserMaterial object.
Path
mdb.models[name].materials[name].UserMaterial
session.odbs[name].materials[name].UserMaterial
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the type of material behavior deﬁned by the command. Possible
values are MECHANICAL, THERMAL, and THERMOMECHANICAL. The default value
is MECHANICAL.
type
A Boolean specifying if the material stiffness matrix, 
, is not symmetric or, when
a thermal constitutive model is used, if 
 is not symmetric. The default value is
OFF.
unsymm
This argument is valid only for an Abaqus/Standard analysis.
A sequence of Floats specifying the mechanical constants of the material. This argument is
valid only when type=MECHANICAL or THERMOMECHANICAL. The default value is an
empty sequence.
mechanicalConstants
A sequence of Floats specifying the thermal constants of the material. This argument is valid
only when type=THERMAL or THERMOMECHANICAL. The default value is an empty
sequence.
thermalConstants
A Boolean specifying if effective bulk modulus and shear modulus are returned by user
subroutine VUMAT. The default value is OFF.
effmod
This argument is valid only in an Abaqus/Explicit analysis.
A SymbolicConstant to specify the formulation of the hybrid elements with user subroutine
UMAT. Possible values are TOTAL, INCREMENTAL, INCOMPRESSIBLE, and NONE,
hybridFormulation
Abaqus Scripting Reference Guide
1490
UserMaterial object

which means that Abaqus/CAE will not specify a hybrid formulation and the Abaqus solver
default will be used. The default value is NONE.
This argument is valid only in an Abaqus/Standard analysis.
Return value
A UserMaterial object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the UserMaterial object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the UserMaterial method.
Return value
None.
Exceptions
RangeError.
Members
The UserMaterial object has members with the same names and descriptions as the arguments to the UserMaterial
method.
Corresponding analysis keywords
•
*USER MATERIAL
1491
Abaqus Scripting Reference Guide
UserMaterial object

UserOutputVariables object
The UserOutputVariables object speciﬁes the number of user-deﬁned output variables.
Access
import material
mdb.models[name].materials[name].userOutputVariables
import odbMaterial
session.odbs[name].materials[name].userOutputVariables
UserOutputVariables(...)
This method creates a UserOutputVariables object.
Path
mdb.models[name].materials[name].UserOutputVariables
session.odbs[name].materials[name].UserOutputVariables
Required arguments
None.
Optional arguments
An Int specifying the number of user-deﬁned variables required at each material point. The default value
is 0.
n
Return value
A UserOutputVariables object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the UserOutputVariables object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the UserOutputVariables  method.
Return value
None.
Abaqus Scripting Reference Guide
1492
UserOutputVariables object

Exceptions
RangeError.
Members
The UserOutputVariables object has members with the same names and descriptions as the arguments to the
UserOutputVariables  method.
Corresponding analysis keywords
•
*USER OUTPUT VARIABLES
1493
Abaqus Scripting Reference Guide
UserOutputVariables object

VelocityDependence object
The VelocityDependence object speciﬁes the dependence of the permeability of a material on the velocity of ﬂuid
ﬂow.
Access
import material
mdb.models[name].materials[name].permeability.velocityDependence
import odbMaterial
session.odbs[name].materials[name].permeability.velocityDependence
VelocityDependence(...)
This method creates a VelocityDependence object.
Path
mdb.models[name].materials[name].permeability.VelocityDependence
session.odbs[name].materials[name].permeability.VelocityDependence
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None.
Table data
•
. Only 
 0.0 is allowed.
•
Void ratio, .
Return value
A VelocityDependence object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the VelocityDependence object.
Required arguments
None.
Abaqus Scripting Reference Guide
1494
VelocityDependence object

Optional arguments
The optional arguments to setValues are the same as the arguments to the VelocityDependence  method.
Return value
None.
Exceptions
RangeError.
Members
The VelocityDependence object has members with the same names and descriptions as the arguments to the
VelocityDependence  method.
Corresponding analysis keywords
•
*PERMEABILITY
1495
Abaqus Scripting Reference Guide
VelocityDependence object

Viscoelastic object
The Viscoelastic object speciﬁes dissipative behavior for use with elasticity.
Access
import material
mdb.models[name].materials[name].viscoelastic
import odbMaterial
session.odbs[name].materials[name].viscoelastic
Viscoelastic(...)
This method creates a Viscoelastic object.
Path
mdb.models[name].materials[name].Viscoelastic
session.odbs[name].materials[name].Viscoelastic
Required arguments
A SymbolicConstant specifying the domain deﬁnition. Possible values are:
domain
•
FREQUENCY, specifying a frequency domain. This domain is only available for an
Abaqus/Standard analysis.
•
TIME, specifying a time domain.
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the frequency domain deﬁnition. This argument is required only
when domain=FREQUENCY. Possible values are FORMULA, TABULAR, PRONY,
CREEP_TEST_DATA, and RELAXATION_TEST_DATA. The default value is FORMULA.
frequency
A SymbolicConstant specifying the type. This argument is required only when
domain=FREQUENCY and frequency=TABULAR. Possible values are ISOTROPIC and
TRACTION. The default value is ISOTROPIC.
type
A SymbolicConstant specifying the preload. This argument is required only when
domain=FREQUENCY and frequency=TABULAR. Possible values are NONE, UNIAXIAL,
VOLUMETRIC, and UNIAXIAL_VOLUMETRIC. The default value is NONE.
preload
A SymbolicConstant specifying the time domain deﬁnition. This argument is required only when
domain=TIME. Possible values are PRONY, CREEP_TEST_DATA, RELAXATION_TEST_DATA,
and FREQUENCY_DATA. The default value is PRONY.
time
A Float specifying the allowable average root-mean-square error of the data points in the least-squares
ﬁt. The Float values correspond to percentages; for example, 0.01 is 1%. The default value is 0.01.
errtol
Abaqus Scripting Reference Guide
1496
Viscoelastic object

This argument is valid only when time=CREEP_TEST_DATA, RELAXATION_TEST_DATA or
FREQUENCY_DATA; or only when frequency=CREEP_TEST_DATA or
RELAXATION_TEST_DATA.
An Int specifying the maximum number of terms 
 in the Prony series. The maximum value is 13.
The default value is 13.
nmax
This argument is valid only when time=CREEP_TEST_DATA, RELAXATION_TEST_DATA or
FREQUENCY_DATA; or only when frequency=CREEP_TEST_DATA or
RELAXATION_TEST_DATA.
A sequence of sequences of Floats specifying the items described below. The default value is an
empty sequence.
volumetricTable
Table data
If frequency=FORMULA, the table data for table specify the following:
•
Real part of 
.
•
Imaginary part of 
.
•
Value of .
•
Real part of 
. If the material is incompressible, this value is ignored.
•
Imaginary part of 
. If the material is incompressible, this value is ignored.
•
Value of . If the material is incompressible, this value is ignored.
If frequency=TABULAR and type=ISOTROPIC and preload=NONE, or time=FREQUENCY_DATA the table data
for table specify the following:
•
Real part of 
.
•
Imaginary part of 
.
•
Real part of 
. If the material is incompressible, this value is ignored.
•
Imaginary part of 
. If the material is incompressible, this value is ignored.
•
Frequency  in cycles per time.
If frequency=TABULAR and type=ISOTROPIC and preload=UNIAXIAL the table data for table specify the following:
•
Loss modulus.
•
Storage modulus.
•
Frequency.
•
Uniaxial strain.
If frequency=TABULAR and type=TRACTION and preload=NONE the table data for table specify the following:
•
Normalized loss modulus.
•
Normalized shear modulus.
1497
Abaqus Scripting Reference Guide
Viscoelastic object

•
Frequency.
If frequency=TABULAR and type=TRACTION and preload=UNIAXIAL or preload=UNIAXIAL_VOLUMETRIC
the table data for table specify the following:
•
Loss modulus.
•
Storage modulus.
•
Frequency.
•
Closure.
If time=PRONY or frequency=PRONY, the table data for table specify the following:
•
, the modulus ratio in the ﬁrst term in the Prony series expansion of the shear relaxation modulus.
•
, the modulus ratio in the ﬁrst term in the Prony series expansion of the bulk relaxation modulus.
•
, the relaxation time for the ﬁrst term in the Prony series expansion.
If frequency=TABULAR and type=ISOTROPIC and preload=VOLUMETRIC or preload=UNIAXIAL_VOLUMETRIC
the table data for volumetricTable specify the following:
•
Loss modulus.
•
Storage modulus.
•
Frequency.
•
Volume ratio.
Return value
A Viscoelastic object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Viscoelastic object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Viscoelastic  method.
Return value
None.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
1498
Viscoelastic object

Members
The Viscoelastic object has members with the same names and descriptions as the arguments to the Viscoelastic
method.
In addition, the Viscoelastic object can have the following members:
A CombinedTestData object.
combinedTestData
A ShearTestData object.
shearTestData
A Trs object.
trs
A VolumetricTestData object.
volumetricTestData
Corresponding analysis keywords
•
*VISCOELASTIC
1499
Abaqus Scripting Reference Guide
Viscoelastic object

Viscosity object
The Viscosity object speciﬁes mechanical viscosity.
Access
import material
mdb.models[name].materials[name].viscosity
import odbMaterial
session.odbs[name].materials[name].viscosity
Viscosity(...)
This method creates a Viscosity object.
Path
mdb.models[name].materials[name].Viscosity
session.odbs[name].materials[name].Viscosity
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the type of viscosity. The default value is
NEWTONIAN.
type
A Boolean specifying whether the data depend on temperature. The default value
is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
If type=NEWTONIAN, the table data specify the following:
•
Viscosity, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Viscosity object.
Abaqus Scripting Reference Guide
1500
Viscosity object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the Viscosity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Viscosity  method.
Return value
None.
Exceptions
RangeError.
Members
The Viscosity object has members with the same names and descriptions as the arguments to the Viscosity  method.
In addition, the Viscosity object can have the following member:
A Trs object.
trs
Corresponding analysis keywords
•
*VISCOSITY
1501
Abaqus Scripting Reference Guide
Viscosity object

Viscous object
The Viscous object speciﬁes the viscous properties for a two-layer viscoplastic material model.
Access
import material
mdb.models[name].materials[name].viscous
import odbMaterial
session.odbs[name].materials[name].viscous
Viscous(...)
This method creates a Viscous object.
Path
mdb.models[name].materials[name].Viscous
session.odbs[name].materials[name].Viscous
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A SymbolicConstant specifying the creep law. Possible values are STRAIN, TIME, USER,
ANAND, DARVEAUX, DOUBLE_POWER, POWER_LAW, and TIME_POWER_LAW.
The default value is STRAIN.
law
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying the time interval for relevant laws. Possible values are
CREEP and TOTAL. The default value is TOTAL.
time
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
1502
Viscous object

If law=USER, the table data specify the following:
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If law=ANAND, the table data specify the following:
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
If law=DARVEAUX, the table data specify the following:
•
•
•
•
•
•
•
If law=DOUBLE_POWER, the table data specify the following:
1503
Abaqus Scripting Reference Guide
Viscous object

•
•
•
•
•
•
•
•
If law=POWER_LAW or law=TIME_POWER_LAW, the table data specify the following:
•
•
•
•
•
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Viscous object.
Exceptions
None.
setValues(...)
This method modiﬁes the Viscous object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Viscous method.
Return value
None.
Abaqus Scripting Reference Guide
1504
Viscous object

Exceptions
None.
Members
The Viscous object has members with the same names and descriptions as the arguments to the Viscous method.
In addition, the Viscous object can have the following member:
A Potential object.
potential
Corresponding analysis keywords
•
*VISCOUS
1505
Abaqus Scripting Reference Guide
Viscous object

VoidNucleation object
The VoidNucleation object deﬁnes the nucleation of voids in a porous material.
Access
import material
mdb.models[name].materials[name].porousMetalPlasticity.voidNucleation
import odbMaterial
session.odbs[name].materials[name].porousMetalPlasticity\
.voidNucleation
VoidNucleation(...)
This method creates a VoidNucleation object.
Path
mdb.models[name].materials[name].porousMetalPlasticity.VoidNucleation
session.odbs[name].materials[name].porousMetalPlasticity\
.VoidNucleation
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
, the mean value of the nucleation-strain normal distribution.
•
, the standard deviation of the nucleation-strain normal distribution.
•
, the volume fraction of nucleating voids.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A VoidNucleation object.
Abaqus Scripting Reference Guide
1506
VoidNucleation object

Exceptions
RangeError.
setValues(...)
This method modiﬁes the VoidNucleation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the VoidNucleation  method.
Return value
None.
Exceptions
RangeError.
Members
The VoidNucleation object has members with the same names and descriptions as the arguments to the VoidNucleation
method.
Corresponding analysis keywords
•
*VOID NUCLEATION
1507
Abaqus Scripting Reference Guide
VoidNucleation object

VolumetricTestData object
The VolumetricTestData object provides volumetric test data.
Access
import material
mdb.models[name].materials[name].hyperelastic.volumetricTestData
mdb.models[name].materials[name].hyperfoam.volumetricTestData
mdb.models[name].materials[name].viscoelastic.volumetricTestData
import odbMaterial
session.odbs[name].materials[name].hyperelastic.volumetricTestData
session.odbs[name].materials[name].hyperfoam.volumetricTestData
session.odbs[name].materials[name].viscoelastic.volumetricTestData
VolumetricTestData(...)
This method creates a VolumetricTestData object.
Path
mdb.models[name].materials[name].hyperelastic.VolumetricTestData
mdb.models[name].materials[name].hyperfoam.VolumetricTestData
mdb.models[name].materials[name].viscoelastic.VolumetricTestData
session.odbs[name].materials[name].hyperelastic.VolumetricTestData
session.odbs[name].materials[name].hyperfoam.VolumetricTestData
session.odbs[name].materials[name].viscoelastic.VolumetricTestData
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
None or a Float specifying a normalized volumetric value that depends on the value of the
time member of the Viscoelastic object. The default value is None.
volinf
If time=RELAXATION_TEST_DATA, volinf speciﬁes the value of the long-term,
normalized volumetric modulus, 
.
If time=CREEP_TEST_DATA, volinf speciﬁes the value of the long-term, normalized
volumetric compliance, 
.
This argument is valid only for a viscoelastic material model.
None or an Int specifying the value for smoothing. If smoothing=None, no smoothing is
employed. The default value is None.
smoothing
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Abaqus Scripting Reference Guide
1508
VolumetricTestData object

Table data
For a hyperelastic or hyperfoam material model, the table data specify the following:
•
Pressure, .
•
Volume ratio,  (current volume/original volume).
For a viscoelastic material model, the values depend on the value of the time member of the Viscoelastic object.
If time=RELAXATION_TEST_DATA, the table data specify the following:
•
Normalized volumetric (bulk) modulus 
.
•
Time 
.
If time=CREEP_TEST_DATA, the table data specify the following:
•
Normalized volumetric (bulk) compliance 
.
•
Time 
.
Return value
A VolumetricTestData object.
Exceptions
None.
setValues(...)
This method modiﬁes the VolumetricTestData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the VolumetricTestData  method.
Return value
None.
Exceptions
None.
Members
The VolumetricTestData object has members with the same names and descriptions as the arguments to the
VolumetricTestData  method.
1509
Abaqus Scripting Reference Guide
VolumetricTestData object

Corresponding analysis keywords
•
*VOLUMETRIC TEST DATA
Abaqus Scripting Reference Guide
1510
VolumetricTestData object

evaluateMaterial
This command evaluates the behavior of a hyperelastic material under standard test conditions.
Access
from material import evaluateMaterial
evaluateMaterial
This method evaluates the behavior of a hyperelastic material under standard test conditions.
Path
evaluateMaterial
Required arguments
A Material object.
material
A String specifying the name to be used for the material evaluation
simulation.
simulationName
Optional arguments
Note:
Although uniaxialStrainRange, biaxialStrainRange, planarStrainRange, volumeRatioRange, and
simpleShearStrainRange are optional arguments, at least one of them must be speciﬁed with a nonzero
value.
A SymbolicConstant specifying whether test data or coefﬁcients should be used for
the material deﬁnition in the unit element tests. Possible values are TEST_DATA or
COEFFICIENTS.
dataSource
A sequence of SymbolicConstants specifying for which material models the material
is to be evaluated. Possible values are POLY_N1, POLY_N2, POLY_N3, POLY_N4,
strainEnergyPotentials
POLY_N5, POLY_N6, OGDEN_N1, OGDEN_N2, OGDEN_N3, OGDEN_N4,
OGDEN_N5, OGDEN_N6, REDUCED_POLY_N1, REDUCED_POLY_N2,
REDUCED_POLY_N3, REDUCED_POLY_N4, REDUCED_POLY_N5,
REDUCED_POLY_N6, ARRUDA_BOYCE, VAN_DER_WAALS, YEOH,
MOONEY_RIVLIN, and NEO_HOOKE.
Note:
The options POLY_N3, POLY_N4, POLY_N5, and POLY_N6 are valid only
if the material was deﬁned by providing coefﬁcients of the strain energy
potential.
1511
evaluateMaterial

None or a sequence of SymbolicConstants specifying the types of test data to be
included in the material deﬁnition of the Marlow material that is being evaluated.
marlowData
Possible values are UNIAXIAL, BIAXIAL, PLANAR, or VOLUMETRIC. The
default value is None.
None or a SymbolicConstant specifying the input data type for the Marlow material
model. Possible values are TENSION, COMPRESSION, or BOTH.
marlowDataType
A sequence of SymbolicConstants specifying the types of test data to be included in
the material deﬁnition of the material being evaluated. Possible values are UNIAXIAL,
BIAXIAL, PLANAR, and VOLUMETRIC.
testDataTypes
A tuple of Floats specifying minimum and maximum nominal strains to be applied
in the uniaxial tension test.
uniaxialStrainRange
A tuple of Floats specifying the minimum and maximum nominal strains to be applied
in the biaxial tension test.
biaxialStrainRange
A tuple of Floats specifying the minimum and maximum nominal strains to be applied
in the planar test. The planar test is equivalent to a pure shear test.
planarStrainRange
A tuple of Floats specifying the minimum and maximum compressive volume ratio.
volumeRatioRange
A tuple of Floats specifying the minimum and maximum nominal strains to be applied
in the simple shear test.
simpleShearStrainRange
None or a SymbolicConstant specifying whether test data or coefﬁcients should be
used for the viscoelastic material deﬁnition in the element tests. Possible values are
TEST_DATA or COEFFICIENTS. The default value is None.
viscoDataSource
None or a sequence of SymbolicConstants specifying the types of test data to be
included in the material deﬁnition of the viscoelastic material being evaluated. Possible
viscoTestDataTypes
values are UNIAXIAL, BIAXIAL, PLANAR, or VOLUMETRIC. The default value
is None.
None or a Float specifying the time period for the stress relaxation response mode.
The default value is None.
relaxationTime
None or a Float specifying the time period for the creep response mode. The default
value is None.
creepTime
Return value
None.
Exceptions
MaterialEvaluationError: POLY_N3, POLY_N4,
POLY_N5, or POLY_N6
If dataSource=TEST_DATA and
strainEnergyPotentials contains POLY_N3,
POLY_N4, POLY_N5, or POLY_N6:
Abaqus Scripting Reference Guide
1512
evaluateMaterial

not allowed for dataSource=TEST_DATA.
MaterialEvaluationError: material evaluation failed, see
If the material evaluation failed:
path to data ﬁle.
MaterialEvaluationError: Material evaluation is currently
If the material type of the material to be
evaluated is not hyperelastic:
supported only for hyperelastic materials.
1513
Abaqus Scripting Reference Guide
evaluateMaterial

Mdb commands
Mdb commands are used to create and upgrade an Abaqus model database that stores models and analysis
controls.
In this section:
•
Mdb object
•
Mdb commands
Abaqus Scripting Reference Guide
1514

Mdb object
The Mdb object is the high-level Abaqus model database. A model database stores models and analysis controls.
Access
mdb
Mdb(...)
This constructor creates an empty Mdb object.
Path
Mdb
Required arguments
None.
Optional arguments
A String specifying the path to be used when the model database is saved to a ﬁle. If you do
not provide a ﬁle extension, .cae is appended automatically to the path. The default value is
an empty string.
pathName
Return value
A Mdb object.
Exceptions
None.
importDxf(...)
This method creates a ConstrainedSketch object from a ﬁle containing dxf-format (AutoCAD) geometry. Only a limited
number of entities are supported. This format should be used only if no other formats are available.
Path
importDxf
Required arguments
A String specifying the path to the dxf ﬁle to open.
ﬁleName
Optional arguments
None.
1515
Mdb object

Return value
A Mdb object.
Exceptions
None.
openMdb(...)
This method opens an existing model database ﬁle.
Path
openMdb
Required arguments
A String specifying the path to the model database ﬁle to open. If you do not provide a ﬁle
extension, Abaqus/CAE attempts to open the ﬁle with .cae appended to the path.
pathName
Optional arguments
None.
Return value
An Mdb object.
Exceptions
MdbError: invalid model database.
If the ﬁle is an invalid model database:
MdbError: incompatible release number, expected
<Abaqus release>, got <earlier or later Abaqus
release>
If the ﬁle contains a model database from an Abaqus release
other than the Abaqus release you are currently running:
MdbError: cannot open ﬁle: May be in use by another
CAE session
If the model database ﬁle is already opened in write mode:
MdbError: cannot open ﬁle...
If the command fails to open the model database ﬁle for
reasons not mentioned above:
openAcis(...)
This method creates an AcisFile object from a ﬁle containing ACIS-format geometry. This object is subsequently used
by the PartFromGeometryFile method.
Path
openAcis
Abaqus Scripting Reference Guide
1516
Mdb object

Required arguments
A String specifying the path to the ACIS ﬁle to open.
ﬁleName
Optional arguments
A Boolean specifying whether to scale, rotate, and translate the part using the transform
read from the ACIS ﬁle. The default value is OFF.
scaleFromFile
Return value
An AcisFile object.
Exceptions
Texterror: ACIS File version exceeds Kernel.
File is from a newer version of ACIS than the CAE kernel.
Texterror: Failed to read ACIS ﬁle.
The data in the ACIS ﬁle are corrupted.
openCatia(...)
This method creates an AcisFile object from a ﬁle containing CATIA V5–format geometry. This object is subsequently
used by the PartFromGeometryFile method.
Path
openCatia
Required arguments
A String specifying the path to the CATIA ﬁle to open.
ﬁleName
Optional arguments
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part
to be created. Possible values are SOLID, SHELL, and WIRE. If topology=SOLID, Abaqus/CAE
topology
attempts to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds the body as
a shell entity and not as a solid entity. The default value is SOLID.
A SymbolicConstant specifying whether the original units should be retained. Possible values
are ON and OFF. The default value is OFF.
convertUnits
A Boolean specifying whether to combine the bodies in the CATPart ﬁle. If the bodies to be
combined touch or overlap, invalid entities would result. For CATProduct ﬁles, this option
will be ignored.
combineBodies
Return value
An AcisFile object.
1517
Abaqus Scripting Reference Guide
Mdb object

Exceptions
None.
openEnf(...)
This method creates anAcisFile object from a ﬁle containing Elysium Neutral File-format geometry that was created
by CATIA V5, I-DEAS, or Pro/ENGINEER. This object is subsequently used by the PartFromGeometryFile
method.
Path
openEnf
Required arguments
A String specifying the path to the Elysium Neutral File that was created by I-DEAS,
Pro/ENGINEER, or CATIA V5.
ﬁleName
A String specifying the type of CAD system that created the ﬁle. Possible values are “ideas”,
“proe”, or “catiav5”.
ﬁleType
Optional arguments
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part
to be created. Possible values are SOLID, SHELL, and WIRE. If topology=SOLID, Abaqus/CAE
topology
attempts to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds the body as
a shell entity and not as a solid entity. The default value is SOLID.
A Boolean specifying if the dimensions of the part should be converted to millimeters. The
default value is OFF.
convertUnits
Return value
An AcisFile object.
Exceptions
None.
openIges(...)
This method creates an AcisFile object from a ﬁle containing IGES-format geometry. This object is subsequently used
by the PartFromGeometryFile method.
Path
openIges
Required arguments
A String specifying the path to the IGES ﬁle to open.
ﬁleName
Abaqus Scripting Reference Guide
1518
Mdb object

Optional arguments
A SymbolicConstant specifying the method used to deﬁne the trim curves that bound parametric
surfaces. Possible values are:
trimCurve
•
DEFAULT, use either of the following as speciﬁed by the contents of the IGES ﬁle.
•
PARAMETRIC_DATA, use the parameter space of the surface being trimmed.
•
THREED_DATA, use real space—the coordinate system of the part along with an indication
that the trim curve lies on the parametric surface.
The default value is DEFAULT.
A SymbolicConstant specifying whether the imported geometry needs to be scaled using the units
information available in the IGES ﬁle. Possible values are ON and OFF. The default value is
scaleFromFile
OFF. When the argument is set to ON, the geometry is scaled to millimeters with respect to the
unit system speciﬁed in the IGES ﬁle.
A Boolean specifying if the IGES ﬁle contains MSBO (Manifold Solid B-Rep Object) entities.
The default value is False.
msbo
A sequence of Ints specifying the levels or layers of entities that will be translated from the IGES
ﬁle to build the part. The default is to include all the layers.
includedLayers
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part
to be created. Possible values are SOLID, SHELL, and WIRE. If topology=SOLID, Abaqus/CAE
topology
attempts to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds the body as a
shell entity and not as a solid entity. The default value is SOLID.
A SymbolicConstant specifying whether the imported wires need to be united or not. Possible
values are ON andOFF. The default value is ON. When importing a sketch, this value is set to
OFF.
uniteWires
Return value
An AcisFile object.
Exceptions
Texterror: Failed to read IGES ﬁle.
The data in the IGES ﬁle are corrupted.
openParasolid(...)
This method creates anAcisFile object from a ﬁle containing Parasolid-format geometry. This object is subsequently
used by the PartFromGeometryFile method.
Path
openParasolid
1519
Abaqus Scripting Reference Guide
Mdb object

Required arguments
A String specifying the path to the Parasolid ﬁle to open.
ﬁleName
Optional arguments
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part to be
created. Possible values are SOLID, SHELL, and WIRE. If topology=SOLID, Abaqus/CAE attempts
topology
to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds the body as a shell entity
and not as a solid entity. The default value is SOLID.
Return value
An AcisFile object.
Exceptions
None.
openStep(...)
This method creates an AcisFile object from a ﬁle containing STEP-format geometry. This object is subsequently used
by the PartFromGeometryFile method.
Path
openStep
Required arguments
A String specifying the path to the STEP ﬁle to open.
ﬁleName
Optional arguments
A Float specifying the scaling factor to apply to the imported geometric entities. The default
value is 1.0.
scale
Return value
An AcisFile object.
Exceptions
Texterror: Failed to read STEP ﬁle.
The data in the STEP ﬁle are corrupted.
openVda(...)
This method creates an AcisFile object from a ﬁle containing VDA-FS-format geometry. This object is subsequently
used by the PartFromGeometryFile method.
Abaqus Scripting Reference Guide
1520
Mdb object

Path
openVda
Required arguments
A String specifying the path to the VDA-FS ﬁle to open.
ﬁleName
Optional arguments
None.
Return value
An AcisFile object.
Exceptions
Texterror: Failed to read VDA ﬁle.
The data in the VDA-FS ﬁle are corrupted.
openSolidworks(...)
This method creates an AcisFile object from a ﬁle containing Solidworks format geometry. This object is subsequently
used by the PartFromGeometryFile method.
Path
openSolidworks
Required arguments
A String specifying the path to the Solidworks ﬁle to open.
ﬁleName
Optional arguments
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part to be
created. Possible values are SOLID, SHELL, and WIRE. If topology=SOLID, Abaqus/CAE attempts
topology
to attach cells to create a solid entity. If topology=SHELL, Abaqus/CAE builds the body as a shell
entity, not as a solid entity. The default value is SOLID.
Return value
An AcisFile object.
Exceptions
Texterror: Failed to read Solidworks ﬁle.
The data in the Solidworks ﬁle are corrupted.
1521
Abaqus Scripting Reference Guide
Mdb object

close()
This method closes an open Mdb object but does not save the Mdb object to disk. After closing the Mdb object, this
method creates a new unnamed empty Mdb object.
Arguments
None.
Return value
None.
Exceptions
None.
save()
This method saves an Mdb object to disk at the location speciﬁed by pathName (pathName is a member of the Mdb
object).
Arguments
None.
Return value
None.
Exceptions
MdbError: cannot save ﬁle: pathname member is empty
If pathName is empty:
MdbError: “abaqus.cae” is an invalid CAE ﬁlename.
If pathName is abaqus.cae:
MdbError: cannot save ﬁle...
If the command fails to save the Mdb object to disk for
reasons not mentioned above:
saveAs(...)
This method saves an Mdb object to disk at the speciﬁed location.
Required arguments
A String specifying the path to be used when the model database is saved to a ﬁle. If you do
not provide a ﬁle extension, .cae is appended automatically to the path.
pathName
Optional arguments
None.
Abaqus Scripting Reference Guide
1522
Mdb object

Return value
None.
Exceptions
MdbError: “abaqus.cae” is an invalid CAE ﬁlename.
If pathName is abaqus.cae:
MdbError: cannot save ﬁle...
If the command fails to save the Mdb object to disk for
reasons not mentioned above:
openAuxMdb(...)
This method opens an auxiliary Mdb object on the disk at the speciﬁed location. This enables models from the auxiliary
Mdb object to be copied into the current Mdb.
Required arguments
A String specifying the path to the auxiliary Mdb which is to be opened. If you do not provide
a ﬁle extension, .cae is appended automatically to the path.
pathName
Optional arguments
None.
Return value
None.
Exceptions
MdbError: invalid model database.
If the ﬁle is an invalid model database:
MdbError: incompatible release number, expected
<Abaqus release>, got <earlier or later Abaqus
release>.
If the ﬁle contains a model database from an Abaqus release
other than the Abaqus release you are currently running:
MdbError: cannot open ﬁle...
If the command fails to open the model database ﬁle for
reasons not mentioned above:
closeAuxMdb()
This method closes the auxiliary Mdb which had been opened earlier using the openAuxMdb command.
Arguments
None.
Return value
None.
1523
Abaqus Scripting Reference Guide
Mdb object

Exceptions
MdbError: The auxiliary Mdb was not opened..
If the auxiliary Mdb was not opened earlier.
getAuxMdbModelNames()
This method returns a list of model names present in the auxiliary Mdb which had been opened earlier using the
openAuxMdb command.
Arguments
None.
Return value
A list of model names present in the auxiliaryMdb
Exceptions
MdbError: The auxiliary Mdb was not opened..
If the auxiliary Mdb was not opened earlier.
copyAuxMdbModel(...)
This method copies a speciﬁed model from the auxiliary Mdb which had been opened earlier using the openAuxMdb
command.
Required arguments
A String specifying the model name in the auxiliary Mdb which is to be copied.
fromName
Optional arguments
A String specifying the name to be given to the model after it is copied into the Mdb. If this argument
is not speciﬁed toName is assumed to be the same as fromName. If a model with name toName
already exists in Mdb, it is overwritten.
toName
Return value
None.
Exceptions
MdbError: The auxiliary Mdb was not opened.
If the auxiliary Mdb was not opened earlier.
KeyError: fromName does not exist.
If the model fromName does not exist in the auxiliary Mdb.
Members
The Mdb object has members with the same names and descriptions as the arguments to the Mdb method.
Abaqus Scripting Reference Guide
1524
Mdb object

In addition, the Mdb object can have the following members:
An Int specifying the release number of the Mdb object in memory.
version
A Float specifying the value of a counter associated with the Mdb object. The
counter indicates when the Mdb object was last changed.
lastChangedCount
A repository of Job objects.
jobs
A repository of AdaptivityProcess objects.
adaptivityProcesses
A repository of Coexecution objects.
coexecutions
A repository of OptimizationProcess objects.
optimizationProcesses
A MeshEditOptions object specifying the undo/redo behavior when editing
meshes on parts or part instances.
meshEditOptions
A repository of Model objects.
models
A RepositorySupport object.
customData
A repository of Annotation objects.
annotations
1525
Abaqus Scripting Reference Guide
Mdb object

Mdb commands
The following command upgrades a model database (.cae) to the current release and writes the upgraded model
database to a new ﬁle.
upgradeMdb
This method upgrades an existing Mdb object to the current release and writes the upgraded version of the Mdb
object to a ﬁle. In addition, Abaqus/CAE writes information about the status of the upgrade to the log ﬁle
(upgradedMdbPath.log ).
Path
upgradeMdb
Required arguments
A String specifying the path to the ﬁle containing the model database to be
upgraded.
existingMdbPath
A String specifying the path to the ﬁle that will contain the upgraded model
database.
upgradedMdbPath
Optional arguments
None.
Return value
None.
Exceptions
MdbError: cannot convert ﬁle
If the model database upgrade fails:
CombineOptResults
This method combines the results from existing ODB ﬁles for each optimization cycle and writes a merged ODB
ﬁle.
Path
CombineOptResults
Required arguments
A String specifying the path to the folder in which optimization results are
present.
optResultLocation
Abaqus Scripting Reference Guide
1526
Mdb commands

Optional arguments
A Symbolic Constant to specify the optimization cycles from which the results should
be merged. The possible values are INITIAL_AND_LAST, NONE, ALL, LAST,
EVERY_NCYCLES, SPECIFY.
optIter
The default value is INITIAL_AND_LAST.
An Int or a tuple of Ints specifying the optimization cycles from which the results
should be merged. This argument is used only when EVERY_NCYCLES or SPECIFY
is selected for optIter.
nValues
The default value is ALL.
A tuple of strings specifying the list of models for which the merging of results is
performed.
models
The default value is ALL.
A tuple of strings specifying the list of steps from the selected models to be included
in the odb merge.
steps
The default value is ALL.
A tuple of strings specifying the list of analysisFieldVariables to be included in the
odb merge.
analysisFieldVariables
The default value is ALL.
A Symbolic Constant to specify the target odb to which the results will be merged.
The possible values are ORIGINAL_MODEL, FIRST or LAST.
includeResultsFrom
The default value is FIRST.
A String to specify the path of target odb if includeResultsFrom is set to
ORIGINAL_MODEL.
originalModel
1527
Abaqus Scripting Reference Guide
Mdb commands

Mesh commands
Mesh commands are used to mesh part instances and regions.
Mesh commands are also used to assign element sizes, element types, and mesh control parameters.
In this section:
•
Assembly object
•
Part object
•
ElemType object
•
MeshEdge object
•
MeshEdgeArray object
•
MeshElement object
•
MeshElementArray object
•
MesherOptions object
•
MeshFace object
•
MeshFaceArray object
•
MeshNode object
•
MeshNodeArray object
•
MeshStats object
Abaqus Scripting Reference Guide
1528

Assembly object
The following commands operate on Assembly objects. For more information about the Assembly object, see Assembly
object.
Access
import mesh
assignStackDirection(...)
This method assigns a stack direction to geometric cells. The stack direction will be used to orient the elements during
mesh generation.
Required arguments
A sequence of Cell objects specifying regions where to assign the stack direction.
cells
A Face object specifying the top side of the stack direction.
referenceRegion
Optional arguments
None.
Return value
None.
Exceptions
None.
associateMeshWithGeometry(...)
This method associates a geometric entity with mesh entities that are either orphan elements, bounds orphan elements,
or were created using the bottom-up meshing technique.
Required arguments
A Cell , a Face, an Edge, or a Vertex object specifying geometric entity to be associated with one
or more mesh entities.
geometricEntity
If the geometric entity is a Cell object then the argument elements must be speciﬁed.
If the geometric entity is a Face object then the argument elemFaces must be speciﬁed.
If the geometric entity is an Edge object then the argument elemEdges must be speciﬁed.
If the geometric entity is a Vertex object then the argument node must be speciﬁed.
1529
Assembly object

Optional arguments
A sequence of MeshElement objects specifying the elements to be associated with the
geometric cell.
elements
A sequence of MeshFace objects specifying the element faces to be associated with the
geometric face.
elemFaces
A sequence of MeshEdge objects specifying the element edges to be associated with the
geometric edge.
elemEdges
A MeshNode object specifying the mesh node to be associated with the geometric vertex.
node
Return value
None.
Exceptions
None.
createVirtualTopology(...)
This method creates a virtual topology feature by automatically merging faces and edges based on a set of geometric
parameters. The edges and vertices that are being merged will be ignored during mesh generation.
Required arguments
A sequence of Face objects or PartInstance objects specifying the domain to search for geometric
entities that need to be merged. Entities identiﬁed as candidates to be merged may be merged with
entities from outside the speciﬁed region.
regions
Optional arguments
A Boolean specifying whether to merge short edges. The default value is False.
mergeShortEdges
A Float specifying a threshold that determines which edges are considered to be
short. These edges are the candidate entities to be merged. This argument is a
shortEdgeThreshold
required argument if the argument mergeShortEdges equals True and it is ignored
if the argument mergeShortEdges equals False.
A Boolean specifying whether to merge faces with small area. The default value
is False.
mergeSmallFaces
A Float specifying a threshold that determines which faces are considered to have
a small area. These faces are the candidate entities to be merged. This argument
smallFaceAreaThreshold
is a required argument if the argument mergeSmallFaces equals True and it is
ignored if the argument mergeSmallFaces equals False.
Abaqus Scripting Reference Guide
1530
Assembly object

A Boolean specifying whether to merge faces with high aspect ratio. The default
value is False.
mergeSliverFaces
A Float specifying a threshold that determines which faces are considered to have
high aspect ratio. These faces are candidate entities to be merged. This argument
faceAspectRatioThreshold
is a required argument if the argument mergeSliverFaces equals True and it is
ignored if the argument mergeSliverFaces equals False.
A Boolean specifying whether to merge faces that have a sharp corner angle. The
default value is False.
mergeSmallAngleFaces
A Float specifying a threshold that determines which face corner angles are
considered to be small. These faces will be candidate entities to be merged. This
smallFaceCornerAngleThreshold
argument is a required argument if the argument mergeSmallAngleFaces equals
True and it is ignored if the argument mergeSmallAngleFaces equals False.
A Boolean specifying whether to merge faces that represent a thin stair-like feature.
The default value is False.
mergeThinStairFaces
A Float specifying a threshold that determines which faces representing small
stair-like features are considered thin. These faces will be candidate entities to be
thinStairFaceThreshold
merged. This argument is required if the argument  mergeThinStairFaces is True
and it is ignored if  mergeThinStairFaces is False.
A Boolean specifying whether to abstract away redundant edges and vertices. The
default value is False.
ignoreRedundantEntities
A Float specifying the angle deviation from 180 degrees at a vertex or at an edge
such that the two edges radiating from the vertex or the two faces bounded by the
edge can be merged. The default value is 30.0 degrees.
cornerAngleTolerance
A Boolean specifying whether to verify that blend faces can be merged with
neighboring faces. If applyBlendControls is True then all faces that have angle
applyBlendControls
larger than blendSubtendedAngleTolerance  and a radius smaller than
blendRadiusTolerance  will not be merged with neighboring faces unless the
neighboring faces are also blend faces with similar geometric characteristics. The
default value is False.
A Float specifying the largest subtended angle of blend faces that can be merged
with neighboring faces. This argument is a required argument if the argument
blendSubtendedAngleTolerance
applyBlendControls equals True and it is ignored if the argument
applyBlendControls equals False.
A Float specifying the smallest radius of curvature of blend faces that can be
merged with neighboring faces. This argument is a required argument if the
blendRadiusTolerance
argument  applyBlendControls equals True and it is ignored if the argument
applyBlendControls equals False.
1531
Abaqus Scripting Reference Guide
Assembly object

Return value
A Feature object.
Exceptions
None.
deleteBoundaryLayerControls(...)
This method deletes the control parameters for boundary layer mesh for all the speciﬁed regions.
Required arguments
A sequence of Cell objects specifying the regions for which to set the boundary layer mesh
control parameters.
regions
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteMesh(...)
This method deletes a subset of the mesh that contains the native elements from the given part instances or regions.
Required arguments
A sequence of PartInstance objects or Region objects specifying the part instances or regions
from where the native mesh is to be deleted.
regions
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteMeshAssociationWithGeometry(...)
This method deletes the association of geometric entities with mesh entities.
Abaqus Scripting Reference Guide
1532
Assembly object

Required arguments
A sequence of Cell objects, Face objects, Edge objects, or Vertex objects specifying
the geometric entities that will be disassociated from the mesh.
geometricEntities
Optional arguments
A Boolean specifying whether the mesh will also be disassociated from the geometric entities
that bounds the given geometricEntities. For example, if the argument geometricEntities
addBoundingEntities
contains a face, this boolean indicates whether the edges and vertices that bound the face will
also be disassociated from the mesh. The default value is False.
Return value
None.
Exceptions
None.
deletePreviewMesh()
This method deletes all boundary meshes in the assembly. See the boundaryPreview argument of generateMesh
for information about generating boundary meshes.
Arguments
None.
Return value
None.
Exceptions
None.
deleteSeeds(...)
This method deletes the global edge seeds from the given part instances or deletes the local edge seeds from the given
edges.
Required arguments
A sequence of PartInstance objects or Edge objects specifying the part instances or edges
from which the seeds are to be deleted.
regions
Optional arguments
None.
Return value
None.
1533
Abaqus Scripting Reference Guide
Assembly object

Exceptions
None.
generateBottomUpExtrudedMesh(...)
This method generates solid elements by extruding a 2D mesh along a vector, either on an orphan mesh or within a
cell region using a bottom-up technique.
Required arguments
A Cell object specifying the geometric region where the mesh is to be generated. This
argument is valid only for native part instances.
cell
An Int specifying the number of layers to be generated along the extrusion vector.
numberOfLayers
A sequence of sequences of Floats specifying the start point and end point of a vector. Each
point is deﬁned by a tuple of three coordinates indicating its position. The direction of the
mesh extrusion operation is from the ﬁrst point to the second point.
extrudeVector
Optional arguments
At least one of the three optional "SourceSide" arguments must be speciﬁed.
A Region of Face objects specifying the geometric domain to be used as the source for
the extrude meshing operation.
geometrySourceSide
A sequence of MeshFace objects specifying the faces of 3D elements to be used as the
source for the extrude meshing operation.
elemFacesSourceSide
A sequence of 2D MeshElement objects specifying the elements to be used as the source
for the extrude meshing operation.
elemSourceSide
A Float specifying the distance of the mesh extrusion. If unspeciﬁed, the vector length of
the extrudeVector argument is assumed.
depth
A datum plane, a sequence of Face objects, a sequence of MeshFace objects, or a sequence
of 2D MeshElement objects specifying the target of the extrude meshing operation. If
targetSide
speciﬁed, this argument overrides the depth argument, and all points on the source will
be extruded in the direction of the extrusion vector until meeting the target.
A Float specifying a ratio of the element size in the extrusion direction between the source
and the target sides of the extrusion. The default is 1.0, meaning no bias.
biasRatio
A Boolean specifying whether existing element sets that include source elements will be
extended to also include extruded elements. This argument is ignored for native part
instances. The default value is False.
extendElementSets
Return value
None.
Abaqus Scripting Reference Guide
1534
Assembly object

Exceptions
None.
generateBottomUpSweptMesh(...)
This method generates solid elements by sweeping a 2D mesh, either on an orphan mesh or within a cell region using
a bottom-up technique.
Required arguments
A Cell object specifying the geometric region where the mesh is to be generated. This argument is
valid only for native part instances.
cell
Optional arguments
At least one of the following three arguments must be speciﬁed: geometrySourceSide, elemFacesSourceSide, or
elemSourceSide.
In addition one of the following two sets of arguments must also be speciﬁed:
•
One of the following three arguments: geometryConnectingSides, elemFacesConnectingSides, or
elemConnectingSides. In this case the targetSide is an optional argument.
•
targetSide and numberOfLayers.
A Region of Face objects specifying the geometric domain to be used as the source
for the sweep meshing operation.
geometrySourceSide
A sequence of MeshFace objects specifying the faces of 3D elements to be used
as the source for the sweep meshing operation.
elemFacesSourceSide
A sequence of 2D MeshElement objects specifying the elements to be used as the
source for the sweep meshing operation.
elemSourceSide
A Region of Face objects specifying the connecting sides of the sweep meshing
operation.
geometryConnectingSides
A sequence of MeshFace objects specifying connecting sides of the sweep meshing
operation.
elemFacesConnectingSides
A sequence of 2D MeshElement objects specifying connecting sides of the sweep
meshing operation.
elemConnectingSides
A Face object specifying the target side of the sweep meshing operation.
targetSide
An Int specifying the number of layers to be generated along the sweep direction.
numberOfLayers
A Boolean specifying whether existing element sets that include source elements
will be extended to also include swept elements. This argument is ignored for
native part instances. The default value is False.
extendElementSets
1535
Abaqus Scripting Reference Guide
Assembly object

Return value
None.
Exceptions
None.
generateBottomUpRevolvedMesh(...)
This method generates solid elements by revolving a 2D mesh around an axis, either on an orphan mesh or within a
cell region using a bottom-up technique.
Required arguments
A Cell object specifying the geometric region where the mesh is to be generated. This
argument is valid only for native part instances.
cell
An Int specifying the number of layers of elements to be generated around the axis of
revolution.
numberOfLayers
A sequence of sequences of Floats specifying the two points of the vector that describes
the axis of revolution. Each point is deﬁned by a tuple of three coordinates indicating its
axisOfRevolution
position. The direction of the axis of revolution is from the ﬁrst point to the second point.
The orientation of the revolution operation follows the right-hand-rule about the axis of
revolution.
A Float specifying the angle of revolution.
angleOfRevolution
Optional arguments
At least one of the three optional "SourceSide" arguments must be speciﬁed.
A Region of Face objects specifying the geometric domain to be used as the source
for the revolve meshing operation.
geometrySourceSide
A sequence of MeshFace objects specifying the faces of 3D elements to be used as
the source for the revolve meshing operation.
elemFacesSourceSide
A sequence of 2D MeshElement objects specifying the elements to be used as the
source for the revolve meshing operation.
elemSourceSide
A Boolean specifying whether existing element sets that include source elements will
be extended to also include extruded elements. This argument is ignored for native
part instances. The default value is False.
extendElementSets
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
1536
Assembly object

generateMesh(...)
This method generates a mesh in the given part instances or regions.
Required arguments
None.
Optional arguments
A sequence of PartInstance objects or Region objects specifying the part instances or
regions where the mesh is to be generated.
regions
A Boolean specifying whether mesh generation is allowed to modify seed constraints.
The default value is OFF.
seedConstraintOverride
A Boolean specifying whether mesh generation is allowed to modify the existing mesh
techniques so that a compatible mesh can be generated. The default value is OFF.
meshTechniqueOverride
A Boolean specifying whether the generated mesh should be a boundary mesh. This
option will only have an effect if any of the speciﬁed regions are to be meshed with
boundaryPreview
tetrahedral elements or using the bottom-up technique with hexahedral or wedge elements.
The default value is OFF.
A Boolean specifying whether mesh generation is allowed to modify an existing boundary
preview mesh. This option will only have an effect if any of the speciﬁed regions are to
boundaryMeshOverride
be meshed with tetrahedral elements and a boundary preview mesh already exists. The
default value is OFF.
Return value
None.
Exceptions
None.
getEdgeSeeds(...)
This method returns an edge seed parameter for a speciﬁed edge of an assembly.
Required arguments
An Edge object specifying the edge to be queried.
edge
A SymbolicConstant specifying the type of edge seed attribute to return. Possible values are:
attribute
•
EDGE_SEEDING_METHOD
•
BIAS_METHOD
•
NUMBER
1537
Abaqus Scripting Reference Guide
Assembly object

•
AVERAGE_SIZE
•
DEVIATION_FACTOR
•
MIN_SIZE_FACTOR
•
BIAS_RATIO
•
BIAS_MIN_SIZE
•
BIAS_MAX_SIZE
•
VERTEX_ADJ_TO_SMALLEST_ELEM
•
SMALLEST_ELEM_LOCATION
•
CONSTRAINT
The return value is dependent on the attribute argument.
•
If attribute=EDGE_SEEDING_METHOD, the return value is a SymbolicConstant specifying the edge
seeding method used to create the seeds along the edge. Possible values are:
-
UNIFORM_BY_NUMBER
-
UNIFORM_BY_SIZE
-
CURVATURE_BASED_BY_SIZE
-
BIASED
-
NONE
•
If attribute=BIAS_METHOD, the return value is a SymbolicConstant specifying the bias type used to
create the seeds along the edge. Possible values are:
-
SINGLE
-
DOUBLE
-
NONE
•
If attribute=NUMBER, the return value is an Int specifying the number of element seeds along the edge.
•
If attribute=AVERAGE_SIZE, the return value is a Float specifying the average element size along the
edge.
•
If attribute=DEVIATION_FACTOR, the return value is a Float specifying the deviation factor 
,
where  is the chordal deviation and  is the element length. If edge seeds are not deﬁned, the return
value is zero.
•
If attribute=MIN_SIZE_FACTOR, the return value is a Float specifying the size of the smallest allowable
element as a fraction of the speciﬁed global element size. If edge seeds are not deﬁned, the return value
is zero.
•
If attribute=BIAS_RATIO, the return value is a Float specifying the length ratio of the largest element
to the smallest element.
•
If attribute=BIAS_MIN_SIZE, the return value is a Float specifying the length of the largest element;
only applicable if the EDGE_SEEDING_METHOD is BIASED and seeds were speciﬁed by minimum
and maximum sizes.
•
If attribute=BIAS_MAX_SIZE, the return value is a Float specifying the length of the largest element;
only applicable if the EDGE_SEEDING_METHOD is BIASED and seeds were speciﬁed by minimum
and maximum sizes.
Abaqus Scripting Reference Guide
1538
Assembly object

•
If attribute=VERTEX_ADJ_TO_SMALLEST_ELEM, the return value is an Int specifying the ID of
the vertex next to the smallest element; only applicable if the EDGE_SEEDING_METHOD is BIASED.
•
If attribute=SMALLEST_ELEM_LOCATION, the return value is a SymbolicConstant specifying the
location of smallest elements for double bias seeds; only applicable if the EDGE_SEEDING_METHOD
is BIASED and BIAS_METHOD is DOUBLE. Possible values are:
-
SMALLEST_ELEM_AT_CENTER
-
SMALLEST_ELEM_AT_ENDS
-
NONE
•
If attribute=CONSTRAINT, the return value is a SymbolicConstant specifying how close the seeds must
be matched by the mesh. Possible values are:
-
FREE
-
FINER
-
FIXED
-
NONE
A value of NONE indicates that the edge is not seeded.
Optional arguments
None.
Return value
The return value is a Float, an Int, or a SymbolicConstant depending on the value of the attribute argument.
Exceptions
None.
getElementType(...)
This method returns the ElemType object of a given element shape assigned to a region of the assembly.
Required arguments
A Cell, a Face, or an Edge object specifying the region to be queried.
region
A SymbolicConstant specifying the shape of the element for which to return the element
type. Possible values are:
elemShape
•
LINE
•
QUAD
•
TRI
•
HEX
•
WEDGE
•
TET
1539
Abaqus Scripting Reference Guide
Assembly object

Optional arguments
None.
Return value
ElemType object.
Exceptions
If the region cannot be associated with element types or if the elemShape is not consistent
with the dimension of the region.
TypeError
getIncompatibleMeshInterfaces(...)
This method returns a sequence of face objects that are meshed with incompatible elements.
Required arguments
None.
Optional arguments
A sequence of cell objects which will be used to search the incompatible faces.
cells
Return value
A sequence of Face objects.
Exceptions
None.
getMeshControl(...)
This method returns a mesh control parameter for the speciﬁed region of the assembly.
Required arguments
A Cell, a Face, or an Edge object specifying the region to be queried.
region
A SymbolicConstant specifying the mesh control attribute to return. Possible values are:
attribute
•
ELEM_SHAPE
•
TECHNIQUE
•
ALGORITHM
•
MIN_TRANSITION
The return value is dependent on the attribute argument.
Abaqus Scripting Reference Guide
1540
Assembly object

•
If attribute=ELEM_SHAPE, the return value is a SymbolicConstant specifying the element shape used
during meshing. Possible values are:
-
LINE
-
QUAD
-
TRI
-
QUAD_DOMINATED
-
HEX
-
TET
-
WEDGE
-
HEX_DOMINATED
•
If attribute=TECHNIQUE, the return value is a SymbolicConstant specifying the meshing technique
to be used during meshing. Possible values are:
-
FREE
-
STRUCTURED
-
SWEEP
-
UNMESHABLE
Where UNMESHABLE indicates that no meshing technique is applicable with the currently assigned
element shape.
•
If attribute=ALGORITHM, the return value is a SymbolicConstant specifying the meshing algorithm
to be used during meshing. Possible values are:
-
MEDIAL_AXIS
-
ADVANCING_FRONT
-
DEFAULT
-
NON_DEFAULT
-
NONE
Where NONE indicates that no algorithm is applicable.
•
If attribute=MIN_TRANSITION, the return value is a Boolean indicating whether minimum transition
will be used during meshing. This option is applicable only to the following:
-
Free quadrilateral meshing or sweep hexahedral meshing with algorithm=MEDIAL_AXIS.
-
Structured quadrilateral meshing.
Optional arguments
None.
Return value
The return value is a SymbolicConstant or a Boolean depending on the value of the attribute argument.
1541
Abaqus Scripting Reference Guide
Assembly object

Exceptions
The region cannot carry mesh controls.
TypeError
getMeshStats(...)
This method returns the mesh statistics for the given part instances or regions.
Required arguments
A sequence or tuple of PartInstance objects or Geometry regions for which mesh statistics
should be returned.
regions
Optional arguments
None.
Return value
A MeshStats object.
Exceptions
None.
getPartSeeds(...)
This method returns a part seed parameter for the speciﬁed instance.
Required arguments
A PartInstance object specifying the part instance to be queried.
region
A SymbolicConstant specifying the type of part seed attribute to return. Possible values are:
attribute
•
SIZE
•
DEFAULT_SIZE
•
DEVIATION_FACTOR
•
MIN_SIZE_FACTOR
The return value is dependent on the value of the attribute argument.
•
If attribute=SIZE, the return value is a Float specifying the assigned global element size. If part seeds
are not deﬁned, the return value is zero.
•
If attribute=DEFAULT_SIZE, the return value is a Float specifying a suggested default global
element size based upon the part geometry.
•
If attribute=DEVIATION_FACTOR, the return value is a Float specifying the deviation factor 
,
where  is the chordal deviation and  is the element length. If part seeds are not deﬁned, the return
value is zero.
Abaqus Scripting Reference Guide
1542
Assembly object

•
If attribute=MIN_SIZE_FACTOR, the return value is a Float specifying the size of the smallest
allowable element as a fraction of the speciﬁed global element size. If part seeds are not deﬁned, the
return value is zero.
Optional arguments
None.
Return value
The return value is a Float, and its value is dependent on the attribute argument.
Exceptions
Error: Part instance does not contain native geometry
An exception occurs if the part instance does not contain
native geometry.
getUnmeshedRegions()
This method returns all geometric regions in the assembly that require a mesh for submitting an analysis but are either
unmeshed or are meshed incompletely.
Arguments
None.
Return value
A Region object, or None.
Exceptions
None.
ignoreEntity(...)
This method creates a virtual topology feature. Virtual topology allows unimportant entities to be ignored during mesh
generation. You can combine two adjacent faces by specifying a common edge to ignore. Similarly, you can combine
two adjacent edges by specifying a common vertex to ignore.
Required arguments
A sequence of vertices and edges specifying the entities to be ignored during meshing.
entities
Optional arguments
None.
Return value
A Feature object.
1543
Abaqus Scripting Reference Guide
Assembly object

Exceptions
None.
restoreIgnoredEntity(...)
This method restores vertices and edges that have been merged using a virtual topology feature.
Required arguments
A sequence of IgnoredVertex objects and IgnoredEdge objects specifying the entities to be
restored.
entities
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
seedEdgeByBias(...)
This method seeds the given edges nonuniformly using the speciﬁed number of elements and bias ratio or the speciﬁed
minimum and maximum element sizes.
Required arguments
A SymbolicConstant specifying whether single- or double-biased seed distribution will be
applied. If unspeciﬁed, single-biased seed distribution will be applied. Possible values are:
biasMethod
•
SINGLE: Single-biased seed distribution will be applied.
•
DOUBLE: Double-biased seed distribution will be applied.
A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near the end where the normalized curve parameter=0.0. You must provide either the end1Edges
end1Edges
or the end2Edges argument or both when biasMethod=SINGLE and omit both of them when
biasMethod=DOUBLE.
Note:
You can determine which end is which by the order of the vertex indices returned by
getVertices().
A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near the end where the normalized curve parameter=1.0.
end2Edges
Abaqus Scripting Reference Guide
1544
Assembly object

A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near edge center. You must provide either the centerEdges or the endEdges argument or both
when biasMethod=DOUBLE and omit both of them when biasMethod=SINGLE.
centerEdges
A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near edge ends.
endEdges
A Float specifying the ratio of the largest element to the smallest element. Possible values are
1.0 ratio  106.
ratio
An Int specifying the number of elements along each edge. Possible values are 1 number
104.
number
A Float specifying the desired smallest element size.
minSize
A Float specifying the desired largest element size.
maxSize
Note:
You must specify either the ratio and number or minSize and maxSize pair of arguments.
Optional arguments
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The default
value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
•
FIXED: The seeds must be exactly matched by the mesh (only with respect to the number of
elements, not to the nodal positioning).
Return value
None.
Exceptions
None.
seedEdgeByNumber(...)
This method seeds the given edges uniformly based on the number of elements along the edges.
Required arguments
A sequence of Edge objects specifying the edges to seed.
edges
1545
Abaqus Scripting Reference Guide
Assembly object

An Int specifying the number of elements along each edge. Possible values are 1 number
104.
number
Optional arguments
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The default
value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
•
FIXED: The seeds must be exactly matched by the mesh (only with respect to the number of
elements, not to the nodal positioning).
Return value
None.
Exceptions
None.
seedEdgeBySize(...)
This method seeds the given edges either uniformly or following edge curvature distribution, based on the desired
element size.
Required arguments
A sequence of Edge objects specifying the edges to seed.
edges
A Float specifying the desired element size.
size
Optional arguments
A Float specifying the deviation factor 
, where  is the chordal deviation and  is the
element length.
deviationFactor
A Float specifying the size of the smallest allowable element as a fraction of the speciﬁed
global element size.
minSizeFactor
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The
default value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible
values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
•
FIXED: The seeds must be exactly matched by the mesh (only with respect to the number
of elements, not to the nodal positioning).
Abaqus Scripting Reference Guide
1546
Assembly object

Return value
None.
Exceptions
None.
seedPartInstance(...)
This method assigns global edge seeds to the given part instances.
Required arguments
A sequence of PartInstance objects specifying the part instances to seed.
regions
A Float specifying the desired global element size for the edges.
size
Optional arguments
A Float specifying the deviation factor 
, where  is the chordal deviation and  is the
element length.
deviationFactor
A Float specifying the size of the smallest allowable element as a fraction of the speciﬁed
global element size.
minSizeFactor
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The
default value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible
values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
Return value
None.
Exceptions
None.
setBoundaryLayerControls(...)
This method sets the control parameters for boundary layer mesh for the speciﬁed regions.
Required arguments
A sequence of Cell objects specifying the regions for which to set the boundary layer
mesh control parameters.
regions
1547
Abaqus Scripting Reference Guide
Assembly object

A Float specifying the height of the ﬁrst element layer off boundary. Possible values are
0.0 ﬁrstElemSize  106.
ﬁrstElemSize
A Float specifying the ratio of heights of any two consecutive element layers. Possible
values are 1.0 growthFactor  10.0.
growthFactor
An Int specifying the number of element layers to be generated. Possible values are 1
numLayers  104.
numLayers
Optional arguments
A sequence of Face objects specifying the faces where boundary layer should not be
generated. By default, boundary layer mesh will be generated on all faces of the selected
regions.
inactiveFaces
A String specifying a unique name for a set that will contain boundary layer elements.
setName
Return value
None.
Exceptions
None.
setElementType(...)
This method assigns element types to the speciﬁed regions.
Required arguments
A sequence of Geometry regions or MeshElement objects, or a Set object containing either geometry
regions or elements, specifying the regions to which element types are to be assigned.
regions
A sequence of ElemType objects, one for each element shape applicable to the regions.
elemTypes
Note:
If an ElemType object has an UNKNOWN_xxx value for elemCode, its order will be deduced
from the order of other valid ElemType objects within the same setElementType
command. If no valid ElemType objects can be found, the order will remain unchanged.
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
1548
Assembly object

Exceptions
As a result of the element assignment, a region must have the same library, family, and order for all its assigned element
types. Otherwise, an exception will be thrown.
For example, suppose the Hex, Wedge, and Tet elements previously assigned to a cell are all linear. The user now
constructs an ElemType object with a quadratic Hex element and includes only this object in the setElementType
command. An exception will be thrown because the Wedge and Tet elements will remain linear (i.e., As Is) and become
incompatible with the newly assigned quadratic Hex element.
setLogicalCorners(...)
This method sets the logical corners for a mappable face region.
Required arguments
A Face region.
region
Three, four, or ﬁve Vertex objects deﬁning the logical corners for a given mappable
face region.
corners
Optional arguments
None.
Return value
None.
Exceptions
None.
setMeshControls(...)
This method sets the mesh control parameters for the speciﬁed regions.
Required arguments
A sequence of Face or Cell regions specifying the regions for which to set the mesh control
parameters.
regions
Optional arguments
A SymbolicConstant specifying the element shape to be used for meshing. The default value is QUAD
for Face regions and HEX for Cell regions. If unspeciﬁed, the existing element shape will remain
unchanged. Possible values are:
elemShape
•
QUAD: Quadrilateral mesh.
•
QUAD_DOMINATED: Quadrilateral-dominated mesh.
•
TRI: Triangular mesh.
•
HEX: Hexahedral mesh.
1549
Abaqus Scripting Reference Guide
Assembly object

•
HEX_DOMINATED: Hex-dominated mesh.
•
TET: Tetrahedral mesh.
•
WEDGE: Wedge mesh.
A SymbolicConstant specifying the mesh technique to be used. The default value is FREE for Face
regions. For Cell regions the initial value depends on the geometry of the regions and can be
technique
STRUCTURED, SWEEP, or “unmeshable.” If unspeciﬁed, the existing mesh technique(s) will remain
unchanged. Possible values are:
•
FREE: Free mesh technique.
•
STRUCTURED: Structured mesh technique.
•
SWEEP: Sweep mesh technique.
•
BOTTOM_UP: Bottom-up mesh technique. Only applicable for cell regions.
•
SYSTEM_ASSIGN: Allow the system to assign a suitable technique. The actual technique assigned
can be STRUCTURED, SWEEP, or “unmeshable.”
A SymbolicConstant specifying the algorithm used to generate the mesh for the speciﬁed regions.
Possible values are MEDIAL_AXIS, ADVANCING_FRONT, and NON_DEFAULT. If unspeciﬁed,
the existing value will remain unchanged. This option is applicable only to the following:
algorithm
•
Free quadrilateral or quadrilateral-dominated meshing. In this case the possible values are
MEDIAL_AXIS and ADVANCING_FRONT.
•
Sweep hexahedral or hexahedral-dominated meshing. In this case the possible values are
MEDIAL_AXIS and ADVANCING_FRONT.
•
Free tetrahedral meshing. In this case the only possible value is NON_DEFAULT, and it indicates
that the free tetrahedral-meshing technique available in Abaqus 6.4 or earlier will be used. If
algorithm is not speciﬁed, the default tetrahedral-meshing technique will be used.
A Boolean specifying whether minimum transition is to be applied. The default value is ON. If
unspeciﬁed, the existing value will remain unchanged. This option is applicable only in the following
cases:
minTransition
•
Free quadrilateral meshing or hexahedral sweep meshing with algorithm=MEDIAL_AXIS.
•
Structured quadrilateral meshing.
A SymbolicConstant specifying element size growth to be applied when generating the interior of a
tetrahedral mesh. Possible values are MODERATE and MAXIMUM. If unspeciﬁed, the existing
value will remain unchanged. This option only applies to the default tetrahedral mesher.
sizeGrowth
A Boolean specifying whether mapped meshing can be used to replace the selected mesh technique.
The allowMapped argument is applicable only in the following cases:
allowMapped
•
Free triangular meshing.
•
Free quadrilateral or quadrilateral-dominated meshing with algorithm=ADVANCING_FRONT.
•
Hexahedral or hexahedral-dominated sweep meshing with algorithm=ADVANCING_FRONT.
•
Free tetrahedral meshing. allowMapped=True implies that mapped triangular meshing can be used
on faces that bound three-dimensional regions.
Abaqus Scripting Reference Guide
1550
Assembly object

Return value
None.
Exceptions
None.
setSweepPath(...)
This method sets the sweep path for a sweepable region or the revolve path for a revolvable region.
Required arguments
A sweepable region.
region
An Edge object specifying the sweep or revolve path.
edge
A SymbolicConstant specifying the sweep sense. The sense will affect only how gasket elements
will be created; it will have no effect if gasket elements are not used. Possible values are
FORWARD or REVERSE.
sense
If sense=FORWARD, the sense of the given edge's underlying curve will be used.
Optional arguments
None.
Return value
None.
Exceptions
None.
verifyMeshQuality(...)
This method tests the quality of part instance meshes and returns poor-quality elements.
Required arguments
A SymbolicConstant specifying the criterion used for the quality check. Possible values are:
criterion
ANALYSIS_CHECKS
When this criterion is speciﬁed Abaqus/CAE will invoke the element quality checks included with
the input ﬁle processor for Abaqus/Standard and Abaqus/Explicit.
ANGULAR_DEVIATION
The maximum amount (in degrees) that an element's face corner angles deviate from the ideal angle.
The ideal angle is 90° for quadrilateral element faces and 60° for triangular element faces. Elements
with an angular deviation larger than the speciﬁed threshold will fail this test.
1551
Abaqus Scripting Reference Guide
Assembly object

ASPECT_RATIO
The ratio between the lengths of the longest and shortest edges of an element. Elements with an aspect
ratio larger than the speciﬁed threshold will fail this test.
GEOM_DEVIATION_FACTOR
The largest geometric deviation factor evaluated along any of the element edges associated with
geometric edges or faces. The geometric deviation factor along an element edge is calculated by
dividing the maximum gap between the element edge and its associated geometry by the length of the
element edge. Elements with a geometric deviation factor larger than the speciﬁed threshold will fail
this test.
LARGE_ANGLE
The largest corner angle on any of an element's faces. Elements with face angles larger than the
speciﬁed threshold (in degrees) will fail this test.
LONGEST_EDGE
The length of an element's longest edge. Elements with an edge longer than the speciﬁed threshold
will fail this test.
MAX_FREQUENCY
An estimate of an element's contribution to the initial maximum allowable frequency for
Abaqus/Standard analyses. This calculation requires appropriate section assignments and material
deﬁnitions. Elements whose maximum allowable frequency is smaller than the given value will fail
this test.
SHAPE_FACTOR
The shape factor for triangular and tetrahedral elements. This is the ratio between the element area or
volume and the optimal element area or volume. Elements with a shape factor smaller than the speciﬁed
threshold will fail this test.
SHORTEST_EDGE
The length of an element's shortest edge. Elements with an edge shorter than the speciﬁed threshold
will fail this test.
SMALL_ANGLE
The smallest corner angle on any of an element's faces. Elements with face angles smaller than the
given value (in degrees) will fail this test.
STABLE_TIME_INCREMENT
An estimate of an element's contribution to the initial maximum stable time increment for
Abaqus/Explicit analyses. This calculation requires appropriate section assignments and material
deﬁnitions. Elements that require a time increment smaller than the given value will fail this test.
Abaqus Scripting Reference Guide
1552
Assembly object

Optional arguments
A Float value used to determine low quality elements according to the speciﬁed criterion. This
argument is ignored when the ANALYSIS_CHECKS criterion is used. For other criterion, if
this argument is unspeciﬁed then no list of failed elements will be returned.
threshold
A SymbolicConstant specifying an element shape for limiting the query. Possible values are
LINE, QUAD, TRI, HEX, WEDGE, and TET.
elemShape
A sequence of Region or MeshElement objects. If you do not specify the regions argument, all
meshes in the assembly are considered.
regions
Return value
A Dictionary object containing values for some number of the following keys: failedElements, warningElements,
naElements (sequences of MeshElement objects); numElements (Int); average, worst (Float); worstElement (MeshElement
object)
Exceptions
None.
1553
Abaqus Scripting Reference Guide
Assembly object

Part object
The following commands operate on Part objects. For more information about the Part object, see Part object.
Access
import mesh
assignStackDirection(...)
This method assigns a stack direction to geometric cells. The stack direction will be used to orient the elements during
mesh generation.
Required arguments
A sequence of Cell objects specifying regions where to assign the stack direction.
cells
A Face object specifying the top side of the stack direction.
referenceRegion
Optional arguments
None.
Return value
None.
Exceptions
None.
associateMeshWithGeometry(...)
This method associates a geometric entity with mesh entities that are either orphan elements, bounds orphan elements,
or were created using the bottom-up meshing technique.
Required arguments
A Cell, a Face, an Edge, or a Vertex object specifying geometric entity to be associated with one
or more mesh entities.
geometricEntity
If the geometric entity is a Cell object then the argument elements must be speciﬁed.
If the geometric entity is a Face object then the argument elemFaces must be speciﬁed.
If the geometric entity is an Edge object then the argument elemEdges must be speciﬁed.
If the geometric entity is a Vertex object then the argument node must be speciﬁed.
Optional arguments
A sequence of MeshElement objects specifying the elements to be associated with the
geometric cell.
elements
Abaqus Scripting Reference Guide
1554
Part object

A sequence of MeshFace objects specifying the element faces to be associated with the
geometric face.
elemFaces
A sequence of MeshEdge objects specifying the element edges to be associated with the
geometric edge.
elemEdges
A MeshNode object specifying the mesh node to be associated with the geometric vertex.
node
Return value
None.
Exceptions
None.
createVirtualTopology(...)
This method creates a virtual topology feature by automatically merging faces and edges based on a set of geometric
parameters. The edges and vertices that are being merged will be ignored during mesh generation.
Required arguments
None.
Optional arguments
A sequence of Face objects specifying the domain to search for geometric entities
that need to be merged. Entities identiﬁed as candidates to be merged may be
regions
merged with entities from outside the speciﬁed region. If regions is not speciﬁed
then the entire part is the domain for searching geometric entities that need to be
merged.
A Boolean specifying whether to merge short edges. The default value is False.
mergeShortEdges
A Float specifying a threshold that determines which edges are considered to be
short. These edges are the candidate entities to be merged. This argument is a
shortEdgeThreshold
required argument if the argumentmergeShortEdges equals True and it is ignored
if the argument mergeShortEdges equals False.
A Boolean specifying whether to merge faces with small area. The default value
is False.
mergeSmallFaces
A Float specifying a threshold that determines which faces are considered to have
a small area. These faces are the candidate entities to be merged. This argument
smallFaceAreaThreshold
is a required argument if the argumentmergeSmallFaces equals True and it is
ignored if the argument mergeSmallFaces equals False.
A Boolean specifying whether to merge faces with high aspect ratio. The default
value is False.
mergeSliverFaces
1555
Abaqus Scripting Reference Guide
Part object

A Float specifying a threshold that determines which faces are considered to have
high aspect ratio. These faces are the candidate entities to be merged. This argument
faceAspectRatioThreshold
is a required argument if the argumentmergeSliverFaces equals True and it is
ignored if the argument mergeSliverFaces equals False.
A Boolean specifying whether to merge faces that have a sharp corner angle. The
default value is False.
mergeSmallAngleFaces
A Float specifying a threshold that determines which face corner angles are
considered to be small. These faces will be candidate entities to be merged. This
smallFaceCornerAngleThreshold
argument is a required argument if the argumentmergeSmallAngleFaces equals
True and it is ignored if the argument mergeSmallAngleFaces equals False.
A Boolean specifying whether to merge faces that represent a thin stair-like feature.
The default value is False.
mergeThinStairFaces
A Float specifying a threshold that determines which faces representing small
stair-like features are considered thin. These faces will be candidate entities to be
thinStairFaceThreshold
merged. This argument is required if the argument mergeThinStairFaces is True
and it is ignored if mergeThinStairFaces is False.
A Boolean specifying whether to abstract away redundant edges and vertices. The
default value is False.
ignoreRedundantEntities
A Float specifying the angle deviation from 180 degrees at a vertex or at an edge
such that the two edges radiating from the vertex or the two faces bounded by the
edge can be merged. The default value is 30.0 degrees.
cornerAngleTolerance
A Boolean specifying whether to verify that blend faces can be merged with
neighboring faces. If applyBlendControls is true then all faces that have angle
applyBlendControls
larger than blendSubtendedAngleTolerance and a radius smaller than
blendRadiusTolerance will not be merged with neighboring faces unless the
neighboring faces are also blend faces with similar geometric characteristics. The
default value is False.
A Float specifying the largest subtended angle of blend faces that can be merged
with neighboring faces. This argument is a required argument if the argument
blendSubtendedAngleTolerance
applyBlendControls equals True and it is ignored if the argument
applyBlendControls equals False.
A Float specifying the smallest radius of curvature of blend faces that can be
merged with neighboring faces. This argument is a required argument if the
blendRadiusTolerance
argument applyBlendControls equals True and it is ignored if the argument
applyBlendControls equals False.
Return value
A Feature object.
Abaqus Scripting Reference Guide
1556
Part object

Exceptions
None.
deleteBoundaryLayerControls(...)
This method deletes the control parameters for boundary layer mesh for all the speciﬁed regions.
Required arguments
A sequence of Cell objects specifying the regions for which to set the boundary layer mesh
control parameters.
regions
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteMesh(...)
This method deletes a subset of the mesh that contains the native elements from the given parts or regions.
Required arguments
A sequence of Part objects or Region objects specifying the parts or regions from which the
native mesh is to be deleted.
regions
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteMeshAssociationWithGeometry(...)
This method deletes the association of geometric entities with mesh entities.
1557
Abaqus Scripting Reference Guide
Part object

Required arguments
A sequence of Cell objects, Face objects, Edge objects, or Vertex objects specifying
the geometric entities that will be disassociated from the mesh.
geometricEntities
Optional arguments
A Boolean specifying whether the mesh will also be disassociated from the geometric entities
that bounds the given geometricEntities. For example, if the argument geometricEntities
addBoundingEntities
contains a face, this boolean indicates whether the edges and vertices that bound the face will
also be disassociated from the mesh. The default value is False.
Return value
None.
Exceptions
None.
deletePreviewMesh()
This method deletes all boundary meshes in the parts. See the boundaryPreview argument of generateMesh for
information about generating boundary meshes.
Arguments
None.
Return value
None.
Exceptions
None.
deleteSeeds(...)
This method deletes the global edge seeds from the given parts or deletes the local edge seeds from the given edges.
Required arguments
A sequence of Part objects or Edge objects specifying the parts or edges from which the
seeds are to be deleted.
regions
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
1558
Part object

Exceptions
None.
generateMesh(...)
This method generates a mesh in the given parts or regions.
Required arguments
None.
Optional arguments
A sequence of Part objects or Region objects specifying the parts or regions where the
mesh is to be generated.
regions
A Boolean specifying whether mesh generation is allowed to modify seed constraints.
The default value is OFF.
seedConstraintOverride
A Boolean specifying whether mesh generation is allowed to modify the existing mesh
techniques so that a compatible mesh can be generated. The default value is OFF.
meshTechniqueOverride
A Boolean specifying whether the generated mesh should be a boundary preview mesh.
This option will only have an effect if any of the speciﬁed regions are to be meshed with
boundaryPreview
tetrahedral elements or using the bottom-up technique with hexahedral or wedge elements.
The default value is OFF.
A Boolean specifying whether mesh generation is allowed to modify an existing boundary
preview mesh. This option will only have an effect if any of the speciﬁed regions are to
boundaryMeshOverride
be meshed with tetrahedral elements and a boundary preview mesh already exists. The
default value is OFF.
Return value
None.
Exceptions
None.
generateBottomUpExtrudedMesh(...)
This method generates solid elements by extruding a 2D mesh along a vector, either on an orphan mesh or within a
cell region using a bottom-up technique.
Required arguments
A Cell object specifying the geometric region where the mesh is to be generated. This
argument is valid only for native parts.
cell
An Int specifying the number of layers to be generated along the extrusion vector.
numberOfLayers
1559
Abaqus Scripting Reference Guide
Part object

A sequence of sequences of Floats specifying the start point and end point of a vector. Each
point is deﬁned by a tuple of three coordinates indicating its position. The direction of the
mesh extrusion operation is from the ﬁrst point to the second point.
extrudeVector
Optional arguments
At least one of the three optional "SourceSide" arguments must be speciﬁed.
A Region of Face objects specifying the geometric domain to be used as the source for
the extrude meshing operation.
geometrySourceSide
A sequence of MeshFace objects specifying the faces of 3D elements to be used as the
source for the extrude meshing operation.
elemFacesSourceSide
A sequence of 2D MeshElement objects specifying the elements to be used as the source
for the extrude meshing operation.
elemSourceSide
A Float specifying the distance of the mesh extrusion. If unspeciﬁed, the vector length of
the extrudeVector argument is assumed.
depth
A datum plane, a sequence of Face objects, a sequence of MeshFace objects, or a sequence
of 2D MeshElement objects specifying the target of the extrude meshing operation. If
targetSide
speciﬁed, this argument overrides the depth argument, and all points on the source will
be extruded in the direction of the extrusion vector until meeting the target.
A Float specifying a ratio of the element size in the extrusion direction between the source
and the target sides of the extrusion. The default is 1.0, meaning no bias.
biasRatio
A Boolean specifying whether existing element sets that include source elements will be
extended to also include extruded elements. This argument is ignored for native parts. The
default value is False.
extendElementSets
Return value
None.
Exceptions
None.
generateBottomUpSweptMesh(...)
This method generates solid elements by sweeping a 2D mesh, either on an orphan mesh or within a cell region using
a bottom-up technique.
Required arguments
A Cell object specifying the geometric region where the mesh is to be generated. This argument is
valid only for native parts.
cell
Abaqus Scripting Reference Guide
1560
Part object

Optional arguments
At least one of the following three arguments must be speciﬁed: geometrySourceSide, elemFacesSourceSide, or
elemSourceSide.
In addition one of the following two sets of arguments must also be speciﬁed:
•
One of the following three arguments: geometryConnectingSides, elemFacesConnectingSides, or
elemConnectingSides. In this case the targetSide is an optional argument.
•
targetSide and numberOfLayers.
A Region of Face objects specifying the geometric domain to be used as the source
for the sweep meshing operation.
geometrySourceSide
A sequence of MeshFace objects specifying the faces of 3D elements to be used
as the source for the sweep meshing operation.
elemFacesSourceSide
A sequence of 2D MeshElement objects specifying the elements to be used as the
source for the sweep meshing operation.
elemSourceSide
A Region of Face objects specifying connecting sides of the sweep meshing
operation.
geometryConnectingSides
A sequence of MeshFace objects specifying connecting sides of the sweep meshing
operation.
elemFacesConnectingSides
A sequence of 2D MeshElement objects specifying connecting sides of the sweep
meshing operation.
elemConnectingSides
A Face object specifying the target side of the sweep meshing operation.
targetSide
An Int specifying the number of layers to be generated along the sweep direction.
numberOfLayers
A Boolean specifying whether existing element sets that include source elements
will be extended to also include swept elements. This argument is ignored for
native parts. The default value is False.
extendElementSets
Return value
None.
Exceptions
None.
generateBottomUpRevolvedMesh(...)
This method generates solid elements by revolving a 2D mesh around an axis, either on an orphan mesh or within a
cell region using a bottom-up technique.
1561
Abaqus Scripting Reference Guide
Part object

Required arguments
A Cell object specifying the geometric region where the mesh is to be generated. This
argument is valid only for native parts.
cell
An Int specifying the number of layers of elements to be generated around the axis of
revolution.
numberOfLayers
A sequence of sequences of Floats specifying the two points of the vector that describes
the axis of revolution. Each point is deﬁned by a tuple of three coordinates indicating its
axisOfRevolution
position. The direction of the axis of revolution is from the ﬁrst point to the second point.
The orientation of the revolution operation follows the right-hand-rule about the axis of
revolution.
A Float specifying the angle of revolution.
angleOfRevolution
Optional arguments
At least one of the three optional "SourceSide" arguments must be speciﬁed.
A Region of Face objects specifying the geometric domain to be used as the source
for the revolve meshing operation.
geometrySourceSide
A sequence of MeshFace objects specifying the faces of 3D elements to be used as
the source for the revolve meshing operation.
elemFacesSourceSide
A sequence of 2D MeshElement objects specifying the elements to be used as the
source for the revolve meshing operation.
elemSourceSide
A Boolean specifying whether existing element sets that include source elements will
be extended to also include extruded elements. This argument is ignored for native
parts. The default value is False.
extendElementSets
Return value
None.
Exceptions
None.
getEdgeSeeds(...)
This method returns an edge seed parameter for a speciﬁed edge of a part.
Required arguments
An Edge object specifying the edge to be queried.
edge
A SymbolicConstant specifying the type of edge seed attribute to return. Possible values are:
attribute
Abaqus Scripting Reference Guide
1562
Part object

•
EDGE_SEEDING_METHOD
•
BIAS_METHOD
•
NUMBER
•
AVERAGE_SIZE
•
DEVIATION_FACTOR
•
MIN_SIZE_FACTOR
•
BIAS_RATIO
•
BIAS_MIN_SIZE
•
BIAS_MAX_SIZE
•
VERTEX_ADJ_TO_SMALLEST_ELEM
•
SMALLEST_ELEM_LOCATION
•
CONSTRAINT
The return value is dependent on the attribute argument.
•
If attribute=EDGE_SEEDING_METHOD, the return value is a SymbolicConstant specifying the edge
seeding method used to create the seeds along the edge. Possible values are:
-
UNIFORM_BY_NUMBER
-
UNIFORM_BY_SIZE
-
CURVATURE_BASED_BY_SIZE
-
BIASED
-
NONE
•
If attribute=BIAS_METHOD, the return value is a SymbolicConstant specifying the bias type used to
create the seeds along the edge. Possible values are:
-
SINGLE
-
DOUBLE
-
NONE
•
If attribute=NUMBER, the return value is an Int specifying the number of element seeds along the edge.
•
If attribute=AVERAGE_SIZE, the return value is a Float specifying the average element size along the
edge.
•
If attribute=DEVIATION_FACTOR, the return value is a Float specifying the deviation factor 
,
where  is the chordal deviation and  is the element length. If edge seeds are not deﬁned, the return
value is zero.
•
If attribute=MIN_SIZE_FACTOR, the return value is a Float specifying the size of the smallest allowable
element as a fraction of the speciﬁed global element size. If edge seeds are not deﬁned, the return value
is zero.
•
If attribute=BIAS_RATIO, the return value is a Float specifying the length ratio of the largest element
to the smallest element.
•
If attribute=BIAS_MIN_SIZE, the return value is a Float specifying the length of the largest element;
only applicable if the EDGE_SEEDING_METHOD is BIASED and seeds were speciﬁed by minimum
and maximum sizes.
1563
Abaqus Scripting Reference Guide
Part object

•
If attribute=BIAS_MAX_SIZE, the return value is a Float specifying the length of the largest element;
only applicable if the EDGE_SEEDING_METHOD is BIASED and seeds were speciﬁed by minimum
and maximum sizes.
•
If attribute=VERTEX_ADJ_TO_SMALLEST_ELEM, the return value is an Int specifying the ID of
the vertex next to the smallest element; only applicable if the EDGE_SEEDING_METHOD is BIASED.
•
If attribute=SMALLEST_ELEM_LOCATION, the return value is a SymbolicConstant specifying the
location of smallest elements for double bias seeds; only applicable if the EDGE_SEEDING_METHOD
is BIASED and BIAS_METHOD is DOUBLE. Possible values are:
-
SMALLEST_ELEM_AT_CENTER
-
SMALLEST_ELEM_AT_ENDS
-
NONE
•
If attribute=CONSTRAINT, the return value is a SymbolicConstant specifying how close the seeds must
be matched by the mesh. Possible values are:
-
FREE
-
FINER
-
FIXED
-
NONE
A value of NONE indicates that the edge is not seeded.
Optional arguments
None.
Return value
The return value is a Float, an Int, or a SymbolicConstant depending on the value of the attribute argument.
Exceptions
None.
getElementType(...)
This method returns the ElemType object of a given element shape assigned to a region of a part.
Required arguments
A Cell, a Face, or an Edge object specifying the region to be queried.
region
A SymbolicConstant specifying the shape of the element for which to return the element
type. Possible values are:
elemShape
•
LINE
•
QUAD
•
TRI
Abaqus Scripting Reference Guide
1564
Part object

•
HEX
•
WEDGE
•
TET
Optional arguments
None.
Return value
ElemType object.
Exceptions
The region cannot be associated with element types or the elemShape is not consistent
with the dimension of the region.
TypeError
getIncompatibleMeshInterfaces(...)
This method returns a sequence of face objects that are meshed with incompatible elements.
Required arguments
None.
Optional arguments
A sequence of cell objects which will be used to search the incompatible faces.
cells
Return value
A sequence of Face objects.
Exceptions
None.
getMeshControl(...)
This method returns a mesh control parameter for the speciﬁed region of a part.
Required arguments
A Cell, a Face, or an Edge object specifying the region to be queried.
region
A SymbolicConstant specifying the mesh control attribute to return. Possible values are:
attribute
•
ELEM_SHAPE
•
TECHNIQUE
1565
Abaqus Scripting Reference Guide
Part object

•
ALGORITHM
•
MIN_TRANSITION
The return value depends on the value of the attribute argument.
•
If attribute=ELEM_SHAPE, the return value is a SymbolicConstant specifying the element shape used
during meshing. Possible values are:
-
LINE
-
QUAD
-
TRI
-
QUAD_DOMINATED
-
HEX
-
TET
-
WEDGE
-
HEX_DOMINATED
•
If attribute=TECHNIQUE, the return value is a SymbolicConstant specifying the meshing technique
to be used during meshing. Possible values are:
-
FREE
-
STRUCTURED
-
SWEEP
-
UNMESHABLE
Where UNMESHABLE indicates that no meshing technique is applicable with the currently assigned
element shape.
•
If attribute=ALGORITHM, the return value is a SymbolicConstant specifying the meshing algorithm
to be used during meshing. Possible values are:
-
MEDIAL_AXIS
-
ADVANCING_FRONT
-
DEFAULT
-
NON_DEFAULT
-
NONE
Where NONE indicates that no algorithm is applicable.
•
If attribute=MIN_TRANSITION, the return value is a Boolean indicating whether minimum transition
will be used during meshing. This option is applicable only to the following:
-
Free quadrilateral meshing or sweep hexahedral meshing with algorithm=MEDIAL_AXIS.
-
Structured quadrilateral meshing.
Optional arguments
None.
Abaqus Scripting Reference Guide
1566
Part object

Return value
The return value is a SymbolicConstant or a Boolean depending on the value of the attribute argument.
Exceptions
The region cannot carry mesh controls.
TypeError
getMeshStats(...)
This method returns the mesh statistics for the given regions.
Required arguments
A sequence or tuple of Geometry regions for which mesh statistics should be returned.
regions
Optional arguments
None.
Return value
A MeshStats object.
Exceptions
None.
getPartSeeds(...)
This method returns a part seed parameter for the part.
Required arguments
A SymbolicConstant specifying the type of part seed attribute to return. Possible values are:
attribute
•
SIZE
•
DEFAULT_SIZE
•
DEVIATION_FACTOR
•
MIN_SIZE_FACTOR
The return value depends on the value of the attribute argument.
•
If attribute=SIZE, the return value is a Float specifying the assigned global element size. If part seeds
are not deﬁned, the return value is zero.
•
If attribute=DEFAULT_SIZE, the return value is a Float specifying a suggested default global element
size based upon the part geometry.
•
If attribute=DEVIATION_FACTOR, the return value is a Float specifying the deviation factor 
,
where  is the chordal deviation and  is the element length. If part seeds are not deﬁned, the return
value is zero.
1567
Abaqus Scripting Reference Guide
Part object

•
If attribute=MIN_SIZE_FACTOR, the return value is a Float specifying the size of the smallest allowable
element as a fraction of the speciﬁed global element size. If part seeds are not deﬁned, the return value
is zero.
Optional arguments
None.
Return value
The return value is a Float that depends on the value of the attribute argument.
Exceptions
Error: Part does not contain native geometry
An exception occurs if the part does not contain native
geometry.
getUnmeshedRegions()
This method returns all geometric regions in the part that require a mesh for submitting an analysis but are either
unmeshed or are meshed incompletely.
Arguments
None.
Return value
A Region object, or None.
Exceptions
None.
ignoreEntity(...)
This method creates a virtual topology feature. Virtual topology allows unimportant entities to be ignored during mesh
generation. You can combine two adjacent faces by specifying a common edge to ignore. Similarly, you can combine
two adjacent edges by specifying a common vertex to ignore.
Required arguments
A sequence of vertices and edges specifying the entities to be ignored during meshing.
entities
Optional arguments
None.
Return value
A Feature object.
Abaqus Scripting Reference Guide
1568
Part object

Exceptions
None.
restoreIgnoredEntity(...)
This method restores vertices and edges that have been merged using a virtual topology feature.
Required arguments
A sequence of IgnoredVertex objects and IgnoredEdge objects specifying the entities to be
restored.
entities
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
seedEdgeByBias(...)
This method seeds the given edges nonuniformly using the speciﬁed number of elements and bias ratio or the speciﬁed
minimum and maximum element sizes.
Required arguments
A SymbolicConstant specifying whether single- or double-biased seed distribution will be
applied. If unspeciﬁed, single-biased seed distribution will be applied. Possible values are:
biasMethod
•
SINGLE: Single-biased seed distribution will be applied.
•
DOUBLE: Double-biased seed distribution will be applied.
A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near the end where the normalized curve parameter=0.0. You must provide either the end1Edges
end1Edges
or the end2Edges argument or both when biasMethod=SINGLE and omit both of them when
biasMethod=DOUBLE.
Note:
You can determine which end is which by the order of the vertex indices returned by
getVertices().
A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near the end where the normalized curve parameter=1.0.
end2Edges
1569
Abaqus Scripting Reference Guide
Part object

A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near edge center. You must provide either the centerEdges or the endEdges argument or both
when biasMethod=DOUBLE and omit both of them when biasMethod=SINGLE.
centerEdges
A sequence of Edge objects specifying the edges to seed. The smallest elements will be positioned
near edge ends.
endEdges
A Float specifying the ratio of the largest element to the smallest element. Possible values are
1.0 ratio  106.
ratio
An Int specifying the number of elements along each edge. Possible values are 1 number
104.
number
A Float specifying the desired smallest element size.
minSize
A Float specifying the desired largest element size.
maxSize
Note:
You must specify either the ratio and number or minSize and maxSize pair of arguments.
Optional arguments
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The default
value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
•
FIXED: The seeds must be exactly matched by the mesh (only with respect to the number of
elements, not to the nodal positioning).
Return value
None.
Exceptions
None.
seedEdgeByNumber(...)
This method seeds the given edges uniformly based on the number of elements along the edges.
Required arguments
A sequence of Edge objects specifying the edges to seed.
edges
Abaqus Scripting Reference Guide
1570
Part object

An Int specifying the number of elements along each edge. Possible values are 1 number
104.
number
Optional arguments
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The default
value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
•
FIXED: The seeds must be exactly matched by the mesh (only with respect to the number of
elements, not to the nodal positioning).
Return value
None.
Exceptions
None.
seedEdgeBySize(...)
This method seeds the given edges either uniformly or following edge curvature distribution, based on the desired
element size.
Required arguments
A sequence of Edge objects specifying the edges to seed.
edges
A Float specifying the desired element size.
size
Optional arguments
A Float specifying the deviation factor 
, where  is the chordal deviation and  is the
element length.
deviationFactor
A Float specifying the size of the smallest allowable element as a fraction of the speciﬁed
global element size.
minSizeFactor
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The
default value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible
values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
•
FIXED: The seeds must be exactly matched by the mesh (only with respect to the number
of elements, not to the nodal positioning).
1571
Abaqus Scripting Reference Guide
Part object

Return value
None.
Exceptions
None.
seedPart(...)
This method assigns global edge seeds to the given parts.
Required arguments
A Float specifying the desired global element size for the edges.
size
Optional arguments
A Float specifying the deviation factor 
, where  is the chordal deviation and  is the
element length.
deviationFactor
A Float specifying the size of the smallest allowable element as a fraction of the speciﬁed
global element size.
minSizeFactor
A SymbolicConstant specifying how closely the seeds must be matched by the mesh. The
default value is FREE. If unspeciﬁed, the existing constraint will remain unchanged. Possible
values are:
constraint
•
FREE: The resulting mesh can be ﬁner or coarser than the speciﬁed seeds.
•
FINER: The resulting mesh can be ﬁner than the speciﬁed seeds.
Return value
None.
Exceptions
None.
setBoundaryLayerControls(...)
This method sets the control parameters for boundary layer mesh for the speciﬁed regions.
Required arguments
A sequence of Cell objects specifying the regions for which to set the boundary layer
mesh control parameters.
regions
A Float specifying the height of the ﬁrst element layer off boundary. Possible values are
0.0 ﬁrstElemSize  106.
ﬁrstElemSize
Abaqus Scripting Reference Guide
1572
Part object

A Float specifying the ratio of heights of any two consecutive element layers. Possible
values are 1.0 growthFactor  10.0.
growthFactor
An Int specifying the number of element layers to be generated. Possible values are 1
numLayers  104.
numLayers
Optional arguments
A sequence of Face objects specifying the faces where boundary layer should not be
generated. By default, boundary layer mesh will be generated on all faces of the selected
regions.
inactiveFaces
A String specifying a unique name for a set that will contain boundary layer elements.
setName
Return value
None.
Exceptions
None.
setElementType(...)
This method assigns element types to the speciﬁed regions.
Required arguments
A sequence of Geometry regions or MeshElement objects, or a Set object containing either geometry
regions or elements, specifying the regions to which element types are to be assigned.
regions
A sequence of ElemType objects, one for each element shape applicable to the regions.
elemTypes
Note:
If an ElemType object has an UNKNOWN_xxx value for elemCode, its order will be deduced
from the order of other valid ElemType objects within the same setElementType
command. If no valid ElemType objects can be found, the order will remain unchanged.
Optional arguments
None.
Return value
None.
Exceptions
As a result of the element assignment, a region must have the same library, family, and order for all its assigned element
types. Otherwise, an exception will be thrown.
1573
Abaqus Scripting Reference Guide
Part object

For example, suppose the Hex, Wedge, and Tet elements previously assigned to a cell are all linear. The user now
constructs an ElemType object with a quadratic Hex element and includes only this object in the setElementType
command. An exception will be thrown because the Wedge and Tet elements will remain linear (i.e., As Is) and become
incompatible with the newly assigned quadratic Hex element.
setLogicalCorners(...)
This method sets the logical corners for a mappable face region.
Required arguments
A Face region.
region
Three, four, or ﬁve Vertex objects deﬁning the logical corners for a given mappable
face region.
corners
Optional arguments
None.
Return value
None.
Exceptions
None.
setMeshControls(...)
This method sets the mesh control parameters for the speciﬁed regions.
Required arguments
A sequence of Face or Cell regions specifying the regions for which to set the mesh control
parameters.
regions
Optional arguments
A SymbolicConstant specifying the element shape to be used for meshing. The default value is QUAD
for Face regions and HEX for Cell regions. If unspeciﬁed, the existing element shape will remain
unchanged. Possible values are:
elemShape
•
QUAD: Quadrilateral mesh.
•
QUAD_DOMINATED: Quadrilateral-dominated mesh.
•
TRI: Triangular mesh.
•
HEX: Hexahedral mesh.
•
HEX_DOMINATED: Hex-dominated mesh.
•
TET: Tetrahedral mesh.
•
WEDGE: Wedge mesh.
Abaqus Scripting Reference Guide
1574
Part object

A SymbolicConstant specifying the mesh technique to be used. The default value is FREE for Face
regions. For Cell regions the initial value depends on the geometry of the regions and can be
technique
STRUCTURED, SWEEP, or “unmeshable.” If unspeciﬁed, the existing mesh technique(s) will remain
unchanged. Possible values are:
•
FREE: Free mesh technique.
•
STRUCTURED: Structured mesh technique.
•
SWEEP: Sweep mesh technique.
•
BOTTOM_UP: Bottom-up mesh technique. Only applicable for cell regions.
•
SYSTEM_ASSIGN: Allow the system to assign a suitable technique. The actual technique assigned
can be STRUCTURED, SWEEP, or “unmeshable.”
A SymbolicConstant specifying the algorithm used to generate the mesh for the speciﬁed regions.
Possible values are MEDIAL_AXIS, ADVANCING_FRONT, and NON_DEFAULT. If unspeciﬁed,
the existing value will remain unchanged. This option is applicable only to the following:
algorithm
•
Free quadrilateral or quadrilateral-dominated meshing. In this case the possible values are
MEDIAL_AXIS and ADVANCING_FRONT.
•
Sweep hexahedral or hexahedral-dominated meshing. In this case the possible values are
MEDIAL_AXIS and ADVANCING_FRONT.
•
Free tetrahedral meshing. In this case the only possible value is NON_DEFAULT, and it indicates
that the free tetrahedral-meshing technique available in Abaqus 6.4 or earlier will be used. If
algorithm is not speciﬁed, the default tetrahedral-meshing technique will be used.
A Boolean specifying whether minimum transition is to be applied. The default value is ON. If
unspeciﬁed, the existing value will remain unchanged. This option is applicable only in the following
cases:
minTransition
•
Free quadrilateral meshing or hexahedral sweep meshing with algorithm=MEDIAL_AXIS.
•
Structured quadrilateral meshing.
A SymbolicConstant specifying element size growth to be applied when generating the interior of a
tetrahedral mesh. Possible values are MODERATE and MAXIMUM. If unspeciﬁed, the existing
value will remain unchanged. This option only applies to the default tetrahedral mesher.
sizeGrowth
A Boolean specifying whether mapped meshing can be used to replace the selected mesh technique.
The allowMapped argument is applicable only in the following cases:
allowMapped
•
Free triangular meshing.
•
Free quadrilateral or quadrilateral-dominated meshing with algorithm=ADVANCING_FRONT.
•
Hexahedral or hexahedral-dominated sweep meshing with algorithm=ADVANCING_FRONT.
•
Free tetrahedral meshing. allowMapped=True implies that mapped triangular meshing can be used
on faces that bound three-dimensional regions.
Return value
None.
1575
Abaqus Scripting Reference Guide
Part object

Exceptions
None.
setSweepPath(...)
This method sets the sweep path for a sweepable region or the revolve path for a revolvable region.
Required arguments
A sweepable region.
region
An Edge object specifying the sweep or revolve path.
edge
A SymbolicConstant specifying the sweep sense. The sense will affect only how gasket elements
will be created; it will have no effect if gasket elements are not used. Possible values are
FORWARD or REVERSE.
sense
If sense=FORWARD, the sense of the given edge's underlying curve will be used.
Optional arguments
None.
Return value
None.
Exceptions
None.
verifyMeshQuality(...)
This method tests the mesh quality of a part and returns poor-quality elements.
Required arguments
A SymbolicConstant specifying the criterion used for the quality check. Possible values are:
criterion
ANALYSIS_CHECKS
When this criterion is speciﬁed Abaqus/CAE will invoke the element quality checks included with
the input ﬁle processor for Abaqus/Standard and Abaqus/Explicit.
ANGULAR_DEVIATION
The maximum amount (in degrees) that an element's face corner angles deviate from the ideal angle.
The ideal angle is 90° for quadrilateral element faces and 60° for triangular element faces. Elements
with an angular deviation larger than the speciﬁed threshold will fail this test.
Abaqus Scripting Reference Guide
1576
Part object

ASPECT_RATIO
The ratio between the lengths of the longest and shortest edges of an element. Elements with an aspect
ratio larger than the speciﬁed threshold will fail this test.
GEOM_DEVIATION_FACTOR
The largest geometric deviation factor evaluated along any of the element edges associated with
geometric edges or faces. The geometric deviation factor along an element edge is calculated by
dividing the maximum gap between the element edge and its associated geometry by the length of the
element edge. Elements with a geometric deviation factor larger than the speciﬁed threshold will fail
this test.
LARGE_ANGLE
The largest corner angle on any of an element's faces. Elements with face angles larger than the
speciﬁed threshold (in degrees) will fail this test.
LONGEST_EDGE
The length of an element's longest edge. Elements with an edge longer than the speciﬁed threshold
will fail this test.
MAX_FREQUENCY
An estimate of an element's contribution to the initial maximum allowable frequency for
Abaqus/Standard analyses. This calculation requires appropriate section assignments and material
deﬁnitions. Elements whose maximum allowable frequency is smaller than the given value will fail
this test.
SHAPE_FACTOR
The shape factor for triangular and tetrahedral elements. This is the ratio between the element area or
volume and the optimal element area or volume. Elements with a shape factor smaller than the speciﬁed
threshold will fail this test.
SHORTEST_EDGE
The length of an element's shortest edge. Elements with an edge shorter than the speciﬁed threshold
will fail this test.
SMALL_ANGLE
The smallest corner angle on any of an element's faces. Elements with face angles smaller than the
given value (in degrees) will fail this test.
STABLE_TIME_INCREMENT
An estimate of an element's contribution to the initial maximum stable time increment for
Abaqus/Explicit analyses. This calculation requires appropriate section assignments and material
deﬁnitions. Elements that require a time increment smaller than the given value will fail this test.
1577
Abaqus Scripting Reference Guide
Part object

Optional arguments
A Float value used to determine low quality elements according to the speciﬁed criterion. This
argument is ignored when the ANALYSIS_CHECKS criterion is used. For other criterion, if
this argument is unspeciﬁed then no list of failed elements will be returned.
threshold
A SymbolicConstant specifying an element shape for limiting the query. Possible values are
LINE, QUAD, TRI, HEX, WEDGE, and TET.
elemShape
A sequence of Region or MeshElement objects. If you do not specify the regions argument,
the entire part mesh is considered.
regions
Return value
A Dictionary object containing values for some number of the following keys: failedElements, warningElements,
naElements (sequences of MeshElement objects); numElements (Int); average, worst (Float); worstElement (MeshElement
object)
Exceptions
None.
Abaqus Scripting Reference Guide
1578
Part object

ElemType object
The ElemType object is an argument object used as an argument in the setElementType command.
Access
import mesh
ElemType(...)
This method creates an ElemType object.
Path
ElemType
Required arguments
A SymbolicConstant specifying the Abaqus element code or just the element shape. Possible values are:
elemCode
•
C3D8R, specifying a 8-node linear brick, reduced integration with hourglass control.
•
CODE, specifying add more codes.
•
UNKNOWN_TRI, specifying an unknown element type associated with a triangular shape.
•
UNKNOWN_QUAD, specifying an unknown element type associated with a quadrilateral shape.
•
UNKNOWN_HEX, specifying an unknown element type associated with a hexahedral shape.
•
UNKNOWN_WEDGE, specifying an unknown element type associated with a wedge shape.
•
UNKNOWN_TET, specifying an unknown element type associated with a tetrahedral shape.
Optional arguments
A SymbolicConstant specifying the Abaqus element library to use. Possible
values are STANDARD and EXPLICIT. The default value is STANDARD.
elemLibrary
A Float specifying the hourglass stiffness. (For shell elements this is the
membrane hourglass stiffness.) A value of zero indicates the default value should
hourglassStiffness
be used. The default value will be used where appropriate. The default value is
0.0.
This argument is applicable only to some Abaqus/Standard elements.
A Float specifying the bending hourglass stiffness. A value of zero indicates the
default value should be used. The default value will be used where appropriate.
The default value is 0.0.
bendingHourglass
This argument is applicable only to some Abaqus/Standard elements.
A Float specifying the drilling hourglass scaling factor. A value of zero indicates
the default value should be used. The default value will be used where
appropriate. The default value is 0.0.
drillingHourglass
1579
ElemType object

This argument is applicable only to some Abaqus/Standard elements.
A SymbolicConstant specifying the kinematic split control. Possible values are
AVERAGE_STRAIN, ORTHOGONAL, and CENTROID. The default value
is AVERAGE_STRAIN.
kinematicSplit
This argument is applicable only to some Abaqus/Explicit elements.
A Boolean specifying whether to prevent negative element volumes or other
excessive distortions in crushable materials. The default value is OFF.
distortionControl
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying the length ratio for distortion control in crushable materials.
Possible values are 0.0 lengthRatio  1.0. The default value is lengthRatio=
lengthRatio
This argument is applicable only when distortionControl is ON.
A Boolean specifying the second-order accuracy option. The default value is
OFF.
secondOrderAccuracy
This argument is applicable only to some Abaqus/Explicit elements.
A SymbolicConstant specifying the hourglass control. Possible values are
RELAX_STIFFNESS, STIFFNESS, VISCOUS, ENHANCED, and COMBINED.
The default value is ENHANCED.
hourglassControl
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying a weight factor when hourglassControl=COMBINED. The
default value is 0.5.
weightFactor
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying the displacement hourglass scaling factor. The default value
will be used where appropriate. The default value is 1.0.
displacementHourglass
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying the rotational hourglass scaling factor. The default value will
be used where appropriate. The default value is 1.0.
rotationalHourglass
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying the out-of-plane displacement hourglass scaling factor. The
default value will be used where appropriate. The default value is 1.0.
outOfPlaneDisplacementHourglass
This argument is applicable only to some Abaqus/Explicit elements.
A SymbolicConstant specifying the element deletion option. Possible values are
DEFAULT, ON, and OFF. The default value is DEFAULT.
elemDeletion
A SymbolicConstant specifying the particle conversion option for smoothed
particle hydrodynamics. When not OFF or DEFAULT this argument refers to
particleConversion
the criterion used for conversion of elements to particles. Possible values are
Abaqus Scripting Reference Guide
1580
ElemType object

DEFAULT, OFF, TIME, STRAIN, and STRESS. The default value is
DEFAULT.
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying the threshold value for the particle conversion criterion
speciﬁed by particleConversion. The default value is 0.0.
particleConversionThreshold
This argument is applicable only to some Abaqus/Explicit elements.
An Int specifying the number of particles per direction for element conversion
when particleConversion is speciﬁed. The default value is 1.
particleConversionPPD
This argument is applicable only to some Abaqus/Explicit elements.
A SymbolicConstant specifying the interpolation function for particle conversion
when particleConversion is speciﬁed. Possible values are CUBIC, QUADRATIC,
and QUINTIC. The default value is CUBIC.
particleConversionKernel
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying the maximum degradation option for damage control. The
default value is −1.0.
maxDegradation
A Float specifying the viscosity option. The default value is 0.0.
viscosity
This argument is applicable only to some Abaqus/Standard elements.
A Float specifying the linear bulk viscosity scaling factor option for
Abaqus/Explicit. The default value is 1.0.
linearBulkViscosity
A Float specifying the quadratic bulk viscosity scaling factor option for
Abaqus/Explicit. The default value is 1.0.
quadraticBulkViscosity
An Int specifying the number of Fourier modes. Possible values are 1, 2, 3, and
4. The default value is 1.
numFourierModes
This argument is applicable only for axisymmetric elements with nonlinear
asymmetric deformation.
An Int specifying the positive offset number for specifying the additional nodes
needed in the connectivity.
nodeOffset
This argument is applicable only for axisymmetric elements with nonlinear
asymmetric deformation.
A Float specifying the linear kinematic conversion value.
linearKinematicCtrl
This argument is applicable only to some Abaqus/Explicit elements.
A Float specifying the initial gap opening.
initialGapOpening
This parameter is applicable only to some Abaqus/Standard elements.
1581
Abaqus Scripting Reference Guide
ElemType object

Return value
An ElemType object.
Exceptions
None.
Members
The ElemType object has members with the same names and descriptions as the arguments to the ElemType method.
Abaqus Scripting Reference Guide
1582
ElemType object

MeshEdge object
The MeshEdge object refers to an element edge. It has no constructor or members. A MeshEdge object can be accessed
via a MeshEdgeArray or a repository on a part or part instance.
Access
import part
mdb.models[name].parts[name].elemEdges[i]
mdb.models[name].parts[name].elementEdges[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].elemEdges[i]
mdb.models[name].rootAssembly.allInstances[name].elementEdges[i]
mdb.models[name].rootAssembly.instances[name].elemEdges[i]
mdb.models[name].rootAssembly.instances[name].elementEdges[i]
getElements()
This method returns a tuple of elements that share the element edge.
Arguments
None.
Return value
A tuple of MeshElement objects.
Exceptions
None.
getElementsViaTopology()
This method returns an array of MeshElement objects that are obtained by recursively ﬁnding adjacent elements via
topology.
Optional arguments
A MeshElementArray object specifying the domain to include in the search. By default, all
elements in the mesh are included.
domain
Return value
A MeshElementArray object, which is a sequence of MeshElement objects.
Exceptions
None.
1583
MeshEdge object

getNodesViaTopology()
This method returns an array of MeshNode objects that lie along element edges topologically in line with the element
edge.
Optional arguments
A MeshElementArray object specifying the domain to include in the search. By default, all
elements in the mesh are included.
domain
Return value
A MeshNodeArray object, which is a sequence of MeshNode objects.
Exceptions
None.
getElemFaces()
This method returns a tuple of unique MeshFace objects that share the element edge.
Arguments
None.
Return value
A tuple of MeshFace objects.
Exceptions
None.
getNodes()
This method returns a tuple of nodes on the element edge.
Arguments
None.
Return value
A tuple of MeshNode objects.
Exceptions
None.
Members
The MeshEdge object has no members.
Abaqus Scripting Reference Guide
1584
MeshEdge object

MeshEdgeArray object
The MeshEdgeArray is a sequence of MeshEdge objects.
Access
import part
mdb.models[name].parts[name].elementEdges
import assembly
mdb.models[name].rootAssembly.allInstances[name].elementEdges
mdb.models[name].rootAssembly.instances[name].elementEdges
MeshEdgeArray(...)
This method creates a MeshEdgeArray object.
Path
mesh.MeshEdgeArray
Required arguments
A list of MeshEdge objects.
elemEdges
Optional arguments
None.
Return value
A MeshEdgeArray object.
Exceptions
None.
getSequenceFromMask(...)
This method returns the objects in the MeshEdgeArray identiﬁed using the speciﬁed mask. When large number of
objects are involved, this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
A MeshEdgeArray object.
1585
MeshEdgeArray object

Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
Members
The MeshEdgeArray object has no members.
Abaqus Scripting Reference Guide
1586
MeshEdgeArray object

MeshElement object
The MeshElement object refers to an element of a native mesh or an orphan mesh. A MeshElement object can be
accessed via a part or part instance using an index that refers to the internal numbering of the element repository. The
index does not refer to the element label.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].elements[i]
mdb.models[name].parts[name].allInternalSurfaces[name].elements[i]
mdb.models[name].parts[name].allSets[name].elements[i]
mdb.models[name].parts[name].allSurfaces[name].elements[i]
mdb.models[name].parts[name].elements[i]
mdb.models[name].parts[name].sets[name].elements[i]
mdb.models[name].parts[name].surfaces[name].elements[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].elements[i]
mdb.models[name].rootAssembly.allInstances[name].sets[name].elements[i]
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].elements[i]
mdb.models[name].rootAssembly.allInternalSets[name].elements[i]
mdb.models[name].rootAssembly.allInternalSurfaces[name].elements[i]
mdb.models[name].rootAssembly.allSets[name].elements[i]
mdb.models[name].rootAssembly.allSurfaces[name].elements[i]
mdb.models[name].rootAssembly.elements[i]
mdb.models[name].rootAssembly.instances[name].elements[i]
mdb.models[name].rootAssembly.instances[name].sets[name].elements[i]
mdb.models[name].rootAssembly.instances[name].surfaces[name]\
.elements[i]
mdb.models[name].rootAssembly.modelInstances[i].elements[i]
mdb.models[name].rootAssembly.modelInstances[i].sets[name].elements[i]
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name]\
.elements[i]
mdb.models[name].rootAssembly.sets[name].elements[i]
mdb.models[name].rootAssembly.surfaces[name].elements[i]
Element(...)
This method creates an element on an orphan mesh part from a sequence of nodes.
Path
mdb.models[name].parts[name].Element
Required arguments
A sequence of MeshNode objects.
nodes
A SymbolicConstant specifying the shape of the new element. Possible values are LINE2,
LINE3, TRI3, TRI6, QUAD4, QUAD8, TET4, TET10, WEDGE6, WEDGE15, HEX8, and
HEX20.
elemShape
1587
MeshElement object

Optional arguments
An Int specifying the element label.
label
Return value
A MeshElement object.
Exceptions
None.
getNodes()
This method returns a tuple of node objects of the element.
Arguments
None.
Return value
A tuple of MeshNode objects.
Exceptions
None.
getElemEdges()
This method returns a tuple of unique element edge objects on the element.
Arguments
None.
Return value
A tuple of MeshEdge objects.
Exceptions
None.
getElemFaces()
This method returns a tuple of unique element face objects on the element.
Arguments
None.
Return value
A tuple of MeshFace objects.
Abaqus Scripting Reference Guide
1588
MeshElement object

Exceptions
None.
getAdjacentElements()
This method returns an array of element objects adjacent to the mesh element.
Arguments
None.
Return value
A MeshElementArray object which is a sequence of MeshElement objects.
Exceptions
None.
getElementsByFeatureEdge(...)
This method returns an array of mesh element objects that are obtained by recursively ﬁnding adjacent elements along
a feature edge with a face angle of less than or equal to the speciﬁed angle.
Required arguments
A ﬂoat specifying the value of the face angle in degrees.
angle
Optional arguments
None.
Return value
A MeshElementArray object, which is a sequence of MeshElement objects.
Exceptions
None.
setValues(...)
This method modiﬁes the MeshElement object.
Required arguments
None.
1589
Abaqus Scripting Reference Guide
MeshElement object

Optional arguments
An Int specifying the element label. This member may only be edited if the element belongs to an
orphan mesh part. The speciﬁed label must be non-negative and must not be in use by any other
element of the same part.
label
Return value
None.
Exceptions
None.
Members
The MeshElement object has the following members:
An Int specifying the element label.
label
A SymbolicConstant specifying the Abaqus element code.
type
A String specifying the name of the part instance that owns this element.
instanceName
A tuple of Ints specifying the internal node indices that deﬁne the nodal connectivity. It
is important to note the difference with OdbMeshElement object of ODB where the
connectivity is node labels instead of node indices.
connectivity
Abaqus Scripting Reference Guide
1590
MeshElement object

MeshElementArray object
The MeshElementArray is a sequence of MeshElement objects.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].elements
mdb.models[name].parts[name].allInternalSurfaces[name].elements
mdb.models[name].parts[name].allSets[name].elements
mdb.models[name].parts[name].allSurfaces[name].elements
mdb.models[name].parts[name].elements
mdb.models[name].parts[name].sets[name].elements
mdb.models[name].parts[name].surfaces[name].elements
import assembly
mdb.models[name].rootAssembly.allInstances[name].elements
mdb.models[name].rootAssembly.allInstances[name].sets[name].elements
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].elements
mdb.models[name].rootAssembly.allInternalSets[name].elements
mdb.models[name].rootAssembly.allInternalSurfaces[name].elements
mdb.models[name].rootAssembly.allSets[name].elements
mdb.models[name].rootAssembly.allSurfaces[name].elements
mdb.models[name].rootAssembly.elements
mdb.models[name].rootAssembly.instances[name].elements
mdb.models[name].rootAssembly.instances[name].sets[name].elements
mdb.models[name].rootAssembly.instances[name].surfaces[name].elements
mdb.models[name].rootAssembly.modelInstances[i].elements
mdb.models[name].rootAssembly.modelInstances[i].sets[name].elements
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name]\
.elements
mdb.models[name].rootAssembly.sets[name].elements
mdb.models[name].rootAssembly.surfaces[name].elements
MeshElementArray(...)
This method creates a MeshElementArray object.
Path
mesh.MeshElementArray
Required arguments
A list of MeshElement objects.
elements
Optional arguments
None.
Return value
A MeshElementArray object.
1591
MeshElementArray object

Exceptions
None.
getFromLabel(...)
This method returns the object in the MeshElementArray with the given label.
Required arguments
An Int specifying the label of the object.
label
Optional arguments
None.
Return value
A MeshElement object.
Exceptions
None.
getSequenceFromMask(...)
This method returns the objects in the MeshElementArray identiﬁed using the speciﬁed mask. This command is
generated when the JournalOptions are set to COMPRESSEDINDEX. When a large number of objects are involved,
this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
A MeshElementArray object.
Exceptions
None.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Abaqus Scripting Reference Guide
1592
MeshElementArray object

Return value
A String specifying the object or objects.
Exceptions
None.
getExteriorEdges()
This method returns the exterior element edges for 2D/shell elements in the MeshElementArray. These are edges
referenced by exactly one element in the sequence. Nothing is returned if the sequence contains no topologically
2D/shell elements.
Arguments
None.
Return value
A MeshEdgeArray object specifying the element edges on the exterior.
Exceptions
None.
getExteriorFaces()
This method returns the exterior element faces for solid elements in the MeshElementArray. These are faces referenced
by exactly one element in the sequence. Nothing is returned if the sequence contains no topologically solid elements.
Arguments
None.
Return value
A MeshFaceArray object specifying the element faces on the exterior.
Exceptions
None.
getByBoundingBox(...)
This method returns an array of element objects that lie within the speciﬁed bounding box.
Required arguments
None.
Optional arguments
A ﬂoat specifying the minimum X boundary of the bounding box.
xMin
1593
Abaqus Scripting Reference Guide
MeshElementArray object

A ﬂoat specifying the minimum Y boundary of the bounding box.
yMin
A ﬂoat specifying the minimum Z boundary of the bounding box.
zMin
A ﬂoat specifying the maximum X boundary of the bounding box.
xMax
A ﬂoat specifying the maximum Y boundary of the bounding box.
yMax
A ﬂoat specifying the maximum Z boundary of the bounding box.
zMax
Return value
A MeshElementArray object, which is a sequence of MeshElement objects.
Exceptions
None.
getByBoundingCylinder(...)
This method returns an array of element objects that lie within the speciﬁed bounding cylinder.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the ﬁrst end of the cylinder.
center1
A tuple of the X-, Y-, and Z-coordinates of the center of the second end of the cylinder.
center2
A ﬂoat specifying the radius of the cylinder.
radius
Optional arguments
None.
Return value
A MeshElementArray object, which is a sequence of MeshElement objects.
Exceptions
None.
getByBoundingSphere(...)
This method returns an array of element objects that lie within the speciﬁed bounding sphere.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the sphere.
center
Abaqus Scripting Reference Guide
1594
MeshElementArray object

A ﬂoat specifying the radius of the sphere.
radius
Optional arguments
None.
Return value
A MeshElementArray object, which is a sequence of MeshElement objects.
Exceptions
None.
getBoundingBox()
This method returns a dictionary of two tuples representing minimum and maximum boundary values of the bounding
box of the minimum size containing the element sequence.
Arguments
None.
Return value
A Dictionary object with the following items:
low: a tuple of three ﬂoats representing the minimum x, y, and z boundary values of the bounding box.
high: a tuple of three ﬂoats representing the maximum x, y, and z boundary values of the bounding box.
Exceptions
None.
getMemberFromAll(...)
This method returns a tuple containing a member or members for each MeshElement in the MeshElementArray.
Required arguments
A String specifying a MeshElement member name, or a tuple of member names.
member
Optional arguments
None.
Return value
A tuple of member values, one for each MeshElement, or a tuple of tuples of member values, if you speciﬁed a tuple
of member names in the member argument.
1595
Abaqus Scripting Reference Guide
MeshElementArray object

Exceptions
AttributeError: 'MeshElement' object has no attribute ''
An exception occurs if no such member exists.
sequenceFromLabels(...)
This method returns the objects in the MeshElementArray identiﬁed using the speciﬁed labels.
Required arguments
A sequence of Ints specifying the labels.
labels
Optional arguments
None.
Return value
A MeshElementArray object.
Exceptions
Error: The mask results in an empty sequence
An exception occurs if the resulting sequence is empty.
Members
The MeshElementArray object has no members.
Abaqus Scripting Reference Guide
1596
MeshElementArray object

MesherOptions object
The MesherOptions object controls the default settings that Abaqus uses for all meshing methods. The MesherOptions
object has no constructor. Abaqus creates the MesherOptions member when a session is started.
MesherOptions commands are intended for use at the beginning of scripts and in the abaqus_v6.env ﬁle only; they
should not be used during an Abaqus/CAE session.
Access
session.defaultMesherOptions
setValues(...)
This method modiﬁes the MesherOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the default element shape for meshing two-dimensional objects.
Possible values are QUAD, QUAD_DOMINATED, and TRI. The default value is
QUAD_DOMINATED.
elemShape2D
A SymbolicConstant specifying the default element shape for meshing three-dimensional
objects. Possible values are HEX, HEX_DOMINATED, WEDGE, and TET. The default value
is HEX.
elemShape3D
A SymbolicConstant specifying the default algorithm for meshing an object with quad- or
quad-dominated elements. Possible values are ADVANCING_FRONT and MEDIAL_AXIS.
The default value is ADVANCING_FRONT.
quadAlgorithm
A Boolean specifying whether Abaqus/CAE should allow mapped meshing, where appropriate.
The default value is OFF.
allowMapped
A Boolean specifying whether Abaqus/CAE should attempt to minimize the mesh transition
when it moves from a coarse mesh to a ﬁne mesh. The default value is ON.
minTransition
A list of SymbolicConstants specifying preferred Abaqus element types. This setting is relevant
only when Abaqus/CAE is run interactively. When a part or part instance that has never been
guiPreferredElements
assigned an element type is meshed, this list is consulted. If an element type appropriate to
the geometry is found in the list, it is assigned to the geometry. Multiple element types
representing different shapes (for example, triangles and quadrilaterals) can be assigned in
combination, but only element types that are compatible with each other are used. When more
than one appropriate element type is found in the list, the ﬁrst element type encountered takes
precedence. This list is also consulted when populating the element type dialog; preferred
types are selected by default for a region not previously assigned any element types. The
default value is an empty list.
1597
MesherOptions object

Return value
None.
Exceptions
None.
Members
The MesherOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
1598
MesherOptions object

MeshFace object
The MeshFace object refers to an element face. It has no constructor or members. A MeshFace object can be accessed
via a MeshFaceArray or a repository on a part or part instance.
Access
import part
mdb.models[name].parts[name].elementFaces[i]
mdb.models[name].parts[name].elemFaces[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].elementFaces[i]
mdb.models[name].rootAssembly.allInstances[name].elemFaces[i]
mdb.models[name].rootAssembly.instances[name].elementFaces[i]
mdb.models[name].rootAssembly.instances[name].elemFaces[i]
getElemEdges()
This method returns a tuple of unique element edges on the element face.
Arguments
None.
Return value
A tuple of MeshEdge objects.
Exceptions
None.
getElements()
This method returns a tuple of elements that share the element face.
Arguments
None.
Return value
A tuple of MeshElement objects.
Exceptions
None.
getNodes()
This method returns a tuple of nodes on the element face.
1599
MeshFace object

Arguments
None.
Return value
A tuple of MeshNode objects.
Exceptions
None.
getNodesByFaceAngle(...)
This method returns an array of mesh node objects that are obtained by recursively ﬁnding adjacent element faces that
are at an angle of less than or equal to the speciﬁed angle.
Required arguments
A ﬂoat specifying the value of the face angle.
angle
Optional arguments
None.
Return value
A MeshNodeArray object, which is a sequence of MeshNode objects.
Exceptions
None.
getNormal(...)
This method returns the normal direction for the element face.
Required arguments
None.
Optional arguments
None.
Return value
A tuple of 3 ﬂoats representing the unit normal vector. If the element face is collapsed such that a normal cannot be
computed, a zero-length vector is returned.
Exceptions
None.
Abaqus Scripting Reference Guide
1600
MeshFace object

getElemFacesByFaceAngle(...)
This method returns an array of element face objects that are obtained by recursively ﬁnding adjacent element faces
that are at an angle of less than or equal to the speciﬁed angle.
Required arguments
A ﬂoat specifying the value of the face angle.
angle
Optional arguments
None.
Return value
A MeshFaceArray object, which is a sequence of MeshFace objects.
Exceptions
None.
getElemEdgesByFaceAngle(...)
This method returns an array of element edge objects that are obtained by recursively ﬁnding adjacent element edges
that are at an angle of less than or equal to the speciﬁed face angle.
Required arguments
A ﬂoat specifying the value of the face angle in degrees.
angle
Optional arguments
None.
Return value
A MeshEdgeArray object, which is a sequence of MeshEdge objects.
Exceptions
None.
getElementsByFaceAngle(...)
This method returns an array of mesh Element objects that are obtained by recursively ﬁnding adjacent element faces
that are at an angle of less than or equal to the speciﬁed angle.
Required arguments
A ﬂoat specifying the value of the face angle.
angle
1601
Abaqus Scripting Reference Guide
MeshFace object

Optional arguments
None.
Return value
A MeshElementArray object, which is a sequence of MeshElement objects.
Exceptions
None.
getElemFacesByLimitingAngle(...)
This method returns an array of element edge objects that are obtained by recursively ﬁnding adjacent element faces
that are at an angle of less than or equal to the speciﬁed face angle with the seed face.
Required arguments
A ﬂoat specifying the value of the face angle in degrees.
angle
Optional arguments
None.
Return value
A MeshFaceArray object, which is a sequence of MeshFace objects.
Exceptions
None.
getElementsViaTopology()
This method returns an array of mesh Element objects that are obtained by recursively ﬁnding adjacent elements via
topology.
Arguments
None.
Return value
A MeshElementArray object, which is a sequence of MeshElement objects.
Exceptions
None.
getElemFacesByLayer()
This method returns an array of element face objects, obtained by traversing shell elements or the exterior of a solid
mesh, and recursively ﬁnding adjacent element faces by layer.
Abaqus Scripting Reference Guide
1602
MeshFace object

Required arguments
A int specifying the value of the number of layers.
numLayers
Optional arguments
None.
Return value
A MeshFaceArray object, which is a sequence of MeshFace objects.
Exceptions
None.
Members
The MeshFace object has the following members:
An Int specifying the element label.
label
A symbolic constant specifying the side of the element.
face
1603
Abaqus Scripting Reference Guide
MeshFace object

MeshFaceArray object
The MeshFaceArray is a sequence of MeshFace objects.
Access
import part
mdb.models[name].parts[name].elementFaces
import assembly
mdb.models[name].rootAssembly.allInstances[name].elementFaces
mdb.models[name].rootAssembly.instances[name].elementFaces
MeshFaceArray(...)
This method creates a MeshFaceArray object.
Path
mesh.MeshFaceArray
Required arguments
A list of MeshFace objects.
elemFaces
Optional arguments
None.
Return value
A MeshFaceArray object.
Exceptions
None.
getSequenceFromMask(...)
This method returns the objects in the MeshFaceArray identiﬁed using the speciﬁed mask. When large number of
objects are involved, this method is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
A MeshFaceArray object.
Abaqus Scripting Reference Guide
1604
MeshFaceArray object

Exceptions
Error: The mask results in an empty sequence.
An exception occurs if the resulting sequence is empty.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
Return value
A String specifying the object or objects.
Exceptions
None.
getMemberFromAll(...)
This method returns a tuple containing a member or members for each MeshFace in the MeshFaceArray.
Required arguments
A String specifying a MeshFace member name or a tuple of member names.
member
Optional arguments
None.
Return value
A tuple of member values (one for each MeshFace) or a tuple of tuples of member values (if you speciﬁed a tuple of
member names in the member argument).
Exceptions
AttributeError: 'MeshFace' object has no attribute ''
An exception occurs if no such member exists.
Members
The MeshFaceArray object has no members.
1605
Abaqus Scripting Reference Guide
MeshFaceArray object

MeshNode object
The MeshNode object refers to a node of a native mesh or an orphan mesh. A MeshNode object can be accessed via
a part or part instance using an index that refers to the internal numbering of the node repository. The index does not
refer to the node label.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].nodes[i]
mdb.models[name].parts[name].allInternalSurfaces[name].nodes[i]
mdb.models[name].parts[name].allSets[name].nodes[i]
mdb.models[name].parts[name].allSurfaces[name].nodes[i]
mdb.models[name].parts[name].nodes[i]
mdb.models[name].parts[name].retainedNodes[i]
mdb.models[name].parts[name].sets[name].nodes[i]
mdb.models[name].parts[name].surfaces[name].nodes[i]
import assembly
mdb.models[name].rootAssembly.allInstances[name].nodes[i]
mdb.models[name].rootAssembly.allInstances[name].sets[name].nodes[i]
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].nodes[i]
mdb.models[name].rootAssembly.allInternalSets[name].nodes[i]
mdb.models[name].rootAssembly.allInternalSurfaces[name].nodes[i]
mdb.models[name].rootAssembly.allSets[name].nodes[i]
mdb.models[name].rootAssembly.allSurfaces[name].nodes[i]
mdb.models[name].rootAssembly.instances[name].nodes[i]
mdb.models[name].rootAssembly.instances[name].sets[name].nodes[i]
mdb.models[name].rootAssembly.instances[name].surfaces[name].nodes[i]
mdb.models[name].rootAssembly.modelInstances[i].nodes[i]
mdb.models[name].rootAssembly.modelInstances[i].sets[name].nodes[i]
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name]\
.nodes[i]
mdb.models[name].rootAssembly.nodes[i]
mdb.models[name].rootAssembly.sets[name].nodes[i]
mdb.models[name].rootAssembly.surfaces[name].nodes[i]
Node(...)
This method creates a node on an orphan mesh part.
Path
mdb.models[name].parts[name].Node
Required arguments
A sequence of three Floats specifying the coordinates of the new node.
coordinates
Optional arguments
A DatumCsys object specifying the local coordinate system. If unspeciﬁed, the global
coordinate system will be used.
localCsys
Abaqus Scripting Reference Guide
1606
MeshNode object

An Int specifying the node label.
label
Return value
A MeshNode object.
Exceptions
None.
getElemEdges()
This method returns a tuple of element edge objects that share the node.
Arguments
None.
Return value
A tuple of MeshEdge objects.
Exceptions
None.
getElemFaces()
This method returns a tuple of element face objects that share the node.
Arguments
None.
Return value
A tuple of MeshFace objects.
Exceptions
None.
getElements()
This method returns a tuple of element objects that share the node.
Arguments
None.
Return value
A tuple of MeshElement objects.
1607
Abaqus Scripting Reference Guide
MeshNode object

Exceptions
None.
getNodesByFeatureEdge(...)
This method returns an array of mesh node objects that are obtained by recursively ﬁnding adjacent nodes along a
feature edge that are at an angle of less than or equal to the speciﬁed face angle.
Required arguments
A ﬂoat specifying the value of the face angle in degrees.
angle
Optional arguments
None.
Return value
A MeshNodeArray object, which is a sequence of MeshNode objects.
Exceptions
None.
setValues(...)
This method modiﬁes the MeshNode object.
Required arguments
None.
Optional arguments
An Int specifying the node label. This member may only be edited if the node belongs to an orphan
mesh part. The speciﬁed label must be non-negative and must not be in use by any other node of the
same part.
label
Return value
None.
Exceptions
None.
Members
The MeshNode object has the following members:
An Int specifying the node label.
label
Abaqus Scripting Reference Guide
1608
MeshNode object

A String specifying the name of the part instance that owns this node.
instanceName
A tuple of three Floats specifying the coordinates of the new node.
coordinates
1609
Abaqus Scripting Reference Guide
MeshNode object

MeshNodeArray object
The MeshNodeArray is a sequence of MeshNode objects.
Access
import part
mdb.models[name].parts[name].allInternalSets[name].nodes
mdb.models[name].parts[name].allInternalSurfaces[name].nodes
mdb.models[name].parts[name].allSets[name].nodes
mdb.models[name].parts[name].allSurfaces[name].nodes
mdb.models[name].parts[name].nodes
mdb.models[name].parts[name].retainedNodes
mdb.models[name].parts[name].sets[name].nodes
mdb.models[name].parts[name].surfaces[name].nodes
import assembly
mdb.models[name].rootAssembly.allInstances[name].nodes
mdb.models[name].rootAssembly.allInstances[name].sets[name].nodes
mdb.models[name].rootAssembly.allInstances[name].surfaces[name].nodes
mdb.models[name].rootAssembly.allInternalSets[name].nodes
mdb.models[name].rootAssembly.allInternalSurfaces[name].nodes
mdb.models[name].rootAssembly.allSets[name].nodes
mdb.models[name].rootAssembly.allSurfaces[name].nodes
mdb.models[name].rootAssembly.instances[name].nodes
mdb.models[name].rootAssembly.instances[name].sets[name].nodes
mdb.models[name].rootAssembly.instances[name].surfaces[name].nodes
mdb.models[name].rootAssembly.modelInstances[i].nodes
mdb.models[name].rootAssembly.modelInstances[i].sets[name].nodes
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name].nodes
mdb.models[name].rootAssembly.nodes
mdb.models[name].rootAssembly.sets[name].nodes
mdb.models[name].rootAssembly.surfaces[name].nodes
MeshNodeArray(...)
This method creates a MeshNodeArray object.
Path
mesh.MeshNodeArray
Required arguments
A list of MeshNode objects.
nodes
Optional arguments
None.
Return value
A MeshNodeArray object.
Abaqus Scripting Reference Guide
1610
MeshNodeArray object

Exceptions
None.
getFromLabel(...)
This method returns the object in the MeshNodeArray with the given label.
Required arguments
An Int specifying the label of the object.
label
Optional arguments
None.
Return value
A MeshNode object.
Exceptions
None.
getSequenceFromMask(...)
This method returns the objects in the MeshNodeArray identiﬁed using the speciﬁed mask. This command is generated
when the JournalOptions are set to COMPRESSEDINDEX. When a large number of objects are involved, this method
is highly efﬁcient.
Required arguments
A String specifying the object or objects.
mask
Optional arguments
None.
Return value
A MeshNodeArray object.
Exceptions
None.
getMask()
This method returns a string specifying the object or objects.
Arguments
None.
1611
Abaqus Scripting Reference Guide
MeshNodeArray object

Return value
A String specifying the object or objects.
Exceptions
None.
getByBoundingBox(...)
This method returns an array of nodes that lie within the speciﬁed bounding box.
Required arguments
None.
Optional arguments
A ﬂoat specifying the minimum X boundary of the bounding box.
xMin
A ﬂoat specifying the minimum Y boundary of the bounding box.
yMin
A ﬂoat specifying the minimum Z boundary of the bounding box.
zMin
A ﬂoat specifying the maximum X boundary of the bounding box.
xMax
A ﬂoat specifying the maximum Y boundary of the bounding box.
yMax
A ﬂoat specifying the maximum Z boundary of the bounding box.
zMax
Return value
A MeshNodeArray object, which is a sequence of MeshNode objects.
Exceptions
None.
getByBoundingCylinder(...)
This method returns an array of node objects that lie within the speciﬁed bounding cylinder.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the ﬁrst end of the cylinder.
center1
A tuple of the X-, Y-, and Z-coordinates of the center of the second end of the cylinder.
center2
A ﬂoat specifying the radius of the cylinder.
radius
Abaqus Scripting Reference Guide
1612
MeshNodeArray object

Optional arguments
None.
Return value
A MeshNodeArray object, which is a sequence of MeshNode objects.
Exceptions
None.
getByBoundingSphere(...)
This method returns an array of node objects that lie within the speciﬁed bounding sphere.
Required arguments
A tuple of the X-, Y-, and Z-coordinates of the center of the sphere.
center
A ﬂoat specifying the radius of the sphere.
radius
Optional arguments
None.
Return value
A MeshNodeArray object, which is a sequence of MeshNode objects.
Exceptions
None.
getBoundingBox()
This method returns a dictionary of two tuples representing minimum and maximum boundary values of the bounding
box of the minimum size containing the node sequence.
Arguments
None.
Return value
A Dictionary object with the following items:
low: a tuple of three ﬂoats representing the minimum x, y, and z boundary values of the bounding box.
high: a tuple of three ﬂoats representing the maximum x, y, and z boundary values of the bounding box.
getClosest()
This method returns the node or nodes closest to the given point or set of points.
1613
Abaqus Scripting Reference Guide
MeshNodeArray object

Required arguments
A point deﬁned by x, y, and z values or a list of such points.
coordinates
Optional arguments
The number of nodes to ﬁnd for each given point. For example, if numToFind is 2, then
the 2 closest points, if available and within searchTolerance, will be returned in order of
proximity for each input point. The default is 1.
numToFind
A ﬂoat specifying a search radius for each point. By default, no search radius is deﬁned,
and all nodes in the sequence will be searched.
searchTolerance
Return value
A MeshNode, or a list of MeshNode objects, or a list of lists of MeshNode objects, depending on the number of points
given and the number of nodes requested.
getMemberFromAll(...)
This method returns a tuple containing a member or members for each MeshNode in the MeshNodeArray.
Required arguments
A String specifying a MeshNode member name or a tuple of member names.
member
Optional arguments
None.
Return value
A tuple of member values (one for each MeshNode) or a tuple of tuples of member values (if you speciﬁed a tuple of
member names in the member argument).
Exceptions
AttributeError: 'MeshNode' object has no attribute ''
An exception occurs if no such member exists.
sequenceFromLabels(...)
This method returns the objects in the MeshNodeArray identiﬁed using the speciﬁed labels.
Required arguments
A sequence of Ints specifying the labels.
labels
Abaqus Scripting Reference Guide
1614
MeshNodeArray object

Optional arguments
None.
Return value
A MeshNodeArray object.
Exceptions
Error: The mask results in an empty sequence.
An exception occurs if the resulting sequence is empty.
Members
The MeshNodeArray object has no members.
1615
Abaqus Scripting Reference Guide
MeshNodeArray object

MeshStats object
The MeshStats object is a query object for holding mesh statistics and is returned by the getMeshStats command.
The object does not have any methods.
Access
import mesh
Members
The MeshStats object has the following members:
An Int specifying the number of point elements.
numPointElems
An Int specifying the number of line elements.
numLineElems
An Int specifying the number of quadrilateral elements.
numQuadElems
An Int specifying the number of triangular elements.
numTriElems
An Int specifying the number of hexahedral elements.
numHexElems
An Int specifying the number of wedge elements.
numWedgeElems
An Int specifying the number of tetrahedral elements.
numTetElems
An Int specifying the number of pyramid elements.
numPyramidElems
An Int specifying the number of nodes.
numNodes
An Int specifying the number of regions that contain a mesh.
numMeshedRegions
Abaqus Scripting Reference Guide
1616
MeshStats object

Messaging commands
Messaging commands are available only if Abaqus/CAE is run interactively using the GUI.
In this section:
•
DataObject object
•
MonitorMgr object
1617

DataObject object
An instance of the DataObject object is passed to each callback. The DataObject object has no methods. The members
of a DataObject object depend on the type of the object. All DataObject instances have the following members, regardless
of type:
•
clientHost
•
clientName
•
phase
•
processId
•
threadId
•
timeStamp
The possible DataObject types and the additional members for each type are as follows:
ABORTED
•
message
COMPLETED
•
message
END_STEP
•
stepId
ERROR
•
message
HEADING
•
heading
MONITOR_DATA
•
dof
•
node
•
nset
•
procedure
•
time
•
value
Abaqus Scripting Reference Guide
1618
DataObject object

ODB_FILE
•
ﬁle
STARTED
•
No additional members.
STATUS
•
attempts
•
equilibrium
•
increment
•
iterations
•
severe
•
step
•
stepTime
•
timeIncrement
•
totalTime
STEP
•
stepId
•
stepName
WARNING
•
message
Members
The DataObject object has the following members:
A SymbolicConstant specifying the phase of the analysis. Possible values are
BATCHPRE_PHASE, PACKAGER_PHASE, STANDARD_PHASE,
EXPLICIT_PHASE, CALCULATOR_PHASE, and UNKNOWN_PHASE.
phase
An Int specifying the process ID of the analysis product.
processId
An Int specifying the thread ID of the analysis product. Threads are used for parallel or
multiprocessing; in most cases threadId is set to zero.
threadId
An Int specifying the time the message was sent in seconds since 00:00:00 UTC, January
1, 1970.
timeStamp
1619
Abaqus Scripting Reference Guide
DataObject object

An Int specifying the number of attempts made to reach equilibrium during this step.
attempts
An Int specifying the degree of freedom requested for monitoring the output.
dof
An Int specifying the number of equilibrium iterations made during this increment.
equilibrium
An Int specifying the increment of the analysis.
increment
An Int specifying the number of iterations in the step.
iterations
An Int specifying the node number requested for monitoring output.
node
An Int specifying the number of severe discontinuity iterations completed during this
increment.
severe
An Int specifying the current step number. Step number 1 corresponds to the ﬁrst step.
step
An Int specifying the ID of the step.
stepId
A Float specifying the step time corresponding to the current increment.
stepTime
A Float specifying the total time corresponding to the monitor data.
time
A Float specifying the time increment used in the current step.
timeIncrement
A Float specifying the total time completed in the analysis.
totalTime
A Float specifying the current value of the degree of freedom requested for monitoring.
value
A String specifying the host name of the machine that is running the analysis.
clientHost
A String specifying the name of the client that responded to the callback function. Possible
values are “BatchPre”, “Packager”, “Standard”, “Explicit”, and “Calculator”.
clientName
A String specifying the full path of the output database.
ﬁle
A String specifying the job heading.
heading
A String specifying the job heading.
message
A String specifying the node set speciﬁed for monitoring output.
nset
A String specifying the name of the step.
stepName
Abaqus Scripting Reference Guide
1620
DataObject object

MonitorMgr object
An instance of the MonitorMgr object is created when you import the abaqus module. No other instance of the
MonitorMgr object is required. (This MonitorMgr object is not to be confused with the degree of freedom (DOF)
monitor that is constructed from the Step object.)
Access
monitorManager
addMessageCallback(...)
This method speciﬁes a callback function that will be called when the speciﬁed message is received from the analysis
product.
For more information, see An example of a callback function.
Required arguments
A String specifying the name of the job to be monitored or the SymbolicConstant ANY_JOB.
jobName
A SymbolicConstant specifying which message type will call this callback. Possible values are:
messageType
•
ABORTED
•
ANY_JOB
•
ANY_MESSAGE_TYPE
•
COMPLETED
•
END_STEP
•
ERROR
•
HEADING
•
HEALER_JOB
•
HEALER_TYPE
•
INTERRUPTED
•
ITERATION
•
JOB_ABORTED
•
JOB_COMPLETED
•
JOB_INTERRUPTED
•
JOB_SUBMITTED
•
MONITOR_DATA
•
ODB_FILE
•
ODB_FRAME
•
SIMULATION_ABORTED
•
SIMULATION_COMPLETED
•
SIMULATION_INTERRUPTED
•
SIMULATION_SUBMITTED
1621
MonitorMgr object

•
STARTED
•
STATUS
•
STEP
•
WARNING
A Python function to be called. The interface deﬁnition of the callback function is :
def onMessage(jobName, messageType, data, userData)
callback
•
jobName is a String.
•
messageType is a SymbolicConstant with possible values as listed previously for the
addMessageCallback method.
•
data is a DataObject object.
•
userData is the object passed as the userData argument to the addMessageCallback method.
Optional arguments
Any Python object or None. This object is passed to the callback function.
userData
Return value
None.
Exceptions
None.
removeMessageCallback(...)
This method removes a callback function. You specify the callback function to remove using the same arguments you
used to add the callback.
Required arguments
A String specifying the name of the job to be monitored or the SymbolicConstant ANY_JOB.
jobName
A SymbolicConstant specifying which message type will call this callback. Possible values are:
messageType
•
ABORTED
•
ANY_JOB
•
ANY_MESSAGE_TYPE
•
COMPLETED
•
END_STEP
•
ERROR
•
HEADING
•
HEALER_JOB
Abaqus Scripting Reference Guide
1622
MonitorMgr object

•
HEALER_TYPE
•
INTERRUPTED
•
ITERATION
•
JOB_ABORTED
•
JOB_COMPLETED
•
JOB_INTERRUPTED
•
JOB_SUBMITTED
•
MONITOR_DATA
•
ODB_FILE
•
ODB_FRAME
•
SIMULATION_ABORTED
•
SIMULATION_COMPLETED
•
SIMULATION_INTERRUPTED
•
SIMULATION_SUBMITTED
•
STARTED
•
STATUS
•
STEP
•
WARNING
A Python function to be called; it must be the same as the callback argument speciﬁed in the
original call to addMessageCallback.
callback
Any Python object or None; it must be the same as the userData argument speciﬁed in the
original call to addMessageCallback.
userData
Optional arguments
None.
Return value
None.
Exceptions
None.
checkMonitorStatus()
This method raises a MonitorError exception if the monitoring status is not ENABLED.
Arguments
None.
1623
Abaqus Scripting Reference Guide
MonitorMgr object

Return value
None.
Exceptions
Status is not ENABLED
MonitorError:
Members
The MonitorMgr object has no members.
Abaqus Scripting Reference Guide
1624
MonitorMgr object

Model commands
Model commands are used to create Abaqus/CAE models.
A ﬁnished model contains all the data that Abaqus/CAE needs to create and submit an analysis to Abaqus/Standard
or Abaqus/Explicit. Models are stored in a model database.
In this section:
•
Model object
•
KeywordBlock object
1625

Model object
Abaqus creates a Model object named Model-1 when a session is started.
Access
mdb.models[name]
Model(...)
This method creates a Model object.
Path
mdb.Model
Required arguments
A String specifying the repository key.
name
Optional arguments
A String specifying the purpose and contents of the Model object. The default value is
an empty string.
description
None or a Float specifying the Stefan-Boltzmann constant. The default value is None.
stefanBoltzmann
None or a Float specifying the absolute zero constant. The default value is None.
absoluteZero
A SymbolicConstant specifying the type of incident wave formulation to be used in
acoustic problems. Possible values are NOT_SET, SCATTERED, and TOTAL. The
default value is NOT_SET.
waveFormulation
A SymbolicConstant specifying the analysis model type. Possible values are
STANDARD_EXPLICIT and ELECTROMAGNETIC. The default is
STANDARD_EXPLICIT.
modelType
None or a Float specifying the universal gas constant. The default value is None.
universalGas
A boolean specifying whether to copy the constraints created in the model to the model
that instances this model. The default value is ON.
copyConstraints
A boolean specifying whether to copy the connectors created in the model to the model
that instances this model. The default value is ON.
copyConnectors
A boolean specifying whether to copy the interactions created in the model to the model
that instances this model. The default value is ON.
copyInteractions
Abaqus Scripting Reference Guide
1626
Model object

Return value
A Model object.
Exceptions
None.
ModelFromInputFile(...)
This method creates a Model object by reading the keywords in an input ﬁle and creating the corresponding Abaqus/CAE
objects.
Path
mdb.ModelFromInputFile
Required arguments
A String specifying the repository key.
name
A String specifying the name of the input ﬁle (including the .inp extension) to be parsed
into the new model. This String can also be the full path to the input ﬁle if it is located in
another directory.
inputFileName
Optional arguments
None.
Return value
A Model object.
Exceptions
None.
ModelFromOdbFile(...)
This method creates a Model object by reading an output database and creating any corresponding Abaqus/CAE objects.
Path
mdb.ModelFromOdbFile
Required arguments
A String specifying the repository key.
name
A String specifying the name of the output database ﬁle (including the .odb extension) to
be read into the new model. This String can also be the full path to the output database ﬁle
if it is located in another directory.
odbFileName
1627
Abaqus Scripting Reference Guide
Model object

Optional arguments
None.
Return value
A Model object.
Exceptions
None.
ModelFromNastranFile(...)
This method creates a Model object by reading the keywords in a Nastran bulk data ﬁle or Nastran input ﬁle and
creating any corresponding Abaqus/CAE objects. The default values is discussed in following and can be deﬁned
alternatively in the Abaqus environment ﬁle as the one used for the translator from Nastran to Abaqus. For more
information, see Translating Nastran Bulk Data in Text Files to Partial Abaqus Input Files.
Path
mdb.ModelFromNastranFile
Required arguments
A String specifying the repository key.
modelName
A String specifying the name of the Nastran input ﬁle (including the .bdf, .dat,
.nas, .nastran, .blk, .bulk extension) to be read into the new model. This
String can also be the full path to the Nastran input ﬁle if it is located in another directory.
inputFileName
Optional arguments
A SymbolicConstant specifying the method used to create shell section. Possible values are
PRESERVE_SECTION, GROUP_BY_MATERIAL, and NONE. If PRESERVE_SECTION
sectionConsolidation
is used, an Abaqus section is created corresponding to each shell property ID. If
GROUP_BY_MATERIAL is used, a single Abaqus section is created for all homogeneous
elements referencing the same material. In both cases, material orientations and offsets are
created using discrete ﬁelds. If NONE is used, a separate shell section is created for each
combination of orientation, material offset, and/or thickness. The default is
PRESERVE_SECTION.
A Boolean specifying whether the pre-integrated shell section is created in default for shell
element. The default value is OFF.
preIntegratedShell
A Boolean specifying whether the value on the Nastran data line PARAM, WTMASS is used
as a multiplier for all density, mass, and rotary inertia values created in the Abaqus input ﬁle.
The default value is ON.
weightMassScaling
A Boolean specifying whether each SUBCASE for linear static analyses is translated to a
*LOAD CASE option, and all such *LOAD CASE options are grouped in a single *STEP option.
The default value is ON.
loadCases
Abaqus Scripting Reference Guide
1628
Model object

A Boolean specifying whether to translate the beam element connectivity to newly created
nodes at the offset location and rigidly coupling the new and original nodes. If not, beam element
coupleBeamOffsets
offsets are translated to the *CENTROID and *SHEAR CENTER options, which are suboptions
of the *BEAM GENERAL SECTION option. The default value is ON. When the beam element
references a PBARL or PBEAML property or if the beam offset has a signiﬁcant component
in the direction of the beam axis, the setting for this argument is always ON.
A String specifying the 2-node beam that is created from CBAR and CBEAM elements. Possible
values are B31 and B33. The default is B31.
cbar
A String specifying the 4-node shell that is created from CQUAD4 elements. Possible values
are S4 and S4R. The default is S4. If a reduced-integration element is chosen, the enhanced
hourglass formulation is applied automatically.
cquad4
A String specifying the 8-node brick that is created from CHEXA elements. Possible values
are C3D8I, C3D8 and C3D8R. The default is C3D8I. If a reduced-integration element is chosen,
the enhanced hourglass formulation is applied automatically.
chexa
A String specifying the 10-node tetrahedron that is created from CTETRA elements. Possible
values are C3D10 and C3D10M. The default is C3D10.
ctetra
A Boolean specifying whether to keep the generated Abaqus input ﬁle after the model is created
from the Nastran input ﬁle. The default value is ON.
keepTranslatedFiles
Return value
A Model object.
Exceptions
None.
setValues(...)
This method modiﬁes the Model object.
Required arguments
None.
Optional arguments
A String specifying the purpose and contents of the Model object. The default value
is an empty string.
description
A Boolean specifying whether an input ﬁle should be written without parts and
assemblies. The default value is OFF.
noPartsInputFile
None or a Float specifying the absolute zero constant. The default value is None.
absoluteZero
1629
Abaqus Scripting Reference Guide
Model object

None or a Float specifying the Stefan-Boltzmann constant. The default value is None.
stefanBoltzmann
A SymbolicConstant specifying the type of incident wave formulation to be used in
acoustic problems. Possible values are NOT_SET, SCATTERED, and TOTAL. The
default value is NOT_SET.
waveFormulation
None or a Float specifying the universal gas constant. The default value is None.
universalGas
A String specifying the name of the job that generated the restart data.
restartJob
A String specifying the name of the step where the restart analysis will start.
restartStep
An Int specifying the increment, interval, iteration or cycle where the restart analysis
will start. To select the end of the step use the SymbolicConstant STEP_END.
restartIncrement
A Boolean specifying that the step speciﬁed by restartStep should be terminated at
the increment speciﬁed by restartIncrement.
endRestartStep
A String specifying the name of the job that generated the results for the global model.
globalJob
A Boolean specifying that a shell global model drives a solid submodel.
shellToSolid
A Boolean specifying whether to copy the constraints created in the model to the
model that instances this model.
copyConstraints
A Boolean specifying whether to copy the connectors created in the model to the
model that instances this model
copyConnectors
A Boolean specifying whether to copy the interactions created in the model to the
model that instances this model.
copyInteractions
Return value
None.
Exceptions
None.
Members
The Model object can have the following members:
A String specifying the repository key.
name
None or a Float specifying the Stefan-Boltzmann constant. The default value
is None.
stefanBoltzmann
Abaqus Scripting Reference Guide
1630
Model object

None or a Float specifying the absolute zero constant. The default value is
None.
absoluteZero
A SymbolicConstant specifying the type of incident wave formulation to be
used in acoustic problems. Possible values are NOT_SET, SCATTERED, and
TOTAL. The default value is NOT_SET.
waveFormulation
None or a Float specifying the universal gas constant. The default value is
None.
universalGas
A Boolean specifying whether an input ﬁle should be written without parts
and assemblies. The default value is OFF.
noPartsInputFile
An Int specifying the increment, interval, iteration or cycle where the restart
analysis will start. To select the end of the step use the SymbolicConstant
STEP_END.
restartIncrement
A Boolean specifying that the step speciﬁed by restartStep should be terminated
at the increment speciﬁed by restartIncrement.
endRestartStep
A Boolean specifying that a shell global model drives a solid submodel.
shellToSolid
A Float specifying the time stamp that indicates when the model was last
changed.
lastChangedCount
A String specifying the purpose and contents of the Model object. The default
value is an empty string.
description
A String specifying the name of the job that generated the restart data.
restartJob
A String specifying the name of the step where the restart analysis will start.
restartStep
A String specifying the name of the job that generated the results for the global
model.
globalJob
A boolean specifying the status of constraints created in a model, in the model
which instances this model.
copyConstraints
A boolean specifying the status of connectors created in a model, in the model
which instances this model.
copyConnectors
A boolean specifying the status of interactions created in a model, in the model
which instances this model.
copyInteractions
A KeywordBlock object.
keywordBlock
An Assembly object.
rootAssembly
1631
Abaqus Scripting Reference Guide
Model object

A repository of Amplitude objects.
amplitudes
A repository of Proﬁle objects.
proﬁles
A repository of BoundaryCondition objects.
boundaryConditions
A repository of Constraint objects.
constraints
A repository of AnalyticalField objects.
analyticalFields
A repository of DiscreteField objects.
discreteFields
A repository of PredeﬁnedField objects.
predeﬁnedFields
A repository of Interaction objects.
interactions
A repository of InteractionProperty objects.
interactionProperties
A repository of ContactControl objects.
contactControls
A repository of ContactInitialization objects.
contactInitializations
A repository of ContactStabilization objects.
contactStabilizations
A tuple of tuples of Strings specifying the linked child PartInstance name in
the current model to the corresponding parent PartInstance name in a different
model.
linkedInstances
A tuple of tuples of Strings specifying the linked child Part name in the current
model to the corresponding parent Part name in a different model.
linkedParts
A repository of Load objects.
loads
A repository of Material objects.
materials
A repository of Calibration objects.
calibrations
A repository of Section objects.
sections
A repository of RemeshingRule objects.
remeshingRules
A repository of ConstrainedSketch objects.
sketches
A repository of Part objects.
parts
A repository of Step objects.
steps
Abaqus Scripting Reference Guide
1632
Model object

A FeatureOptions object.
featureOptions
A repository of AdaptiveMeshConstraint objects.
adaptiveMeshConstraints
A repository of AdaptiveMeshControl objects.
adaptiveMeshControls
A repository of TimePoint objects.
timePoints
A repository of Filter objects.
ﬁlters
A repository of IntegratedOutputSection objects.
integratedOutputSections
A repository of FieldOutputRequest objects.
ﬁeldOutputRequests
A repository of HistoryOutputRequest objects.
historyOutputRequests
A repository of OptimizationTask objects.
optimizationTasks
A repository of TableCollection objects.
tableCollections
A repository of EventSeriesType objects.
eventSeriesTypes
A repository of EventSeriesData objects.
eventSeriesDatas
Corresponding analysis keywords
•
*PHYSICAL CONSTANTS
1633
Abaqus Scripting Reference Guide
Model object

KeywordBlock object
The KeywordBlock object contains a representation of its model in the Abaqus input ﬁle format. You may edit the
contents of the KeywordBlock to add solver functionality that is not supported by Abaqus/CAE. As a general rule,
edits to the KeywordBlock object should be made as the last step prior to writing the actual Abaqus input ﬁle, thus
avoiding possible conﬂicts with changes made using other MDB commands. The KeywordBlock object has no
constructor. A KeywordBlock object is created when you create a model object. A model object contains only one
KeywordBlock object.
Access
mdb.models[name].keywordBlock
setValues(...)
This method modiﬁes the KeywordBlock object.
Required arguments
None.
Optional arguments
A Boolean specifying whether this objects sieBlocks member has been edited. Setting edited=False
will set the sieBlocks member to an empty tuple, thereby discarding all previous edits.
edited
Return value
None.
Exceptions
None.
insert(...)
This method inserts a String at a speciﬁed position in the sieBlocks member.
Required arguments
An Int specifying the position in the sieBlocks member after which the new string will be
inserted.
position
A String specifying the text to be inserted. The text represents an Abaqus input ﬁle keyword
and its associated data
text
Optional arguments
None.
Abaqus Scripting Reference Guide
1634
KeywordBlock object

Return value
None.
Exceptions
IndexError.
replace(...)
This method replaces a String at a speciﬁed position in the sieBlocks member.
Required arguments
An Int specifying the position of the String to be replaced in the sieBlocks member.
position
A String specifying the text to be replaced. The text represents an Abaqus input ﬁle keyword
and its associated data.
text
Optional arguments
None.
Return value
None.
Exceptions
IndexError.
synchVersions(...)
This method synchronizes, or merges, the edits made in this object with those made in the model using other scripting
commands or the user interface. The synchVersions method updates the sieBlocks member. The sieBlocks member
is empty prior to the ﬁrst call to synchVersions. As a side effect, synchVersions sets lastSynchCount to the
current value of the counter associated with the Mdb object, which is used to determine if synchronization is necessary.
Required arguments
A Boolean specifying whether the nodal coordinates and element connectivities (i.e. the
data lines for the *NODE and *ELEMENT keyword blocks) are to be stored in the sieBlocks
storeNodesAndElements
member. All other keywords and their data lines are always stored. The default value is
True. If storeNodesAndElements is True, the size of the keywordBlock data will be similar
to that of the input ﬁle. Since the KeywordBlock is stored in the Abaqus/CAE database,
this will result in a larger database. It will also result in a slower execution of the
synchVersions command. If storeNodesAndElements is False, the data lines are not
stored in sieBlocks. Consequently, only set storeNodesAndElements=True if you wish to
make changes to the *NODE or *ELEMENT data lines themselves. If your task is limited
to reading nodal coordinates and element connectivities (i.e. not editing this information)
then it is generally better to access this information from other parts of the Mdb.
1635
Abaqus Scripting Reference Guide
KeywordBlock object

Optional arguments
None.
Return value
None.
Exceptions
IndexError.
Members
The KeywordBlock object has the following members:
A Boolean specifying whether the Keywords Editor has been used to change the model.
edited
A Float specifying the value of the counter associated with the Mdb object at the most recent
synchronization.
lastSynchCount
A tuple of Strings specifying a sequence of Strings that is identical to the information written to
the Abaqus input ﬁle. Each String in the sequence represents an Abaqus input ﬁle keyword along
sieBlocks
with the parameters and data lines associated with the keyword. A String can also be a comment
in the input ﬁle. You initialize this data member by calling synchVersions. After you initialize
the data member, you use calls to replace and insert to record your edits in the correct
location. If the last call to synchVersions used the argument storeNodesAndElements=False,
the entry for the keywords *NODE and *ELEMENT will contain only the keyword and its
parameters, not the data lines.
Abaqus Scripting Reference Guide
1636
KeywordBlock object

Odb commands
The Python ODB API commands are used to read and write data from an output database (.odb) ﬁle.
The path to the Odb object can be via the session.odbs repository or via a variable. In this chapter the Access
and Path statements refer to a variable called odb that represents an existing Odb object.
In this section:
•
Odb object
•
AnalyticSurface object
•
AnalyticSurfaceSegment object
•
BeamOrientation object
•
FieldBulkData object
•
FieldLocation object
•
FieldOutput object
•
FieldValue object
•
HistoryOutput object
•
HistoryPoint object
•
HistoryRegion object
•
JobData object
•
OdbAssembly object
•
OdbDatumCsys object
•
OdbFrame object
•
OdbInstance object
•
OdbLoadCase object
•
OdbMeshElementArray object
•
OdbMeshElement object
•
OdbMeshNodeArray object
•
OdbMeshNode object
•
OdbPart object
•
OdbPretensionSection object
•
OdbRigidBody object
•
OdbSequenceAnalyticSurfaceSegment object
•
OdbSet object
•
OdbStep object
•
RebarOrientation object
•
ScratchOdb object
•
SectionCategory object
•
SectionPoint object
•
SectorDefinition object
•
UserData object
•
Odb commands
1637

Odb object
The Odb object is the in-memory representation of an output database (ODB) ﬁle.
Access
import odbAccess
session.odbs[name]
Odb(...)
This method creates a new Odb object.
Path
session.Odb
Required arguments
A String specifying the repository key.
name
Optional arguments
A String specifying the title of the output database. The default value is an empty string.
analysisTitle
A String specifying the description of the output database. The default value is an empty
string.
description
A String specifying the path to the ﬁle where the new output database (.odb ) ﬁle will
be written. The default value is an empty string.
path
Return value
An Odb object.
Exceptions
None.
close()
This method closes an output database.
Arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
1638
Odb object

Exceptions
None.
getFrame(...)
This method returns the frame at the speciﬁed time, frequency, or mode. It will not interpolate values between frames.
The method is not applicable to an Odb object containing steps with different domains or to an Odb object containing
a step with load case speciﬁc data.
Required arguments
A Double specifying the value at which the frame is required. frameValue can be the
total time or frequency.
frameValue
Optional arguments
A SymbolicConstant specifying which frame to return if there is no frame at the exact frame value.
Possible values are CLOSEST, BEFORE, AFTER, and EXACT. The default value is CLOSEST.
match
When match=CLOSEST, Abaqus returns the closest frame. If the frame value requested is exactly halfway
between two frames, Abaqus returns the frame after the value.
When match=EXACT, Abaqus raises an exception if the exact frame value does not exist.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the exact frame is not found:
save()
This method saves output to an output database (.odb ) ﬁle.
Arguments
None.
Return value
None.
Exceptions
Database save failed. The database was opened as read-only. Modiﬁcation of data is
not permitted.
OdbError
1639
Abaqus Scripting Reference Guide
Odb object

update()
This method is used to update an Odb object in memory while an Abaqus analysis writes data to the associated output
database. update checks if additional steps have been written to the output database since it was opened or last
updated. If additional steps have been written to the output database, update adds them to the Odb object.
Arguments
None.
Return value
A Boolean specifying whether additional steps or frames were added to the Odb object.
Exceptions
None.
Members
The Odb object has members with the same names and descriptions as the arguments to the Odb  method.
In addition, the Odb object can have the following members:
A Boolean specifying whether the output database was opened with
read-only access.
isReadOnly
A repository of Amplitude objects.
amplitudes
A repository of Filter objects.
ﬁlters
An OdbAssembly object.
rootAssembly
A JobData object.
jobData
A repository of OdbPart objects.
parts
A repository of Material objects.
materials
A repository of OdbStep objects.
steps
A repository of Section objects.
sections
A repository of SectionCategory objects.
sectionCategories
A SectorDeﬁnition object.
sectorDeﬁnition
A UserData object.
userData
A RepositorySupport object.
customData
Abaqus Scripting Reference Guide
1640
Odb object

A repository of Proﬁle objects.
proﬁles
1641
Abaqus Scripting Reference Guide
Odb object

AnalyticSurface object
The AnalyticSurface object is a geometric surface that can be described with straight and/or curved line segments.
Access
import odbAccess
session.odbs[name].parts[name].analyticSurface
session.odbs[name].rootAssembly.instances[name].analyticSurface
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.analyticSurface
Members
The AnalyticSurface object has the following members:
A String specifying the name of the analytic surface.
name
A SymbolicConstant specifying the type of AnalyticSurface object. Possible values are
SEGMENTS, CYLINDER, and REVOLUTION.
type
A Float specifying radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
An OdbSequenceAnalyticSurfaceSegment object specifying the proﬁle associated with
the surface.
segments
A tuple of tuples of Floats specifying the global coordinates of points representing the
local coordinate system, if used.
localCoordData
Abaqus Scripting Reference Guide
1642
AnalyticSurface object

AnalyticSurfaceSegment object
An individual segment of the analytic surface.
Access
import odbAccess
session.odbs[name].parts[name].analyticSurface.segments[i]
session.odbs[name].rootAssembly.instances[name].analyticSurface\
.segments[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.analyticSurface.segments[i]
AnalyticSurfaceSegment(...)
This method creates an AnalyticSurfaceSegment object.
Path
odbAccess.AnalyticSurfaceSegment
Required arguments
A SymbolicConstant specifying the type of AnalyticSurfaceSegment. Possible values are START, LINE,
CIRCLE, and PARABOLA.
type
A sequence of sequences of Floats specifying the coordinates of point/s representing the segment of the
AnalyticSurface object. If type=CIRCLE, the ﬁrst row contains coordinates of the end point and the
data
second row contains coordinates of the center point. If type=PARABOLA, the ﬁrst row contains
coordinates of the middle point and the second row contains coordinates of the end point. If type=START
or type=LINE, a single row contains coordinates of the start/end point.
Optional arguments
None.
Return value
An AnalyticSurfaceSegment object.
Exceptions
None.
Members
The AnalyticSurfaceSegment object has members with the same names and descriptions as the arguments to the
AnalyticSurfaceSegment  method.
1643
AnalyticSurfaceSegment object

BeamOrientation object
The BeamOrientation object represents the direction of the ﬁrst beam section axis 
. Specifying the beam orientation
using an additional node in the element connectivity list is not supported.
Access
import odbAccess
session.odbs[name].parts[name].beamOrientations[i]
session.odbs[name].rootAssembly.instances[name].beamOrientations[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.beamOrientations[i]
Members
The BeamOrientation object can have the following members:
A SymbolicConstant specifying the orientation assignment method. Possible values are
N1_COSINES, CSYS, and VECT.
method
An OdbSet object specifying a region for which the beam orientation is deﬁned.
region
A tuple of Floats specifying direction cosines of the 
-direction of the beam cross-section.
vector
Abaqus Scripting Reference Guide
1644
BeamOrientation object

FieldBulkData object
The FieldBulkData object represents the entire ﬁeld data for a class of elements or nodes. All elements in a class
correspond to the same element type and material.
Access
import odbAccess
session.odbs[name].steps[name].frames[i].fieldOutputs[name]\
.bulkDataBlocks[i]
Members
The FieldBulkData object can have the following members:
A SymbolicConstant specifying the position of the output in the element. Possible values are:
position
•
NODAL, specifying the values calculated at the nodes.
•
INTEGRATION_POINT, specifying the values calculated at the integration points.
•
ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated at
the integration points.
•
ELEMENT_FACE.
•
CENTROID, specifying the value at the centroid obtained by extrapolating results calculated
at the integration points.
A SymbolicConstant specifying the output type. Possible values are SCALAR, VECTOR,
TENSOR_3D_FULL, TENSOR_3D_PLANAR, TENSOR_3D_SURFACE,
TENSOR_2D_PLANAR, and TENSOR_2D_SURFACE.
type
An OdbInstance object specifying the part to which the labels belong.
instance
A SectionPoint object specifying the section point number of the current block of data.
sectionPoint
A sequence of Ints specifying the element labels of the elements in the block. elementLabels is
valid only if position=INTEGRATION_POINT, CENTROID, ELEMENT_NODAL, or
ELEMENT_FACE.
elementLabels
A sequence of Ints specifying the node labels of the nodes in the block. nodelabels is valid only
if position=ELEMENT_NODAL or NODAL.
nodeLabels
A sequence of Strings specifying the component labels.
componentLabels
A sequence of Ints specifying the integration points in the elements in the block. integrationPoints
is available only if position=INTEGRATION_POINT.
integrationPoints
A tuple of Floats specifying data in the form described by type. If type=TENSOR or VECTOR,
data is a sequence containing the components for each element or node in the block. If the
underlying data are in double precision, an exception will be thrown.
data
1645
FieldBulkData object

A tuple of Floats specifying data in the form described by type. If type=TENSOR or VECTOR,
conjugateData is a sequence containing the imaginary part of the components for each element
or node in the block. If the underlying data are in double precision, an exception will be thrown.
conjugateData
A sequence of Floats specifying the calculated von Mises stress at each output location in the
block of element data, or NULL. The value is valid only when the validInvariants member
mises
includes MISES; otherwise, the value is indeterminate. Conjugate data will be ignored in invariant
calculation.
A pointer to an array of Floats specifying the quaternion representing the local coordinate system
(the rotation from global to local) at each output location. The quaternion is returned in the form
localCoordSystem
, which is the reverse of that shown in Rotation variables. localCoordSystem is
available for TENSOR data written in a local coordinate system. It is also available for VECTOR
data for connector element outputs. For connector element outputs the quaternion form is
, which represents the rotation from local to global. If the underlying data are in
double precision, an exception will be thrown.
Abaqus Scripting Reference Guide
1646
FieldBulkData object

FieldLocation object
The FieldLocation object speciﬁes locations for which data are available in the ﬁeld. For example, a displacement
ﬁeld will have a FieldLocation object with a position member value of NODAL. The FieldLocation object has no
constructor; it is created automatically as an element of the location member of a FieldOutput object by the addData
method of a FieldOutput object.
Access
import odbAccess
session.odbs[name].steps[name].frames[i].fieldOutputs[name]\
.locations[i]
Members
The FieldLocation object can have the following members:
A SymbolicConstant specifying the position of the output in the element. Possible values are:
position
•
NODAL, specifying the values calculated at the nodes.
•
INTEGRATION_POINT, specifying the values calculated at the integration points.
•
ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated at
the integration points.
•
ELEMENT_FACE.
•
CENTROID, specifying the value at the centroid obtained by extrapolating results calculated
at the integration points.
A SectionPointArray object.
sectionPoints
1647
FieldLocation object

FieldOutput object
A FieldOutput object contains ﬁeld data for a speciﬁc output variable.
Access
import
odbAccess
session.odbs[name].steps[name].frames[i].fieldOutputs[name]
FieldOutput(...)
This method creates a FieldOutput object.
Path
session.odbs[name].steps[name].frames[i].FieldOutput
Required arguments
A String specifying the output variable name.
name
A String specifying the output variable. Colon (:) should not be used as a part of the ﬁeld output
description.
description
A SymbolicConstant specifying the output type. Possible values are SCALAR, VECTOR,
TENSOR_3D_FULL, TENSOR_3D_PLANAR, TENSOR_3D_SURFACE,
TENSOR_2D_PLANAR, and TENSOR_2D_SURFACE.
type
Optional arguments
A sequence of Strings specifying the labels for each component of the value. The length of the
sequence must match the type. If type=TENSOR, the default value is name with the sufﬁxes
componentLabels
('11', '22', '33', '12', '13', '23'). If type=VECTOR, the default value is name with the sufﬁxes ('1',
'2', '3'). If type=SCALAR, the default value is an empty sequence.
A sequence of SymbolicConstants specifying which invariants should be calculated for this
ﬁeld. An empty sequence indicates that no invariants are valid for this ﬁeld. Possible values
are:
validInvariants
•
MAGNITUDE
•
MISES
•
TRESCA
•
PRESS
•
INV3
•
MAX_PRINCIPAL
•
MID_PRINCIPAL
•
MIN_PRINCIPAL
Abaqus Scripting Reference Guide
1648
FieldOutput object

•
MAX_INPLANE_PRINCIPAL
•
MIN_INPLANE_PRINCIPAL
•
OUTOFPLANE_PRINCIPAL
The default value is an empty sequence.
A Boolean specifying whether the ﬁeld is an engineering tensor or not. Setting
isEngineeringTensor to true makes a tensor ﬁeld behave as a strain like quantity where the
isEngineeringTensor
off-diagonal components of tensor are halved for invariants computation. This parameter applies
only to tensor ﬁeld outputs. The default value is OFF.
Return value
A FieldOutput object.
Exceptions
None.
FieldOutput(...)
This method creates a FieldOutput object from an existing FieldOutput object of the same output database.
Path
session.odbs[name].steps[name].frames[i].FieldOutput
Required arguments
A FieldOutput object.
ﬁeld
Optional arguments
A String specifying the name of the FieldOutput object.
name
A String specifying the output variable. Colon (:) should not be used as a part of the ﬁeld
output description.
description
Return value
A FieldOutput object.
Exceptions
None.
addData(...)
This method adds data to a FieldOutput object.
1649
Abaqus Scripting Reference Guide
FieldOutput object

Required arguments
A SymbolicConstant specifying the position of the output. Possible values are:
position
•
NODAL, specifying the values calculated at the nodes.
•
INTEGRATION_POINT, specifying the values calculated at the integration points.
•
ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated at the
integration points.
•
CENTROID, specifying the value at the centroid obtained by extrapolating results calculated at
the integration points.
An OdbInstance object specifying the namespace for labels.
instance
A sequence of Ints specifying the labels of the nodes or elements where the values in data are located.
For better performance, the node or element labels are preferred to be sorted in ascending order and
must be speciﬁed in the same order as the values provided for the data argument.
labels
A sequence of sequences of Floats specifying the data values for the speciﬁed position, instance, and
labels. The values must be given in the correct order. Element nodal data follow the order of nodal
data
connectivity deﬁned in the Abaqus documentation. Integration point data follow the order deﬁned in
the Abaqus documentation. Section point data for beams and shells follow the convention given in the
Abaqus documentation. For more information, see the Abaqus Elements Guide. These data create
FieldValue objects internally.
Optional arguments
A SectionPoint object specifying the location in the section. Although sectionPoint is an optional
argument to the addData method, omitting the argument does have consequences for visualization.
sectionPoint
If you omit the argument when you are writing ﬁeld output data for a shell or a beam, you cannot
subsequently select the section point to display when you are displaying the ﬁeld output data using
the Visualization module.
The localCoordSystem parameter can be speciﬁed using either of the following:
localCoordSystem
•
A sequence of sequences of Floats specifying the 3 × 3 matrix of direction cosines of the local
coordinate system. This argument is available only for ﬁelds with type=TENSOR or VECTOR.
•
A sequence of matrices of ﬂoats specifying the direction cosines of the local coordinates
systems, where the sequence is the same length as data. If localCoordSystem is a matrix, a
different local coordinate system applies to each data value.
User supplied values of localCoordSystem are transposed before storing in the database.
Return value
None.
Abaqus Scripting Reference Guide
1650
FieldOutput object

Exceptions
odbException: Transformation not allowed
for scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is speciﬁed
for scalar data:
addData(...)
This method adds the data from a ﬁeld created using the getSubset method and mathematical operators to the
database. The user must create a ﬁeld to contain the new data and then use the addData method to assign the data
from the ﬁelds.
Required arguments
A FieldOutput object specifying the data to add.
ﬁeld
Optional arguments
None.
Return value
None.
Exceptions
odbException: Transformation not allowed
for scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is speciﬁed
for scalar data:
addData(...)
This method adds data to a FieldOutput object.
Required arguments
A SymbolicConstant specifying the position of the output. Possible values are:
position
•
NODAL, specifying the values calculated at the nodes.
•
INTEGRATION_POINT, specifying the values calculated at the integration points.
•
ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated at the integration
points.
•
CENTROID, specifying the value at the centroid obtained by extrapolating results calculated at the
integration points.
•
ELEMENT_FACE_INTEGRATION_POINT, specifying the values calculated at the element face
integration points.
•
SURFACE_INTEGRATION_POINT, specifying the values calculated at the surface integration points.
Selecting this value prompts the Visualization module to calculate the sum of the values at the
ELEMENT_FACE_INTEGRATION_POINT position from multiple surfaces.
1651
Abaqus Scripting Reference Guide
FieldOutput object

An OdbSet object specifying the instance-level set deﬁning the region for addData. The set must be
deﬁned in the same output database as the output database into which the new ﬁeld output data is being
set
written. For better performance, the node or element labels in the set are preferred to be sorted in ascending
order and must be speciﬁed in the same order as the values provided for the data argument.
A sequence of sequences of Floats specifying the data values for the speciﬁed position and labels in the
set. Each row of data provides the value at one unique position. The width of each row should match the
data
number of required components for the data. The values must be given in the order that matches the ordering
of labels in the set.
The order of the element nodal data, integration point data, and section point data for beams and shells
follows the conventions deﬁned in the Abaqus Elements Guide.
Optional arguments
A SectionPoint object specifying the location in the section. AlthoughsectionPoint is an optional
argument to theaddData method, omitting the argument does have consequences for visualization.
sectionPoint
If you omit the argument when you are writing ﬁeld output data for a shell or a beam, you cannot
subsequently select the section point to display when you are displaying the ﬁeld output data using
the Visualization module.
An odb_SequenceSequenceFloat object specifying the imaginary data values for the speciﬁed
position, instance, and labels. You must provide this data when you add complex ﬁelds to the
conjugateData
output database. The order of the values follows the conventions deﬁned in the Abaqus Elements
Guide.
Return value
None.
Exceptions
odbException: Entities from multiple instances
present in set.
If you specify an odbSet containing entities from multiple
instances:
odbException: Transformation not allowed for
scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is
speciﬁed for scalar data:
getScalarField(...)
This method generates a scalar ﬁeld containing the extracted component or calculated invariant values. The new ﬁeld
will hold values for the same nodes or elements as the parent ﬁeld. Abaqus will perform this operation on only the real
part of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Required arguments
A SymbolicConstant specifying the invariant. Possible values areMAGNITUDE, MISES, TRESCA,
PRESS, INV3, MAX_PRINCIPAL, MID_PRINCIPAL, MIN_PRINCIPAL,
MAX_INPLANE_PRINCIPAL, MIN_INPLANE_PRINCIPAL, and OUTOFPLANE_PRINCIPAL.
invariant
Abaqus Scripting Reference Guide
1652
FieldOutput object

Optional arguments
None.
Return value
AFieldOutput object.
Exceptions
None.
getScalarField(...)
This method generates a scalar ﬁeld containing the extracted component or calculated invariant values. The new ﬁeld
will hold values for the same nodes or elements as the parent ﬁeld. Abaqus will perform this operation on only the real
part of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Required arguments
A String specifying the component label, such as “S11”.
componentLabel
Optional arguments
None.
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the position of the output in the element. Possible values are:
position
•
NODAL, specifying the values calculated at the nodes.
•
INTEGRATION_POINT, specifying the values calculated at the integration points.
•
ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated at the
integration points.
•
CENTROID, specifying the value at the centroid obtained by extrapolating results calculated at the
integration points.
1653
Abaqus Scripting Reference Guide
FieldOutput object

If the requested ﬁeld values are not found in the output database at the speciﬁed ELEMENT_NODAL
or CENTROID positions, they are extrapolated from the ﬁeld data at the INTEGRATION_POINT
position for the entire ﬁeld region. If the ﬁeld values are found at the speciﬁed positions, only these
ﬁeld values are returned without any extrapolation. This could potentially be only for a subset of the
ﬁeld region, depending on the output request.
A Boolean specifying whether the extrapolated data returned by this call is written to the output database.
The default value is OFF.
readOnly
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
An OdbSet specifying the region for which to extract values. For better performance, the node or
element labels in the sets are preferred to be sorted in ascending order.
region
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
A sequence of sequences of Floats specifying the 3 × 3 matrix of direction cosines.
Field values associated with the supplied coordinate system will be extracted.
localCoordSystem
Abaqus Scripting Reference Guide
1654
FieldOutput object

Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
A SectionPoint object.
sectionPoint
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
A FieldLocation object.
location
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
1655
Abaqus Scripting Reference Guide
FieldOutput object

Required arguments
None.
Optional arguments
An OdbMeshElement specifying the region for which to extract values.
region
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
An OdbMeshNode specifying the region for which to extract values.
region
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
An OdbInstance specifying the region for which to extract values.
region
Return value
A FieldOutput object.
Abaqus Scripting Reference Guide
1656
FieldOutput object

Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Required arguments
None.
Optional arguments
A String specifying the element type for which to extract values. The string must
correspond to a valid Abaqus element type.
elementType
Return value
A FieldOutput object.
Exceptions
None.
getTransformedField(...)
This method generates a new vector or tensor ﬁeld containing the transformed component values of the parent ﬁeld.
The new ﬁeld will hold values for the same nodes or elements as the parent ﬁeld. Results will be transformed based
on the orientations speciﬁed by the input DatumCsys object. Abaqus will perform this operation on only the real part
of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Required arguments
A valid DatumCsys object designating the coordinate system. Valid systems can be ﬁxed or
positioned with respect to nodes on the model and can be cartesian, cylindrical, or spherical.
datumCsys
Optional arguments
An Int specifying which axis of the coordinate system will be projected as the second
component for local result orientations. Valid values are 1, 2, or 3; the default value is 2.
projected22Axis
A Double specifying the minimum allowable angle (radians) between the speciﬁed
projection axis and the element normal. The next axis will be used for projection if this
tolerance test fails.
projectionTol
Return value
A FieldOutput object.
1657
Abaqus Scripting Reference Guide
FieldOutput object

Exceptions
odbException: Cannot apply transformation to ﬁeld
containing assembly level nodes.
The getTransformedField method throws an
exception if the ﬁeld contains any assembly level nodes.
getTransformedField(...)
This method generates a new vector or tensor ﬁeld containing the transformed component values of the parent ﬁeld.
The new ﬁeld will hold values for the same nodes or elements as the parent ﬁeld. Results will be transformed based
on the orientations speciﬁed by the input DatumCsys object. Abaqus will perform this operation on only the real part
of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Required arguments
A valid DatumCsys object designating the coordinate system. Valid systems can be ﬁxed or
positioned with respect to nodes on the model and can be cartesian, cylindrical, or spherical.
datumCsys
Optional arguments
A FieldOutput object specifying the nodal displacement vectors required by moving
coordinate systems to determine instantaneous conﬁgurations.
deformationField
An Int specifying which axis of the coordinate system will be projected as the second
component for local result orientations. Valid values are 1, 2, or 3; the default value is 2.
projected22Axis
A Double specifying the minimum allowable angle (radians) between the speciﬁed
projection axis and the element normal. The next axis will be used for projection if this
tolerance test fails.
projectionTol
Return value
A FieldOutput object.
Exceptions
odbException: Cannot apply transformation to ﬁeld
containing assembly level nodes.
The getTransformedField method throws an
exception if the ﬁeld contains any assembly level nodes.
getTransformedField(...)
This method generates a new vector or tensor ﬁeld containing the transformed component values of the parent ﬁeld.
The new ﬁeld will hold values for the same nodes or elements as the parent ﬁeld. Results will be transformed based
on the orientations speciﬁed by the input DatumCsys object. Abaqus will perform this operation on only the real part
of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Abaqus Scripting Reference Guide
1658
FieldOutput object

Required arguments
A valid DatumCsys object designating the coordinate system. Valid systems can be ﬁxed or
positioned with respect to nodes on the model and can be cartesian, cylindrical, or spherical.
datumCsys
Optional arguments
A FieldOutput object specifying the nodal displacement vectors required by moving
coordinate systems to determine instantaneous conﬁgurations.
deformationField
A FieldOutput object specifying the nodal rotational displacement vectors required by
moving coordinate systems that follow a 6-dof node, to determine instantaneous
conﬁgurations.
rotationField
An Int specifying which axis of the coordinate system will be projected as the second
component for local result orientations. Valid values are 1, 2, or 3; the default value is 2.
projected22Axis
A Double specifying the minimum allowable angle (radians) between the speciﬁed
projection axis and the element normal. The next axis will be used for projection if this
tolerance test fails.
projectionTol
Return value
A FieldOutput object.
Exceptions
odbException: Cannot apply transformation to ﬁeld
containing assembly level nodes.
The getTransformedField method throws an
exception if the ﬁeld contains any assembly level nodes.
getConnectorFieldXformedToNodeA(...)
This method generates a new vector ﬁeld containing the transformed component values of the parent connector ﬁeld
to the node A coordinate system. The new ﬁeld will hold values for the same connector elements as the parent ﬁeld.
Some connection types such as Axial, Link, Slip Ring, and Radial Thrust require that the deformationField be speciﬁed.
Required arguments
None.
Optional arguments
A FieldOutput object specifying the nodal displacement vectors required by moving
coordinate systems to determine instantaneous conﬁgurations.
deformationField
Return value
A FieldOutput object.
1659
Abaqus Scripting Reference Guide
FieldOutput object

Exceptions
odbException: Deformation ﬁeld is required for
transforming this connector ﬁeld.
The getConnectorFieldXformedToNodeA method throws
an exception if the ﬁeld requires a deformationField and the
argument is not supplied.
setComponentLabels(...)
This method sets the component labels for the FieldOutput object.
Required arguments
A sequence of Strings specifying the labels for each component of the value. The length of the
sequence must match the type. If type=TENSOR, the default value is name with the sufﬁxes
componentLabels
('11', '22', '33', '12', '13', '23'). If type=VECTOR, the default value is name with the sufﬁxes ('1',
'2', '3'). If type=SCALAR, the default value is an empty sequence.
Return value
None.
Exceptions
None.
setDataType(...)
This method sets the data type of a FieldOutput object.
Required arguments
A SymbolicConstant specifying the output type. Possible values are SCALAR, VECTOR,
TENSOR_3D_FULL, TENSOR_3D_PLANAR, TENSOR_3D_SURFACE, TENSOR_2D_PLANAR,
and TENSOR_2D_SURFACE.
type
Return value
None.
Exceptions
None.
setValidInvariants(...)
This method sets the invariants valid for the FieldOutput object.
Required arguments
A sequence of SymbolicConstants specifying which invariants should be calculated for this ﬁeld.
An empty sequence indicates that no invariants are valid for this ﬁeld. Possible values are:
validInvariants
•
MAGNITUDE
Abaqus Scripting Reference Guide
1660
FieldOutput object

•
MISES
•
TRESCA
•
PRESS
•
INV3
•
MAX_PRINCIPAL
•
MID_PRINCIPAL
•
MIN_PRINCIPAL
•
MAX_INPLANE_PRINCIPAL
•
MIN_INPLANE_PRINCIPAL
•
OUTOFPLANE_PRINCIPAL
The default value is an empty sequence.
Return value
None.
Exceptions
None.
Members
The FieldOutput object has members with the same names and descriptions as the arguments to the FieldOutput method.
In addition, the FieldOutput object can have the following members:
An Int specifying the dimension of vector or the ﬁrst dimension (number of rows) of matrix.
dim
An Int specifying the second dimension (number of columns) of matrix.
dim2
A Boolean specifying whether the data are complex.
isComplex
A FieldLocationArray object.
locations
A FieldValueArray object specifying the order of the objects in the array is determined by
the Abaqus Scripting Interface; see the data argument to the addData method for a
description of the order.
values
1661
Abaqus Scripting Reference Guide
FieldOutput object

FieldValue object
The FieldValue object represents the ﬁeld data at a point. The FieldValue object has no constructor; it is created by
the Odb object when data are added to the FieldOutput object using the addData method. For faster, bulk-data access,
see Using bulk data access to an output database.
Access
import odbAccess
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]
Members
The FieldValue object has the following members:
A SymbolicConstant specifying the position of the output in the element. Possible values
are:
position
•
NODAL, specifying the values calculated at the nodes.
•
INTEGRATION_POINT, specifying the values calculated at the integration points.
•
ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated
at the integration points.
•
ELEMENT_FACE, specifying the results obtained for surface variables such as cavity
radiation that are deﬁned for the surface facets of an element.
•
CENTROID, specifying the value at the centroid obtained by extrapolating results
calculated at the integration points.
A SymbolicConstant specifying the precision of the output in the element. Possible values
are:
precision
•
SINGLE_PRECISION, specifying that the output values are in single precision.
•
DOUBLE_PRECISION, specifying that the output values are in double precision.
An Int specifying the element label of the element containing the location. elementLabel
is available only if position=INTEGRATION_POINT, CENTROID, ELEMENT_NODAL,
or ELEMENT_FACE.
elementLabel
An Int specifying the node label of the node containing the location. nodelabel is available
only if position=ELEMENT_NODAL or NODAL.
nodeLabel
An Int specifying the integration point in the element. integrationPoint is available only if
position=INTEGRATION_POINT.
integrationPoint
A SymbolicConstant specifying the face of the element. face is available only if
position=ELEMENT_FACE.
face
Abaqus Scripting Reference Guide
1662
FieldValue object

A SymbolicConstant specifying the output type. Possible values are SCALAR, VECTOR,
TENSOR_3D_FULL, TENSOR_3D_PLANAR, TENSOR_3D_SURFACE,
TENSOR_2D_PLANAR, and TENSOR_2D_SURFACE.
type
A Float specifying the length or magnitude of the vector. magnitude is valid only when
type=VECTOR.
magnitude
A Float specifying the calculated von Mises stress. The value is valid only when the
validInvariants member includes MISES; otherwise, the value is indeterminate. Conjugate
data will be ignored in invariant calculation.
mises
A Float specifying the calculated Tresca stress. The value is valid only when the
validInvariants member includes TRESCA; otherwise, the value is indeterminate. Conjugate
data will be ignored in invariant calculation.
tresca
A Float specifying the calculated pressure stress. The value is valid only when the
validInvariants member includes PRESS; otherwise, the value is indeterminate. Conjugate
data will be ignored in invariant calculation.
press
A Float specifying the calculated third stress invariant. The value is valid only when the
validInvariants member includes INV3; otherwise, the value is indeterminate. Conjugate
data will be ignored in invariant calculation.
inv3
A Float specifying the calculated maximum principal stress. The value is valid only when
the validInvariants member includes MAX_PRINCIPAL; otherwise, the value is
indeterminate. Conjugate data will be ignored in invariant calculation.
maxPrincipal
A Float specifying the calculated intermediate principal stress. The value is valid only when
the validInvariants member includes MID_PRINCIPAL; otherwise, the value is
indeterminate. Conjugate data will be ignored in invariant calculation.
midPrincipal
A Float specifying the minimum principal stress. The value is valid only when the
validInvariants member includes MIN_PRINCIPAL; otherwise, the value is indeterminate.
Conjugate data will be ignored in invariant calculation.
minPrincipal
A Float specifying the maximum principal in-plane stress. The value is valid only when
the validInvariants member includes MAX_INPLANE_PRINCIPAL; otherwise, the value
is indeterminate. Conjugate data will be ignored in invariant calculation.
maxInPlanePrincipal
A Float specifying the calculated minimum principal in-plane stress. The value is valid
only when the validInvariants member includes MIN_INPLANE_PRINCIPAL; otherwise,
the value is indeterminate. Conjugate data will be ignored in invariant calculation.
minInPlanePrincipal
A Float specifying the calculated principal out-of-plane stress. The value is valid only when
the validInvariants member includes OUTOFPLANE_PRINCIPAL; otherwise, the value
is indeterminate. Conjugate data will be ignored in invariant calculation.
outOfPlanePrincipal
An OdbInstance object specifying the part to which the labels belong.
instance
1663
Abaqus Scripting Reference Guide
FieldValue object

A SectionPoint object.
sectionPoint
A tuple of tuples of Floats specifying the 3 × 3 matrix of Floats specifying the direction
cosines of the local coordinate system (the rotation from global to local). Each sequence
localCoordSystem
represents a row in the direction cosine matrix. localCoordSystem is available for TENSOR
data written in a local coordinate system. It is also available for VECTOR data for connector
element outputs. For connector element outputs the rotation is from local to global. If the
underlying data are in double precision, an exception will be thrown.
A tuple of tuples of Floats specifying the 3 × 3 matrix of Doubles specifying the direction
cosines of the local coordinate system (the rotation from global to local). Each sequence
localCoordSystemDouble
represents a row in the direction cosine matrix. localCoordSystemDouble is available for
TENSOR data written in a local coordinate system. It is also available for VECTOR data
for connector element outputs. For connector element outputs the rotation is from local to
global. If the underlying data are in single precision, an exception will be thrown.
A tuple of Floats specifying data in the form described by type. If type=TENSOR or
VECTOR, data is a sequence containing the components. If the underlying data are in
double precision an exception will be thrown.
data
A tuple of Floats specifying data in the form described by type. If type=TENSOR or
VECTOR, data is a sequence containing the components. If the underlying data are in
single precision, an exception will be thrown.
dataDouble
A tuple of Floats specifying data in the form described by type. If type=TENSOR or
VECTOR, conjugateData is a sequence containing the components. If the underlying data
are in double precision, an exception will be thrown.
conjugateData
A tuple of Floats specifying data in the form described by type. If type=TENSOR or
VECTOR, conjugateData is a sequence containing the components. If the underlying data
are in single precision, an exception will be thrown.
conjugateDataDouble
Abaqus Scripting Reference Guide
1664
FieldValue object

HistoryOutput object
The HistoryOutput object contains the history output at a point for the speciﬁed variable.
Access
import odbAccess
session.odbs[name].steps[name].historyRegions[name]\
.historyOutputs[name]
HistoryOutput(...)
This method creates a HistoryOutput object.
Path
session.odbs[name].steps[name].historyRegions[name].HistoryOutput
Required arguments
A String specifying the output variable name.
name
A String specifying the output variable.
description
A SymbolicConstant specifying the output type. Only SCALAR is currently supported.
type
Optional arguments
A sequence of SymbolicConstants specifying which invariants should be calculated for this
ﬁeld. Possible values are MAGNITUDE, MISES, TRESCA, PRESS, INV3,
validInvariants
MAX_PRINCIPAL, MID_PRINCIPAL, and MIN_PRINCIPAL. The default value is an empty
sequence.
Return value
A HistoryOutput object.
Exceptions
None.
addData(...)
This method adds data to the data member of the HistoryOutput object.
Required arguments
A Double specifying the frame value. frame can be speciﬁed in step time, frequency, or mode
number.
frame
1665
HistoryOutput object

A Double specifying the value of the variable at the frame value speciﬁed in frame.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
addData(...)
This method adds data to the data member of the HistoryOutput object.
Required arguments
A sequence of Floats specifying the frame values. frame can be speciﬁed in step time, frequency,
or mode number.
frame
A sequence of Floats specifying the value of the variable at the frame values speciﬁed in frame.
value
Optional arguments
None.
Return value
None.
Exceptions
If the length of frame is not the same as the length of value a ValueError is raised.
addData(...)
This method adds data to the data member of the HistoryOutput object.
Required arguments
A sequence of pairs of Floats specifying the pairs (frameValue, value) where frameValue is either time,
frequency, or mode and value is the value of the speciﬁed variable at frameValue. (This value depends
on the type of the variable.)
data
Optional arguments
None.
Abaqus Scripting Reference Guide
1666
HistoryOutput object

Return value
None.
Exceptions
None.
Members
The HistoryOutput object has members with the same names and descriptions as the arguments to the HistoryOutput
method.
In addition, the HistoryOutput object has the following members:
A tuple of pairs of Floats specifying the pairs (frameValue, value) where frameValue is either
time, frequency, or mode and value is the value of the speciﬁed variable at frameValue. (This
value depends on the type of the variable.)
data
A tuple of pairs of Floats specifying the imaginary portion of a speciﬁed complex variable at
each frame value (time, frequency, or mode). The pairs have the form (frameValue, value).
conjugateData
1667
Abaqus Scripting Reference Guide
HistoryOutput object

HistoryPoint object
The HistoryPoint object speciﬁes the point at which history data will be collected.
The HistoryPoint object is a temporary object used as an argument to the HistoryRegion method.
Access
import odbAccess
session.odbs[name].steps[name].historyRegions[name].point
HistoryPoint(...)
This method creates a HistoryPoint object for a node.
Path
odbAccess.HistoryPoint
Required arguments
An OdbMeshNode object specifying the node for which the data are to be collected.
node
Optional arguments
None.
Return value
A HistoryPoint object.
Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for an element.
Path
odbAccess.HistoryPoint
Required arguments
An OdbMeshElement object specifying the element for which the data are to be collected.
element
Optional arguments
An Int specifying the integration point. This argument is used to deﬁne a history output position of
INTEGRATION_POINT or ELEMENT_FACE_INTEGRATION_POINT. The default value is 0.
ipNumber
A SectionPoint object.
sectionPoint
Abaqus Scripting Reference Guide
1668
HistoryPoint object

A SymbolicConstant specifying the element face. This argument is used to deﬁne a history output
position of ELEMENT_FACE or ELEMENT_FACE_INTEGRATION_POINT. Possible values are:
face
•
FACE_UNKOWN, specifying this value indicates that no value has been speciﬁed.
•
FACE1, specifying this value indicates that element face 1 has been speciﬁed.
•
FACE2, specifying this value indicates that element face 2 has been speciﬁed.
•
FACE3, specifying this value indicates that element face 3 has been speciﬁed.
•
FACE4, specifying this value indicates that element face 4 has been speciﬁed.
•
FACE5, specifying this value indicates that element face 5 has been speciﬁed.
•
FACE6, specifying this value indicates that element face 6 has been speciﬁed.
•
SIDE1, specifying this value indicates that element side 1 has been speciﬁed.
•
SIDE2, specifying this value indicates element side 2 has been speciﬁed.
•
END1, specifying this value indicates that element end 1 has been speciﬁed.
•
END2, specifying this value indicates that element end 2 has been speciﬁed.
•
END3, specifying this value indicates that element end 3 has been speciﬁed.
The default value is FACE_UNKNOWN.
An OdbMeshNode object specifying the node for which the data are to be collected.
node
Return value
A HistoryPoint object.
Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for a region.
Path
odbAccess.HistoryPoint
Required arguments
An OdbSet object specifying the region for which the data are to be collected.
region
Optional arguments
None.
Return value
A HistoryPoint object.
1669
Abaqus Scripting Reference Guide
HistoryPoint object

Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for the OdbAssembly object.
Path
odbAccess.HistoryPoint
Required arguments
An OdbAssembly object specifying the assembly for which the data are to be collected.
assembly
Optional arguments
None.
Return value
A HistoryPoint object.
Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for the OdbInstance object.
Path
odbAccess.HistoryPoint
Required arguments
An OdbInstance object specifying the instance for which the data are to be collected.
instance
Optional arguments
None.
Return value
A HistoryPoint object.
Exceptions
None.
Abaqus Scripting Reference Guide
1670
HistoryPoint object

Members
The HistoryPoint object has members with the same names and descriptions as the arguments to the HistoryPoint
method.
In addition, the HistoryPoint object can have the following members:
An Int specifying the integration point. This argument is used to deﬁne a history output position of
INTEGRATION_POINT or ELEMENT_FACE_INTEGRATION_POINT. The default value is 0.
ipNumber
A SymbolicConstant specifying the element face. This argument is used to deﬁne a history output
position of ELEMENT_FACE or ELEMENT_FACE_INTEGRATION_POINT. Possible values are:
face
•
FACE_UNKOWN, specifying this value indicates that no value has been speciﬁed.
•
FACE1, specifying this value indicates that element face 1 has been speciﬁed.
•
FACE2, specifying this value indicates that element face 2 has been speciﬁed.
•
FACE3, specifying this value indicates that element face 3 has been speciﬁed.
•
FACE4, specifying this value indicates that element face 4 has been speciﬁed.
•
FACE5, specifying this value indicates that element face 5 has been speciﬁed.
•
FACE6, specifying this value indicates that element face 6 has been speciﬁed.
•
SIDE1, specifying this value indicates that element side 1 has been speciﬁed.
•
SIDE2, specifying this value indicates element side 2 has been speciﬁed.
•
END1, specifying this value indicates that element end 1 has been speciﬁed.
•
END2, specifying this value indicates that element end 2 has been speciﬁed.
•
END3, specifying this value indicates that element end 3 has been speciﬁed.
The default value is FACE_UNKNOWN.
A SymbolicConstant specifying the result position of the history point. Possible values are:
position
•
NODAL, specifying the values calculated at the nodes.
•
ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated at the
integration points.
•
INTEGRATION_POINT, specifying the values calculated at the integration points.
•
ELEMENT_FACE, specifying the results obtained for surface variables such as cavity radiation
that are deﬁned for the surface facets of an element.
•
ELEMENT_FACE_INTEGRATION_POINT, specifying the results obtained for surface variables
such as cavity radiation that are deﬁned for the surface facets of an element when the surface
facets have integration points.
•
WHOLE_ELEMENT, specifying the results obtained for whole element variables.
•
WHOLE_REGION, specifying the results for an entire region of the model.
•
WHOLE_PART_INSTANCE, specifying the results for an entire part instance of the model.
•
WHOLE_MODEL, specifying the results for the entire model.
An OdbMeshElement object specifying the element for which the data are to be collected.
element
1671
Abaqus Scripting Reference Guide
HistoryPoint object

A SectionPoint object.
sectionPoint
An OdbSet object specifying the region for which the data are to be collected.
region
An OdbAssembly object specifying the assembly for which the data are to be collected.
assembly
An OdbInstance object specifying the instance for which the data are to be collected.
instance
Abaqus Scripting Reference Guide
1672
HistoryPoint object

HistoryRegion object
The HistoryRegion object contains history data for a single location in the model.
Access
import odbAccess
session.odbs[name].steps[name].historyRegions[name]
HistoryRegion(...)
This method creates a HistoryRegion object.
Path
session.odbs[name].steps[name].HistoryRegion
Required arguments
A String specifying the name of the HistoryRegion object.
name
A String specifying the description of the HistoryRegion object.
description
A HistoryPoint object specifying the point to which the history data refer.
point
Optional arguments
None or an OdbLoadCase object specifying the load case associated with the HistoryRegion
object. The default value is None.
loadCase
Return value
A HistoryRegion object.
Exceptions
None.
getSubset(...)
This method returns a subset of the data in the HistoryRegion object.
Required arguments
A String specifying the name of the output variable to return.
variableName
Optional arguments
None.
1673
HistoryRegion object

Return value
A HistoryRegion object.
Exceptions
None.
getSubset(...)
This method returns a subset of the data in the HistoryRegion object.
Required arguments
A Float specifying the start of the subset. This is the same as the ﬁrst item in the data array member
of the HistoryOutput object.
start
Optional arguments
None.
Return value
A HistoryRegion object.
Exceptions
None.
getSubset(...)
This method returns a subset of the data in the HistoryRegion object.
Required arguments
A Float specifying the start of the subset. This is the same as the ﬁrst item in the data array
member of the HistoryOutput object.
start
A Float specifying the end of the subset.
end
Optional arguments
None.
Return value
A HistoryRegion object.
Exceptions
None.
Abaqus Scripting Reference Guide
1674
HistoryRegion object

Members
The HistoryRegion object has members with the same names and descriptions as the arguments to the HistoryRegion
method.
In addition, the HistoryRegion object can have the following members:
A SymbolicConstant specifying the position of the history output. Possible values are
NODAL, INTEGRATION_POINT, WHOLE_ELEMENT, WHOLE_REGION, and
WHOLE_MODEL.
position
A repository of HistoryOutput objects.
historyOutputs
1675
Abaqus Scripting Reference Guide
HistoryRegion object

JobData object
The JobData object describes the context in which the analysis was run.
Access
import odbAccess
session.odbs[name].jobData
Members
The JobData object has the following members:
A String specifying the name of the job.
name
A SymbolicConstant specifying the analysis code. Possible values are
ABAQUS_STANDARD, ABAQUS_EXPLICIT, and
UNKNOWN_ANALYSIS_CODE.
analysisCode
A SymbolicConstant specifying the precision. Only SINGLE_PRECISION is currently
supported. Possible values are DOUBLE_PRECISION and SINGLE_PRECISION.
precision
A String specifying the release of the analysis code.
version
A String specifying the date and time at which the analysis was run.
creationTime
A String specifying the date and time at which the database was last modiﬁed.
modiﬁcationTime
A String specifying the name of the machine on which the analysis was run.
machineName
A String specifying an odb_Sequence of productAddOns. Possible values are: Possible
values are AQUA, DESIGN, BIORID, CEL, SOLITER, and CAVPARALLEL.
productAddOns
Abaqus Scripting Reference Guide
1676
JobData object

OdbAssembly object
The OdbAssembly object has no constructor; it is created automatically when an Odb object is created. Abaqus creates
the rootAssembly member when an Odb object is created.
Access
import odbAccess
session.odbs[name].rootAssembly
ConnectorOrientation(...)
This method assigns a connector orientation to a connector region.
Required arguments
An OdbSet specifying a region.
region
Optional arguments
An OdbDatumCsys object specifying the ﬁrst connector node local coordinate system or None,
indicating the global coordinate system.
localCsys1
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation of the ﬁrst connector node is applied. Possible values are
AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis1
A Float specifying the angle of the additional rotation about the ﬁrst connector node axis. The
default value is 0.0.
angle1
A Boolean specifying whether the same orientation settings should be used for the second node
of the connector. The default value is OFF.
orient2sameAs1
An OdbDatumCsys object specifying the second connector node local coordinate system or
None, indicating the global coordinate system.
localCsys2
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation of the second connector node is applied. Possible values are
AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis2
A Float specifying the angle of the additional rotation about the second connector node axis.
The default value is 0.0.
angle2
Return value
None.
1677
OdbAssembly object

Exceptions
OdbError: Connector orientation assignment requires element set.
If region is not an element set:
SectionAssignment(...)
This method is used to assign a section on an assembly or part. Section assignment on the assembly is limited to the
connector elements only.
Required arguments
An OdbSet specifying a region.
region
A Section object.
section
Optional arguments
None.
Return value
None.
Exceptions
OdbError: Section assignment requires element set.
If region is not an element set:
addElements(...)
This method is used to deﬁne elements using nodes deﬁned at the OdbAssembly and/or OdbInstance level. For connector
elements connected to ground, specify the lone node in the connectivity. The position of the ground node cannot be
speciﬁed. This is a limitation.
Warning:
Adding elements not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Required arguments
A sequence of Ints specifying the element labels.
labels
A sequence of sequences of Ints specifying the nodal connectivity.
connectivity
A sequence of Strings specifying the instanceNames of each node in the nodal
connectivity array. If the node is deﬁned at the assembly level, the instance name should
be an empty string
instanceNames
A String specifying the element type.
type
Abaqus Scripting Reference Guide
1678
OdbAssembly object

Optional arguments
A String specifying a name for this element set. The default value is the empty
string.
elementSetName
A SectionCategory object for this element set.
sectionCategory
Return value
None.
Exceptions
OdbError: Addition of this element type is not permitted
at the assembly level
Only certain element types are permitted at the assembly
level. e.g., connector elements.
OdbError: Connectivity array must be provided for all
elements
If length of label array does not match connectivity data
length:
addNodes(...)
This method adds nodes to the OdbAssembly object using node labels and coordinates.
Warning:
Adding nodes not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Required arguments
A sequence of Ints specifying the node labels.
labels
A sequence of sequences of Floats specifying the nodal coordinates.
coordinates
Optional arguments
A String specifying a name for this node set. The default value is None.
nodeSetName
Return value
None.
Exceptions
OdbError: Number of node labels and coordinates does not
match
If length of labels does not match length of
coordinates:
OdbError: Node location speciﬁcation does not correspond
to part dimensions
If width of coordinate array does not match assembly
dimension:
1679
Abaqus Scripting Reference Guide
OdbAssembly object

RigidBody(...)
This method deﬁnes an OdbRigidBody on the assembly.
Required arguments
An OdbSet specifying the reference node assigned to the rigid body.
referenceNode
Optional arguments
A symbolic constant specify if the location of the reference node is to be deﬁned by the
user. Possible values are INPUT and CENTER_OF_MASS. The default value is INPUT.
position
A Boolean specifying an isothermal rigid body. The default value is OFF. This parameter
is used only for a fully coupled thermal stress analysis.
isothermal
An OdbSet specifying an element set assigned to the rigid body.
elset
An OdbSet specifying pin-type nodes assigned to the rigid body.
pinNodes
An OdbSet specifying tie-type nodes assigned to the rigid body.
tieNodes
An AnalyticSurface specifying the Analytic Rigid Surface assigned to the rigid body.
analyticSurface
Return value
None.
Exceptions
OdbError: Rigid body deﬁnition requires a node set.
If referenceNode is not a node set:
getMassProperties(...)
This method returns the mass properties of the element set. Only beams, trusses, shells, solids, point, nonstructural
mass, and rotary inertia elements are supported.
Required arguments
None.
Optional arguments
An OdbSet object specifying element sets or a string containing a name of the element
set. The default element set present in odb named "ALL ELEMENTS" is queried by
default.
elementSet
Abaqus Scripting Reference Guide
1680
OdbAssembly object

A Boolean specifying whether a user-speciﬁed density should be used in elements with
density errors such as undeﬁned material density. The default value is False.
specifyDensity
A double value specifying the user-speciﬁed density value to be used in elements with
density errors. The user-speciﬁed density should be greater than 0.
density
A Boolean specifying whether a user-speciﬁed thickness should be used in elements with
thickness errors such as undeﬁned thickness. The default value is False.
specifyThickness
A double value specifying the user-speciﬁed thickness value to be used in elements with
thickness errors. The user-speciﬁed thickness should be greater than 0.
thickness
A Boolean specifying if the moments of inertia should be evaluated about the center of
mass. The default value is True.
miAboutCenterOfMass
A tuple of three ﬂoats specifying the coordinates of the point about which to evaluate the
moment of inertia. By default, if the moments of inertia are not evaluated about the center
of mass, they are evaluated about the origin.
miAboutPoint
Return value
A Dictionary object with the following items:
area: None or a Float specifying the sum of the area of the speciﬁed faces. The area is computed only for one side for
shells.
areaCentroid: None or a tuple of three Floats representing the coordinates of the area centroid.
volume: None or a Float specifying the volume of the speciﬁed elements.
volumeCentroid: None or a tuple of three Floats representing the coordinates of the volume centroid.
massFromMassPerUnitSurfaceArea: None or a Float specifying the mass due to mass per unit surface area.
mass: None or a Float specifying the mass of the speciﬁed elements. It is the total mass and includes mass from
quantities such as mass per unit surface area.
centerOfMass: None or a tuple of three Floats representing the coordinates of the center of mass.
momentOfInertia: None or a tuple of six Floats representing the moments of inertia about the center of mass or about
the point speciﬁed.
warnings: A tuple of SymbolicConstants representing the problems encountered while computing the mass properties.
Possible SymbolicConstants are:
UNSUPPORTED_ENTITIES: Some unsupported entities exist in the speciﬁed elements. The mass properties are
computed only for beams, trusses, shells, solids, point and nonstructural mass elements, and rotary inertia elements.
The mass properties are not computed for axisymmetric elements, springs, connectors, gaskets, or any other elements.
MISSING_THICKNESS: For some elements, the section deﬁnitions are missing thickness values.
ZERO_THICKNESS: For some elements, the section deﬁnitions have a zero thickness value.
VARIABLE_THICKNESS: The nodal thickness or ﬁeld thickness speciﬁed for some elements has been ignored.
NON_APPLICABLE_THICKNESS: For some elements, the thickness value is not applicable to the corresponding
sections speciﬁed on the element.
MISSING_DENSITY: For some elements, the section deﬁnitions are missing material density values.
1681
Abaqus Scripting Reference Guide
OdbAssembly object

MISSING_MATERIAL_DEFINITION: For some elements, the material deﬁnition is missing.
ZERO_DENSITY: For some elements, the section deﬁnitions have a zero material density value.
UNSUPPORTED_DENSITY: For some elements, either a negative material density or a temperature-dependent density
has been speciﬁed, or the material value is missing for one or more plies in the composite section.
SHELL_OFFSETS: For shells, this method does not account for any offsets speciﬁed.
MISSING_SECTION_DEFINITION: For some elements, the section deﬁnition is missing.
UNSUPPORTED_SECTION_DEFINITION: The section deﬁnition provided for some elements is not supported.
REINFORCEMENTS: This method does not account for any reinforcements speciﬁed on the model.
SMEARED_PROPERTIES: For elements with composite section assignments, the density is smeared across the
thickness. The volume centroid and center of mass computations for a composite shell use a lumped mass approach
where the volume and mass is assumed to be lumped in the plane of the shell. As a result of these approximations the
volume centroid, center of mass and moments of inertia might be slightly inaccurate for elements with composite
section assignments.
UNSUPPORTED_NON_STRUCTURAL_MASS_ENTITIES: This method does not account for any nonstructural
mass on wires.
INCORRECT_MOMENT_OF_INERTIA: For elements with nonstructural mass per volume, the nonstructural mass
is assumed to be a point mass at the centroid of the regions. Thus, the moments of inertia might be inaccurate as the
distribution of the nonstructural mass is not accounted for. Use the mesh for accurately computing the moments of
inertia.
MISSING_BEAM_ORIENTATIONS: For some elements with beam section assignments, the beam section orientations
are missing.
UNSUPPORTED_BEAM_PROFILES: This method supports the Box, Pipe, Circular, Rectangular, Hexagonal,
Trapezoidal, I, L, T, Arbitrary, and Tapered beam proﬁles. Any other beam proﬁle is not supported.
TAPERED_BEAM_MI: Moment of inertia calculations for tapered beams are not accurate.
SUBSTRUCTURE_INCORRECT_PROPERTIES: The user-assigned density and thickness is not considered for
substructures.
Exceptions
None.
Members
The OdbAssembly object can have the following members:
A repository of OdbInstance objects.
instances
A repository of OdbSet objects specifying node sets.
nodeSets
A repository of OdbSet objects specifying element sets.
elementSets
A repository of OdbSet objects specifying surfaces.
surfaces
An OdbMeshNodeArray object.
nodes
Abaqus Scripting Reference Guide
1682
OdbAssembly object

An OdbMeshElementArray object.
elements
A repository of OdbDatumCsys objects.
datumCsyses
A SectionAssignmentArray object.
sectionAssignments
An OdbRigidBodyArray object.
rigidBodies
An OdbPretensionSectionArray object.
pretensionSections
A ConnectorOrientationArray object.
connectorOrientations
1683
Abaqus Scripting Reference Guide
OdbAssembly object

OdbDatumCsys object
The OdbDatumCsys object contains a coordinate system that can be stored in an output database. You can create the
datum coordinate system in the Visualization module during an Abaqus/CAE session and save the datum coordinate
system to the output database before you exit Abaqus/CAE. Alternatively, the analysis code can write the datum
coordinate system to the output database.
Access
import odbAccess
session.odbs[name].rootAssembly.datumCsyses[name]
DatumCsysByThreePoints(...)
This method creates an OdbDatumCsys object using three points. A datum coordinate system created with this method
results in a ﬁxed system.
Path
session.odbs[name].rootAssembly.DatumCsysByThreePoints
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the type of coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
A sequence of Floats specifying the coordinates of the origin of the datum coordinate
system.
origin
A sequence of Floats specifying the coordinates of a point on the local 1- or -axis.
point1
A sequence of Floats specifying the coordinates of a point in the 1–2 or –  plane.
point2
Optional arguments
None.
Return value
An OdbDatumCsys object.
Exceptions
None.
DatumCsysByThreeNodes(...)
This method creates an OdbDatumCsys object using the coordinates of three OdbMeshNode objects. A datum coordinate
system created with this method results in a system that follows the position of the three nodes. Results, such as those
Abaqus Scripting Reference Guide
1684
OdbDatumCsys object

for displacement, are resolved into the orientation of the datum coordinate system without regard to the position of its
origin. The last three arguments are given in the form of an OdbMeshNode object.
Path
session.odbs[name].rootAssembly.DatumCsysByThreeNodes
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the type of coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
An OdbMeshNode object specifying a node at the origin of the datum coordinate system.
origin
An OdbMeshNode object specifying a node on the local 1- or -axis.
point1
An OdbMeshNode object specifying a node in the 1–2 or –  plane.
point2
Optional arguments
None.
Return value
An OdbDatumCsys object.
Exceptions
None.
DatumCsysByThreeCircNodes(...)
This method is convenient to use where there are no nodes along the axis of a hollow cylinder or at the center of a
hollow sphere. The three nodes that you provide as arguments determine a circle in space. The center of the circle is
the origin of the datum coordinate system. The normal to the circle is parallel to the -axis of a cylindrical coordinate
system or to the -axis of a spherical coordinate system. The line from the origin to the ﬁrst node deﬁnes the -axis.
Path
session.odbs[name].rootAssembly.DatumCsysByThreeCircNodes
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the type of coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
An OdbMeshNode object that lies on the circular arc.
node1Arc
1685
Abaqus Scripting Reference Guide
OdbDatumCsys object

An OdbMeshNode object that lies on the circular arc.
node2Arc
An OdbMeshNode object that lies on the circular arc.
node3Arc
Optional arguments
None.
Return value
An OdbDatumCsys object.
Exceptions
None.
DatumCsysBy6dofNode(...)
A datum coordinate system created with this method results in a system that follows the position of a node. The node
location deﬁnes the origin of the datum coordinate system. The rotational displacement (UR1, UR2, UR3) of the node
deﬁnes the orientation of the coordinate system axes. Results, such as those for displacement, are resolved into the
orientation of the datum coordinate system without regard to the position of its origin. The last argument is given in
the form of an OdbMeshNode object.
Path
session.odbs[name].rootAssembly.DatumCsysBy6dofNode
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the type of coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
An OdbMeshNode object specifying the origin of the datum coordinate system.
origin
Optional arguments
None.
Return value
An OdbDatumCsys object.
Exceptions
None.
DatumCsys(...)
This method copies oneOdbDatumCsys object to a new OdbDatumCsys object.
Abaqus Scripting Reference Guide
1686
OdbDatumCsys object

Path
session.odbs[name].rootAssembly.DatumCsys
Required arguments
A String specifying the repository key.
name
An OdbDatumCsys object specifying the object to be copied.
datumCsys
Optional arguments
None.
Return value
An OdbDatumCsys object.
Exceptions
None.
globalToLocal(...)
This method transforms speciﬁed coordinates in the global coordinate system into this local coordinate system.
Required arguments
A tuple of three Floats representing the coordinates in the global coordinate system.
coordinates
Optional arguments
None.
Return value
A tuple of three Floats representing the coordinates in this local coordinate system.
Exceptions
None.
localToGlobal(...)
This method transforms speciﬁed coordinates in this local coordinate system into the global coordinate system.
Required arguments
A tuple of three Floats representing the coordinates in this local coordinate system.
coordinates
1687
Abaqus Scripting Reference Guide
OdbDatumCsys object

Optional arguments
None.
Return value
A tuple of three Floats representing the coordinates in the global coordinate system.
Exceptions
None.
Members
The OdbDatumCsys object has the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the type of coordinate system. Possible values are
CARTESIAN, CYLINDRICAL, and SPHERICAL.
coordSysType
A tuple of Floats specifying the coordinates of the origin of the datum coordinate system.
origin
A tuple of Floats specifying a point on the X-axis.
xAxis
A tuple of Floats specifying a point on the Y-axis.
yAxis
A tuple of Floats specifying a point on the Z-axis.
zAxis
Abaqus Scripting Reference Guide
1688
OdbDatumCsys object

OdbFrame object
The domain of the OdbFrame object is taken from the parent step.
Access
import odbAccess
session.odbs[name].steps[name].frames[i]
Frame(...)
This method creates an OdbFrame object and appends it to the frame sequence.
Path
session.odbs[name].steps[name].Frame
Required arguments
An Int specifying the frame increment number within the step. The base frame has normally
increment number 0, and the results run from 1. In case of multiple load cases, the same
increment number is duplicated for each load case.
incrementNumber
A Float specifying the value in units determined by the domain member of the Step object.
The equivalent in the time domain is stepTime; in the frequency domain the equivalent is
frequency; and in the modal domain the equivalent is mode.
frameValue
Optional arguments
A String specifying the contents of the frame. The default value is an empty string.
description
Return value
An OdbFrame object.
Exceptions
None.
Frame(...)
This constructor creates an OdbFrame object in the frequency domain and appends it to the frame sequence. The
arguments to the constructor are valid only when domain=FREQUENCY or domain=MODAL.
Path
session.odbs[name].steps[name].Frame
Required arguments
An Int specifying the eigenmode. This member is valid only if domain=MODAL.
mode
1689
OdbFrame object

A Float specifying the frequency. This member is valid only if domain=FREQUENCY or if
the procedure member of the OdbStep object=“*FREQUENCY”. The default value is 0.0.
frequency
Optional arguments
A String specifying the contents of the frame. The default value is an empty string.
description
Return value
An OdbFrame object.
Exceptions
None.
Frame(...)
This constructor creates an OdbFrame object for a speciﬁc load case and appends it to the frame sequence.
Path
session.odbs[name].steps[name].Frame
Required arguments
An OdbLoadCase object specifying the load case for the frame.
loadCase
Optional arguments
A String specifying the contents of the frame. The default value is an empty string.
description
A Float specifying the frequency. This member is valid only if domain=FREQUENCY or
if the procedure member of the OdbStep object=“*FREQUENCY”. The default value is
0.0.
frequency
Return value
An OdbFrame object.
Exceptions
None.
Members
The OdbFrame object has members with the same names and descriptions as the arguments to the Frame method.
In addition, the OdbFrame object can have the following members:
Abaqus Scripting Reference Guide
1690
OdbFrame object

An Int specifying the cyclic mode number associated with the data stored on this frame.
Only frequency analyses of cyclic symmetry models possess cyclic mode numbers.
cyclicModeNumber
A SymbolicConstant specifying the domain of the step of which the frame is a member.
Possible values are TIME, FREQUENCY, and MODAL.
domain
A Float specifying the frequency. This member is valid only if domain=FREQUENCY
or if the procedure member of the OdbStep object=“*FREQUENCY”. The default value
is 0.0.
frequency
An Int specifying the eigenmode. This member is valid only if domain=MODAL.
mode
An OdbFrame object specifying the real or imaginary portion of the data corresponding
to this cyclic symmetry mode.
associatedFrame
A repository of FieldOutput objects specifying the key to the ﬁeldOutputsrepository is a
String representing an output variable.
ﬁeldOutputs
An OdbLoadCase object specifying the load case for the frame.
loadCase
1691
Abaqus Scripting Reference Guide
OdbFrame object

OdbInstance object
A part instance is the usage of a part within an assembly.
Access
import odbAccess
session.odbs[name].rootAssembly.instances[name]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance
Instance(...)
This method creates an OdbInstance object from an OdbPart object.
Path
session.odbs[name].rootAssembly.Instance
Required arguments
A String specifying the instance name.
name
An OdbPart object.
object
Optional arguments
A sequence of sequences of three Floats specifying the rotation and translation of the part instance
in the global Cartesian coordinate system. The ﬁrst three sequences specify the new local coordinate
system with its center at the origin.
localCoordSystem
•
The ﬁrst sequence speciﬁes a point on the 1-axis.
•
The second sequence speciﬁes a point on the 2-axis.
•
The third sequence speciﬁes a point on the 3-axis.
The fourth sequence speciﬁes the translation of the local coordinate system from the origin to its
intended location.
For example, the following sequence moves a part 10 units in the X-direction with no rotation:
localCoordSystem = ((1, 0, 0), (0, 1, 0),
                                 (0, 0, 1), (10, 0, 0))
The following sequence moves a part 5 units in the X-direction with rotation:
localCoordSystem = ((0, 1, 0), (1, 0, 0),
                                 (0, 0, 1), (5, 0, 0))
transforms a part containing the two points
                                 Pt1= (1,0,0) 
                                 Pt2= (2,0,0) 
Abaqus Scripting Reference Guide
1692
OdbInstance object

to
                                 Pt1 = (0, 6, 0) 
                                 Pt2 = (0, 7, 0)                 
Return value
An OdbInstance object.
Exceptions
InvalidNameError.
assignBeamOrientation(...)
This method assigns a beam section orientation to a region of a part instance.
Required arguments
An OdbSet specifying a region on an instance.
region
A SymbolicConstant specifying the assignment method. Only a value of N1_COSINES is
currently supported.
method
A sequence of three Floats specifying the approximate local 
-direction of the beam
cross-section.
vector
Optional arguments
None.
Return value
None.
Exceptions
None.
assignMaterialOrientation(...)
This method assigns a material orientation to a region of a part instance.
Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCsys
1693
Abaqus Scripting Reference Guide
OdbInstance object

Optional arguments
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. For shells this axis is also the shell normal. Possible
values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
A SymbolicConstant specifying the stack or thickness direction of the material. Possible values
are STACK_1, STACK_2, STACK_3, and STACK_ORIENTATION. The default value is
STACK_3.
stackDirection
Return value
None.
Exceptions
None.
assignRebarOrientation(...)
This method assigns a rebar reference orientation to a region of a part instance.
Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCsys
Optional arguments
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system about
which an additional rotation is applied. For shells this axis is also the shell normal. Possible values
are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
Return value
None.
Exceptions
None.
getElementFromLabel(...)
This method is used to retrieved an element with a speciﬁc label from an instance object.
Abaqus Scripting Reference Guide
1694
OdbInstance object

Required arguments
An Int specifying the element label.
label
Optional arguments
None.
Return value
An OdbMeshElement object.
Exceptions
OdbError: Invalid element label
If no element with the speciﬁed label exists:
getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from an instance object.
Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
AnOdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
assignSection(...)
This method is used to assign a section to a region on an instance.
Required arguments
An OdbSet specifying a region on an instance.
region
A Section object.
section
Optional arguments
None.
1695
Abaqus Scripting Reference Guide
OdbInstance object

Return value
None.
Exceptions
OdbError: Section assignment requires element set.
If region is not an element set:
OdbError: Section assignment requires element set from this
part instance.
If the element set is not from the current instance:
AnalyticRigidSurf2DPlanar(...)
This method is used to deﬁne a two-dimensional AnalyticSurface object on the instance.
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Exceptions
OdbError: 2D-Planar Analytic Rigid Surface can be deﬁned only
if the instance is of type TWO_D_PLANAR or AXISYMMETRIC.
If OdbPart associated with the part instance
is of type THREE_D:
AnalyticRigidSurfExtrude(...)
This method is used to deﬁne a three-dimensional cylindrical AnalyticSurface on the instance.
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Abaqus Scripting Reference Guide
1696
OdbInstance object

Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
A sequence of sequences of Floats specifying the global coordinates of points used to
deﬁne the local coordinate system.
localCoordData
Return value
None.
Exceptions
OdbError: Analytic Rigid Surface of type CYLINDER can be
deﬁned only if the instance is of type THREE_D.
If OdbPart associated with the part instance is
not of type THREE_D:
AnalyticRigidSurfRevolve(...)
This method is used to deﬁne a three-dimensional AnalyticSurface of revolution on the instance.
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
A sequence of sequences of Floats specifying the global coordinates of points used to
deﬁne the local coordinate system.
localCoordData
Return value
None.
Exceptions
OdbError: Analytic Rigid Surface of type REVOLUTION can
be deﬁned only if the instance is of type THREE_D.
If OdbPart associated with the part instance is
not of type THREE_D:
RigidBody(...)
This method deﬁnes an OdbRigidBody on the instance.
1697
Abaqus Scripting Reference Guide
OdbInstance object

Required arguments
An OdbSet specifying the reference node assigned to the rigid body.
referenceNode
Optional arguments
A symbolic constant specify if the location of the reference node is to be deﬁned by the
user. Possible values are INPUT, and CENTER_OF_MASS. The default value is INPUT.
position
A Boolean specifying an isothermal rigid body. The default value is OFF. This parameter
is used only for a fully-coupled thermal stress analysis.
isothermal
An OdbSet specifying an element set assigned to the rigid body.
elset
An OdbSet specifying pin-type nodes assigned to the rigid body.
pinNodes
An OdbSet specifying tie-type nodes assigned to the rigid body.
tieNodes
An AnalyticSurface specifying the Analytic Rigid Surface assigned to the rigid body.
analyticSurface
Return value
None.
Exceptions
OdbError: Rigid body deﬁnition requires a node set.
If referenceNode is not a node set:
getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from an instance object.
Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
An OdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
Abaqus Scripting Reference Guide
1698
OdbInstance object

getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from an instance object.
Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
An OdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
Members
The OdbInstance object can have the following members:
A String specifying the instance name.
name
A SymbolicConstant specifying the type of the Part object. Only a value of
DEFORMABLE_BODY is currently supported.
type
A SymbolicConstant specifying the dimensionality of the Part object. Possible values
are THREE_D, TWO_D_PLANAR, AXISYMMETRIC, and
UNKNOWN_DIMENSION.
embeddedSpace
A SymbolicConstant specifying the state of the Instance as modiﬁed by the analysis.
This member is only present if the Instance is part of the RootAssemblyState tree.
Possible values are:
resultState
•
PROPAGATED, specifying that the value is the same as the previous frame or
the original rootAssembly.
•
MODIFIED, specifying that the geometry of the instance has been changed at
this frame.
The default value is PROPAGATED.
An OdbMeshNodeArray object.
nodes
An OdbMeshElementArray object.
elements
A repository of OdbSet objects specifying node sets.
nodeSets
1699
Abaqus Scripting Reference Guide
OdbInstance object

A repository of OdbSet objects specifying element sets.
elementSets
A repository of OdbSet objects specifying surfaces.
surfaces
A SectionAssignmentArray object.
sectionAssignments
An OdbRigidBodyArray object.
rigidBodies
A BeamOrientationArray object.
beamOrientations
A MaterialOrientationArray object.
materialOrientations
A RebarOrientationArray object.
rebarOrientations
An AnalyticSurface object specifying analytic Surface deﬁned on the instance.
analyticSurface
Abaqus Scripting Reference Guide
1700
OdbInstance object

OdbLoadCase object
The OdbLoadCase object describes a load case.
Access
import odbAccess
session.odbs[name].steps[name].frames[i].loadCase
session.odbs[name].steps[name].historyRegions[name].loadCase
session.odbs[name].steps[name].loadCases[name]
LoadCase(...)
This method creates an OdbLoadCase object.
Path
session.odbs[name].steps[name].LoadCase
Required arguments
A String specifying the name of the OdbLoadCase object.
name
Optional arguments
None.
Return value
An OdbLoadCase object.
Exceptions
None.
Members
The OdbLoadCase object has members with the same names and descriptions as the arguments to the LoadCase
method.
1701
OdbLoadCase object

OdbMeshElementArray object
A sequence of OdbMeshElement object.
Access
import odbAccess
session.odbs[name].parts[name].elements
session.odbs[name].parts[name].elementSets[name].elements
session.odbs[name].parts[name].nodeSets[name].elements
session.odbs[name].parts[name].surfaces[name].elements
session.odbs[name].rootAssembly.elements
session.odbs[name].rootAssembly.elementSets[name].elements
session.odbs[name].rootAssembly.instances[name].elements
session.odbs[name].rootAssembly.instances[name].elementSets[name]\
.elements
session.odbs[name].rootAssembly.instances[name].nodeSets[name]\
.elements
session.odbs[name].rootAssembly.instances[name].surfaces[name]\
.elements
session.odbs[name].rootAssembly.nodeSets[name].elements
session.odbs[name].rootAssembly.surfaces[name].elements
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elements
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elementSets[name].elements
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodeSets[name].elements
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.surfaces[name].elements
getMemberFromAll(...)
This method returns a tuple containing a member or members for each OdbMeshElement in the OdbMeshElementArray.
Required arguments
A String specifying a OdbMeshElement member name or a tuple of member names.
member
Optional arguments
None.
Return value
A tuple of member values (one for each OdbMeshElement) or a tuple of tuples of member values (if you speciﬁed a
tuple of member names in the member argument).
Exceptions
AttributeError: 'OdbMeshElement' object has no attribute ''
An exception occurs if no such member exists.
Abaqus Scripting Reference Guide
1702
OdbMeshElementArray object

Members
The OdbMeshElementArray object has no members.
1703
Abaqus Scripting Reference Guide
OdbMeshElementArray object

OdbMeshElement object
OdbMeshElement objects are created with the part.addElements or rootAssembly.addElements methods.
Access
import odbAccess
session.odbs[name].parts[name].elements[i]
session.odbs[name].parts[name].elementSets[name].elements[i]
session.odbs[name].parts[name].nodeSets[name].elements[i]
session.odbs[name].parts[name].surfaces[name].elements[i]
session.odbs[name].rootAssembly.elements[i]
session.odbs[name].rootAssembly.elementSets[name].elements[i]
session.odbs[name].rootAssembly.instances[name].elements[i]
session.odbs[name].rootAssembly.instances[name].elementSets[name]\
.elements[i]
session.odbs[name].rootAssembly.instances[name].nodeSets[name]\
.elements[i]
session.odbs[name].rootAssembly.instances[name].surfaces[name]\
.elements[i]
session.odbs[name].rootAssembly.nodeSets[name].elements[i]
session.odbs[name].rootAssembly.surfaces[name].elements[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elements[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elementSets[name].elements[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodeSets[name].elements[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.surfaces[name].elements[i]
getNormal(...)
This method returns the normal direction for the element face.
Required arguments
The value of faceIndex is 0 for a shell element and can range from 0 to 5 for a solid
element.
faceIndex
Optional arguments
Name of the step.
stepName
A Double specifying the value at which the frame is required. frameValue can be the total ﬁme
or frequency.
frameValue
A SymbolicConstant specifying which frame to return if there is no frame at the exact frame
value. Possible values are CLOSEST, BEFORE, AFTER, and EXACT. The default value is
CLOSEST.
When match=CLOSEST, Abaqus returns the closest frame. If the frame value requested is
exactly halfway between two frames, Abaqus returns the frame after the value.
match
When match=EXACT, Abaqus raises an exception if the exact frame value does not exist.
Abaqus Scripting Reference Guide
1704
OdbMeshElement object

Return value
A tuple of 3 ﬂoats representing the unit normal vector. If the element face is collapsed such that a normal cannot be
computed, a zero-length vector is returned.
Exceptions
OdbError: Frame not found.
If the exact frame is not found:
OdbError: Step is not present in the ODB.
If the step name is not found:
frameValueOdbError: stepName should be speciﬁed with
frameValue.
If frameValue is not provided and stepName is empty:
Members
The OdbMeshElement object can have the following members:
An Int specifying the element label.
label
A String specifying the element type.
type
A SectionCategory object specifying the element section properties.
sectionCategory
A tuple of Ints specifying the element connectivity. For connector elements connected
to ground, the other node is repeated in the connectivity data. The position of the ground
connectivity
node cannot be ascertained. This is a limitation. It is important to note the difference
with MeshElement object of MDB where the connectivity is node indices instead of
node labels.
A tuple of Strings specifying the instance names for nodes in the element connectivity.
instanceNames
A String specifying the instance name.
instanceName
1705
Abaqus Scripting Reference Guide
OdbMeshElement object

OdbMeshNodeArray object
A sequence of OdbMeshNode object
Access
import odbAccess
session.odbs[name].parts[name].nodes
session.odbs[name].parts[name].nodeSets[name].nodes
session.odbs[name].parts[name].surfaces[name].nodes
session.odbs[name].rootAssembly.instances[name].nodes
session.odbs[name].rootAssembly.instances[name].nodeSets[name]\
.nodes
session.odbs[name].rootAssembly.instances[name].surfaces[name]\
.nodes
session.odbs[name].rootAssembly.nodes
session.odbs[name].rootAssembly.nodeSets[name].nodes
session.odbs[name].rootAssembly.surfaces[name].nodes
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodes
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodeSets[name].nodes
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.surfaces[name].nodes
getMemberFromAll(...)
This method returns a tuple containing a member or members for each OdbMeshNode in the OdbMeshNodeArray.
Required arguments
A String specifying a OdbMeshNode member name or a tuple of member names.
member
Optional arguments
None.
Return value
A tuple of member values (one for each OdbMeshNode) or a tuple of tuples of member values (if you speciﬁed a tuple
of member names in the member argument).
Exceptions
AttributeError: 'OdbMeshNode' object has no attribute ''
An exception occurs if no such member exists.
Members
The OdbMeshNodeArray object has no members.
Abaqus Scripting Reference Guide
1706
OdbMeshNodeArray object

OdbMeshNode object
OdbMeshNode objects are created with the part.addNodes method.
Access
import odbAccess
session.odbs[name].parts[name].nodes[i]
session.odbs[name].parts[name].nodeSets[name].nodes[i]
session.odbs[name].parts[name].surfaces[name].nodes[i]
session.odbs[name].rootAssembly.instances[name].nodes[i]
session.odbs[name].rootAssembly.instances[name].nodeSets[name]\
.nodes[i]
session.odbs[name].rootAssembly.instances[name].surfaces[name]\
.nodes[i]
session.odbs[name].rootAssembly.nodes[i]
session.odbs[name].rootAssembly.nodeSets[name].nodes[i]
session.odbs[name].rootAssembly.surfaces[name].nodes[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodes[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodeSets[name].nodes[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.surfaces[name].nodes[i]
Members
The OdbMeshNode object has the following members:
An Int specifying the node label.
label
A tuple of Floats specifying the nodal coordinates in the global Cartesian coordinate
system.
coordinates
1707
OdbMeshNode object

OdbPart object
The OdbPart object is similar to the kernel Part object and contains nodes and elements, but not geometry.
Access
import odbAccess
session.odbs[name].parts[name]
Part(...)
This method creates an OdbPart object. Nodes and elements are added to this object at a later stage.
Path
session.odbs[name].Part
Required arguments
A String specifying the part name.
name
A SymbolicConstant specifying the dimensionality of the Part object. Possible values are
THREE_D, TWO_D_PLANAR, and AXISYMMETRIC.
embeddedSpace
A SymbolicConstant specifying the type of the Part object. Possible values are
DEFORMABLE_BODY and ANALYTIC_RIGID_SURFACE.
type
Optional arguments
None.
Return value
An OdbPart object.
Exceptions
None.
addElements(...)
This method adds elements to an OdbPart object using element labels and nodal connectivity.
Warning:
Adding elements not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Required arguments
A sequence of Ints specifying the element labels.
labels
Abaqus Scripting Reference Guide
1708
OdbPart object

A sequence of sequences of Ints specifying the nodal connectivity.
connectivity
A String specifying the element type.
type
Optional arguments
A String specifying a name for this element set. The default value is the empty
string.
elementSetName
A SectionCategory object for this element set.
sectionCategory
Return value
None.
Exceptions
None.
addElements(...)
This method adds elements to an OdbPart object using a sequence of element labels and nodal connectivity.
Warning:
Adding elements not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Required arguments
A sequence of sequences of Ints specifying the element labels and nodal connectivity, in
the form ((label, c1, c2, c3, c4), (label, c1, c2, c3, c4), ...).
elementData
A String specifying the element type. The value can be user deﬁned.
type
Optional arguments
A String specifying a name for this element set. The default value is None.
elementSetName
A SectionCategory object for this element set.
sectionCategory
Return value
None.
Exceptions
None.
1709
Abaqus Scripting Reference Guide
OdbPart object

addNodes(...)
This method adds nodes to an OdbPart object using node labels and coordinates.
Warning:
Adding nodes not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Required arguments
A sequence of Ints specifying the node labels.
labels
A sequence of sequences of Floats specifying the nodal coordinates.
coordinates
Optional arguments
A String specifying a name for this node set. The default value is None.
nodeSetName
Return value
None.
Exceptions
None.
addNodes(...)
This method adds nodes to an OdbPart object using a sequence of node labels and coordinates.
Warning:
Adding nodes not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Required arguments
A sequence of tuples specifying the node labels and coordinates, in the form ((label, x, y,
z), (label, x, y, z), ...).
nodeData
Optional arguments
A String specifying a name for this node set. The default value is None.
nodeSetName
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
1710
OdbPart object

assignBeamOrientation(...)
This method assigns a beam section orientation to a region of a part instance.
Required arguments
An OdbSet specifying a region on an instance.
region
A SymbolicConstant specifying the assignment method. Only a value of N1_COSINES is
currently supported.
method
A sequence of three Floats specifying the approximate local  
 -direction of the beam
cross-section.
vector
Optional arguments
None.
Return value
None.
Exceptions
None.
assignMaterialOrientation(...)
This method assigns a material orientation to a region of a part instance.
Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCSys
Optional arguments
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. For shells this axis is also the shell normal. Possible
values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
A SymbolicConstant specifying the stack or thickness direction of the material. Possible values
are STACK_1, STACK_2, STACK_3, and STACK_ORIENTATION. The default value is
STACK_3.
stackDirection
1711
Abaqus Scripting Reference Guide
OdbPart object

Return value
None.
Exceptions
None.
assignRebarOrientation(...)
This method assigns a rebar reference orientation to a region of a part instance.
Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCsys
Optional arguments
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system about
which an additional rotation is applied. For shells this axis is also the shell normal. Possible values
are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
Return value
None.
Exceptions
None.
getElementFromLabel(...)
This method is used to retrieved an element with a speciﬁc label from a part object.
Required arguments
An Int specifying the element label.
label
Optional arguments
None.
Return value
An OdbMeshElement object.
Abaqus Scripting Reference Guide
1712
OdbPart object

Exceptions
OdbError: Invalid element label
If no element with the speciﬁed label exists:
getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from a part object.
Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
An OdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
AnalyticRigidSurf2DPlanar(...)
This method is used to deﬁne a two-dimensional AnalyticSurface object on the part object.
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Exceptions
OdbError: 2D-Planar Analytic Rigid Surface can be deﬁned only if the part
is of type TWO_D_PLANAR or AXISYMMETRIC.
If OdbPart is of type THREE_D:
1713
Abaqus Scripting Reference Guide
OdbPart object

AnalyticRigidSurfExtrude(...)
This method is used to deﬁne a three-dimensional cylindrical AnalyticSurface on the part object.
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Exceptions
OdbError: Analytic Rigid Surface of type CYLINDER can be deﬁned
only if the part is of type THREE_D.
If OdbPart is not of type THREE_D:
AnalyticRigidSurfRevolve(...)
This method is used to deﬁne a three-dimensional AnalyticSurface of revolution on the part object.
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Abaqus Scripting Reference Guide
1714
OdbPart object

Exceptions
OdbError: Analytic Rigid Surface of type REVOLUTION can be deﬁned
only if the part is of type THREE_D.
If OdbPart is not of type THREE_D:
RigidBody(...)
This method deﬁnes an OdbRigidBody on the part object.
Required arguments
An OdbSet specifying the reference node assigned to the rigid body.
referenceNode
Optional arguments
A symbolic constant specify if the location of the reference node is to be deﬁned by the
user. Possible values are INPUT and CENTER_OF_MASS. The default value is INPUT.
position
A Boolean specifying an isothermal rigid body. The default value is OFF. This parameter
is used only for a fully-coupled thermal stress analysis.
isothermal
An OdbSet specifying an element set assigned to the rigid body.
elset
An OdbSet specifying pin-type nodes assigned to the rigid body.
pinNodes
An OdbSet specifying tie-type nodes assigned to the rigid body.
tieNodes
An AnalyticSurface specifying the Analytic Rigid Surface assigned to the rigid body.
analyticSurface
Return value
None.
Exceptions
OdbError: Rigid body deﬁnition requires a node set.
If referenceNode is not a node set:
Members
The OdbPart object has members with the same names and descriptions as the arguments to the Part  method.
In addition, the OdbPart object can have the following members:
An OdbMeshNodeArray object.
nodes
An OdbMeshElementArray object.
elements
A repository of OdbSet objects specifying node sets.
nodeSets
1715
Abaqus Scripting Reference Guide
OdbPart object

A repository of OdbSet objects specifying element sets.
elementSets
A repository of OdbSet objects specifying surfaces.
surfaces
A SectionAssignmentArray object.
sectionAssignments
A BeamOrientationArray object.
beamOrientations
A MaterialOrientationArray object.
materialOrientations
A RebarOrientationArray object.
rebarOrientations
An OdbRigidBodyArray object.
rigidBodies
An AnalyticSurface object specifying analytic Surface deﬁned on the
instance.
analyticSurface
Abaqus Scripting Reference Guide
1716
OdbPart object

OdbPretensionSection object
The pretension section object is used to deﬁne an assembly load. It associates a pretension node with a pretension
section.
Access
import odbAccess
session.odbs[name].rootAssembly.pretensionSections[i]
Members
The OdbPretensionSection object can have the following members:
An OdbSet object specifying the node set containing the pretension node.
node
An OdbSet object specifying the element set that deﬁnes the pretension section.
element
An OdbSet object specifying the surface set that deﬁnes the pretension section.
surface
A tuple of Floats specifying the components of the normal to the pretension section.
normal
1717
OdbPretensionSection object

OdbRigidBody object
The Rigid body object is used to bind a set of elements and/or a set of nodes and/or an analytical surface with a reference
node.
Access
import odbAccess
session.odbs[name].parts[name].rigidBodies[i]
session.odbs[name].rootAssembly.instances[name].rigidBodies[i]
session.odbs[name].rootAssembly.rigidBodies[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.rigidBodies[i]
RigidBody(...)
This method creates a OdbRigidBody object.
Path
session.odbs[name].rootAssembly.instances[name].RigidBody
session.odbs[name].rootAssembly.RigidBody
Required arguments
An OdbSet object specifying the reference node set associated with the rigid body.
referenceNode
Optional arguments
A SymbolicConstant specifying the speciﬁc location of the OdbRigidBody reference node
relative to the rest of the rigid body. Possible values are INPUT and CENTER_OF_MASS.
The default value is INPUT.
position
A Boolean specifying specify whether the OdbRigidBody can have temperature gradients
or be isothermal. This is used only for fully coupled thermal-stress analysis The default value
is ON.
isothermal
An OdbSet object specifying the element set whose motion is governed by the motion of
rigid body reference node.
elements
An OdbSet object specifying the node set which have both translational and rotational degrees
of freedom associated with the rigid body.
tieNodes
An OdbSet object specifying the node set which have only translational degrees of freedom
associated with the rigid body.
pinNodes
An AnalyticSurface object specifying the analytic surface whose motion is governed by the
motion of rigid body reference node.
analyticSurface
Abaqus Scripting Reference Guide
1718
OdbRigidBody object

Return value
An OdbRigidBody object.
Exceptions
None.
Members
The OdbRigidBody object has members with the same names and descriptions as the arguments to the RigidBody
method.
1719
Abaqus Scripting Reference Guide
OdbRigidBody object

OdbSequenceAnalyticSurfaceSegment object
A sequence of AnalyticSurfaceSegment describing an analytic surface proﬁle.
Access
import odbAccess
session.odbs[name].parts[name].analyticSurface.segments
session.odbs[name].rootAssembly.instances[name].analyticSurface\
.segments
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.analyticSurface.segments
AnalyticSurfaceProfile()
This method creates a OdbSequenceAnalyticSurfaceSegment object.
Path
odbAccess.AnalyticSurfaceProﬁle
Arguments
None.
Return value
An OdbSequenceAnalyticSurfaceSegment object.
Exceptions
None.
Start(...)
This method adds a AnalyticSurfaceSegment describing the ﬁrst segment of the surface proﬁle.
Required arguments
A sequence of Floats specifying the coordinates of start point.
origin
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
1720
OdbSequenceAnalyticSurfaceSegment object

Line(...)
This method adds a AnalyticSurfaceSegment describing the line segment of the surface proﬁle.
Required arguments
A sequence of Floats specifying the coordinates of end point.
endPoint
Optional arguments
None.
Return value
None.
Exceptions
None.
Circle(...)
This method adds a AnalyticSurfaceSegment describing a circular segment of the surface proﬁle.
Required arguments
A sequence of Floats specifying the coordinates of center of the circular segment.
center
A sequence of Floats specifying the coordinates of end point of the circular segment.
endPoint
Optional arguments
None.
Return value
None.
Exceptions
None.
Parabola(...)
This method adds a AnalyticSurfaceSegment describing a parabolic segment of the surface proﬁle.
Required arguments
A sequence of Floats specifying the coordinates of middle point of the parabolic
segment.
middlePoint
1721
Abaqus Scripting Reference Guide
OdbSequenceAnalyticSurfaceSegment object

A sequence of Floats specifying the coordinates of end point of the parabolic segment.
endPoint
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The OdbSequenceAnalyticSurfaceSegment object has no members.
Abaqus Scripting Reference Guide
1722
OdbSequenceAnalyticSurfaceSegment object

OdbSet object
The set objects are used to identify regions of a model.
Access
import odbAccess
session.odbs[name].parts[name].elementSets[name]
session.odbs[name].parts[name].nodeSets[name]
session.odbs[name].parts[name].surfaces[name]
session.odbs[name].rootAssembly.elementSets[name]
session.odbs[name].rootAssembly.instances[name].elementSets[name]
session.odbs[name].rootAssembly.instances[name].nodeSets[name]
session.odbs[name].rootAssembly.instances[name].surfaces[name]
session.odbs[name].rootAssembly.nodeSets[name]
session.odbs[name].rootAssembly.surfaces[name]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elementSets[name]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodeSets[name]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.surfaces[name]
NodeSet(...)
This method creates a node set from an array of OdbMeshNode objects (for part instance-level sets) or from a sequence
of arrays of OdbMeshNode objects (for assembly-level sets).
Path
session.odbs[name].parts[name].NodeSet
session.odbs[name].rootAssembly.instances[name].NodeSet
session.odbs[name].rootAssembly.NodeSet
Required arguments
A String specifying the name of the set and the repository key.
name
A sequence of OdbMeshNode objects. For example, for a part:
nodes=part1.nodes[1:5]
nodes
For an assembly:
nodes=(instance1.nodes[6:7], instance2.nodes[1:5])
Optional arguments
None.
Return value
An OdbSet object.
1723
OdbSet object

Exceptions
InvalidNameError.
NodeSetFromNodeLabels(...)
This method creates a node set from a sequence of node labels.
Path
session.odbs[name].parts[name].NodeSetFromNodeLabels
session.odbs[name].rootAssembly.instances[name].NodeSetFromNodeLabels
session.odbs[name].rootAssembly.NodeSetFromNodeLabels
Required arguments
A String specifying the name of the set and the repository key.
name
A sequence of node labels. A node label is a sequence of Int node identiﬁers. For example,
for a part:
nodeLabels=(2,3,5,7)
nodeLabels
For an assembly:
nodeLabels=(('Instance-1', (2,3,5,7)), ('Instance-2', (1,2,3)))
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
InvalidNameError.
ElementSet(...)
This method creates an element set from an array of OdbMeshElement objects (for part instance-level sets) or from a
sequence of arrays of OdbMeshElement objects (for assembly-level sets).
Path
session.odbs[name].parts[name].ElementSet
session.odbs[name].rootAssembly.instances[name].ElementSet
Required arguments
A String specifying the name of the set and the repository key.
name
Abaqus Scripting Reference Guide
1724
OdbSet object

A sequence of OdbMeshElement objects. For example, for a part:
elements=instance1.elements[1:5]
elements
For an assembly:
elements=(instance1.elements[1:5], instance2.elements[1:5])
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
InvalidNameError.
ElementSetFromElementLabels(...)
This method creates an element set from a sequence of element labels.
Path
session.odbs[name].parts[name].ElementSetFromElementLabels
session.odbs[name].rootAssembly.instances[name].ElementSetFromElementLabels
session.odbs[name].rootAssembly.ElementSetFromElementLabels
Required arguments
A String specifying the name of the set and the repository key.
name
A sequence of element labels. An element label is a sequence of Int element identiﬁers. For
example, for a part:
elementLabels=(2,3,5,7)
elementLabels
For an assembly:
elementLabels=(('Instance-1', (2,3,5,7)), ('Instance-2', 
(1,2,3)))
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
InvalidNameError.
1725
Abaqus Scripting Reference Guide
OdbSet object

MeshSurface(...)
This method creates a surface from the element and side identiﬁers for the assembly.
Path
session.odbs[name].parts[name].MeshSurface
session.odbs[name].rootAssembly.instances[name].MeshSurface
session.odbs[name].rootAssembly.MeshSurface
Required arguments
A String specifying the name of the set and the repository key.
name
A sequence of sequences. Each sequence consists of an element sequence and a side identiﬁer. The
possible side identiﬁers depend on the type of element, as described in the following table:
meshSurfaces
Side identiﬁers
Sequence of elements
FACE1, FACE2, FACE3, FACE4, FACE5, FACE6
Solid elements
SIDE1, SIDE2
Three-dimensional shell elements
FACE1, FACE2, FACE3, FACE4
Two-dimensional elements
END, END2
Wire elements
For example:
side1Elements=instance1.elements[217:218]
side2Elements=instance2.elements[100:105]
assembly.MeshSurface(name='Surf-1',
meshSurfaces=((side1Elems,SIDE1),
(side2Elems,SIDE2)))
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
InvalidNameError.
MeshSurfaceFromElsets(...)
This method creates a mesh surface from a sequence of element sets.
Path
session.odbs[name].parts[name].MeshSurfaceFromElsets
Abaqus Scripting Reference Guide
1726
OdbSet object

session.odbs[name].rootAssembly.instances[name].MeshSurfaceFromElsets
session.odbs[name].rootAssembly.MeshSurfaceFromElsets
Required arguments
A String specifying the name of the set and the repository key.
name
A sequence of element sets. For example,
elementSetSeq=((elset1,SIDE1),(elset2,SIDE2))
elementSetSeq
where
elset1=session.odbs[name].rootAssembly.elementSets['Clutch']
and SIDE1 and SIDE2 indicate the side of the element set.
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
InvalidNameError.
MeshSurfaceFromLabels(...)
This method creates a mesh surface from a sequence of surface labels.
Path
session.odbs[name].parts[name].MeshSurfaceFromLabels
session.odbs[name].rootAssembly.instances[name].MeshSurfaceFromLabels
session.odbs[name].rootAssembly.MeshSurfaceFromLabels
Required arguments
A String specifying the name of the set and the repository key.
name
A sequence of surface labels. For example,
surfaceLabels=(('Instance-1', ((10, FACE1), (11, FACE2))), 
('Instance-2', ((10, FACE3), (12, FACE4))))
surfaceLabels
where 10 is an element number and FACE1 indicates the side of the element.
Optional arguments
None.
1727
Abaqus Scripting Reference Guide
OdbSet object

Return value
An OdbSet object.
Exceptions
InvalidNameError.
Members
The OdbSet object can have the following members:
A String specifying the name of the set and the repository key.
name
A tuple of Strings specifying the namespaces for the nodes, elements, and faces; None if
the set is on a Part or an OdbInstance object.
instanceNames
An OdbMeshNodeArray object specifying the nodes of an OdbSet. If a set spans more than
one part instance, this member is a sequence of sequences for each part instance.
nodes
An OdbMeshElementArray object specifying the elements of an OdbSet. If a set spans more
than one part instance, this member is a sequence of sequences for each part instance.
elements
A tuple of SymbolicConstants specifying the element face. If a set spans more than one part
instance, this member is a sequence of sequences for each part instance.
faces
A repository of an OdbInstance object.
instances
A Boolean specifying whether the set is internal.
isInternal
Abaqus Scripting Reference Guide
1728
OdbSet object

OdbStep object
An output database contains the same steps of the model database that originated it.
Access
import odbAccess
session.odbs[name].steps[name]
Step(...)
This method creates an OdbStep object.
Path
session.odbs[name].Step
Required arguments
A String specifying the repository key.
name
A String specifying the step description.
description
A SymbolicConstant specifying the domain of the step. Possible values are TIME,
FREQUENCY, ARC_LENGTH, and MODAL.
domain
The type of OdbFrame object that can be created for this step is based on the value of the
domain argument.
Optional arguments
A Float specifying the time period of the step. timePeriod is required if domain=TIME; otherwise,
this argument is not applicable. The default value is 0.0.
timePeriod
A String specifying the preceding step. If previousStepName is the empty string, the last step in
the repository is used. If previousStepName is not the last step, this will result in a change to the
previousStepName
previousStepName member of the step that was in that position. A special value 'Initial' refers to
the internal initial model step and might be used exclusively for inserting a new step at the ﬁrst
position before any other existing steps. The default value is an empty string.
A String specifying the step procedure. The default value is an empty string. The following is the
list of valid procedures:
*ANNEAL
*BUCKLE
procedure
*COMPLEX FREQUENCY
*COUPLED TEMPERATURE-DISPLACEMENT
*COUPLED TEMPERATURE-DISPLACEMENT, CETOL
*COUPLED TEMPERATURE-DISPLACEMENT, STEADY STATE
*COUPLED THERMAL-ELECTRICAL, STEADY STATE
*COUPLED THERMAL-ELECTRICAL
*COUPLED THERMAL-ELECTRICAL, DELTMX
*DYNAMIC
1729
OdbStep object

*DYNAMIC, DIRECT
*DYNAMIC, EXPLICIT
*DYNAMIC, SUBSPACE
*DYNAMIC TEMPERATURE-DISPLACEMENT, EXPLICT
*ELECTROMAGNETIC, HIGH FREQUENCY, TIME HARMONIC
*ELECTROMAGNETIC, LOW FREQUENCY, TIME DOMAIN
*ELECTROMAGNETIC, LOW FREQUENCY, TIME DOMAIN, DIRECT
*ELECTROMAGNETIC, LOW FREQUENCY, TIME HARMONIC
*FREQUENCY
*GEOSTATIC
*HEAT TRANSFER
*HEAT TRANSFER, DELTAMX=__ 
*HEAT TRANSFER, STEADY STATE
*MAGNETOSTATIC
*MAGNETOSTATIC, DIRECT
*MASS DIFFUSION
*MASS DIFFUSION, DCMAX=
*MASS DIFFUSION, STEADY STATE
*MODAL DYNAMIC
*RANDOM RESPONSE
*RESPONSE SPECTRUM
*SOILS
*SOILS, CETOL/UTOL
*SOILS, CONSOLIDATION
*SOILS, CONSOLIDATION, CETOL/UTOL
*STATIC
*STATIC, DIRECT
*STATIC, RIKS
*STEADY STATE DYNAMICS
*STEADY STATE TRANSPORT
*STEADY STATE TRANSPORT, DIRECT
*STEP PERTURBATION, *STATIC
*SUBSTRUCTURE GENERATE
*USA ADDDED MASS GENERATION
*VISCO
A Float specifying the analysis time spend in all the steps previous to this step. The default value
is −1.0.
totalTime
A Boolean specifying the nlgeom value for all steps. The default value is True.
nlgeom
Return value
An OdbStep object.
Exceptions
ValueError: previousStepName is invalid.
If previousStepName is invalid:
getFrame(...)
This method retrieves an OdbFrame object associated with a given frame value.
Abaqus Scripting Reference Guide
1730
OdbStep object

Required arguments
A Double specifying the value at which the frame is required. frameValue can be the
step time or frequency.
frameValue
Optional arguments
A SymbolicConstant specifying which frame to return if there is no frame at the exact frame value.
Possible values are CLOSEST, BEFORE, AFTER, and EXACT. The default value is CLOSEST.
match
When match=CLOSEST, Abaqus returns the closest frame. If the frame value requested is exactly halfway
between two frames, Abaqus returns the frame after the value.
When match=EXACT, Abaqus raises an exception if the exact frame value does not exist.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the OdbFrame object is not found:
getFrame(...)
This method retrieves an OdbFrame object associated with a given load case.
Required arguments
An OdbLoadCase object specifying a load case in the step.
loadCase
Optional arguments
None.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the OdbFrame object is not found:
getFrame(...)
This method retrieves an OdbFrame object associated with a given load case and frame value.
1731
Abaqus Scripting Reference Guide
OdbStep object

Required arguments
An OdbLoadCase object specifying a load case in the step.
loadCase
A Double specifying the value at which the frame is required. frameValue can be the
step time or frequency.
frameValue
Optional arguments
A SymbolicConstant specifying which frame to return if there is no frame at the exact frame value.
Possible values are CLOSEST, BEFORE, AFTER, and EXACT. The default value is CLOSEST.
match
When match=CLOSEST, Abaqus returns the closest frame. If the frame value requested is exactly halfway
between two frames, Abaqus returns the frame after the value.
When match=EXACT, Abaqus raises an exception if the exact frame value does not exist.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the OdbFrame object is not found:
getHistoryRegion(...)
This method retrieves a HistoryRegion object associated with a HistoryPoint in the model.
Required arguments
A HistoryPoint object specifying the point in the model.
point
Optional arguments
An OdbLoadCase object specifying a load case in the step.
loadCase
Return value
A HistoryRegion object.
Exceptions
OdbError: HistoryRegion not found.
If a HistoryRegion object is not found:
setDefaultDeformedField(...)
This method sets the default deformed ﬁeld variable in a step.
Abaqus Scripting Reference Guide
1732
OdbStep object

Required arguments
A FieldOutput object specifying the default deformed ﬁeld variable for visualization.
ﬁeld
Optional arguments
None.
Return value
None.
Exceptions
None.
setDefaultField(...)
This method sets the default ﬁeld variable in a step.
Required arguments
A FieldOutput object specifying the default ﬁeld variable for visualization.
ﬁeld
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The OdbStep object has members with the same names and descriptions as the arguments to the Step method.
In addition, the OdbStep object can have the following members:
An Int specifying the step number.
number
A Boolean specifying whether geometric nonlinearity can occur in this step.
nlgeom
A Float specifying the current value of the mass of the model. This does not include
the mass of the acoustic media if any present.
mass
A Float specifying the current value of the mass of the acoustic media of the model.
acousticMass
An OdbFrameArray object.
frames
1733
Abaqus Scripting Reference Guide
OdbStep object

A repository of HistoryRegion objects.
historyRegions
A repository of OdbLoadCase objects.
loadCases
A tuple of Floats specifying the coordinates of the center of mass.
massCenter
A tuple of Floats specifying the moments and products of inertia about the center of
mass. For 3D models inertia quantities are written in the following order: I(XX), I(YY),
I(ZZ), I(XY), I(XZ), and I(YZ). For 2D models only I(ZZ) and I(XY) are outputted.
inertiaAboutCenter
A tuple of Floats specifying the moments and products of inertia about the origin of
the global coordinate system. For 3-D models inertia quantities are written in the
inertiaAboutOrigin
following order: I(XX), I(YY), I(ZZ), I(XY), I(XZ), and I(YZ). For 2D models only
I(ZZ) and I(XY) are outputted.
A tuple of Floats specifying the coordinates of the center of mass of the acoustic media.
acousticMassCenter
Abaqus Scripting Reference Guide
1734
OdbStep object

RebarOrientation object
The RebarOrientation object represents the orientation of the rebar reference.
Access
import odbAccess
session.odbs[name].parts[name].rebarOrientations[i]
session.odbs[name].rootAssembly.instances[name].rebarOrientations[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.rebarOrientations[i]
Members
The RebarOrientation object can have the following members:
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. Possible values are AXIS_1, AXIS_2, and AXIS_3.
axis
A Float specifying the angle of the additional rotation.
angle
An OdbSet object specifying a region for which the rebar orientation is deﬁned.
region
An OdbDatumCsys object specifying a datum coordinates system.
csys
1735
RebarOrientation object

ScratchOdb object
A scratch output database is associated with an open output database and is used to store session-related, non-persistent
objects, such as Step, Frame and FieldOutput objects. Abaqus creates a scratch output database when needed for these
non-persistent objects during an Abaqus/CAE session. Abaqus deletes the scratch output database when the associated
output database is closed.
Access
import odbAccess
session.scratchOdbs[name]
ScratchOdb(...)
This method creates a new ScratchOdb object.
Path
session.ScratchOdb
Required arguments
An Odb object specifying the output database with which to associate.
odb
Optional arguments
None.
Return value
A ScratchOdb object.
Exceptions
None.
Members
The ScratchOdb object has no members.
Abaqus Scripting Reference Guide
1736
ScratchOdb object

SectionCategory object
The SectionCategory object is used to group regions of the model with like sections.
Section deﬁnitions that contain the same number of section points or integration points are grouped together.
To access data for a particular section deﬁnition, use the individual Section objects in the output database. For more
information, see Beam Section proﬁle commands and Section commands.
Access
import
odbAccess
session.odbs[name].parts[name].elements[i].sectionCategory
session.odbs[name].parts[name].elementSets[name].elements[i]\
.sectionCategory
session.odbs[name].parts[name].nodeSets[name].elements[i]\
.sectionCategory
session.odbs[name].parts[name].surfaces[name].elements[i]\
.sectionCategory
session.odbs[name].rootAssembly.elements[i].sectionCategory
session.odbs[name].rootAssembly.elementSets[name].elements[i]\
.sectionCategory
session.odbs[name].rootAssembly.instances[name].elements[i]\
.sectionCategory
session.odbs[name].rootAssembly.instances[name].elementSets[name]\
.elements[i].sectionCategory
session.odbs[name].rootAssembly.instances[name].nodeSets[name]\
.elements[i].sectionCategory
session.odbs[name].rootAssembly.instances[name].surfaces[name]\
.elements[i].sectionCategory
session.odbs[name].rootAssembly.nodeSets[name].elements[i]\
.sectionCategory
session.odbs[name].rootAssembly.surfaces[name].elements[i]\
.sectionCategory
session.odbs[name].sectionCategories[name]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elements[i].sectionCategory
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elementSets[name].elements[i].sectionCategory
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodeSets[name].elements[i].sectionCategory
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.surfaces[name].elements[i].sectionCategory
SectionCategory(...)
This method creates a SectionCategory object.
Path
session.odbs[name].SectionCategory
Required arguments
A String specifying the name of the category.
name
1737
SectionCategory object

A String specifying the description of the category.
description
Optional arguments
None.
Return value
A SectionCategory object.
Exceptions
None.
Members
The SectionCategory object has members with the same names and descriptions as the arguments to the SectionCategory
method.
In addition, the SectionCategory object can have the following member:
A SectionPointArray object.
sectionPoints
Abaqus Scripting Reference Guide
1738
SectionCategory object

SectionPoint object
The SectionPoint object describes the location of a section point within a section category.
Access
import
odbAccess
session.odbs[name].parts[name].elements[i].sectionCategory\
.sectionPoints[i]
session.odbs[name].parts[name].elementSets[name].elements[i]\
.sectionCategory.sectionPoints[i]
session.odbs[name].parts[name].nodeSets[name].elements[i]\
.sectionCategory.sectionPoints[i]
session.odbs[name].parts[name].surfaces[name].elements[i]\
.sectionCategory.sectionPoints[i]
session.odbs[name].rootAssembly.elements[i].sectionCategory\
.sectionPoints[i]
session.odbs[name].rootAssembly.elementSets[name].elements[i]\
.sectionCategory.sectionPoints[i]
session.odbs[name].rootAssembly.instances[name].elements[i]\
.sectionCategory.sectionPoints[i]
session.odbs[name].rootAssembly.instances[name].elementSets[name]\
.elements[i].sectionCategory.sectionPoints[i]
session.odbs[name].rootAssembly.instances[name].nodeSets[name]\
.elements[i].sectionCategory.sectionPoints[i]
session.odbs[name].rootAssembly.instances[name].surfaces[name]\
.elements[i].sectionCategory.sectionPoints[i]
session.odbs[name].rootAssembly.nodeSets[name].elements[i]\
.sectionCategory.sectionPoints[i]
session.odbs[name].rootAssembly.surfaces[name].elements[i]\
.sectionCategory.sectionPoints[i]
session.odbs[name].sectionCategories[name].sectionPoints[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name]\
.locations[i].sectionPoints[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elements[i].sectionCategory.sectionPoints[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.elementSets[name].elements[i].sectionCategory\
.sectionPoints[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.nodeSets[name].elements[i].sectionCategory.sectionPoints[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.surfaces[name].elements[i].sectionCategory.sectionPoints[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.sectionPoint
SectionPoint(...)
This method creates a SectionPoint object.
Path
session.odbs[name].sectionCategories[name].SectionPoint
1739
SectionPoint object

Required arguments
An Int specifying the number of the section point. See Beam Elements and Shell Elements
for the numbering convention.
number
A String specifying the description of the section point.
description
Optional arguments
None.
Return value
A SectionPoint object.
Exceptions
None.
Members
The SectionPoint object has members with the same names and descriptions as the arguments to the SectionPoint
method.
Abaqus Scripting Reference Guide
1740
SectionPoint object

SectorDefinition object
The SectorDeﬁnition object describes the number of symmetry sectors and axis of symmetry for a cyclic symmetry
model.
Access
import odbAccess
session.odbs[name].sectorDefinition
Members
The SectorDeﬁnition object has the following members:
An Int specifying the number of sectors in the cyclic symmetry model.
numSectors
A tuple of tuples of Floats specifying the coordinates of two points on the axis of
symmetry.
symmetryAxis
1741
SectorDefinition object

UserData object
The UserData object contains user-deﬁned XY data. The UserData object has no constructor; it is created automatically
when an Odb object is created.
Access
import odbAccess
session.odbs[name].userData
XYData(...)
This method creates an XYData object from a sequence of X–Y data pairs.
Path
session.odbs[name].userData.XYData
Required arguments
A String specifying the repository key.
name
A sequence of pairs of Floats specifying the X–Y data pairs.
data
Optional arguments
A String specifying the source of the X–Y data (e.g., “Entered from keyboard”, “Taken
from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty string.
sourceDescription
A String specifying the content of the X–Y data (e.g., “ﬁeld 1 vs. ﬁeld 2”). The default
value is an empty string.
contentDescription
A String specifying additional information about the X–Y data (e.g., “for whole
model”). The default value is an empty string.
positionDescription
A String specifying the label to be used in the legend. The default value is the name
of the XYData object.
legendLabel
A String specifying the label for the X-values. This value may be overridden if the
X–Y data are combined with other X–Y data. The default value is an empty string.
xValuesLabel
A String specifying the label for the Y-values. This value may be overridden if the
X–Y data are combined with other X–Y data. The default value is an empty string.
yValuesLabel
A QuantityType object specifying the QuantityType object associated to the X -axis1-
values.
axis1QuantityType
A QuantityType object specifying the QuantityType object associated to the Y -axis2-
values.
axis2QuantityType
Abaqus Scripting Reference Guide
1742
UserData object

Return value
An XYData object.
Exceptions
InvalidNameError.
Members
The UserData object can have the following members:
A String specifying the repository key.
name
A String specifying the source of the X–Y data (e.g., “Entered from keyboard”, “Taken
from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty string.
sourceDescription
A String specifying the content of the X–Y data (e.g., “ﬁeld 1 vs. ﬁeld 2”). The default
value is an empty string.
contentDescription
A String specifying additional information about the X–Y data (e.g., “for whole
model”). The default value is an empty string.
positionDescription
A String specifying the label for the X-values. This value may be overridden if the
X–Y data are combined with other X–Y data. The default value is an empty string.
xValuesLabel
A String specifying the label for the Y-values. This value may be overridden if the
X–Y data are combined with other X–Y data. The default value is an empty string.
yValuesLabel
A QuantityType object specifying the QuantityType object associated to the X -axis1-
values.
axis1QuantityType
A QuantityType object specifying the QuantityType object associated to the Y -axis2-
values.
axis2QuantityType
A String specifying the label to be used in the legend. The default value is the name
of the XYData object.
legendLabel
A repository of XYData objects.
xyDataObjects
A repository of Annotation objects.
annotations
A tuple of pairs of Floats specifying the X–Y data pairs.
data
1743
Abaqus Scripting Reference Guide
UserData object

Odb commands
The Odb commands do the following:
•
Determine if an output database (.odb) ﬁle needs to be upgraded to the current release.
•
Determine the extreme value for an output variable over a number of ﬁelds; for example, over a number of load
cases.
•
Open an existing output database ﬁle and create a new Odb object.
•
Upgrade an output database ﬁle to the current release and write the upgraded output database to a new ﬁle.
isUpgradeRequiredForOdb
This method determines if an output database ﬁle needs to be upgraded to the current release.
You can access this method using either of the following techniques:
•
From a script running outside Abaqus/CAE. For example,
import odbAccess
needsUpgrade = odbAccess.isUpgradeRequiredForOdb(
    upgradeRequiredOdbPath='myOdb.odb')
•
From the Visualization module in Abaqus/CAE. For example,
import visualization
needsUpgrade = session.isUpgradeRequiredForOdb(
    upgradeRequiredOdbPath='myOdb.odb')
Required arguments
An String specifying the path to an output database ﬁle to test. The test
determines if the output database needs to be upgraded to the current release.
upgradeRequiredOdbPath
Optional arguments
None.
Return value
A Boolean indicating the result of the test. A value of True indicates that the output database needs to be upgraded
to the current release.
Exceptions
None.
maxEnvelope
Retrieve the maximum value of an output variable over a number of ﬁelds.
Required arguments
The maxEnvelope method does not use keyword arguments.
Abaqus Scripting Reference Guide
1744
Odb commands

Argument
A list of similar ﬁeldOutput objects from which the maximum value will be computed.
A SymbolicConstant specifying the invariant or component label to be used when comparing vectors or tensors. Possible values are:
•
MAGNITUDE
•
MISES
•
TRESCA
•
PRESS
•
INV3
•
MAX_PRINCIPAL
•
MID_PRINCIPAL
•
MIN_PRINCIPAL
You must provide either this argument or the following argument if the ﬁeld is a vector or tensor.
A String specifying the component of the tensor or vector to be used for selecting the maximum value.
Optional arguments
None.
Return value
A sequence of two ﬁeldOutput objects. The ﬁrst ﬁeldOutput object contains the maximum value. The second
ﬁeldOutput object contains the index of the ﬁeld containing the maximum value. The index follows the order
in which ﬁelds are positioned in the list of ﬁeldOutput objects provided as the argument to the function.
Exceptions
OdbError
This function takes no keyword arguments.
TypeError
minEnvelope
Retrieve the minimum value of an output variable over a number of ﬁelds.
Required arguments
The minEnvelope method does not use keyword arguments.
Argument
A list of similar ﬁeldOutput objects from which the maximum value will be computed.
A SymbolicConstant specifying the invariant or component label to be used when comparing vectors or tensors. Possible values are:
•
MAGNITUDE
•
MISES
•
TRESCA
1745
Abaqus Scripting Reference Guide
Odb commands

Argument
•
PRESS
•
INV3
•
MAX_PRINCIPAL
•
MID_PRINCIPAL
•
MIN_PRINCIPAL
You must provide either this argument or the following argument if the ﬁeld is a vector or tensor.
A String specifying the component of the tensor or vector to be used for selecting the minimum value.
Optional arguments
None.
Return value
A sequence of two ﬁeldOutput objects. The ﬁrst ﬁeldOutput object contains the minimum value. The second
ﬁeldOutput object contains the index of the ﬁeld containing the minimum value. The index follows the order in
which ﬁelds are positioned in the list of ﬁeldOutput objects provided as the argument to the function.
Exceptions
OdbError
This function takes no keyword arguments.
TypeError
openOdb
This method opens an existing output database (.odb) ﬁle and creates a new Odb object. You typically execute
this method outside of Abaqus/CAE when, in most cases, only one output database is open at any time. For
example,
import odbAccess
shockLoadOdb = odbAccess.openOdb(path='myOdb.odb')
Required arguments
A String specifying the path to an existing output database (.odb) ﬁle.
path
Optional arguments
A Boolean specifying whether the ﬁle will permit only read access or both read and
write access. The initial value is False, indicating that both read and write access will
be permitted.
readOnly
A Boolean specifying whether the ﬁle will permit access to sets speciﬁed as Internal
on the database. The initial value is False, indicating that internal sets will not be read.
readInternalSets
Abaqus Scripting Reference Guide
1746
Odb commands

Return value
An Odb object.
Exceptions
OdbError: The database is from a previous release of
Abaqus. Run abaqus upgrade -job
If the output database was generated by a previous
release of Abaqus and needs upgrading:
<newFilename> -odb <oldFileName> to
upgrade it.
OdbError: Abaqus installation must be upgraded before
this output database can be opened.
If the output database was generated by a newer
release of Abaqus, and the installation of Abaqus
needs upgrading:
openOdb
This method opens an existing output database (.odb) ﬁle and creates a new Odb object. This method is accessed
only via the session object inside Abaqus/CAE and adds the new Odb object to the session.odbs repository. This
method allows you to open multiple output databases at the same time and to use the repository key to specify
a particular output database. For example,
import visualization
session.openOdb(name='myOdb', path='stress.odb', readOnly=True)
Required arguments
A String specifying the repository key. If thename is not the same as thepath to the output database
(.odb) ﬁle, the path must be speciﬁed as well. Additionally, to support backwards compatibility
name
of the interface, if the name parameter is omitted, the path and name will be presumed to be the
same.
Optional arguments
A String specifying the path to an existing output database (.odb) ﬁle.
path
A Boolean specifying whether the ﬁle will permit only read access or both read and write
access. The initial value is TRUE when the output database ﬁle is opened from Abaqus/CAE,
indicating that only read access will be permitted.
readOnly
Return value
An Odb object.
Exceptions
OdbError: The database is from a previous release of
Abaqus.
If the output database was generated by a previous
release of Abaqus and needs upgrading:
Run abaqus upgrade -job <newFilename>
-odb <oldFileName> to upgrade it.
1747
Abaqus Scripting Reference Guide
Odb commands

OdbError: Abaqus installation must be upgraded before
this
If the output database was generated by a newer
release of Abaqus, and the installation of Abaqus
needs upgrading:
output database can be opened.
AbaqusError: Cannot open ﬁle <ﬁlename>.
If the ﬁle is not a valid database:
upgradeOdb
This method upgrades an existing Odb object to the current release and writes the upgraded version of the Odb
object to a ﬁle. In addition, Abaqus/CAE writes information about the status of the upgrade to a log (*.log)
ﬁle.
You can access this method using either of the following techniques:
•
From a script running outside Abaqus/CAE. For example,
import odbAccess
odbAccess.upgradeOdb(existingOdbPath='oldOdb', 
    upgradedOdbPath='upgradedOdb')
•
From the session object in Abaqus/CAE. For example,
import visualization
session.upgradeOdb(existingOdbPath='oldOdb', 
    upgradedOdbPath='upgradedOdb')
Required arguments
An String specifying the path to the ﬁle containing the output database to
be upgraded.
existingOdbPath
An String specifying the path to the ﬁle that will contain the upgraded output
database.
upgradedOdbPath
Optional arguments
None.
Return value
None.
Exceptions
OdbError: cannot convert database
If the output database upgrade fails:
Abaqus Scripting Reference Guide
1748
Odb commands

Odb Display commands
Odb display commands are used to store the context of an output database for a viewport.
In this section:
•
OdbDisplay object
•
CommonOptions object
•
ContourOptions object
•
DefaultOdbDisplay object
•
DisplayBodyOptions object
•
OrientationOptions object
•
SuperimposeOptions object
•
SymbolOptions object
•
ViewCut object
•
ViewerOptions object
1749

OdbDisplay object
The OdbDisplay object stores the context of an output database for a viewport. The OdbDisplay object has no constructor.
Abaqus creates the defaultOdbDisplay member when you import the Visualization module. Abaqus creates the
odbDisplay member when a viewport is created, using the attributes from the previous active viewport. The previous
active viewport contains the attributes from the defaultOdbDisplay object for the session. The attributes from the
defaultOdbDisplay object are copied from the previous active viewport to create the new viewport.
OdbDisplay objects are accessed in one of two ways:
•
The default output database display options. These settings are used as defaults when other odbDisplay members
are created and can be set to customize user preferences.
•
The output database display options associated with a particular viewport.
Access
session.viewports[name].layers[name].odbDisplay
import visualization
session.viewports[name].odbDisplay
moveCameraToCsys()
This method speciﬁes a new position for the camera. It is available only when movieMode=ON (in the View object).
The new camera position is the origin of the coordinate system speciﬁed by the cameraCsysName member of the
BasicOptions object.
Arguments
None.
Return value
None.
Exceptions
None.
setDeformedVariable(...)
This method speciﬁes the ﬁeld output variable or FieldOutput object to be used when displaying the deformed shape
of the model.
Required arguments
One of the following two mutually exclusive arguments must be provided:
A String specifying the ﬁeld output variable.
variableLabel
A String specifying the FieldOutput object.
ﬁeld
Abaqus Scripting Reference Guide
1750
OdbDisplay object

Optional arguments
None.
Return value
None.
Exceptions
The current viewport is not associated with an ODB ﬁle.
Requested operation cancelled.
If the viewport is not associated with any Odb
object:
setFrame(...)
This method speciﬁes the step and frame for the OdbDisplay object.
Required arguments
An Int specifying the step index. Possible values are 0 step  (numSteps − 1).
step
An Int specifying the frame in the speciﬁed step. Valid values are 0 frame  (numFramesInStep
− 1). If frame  (numFramesInStep − 1) the last frame will be displayed.
frame
Optional arguments
None.
Return value
None.
Exceptions
The current viewport is not associated with an ODB ﬁle.
Requested operation cancelled.
If the viewport is not associated with any Odb
object:
There are no valid step data on the odb. Requested operation
cancelled.
If the Odb object does not contain valid step data:
Invalid step index:step. Available step indices: 0 - n
If an invalid step index is passed in as argument:
setFrame(...)
This method speciﬁes the frame for the OdbDisplay object.
Required arguments
An OdbFrame object.
frame
1751
Abaqus Scripting Reference Guide
OdbDisplay object

Optional arguments
None.
Return value
None.
Exceptions
None.
setPrimaryVariable(...)
This method speciﬁes the ﬁeld output variable for which to obtain results.
Required arguments
A String specifying the ﬁeld output variable. The variableLabel and ﬁeld arguments are mutually
exclusive.
variableLabel
A String specifying the FieldOutput object. The variableLabel and ﬁeld arguments are mutually
exclusive.
ﬁeld
A SymbolicConstant specifying the position from which to obtain data. Possible values are
NODAL, INTEGRATION_POINT, ELEMENT_FACE, ELEMENT_NODAL,
outputPosition
ELEMENT_CENTROID, WHOLE_ELEMENT, WHOLE_REGION,
WHOLE_PART_INSTANCE, WHOLE_MODEL, and GENERAL_PARTICLE. Data can be
obtained only from the position at which they were written to the output database during the
analysis.
Optional arguments
A sequence of a SymbolicConstant and a String. Possible values for the SymbolicConstant are
INVARIANT and COMPONENT. The String speciﬁes an available component or invariant for
reﬁnement
the speciﬁed variableLabel. This argument is required only if a reﬁnement is available for the
speciﬁed variableLabel.
A Dictionary with String keys and String values. Each key speciﬁes a region in the model; the
corresponding value speciﬁes a section point within that region. For example:
sectionPoint={'shell < MAT > < 7 section points >':'SPOS,
sectionPoint
    (fraction = 1.0)', 'shell < MAT > < 5 section points >':
    'SPOS, (fraction = 1.0)', }
Return value
None.
Abaqus Scripting Reference Guide
1752
OdbDisplay object

Exceptions
The current viewport is not associated with an ODB ﬁle.
Requested operation cancelled.
If the viewport is not associated with any Odb
object:
setPrimarySectionPoint(...)
This method speciﬁes the section point for the current primary, symbol and status variables.
Required arguments
A Dictionary with String keys and String values. Each key speciﬁes a region in the model; the
corresponding value speciﬁes a section point within that region. For example:
sectionPoint={'shell < MAT > < 7 section points >':'SPOS,
sectionPoint
    (fraction = 1.0)', 'shell < MAT > < 5 section points >':
    'SPOS, (fraction = 1.0)', }
A String specifying the active ply name.
activePly
Optional arguments
None.
Return value
None.
Exceptions
The current viewport is not associated with an ODB ﬁle.
Requested operation cancelled.
If the viewport is not associated with any Odb
object:
setStatusVariable(...)
This method speciﬁes the ﬁeld output variable for ﬁltering element display based on a status criteria.
Required arguments
A String specifying the ﬁeld output variable. The variableLabel and ﬁeld arguments are mutually
exclusive.
variableLabel
A String specifying the FieldOutput object. The variableLabel and ﬁeld arguments are mutually
exclusive.
ﬁeld
A SymbolicConstant specifying the position from which to obtain data. Possible values are
NODAL, INTEGRATION_POINT, ELEMENT_FACE, ELEMENT_NODAL,
outputPosition
ELEMENT_CENTROID, WHOLE_ELEMENT, WHOLE_REGION,
WHOLE_PART_INSTANCE, WHOLE_MODEL, and GENERAL_PARTICLE. Data can be
1753
Abaqus Scripting Reference Guide
OdbDisplay object

obtained only from the position at which they were written to the output database during the
analysis.
Optional arguments
A sequence of a SymbolicConstant and a String. Possible values for the SymbolicConstant
are INVARIANT and COMPONENT. The String speciﬁes an available component or
reﬁnement
invariant for the speciﬁed variableLabel. This argument is required only if a reﬁnement
is available for the speciﬁed variableLabel.
A Dictionary with String keys and String values. Each key speciﬁes a region in the model;
the corresponding value speciﬁes a section point within that region. For example:
sectionPoint={'shell < MAT > < 7 section points >':'SPOS,
sectionPoint
    (fraction = 1.0)', 'shell < MAT > < 5 section points >':
    'SPOS, (fraction = 1.0)', }
A Float specifying the minimum result value to be considered for element removal.
statusMinimum
A Float specifying the maximum result value to be considered for element removal.
statusMaximum
A Boolean utilized when both statusMinimum and statusMaximum are given. Elements
will be removed when they contain values between the minimum and maximum, inclusive,
statusInsideRange
when true. Elements will be removed when they contain values outside of the minimum
and maximum, exclusive, when false.
A Boolean to specify if the status variable is to be active.
useStatus
A Boolean to specify if the active status variable is to remove elements from undeformed
plots. The default value is False.
applyStatusToUndeformed
Return value
None.
Exceptions
The current viewport is not associated with an ODB ﬁle.
Requested operation cancelled.
If the viewport is not associated with any Odb
object:
setSymbolVariable(...)
This method speciﬁes the ﬁeld output variable for which to obtain results used for symbol plots. This variable must
be in the form of vector or tensor data. The output quantity can also be speciﬁed with this command to control the
display of resultants, or components.
Abaqus Scripting Reference Guide
1754
OdbDisplay object

Required arguments
A String specifying the ﬁeld output variable. The variableLabel and ﬁeld arguments are mutually
exclusive.
variableLabel
A String specifying the FieldOutput object. The variableLabel and ﬁeld arguments are mutually
exclusive.
ﬁeld
A SymbolicConstant specifying the position from which to obtain data. Possible values are
NODAL, INTEGRATION_POINT, ELEMENT_FACE, ELEMENT_NODAL,
outputPosition
ELEMENT_CENTROID, WHOLE_ELEMENT, WHOLE_REGION,
WHOLE_PART_INSTANCE, WHOLE_MODEL, and GENERAL_PARTICLE. Data can be
obtained only from the position at which they were written to the output database during the
analysis.
Optional arguments
A sequence of a SymbolicConstant and a String. Possible values for the SymbolicConstant
are INVARIANT and COMPONENT. The String speciﬁes an available component or invariant
reﬁnement
for the speciﬁed variableLabel. This argument is required only if a reﬁnement is available for
the speciﬁed variableLabel.
A Dictionary with String keys and String values. Each key speciﬁes a region in the model; the
corresponding value speciﬁes a section point within that region. For example:
sectionPoint={'shell < MAT > < 7 section points >':'SPOS,
sectionPoint
    (fraction = 1.0)', 'shell < MAT > < 5 section points >':
    'SPOS, (fraction = 1.0)', }
A SymbolicConstant specifying the tensor quantity to be displayed with the symbol. This value
is set in the SymbolOptions object.
tensorQuantity
A SymbolicConstant specifying the vector quantity to be displayed with the symbol. This
value is set in the SymbolOptions object.
vectorQuantity
Return value
None.
Exceptions
The current viewport is not associated with an ODB ﬁle.
Requested operation cancelled.
If the viewport is not associated with any Odb
object:
setStreamVariable(...)
This method speciﬁes the ﬁeld output variable for which to obtain results used for stream plots. This variable must be
in the form of nodal vector data.
1755
Abaqus Scripting Reference Guide
OdbDisplay object

Required arguments
A String specifying the ﬁeld output variable.
variableLabel
Optional arguments
None.
Return value
None.
Exceptions
The current viewport is not associated with an ODB ﬁle.
Requested operation cancelled.
If the viewport is not associated with any Odb
object:
setValues(...)
This method speciﬁes member values for the OdbDisplay object.
Required arguments
None.
Optional arguments
A List of DisplayGroup objects.
visibleDisplayGroups
A Boolean specifying whether to display the cut. The default value is OFF.
viewCut
A List of ViewCut objects.
viewCutNames
Return value
None.
Exceptions
None.
Members
The OdbDisplay object can have the following members:
A String specifying the name of the output database associated with the OdbDisplay
object.
name
A tuple of Strings specifying ﬁeld steps.
ﬁeldSteps
Each item in the sequence consists of a tuple that contains the following step information:
Abaqus Scripting Reference Guide
1756
OdbDisplay object

•
element0: A String specifying the step name.
•
element1: A String specifying the step description.
•
element2: A Float specifying the time value at the start of the step.
•
element3: A Float specifying the time period of the step.
•
element4: A Float specifying the user modiﬁed time period of the step.
•
element5: An Int specifying the domain type of the step. Possible values are:
-
0: Time domain
-
1: Frequency domain
-
2: Modal domain
-
3: Arc Length (Riks) domain
•
element6: A String specifying the default frame label.
•
element7: A sequence of strings specifying the frame labels for all available frames
in the step.
•
element8: A sequence of ﬂoats specifying the frame values for all available frames
in the step.
•
element9: A Int specifying whether the step is user deﬁned. Possible values are 0
indicating the step is deﬁned in the analysis and 1 indicating the step is user deﬁned.
•
element10: A sequence of machine readable strings encoding the currently active
frame numbers.
An OdbFieldVarList object.
ﬁeldVariables
An OdbModelFieldVarList object.
modelVariableList
A repository of OdbSet objects specifying the set label. The repository is read-only.
nodeSet
A repository of OdbSet objects specifying the set label. The repository is read-only.
elementSet
A repository of OdbSet objects specifying the set label. The repository is read-only.
surfaceSet
A DisplayOptions object.
display
A ContourOptions object.
contourOptions
A CommonOptions object.
commonOptions
A SymbolOptions object.
symbolOptions
A SuperimposeOptions object.
superimposeOptions
A DisplayBodyOptions object.
displayBodyOptions
A FreeBodyOptions object.
freeBodyOptions
1757
Abaqus Scripting Reference Guide
OdbDisplay object

A StreamOptions object.
streamOptions
A ViewCutOptions object.
viewCutOptions
A repository of ViewCut objects.
viewCuts
A DisplayGroup object specifying the current display group and referring to an object
in the displayGroups member of Session.
displayGroup
A DisplayGroupInstanceRepository object.
displayGroupInstances
A BasicOptions object.
basicOptions
An OrientationOptions object.
materialOrientationOptions
A tuple of Strings specifying the step label and the frame label when the current step is
user deﬁned. Alternatively, ﬁeldFrame maybe speciﬁed as a pair of Ints with the step
index and the frame index, when the current step is deﬁned in the analysis.
ﬁeldFrame
A tuple specifying variables.
primaryVariable
Each item in the sequence consists of a tuple containing the following elements:
•
Element 0: A String specifying the variable label.
•
Element 1: An Int specifying the output position. Possible integer values are:
-
0: UNDEFINED_POSITION
-
1: NODAL
-
2: INTEGRATION_POINT
-
3: ELEMENT_FACE
-
4: ELEMENT_NODAL
-
5: WHOLE_ELEMENT
-
6: ELEMENT_CENTROID
-
7: WHOLE_REGION
-
8: WHOLE_PART_INSTANCE
-
9: WHOLE_MODEL
-
10: GENERAL_PARTICLE
•
Element 2: An Int specifying the data type. Possible values are:
-
0: ENUMERATION
-
1: BOOLEAN
-
2: INTEGER
-
3: SCALAR
-
4: VECTOR
-
5: QUATERNION_2D
Abaqus Scripting Reference Guide
1758
OdbDisplay object

-
6: QUATERNION_3D
-
7: TENSOR
-
8: TENSOR_3D_FULL
-
9: TENSOR_3D_PLANAR
-
10: TENSOR_3D_SURFACE
-
11: TENSOR_2D_PLANAR
-
12: TENSOR_2D_SURFACE
•
Element 3: An Int specifying the storage type. Possible values are:
-
0: FLOAT
-
1: DOUBLE
-
2: INTEGER
-
3: BOOLEAN
•
Element 4: An Int specifying the reﬁnement type. Possible values are:
-
0: NO_REFINEMENT
-
1: INVARIANT
-
2: COMPONENT
•
Element 5: A String specifying the reﬁnement label.
•
Element 6: An Int specifying the reﬁnement index.
•
Element 7: An Int specifying whether section point information is available. Possible
values are 1 when section point information is available; 0, when this information is
unavailable.
•
Element 8: A sequence of a String specifying the name of the ply and category
selection tuples (see below) specifying the section point information.
A category selection tuple consists of the following elements:
-
Element 0: A String specifying the category label.
-
Element 1: An Int specifying whether to use both top and bottom section points
to obtain results. Possible values are 1 to use both section points and 0 to use only
the top section point.
-
Element 2: An Int specifying the top section point index.
-
Element 3: A String specifying the top section label.
-
Element 4: An Int specifying the bottom section point index.
-
Element 5: A String specifying the bottom section label.
-
Element 6: An Int specifying the category id.
•
Element 9: An Int specifying whether the data are complex. Possible values are 1
when the data are complex; 0, when the data is not complex.
•
Element 10: A Float specifying the minimum possible value for the data.
•
Element 11: A Float specifying the maximum possible value for the data.
1759
Abaqus Scripting Reference Guide
OdbDisplay object

•
Element 12: An Int specifying whether the data is derived. Possible values are 1 when
the data is derived; 0, when the data is not derived.
A tuple specifying variables.
deformedVariable
For information on the sequence, see the member primaryVariable.
A tuple of SymbolicConstants specifying variables.
statusVariable
For information on the sequence, see the member primaryVariable.
A tuple of SymbolicConstants specifying variables.
symbolVariable
For information on the sequence, see the member primaryVariable.
A tuple of SymbolicConstants specifying a Boolean to specify if elements are to be
removed in undeformed states based on an active status variable
applyStatusToUndeformed
A tuple of SymbolicConstants specifying a Boolean to specify if the status range should
be inside a speciﬁed minimum and maximum. The range will be outside when false.
statusInsideRange
A tuple of Floats specifying a Float value for the minimum status range value.
statusMinimum
A tuple of Floats specifying a Float value for the maximum status range value.
statusMaximum
A tuple of SymbolicConstants specifying a Boolean to specify if elements are to be
removed based on the status variable
useStatus
A pair of Ints specifying the step index and the frame index of the ﬁrst available frame.
This sequence is read-only.
ﬁrstFrame
A pair of Ints specifying the step index and the frame index of the frame previous to the
current frame. This sequence is read-only.
prevFrame
A pair of Ints specifying the step index and the frame index of the frame following the
current frame. This sequence is read-only.
nextFrame
A pair of Ints specifying the step index and the frame index of the last available frame.
This sequence is read-only.
lastFrame
Abaqus Scripting Reference Guide
1760
OdbDisplay object

CommonOptions object
The CommonOptions object stores values and attributes that are common to all plot states. The CommonOptions object
has no constructor command. Abaqus creates a defaultOdbDisplay.commonOptions member when you import the
Visualization module. Abaqus creates a commonOptions member when it creates the OdbDisplay object, using the
values from defaultOdbDisplay.commonOptions. Abaqus creates the odbDisplay member when a viewport is created,
using the values from defaultOdbDisplay.
CommonOptions objects are accessed in one of two ways:
•
The default common options. These settings are used as defaults when other commonOptions members are created.
These settings can be set to customize user preferences.
•
The common options associated with a particular viewport.
The CommonOptions object is derived from the DGCommonOptions object.
Access
import visualization
session.defaultOdbDisplay.commonOptions
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.commonOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.commonOptions
session.viewports[name].layers[name].odbDisplay.commonOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.commonOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.commonOptions
session.viewports[name].odbDisplay.commonOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.commonOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.commonOptions
setValues(...)
This method modiﬁes the CommonOptions object.
Required arguments
None.
Optional arguments
A CommonOptions object from which values are to be copied. If other arguments are
also supplied to setValues, they will override the values in options. The default
value is None.
options
A SymbolicConstant specifying the render style of the plot. Possible values are
WIREFRAME, FILLED, HIDDEN, and SHADED. The default value is SHADED.
renderStyle
1761
CommonOptions object

A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is EXTERIOR.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A SymbolicConstant specifying the deformation scale factor mode. Possible values
are AUTO, UNIFORM, and NONUNIFORM. The default value is AUTO.
deformationScaling
A Float specifying the uniform deformation scaling constant when
deformationScaling=UNIFORM. The default value is autoDeformationScaleValue.
uniformScaleFactor
A sequence of three Floats specifying the deformation scaling in each of the three
coordinate directions when deformationScaling=NONUNIFORM. The default value
nonuniformScaleFactor
is (autoDeformationScaleValue, autoDeformationScaleValue,
autoDeformationScaleValue).
A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "White".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED
or SHADED. The default value is "White".
ﬁllColor
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A String specifying the label font to be used for all model labels. The default value is
"-*-courier-medium-r-normal-*-*-120-*-*-m-*-*-*".
labelFont
A Boolean specifying whether to plot the element labels. The default value is OFF.
elemLabels
A String specifying the color to be used to plot the element labels. The default value
is "Cyan".
elemLabelColor
A Boolean specifying whether to plot the face labels. The default value is OFF.
faceLabels
A String specifying the color to be used to plot the face labels. The default value is
"Red".
faceLabelColor
A Boolean specifying whether to plot the node labels. The default value is OFF.
nodeLabels
Abaqus Scripting Reference Guide
1762
CommonOptions object

A String specifying the color to be used to plot the node labels. The default value is
"Yellow".
nodeLabelColor
A Boolean specifying whether to plot the node symbols. The default value is OFF.
nodeSymbols
A SymbolicConstant specifying the node symbol types. Possible values are:
nodeSymbolType
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
The default value is HOLLOW_CIRCLE.
A String specifying the color to be used to plot the node symbols. The default value is
"Yellow".
nodeSymbolColor
A SymbolicConstant specifying the node symbol size. Possible values are SMALL,
MEDIUM, and LARGE. The default value is SMALL.
nodeSymbolSize
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A sequence of three Floats specifying the coordinate scaling in each of the three
coordinate directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
A Boolean specifying whether to draw arrows that indicate the directions of element
and surface normals. The default value is OFF.
normals
A SymbolicConstant specifying whether to draw element normals or surface normals.
Possible values are ELEMENT and SURFACE. The default value is ELEMENT.
normalDisplay
A String specifying the color to be used to plot the normal to a nonbeam element or to
a surface. The default value is "Red".
faceNormalColor
1763
Abaqus Scripting Reference Guide
CommonOptions object

A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Blue".
beamN1Color
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Red".
beamN2Color
A String specifying the color to be used to plot an arrow along the tangent to a beam.
The default value is "White".
beamTangentColor
A SymbolicConstant specifying the length of the normal arrows. Possible values are
SHORT, MEDIUM, and LONG. The default value is MEDIUM.
normalArrowLength
A SymbolicConstant specifying the thickness of the normal arrows. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
normalLineThickness
A SymbolicConstant specifying the arrowhead style of the normal arrows. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
normalArrowheadStyle
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values are
0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
Return value
None.
Exceptions
RangeError.
Members
The CommonOptions object can have the following members:
A SymbolicConstant specifying the deformation scale factor mode. Possible values
are AUTO, UNIFORM, and NONUNIFORM. The default value is AUTO.
deformationScaling
A Float specifying the uniform deformation scaling constant when
deformationScaling=UNIFORM. The default value is autoDeformationScaleValue.
uniformScaleFactor
A Float specifying the deformation scale factor value when deformationScaling=AUTO.
This value is read-only.
autoDeformationScaleValue
A tuple of three Floats specifying the deformation scaling in each of the three coordinate
directions when deformationScaling=NONUNIFORM. The default value is
nonuniformScaleFactor
(autoDeformationScaleValue, autoDeformationScaleValue,
autoDeformationScaleValue).
Abaqus Scripting Reference Guide
1764
CommonOptions object

A SymbolicConstant specifying the render style of the plot. Possible values are
WIREFRAME, FILLED, HIDDEN, and SHADED. The default value is SHADED.
renderStyle
A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is EXTERIOR.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A Boolean specifying whether to plot the element labels. The default value is OFF.
elemLabels
A Boolean specifying whether to plot the face labels. The default value is OFF.
faceLabels
A Boolean specifying whether to plot the node labels. The default value is OFF.
nodeLabels
A Boolean specifying whether to plot the node symbols. The default value is OFF.
nodeSymbols
A SymbolicConstant specifying the node symbol types. Possible values are:
nodeSymbolType
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
The default value is HOLLOW_CIRCLE.
A SymbolicConstant specifying the node symbol size. Possible values are SMALL,
MEDIUM, and LARGE. The default value is SMALL.
nodeSymbolSize
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
1765
Abaqus Scripting Reference Guide
CommonOptions object

An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A Boolean specifying whether to draw arrows that indicate the directions of element
and surface normals. The default value is OFF.
normals
A SymbolicConstant specifying whether to draw element normals or surface normals.
Possible values are ELEMENT and SURFACE. The default value is ELEMENT.
normalDisplay
A SymbolicConstant specifying the length of the normal arrows. Possible values are
SHORT, MEDIUM, and LONG. The default value is MEDIUM.
normalArrowLength
A SymbolicConstant specifying the thickness of the normal arrows. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
normalLineThickness
A SymbolicConstant specifying the arrowhead style of the normal arrows. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
normalArrowheadStyle
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "White".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED
or SHADED. The default value is "White".
ﬁllColor
A String specifying the label font to be used for all model labels. The default value is
"-*-courier-medium-r-normal-*-*-120-*-*-m-*-*-*".
labelFont
A String specifying the color to be used to plot the element labels. The default value
is "Cyan".
elemLabelColor
A String specifying the color to be used to plot the face labels. The default value is
"Red".
faceLabelColor
A String specifying the color to be used to plot the node labels. The default value is
"Yellow".
nodeLabelColor
A String specifying the color to be used to plot the node symbols. The default value
is "Yellow".
nodeSymbolColor
Abaqus Scripting Reference Guide
1766
CommonOptions object

A String specifying the color to be used to plot the normal to a nonbeam element or
to a surface. The default value is "Red".
faceNormalColor
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Blue".
beamN1Color
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Red".
beamN2Color
A String specifying the color to be used to plot an arrow along the tangent to a beam.
The default value is "White".
beamTangentColor
A tuple of three Floats specifying the coordinate scaling in each of the three coordinate
directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
1767
Abaqus Scripting Reference Guide
CommonOptions object

ContourOptions object
The ContourOptions object stores values and attributes associated with a contour plot. The ContourOptions object has
no constructor command. Abaqus creates a defaultOdbDisplay.contourOptions member when you import the
Visualization module. Abaqus creates a contourOptions member when it creates the OdbDisplay object, using the
values from defaultOdbDisplay.contourOptions. Abaqus creates the odbDisplay member when a viewport is created,
using the values from defaultOdbDisplay.
ContourOptions objects are accessed in one of two ways:
•
The default contour options. These settings are used as defaults when other contourOptions members are created.
These settings can be set to customize user preferences.
•
The contour options associated with a particular viewport.
The ContourOptions object is derived from the DGContourOptions object.
Access
import visualization
session.defaultOdbDisplay.contourOptions
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.contourOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.contourOptions
session.viewports[name].layers[name].odbDisplay.contourOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.contourOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.contourOptions
session.viewports[name].odbDisplay.contourOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.contourOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.contourOptions
setValues(...)
This method modiﬁes the ContourOptions object.
Required arguments
None.
Optional arguments
A ContourOptions object from which values are to be copied. If other arguments are
also supplied to setValues, they will override the values in options. The default
value is None.
options
A SymbolicConstant specifying the contour type. Possible values are LINE, BANDED,
QUILT, and ISOSURFACE. The default value is BANDED.
contourType
Abaqus Scripting Reference Guide
1768
ContourOptions object

A SymbolicConstant specifying the contour rendering method. Possible values are
TEXTURE_MAPPED and TESSELLATED. The default value is
TEXTURE_MAPPED.
contourMethod
A Boolean specifying whether tick mark plots should be displayed on line-type
elements. If tickmarkPlots=ON, Abaqus displays a tick mark plot. If
tickmarkPlots
tickmarkPlots=OFF, Abaqus displays contours on the element faces. The default value
is OFF.
A SymbolicConstant specifying the interval style of the contour plot. Possible values
are CONTINUOUS and UNIFORM. The default value is UNIFORM.
contourStyle
An Int specifying the number of intervals when contourStyle=UNIFORM. Possible
values are 2 numIntervals  24. The default value is 12.
numIntervals
A SymbolicConstant specifying the interval type of the contour plot. Possible values
are UNIFORM, LOG, and USER_DEFINED. The default value is UNIFORM.
intervalType
A sequence of Floats specifying the interval values when
intervalType=USER_DEFINED.
intervalValues
A Boolean specifying whether the contour range maximum value should be computed
from the output data to be contoured. The default value is ON.
maxAutoCompute
A Float specifying the contour range maximum value to be used in the plot when
maxAutoCompute=ON. The default value is autoMaxValue.
maxValue
A Boolean specifying whether the contour range minimum value should be computed
from the output data to be contoured. The default value is ON.
minAutoCompute
A Float specifying the contour range minimum value to be used in the plot when
minAutoCompute=ON. The default value is autoMinValue.
minValue
A SymbolicConstant specifying the method to be used when contour limits are
automatically computed for animation. animationAutoLimits will only effect the
animationAutoLimits
minimum limit and/or maximum limit when minAutoCompute and/or
maxAutoCompute=True. Possible values are FIRST_AND_LAST,
CURRENT_FRAME, RECOMPUTE_EACH_FRAME, and ALL_FRAMES. The
default value is ALL_FRAMES.
A String specifying the edge color to be used when contourType=LINE. The default
value is "White".
edgeColorLine
A String specifying the edge color to be used when contourType=BANDED or QUILT.
The default value is "Black".
edgeColorBandedQuilt
A String specifying the name of the color spectrum to be used in the contour plot.
The default value is "Rainbow".
spectrum
1769
Abaqus Scripting Reference Guide
ContourOptions object

A Boolean specifying whether the contour legend should show the lowest value at
the top and the highest value at the bottom (reversedContourLegendRange=ON) or
vice versa. The default value is OFF.
reversedContourLegendRange
A SymbolicConstant specifying the color of contour values that exceed the limits of
the plot. Possible values are SPECTRUM and SPECIFY.
outsideLimitsMode
When outsideLimitsMode=SPECTRUM, the maximum and minimum contour spectrum
colors are used for values that exceed the limits of the plot. When
outsideLimitsMode=SPECIFY, the values of outsideLimitsAboveColor and
outsideLimitsBelowColor are used for values that exceed the limits of the plot.
A String specifying the color to be used for values that exceed the limits of the plot
when outsideLimitsMode=SPECIFY. The default value is "Grey80".
outsideLimitsAboveColor
A String specifying the color to be used for values that exceed the limits of the plot
when outsideLimitsMode=SPECIFY. The default value is "Grey20".
outsideLimitsBelowColor
A sequence of sequences of SymbolicConstants specifying the line style and line
thickness for each interval in the plot when contourType=LINE. The size of the outer
intervalLineAttributes
sequence must be equal to numIntervals-1. The inner sequence consists of two
SymbolicConstants specifying the line style and line thickness. For possible values,
refer to the edgeLineStyle and edgeLineThickness members of the DGCommonOptions
object. The default is ((SOLID, VERY_THIN), ).
A Boolean specifying whether to plot the edges of each contour interval when
contourType=BANDED or ISOSURFACE. The default value is OFF.
contourEdges
A String specifying the color to be used to plot the contour edges when
contourType=BANDED or ISOSURFACE. The default value is "Grey60".
contourEdgeColor
A SymbolicConstant specifying the edge line style to be used to plot the contour edges
when contourType=BANDED or ISOSURFACE. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
contourEdgeStyle
A SymbolicConstant specifying the edge line thickness to be used to plot the edge of
the contour intervals when contourType=BANDED or ISOSURFACE. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
contourEdgeThickness
A SymbolicConstant specifying the length of the tick mark plot axes. Possible values
are SHORT, MEDIUM, and LONG. The default value is MEDIUM.
tickmarkAxisLength
A Float specifying the base contour value deﬁning the tick mark axis contour value
that intersects the elements. Possible values are
autoMinValue tickmarkBaseValue autoMaxValue. The default value is 0.0.
tickmarkBaseValue
A SymbolicConstant specifying the orientation of the tick mark plots. Possible values
are N1 and N2. The default value is N2.
tickmarkOrientation
Abaqus Scripting Reference Guide
1770
ContourOptions object

A String specifying the color to be used to plot the tick mark curve. The default value
is "Cyan".
tickmarkCurveColor
A Boolean specifying the display of the nodal averaged coordinate systems used when
averaging element vector or tensor data. The default value is OFF.
averagedOrientationDisplay
A Boolean specifying whether to auto-compute contour limits using extrapolated
values alone or extrapolated values that are averaged. The default value is OFF.
extrapolatedAveraging
A Boolean specifying whether to display location of maximum value. The default
value is OFF.
showMaxLocation
A Boolean specifying whether to display location of minimum value. The default
value is OFF.
showMinLocation
A Boolean specifying whether to hide the values outside the speciﬁed
minimum/maximum for the contour interval when legendHideOutsideLimits=ON.
The default value is OFF.
legendHideOutsideLimits
Return value
None.
Exceptions
RangeError.
Members
The ContourOptions object can have the following members:
A SymbolicConstant specifying the contour type. Possible values are LINE, BANDED,
QUILT, and ISOSURFACE. The default value is BANDED.
contourType
An Int specifying the number of intervals when contourStyle=UNIFORM. Possible
values are 2 numIntervals  24. The default value is 12.
numIntervals
A SymbolicConstant specifying the interval type of the contour plot. Possible values
are UNIFORM, LOG, and USER_DEFINED. The default value is UNIFORM.
intervalType
A Boolean specifying whether the contour range maximum value should be computed
from the output data to be contoured. The default value is ON.
maxAutoCompute
A Float specifying the contour range maximum value to be used in the plot when
maxAutoCompute=ON. The default value is autoMaxValue.
maxValue
A Boolean specifying whether the contour range minimum value should be computed
from the output data to be contoured. The default value is ON.
minAutoCompute
1771
Abaqus Scripting Reference Guide
ContourOptions object

A Float specifying the contour range minimum value to be used in the plot when
minAutoCompute=ON. The default value is autoMinValue.
minValue
A SymbolicConstant specifying the method to be used when contour limits are
automatically computed for animation. animationAutoLimits will only effect the
animationAutoLimits
minimum limit and/or maximum limit when minAutoCompute and/or
maxAutoCompute=True. Possible values are FIRST_AND_LAST,
CURRENT_FRAME, RECOMPUTE_EACH_FRAME, and ALL_FRAMES. The
default value is ALL_FRAMES.
A SymbolicConstant specifying the color of contour values that exceed the limits of
the plot. Possible values are SPECTRUM and SPECIFY.
outsideLimitsMode
When outsideLimitsMode=SPECTRUM, the maximum and minimum contour spectrum
colors are used for values that exceed the limits of the plot. When
outsideLimitsMode=SPECIFY, the values of outsideLimitsAboveColor and
outsideLimitsBelowColor are used for values that exceed the limits of the plot.
A Boolean specifying whether to auto-compute contour limits using extrapolated
values alone or extrapolated values that are averaged. The default value is OFF.
extrapolatedAveraging
A Boolean specifying whether to display location of maximum value. The default
value is OFF.
showMaxLocation
A Boolean specifying whether to display location of minimum value. The default
value is OFF.
showMinLocation
A Float specifying the maximum value to be used in the plot. The value is computed
from the output data to be contoured. This value is read-only.
autoMaxValue
A Float specifying the minimum value to be used in the plot. The value is computed
from the output data to be contoured. This value is read-only.
autoMinValue
A String specifying the color to be used for values that exceed the limits of the plot
when outsideLimitsMode=SPECIFY. The default value is "Grey80".
outsideLimitsAboveColor
A String specifying the color to be used for values that exceed the limits of the plot
when outsideLimitsMode=SPECIFY. The default value is "Grey20".
outsideLimitsBelowColor
A String specifying the name of the color spectrum to be used in the contour plot.
The default value is "Rainbow".
spectrum
A Boolean specifying whether the contour legend should show the lowest value at
the top and the highest value at the bottom (reversedContourLegendRange=ON) or
vice versa. The default value is OFF.
reversedContourLegendRange
A tuple of Floats specifying the interval values when intervalType=USER_DEFINED.
intervalValues
Abaqus Scripting Reference Guide
1772
ContourOptions object

A SymbolicConstant specifying the contour rendering method. Possible values are
TEXTURE_MAPPED and TESSELLATED. The default value is
TEXTURE_MAPPED.
contourMethod
A Boolean specifying whether tick mark plots should be displayed on line-type
elements. If tickmarkPlots=ON, Abaqus displays a tick mark plot. If
tickmarkPlots
tickmarkPlots=OFF, Abaqus displays contours on the element faces. The default value
is OFF.
A SymbolicConstant specifying the interval style of the contour plot. Possible values
are CONTINUOUS and UNIFORM. The default value is UNIFORM.
contourStyle
A Boolean specifying whether to plot the edges of each contour interval when
contourType=BANDED or ISOSURFACE. The default value is OFF.
contourEdges
A SymbolicConstant specifying the edge line style to be used to plot the contour edges
when contourType=BANDED or ISOSURFACE. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
contourEdgeStyle
A SymbolicConstant specifying the edge line thickness to be used to plot the edge of
the contour intervals when contourType=BANDED or ISOSURFACE. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
contourEdgeThickness
A Boolean specifying the display of the nodal averaged coordinate systems used when
averaging element vector or tensor data. The default value is OFF.
averagedOrientationDisplay
A Boolean specifying whether the label for the matching ply shows up in the viewport.
The default value is OFF.
matchingPlyLabels
A Boolean specifying whether the contour color is driven by the matching ply. The
default value is OFF.
colorByMatchingPlies
A SymbolicConstant specifying the length of the tick mark plot axes. Possible values
are SHORT, MEDIUM, and LONG. The default value is MEDIUM.
tickmarkAxisLength
A Float specifying the base contour value deﬁning the tick mark axis contour value
that intersects the elements. Possible values are
autoMinValue tickmarkBaseValue autoMaxValue. The default value is 0.0.
tickmarkBaseValue
A SymbolicConstant specifying the orientation of the tick mark plots. Possible values
are N1 and N2. The default value is N2.
tickmarkOrientation
A String specifying the edge color to be used when contourType=LINE. The default
value is "White".
edgeColorLine
A String specifying the edge color to be used when contourType=BANDED or QUILT.
The default value is "Black".
edgeColorBandedQuilt
1773
Abaqus Scripting Reference Guide
ContourOptions object

A String specifying the color to be used to plot the contour edges when
contourType=BANDED or ISOSURFACE. The default value is "Grey60".
contourEdgeColor
A String specifying the color to be used to plot the tick mark curve. The default value
is "Cyan".
tickmarkCurveColor
A tuple of tuples of SymbolicConstants specifying the line style and line thickness
for each interval in the plot when contourType=LINE. The size of the outer sequence
intervalLineAttributes
must be equal to numIntervals-1. The inner sequence consists of two
SymbolicConstants specifying the line style and line thickness. For possible values,
refer to the edgeLineStyle and edgeLineThickness members of the DGCommonOptions
object. The default is ((SOLID, VERY_THIN), ).
A Boolean specifying whether to hide the values outside the speciﬁed min/max in
the contour legend. This setting hides the autoMinValue and autoMaxValue from the
spectrum when legendHideOutsideLimits=ON.The default value is OFF.
legendHideOutsideLimits
Abaqus Scripting Reference Guide
1774
ContourOptions object

DefaultOdbDisplay object
The DefaultOdbDisplay object is a limited-functionality version of the OdbDisplay object.
Access
import visualization
session.defaultOdbDisplay
Members
The DefaultOdbDisplay object has the following members:
A BasicOptions object.
basicOptions
A CommonOptions object.
commonOptions
A ContourOptions object.
contourOptions
A DisplayBodyOptions object.
displayBodyOptions
A FreeBodyOptions object.
freeBodyOptions
A StreamOptions object.
streamOptions
An OrientationOptions object.
materialOrientationOptions
A SuperimposeOptions object.
superimposeOptions
A SymbolOptions object.
symbolOptions
A ViewCutOptions object.
viewCutOptions
1775
DefaultOdbDisplay object

DisplayBodyOptions object
The DisplayBodyOptions object stores values and attributes that are common to all plot states. The DisplayBodyOptions
object has no constructor command. Abaqus creates a defaultOdbDisplay.displayBodyOptions member when you
import the Visualization module. Abaqus creates a displayBodyOptions member when it creates the OdbDisplay object,
using the values from defaultOdbDisplay.displayBodyOptions. Abaqus creates the odbDisplay member when a viewport
is created, using the values from defaultOdbDisplay.
DisplayBodyOptions objects are accessed in one of two ways:
•
The default display body options. These settings are used as defaults when other displayBodyOptions members are
created. These settings can be set to customize user preferences.
•
The display body options associated with a particular viewport.
The DisplayBodyOptions object is derived from the DGDisplayBodyOptions object.
Access
import visualization
session.defaultOdbDisplay.displayBodyOptions
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.displayBodyOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.displayBodyOptions
session.viewports[name].layers[name].odbDisplay.displayBodyOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.displayBodyOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.displayBodyOptions
session.viewports[name].odbDisplay.displayBodyOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.displayBodyOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.displayBodyOptions
setValues(...)
This method modiﬁes the DisplayBodyOptions object.
Required arguments
None.
Optional arguments
A DisplayBodyOptions object from which values are to be copied. If other arguments
are also supplied to setValues, they will override the values in options. The default
value is None.
options
A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is EXTERIOR.
visibleEdges
NONE can be used only when renderStyle=SHADED.
Abaqus Scripting Reference Guide
1776
DisplayBodyOptions object

A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "White".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED or
SHADED. The default value is "White".
ﬁllColor
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A sequence of three Floats specifying the coordinate scaling in each of the three
coordinate directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values are
0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
Return value
None.
Exceptions
RangeError.
Members
The DisplayBodyOptions object can have the following members:
A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is EXTERIOR.
visibleEdges
NONE can be used only when renderStyle=SHADED.
1777
Abaqus Scripting Reference Guide
DisplayBodyOptions object

A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "White".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED
or SHADED. The default value is "White".
ﬁllColor
A tuple of three Floats specifying the coordinate scaling in each of the three coordinate
directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
Abaqus Scripting Reference Guide
1778
DisplayBodyOptions object

OrientationOptions object
The OrientationOptions object stores values and attributes associated with a material orientation plot. The
OrientationOptions object has no constructor command. Abaqus creates a defaultOdbDisplay.materialOrientationOptions
member when you import the Visualization module. Abaqus creates a materialOrientationOptions member when it
creates the OdbDisplay object, using the values from defaultOdbDisplay.materialOrientationOptions. Abaqus creates
the odbDisplay member when a viewport is created, using the values from defaultOdbDisplay.
OrientationOptions objects are accessed in one of two ways:
•
The default material orientation options. These settings are used as defaults when other materialOrientationOptions
members are created. These settings can be set to customize user preferences.
•
The material orientation options associated with a particular viewport.
The OrientationOptions object is derived from the DGOrientationOptions object.
Access
import visualization
session.defaultOdbDisplay.materialOrientationOptions
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.materialOrientationOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.materialOrientationOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.materialOrientationOptions
session.viewports[name].layers[name].odbDisplay\
.materialOrientationOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.materialOrientationOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.materialOrientationOptions
session.viewports[name].odbDisplay.materialOrientationOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.materialOrientationOptions
setValues(...)
This method modiﬁes the OrientationOptions object.
Required arguments
None.
Optional arguments
An OrientationOptions object from which values are to be copied. If other arguments are
also supplied to setValues, they will override the values in options. The default value
is None.
options
A String specifying the color of axis 1 of the material orientation triad. The default value
is "Cyan".
axis1Color
1779
OrientationOptions object

A Boolean specifying whether axis 1 of the material orientation triad should be displayed.
The default value is ON.
showAxis1
A String specifying the color of axis 2 of the material orientation triad. The default value
is "Yellow".
axis2Color
A Boolean specifying whether axis 2 of the material orientation triad should be displayed.
The default value is ON.
showAxis2
A String specifying the color of axis 3 of the material orientation triad. The default value
is "Red".
axis3Color
A Boolean specifying whether axis 3 of the material orientation triad should be displayed.
The default value is ON.
showAxis3
A Float specifying the size of the material orientation triad. The default value is 12.0.
symbolSize
A SymbolicConstant specifying the thickness of the material orientation triad. Possible
values are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
lineThickness
A SymbolicConstant specifying the orientation used for composites. Possible values are
PLY and LAYUP. The default value is PLY.
orientation
A SymbolicConstant specifying the arrowhead style for the material orientation triad.
Possible values are NONE, FILLED, and WIRE. The default value is NONE.
arrowheadStyle
A SymbolicConstant specifying the scaling basis for the material orientation triad. Possible
values are MODEL_SIZE and SCREEN_SIZE. The default value is MODEL_SIZE.
scaleMode
Return value
None.
Exceptions
RangeError.
Members
The OrientationOptions object can have the following members:
A Boolean specifying whether axis 1 of the material orientation triad should be displayed.
The default value is ON.
showAxis1
A Boolean specifying whether axis 2 of the material orientation triad should be displayed.
The default value is ON.
showAxis2
A Boolean specifying whether axis 3 of the material orientation triad should be displayed.
The default value is ON.
showAxis3
Abaqus Scripting Reference Guide
1780
OrientationOptions object

A Float specifying the size of the material orientation triad. The default value is 12.0.
symbolSize
A SymbolicConstant specifying the thickness of the material orientation triad. Possible
values are VERY_THIN, THIN, MEDIUM, and THICK. The default value is
VERY_THIN.
lineThickness
A SymbolicConstant specifying the orientation used for composites. Possible values are
PLY and LAYUP. The default value is PLY.
orientation
A SymbolicConstant specifying the arrowhead style for the material orientation triad.
Possible values are NONE, FILLED, and WIRE. The default value is NONE.
arrowheadStyle
A SymbolicConstant specifying the scaling basis for the material orientation triad. Possible
values are MODEL_SIZE and SCREEN_SIZE. The default value is MODEL_SIZE.
scaleMode
A String specifying the color of axis 1 of the material orientation triad. The default value
is "Cyan".
axis1Color
A String specifying the color of axis 2 of the material orientation triad. The default value
is "Yellow".
axis2Color
A String specifying the color of axis 3 of the material orientation triad. The default value
is "Red".
axis3Color
1781
Abaqus Scripting Reference Guide
OrientationOptions object

SuperimposeOptions object
The SuperimposeOptions object stores values and attributes associated with the undeformed shape when the display
contains both the deformed shape and the undeformed shape. The SuperimposeOptions object has no constructor
command. Abaqus creates a defaultOdbDisplay.superimposeOptions member when you import the Visualization
module. Abaqus creates a superimposeOptions member when it creates the OdbDisplay object, using the values from
defaultOdbDisplay.superimposeOptions. Abaqus creates the odbDisplay member when a viewport is created, using
the values from defaultOdbDisplay.
SuperimposeOptions objects are accessed in one of two ways:
•
The default superimpose options. These settings are used as defaults when other superimposeOptions members are
created. These settings can be set to customize user preferences.
•
The superimpose options associated with a particular viewport.
The SuperimposeOptions object is derived from the DGSuperimposeOptions object.
Access
import visualization
session.defaultOdbDisplay.superimposeOptions
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.superimposeOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.superimposeOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.superimposeOptions
session.viewports[name].layers[name].odbDisplay.superimposeOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.superimposeOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.superimposeOptions
session.viewports[name].odbDisplay.superimposeOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.superimposeOptions
setValues(...)
This method modiﬁes the SuperimposeOptions object.
Required arguments
None.
Optional arguments
A SuperimposeOptions object from which values are to be copied. If other arguments
are also supplied to setValues, they will override the values in options. The default
value is None.
options
A SymbolicConstant specifying the render style of the plot. Possible values are
WIREFRAME, FILLED, HIDDEN, and SHADED. The default value is WIREFRAME.
renderStyle
Abaqus Scripting Reference Guide
1782
SuperimposeOptions object

A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is FEATURE.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "Green".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED or
SHADED. The default value is "Green".
ﬁllColor
A String specifying the label font to be used for all model labels. The default value is
"-*-courier-medium-r-normal-*-*-120-*-*-m-*-*-*".
labelFont
A Boolean specifying whether to plot the element labels. The default value is OFF.
elemLabels
A String specifying the color to be used to plot the element labels. The default value
is "Cyan".
elemLabelColor
A Boolean specifying whether to plot the face labels. The default value is OFF.
faceLabels
A String specifying the color to be used to plot the face labels. The default value is
"Red".
faceLabelColor
A Boolean specifying whether to plot the node labels. The default value is OFF.
nodeLabels
A String specifying the color to be used to plot the node labels. The default value is
"Yellow".
nodeLabelColor
A Boolean specifying whether to plot the node symbols. The default value is OFF.
nodeSymbols
A SymbolicConstant specifying the node symbol types. Possible values are:
nodeSymbolType
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
1783
Abaqus Scripting Reference Guide
SuperimposeOptions object

•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
The default value is HOLLOW_CIRCLE.
A String specifying the color to be used to plot the node symbols. The default value is
"Yellow".
nodeSymbolColor
A SymbolicConstant specifying the node symbol size. Possible values are SMALL,
MEDIUM, and LARGE. The default value is SMALL.
nodeSymbolSize
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A sequence of three Floats specifying the coordinate scaling in each of the three
coordinate directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
A Boolean specifying whether to draw arrows that indicate the directions of element
and surface normals. The default value is OFF.
normals
A SymbolicConstant specifying whether to draw element normals and surface normals.
Possible values are ELEMENT and SURFACE. The default value is ELEMENT.
normalDisplay
A String specifying the color to be used to plot the normal to a nonbeam element or to
a surface. The default value is "Red".
faceNormalColor
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Blue".
beamN1Color
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Red".
beamN2Color
A String specifying the color to be used to plot an arrow along the tangent to a beam.
The default value is "White".
beamTangentColor
A SymbolicConstant specifying the length of the normal arrows. Possible values are
SHORT, MEDIUM, and LONG. The default value is MEDIUM.
normalArrowLength
Abaqus Scripting Reference Guide
1784
SuperimposeOptions object

A SymbolicConstant specifying the thickness of the normal arrows. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
normalLineThickness
A SymbolicConstant specifying the arrowhead style of the normal arrows. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
normalArrowheadStyle
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values are
0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
A SymbolicConstant specifying the offset of the deformed shape from the undeformed
shape. Possible values are NONE, UNIFORM, and NONUNIFORM. The default value
is NONE.
deformedOffsetMode
NONE speciﬁes that there should be no offset of the deformed shape from the
undeformed shape.
A Float specifying the uniform offset value when deformedOffsetMode=UNIFORM.
The default value is 0.0.
uniformOffset
A sequence of three Floats specifying the offset value in each of the three coordinate
directions when deformedOffsetMode=NONUNIFORM. The default value is (0, 0, 0).
nonuniformOffset
Return value
None.
Exceptions
RangeError.
Members
The SuperimposeOptions object can have the following members:
A SymbolicConstant specifying the offset of the deformed shape from the undeformed
shape. Possible values are NONE, UNIFORM, and NONUNIFORM. The default value
is NONE.
deformedOffsetMode
NONE speciﬁes that there should be no offset of the deformed shape from the
undeformed shape.
A Float specifying the uniform offset value when deformedOffsetMode=UNIFORM.
The default value is 0.0.
uniformOffset
A tuple of three Floats specifying the offset value in each of the three coordinate
directions when deformedOffsetMode=NONUNIFORM. The default value is (0, 0, 0).
nonuniformOffset
A SymbolicConstant specifying the render style of the plot. Possible values are
WIREFRAME, FILLED, HIDDEN, and SHADED. The default value is WIREFRAME.
renderStyle
1785
Abaqus Scripting Reference Guide
SuperimposeOptions object

A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is FEATURE.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A Boolean specifying whether to plot the element labels. The default value is OFF.
elemLabels
A Boolean specifying whether to plot the face labels. The default value is OFF.
faceLabels
A Boolean specifying whether to plot the node labels. The default value is OFF.
nodeLabels
A Boolean specifying whether to plot the node symbols. The default value is OFF.
nodeSymbols
A SymbolicConstant specifying the node symbol types. Possible values are:
nodeSymbolType
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
The default value is HOLLOW_CIRCLE.
A SymbolicConstant specifying the node symbol size. Possible values are SMALL,
MEDIUM, and LARGE. The default value is SMALL.
nodeSymbolSize
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
Abaqus Scripting Reference Guide
1786
SuperimposeOptions object

A Boolean specifying whether to draw arrows that indicate the directions of element
and surface normals. The default value is OFF.
normals
A SymbolicConstant specifying whether to draw element normals and surface normals.
Possible values are ELEMENT and SURFACE. The default value is ELEMENT.
normalDisplay
A SymbolicConstant specifying the length of the normal arrows. Possible values are
SHORT, MEDIUM, and LONG. The default value is MEDIUM.
normalArrowLength
A SymbolicConstant specifying the thickness of the normal arrows. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
normalLineThickness
A SymbolicConstant specifying the arrowhead style of the normal arrows. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
normalArrowheadStyle
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "Green".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED
or SHADED. The default value is "Green".
ﬁllColor
A String specifying the label font to be used for all model labels. The default value is
"-*-courier-medium-r-normal-*-*-120-*-*-m-*-*-*".
labelFont
A String specifying the color to be used to plot the element labels. The default value
is "Cyan".
elemLabelColor
A String specifying the color to be used to plot the face labels. The default value is
"Red".
faceLabelColor
A String specifying the color to be used to plot the node labels. The default value is
"Yellow".
nodeLabelColor
A String specifying the color to be used to plot the node symbols. The default value
is "Yellow".
nodeSymbolColor
A String specifying the color to be used to plot the normal to a nonbeam element or
to a surface. The default value is "Red".
faceNormalColor
1787
Abaqus Scripting Reference Guide
SuperimposeOptions object

A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Blue".
beamN1Color
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Red".
beamN2Color
A String specifying the color to be used to plot an arrow along the tangent to a beam.
The default value is "White".
beamTangentColor
A tuple of three Floats specifying the coordinate scaling in each of the three coordinate
directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
Abaqus Scripting Reference Guide
1788
SuperimposeOptions object

SymbolOptions object
The SymbolOptions object stores values and attributes associated with a symbol plot. The SymbolOptions object has
no constructor command. Abaqus creates a defaultOdbDisplay.symbolOptions member when you import the Visualization
module. Abaqus creates a symbolOptions member when it creates the OdbDisplay object, using the values from
defaultOdbDisplay.symbolOptions. Abaqus creates the odbDisplay member when a viewport is created, using the
values from defaultOdbDisplay.
SymbolOptions objects are accessed in one of two ways:
•
The default symbol options. These settings are used as defaults when other symbolOptions members are created.
These settings can be set to customize user preferences.
•
The symbol options associated with a particular viewport.
The SymbolOptions object is derived from the DGSymbolOptions object.
Access
import visualization
session.defaultOdbDisplay.symbolOptions
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.symbolOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.symbolOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.symbolOptions
session.viewports[name].layers[name].odbDisplay.symbolOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.symbolOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.symbolOptions
session.viewports[name].odbDisplay.symbolOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.symbolOptions
setValues(...)
This method modiﬁes the SymbolOptions object.
Required arguments
None.
Optional arguments
A SymbolOptions object from which values are to be copied. If other arguments
are also supplied to setValues, they will override the values in options. The
default value is None.
options
A SymbolicConstant specifying the vector quantity to display. Possible values are
RESULTANT and VECTOR_COMPONENT. The default value is RESULTANT.
vectorQuantity
1789
SymbolOptions object

A SymbolicConstant specifying the vector line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
vectorLineThickness
A SymbolicConstant specifying the vector arrowhead style. Possible values are
NONE, FILLED, and WIRE. The default value is WIRE.
vectorArrowheadStyle
A String specifying the vector color. The default value is "Red".
vectorColor
A SymbolicConstant specifying the vector color method. Possible values are
UNIFORM and SPECTRUM. The default value is SPECTRUM.
vectorColorMethod
A String specifying the vector color spectrum name. The default value is
"Rainbow".
vectorColorSpectrum
An Int specifying the number of color intervals for vector symbols. The default
value is 12.
vectorIntervalNumber
A Float specifying the factor for randomized sampling. The default value is 1.0.
symbolDensity
A Boolean specifying whether to use constant-length arrows for vector symbols.
The default value is OFF.
constantLengthArrows
A SymbolicConstant specifying the tensor color method. Possible values are
UNIFORM and SPECTRUM. The default value is SPECTRUM.
tensorColorMethod
A String specifying the tensor color spectrum name. The default value is "Rainbow".
tensorColorSpectrum
An Int specifying the number of color intervals for tensor symbols. The default
value is 12.
tensorIntervalNumber
A Boolean specifying whether the maximum vector value is to be computed
automatically. The default value is ON.
vectorMaxValueAutoCompute
A Float specifying the user-speciﬁed maximum vector value. The default value is
autoVectorMaxValue.
vectorMaxValue
A Boolean specifying whether the minimum vector value is to be computed
automatically. The default value is ON.
vectorMinValueAutoCompute
A Float specifying the user-speciﬁed minimum vector value. The default value is
autoVectorMinValue.
vectorMinValue
A SymbolicConstant specifying the tensor quantity to display. Possible values are
ALL_PRINCIPAL_COMPONENTS, PRINCIPAL_COMPONENT,
tensorQuantity
ALL_DIRECT_COMPONENTS, and DIRECT_COMPONENT. The default value
is ALL_PRINCIPAL_COMPONENTS.
An Int specifying the length of vector and tensor symbols. The default value is 6.
arrowSymbolSize
Abaqus Scripting Reference Guide
1790
SymbolOptions object

A String specifying the color of the maximum principal tensor symbols. The default
value is "Red".
tensorMaxPrinColor
A String specifying the color of the minimum principal tensor symbols. The default
value is "Cyan".
tensorMinPrinColor
A String specifying the color of the intermediate principal tensor symbols. The
default value is "Yellow".
tensorMidPrinColor
A String specifying the color of the selected principal tensor symbols. The default
value is "Red".
tensorSelectedPrinColor
A SymbolicConstant specifying the line thickness of the tensor symbols. Possible
values are VERY_THIN, THIN, MEDIUM, and THICK. The default value is
VERY_THIN.
tensorLineThickness
A SymbolicConstant specifying the arrowhead style of the tensor symbols. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
tensorArrowheadStyle
A Boolean specifying whether the maximum tensor value is to be computed
automatically. The default value is ON.
tensorMaxValueAutoCompute
A Float specifying the user-speciﬁed maximum tensor value. The default value is
autoTensorMaxValue.
tensorMaxValue
A Boolean specifying whether the minimum tensor value is to be computed
automatically. The default value is ON.
tensorMinValueAutoCompute
A Float specifying the user-speciﬁed minimum tensor value. The default value is
autoTensorMinValue.
tensorMinValue
Return value
None.
Exceptions
RangeError.
Members
The SymbolOptions object can have the following members:
A SymbolicConstant specifying the vector quantity to display. Possible values are
RESULTANT and VECTOR_COMPONENT. The default value is RESULTANT.
vectorQuantity
A Boolean specifying whether the maximum vector value is to be computed
automatically. The default value is ON.
vectorMaxValueAutoCompute
1791
Abaqus Scripting Reference Guide
SymbolOptions object

A Float specifying the user-speciﬁed maximum vector value. The default value is
autoVectorMaxValue.
vectorMaxValue
A Boolean specifying whether the minimum vector value is to be computed
automatically. The default value is ON.
vectorMinValueAutoCompute
A Float specifying the user-speciﬁed minimum vector value. The default value is
autoVectorMinValue.
vectorMinValue
A SymbolicConstant specifying the tensor quantity to display. Possible values are
ALL_PRINCIPAL_COMPONENTS, PRINCIPAL_COMPONENT,
tensorQuantity
ALL_DIRECT_COMPONENTS, and DIRECT_COMPONENT. The default value
is ALL_PRINCIPAL_COMPONENTS.
A Boolean specifying whether the maximum tensor value is to be computed
automatically. The default value is ON.
tensorMaxValueAutoCompute
A Float specifying the user-speciﬁed maximum tensor value. The default value is
autoTensorMaxValue.
tensorMaxValue
A Boolean specifying whether the minimum tensor value is to be computed
automatically. The default value is ON.
tensorMinValueAutoCompute
A Float specifying the user-speciﬁed minimum tensor value. The default value is
autoTensorMinValue.
tensorMinValue
The SymbolicConstant NOT_SET or a Float specifying the vector maximum value
when vectorMaxValueAutoCompute=ON. This value is read-only. The default value
is NOT_SET.
autoVectorMaxValue
The SymbolicConstant NOT_SET or a Float specifying the vector minimum value
when vectorMinValueAutoCompute=ON. This value is read-only. The default value
is NOT_SET.
autoVectorMinValue
The SymbolicConstant NOT_SET or a Float specifying the tensor maximum value
when tensorMaxValueAutoCompute=ON. This value is read-only. The default value
is NOT_SET.
autoTensorMaxValue
The SymbolicConstant NOT_SET or a Float specifying the tensor minimum value
when tensorMinValueAutoCompute=ON. This value is read-only. The default value
is NOT_SET.
autoTensorMinValue
A SymbolicConstant specifying the vector line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
vectorLineThickness
A SymbolicConstant specifying the vector color method. Possible values are
UNIFORM and SPECTRUM. The default value is SPECTRUM.
vectorColorMethod
Abaqus Scripting Reference Guide
1792
SymbolOptions object

A SymbolicConstant specifying the tensor color method. Possible values are
UNIFORM and SPECTRUM. The default value is SPECTRUM.
tensorColorMethod
A SymbolicConstant specifying the vector arrowhead style. Possible values are
NONE, FILLED, and WIRE. The default value is WIRE.
vectorArrowheadStyle
An Int specifying the length of vector and tensor symbols. The default value is 6.
arrowSymbolSize
An Int specifying the number of color intervals for vector symbols. The default
value is 12.
vectorIntervalNumber
A Float specifying the factor for randomized sampling. The default value is 1.0.
symbolDensity
A Boolean specifying whether to use constant-length arrows for vector symbols.
The default value is OFF.
constantLengthArrows
An Int specifying the number of color intervals for tensor symbols. The default
value is 12.
tensorIntervalNumber
A SymbolicConstant specifying the line thickness of the tensor symbols. Possible
values are VERY_THIN, THIN, MEDIUM, and THICK. The default value is
VERY_THIN.
tensorLineThickness
A SymbolicConstant specifying the arrowhead style of the tensor symbols. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
tensorArrowheadStyle
A SymbolicConstant specifying the number format for tensor. Possible values are
SCIENTIFIC, FIXED, and ENGINEERING. The default value is SCIENTIFIC.
numberFormatT
A SymbolicConstant specifying the number format for vector. Possible values are
SCIENTIFIC, FIXED, and ENGINEERING. The default value is SCIENTIFIC.
numberFormatV
A SymbolicConstant specifying the arrow scaling mode. Possible values are
MODEL_SIZE and SCREEN_SIZE. The default value is MODEL_SIZE.
arrowScaleMode
A Boolean specifying whether to draw tensor labels. The default value is OFF.
drawLabelT
A Boolean specifying whether to draw vector labels. The default value is OFF.
drawLabelV
An Int specifying the number of digits in the tensor label. The default value is 2.
numDigitsT
An Int specifying the number of digits in the vector label. The default value is 2.
numDigitsV
A String specifying the vector color. The default value is "Red".
vectorColor
A String specifying the vector color spectrum name. The default value is "Rainbow".
vectorColorSpectrum
A String specifying the tensor color spectrum name. The default value is "Rainbow".
tensorColorSpectrum
1793
Abaqus Scripting Reference Guide
SymbolOptions object

A String specifying the text color for tensor. The default value is "Yellow".
textColorT
A String specifying the text color for vector. The default value is "Yellow".
textColorV
A String specifying the text font for tensor. The default value is "verdana".
textFontT
A String specifying the text font for vector. The default value is "verdana".
textFontV
A String specifying the color of the maximum principal tensor symbols. The default
value is "Red".
tensorMaxPrinColor
A String specifying the color of the minimum principal tensor symbols. The default
value is "Cyan".
tensorMinPrinColor
A String specifying the color of the intermediate principal tensor symbols. The
default value is "Yellow".
tensorMidPrinColor
A String specifying the color of the selected principal tensor symbols. The default
value is "Red".
tensorSelectedPrinColor
Abaqus Scripting Reference Guide
1794
SymbolOptions object

ViewCut object
The ViewCut object is used to store values and attributes associate with ViewCut type objects. ViewCut objects can
be created using the methods described below. The methods accessed via the OdbDisplay object cause the ViewCut
object to be added to the session.viewports[name].odbDisplay.viewCuts repository.
Access
import visualization
session.viewports[name].layers[name].odbDisplay.viewCuts[name]
session.viewports[name].odbDisplay.viewCuts[name]
ViewCut(...)
This method creates a ViewCut object.
Path
session.viewports[name].layers[name].odbDisplay.ViewCut
session.viewports[name].odbDisplay.ViewCut
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the shape of the ViewCut object. Possible values are PLANE,
CYLINDER, SPHERE, and ISOSURFACE.
shape
A sequence of three Floats specifying the X-, Y-, and Z-coordinates of the origin of the plane,
cylinder or sphere cut. This origin is not required if the cut shape is ISOSURFACE or if the cut is
deﬁned by the csysName argument.
origin
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the normal axis to the plane deﬁning
the cut, when the plane is deﬁned using the origin argument or a SymbolicConstant deﬁning this
normal
normal axis, when the cut is deﬁned by the csysName argument. Possible values are AXIS_1,
AXIS_2, AXIS_3. This axis is not required if the cut shape is CYLINDER, SPHERE or
ISOSURFACE.
A sequence of three Floats specifying the X-, Y-, and Z-coordinates of the second axis of the plane
deﬁning the cut, when the plane is deﬁned using the origin argument or a SymbolicConstant deﬁning
axis2
this second axis, when the cut is deﬁned by the csysName argument. Possible values are AXIS_1,
AXIS_2, AXIS_3. This axis is used to rotate the plane cut. It is not required if the cut shape is
CYLINDER, SPHERE or ISOSURFACE.
A String specifying the name of the DatumCsys object to be used to deﬁne the cut. This name is
not required if the cut shape is ISOSURFACE or if the cut is deﬁned by the origin argument.
csysName
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the cylinder axis deﬁning the cut,
when the cut is deﬁned using the origin argument or a SymbolicConstant deﬁning this cylinder axis,
cylinderAxis
when the cut is deﬁned by the csysName argument. Possible values are AXIS_1, AXIS_2, AXIS_3.
This axis is not required if the cut shape is PLANE, SPHERE, or ISOSURFACE.
1795
ViewCut object

Optional arguments
A Boolean specifying whether the cut will follow the deformation or be static. The default
value is OFF.
followDeformation
A Boolean specifying averaging for element based ﬁelds associated with isosurface cuts
will be set to compute-average with a threshold of 100% when true. The current ﬁeld
options will be used when false. The default value is ON.
overrideAveraging
A SymbolicConstant specifying which reference frame will be used when the cut follows
the deformation. Possible values are FIRST_FRAME, LAST_FRAME, and
CURRENT_FRAME. The default value is FIRST_FRAME.
referenceFrame
Return value
A ViewCut object.
Exceptions
None.
setValues(...)
This method modiﬁes the ViewCut object.
Required arguments
None.
Optional arguments
At least one of the following must be provided:
A Float specifying the rotation angle of the cut deﬁned with a shape set to PLANE.
angle
A SymbolicConstant specifying the type of motion for the cut deﬁned with a shape set to
PLANE. Possible values are TRANSLATE and ROTATE. The default value is TRANSLATE.
motion
A Float specifying the position of the cut deﬁned with a shape set to PLANE.
position
A Float specifying the radius of the cut deﬁned with a shape set to CYLINDER or SPHERE.
radius
A SymbolicConstant specifying the rotation axis for the cut deﬁned with a shape set to
PLANE. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_2.
rotationAxis
A Float specifying the value of the cut deﬁned with a shape set to ISOSURFACE.
value
A Boolean specifying whether to display the model above the cut. The default value is OFF.
showModelAboveCut
A Boolean specifying whether to display the model on the cut. The default value is ON.
showModelOnCut
Abaqus Scripting Reference Guide
1796
ViewCut object

A Boolean specifying whether to display the model below the cut. The default value is ON.
showModelBelowCut
A Boolean specifying whether to display the free body cut. The default value is OFF.
showFreeBodyCut
A String specifying the name of the DatumCsys object to be used to deﬁne the cut. This
name is not required if the cut shape is ISOSURFACE or if the cut is deﬁned by the origin
argument.
csysName
A sequence of three Floats specifying the X-, Y-, and Z-coordinates of the origin of the plane,
cylinder or sphere cut. This origin is not required if the cut shape is ISOSURFACE or if the
cut is deﬁned by the csysName argument.
origin
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the normal axis to the plane
deﬁning the cut, when the plane is deﬁned using the origin argument or a SymbolicConstant
normal
deﬁning this normal axis, when the cut is deﬁned by the csysName argument. Possible values
are AXIS_1, AXIS_2, AXIS_3. This axis is not required if the cut shape is CYLINDER,
SPHERE or ISOSURFACE.
A sequence of three Floats specifying the X-, Y-, and Z-coordinates of the second axis of
the plane deﬁning the cut, when the plane is deﬁned using the origin argument or a
axis2
SymbolicConstant deﬁning this second axis, when the cut is deﬁned by the csysName
argument. Possible values are AXIS_1, AXIS_2, AXIS_3. This axis is used to rotate the
plane cut. It is not required if the cut shape is CYLINDER, SPHERE or ISOSURFACE.
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the cylinder axis deﬁning
the cut, when the cut is deﬁned using the origin argument or a SymbolicConstant deﬁning
cylinderAxis
this cylinder axis, when the cut is deﬁned by the csysName argument. Possible values are
AXIS_1, AXIS_2, AXIS_3. This axis is not required if the cut shape is PLANE, SPHERE,
or ISOSURFACE.
A Boolean specifying whether the cut will follow the deformation or be static. The default
value is OFF.
followDeformation
A Boolean specifying averaging for element based ﬁelds associated with isosurface cuts will
be set to compute-average with a threshold of 100% when true. The current ﬁeld options
will be used when false. The default value is ON.
overrideAveraging
A SymbolicConstant specifying which reference frame will be used when the cut follows
the deformation. Possible values are FIRST_FRAME, LAST_FRAME, and
CURRENT_FRAME. The default value is FIRST_FRAME.
referenceFrame
Return value
None.
Exceptions
None.
1797
Abaqus Scripting Reference Guide
ViewCut object

updateVariable()
This method updates the ﬁeld associated with an isosurface cut to be consistent with the current primary variable.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The ViewCut object has members with the same names and descriptions as the arguments to the ViewCut  method.
In addition, the ViewCut object has the following members:
A Float specifying the rotation angle of the cut deﬁned with a shape set to PLANE.
angle
A SymbolicConstant specifying the type of motion for the cut deﬁned with a shape
set to PLANE. Possible values are TRANSLATE and ROTATE. The default value is
TRANSLATE.
motion
A Float specifying the position of the cut deﬁned with a shape set to PLANE.
position
A Float specifying the radius of the cut deﬁned with a shape set to CYLINDER or
SPHERE.
radius
A SymbolicConstant specifying the rotation axis for the cut deﬁned with a shape set
to PLANE. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is
AXIS_2.
rotationAxis
A Float specifying the value of the cut deﬁned with a shape set to ISOSURFACE.
value
A Boolean specifying whether to display the model above the cut. The default value
is OFF.
showModelAboveCut
A Boolean specifying whether to display the model on the cut. The default value is
ON.
showModelOnCut
A Boolean specifying whether to display the model below the cut. The default value
is ON.
showModelBelowCut
A Boolean specifying whether to display the free body cut. The default value is OFF.
showFreeBodyCut
A Boolean specifying whether the cut is displayed.
active
Abaqus Scripting Reference Guide
1798
ViewCut object

A pair of Floats specifying the acceptable range for positioning the cut.
cutRange
A Float returning the cross-sectional area of the cut when showFreeBodyCut is set to
ON.
crossSectionalArea
1799
Abaqus Scripting Reference Guide
ViewCut object

ViewerOptions object
The ViewerOptions object speciﬁes options to set the result caching parameters. The ViewerOptions object has no
constructor. Abaqus creates the viewerOptions member when a session is started.
Access
import visualization
session.viewerOptions
setValues(...)
This method modiﬁes the ViewerOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether results are currently cached. Caching improves the
performance of subsequent access. The default value is ON.
primaryVariableCaching
A Boolean specifying whether deformation vectors are currently cached. Caching
improves the performance of subsequent access. The default value is ON.
deformedVariableCaching
A Boolean specifying whether the values used for displaying cut models are currently
cached. Caching improves the performance of subsequent access. The default value
is ON.
cutVariableCaching
A Boolean specifying whether the current .odb ﬁle should be checked for updates.
Setting odbUpdateChecking to OFF can improve Viewer performance when accessing
data from a remote ﬁle. The default value is ON.
odbUpdateChecking
An Int specifying the minimum time between status checks (in seconds). The default
value is 0.
odbUpdateCheckInterval
Return value
None.
Exceptions
None.
Members
The ViewerOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
1800
ViewerOptions object

Optimization commands
Optimization commands are used to perform topology, shape, or sizing optimization of your model given a set
of objectives and a set of restrictions.
In this section:
•
OptimizationTask object
•
BeadTask object
•
CombinedTermDesignResponse object
•
DesignDirection object
•
DesignResponse object
•
DrillControl object
•
FixedRegion object
•
FrozenArea object
•
GeometricRestriction object
•
Growth object
•
LocalStopCondition object
•
ObjectiveFunction object
•
OptimizationConstraint object
•
OptimizationObjective object
•
PenetrationCheck object
•
ShapeDemoldControl object
•
ShapeMemberSize object
•
ShapePlanarSymmetry object
•
ShapePointSymmetry object
•
ShapeRotationalSymmetry object
•
ShapeTask object
•
SingleTermDesignResponse object
•
SizingClusterAreas object
•
SizingCyclicSymmetry object
•
SizingFrozenArea object
•
SizingMemberSize object
•
SizingPlanarSymmetry object
•
SizingPointSymmetry object
•
SizingRotationalSymmetry object
•
SizingTask object
•
SlideRegionControl object
•
StampControl object
•
StepOption object
•
StopCondition object
•
TopologyCyclicSymmetry object
•
TopologyDemoldControl object
•
TopologyMemberSize object
1801

•
TopologyOverhangControl object
•
TopologyPlanarSymmetry object
•
TopologyPointSymmetry object
•
TopologyRibDesign object
•
TopologyRotationalSymmetry object
•
TopologyMillingControl object
•
TopologyTask object
•
TurnControl object
•
BeadFilter object
•
BeadFixedRegion object
•
BeadGrowth object
•
BeadPenetrationCheck object
•
BeadPlanarSymmetry object
•
BeadPointSymmetry object
•
BeadRotationalSymmetry object
Abaqus Scripting Reference Guide
1802

OptimizationTask object
The OptimizationTask object is the abstract base type for other OptimizationTask objects. The OptimizationTask object
has no explicit constructor. The methods and members of the OptimizationTask object are common to all objects
derived from OptimizationTask.
Access
        import optimization
        mdb.models[name].optimizationTasks[name]
Members
The OptimizationTask object can have the following members:
A String specifying the optimization task repository key.
name
The SymbolicConstant MODEL or a Region object specifying the region to
which the optimization task is applied. The default value is MODEL.
region
A repository of DesignResponse objects.
designResponses
A repository of ObjectiveFunction objects.
objectiveFunctions
A repository of OptimizationConstraint objects.
optimizationConstraints
A repository of GeometricRestriction objects.
geometricRestrictions
A repository of StopCondition objects.
stopConditions
1803
OptimizationTask object

BeadTask object
The BeadTask object deﬁnes a bead task.
The BeadTask object is derived from the OptimizationTask object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name]
BeadTask(...)
This method creates a BeadTask object.
Path
          mdb.models[name].BeadTask
Required arguments
A String specifying the optimization task repository key.
name
Optional arguments
A Boolean specifying whether to use Abaqus to compute the design responses and
their sensitivities. The default value is True.
abaqusSensitivities
A SymbolicConstant specifying the optimization task algorithm. Possible values
are GENERAL_OPTIMIZATION and CONDITION_BASED_OPTIMIZATION.
The default value is GENERAL_OPTIMIZATION.
algorithm
A Boolean specifying whether to exclude elements with boundary conditions from
the optimization. The default value is OFF.
areBCRegionsFrozen
An int specifying the step size of the optimization. The default value is 1.
beadIter
A ﬂoat specifying maximum membrane/bending stress. The default value is 0.1.
beadMaxMembraneStress
A ﬂoat specifying minimum stress. The default value is 0.001.
beadMinStress
A Sets perturbation size for ﬁnite differences. The default value is 0.0001.
beadPerturbation
A SymbolicConstant specifying the Optimization product default or a ﬂoat
specifying the bead width. The default value is DEFAULT.
beadWidth
Abaqus Scripting Reference Guide
1804
BeadTask object

A ﬂoat specifying relative value to the middle element edge length such that normals
in this area do not cross each other. The default value is 5.
curveSmooth
A ﬂoat specifying the ﬁlter radius. The default value is 4.
ﬁlterRadius
A SymbolicConstant specifying the method used to deﬁne ﬁlter radius. Possible
values are VALUE  and REFERENCE. The default is VALUE.
ﬁlterRadiusBy
A Boolean specifying whether the growth direction is along the normal direction
of elements or opposite to the normal direction. The default value is OFF
ﬂipNormalDir
When nodes with boundary conditions are excluded from the optimization
(frozenBoundaryConditionRegions = ON). you can specify that this exclusion
frozenBoundaryConditionRegion
apply to nodes throughout the model or only to those nodes from a speciﬁc region.
Set this parameter to the SymbolicConstant MODEL to apply the freeze to the
entire model, or set this parameter to a Region object to specify an individual region
over which nodes with boundary conditions should be frozen. The default value
is MODEL.
A Boolean specifying whether to calculate the sensitivities only on design nodes
or the whole model. The default value is ON
isSensCalcOnlyOnDesignNodes
The SymbolicConstant MODEL or a Region object specifying the region to use
for mode tracking. The default value is MODEL.
modeTrackingRegion
A Float specifying the maximum change in nodal displacement per design cycle.
The default value is 0.1.
nodalMoveLimit
A SymbolicConstant specifying the Optimization product default or a ﬂoat
specifying the node smooth. The default value is DEFAULT.
nodeSmooth
A SymbolicConstant specifying the strategy for how the nodal displacements are
updated in the method of moving asymptotes. Possible values are NORMAL,
CONSERVATIVE, and AGGRESSIVE. The default value is CONSERVATIVE.
nodeUpdateStrategy
An Int specifying the number of modes included in mode tracking. The default
value is 5.
numTrackedModes
A SymbolicConstant specifying whether to update shape basis vectors in the ﬁrst
design cycle or every design cycle. Possible values are EVERY_CYCLE and
FIRST_CYCLE. The default value is EVERY_CYCLE.
updateShapeBasisVectors
A Boolean specifying whether the group in the design response will be evaluated
using the existing algorithm or a new algorithm based on Abaqus sensitivities. The
default value of False means that the existing algorithm will be used.
groupOperator
Return value
A BeadTask object.
1805
Abaqus Scripting Reference Guide
BeadTask object

Exceptions
None.
setValues(...)
This method modiﬁes the BeadTask object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadTask method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The BeadTask object has members with the same names and descriptions as the arguments to the BeadTask method.
In addition, the BeadTask object can have the following members:
A repository of DesignResponse objects.
designResponses
A repository of ObjectiveFunction objects.
objectiveFunctions
A repository of OptimizationConstraint objects.
optimizationConstraints
A repository of GeometricRestriction objects.
geometricRestrictions
Abaqus Scripting Reference Guide
1806
BeadTask object

CombinedTermDesignResponse object
The CombinedTermDesignResponse object deﬁnes a combined-term design response.
The CombinedTermDesignResponse object is derived from the DesignResponse object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].designResponses[name]
CombinedTermDesignResponse(...)
This method creates a CombinedTermDesignResponse object.
Path
          mdb.models[name].optimizationTasks[name].CombinedTermDesignResponse
Required arguments
A String specifying the design response repository key.
name
A sequence of Strings specifying the names of the design responses to combine.
terms
Optional arguments
None or a sequence of Floats specifying the maximum radius of inﬂuence used when method
is FILTER. The default value is None.
ﬁlterMaxRadius
A Float specifying the exponent used when method is FILTER. The default value is 1.0.
ﬁlterExponent
A Float specifying the reduction of the radius depending on surface bending, used when method
is FILTER. The default value is 0.2.
ﬁlterRadiusReduction
None or a sequence of Floats specifying the upper bound of the vector value used when method
is CUT_OFF. All values greater than the highCutOff are set to the highCutOff value. The
default value is None.
highCutOff
A Float specifying the lower bound of the vector value used when method is CUT_OFF. All
values less than the lowCutOff are treated as 0. The default value is 0.0.
lowCutOff
A SymbolicConstant specifying the method used to combine selected design responses. Possible
values are:
method
•
ABSOLUTE_DIFFERENCE
•
ABSOLUTE_VALUE
1807
CombinedTermDesignResponse object

•
ADD
•
COSINE
•
CUT_OFF
•
DELTA_OVER_1_ITERATION
•
DELTA_OVER_2_ITERATIONS
•
DELTA_OVER_3_ITERATIONS
•
DELTA_OVER_4_ITERATIONS
•
DELTA_OVER_5_ITERATIONS
•
DELTA_OVER_6_ITERATIONS
•
DIVIDE
•
EXPONENTIAL
•
FILTER
•
INTEGER
•
LOG
•
MAXIMUM
•
MINIMUM
•
MULTIPLY
•
NATURAL_LOG
•
NEAREST_INTEGER
•
NORM
•
NORM_FIRST
•
NTH_POWER
•
NTH_ROOT
•
SIGN
•
SINE
•
SQUARE_ROOT
•
SUBTRACT
•
TANGENT
•
WEIGHTED_ADD
The default value is ADD.
A sequence of Floats specifying the weights to apply to the list of design responses used when
method is WEIGHTED_ADD. The default value is an empty sequence.
weights
Return value
A CombinedTermDesignResponse object.
Exceptions
None.
Abaqus Scripting Reference Guide
1808
CombinedTermDesignResponse object

setValues(...)
This method modiﬁes the CombinedTermDesignResponse object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CombinedTermDesignResponse  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The CombinedTermDesignResponse object has members with the same names and descriptions as the arguments to
the CombinedTermDesignResponse  method.
1809
Abaqus Scripting Reference Guide
CombinedTermDesignResponse object

DesignDirection object
The DesignDirection object deﬁnes a design direction geometric restriction.
The DesignDirection object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
DesignDirection(...)
This method creates a DesignDirection object.
Path
          mdb.models[name].optimizationTasks[name].DesignDirection
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
The default value is None.
csys
None or a Region object specifying the main point used when
mainPointDetermination is SPECIFY. The default value is None.
mainPoint
A SymbolicConstant specifying the rule for assigning point priority. Possible values
are MAXIMUM, MINIMUM, and SPECIFY. The default value is MAXIMUM.
mainPointDetermination
A SymbolicConstant specifying whether movement in the region should follow only
the direction of the mainPoint, only the magnitude, or both the magnitude of the
movementRestriction
mainPoint and the directions speciﬁed by u1, u2 and u3. Possible values are
DIRECTION, MAGNITUDE, and VECTOR. The default value is VECTOR.
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
Abaqus Scripting Reference Guide
1810
DesignDirection object

A Boolean specifying whether movement in the region should follow the masterPoint
in the 1-direction. This is used when movementRestriction is VECTOR. The default
value is ON.
u1
A Boolean specifying whether movement in the region should follow the masterPoint
in the 2-direction. This is used when movementRestriction is VECTOR. The default
value is ON.
u2
A Boolean specifying whether movement in the region should follow the masterPoint
in the 3-direction. This is used when movementRestriction is VECTOR. The default
value is ON.
u3
Return value
A DesignDirection object.
Exceptions
None.
setValues(...)
This method modiﬁes the DesignDirection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DesignDirection method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The DesignDirection object has members with the same names and descriptions as the arguments to the DesignDirection
method.
1811
Abaqus Scripting Reference Guide
DesignDirection object

DesignResponse object
The DesignResponse object is the abstract base type for other DesignResponse objects. The DesponseResponse object
has no explicit constructor. The methods and members of the DesignResponse object are common to all objects derived
from DesignResponse.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].designResponses[name]
Members
The DesignResponse object has the following member:
A String specifying the design response repository key.
name
Abaqus Scripting Reference Guide
1812
DesignResponse object

DrillControl object
The DrillControl object deﬁnes a drill control geometric restriction.
The DrillControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
DrillControl(...)
This method creates a DrillControl object.
Path
          mdb.models[name].optimizationTasks[name].DrillControl
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the direction of the drill axis positioned at the
csys origin. Instead of through a Vertex, each point may be speciﬁed through a tuple of
coordinates.
clientDirection
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the default
value is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
The default value is None.
csys
A Float specifying the draw angle. The default value is 0.0.
drawAngle
None or a Region object specifying the main point used when
mainPointDetermination is SPECIFY. The default value is None.
mainPoint
A SymbolicConstant specifying the rule for assigning point priority. Possible values
are MAXIMUM, MINIMUM, and SPECIFY. The default value is MAXIMUM.
mainPointDetermination
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
1813
DrillControl object

A Float specifying the geometric tolerance in the 1-direction. The default value is
0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. The default value is
0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. The default value is
0.01.
tolerance3
A Float specifying the undercut tolerance. The default value is 0.0.
undercutTolerance
Return value
A DrillControl object.
Exceptions
None.
setValues(...)
This method modiﬁes the DrillControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DrillControl method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The DrillControl object has members with the same names and descriptions as the arguments to the DrillControl
method.
Abaqus Scripting Reference Guide
1814
DrillControl object

FixedRegion object
The FixedRegion object deﬁnes a ﬁxed region geometric restriction.
The FixedRegion object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
FixedRegion(...)
This method creates a FixedRegion object.
Path
          mdb.models[name].optimizationTasks[name].FixedRegion
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
The default value is None.
csys
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
A Boolean specifying whether to ﬁx the region in the 1-direction. The default value
is OFF.
u1
A Boolean specifying whether to ﬁx the region in the 2-direction. The default value
is OFF.
u2
A Boolean specifying whether to ﬁx the region in the 3-direction. The default value
is OFF.
u3
1815
FixedRegion object

Return value
A FixedRegion object.
Exceptions
None.
setValues(...)
This method modiﬁes the FixedRegion object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FixedRegion  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The FixedRegion object has members with the same names and descriptions as the arguments to the FixedRegion
method.
Abaqus Scripting Reference Guide
1816
FixedRegion object

FrozenArea object
The FrozenArea object deﬁnes a frozen area geometric restriction.
The FrozenArea object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
FrozenArea(...)
This method creates a FrozenArea object.
Path
          mdb.models[name].optimizationTasks[name].FrozenArea
Required arguments
A String specifying the geometric restriction repository key.
name
Optional arguments
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value is
MODEL.
region
Return value
A FrozenArea object.
Exceptions
None.
setValues(...)
This method modiﬁes the FrozenArea object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FrozenArea  method, except for the
name argument.
1817
FrozenArea object

Return value
None.
Exceptions
None.
Members
The FrozenArea object has members with the same names and descriptions as the arguments to the FrozenArea
method.
Abaqus Scripting Reference Guide
1818
FrozenArea object

GeometricRestriction object
The GeometricRestriction object is the abstract base type for other GeometricRestriction objects. The
GeometricRestriction object has no explicit constructor. The methods and members of the GeometricRestriction object
are common to all objects derived from GeometricRestriction.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
Members
The GeometricRestriction object can have the following members:
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
1819
GeometricRestriction object

Growth object
The Growth object deﬁnes a growth geometric restriction.
The Growth object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
Growth(...)
This method creates a Growth object.
Path
          mdb.models[name].optimizationTasks[name].Growth
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
A Float specifying the maximum optimization displacement in the growth direction.
Either growth or shrink or both must be speciﬁed. The default value is 0.0.
growth
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
A Float specifying the maximum optimization displacement in the shrink direction.
Either growth or shrink or both must be speciﬁed The default value is 0.0.
shrink
Return value
A Growth object.
Exceptions
None.
Abaqus Scripting Reference Guide
1820
Growth object

setValues(...)
This method modiﬁes the Growth object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Growth  method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The Growth object has members with the same names and descriptions as the arguments to the Growth  method.
1821
Abaqus Scripting Reference Guide
Growth object

LocalStopCondition object
The LocalStopCondition object deﬁnes a local stop condition.
The LocalStopCondition object is derived from the StopCondition object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].stopConditions[name]
LocalStopCondition(...)
This method creates a LocalStopCondition object.
Path
          mdb.models[name].optimizationTasks[name].LocalStopCondition
Required arguments
A String specifying the stop condition repository key.
name
A Float specifying the factor used to modify the reference value.
referenceFactor
Optional arguments
A SymbolicConstant specifying the operation used to compare the selected value to the
reference value. Possible values are LESS_THAN, LESS_THAN_EQUAL, EQUAL,
GREATER_THAN_EQUAL, and GREATER_THAN. The default value is LESS_THAN.
comparisonOperation
A SymbolicConstant specifying the variable identiﬁer of the compared value. Possible values
are:
identiﬁer
•
ABSOLUTE_GROWTH_MOVEMENT
•
ABSOLUTE_SHRINK_MOVEMENT
•
GROWTH_MOVEMENT
•
SHRINK_MOVEMENT
•
MOVEMENT
•
TOTAL_ABSOLUTE_MOVEMENT
•
EQUIV_STRESS
•
FREE_TASK_REGION_EQUIV_STRESS
•
RESTRICTED_TASK_REGION_EQUIV_STRESS
•
SURFACE_POINT_EQUIV_STRESS
•
TASK_REGION_EQUIV_STRESS
Abaqus Scripting Reference Guide
1822
LocalStopCondition object

The default value is MOVEMENT.
A SymbolicConstant specifying the operation used to evaluate values in the region. Possible
values are MAXIMUM, MINIMUM, and SUM. The default value is MAXIMUM.
identiﬁerOperation
A SymbolicConstant specifying the iteration from which a value is compared to the reference
value. Possible values are FIRST and PREVIOUS. The default value is PREVIOUS.
referenceDesignCycle
A SymbolicConstant specifying the operation used to modify the reference value by the
reference factor. Possible values are ADD, DIVIDE, MULTIPLY, and SUBTRACT. The
default value is ADD.
referenceOperation
The SymbolicConstant MODEL or a Region object specifying the region to which the stop
condition is applied. The default value is MODEL.
region
Return value
A LocalStopCondition object.
Exceptions
None.
setValues(...)
This method modiﬁes the LocalStopCondition object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the LocalStopCondition  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The LocalStopCondition object has members with the same names and descriptions as the arguments to the
LocalStopCondition  method.
1823
Abaqus Scripting Reference Guide
LocalStopCondition object

ObjectiveFunction object
The ObjectiveFunction object deﬁnes the objective of the optimization.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].objectiveFunctions[name]
ObjectiveFunction(...)
This method creates an ObjectiveFunction object.
Path
          mdb.models[name].optimizationTasks[name].ObjectiveFunction
Required arguments
A String specifying the objective function repository key.
name
An OptimizationObjectiveArray object.
objectives
Optional arguments
A SymbolicConstant specifying the target of the objective function. Possible values are MINIMIZE,
MAXIMIZE, and MINIMIZE_MAXIMUM. The default value is MINIMIZE.
target
Return value
An ObjectiveFunction object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the ObjectiveFunction object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ObjectiveFunction  method, except for
the name argument.
Abaqus Scripting Reference Guide
1824
ObjectiveFunction object

Return value
None.
Exceptions
RangeError.
Members
The ObjectiveFunction object has members with the same names and descriptions as the arguments to the
ObjectiveFunction  method.
1825
Abaqus Scripting Reference Guide
ObjectiveFunction object

OptimizationConstraint object
The OptimizationConstraint object constrains an optimization from making changes to the topology of the model.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].optimizationConstraints[name]
OptimizationConstraint(...)
This method creates an OptimizationConstraint object.
Path
          mdb.models[name].optimizationTasks[name].OptimizationConstraint
Required arguments
A String specifying the optimization constraint repository key.
name
A String specifying the name of the design response to constrain.
designResponse
A Float specifying the value to which the design response should be constrained.
restrictionValue
Optional arguments
A SymbolicConstant specifying the method used to constrain the design response. Possible
values are ABSOLUTE_EQUAL, ABSOLUTE_GREATER_THAN_EQUAL,
restrictionMethod
ABSOLUTE_LESS_THAN_EQUAL, RELATIVE_EQUAL,
RELATIVE_GREATER_THAN_EQUAL, and RELATIVE_LESS_THAN_EQUAL. The
default value is ABSOLUTE_EQUAL.
Return value
An OptimizationConstraint object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the OptimizationConstraint object.
Required arguments
None.
Abaqus Scripting Reference Guide
1826
OptimizationConstraint object

Optional arguments
The optional arguments to setValues are the same as the arguments to the OptimizationConstraint  method, except
for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The OptimizationConstraint object has members with the same names and descriptions as the arguments to the
OptimizationConstraint  method.
1827
Abaqus Scripting Reference Guide
OptimizationConstraint object

OptimizationObjective object
An OptimizationObjective is an object used to deﬁne objectives in an objective function.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].objectiveFunctions[name]\
        .objectives[i]
Members
The OptimizationObjective object has the following members:
A Boolean specifying whether the objective is suppressed or not. The default value is OFF.
suppress
A Float specifying the weight applied to the design response value. The default value is
1.0.
weight
The SymbolicConstant DEFAULT or a Float specifying the reference value used in
evaluating a design response. For topology optimization, DEFAULT> indicates the
referenceValue
reference value is 0. For shape optimization, DEFAULT indicates the reference value is
the nodal average. The default value is DEFAULT.
A String specifying the name of the design response.
designResponse
Abaqus Scripting Reference Guide
1828
OptimizationObjective object

PenetrationCheck object
The PenetrationCheck object deﬁnes a penetration check geometric restriction.
The PenetrationCheck object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
PenetrationCheck(...)
This method creates a PenetrationCheck object.
Path
          mdb.models[name].optimizationTasks[name].PenetrationCheck
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the penetration check region.
penetrationCheckRegion
A Region object specifying the region to which the geometric restriction is applied.
When used with a TopologyTask, there is no default value. When used with a ShapeTask,
the default value is MODEL.
region
Optional arguments
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst
design cycle. The default value is ON.
presumeFeasibleRegionAtStart
Return value
A PenetrationCheck object.
Exceptions
None.
setValues(...)
This method modiﬁes the PenetrationCheck object.
1829
PenetrationCheck object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PenetrationCheck  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The PenetrationCheck object has members with the same names and descriptions as the arguments to the
PenetrationCheck  method.
Abaqus Scripting Reference Guide
1830
PenetrationCheck object

ShapeDemoldControl object
The ShapeDemoldControl object deﬁnes a shape demold control geometric restriction.
The ShapeDemoldControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
ShapeDemoldControl(...)
This method creates a ShapeDemoldControl object.
Path
          mdb.models[name].optimizationTasks[name].ShapeDemoldControl
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the demold pull direction. Instead of through a
Vertex, each point might be speciﬁed through a tuple of coordinates.
pullDirection
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the default
value is MODEL.
region
Optional arguments
The SymbolicConstant DEMOLD_REGION or a Region object specifying the
collision check region. If the value is DEMOLD_REGION, then the value of region
collisionCheckRegion
is used as both the demold region and the collision check region. The default value
is DEMOLD_REGION.
None or a DatumCsys object specifying the local coordinate system of the
pullDirection. If csys=None, the global coordinate system is used. When this member
csys
is queried, it returns an Int indicating the identiﬁer of the DatumCsys. The default
value is None.
A Float specifying the draw angle. The default value is 0.0.
drawAngle
A SymbolicConstant specifying the rule for assigning point priority. Possible values
are MAXIMUM and MINIMUM. The default value is MAXIMUM.
mainPointDetermination
1831
ShapeDemoldControl object

A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
A Float specifying the geometric tolerance in the 1-direction. The default value is
0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. The default value is
0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. The default value is
0.01.
tolerance3
A Float specifying the undercut tolerance. The default value is 0.0.
undercutTolerance
Return value
A ShapeDemoldControl object.
Exceptions
None.
setValues(...)
This method modiﬁes the ShapeDemoldControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShapeDemoldControl method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The ShapeDemoldControl object has members with the same names and descriptions as the arguments to the
ShapeDemoldControl method.
Abaqus Scripting Reference Guide
1832
ShapeDemoldControl object

ShapeMemberSize object
The ShapeMemberSize object deﬁnes a shape member size geometric restriction.
The ShapeMemberSize object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
ShapeMemberSize(...)
This method creates a ShapeMemberSize object.
Path
          mdb.models[name].optimizationTasks[name].ShapeMemberSize
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
A Float specifying the maximum thickness. The default value is 0.0.
maxThickness
A Float specifying the minimum thickness. The default value is 0.0.
minThickness
A SymbolicConstant specifying whether to restrict the minimum or maximum
thickness. Possible values are MAXIMUM and MINIMUM. The default value
is MINIMUM.
sizeRestriction
A bool specifying whether to use the node group region. The default value is
OFF.
assignNodeGroupRegion
A Node Region object specifying the check node group.
nodeGroupRegion
Return value
A ShapeMemberSize object.
1833
ShapeMemberSize object

Exceptions
None.
setValues(...)
This method modiﬁes the ShapeMemberSize object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShapeMemberSize method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The ShapeMemberSize object has members with the same names and descriptions as the arguments to the
ShapeMemberSize method.
Abaqus Scripting Reference Guide
1834
ShapeMemberSize object

ShapePlanarSymmetry object
The ShapePlanarSymmetry object deﬁnes a shape planar symmetry geometric restriction.
The ShapePlanarSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
ShapePlanarSymmetry(...)
This method creates a ShapePlanarSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].ShapePlanarSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the vector positioned at the csys origin that is
normal to the symmetry plane. Instead of through a Vertex, each point may be speciﬁed through
a tuple of coordinates.
clientDirection
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the default
value is MODEL.
region
Optional arguments
A Boolean specifying whether to allow a nonsymmetric mesh for this geometric
restriction. The default value is TRUE.
allowNonSymmetricMesh
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
The default value is None.
csys
A SymbolicConstant specifying the rule for determining the main node. Possible
values are MAXIMUM and MINIMUM. The default value is MAXIMUM.
mainPointDetermination
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
1835
ShapePlanarSymmetry object

A Float specifying the geometric tolerance in the 1-direction. The default value is
0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. The default value is
0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. The default value is
0.01.
tolerance3
Return value
A ShapePlanarSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the ShapePlanarSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShapePlanarSymmetry method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The ShapePlanarSymmetry object has members with the same names and descriptions as the arguments to the
ShapePlanarSymmetry method.
Abaqus Scripting Reference Guide
1836
ShapePlanarSymmetry object

ShapePointSymmetry object
The ShapePointSymmetry object deﬁnes a shape point symmetry geometric restriction.
The ShapePointSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
ShapePointSymmetry(...)
This method creates a ShapePointSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].ShapePointSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the symmetry point represented as the origin
of a local coordinate system. If csys=None, the global coordinate system is used.
When this member is queried, it returns an Int. The default value is None.
csys
A SymbolicConstant specifying the rule for determining the main node. Possible
values are MAXIMUM and MINIMUM. The default value is MAXIMUM.
mainPointDetermination
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
A Float specifying the geometric tolerance in the 1-direction. The default value is
0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. The default value is
0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. The default value is
0.01.
tolerance3
1837
ShapePointSymmetry object

Return value
A ShapePointSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the ShapePointSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShapePointSymmetry method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The ShapePointSymmetry object has members with the same names and descriptions as the arguments to the
ShapePointSymmetry method.
Abaqus Scripting Reference Guide
1838
ShapePointSymmetry object

ShapeRotationalSymmetry object
The ShapeRotationalSymmetry object deﬁnes a shape rotational symmetry geometric restriction.
The ShapeRotationalSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
ShapeRotationalSymmetry(...)
This method creates a ShapeRotationalSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].ShapeRotationalSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the vector positioned at the csys origin, used as
the axis of symmetry. Instead of through a Vertex, each point might be speciﬁed through a
tuple of coordinates.
clientDirection
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the default
value is MODEL.
region
Optional arguments
A Boolean specifying whether to allow a nonsymmetric mesh for this geometric
restriction. The default value is TRUE.
allowNonSymmetricMesh
A Float specifying the segment size of the repeating pattern in degrees. If the angle
value is 0, no repeating pattern is created. The default value is 0.0.
angle
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
The default value is None.
csys
None or a Region object specifying the main point used when
mainPointDetermination is SPECIFY. The default value is None.
mainPoint
1839
ShapeRotationalSymmetry object

A SymbolicConstant specifying the rule for determining the main node. Possible
values are MAXIMUM, MINIMUM, and SPECIFY. The default value is
MAXIMUM.
mainPointDetermination
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
A tuple of Floats representing the coordinates of a start point of the rotational
symmetry.
startPoint
A Float specifying the geometric tolerance in the 1-direction. The default value is
0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. The default value is
0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. The default value is
0.01.
tolerance3
Return value
A ShapeRotationalSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the ShapeRotationalSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShapeRotationalSymmetry method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The ShapeRotationalSymmetry object has members with the same names and descriptions as the arguments to the
ShapeRotationalSymmetry method.
Abaqus Scripting Reference Guide
1840
ShapeRotationalSymmetry object

ShapeTask object
The ShapeTask object deﬁnes a shape task.
The ShapeTask object is derived from the OptimizationTask object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name]
ShapeTask(...)
This method creates a ShapeTask object.
Path
          mdb.models[name].ShapeTask
Required arguments
A String specifying the optimization task repository key.
name
Optional arguments
A Boolean specifying whether to use Abaqus to compute the design
responses and their sensitivities. The default value is True.
abaqusSensitivities
A SymbolicConstant specifying whether to control the permitted absolute
step size by the average optimization displacement or minimum
absoluteStepSizeControl
optimization displacement. Possible values are MINIMUM and
AVERAGE. The default value is MINIMUM.
A boolean specifying whether or not the durability approach of
optimization is turned on. The default value is ON.
activateDurability
A String specifying the path of additional ﬁles pertaining to durability
optimization. Only valid if the activateDurability argument is ON.
additionalDurabilityFiles
A SymbolicConstant specifying the optimization task algorithm. Possible
values are GENERAL_OPTIMIZATION and
algorithm
CONDITION_BASED_OPTIMIZATION. The default value is
CONDITION_BASED_OPTIMIZATION.
A SymbolicConstant specifying the constrained Laplacian convergence
level. Possible values are NORMAL, CONSERVATIVE, and
AGGRESSIVE. The default value is NORMAL.
constrainedLaplacianConvergenceLevel
1841
ShapeTask object

A Float specifying the edge length for the movement vector. The default
value is 5.0.
curvatureSmoothingEdgeLength
A string specifying the path of the input ﬁle. Only valid if the
activateDurability argument is ON and is a required argument in that
case.
durabilityInputﬁle
A String specifying the type of solver for durability optimization. Possible
values are: FE_SAFE, FEMFAT, and CUSTOM. The default value is
FE_SAFE. Only valid if the activateDurability argument is ON.
durabilitySolver
A Float specifying the equality constraint tolerance. The default value is
10–3.
equalityConstraintTolerance
A Float specifying the mesh smoothing feature recognition angle for
edges and corners. The default value is 30.0.
featureRecognitionAngle
A Float specifying the weight depending on the radius, used when
ﬁlterMaxRadius is speciﬁed. The default value is 1.0.
ﬁlterExponent
None or a Float specifying the maximum inﬂuence radius for equivalent
stress. The default value is None.
ﬁlterMaxRadius
None or a Float specifying the reduction of the radius depending on
surface bending, used when ﬁlterMaxRadius is speciﬁed. The default
value is None.
ﬁlterRadiusReduction
A SymbolicConstant specifying the method of specifying volume that
can be removed immediately in the ﬁrst design cycle. Possible values
are OFF, PERCENTAGE, and ABSOLUTE. The default value is OFF.
ﬁrstCycleDeletedVolumeTechnique
A Boolean specifying whether to exclude nodes with boundary conditions
from the optimization. The default value is OFF.
freezeBoundaryConditionRegions
The SymbolicConstant MODEL or a Region object specifying the region
in which to freeze boundary condition regions, or the SymbolicConstant
frozenBoundaryConditionRegion
MODEL, used with freezeBoundaryConditionRegions. The default value
is MODEL.
A SymbolicConstant specifying the frequency of evaluating geometric
restrictions during mesh smoothing. Possible values are LOW, MEDIUM,
and HIGH. The default value is LOW.
geometricRestrictionEvaluationFrequency
A Float specifying the scale factor to apply to optimization displacements
for nodes with growth. The default value is 1.0.
growthScaleFactor
A Boolean specifying whether to halt the optimization if quality criteria
are not satisiﬁed. The default value is OFF.
haltUponViolation
Abaqus Scripting Reference Guide
1842
ShapeTask object

None or a Region object specifying the region specifying the ﬁrst node
layer for mesh smoothing, used when meshSmoothingRegionMethod is
TASK_REGION_LAYERS. The default value is None.
layerReferenceRegion
A SymbolicConstant specifying the method used to determine the mesh
smoothing region. The REGION value uses the smoothingRegion. The
meshSmoothingRegionMethod
NUMBER_OF_LAYERS value uses the layerReferenceRegion. The
TASK_REGION_LAYERS value will smooth six layers using the task
region. Possible values are TASK_REGION_LAYERS, REGION, and
NUMBER_OF_LAYERS. The default value is
TASK_REGION_LAYERS.
A SymbolicConstant specifying the method smoothing strategy. Possible
values are CONSTRAINED_LAPLACIAN and LOCAL_GRADIENT.
The default value is CONSTRAINED_LAPLACIAN.
meshSmoothingStrategy
A SymbolicConstant specifying the approach used when treating midside
node positions during optimization. POSITIONS indicates midside node
midsideInterpolation
positions are interpolated linearly by position.
OPTIMIZATION_DISPLACEMENT indicates they are interpolated by
optimization displacement of corner nodes. Possible values are
POSITIONS and OPTIMIZATION_DISPLACEMENT. The default
value is POSITIONS.
The SymbolicConstant FIX_NONE or an Int specifying the number of
node layers adjoining the task region to remain free during mesh
numFreeNodeLayers
smoothing. A value of 0 indicates that no layers are free and all layers
are ﬁxed. The default value is 0.
None or an Int specifying the number of layers for mesh smoothing when
meshSmoothingRegionMethod is NUMBER_OF_LAYERS. The default
value is None.
numSmoothedElementLayers
A Boolean specifying whether to ignore automatically frozen boundary
condition regions in the ﬁrst design cycle. This is used with
freezeBoundaryConditionRegions. The default value is ON.
presumeFeasibleBCRegionAtStart
A Float specifying the maximum angle for quad elements during mesh
smoothing. The default value is 160.0.
quadMaxAngle
A Float specifying the minimum angle for quad elements during mesh
smoothing. The default value is 20.0.
quadMinAngle
A Float specifying the skew angle for quad elements during mesh
smoothing, used with reportQualityViolation. The default value is 30.0.
quadSkew
A Float specifying the taper for quad elements during mesh smoothing,
used with reportQualityViolation. The default value is 0.5.
quadTaper
1843
Abaqus Scripting Reference Guide
ShapeTask object

The SymbolicConstant MODEL or a Region object specifying the region
to which the optimization task is applied. The default value is MODEL.
region
A Boolean specifying whether to report poor quality elements during
mesh smoothing. The default value is OFF.
reportPoorQualityElements
A Boolean specifying whether to report a quality criteria violation during
mesh smoothing. The default value is OFF.
reportQualityViolation
A Float specifying the scale factor to apply to optimization displacements
for nodes with shrinkage. The default value is 1.0.
shrinkScaleFactor
None or a Region object specifying the mesh smoothing region, used
when meshSmoothingRegionMethod is REGION. The default value is
None.
smoothingRegion
A SymbolicConstant specifying the target mesh quality for mesh
smoothing. Possible values are NONE, LOW, MEDIUM, and HIGH.
The default value is LOW.
targetMeshQuality
A Float specifying the tet element aspect ratio during mesh smoothing.
The default value is 100.0.
tetAspectRatio
A Float specifying the maximum tet element aspect ratio during mesh
smoothing. The default value is 8.0.
tetMaxAspect
A Float specifying the minimum tet element aspect ratio during mesh
smoothing. The default value is 0.222.
tetMinAspect
A Float specifying the tet element skew value during mesh smoothing.
The default value is 100.0.
tetSkew
A Float specifying the tri element maximum angle during mesh
smoothing. The default value is 140.0.
triMaxAngle
A Float specifying the tri element maximum angle during mesh
smoothing. The default value is 20.0.
triMinAngle
A SymbolicConstant specifying whether to update shape basis vectors
in the ﬁrst design cycle or every design cycle. Possible values are
updateShapeBasisVectors
EVERY_CYCLE and FIRST_CYCLE. The default value is
EVERY_CYCLE.
A Boolean specifying whether the group in the design response will be
evaluated using the existing algorithm or a new algorithm based on
groupOperator
Abaqus sensitivities. The default value of False means that the existing
algorithm will be used.
Abaqus Scripting Reference Guide
1844
ShapeTask object

Return value
A ShapeTask object.
Exceptions
None.
setValues(...)
This method modiﬁes the ShapeTask object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ShapeTask method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The ShapeTask object has members with the same names and descriptions as the arguments to the ShapeTask method.
In addition, the ShapeTask object can have the following members:
A repository of DesignResponse objects.
designResponses
A repository of ObjectiveFunction objects.
objectiveFunctions
A repository of OptimizationConstraint objects.
optimizationConstraints
A repository of GeometricRestriction objects.
geometricRestrictions
A repository of StopCondition objects.
stopConditions
1845
Abaqus Scripting Reference Guide
ShapeTask object

SingleTermDesignResponse object
The SingleTermDesignResponse object deﬁnes a single-term design response.
The SingleTermDesignResponse object is derived from the DesignResponse object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].designResponses[name]
SingleTermDesignResponse(...)
This method creates a SingleTermDesignResponse object.
Path
          mdb.models[name].optimizationTasks[name].SingleTermDesignResponse
Required arguments
A String specifying the design response repository key.
name
A String specifying the name of the variable identiﬁer.
identiﬁer
Optional arguments
None or a DatumCsys object specifying the local coordinate system. If csys=None, the
global coordinate system is used. When this member is queried, it returns an Int. The default
value is None.
csys
None or a sequence of Floats specifying the driving region used when identiﬁer is an internal
nodal variable. The default value is None.
drivingRegion
A SymbolicConstant specifying the operation used on values in the region. Possible values
are MAXIMUM, MINIMUM, and SUM. The default value is SUM.
operation
The SymbolicConstant MODEL or a Region object specifying the region of the design
response variable. The default value is MODEL.
region
A SymbolicConstant specifying the location used for shell layer values. Possible values are
BOTTOM, MAXIMUM, MIDDLE, MINIMUM, and TOP. The default value is MAXIMUM.
shellLayer
A StepOptionArray object.
stepOptions
Abaqus Scripting Reference Guide
1846
SingleTermDesignResponse object

Return value
A SingleTermDesignResponse object.
Exceptions
None.
setValues(...)
This method modiﬁes the SingleTermDesignResponse object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SingleTermDesignResponse method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The SingleTermDesignResponse object has members with the same names and descriptions as the arguments to the
SingleTermDesignResponse method.
1847
Abaqus Scripting Reference Guide
SingleTermDesignResponse object

SizingClusterAreas object
The SizingClusterAreas object deﬁnes a sizing cluster areas geometric restriction.
The SizingClusterAreas object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SizingClusterAreas(...)
This method creates a SizingClusterAreas object.
Path
          mdb.models[name].optimizationTasks[name].SizingClusterAreas
Required arguments
A String specifying the geometric restriction repository key.
name
Tuple of Region objects specifying the regions to which the geometric restriction is applied.
regions
Return value
A SizingClusterAreas object.
Exceptions
None.
setValues(...)
This method modiﬁes the SizingClusterAreas object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SizingClusterAreas  method, except for
the name argument.
Return value
None.
Abaqus Scripting Reference Guide
1848
SizingClusterAreas object

Exceptions
None.
Members
The SizingClusterAreas object has members with the same names and descriptions as the arguments to the
SizingClusterAreas  method.
1849
Abaqus Scripting Reference Guide
SizingClusterAreas object

SizingCyclicSymmetry object
The SizingCyclicSymmetry object deﬁnes a sizing cyclic symmetry geometric restriction.
The SizingCyclicSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SizingCyclicSymmetry(...)
This method creates a SizingCyclicSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].SizingCyclicSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
A Float specifying the translation distance.
translation
Optional arguments
A SymbolicConstant specifying the translation direction deﬁned along an axis positioned at
the csys origin. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is
AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value
is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A SizingCyclicSymmetry object.
Exceptions
None.
Abaqus Scripting Reference Guide
1850
SizingCyclicSymmetry object

setValues(...)
This method modiﬁes the SizingCyclicSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SizingCyclicSymmetry  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The SizingCyclicSymmetry object has members with the same names and descriptions as the arguments to the
SizingCyclicSymmetry  method.
1851
Abaqus Scripting Reference Guide
SizingCyclicSymmetry object

SizingFrozenArea object
The SizingFrozenArea object deﬁnes a sizing frozen area geometric restriction.
The SizingFrozenArea  object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SizingFrozenArea (...)
This method creates a SizingFrozenArea  object.
Path
          mdb.models[name].optimizationTasks[name].SizingFrozenArea
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
None.
Return value
A SizingFrozenArea  object.
Exceptions
None.
setValues(...)
This method modiﬁes the SizingFrozenArea  object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SizingFrozenArea  method, except for
the name argument.
Abaqus Scripting Reference Guide
1852
SizingFrozenArea object

Return value
None.
Exceptions
None.
Members
The SizingFrozenArea  object has members with the same names and descriptions as the arguments to the
SizingFrozenArea  method.
1853
Abaqus Scripting Reference Guide
SizingFrozenArea object

SizingMemberSize object
The SizingMemberSize object deﬁnes a sizing member size geometric restriction.
The SizingMemberSize object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SizingMemberSize(...)
This method creates a SizingMemberSize object.
Path
          mdb.models[name].optimizationTasks[name].SizingMemberSize
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
A Float specifying the min width.
minWidth
setValues(...)
This method modiﬁes the sizingMemberSize object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the sizingMemberSize  method, except for
the name argument.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
1854
SizingMemberSize object

Members
The sizingMemberSize object has members with the same names and descriptions as the arguments to the
sizingMemberSize  method.
1855
Abaqus Scripting Reference Guide
SizingMemberSize object

SizingPlanarSymmetry object
The SizingPlanarSymmetry object deﬁnes a sizing planar symmetry geometric restriction.
The SizingPlanarSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SizingPlanarSymmetry(...)
This method creates a SizingPlanarSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].SizingPlanarSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
A SymbolicConstant specifying the axis of symmetry. Possible values are AXIS_1, AXIS_2,
and AXIS_3. The default value is AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value
is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A SizingPlanarSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the sizingPlanarSymmetry object.
Abaqus Scripting Reference Guide
1856
SizingPlanarSymmetry object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the sizingPlanarSymmetry  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The sizingPlanarSymmetry object has members with the same names and descriptions as the arguments to the
sizingPlanarSymmetry  method.
1857
Abaqus Scripting Reference Guide
SizingPlanarSymmetry object

SizingPointSymmetry object
The SizingPointSymmetry object deﬁnes a sizing point symmetry geometric restriction.
The SizingPointSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SizingPointSymmetry(...)
This method creates a SizingPointSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].SizingPointSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
None or a DatumCsys object specifying the position of the symmetry point deﬁned as the
origin of a local coordinate system. If csys=None, the global coordinate system is used.
When this member is queried, it returns an Int. The default value is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A SizingPointSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the SizingPointSymmetry object.
Required arguments
None.
Abaqus Scripting Reference Guide
1858
SizingPointSymmetry object

Optional arguments
The optional arguments to setValues are the same as the arguments to the SizingPointSymmetry  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The SizingPointSymmetry object has members with the same names and descriptions as the arguments to the
SizingPointSymmetry  method.
1859
Abaqus Scripting Reference Guide
SizingPointSymmetry object

SizingRotationalSymmetry object
The SizingRotationalSymmetry object deﬁnes a sizing rotational symmetry geometric restriction.
The SizingRotationalSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SizingRotationalSymmetry(...)
This method creates a SizingRotationalSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].SizingRotationalSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Float specifying the repeating segment size, an angle in degrees.
angle
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
A SymbolicConstant specifying the axis of symmetry. Possible values are AXIS_1, AXIS_2,
and AXIS_3. The default value is AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value
is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A SizingRotationalSymmetry object.
Exceptions
None.
Abaqus Scripting Reference Guide
1860
SizingRotationalSymmetry object

setValues(...)
This method modiﬁes the SizingRotationalSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SizingRotationalSymmetry  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The SizingRotationalSymmetry object has members with the same names and descriptions as the arguments to the
SizingRotationalSymmetry  method.
1861
Abaqus Scripting Reference Guide
SizingRotationalSymmetry object

SizingTask object
The SizingTask object deﬁnes a Sizing task.
The SizingTask object is derived from the OptimizationTask object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name]
SizingTask(...)
This method creates a SizingTask object.
Path
          mdb.models[name].SizingTask
Required arguments
A String specifying the optimization task repository key.
name
Optional arguments
A Boolean specifying whether to use Abaqus to compute the design responses
and their sensitivities. The default value is True.
abaqusSensitivities
A Float specifying the stop criteria based on the change in element thickness.
The default value is 0.5 × 10–2.
elementThicknessDeltaStopCriteria
A Boolean specifying whether to exclude elements with boundary conditions
from the optimization. The default value is OFF.
freezeBoundaryConditionRegions
A Boolean specifying whether to exclude elements with loads and elements with
loaded nodes from the optimization. The default value is ON.
freezeLoadRegions
The SymbolicConstatnt MODEL or a Region object specifying the region to use
for mode tracking. The default value is MODEL.
modeTrackingRegion
An Int specifying the number of stop criteria. The default value is 2.
numFulﬁlledStopCriteria
An Int specifying the number of modes included in mode tracking. The default
value is 5.
numTrackedModes
A Float specifying the stop criteria based on the change in objective function.
The default value is 0.001.
objectiveFunctionDeltaStopCriteria
Abaqus Scripting Reference Guide
1862
SizingTask object

An Int specifying the ﬁrst design cycle used to evaluate convergence criteria.
The default value is 4.
stopCriteriaDesignCycle
A Float specifying the maximum change in thickness per design cycle. The
default value is 0.25.
thicknessMoveLimit
A SymbolicConstant specifying the strategy for how the thickness is updated in
the method of moving asymptotes. Possible values are NORMAL,
CONSERVATIVE, and AGGRESSIVE. The default value is NORMAL.
thicknessUpdateStrategy
A Boolean specifying whether the group in the design response will be evaluated
using the existing algorithm or a new algorithm based on Abaqus sensitivities.
The default value of False means that the existing algorithm will be used.
groupOperator
Return value
A SizingTask object.
Exceptions
None.
setValues(...)
This method modiﬁes the SizingTask object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SizingTask method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The SizingTask object has members with the same names and descriptions as the arguments to the SizingTask method.
In addition, the SizingTask object can have the following members:
A repository of DesignResponse objects.
designResponses
A repository of ObjectiveFunction objects.
objectiveFunctions
1863
Abaqus Scripting Reference Guide
SizingTask object

A repository of OptimizationConstraint objects.
optimizationConstraints
A repository of GeometricRestriction objects.
geometricRestrictions
A repository of StopCondition objects.
stopConditions
Abaqus Scripting Reference Guide
1864
SizingTask object

SlideRegionControl object
The SlideRegionControl object deﬁnes a slide region control geometric restriction.
The SlideRegionControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
SlideRegionControl(...)
This method creates a SlideRegionControl object.
Path
          mdb.models[name].optimizationTasks[name].SlideRegionControl
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the axis of revolution. Instead of through a Vertex,
each point may be speciﬁed through a tuple of coordinates. This is used when approach is
TURN.
clientDirection
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the default
value is MODEL.
region
Optional arguments
A SymbolicConstant specifying the restriction approach. The SymbolicConstant
FREE_FORM indicates a free-form slide region, and the SymbolicConstant TURN
approach
indicates that the restriction should conserve a turnable surface. Possible values are
FREE_FORM and TURN. The default value is FREE_FORM.
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
This is used when approach is TURN. The default value is None.
csys
None or a Region object specifying the free-form region. This is used when approach
is FREE_FORM. The default value is None.
freeFormRegion
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
1865
SlideRegionControl object

None or a Region object specifying the region to revolve into a slide region. This is
used when approach is TURN. The default value is None.
revolvedRegion
A Float specifying the geometric tolerance in the 1-direction. This is used when
approach is TURN. The default value is 0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. This is used when
approach is TURN. The default value is 0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. This is used when
approach is TURN. The default value is 0.01.
tolerance3
Return value
A SlideRegionControl object.
Exceptions
None.
setValues(...)
This method modiﬁes the SlideRegionControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SlideRegionControl  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The SlideRegionControl object has members with the same names and descriptions as the arguments to the
SlideRegionControl  method.
Abaqus Scripting Reference Guide
1866
SlideRegionControl object

StampControl object
The StampControl object deﬁnes a stamp control geometric restriction.
The StampControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
StampControl(...)
This method creates a StampControl object.
Path
          mdb.models[name].optimizationTasks[name].StampControl
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the stamping direction. Instead of through a
Vertex, each point may be speciﬁed through a tuple of coordinates.
clientDirection
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the default
value is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
The default value is None.
csys
A Float specifying the draw angle. The default value is 0.0.
drawAngle
None or a Region object specifying the main point used when
mainPointDetermination is SPECIFY. The default value is None.
mainPoint
A SymbolicConstant specifying the rule for assigning point priority. Possible values
are MAXIMUM, MINIMUM, and SPECIFY. The default value is MAXIMUM.
mainPointDetermination
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
1867
StampControl object

A Float specifying the geometric tolerance in the 1-direction. The default value is
0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. The default value is
0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. The default value is
0.01.
tolerance3
A Float specifying the undercut tolerance. The default value is 0.0.
undercutTolerance
Return value
A StampControl object.
Exceptions
None.
setValues(...)
This method modiﬁes the StampControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StampControl method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The StampControl object has members with the same names and descriptions as the arguments to the StampControl
method.
Abaqus Scripting Reference Guide
1868
StampControl object

StepOption object
A StepOption is an object used to deﬁne step options in a design response.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].designResponses[name]\
        .stepOptions[i]
Members
The StepOption object can have the following members:
The SymbolicConstant ALL or an Int specifying the lower mode in the range of modes to
consider in the step. lowerMode is ignored for steps without modes. The default value is ALL.
lowerMode
The SymbolicConstant ALL or an Int specifying the upper mode in the range of modes to
consider in the step. upperMode is ignored for steps without modes. The default value is ALL.
upperMode
The SymbolicConstant ALL or a String specifying the name of the load case. loadCase is
ignored when the speciﬁed step does not contain a load case. The default value is ALL.
loadCase
The SymbolicConstant ALL or a String specifying the name of the step. The default value is
ALL.
step
A string specifying the name of the model from which the steps are supposed to be used in the
design response. Specify only if the steps are not from the current model.
model
1869
StepOption object

StopCondition object
The StopCondition object is the abstract base type for other StopCondition objects. The StopCondition object has no
explicit constructor. The methods and members of the StopCondition object are common to all objects derived from
StopCondition.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].stopConditions[name]
Members
The StopCondition object can have the following members:
A String specifying the stop condition repository key.
name
The SymbolicConstant MODEL or a Region object specifying the region to which the stop
condition is applied. The default value is MODEL.
region
Abaqus Scripting Reference Guide
1870
StopCondition object

TopologyCyclicSymmetry object
The TopologyCyclicSymmetry object deﬁnes a topology cyclic symmetry geometric restriction.
The TopologyCyclicSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyCyclicSymmetry(...)
This method creates a TopologyCyclicSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].TopologyCyclicSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the
default value is MODEL.
region
A Float specifying the translation distance.
translation
Optional arguments
A SymbolicConstant specifying the translation direction deﬁned along an axis positioned at
the csys origin. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is
AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value
is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A TopologyCyclicSymmetry object.
Exceptions
None.
1871
TopologyCyclicSymmetry object

setValues(...)
This method modiﬁes the TopologyCyclicSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyCyclicSymmetry  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyCyclicSymmetry object has members with the same names and descriptions as the arguments to the
TopologyCyclicSymmetry  method.
Abaqus Scripting Reference Guide
1872
TopologyCyclicSymmetry object

TopologyDemoldControl object
The TopologyDemoldControl object deﬁnes a topology demold control geometric restriction.
The TopologyDemoldControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyDemoldControl(...)
This method creates a TopologyDemoldControl object.
Path
          mdb.models[name].optimizationTasks[name].TopologyDemoldControl
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system of the pullDirection. If
csys=None, the global coordinate system is used. When this member is queried, it returns
an Int indicating the identiﬁer of the DatumCsys. The default value is None.
csys
A Float specifying the draft angle. The default value is 0.0.
draftAngle
The SymbolicConstant DEMOLD_REGION or a Region object specifying the collision
check region. If the value is DEMOLD_REGION, then the value of region is used as both
the demold region and the collision check region. The default value is DEMOLD_REGION.
collisionCheckRegion
A Region object specifying the point on a plane perpendicular to the pull direction, used to
specify the central plane when technique is POINT.
pointRegion
A VertexArray object of length 2 specifying the demold pull direction. Instead of through a
Vertex, each point may be speciﬁed through a tuple of coordinates.
pullDirection
A SymbolicConstant specifying the demold technique. Possible values are AUTO,
AUTO_TIGHT, POINT, SURFACE, and STAMP. The default value is AUTO.
technique
1873
TopologyDemoldControl object

Return value
A TopologyDemoldControl object.
Exceptions
None.
setValues(...)
This method modiﬁes the TopologyDemoldControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyDemoldControl  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyDemoldControl object has members with the same names and descriptions as the arguments to the
TopologyDemoldControl  method.
Abaqus Scripting Reference Guide
1874
TopologyDemoldControl object

TopologyMemberSize object
The TopologyMemberSize object deﬁnes a topology member size geometric restriction.
The TopologyMemberSize object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyMemberSize(...)
This method creates a TopologyMemberSize object.
Path
          mdb.models[name].optimizationTasks[name].TopologyMemberSize
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
A Float specifying the maximum thickness. The default value is 0.0.
maxThickness
A Float specifying the minimum thickness. The default value is 0.0.
minThickness
A Float specifying the minimum gap. The default value is 0.0.
separation
A SymbolicConstant specifying whether to restrict the minimum or maximum thickness
or an envelope of both. Possible values are ENVELOPE, MAXIMUM, and MINIMUM.
The default value is MINIMUM.
sizeRestriction
A SymbolicConstant specifying the algorithm for the maximum member size constraint.
Possible values are FILTER and LOCAL_VOLUME. The default value is FILTER.
method
Return value
A TopologyMemberSize object.
1875
TopologyMemberSize object

Exceptions
None.
setValues(...)
This method modiﬁes the TopologyMemberSize object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyMemberSize method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyMemberSize object has members with the same names and descriptions as the arguments to the
TopologyMemberSize method.
Abaqus Scripting Reference Guide
1876
TopologyMemberSize object

TopologyOverhangControl object
The TopologyOverhangControl object deﬁnes a topology overhang control geometric restriction.
The TopologyOverhangControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyOverhangControl(...)
This method creates a TopologyOverhangControl object.
Path
          mdb.models[name].optimizationTasks[name].TopologyOverhangControl
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the overhang control print direction. Instead
of through a Vertex, each point can be speciﬁed through a tuple of coordinates.
pullDirection
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system of the pullDirection. If
csys=None, the global coordinate system is used. When this member is queried, it returns
an Int indicating the identiﬁer of the DatumCsys. The default value is None.
csys
A Float specifying the overhang angle. The default value is 45.0.
draftAngle
The SymbolicConstant OVERHANG_REGION or a Region object specifying the overhang
check region. If the value is OVERHANG_REGION, the value of region is used as both the
overhangCheckRegion
overhang control region and the overhang check region. The default value is
OVERHANG_REGION.
A Region object specifying the point on a plane perpendicular to the pullDirection that is
used to specify the base plane when technique is POINT.
pointRegion
A Float specifying the radius to deﬁne the size of the cones that are used in the internal check
for the overhang criteria.
radius
1877
TopologyOverhangControl object

A SymbolicConstant specifying the overhang control technique used to deﬁne the base plane.
Possible values are AUTO, POINT, and NONE. The default value is AUTO.
technique
Return value
A TopologyOverhangControl object.
Exceptions
None.
setValues(...)
This method modiﬁes the TopologyOverhangControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyOverhangControl  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyOverhangControl object has members with the same names and descriptions as the arguments to the
TopologyOverhangControl  method.
Abaqus Scripting Reference Guide
1878
TopologyOverhangControl object

TopologyPlanarSymmetry object
The TopologyPlanarSymmetry object deﬁnes a topology planar symmetry geometric restriction.
The TopologyPlanarSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyPlanarSymmetry(...)
This method creates a TopologyPlanarSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].TopologyPlanarSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
A SymbolicConstant specifying the axis of symmetry. Possible values are AXIS_1, AXIS_2,
and AXIS_3. The default value is AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value
is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A TopologyPlanarSymmetry object.
Exceptions
None.
1879
TopologyPlanarSymmetry object

setValues(...)
This method modiﬁes the TopologyPlanarSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyPlanarSymmetry  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyPlanarSymmetry object has members with the same names and descriptions as the arguments to the
TopologyPlanarSymmetry  method.
Abaqus Scripting Reference Guide
1880
TopologyPlanarSymmetry object

TopologyPointSymmetry object
The TopologyPointSymmetry object deﬁnes a topology point symmetry geometric restriction.
The TopologyPointSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyPointSymmetry(...)
This method creates a TopologyPointSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].TopologyPointSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the position of the symmetry point deﬁned as the
origin of a local coordinate system. If csys=None, the global coordinate system is used.
When this member is queried, it returns an Int. The default value is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A TopologyPointSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the TopologyPointSymmetry object.
1881
TopologyPointSymmetry object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyPointSymmetry  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyPointSymmetry object has members with the same names and descriptions as the arguments to the
TopologyPointSymmetry  method.
Abaqus Scripting Reference Guide
1882
TopologyPointSymmetry object

TopologyRibDesign object
The TopologyRibDesign object deﬁnes a topology rib design geometric restriction.
The TopologyRibDesign object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyRibDesign(...)
This method creates a TopologyRibDesign object.
Path
          mdb.models[name].optimizationTasks[name].TopologyRibDesign
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the out-of-plane growth direction of the
ribs. Instead of through a Vertex, each point can be speciﬁed through a tuple of
coordinates.
ribDirection
A Float specifying the average thickness of the ribs.
ribThickness
A Float specifying the average distance between the rib centers. The distance must be
larger than twice the average element edge length.
ribDistance
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system of the pullDirection. If
csys=None, the global coordinate system is used. When this member is queried, it returns
an Int indicating the identiﬁer of the DatumCsys. The default value is None.
csys
The SymbolicConstant RIBDESIGN_REGION  or a Region object specifying the overhang
check region. If the value is OVERHANG_REGION, the value of region is used as both the
ribDesignCheckRegion
overhang control region and the overhang check region. The default value is
RIBDESIGN_REGION.
Return value
A TopologyRibDesign object.
1883
TopologyRibDesign object

Exceptions
None.
setValues(...)
This method modiﬁes the TopologyRibDesign object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyRibDesign method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyRibDesign  object has members with the same names and descriptions as the arguments to the
TopologyRibDesign method.
Abaqus Scripting Reference Guide
1884
TopologyRibDesign object

TopologyRotationalSymmetry object
The TopologyRotationalSymmetry object deﬁnes a topology rotational symmetry geometric restriction.
The TopologyRotationalSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyRotationalSymmetry(...)
This method creates a TopologyRotationalSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].TopologyRotationalSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Float specifying the repeating segment size, an angle in degrees.
angle
A Region object specifying the region to which the geometric restriction is applied. When used
with a TopologyTask, there is no default value. When used with a ShapeTask, the default value
is MODEL.
region
Optional arguments
A SymbolicConstant specifying the axis of symmetry. Possible values are AXIS_1, AXIS_2,
and AXIS_3. The default value is AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value
is None.
csys
A Boolean specifying whether to ignore frozen areas. The default value is OFF.
ignoreFrozenArea
Return value
A TopologyRotationalSymmetry object.
Exceptions
None.
1885
TopologyRotationalSymmetry object

setValues(...)
This method modiﬁes the TopologyRotationalSymmetry object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyRotationalSymmetry  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyRotationalSymmetry object has members with the same names and descriptions as the arguments to the
TopologyRotationalSymmetry  method.
Abaqus Scripting Reference Guide
1886
TopologyRotationalSymmetry object

TopologyMillingControl object
The TopologyMillingControl object deﬁnes a topology milling control geometric restriction.
The TopologyMillingControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TopologyMillingControl(...)
This method creates a TopologyMillingControl object.
Path
          mdb.models[name].optimizationTasks[name].TopologyMillingControl
Required arguments
A String specifying the geometric restriction repository key.
name
A tuple of VertexArray objects of length 2 specifying the milling directions. Each point
can be speciﬁed through a tuple of coordinates instead of through a Vertex.
millingDirections
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system of the millingDirections.
If csys=None, the global coordinate system is used. When this member is queried, it returns an
Int indicating the identiﬁer of the DatumCsys. The default value is None.
csys
The SymbolicConstant MILLING_REGION or a Region object specifying the milling check
region. If the value is MILLING_REGION, the value of region is used as both the milling
control region and the milling check region. The default value is MILLING_REGION.
millingCheckRegion
A Float specifying the radius for the collision check during the removal of the elements for the
milling criteria.
radius
Return value
A TopologyMillingControl object.
Exceptions
None.
1887
TopologyMillingControl object

setValues(...)
This method modiﬁes the TopologyMillingControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyMillingControl method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The TopologyMillingControl object has members with the same names and descriptions as the arguments to the
TopologyMillingControl method.
Abaqus Scripting Reference Guide
1888
TopologyMillingControl object

TopologyTask object
The TopologyTask object deﬁnes a topology task.
The TopologyTask object is derived from the OptimizationTask object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name]
TopologyTask(...)
This method creates a TopologyTask object.
Path
          mdb.models[name].TopologyTask
Required arguments
A String specifying the optimization task repository key.
name
Optional arguments
A Boolean specifying whether to use Abaqus to compute the design responses
and their sensitivities. The default value is True.
abaqusSensitivities
A SymbolicConstant specifying the optimization task algorithm. Possible values
are GENERAL_OPTIMIZATION and CONDITION_BASED_OPTIMIZATION.
The default value is GENERAL_OPTIMIZATION.
algorithm
A Float specifying the maximum density change per design cycle. The default
value is 0.25.
densityMoveLimit
A SymbolicConstant specifying the strategy for how the densities are updated
in the method of moving asymptotes. Possible values are NORMAL,
CONSERVATIVE, and AGGRESSIVE. The default value is NORMAL.
densityUpdateStrategy
A Float specifying the stop criteria based upon the change in element densities.
The default value is 0.5×10–2.
elementDensityDeltaStopCriteria
None or a Float specifying the mesh ﬁlter radius for mesh independence and
minimum size. The default value is None.
ﬁlterRadius
A Float specifying the volume that can be removed immediately in the ﬁrst
design cycle. The default value is 5.0.
ﬁrstCycleDeletedVolume
1889
TopologyTask object

A SymbolicConstant specifying the method of quantifying volume that can be
removed immediately in the ﬁrst design cycle. Possible values are OFF,
PERCENTAGE, and ABSOLUTE. The default value is OFF.
ﬁrstCycleDeletedVolumeTechnique
A Boolean specifying whether to exclude elements with boundary conditions
from the optimization. The default value is OFF.
freezeBoundaryConditionRegions
A Boolean specifying whether to exclude elements with loads and elements with
loaded nodes from the optimization. The default value is ON.
freezeLoadRegions
A Float specifying the weighting factor for frequency spectrum peaks. The
default value is 6.0.
frequencySpectrumWeight
A SymbolicConstant specifying the Optimization product default or a ﬂoat
specifying the initial density. The default value is DEFAULT.
initialDensity
A Float specifying the penalty factor for the material interpolation technique.
The default value is 3.0.
materialInterpolationPenalty
A SymbolicConstant specifying the material interpolation technique: optimization
product default, solid isotropic material with penalization, or rational
materialInterpolationTechnique
approximation of material properties. Possible values are DEFAULT, SIMP,
and RAMP. The default value is DEFAULT.
A Float specifying the maximum density in the density update. The default value
is 1.0.
maxDensity
A Float specifying the minimum density in the density update. The default value
is 10–3.
minDensity
The SymbolicConstant MODEL or a Region object specifying the region to use
for mode tracking. The default value is MODEL.
modeTrackingRegion
An Int specifying the number of design cycles permitted when stepSize is
DYNAMIC. The default value is 15.
numDesignCycles
An Int specifying the number of stop criteria. The default value is 2.
numFulﬁlledStopCriteria
An Int specifying the number of modes included in mode tracking. The default
value is 5.
numTrackedModes
A Float specifying the stop criteria based on the change in objective function.
The default value is 10–3.
objectiveFunctionDeltaStopCriteria
The SymbolicConstant MODEL or a Region object specifying the region to
which the optimization task is applied. The default value is MODEL.
region
A SymbolicConstant specifying the method used when softDeletionRegion is
speciﬁed. The STANDARD method avoids creating disconnected regions. The
softDeletionMethod
Abaqus Scripting Reference Guide
1890
TopologyTask object

AGGRESSIVE method only considers the softDeletionThreshold. The
MAX_SHEAR_STRAIN, MAX_ELASTOPLASTIC_STRAIN and
VOLUME_COMPRESSION methods do not need the softDeletionRadius.
Possible values are STANDARD, AGGRESSIVE, MAX_SHEAR_STRAIN,
MIN_PRINCIPAL_STRAIN, MAX_ELASTOPLASTIC_STRAIN and
VOLUME_COMPRESSION. The default value is STANDARD.
A Float specifying the radius to use when considering neighboring soft elements
to delete. The default value is 0.0.
softDeletionRadius
None or a Region object specifying the region in which the soft elements should
be deleted during optimization. The default value is None.
softDeletionRegion
A Float specifying the relative material density value used to identify soft
elements. Those with values below the threshold are considered for removal.
softDeletionThreshold
For STANDARD and AGGRESSIVE methods positive values are accepted and
the default value is 0.05. For MAX_SHEAR_STRAIN and
MAX_ELASTOPLASTIC_STRAIN methods positive values are accepted
whereas for MIN_PRINCIPAL_STRAIN and VOLUME_COMPRESSION
methods negative values are accepted.
A SymbolicConstant specifying the size of the increment for volume
modiﬁcation. Possible values are DYNAMIC, VERY_SMALL, SMALL,
MODERATE, MEDIUM, and LARGE. The default value is MEDIUM.
stepSize
The SymbolicConstant AVERAGE_EDGE_LENGTH or a Float specifying the
stiffness mass damping for the task region. The default value is
AVERAGE_EDGE_LENGTH.
stiffnessMassDamping
An Int specifying the ﬁrst design cycle used to evaluate convergence criteria.
The default value is 4.
stopCriteriaDesignCycle
None or a Float specifying the structural mass damping for the task region. The
default value is None.
structuralMassDamping
None or a Float specifying the viscous mass damping for the task region. The
default value is None.
viscousMassDamping
None or a Float specifying the viscous stiffness damping for the task region.
The default value is None.
viscousStiffnessDamping
A Boolean specifying whether the group in the design response will be evaluated
using the existing algorithm or a new algorithm based on Abaqus sensitivities.
The default value of False means that the existing algorithm will be used.
groupOperator
Return value
A TopologyTask object.
1891
Abaqus Scripting Reference Guide
TopologyTask object

Exceptions
None.
setValues(...)
This method modiﬁes the TopologyTask object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TopologyTask method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The TopologyTask object has members with the same names and descriptions as the arguments to the TopologyTask
method.
In addition, the TopologyTask object can have the following members:
A repository of DesignResponse objects.
designResponses
A repository of ObjectiveFunction objects.
objectiveFunctions
A repository of OptimizationConstraint objects.
optimizationConstraints
A repository of GeometricRestriction objects.
geometricRestrictions
A repository of StopCondition objects.
stopConditions
Abaqus Scripting Reference Guide
1892
TopologyTask object

TurnControl object
The TurnControl object deﬁnes a turn control geometric restriction.
The TurnControl object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
TurnControl(...)
This method creates a TurnControl object.
Path
          mdb.models[name].optimizationTasks[name].TurnControl
Required arguments
A String specifying the geometric restriction repository key.
name
A VertexArray object of length 2 specifying the direction of the rotation axis as a vector
positioned at the csys origin. Instead of through a Vertex, each point might be speciﬁed through
a tuple of coordinates.
clientDirection
A Region object specifying the region to which the geometric restriction is applied. When
used with a TopologyTask, there is no default value. When used with a ShapeTask, the default
value is MODEL.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system. If csys=None,
the global coordinate system is used. When this member is queried, it returns an Int.
The default value is None.
csys
None or a Region object specifying the main point used when
mainPointDetermination is SPECIFY. The default value is None.
mainPoint
A SymbolicConstant specifying the rule for assigning point priority. Possible values
are MAXIMUM, MINIMUM, and SPECIFY. The default value is MAXIMUM.
mainPointDetermination
A Boolean specifying whether to ignore the geometric restriction in the ﬁrst design
cycle. The default value is ON.
presumeFeasibleRegionAtStart
1893
TurnControl object

A Float specifying the geometric tolerance in the 1-direction. The default value is
0.01.
tolerance1
A Float specifying the geometric tolerance in the 2-direction. The default value is
0.01.
tolerance2
A Float specifying the geometric tolerance in the 3-direction. The default value is
0.01.
tolerance3
Return value
A TurnControl object.
Exceptions
None.
setValues(...)
This method modiﬁes the TurnControl object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TurnControl method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The TurnControl object has members with the same names and descriptions as the arguments to the TurnControl
method.
Abaqus Scripting Reference Guide
1894
TurnControl object

BeadFilter object
The BeadFilter object deﬁnes a growth geometric restriction.
The BeadFilter object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
BeadFilter(...)
This method creates a BeadFilter object.
Path
          mdb.models[name].optimizationTasks[name].BeadGrowth
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
A Float specifying the ﬁlter radius. The default value is double the average edge length of
the model.
radius
The SymbolicConstant deﬁnes whether the ﬁlter radius is in absolute or relative units. For
an absolute radius, the value is ABSOLUTE_VALUE. For a relative radius, the value is
RELATIVE. The default value is ABSOLUTE_VALUE.
ﬁlterRadiusBy
The SymbolicConstant FILTER_REGION or a Region object specifying the ﬁlter check
region. If the value is FILTER_REGION, the value of the region is used as both the ﬁlter
region and the ﬁlter check region. The default value is FILTER_REGION.
ﬁlterCheckRegion
Return value
A BeadFilter object.
Exceptions
None.
1895
BeadFilter object

setValues(...)
This method modiﬁes the BeadFilter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadFilter method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The BeadFilter object has members with the same names and descriptions as the arguments to the BeadFilter method.
Abaqus Scripting Reference Guide
1896
BeadFilter object

BeadFixedRegion object
The BeadFixedRegion object deﬁnes a ﬁxed region geometric restriction.
The BeadFixedRegion object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
BeadFixedRegion(...)
This method creates a BeadFixedRegion object.
Path
          mdb.models[name].optimizationTasks[name].BeadFixedRegion
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value is None.
csys
A Boolean specifying whether to ﬁx the region in the 1-direction. The default value is OFF.
u1
A Boolean specifying whether to ﬁx the region in the 2-direction. The default value is OFF.
u2
A Boolean specifying whether to ﬁx the region in the 3-direction. The default value is OFF.
u3
Return value
A BeadFixedRegion object.
Exceptions
None.
setValues(...)
This method modiﬁes the BeadFixedRegion object.
1897
BeadFixedRegion object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadFixedRegion  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The BeadFixedRegion object has members with the same names and descriptions as the arguments to the
BeadFixedRegion  method.
Abaqus Scripting Reference Guide
1898
BeadFixedRegion object

BeadGrowth object
The BeadGrowth object deﬁnes a growth geometric restriction.
The BeadGrowth object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
BeadGrowth(...)
This method creates a BeadGrowth object.
Path
          mdb.models[name].optimizationTasks[name].BeadGrowth
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
A Float specifying the maximum optimization displacement in the growth direction. Either
beadGrowth or shrink or both must be speciﬁed. The default value is 0.0.
beadGrowth
A Float specifying the maximum optimization displacement in the shrink direction. Either
beadGrowth or shrink or both must be speciﬁed The default value is 0.0.
shrink
Return value
A BeadGrowth object.
Exceptions
None.
setValues(...)
This method modiﬁes the BeadGrowth object.
Required arguments
None.
1899
BeadGrowth object

Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadGrowth  method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The BeadGrowth object has members with the same names and descriptions as the arguments to the BeadGrowth
method.
Abaqus Scripting Reference Guide
1900
BeadGrowth object

BeadPenetrationCheck object
The BeadPenetrationCheck object deﬁnes a penetration check geometric restriction.
The BeadPenetrationCheck object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
BeadPenetrationCheck(...)
This method creates a BeadPenetrationCheck object.
Path
          mdb.models[name].optimizationTasks[name].BeadPenetrationCheck
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the penetration check region.
beadPenetrationCheckRegion
A Region object specifying the region to which the geometric restriction is
applied.
region
Optional arguments
None.
Return value
A BeadPenetrationCheck object.
Exceptions
None.
setValues(...)
This method modiﬁes the BeadPenetrationCheck object.
Required arguments
None.
1901
BeadPenetrationCheck object

Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadPenetrationCheck  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The BeadPenetrationCheck object has members with the same names and descriptions as the arguments to the
BeadPenetrationCheck  method.
Abaqus Scripting Reference Guide
1902
BeadPenetrationCheck object

BeadPlanarSymmetry object
The BeadPlanarSymmetry object deﬁnes a bead planar symmetry geometric restriction.
The BeadPlanarSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
BeadPlanarSymmetry(...)
This method creates a BeadPlanarSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].BeadPlanarSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
A SymbolicConstant specifying the axis of symmetry. Possible values are AXIS_1, AXIS_2, and
AXIS_3. The default value is AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value is None.
csys
Return value
A BeadPlanarSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the BeadPlanarSymmetry object.
Required arguments
None.
1903
BeadPlanarSymmetry object

Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadPlanarSymmetry  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The BeadPlanarSymmetry object has members with the same names and descriptions as the arguments to the
BeadPlanarSymmetry  method.
Abaqus Scripting Reference Guide
1904
BeadPlanarSymmetry object

BeadPointSymmetry object
The BeadPointSymmetry object deﬁnes a point symmetry geometric restriction.
The BeadPointSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
BeadPointSymmetry(...)
This method creates a BeadPointSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].BeadPointSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
None or a DatumCsys object specifying the position of the symmetry point deﬁned as the origin of a
local coordinate system. If csys=None, the global coordinate system is used. When this member is
queried, it returns an Int. The default value is None.
csys
Return value
A BeadPointSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the BeadPointSymmetry object.
Required arguments
None.
1905
BeadPointSymmetry object

Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadPointSymmetry  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The BeadPointSymmetry object has members with the same names and descriptions as the arguments to the
BeadPointSymmetry  method.
Abaqus Scripting Reference Guide
1906
BeadPointSymmetry object

BeadRotationalSymmetry object
The BeadRotationalSymmetry object deﬁnes a bead rotational symmetry geometric restriction.
The BeadRotationalSymmetry object is derived from the GeometricRestriction object.
Access
        import optimization
        mdb.models[name].optimizationTasks[name].geometricRestrictions[name]
BeadRotationalSymmetry(...)
This method creates a BeadRotationalSymmetry object.
Path
          mdb.models[name].optimizationTasks[name].BeadRotationalSymmetry
Required arguments
A String specifying the geometric restriction repository key.
name
A Float specifying the repeating segment size, an angle in degrees.
angle
A Region object specifying the region to which the geometric restriction is applied.
region
Optional arguments
A SymbolicConstant specifying the axis of symmetry. Possible values are AXIS_1, AXIS_2, and
AXIS_3. The default value is AXIS_1.
axis
None or a DatumCsys object specifying the local coordinate system. If csys=None, the global
coordinate system is used. When this member is queried, it returns an Int. The default value is None.
csys
Return value
A BeadRotationalSymmetry object.
Exceptions
None.
setValues(...)
This method modiﬁes the BeadRotationalSymmetry object.
1907
BeadRotationalSymmetry object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BeadRotationalSymmetry  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The BeadRotationalSymmetry object has members with the same names and descriptions as the arguments to the
BeadRotationalSymmetry  method.
Abaqus Scripting Reference Guide
1908
BeadRotationalSymmetry object

Part commands
Features in Abaqus/CAE include Parts, Datums, Partitions, and Assembly operations. Part commands create
Feature objects on only the Part object.
The commands that create Feature objects on only the rootAssembly object are described in Assembly commands.
The commands that create Feature objects on both the Part and the rootAssembly objects are described in Feature
commands.
In this section:
•
Part object
•
Feature object
•
AcisFile object
1909

Part object
The Part object deﬁnes the physical attributes of a structure. Parts are instanced into the assembly and positioned before
an analysis.
Access
import part
mdb.models[name].parts[name]
Part(...)
This method creates a Part object and places it in the parts repository.
Path
mdb.models[name].Part
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the dimensionality of the part. Possible values are THREE_D,
TWO_D_PLANAR, and AXISYMMETRIC.
dimensionality
A SymbolicConstant specifying the type of the part. Possible values are
DEFORMABLE_BODY, EULERIAN, DISCRETE_RIGID_SURFACE, and
ANALYTIC_RIGID_SURFACE.
type
Optional arguments
A Boolean specifying whether to include a twist DEGREE OF FREEDOM in the part (available only
when dimensionality=AXISYMMETRIC and type=DEFORMABLE_BODY). The default value is
OFF.
twist
Return value
A Part object.
Exceptions
InvalidNameError.
Part(...)
This method copies a Part object and places the copy in the parts repository.
Path
mdb.models[name].Part
Abaqus Scripting Reference Guide
1910
Part object

Required arguments
A String specifying the repository key.
name
A Part Object to be copied.
objectToCopy
Optional arguments
A Float specifying the scaling factor to apply to the imported geometric entities during copy.
If a scale is speciﬁed, compressFeatureList will be set to ON, regardless of whether it is speciﬁed
in the command. The default value is 1.
scale
A SymbolicConstant specifying how the part is to be mirrored during copy. Possible values are
XYPLANE, XZPLANE, YZPLANE. If a mirror plane is speciﬁed, compressFeatureList will
be set to ON, regardless of whether it is speciﬁed in the command. The default value is NONE.
mirrorPlane
A Boolean specifying whether to compress the feature list when copying a Part object. The
default value is OFF. If mirrorPlane or scale is speciﬁed, this argument is ignored.
compressFeatureList
When you compress the feature, list the resulting part will have a single feature. Any datums
or sets in the original part will be lost.
A Boolean specifying whether to separate disconnected regions into parts. The default value is
OFF.
separate
Return value
A Part object.
Exceptions
InvalidNameError.
PartFromBooleanCut(...)
This method creates a Part in the parts repository after subtracting or cutting the geometries of a group of part instances
from that of a base part instance.
Path
mdb.models[name].rootAssembly.PartFromBooleanCut
Required arguments
A String specifying the repository key.
name
A PartInstance specifying the base instance from which to cut other instances.
instanceToBeCut
A sequence of PartInstance objects specifying the instances with which to cut
the base instance.
cuttingInstances
1911
Abaqus Scripting Reference Guide
Part object

Optional arguments
None.
Return value
A Part object.
Exceptions
InvalidNameError.
PartFromBooleanMerge(...)
This method creates a Part in the parts repository after merging two or more part instances. The part instances can be
either Abaqus native parts or orphan mesh parts, but they cannot be a combination of both.
Path
mdb.models[name].rootAssembly.PartFromBooleanMerge
Required arguments
A String specifying the repository key.
name
A sequence of PartInstance objects specifying the part instances to merge.
instances
Optional arguments
A Boolean specifying whether the boundary intersections of Abaqus native part instances
should be retained after the merge operation. The default value is False.
keepIntersections
A SymbolicConstant specifying whether the nodes of orphan mesh part instances should
be retained after the merge operation. Possible values are BOUNDARY_ONLY, ALL,
or NONE. The default value is BOUNDARY_ONLY.
mergeNodes
A Float specifying the maximum distance between nodes of orphan mesh part instances
that will be merged and replaced with a single new node. The location of the new node
is the average position of the deleted nodes. The default value is 10–6.
nodeMergingTolerance
A Boolean specifying whether elements with the same connectivity after the merge will
merged into a single element. The default value is ON.
removeDuplicateElements
A SymbolicConstant specifying whether the part instances being merged are geometric
instances or mesh instances. Possible values are GEOMETRY, MESH or BOTH. The
default value is GEOMETRY.
domain
Return value
A Part object.
Abaqus Scripting Reference Guide
1912
Part object

Exceptions
InvalidNameError.
PartFromExtrude2DMesh(...)
This method creates a Part object by extruding an existing two-dimensional orphan mesh Part object in the positive
Z-direction and places it in the parts repository.
Path
mdb.models[modelName].PartFromExtrude2DMesh 
Required arguments
A String specifying the repository key.
name
A Part object specifying an existing two-dimensional orphan mesh Part object.
part
A Float specifying the total extrusion distance.
depth
A Float specifying an approximate element length in the extruded direction.
elementSize
Optional arguments
None.
Return value
A Part object.
Exceptions
InvalidNameError.
Cannot extrude a geometric part.
If the speciﬁed part is not an orphan mesh part:
Cannot extrude a 3D part.
If the speciﬁed part is not two-dimensional:
Cannot change dimension of a rigid body.
If the speciﬁed part is a rigid body:
PartFromGeometryFile(...)
This method creates a Part object and places it in the parts repository.
Path
mdb.models[modelName].PartFromGeometryFile 
1913
Abaqus Scripting Reference Guide
Part object

Required arguments
A String specifying the repository key.
name
An AcisFile object specifying a ﬁle containing geometry.
geometryFile
A SymbolicConstant specifying the dimensionality of the part. Possible values are
THREE_D, TWO_D_PLANAR, and AXISYMMETRIC.
dimensionality
A SymbolicConstant specifying the type of the part. Possible values are
DEFORMABLE_BODY, EULERIAN, DISCRETE_RIGID_SURFACE, and
ANALYTIC_RIGID_SURFACE.
type
Optional arguments
An Int specifying the desired body to be selected from an ACIS object containing a list of N
ACIS bodies. Possible values are 1 bodyNum N. The default value is 1.
bodyNum
A Boolean specifying weather to create a single part by combining all the bodies in the ACIS
object. This argument is ignored if bodyNum is speciﬁed. The default value is False.
combine
A Boolean specifying whether the solids should be boolean while combining all the bodies.
The default value is FALSE.
booleanSolids
A Boolean specifying whether the intersecting boundaries should be retained while boolean
the solids. The default value is FALSE.
retainBoundary
A Boolean specifying whether the part names speciﬁed in a STEP ﬁle should be used as the
names in the Abaqus model database. If this option is TRUE, the part names in the STEP ﬁle
usePartNameFromFile
will be used; if FALSE, each imported part will be named using the text of the name argument
followed by a number. This functionality is available only for import from STEP ﬁles; for
import from all other types of ﬁles this option should be FALSE.
A Float indicating the maximum gap to be stitched. The value should be smaller than the
minimum feature size and bigger than the maximum gap expected to be stitched in the model.
stitchTolerance
Otherwise this command might remove small (sliver) edges that are smaller than the tolerance.
The default value is 1.0
A Boolean specifying whether to include a twist DEGREE OF FREEDOM in the part
(available only when dimensionality=AXISYMMETRIC and type=DEFORMABLE_BODY).
The default value is OFF.
twist
A Float specifying the scaling factor to apply to the imported geometric entities. The default
value is 1.0.
scale
An Int specifying whether to convert to analytical entities. Possible values are 0 or 1. The
default value is 0. If convertToAnalytical=1, all the numerical entities, such as splines, are
converted to analytical entities, such as arcs and lines, during the repair phase of the command.
convertToAnalytical
Abaqus Scripting Reference Guide
1914
Part object

An Int specifying whether to convert to precise geometry. Possible values are 0 or 1. The
default value is 0. If convertToPrecise=1, the application will attempt to re-evaluate the
tolerant entities to be more precise.
convertToPrecise
Return value
A Part object.
Exceptions
InvalidNameError.
PartError: the ﬁle is corrupt
If the ACIS ﬁle is corrupt:
PartError: dimensionality does not match the contents
of the ﬁle
If the dimensionality does not correspond to what is found
in the ACIS ﬁle:
PartError: type does not match the contents of the ﬁle
If the type does not correspond to what is found in the
ACIS ﬁle:
PartFromInstanceMesh(...)
This method creates a Part object containing the mesh found in the supplied PartInstance objects and places the new
Part object in the parts repository.
Path
mdb.models[name].rootAssembly.PartFromInstanceMesh
Required arguments
A String specifying the repository key.
name
Optional arguments
A sequence of PartInstance objects to be used in the creation of the new mesh part. If the
partInstances argument is omitted, the new Part object contains the mesh of all the part
instances in the assembly.
partInstances
A Boolean specifying whether to copy sets, surfaces, and attributes from the base part or
parts of the speciﬁed part instances to the new part. The default is False.
copyPartSets
A Boolean specifying whether to copy assembly-level sets that reference entities of the
speciﬁed part instances to the new part. The default is False.
copyAssemblySets
Return value
A Part object.
1915
Abaqus Scripting Reference Guide
Part object

Exceptions
InvalidNameError.
The selected part instances do not have a consistent
analysis type.
If the analysis type (deformable or rigid) is not
consistent among the supplied part instances:
The current assembly does not contain a mesh for a mesh
part.
If the assembly does not contain a mesh:
The selected part instances do not have a mesh for a mesh
part.
If the speciﬁed part instances do not contain a mesh:
PartFromMesh(...)
This method creates a Part object containing the mesh found in the part and places the new Part object in the parts
repository.
Path
mdb.models[name].parts[name].PartFromMesh
Required arguments
A String specifying the repository key.
name
Optional arguments
A Boolean specifying whether to copy sets, surfaces, and attributes to the new part. The
default is False.
copySets
Return value
A Part object.
Exceptions
InvalidNameError.
The current part does not contain a mesh for a mesh part.
If the part does not contain a mesh:
PartFromMeshMirror(...)
This method creates a Part object by mirroring an existing orphan mesh Part object about a speciﬁed plane and places
it in the parts repository. The result is a union of the original and the mirrored copy. Contrast the PartFromMeshMirror
method with the mirrorPlane argument of the Part copy constructor. The mirrorPlane argument creates only the second
half of the part but does not unite the two halves.
Path
mdb.models[modelName].PartFromMeshMirror 
Abaqus Scripting Reference Guide
1916
Part object

Required arguments
A String specifying the repository key.
name
A Part object specifying an existing orphan mesh part.
part
A sequence of three Floats specifying a point on the mirror plane. This point is the local origin
in the local system of the plane.
point1
A sequence of three Floats specifying a point in the direction of the normal to the mirror plane.
This point must not be coincident with point1.
point2
Optional arguments
None.
Return value
A Part object.
Exceptions
InvalidNameError.
Cannot mirror a geometric part.
If the speciﬁed part is not an orphan mesh part:
Cannot mirror a rigid body.
If the speciﬁed part is a rigid body:
Mirror plane director has zero length.
If point1 and point2 are coincident:
Mirror plane must be parallel to Z-axis for 2D parts.
If the speciﬁed part is two-dimensional and the plane is not
parallel to the Z-axis:
PartFromNodesAndElements(...)
This method creates a Part object from nodes and elements and places it in the parts repository.
Path
mdb.models[modelName].PartFromNodesAndElements 
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the dimensionality of the part. Possible values are THREE_D,
TWO_D_PLANAR, and AXISYMMETRIC.
dimensionality
A SymbolicConstant specifying the type of the part. Possible values are DEFORMABLE_BODY,
EULERIAN, DISCRETE_RIGID_SURFACE, and ANALYTIC_RIGID_SURFACE.
type
1917
Abaqus Scripting Reference Guide
Part object

A sequence of (nodeLabels, nodeCoords) specifying the nodes of the mesh. nodeLabels is a
sequence of Ints specifying the node labels, and nodeCoords is a sequence of sequences of three
Floats specifying the nodal coordinates.
nodes
A sequence of sequences of(meshType, elementLabels, elementConns) specifying the elements
of the mesh. meshType is a String specifying the element type. elementlabels is a sequence of
elements
Ints specifying the element labels. elementConns is a sequence of sequences of node labels
specifying the element connectivity.
Optional arguments
A boolean specifying whether the part is deﬁned with twist. This option has meaning only when
dimensionality=AXISYMMETRIC. Possible values are ON and OFF. The default value is OFF.
twist
Return value
A Part object.
Exceptions
None.
PartFromOdb(...)
This method creates an orphan mesh Part object by reading an output database. The new part is placed in the parts
repository.
Path
mdb.models[modelName].PartFromOdb 
Required arguments
A String specifying the repository key.
name
An output database object.
odb
Optional arguments
A String specifying the name of the output database ﬁle from which to create the part. The default
value is an empty string.
ﬁleName
A String specifying the part instance in the output database from which to create the part. If no
instance name is speciﬁed, Abaqus creates an orphan mesh part from the ﬁrst part instance in the
output database.
instance
A String specifying an element set deﬁned on the output database. Only elements from this set
will be imported. The default is to import all element sets.
elementSet
Abaqus Scripting Reference Guide
1918
Part object

A SymbolicConstant specifying the conﬁguration state. Possible values are UNDEFORMED and
DEFORMED. The default value is UNDEFORMED.
shape
An Int specifying the step number for reading deformed coordinates. 
 where
 is the number of available steps. The default value is the last available step. You should specify
the step argument only when shape=DEFORMED.
step
An Int specifying the frame number for reading deformed coordinates. 
 where
 is the number of available frames. The default value is the last available frame. You should
specify the frame argument only when shape=DEFORMED.
frame
A Boolean specifying whether to include a twist DEGREE OF FREEDOM in the part (available
only when dimensionality=AXISYMMETRIC and type=DEFORMABLE_BODY). The default
value is OFF.
twist
Return value
A Part object.
Exceptions
InvalidNameError.
File contains both axisymmetric and nonaxisymmetric
elements.
If the output database contains elements of more
than one dimensionality or type:
File contains both 2D and 3D elements.
File contains both rigid and deformable elements.
PartError: importing of more than one part is not currently
supported
If more than one part is found on the output
database:
Error. File does not contain any valid frames.
If the output database does not contain any valid
results for the speciﬁed step:
Error. Speciﬁed frame does not contain nodal displacements.
If the speciﬁed step and frame do not contain any
displacements:
Error. Speciﬁed element set is not deﬁned in the ODB.
If the speciﬁed element set is not found on the output
database:
OdiError: Invalid step index: i. Available step indices: 0 - j.
If the step number is invalid:
OdiError: Invalid frame index: i. Available frame indices: 0
- j.
If the frame number is invalid:
PartFromSection3DMeshByPlane(...)
This method creates a Part object by cutting an existing three-dimensional orphan mesh Part object by a plane and
places it in the parts repository. This method is valid only for orphan mesh parts composed of 8-node brick elements.
1919
Abaqus Scripting Reference Guide
Part object

Path
mdb.models[modelName].PartFromSection3DMeshByPlane 
Required arguments
A String specifying the repository key.
name
A Part object specifying an existing three-dimensional orphan mesh part.
part
A Sequence of three Floats specifying a point on the cutting plane. This point is the local origin
in the local system of the plane.
point1
A Sequence of three Floats specifying a point in the direction of the normal to the cutting plane.
This point must not be coincident with point1.
point2
A sequence of three Floats specifying the direction of the local 1-axis in the local system of
the plane. This point must not project onto point1.
point3
Optional arguments
None.
Return value
A Part object.
Exceptions
InvalidNameError.
Cannot reduce dimension of a geometric part.
If the speciﬁed part is not an orphan mesh part:
Cannot reduce dimension of a 2D part.
If the speciﬁed part is not three-dimensional:
Cannot change dimension of a rigid body.
If the speciﬁed part is a rigid body:
Cutting plane director has zero length.
If point1 and point2 are coincident:
Local axis point projects to origin.
If point3 projects onto point1:
Cannot reduce part dimension.
If no elements are cut by the speciﬁed plane:
PartFromSubstructure(...)
This method creates a substructure Part object by reading a substructure sim ﬁle and places it in the parts repository.
Path
mdb.models[name].PartFromSubstructure
Abaqus Scripting Reference Guide
1920
Part object

Required arguments
A String specifying the repository key.
name
A substructure sim ﬁle.
substructureFile
The output database ﬁle corresponding to the substructure sim ﬁle.
odbFile
Optional arguments
None.
Return value
A Part object.
Exceptions
InvalidNameError.
File speciﬁed does not contain a substructure.
If the speciﬁed part is not a substructure:
A part with the same name already exists.
If the speciﬁed part already exists:
The output database is missing nodes and elements.
If the substructure cannot be imported:
Nested substructures are not supported.
The substructure sim ﬁle was generated using a version that is different
from the current version.
Part2DGeomFrom2DMesh(...)
This method creates a geometric Part object from the outline of an existing two-dimensional orphan mesh Part object
and places it in the parts repository. If the Part2DGeomFrom2DMesh method cannot create a valid two-dimensional
shell section from the two-dimensional mesh, the method fails and creates an empty geometry part with a failed base
shell feature.
Path
mdb.models[modelName].Part2DGeomFrom2DMesh 
Required arguments
A String specifying the repository key.
name
A Part object specifying an existing two-dimensional orphan mesh Part object.
part
A Float specifying the angle (in degrees) between line segments that triggers a break in
the geometry.
featureAngle
1921
Abaqus Scripting Reference Guide
Part object

Optional arguments
A Float specifying the traversal angle in degrees of the spline that triggers a break in the
geometry. The default value is 90.
splineCurvatureLimit
A Boolean specifying whether to include a twist DEGREE OF FREEDOM in the part
(available only when dimensionality=AXISYMMETRIC and
type=DEFORMABLE_BODY). The default value is OFF.
twist
Return value
A Part object.
Exceptions
InvalidNameError.
Speciﬁed part must be an orphan mesh.
If the speciﬁed part is not an orphan mesh part:
Planar shell feature failed
If the Part2DGeomFrom2DMesh method cannot create a valid
two-dimensional shell section from the two-dimensional mesh:
Cannot create a geometry from a 3D part.
If the speciﬁed part is not two-dimensional:
Cannot create a geometry from a rigid body.
If the speciﬁed part is a rigid body:
setValues(...)
This method modiﬁes the Part object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Part method. In addition, setValues
has the following optional argument:
A SymbolicConstant specifying how the part's surface is being reﬁned when faceted for
display. Possible values are EXTRA_COARSE, COARSE, MEDIUM, FINE, and
EXTRA_FINE.
geometryReﬁnement
A positive Integer specifying the new start node label for the part mesh that currently exists
or will be generated. If the part is meshed, Abaqus/CAE changes the node labels while
preserving the original order and incrementation.
startNodeLabel
A positive Integer specifying the new start element label for the part mesh that currently
exists or will be generated. If the part is meshed, Abaqus/CAE changes the element labels
while preserving the original order and incrementation.
startElemLabel
Abaqus Scripting Reference Guide
1922
Part object

Return value
None.
Exceptions
RangeError.
addGeomToSketch(...)
This method converts a part into a sketch by projecting all the edges of the part onto the X-Y plane of the sketch. You
can use addGeomToSketch with a part of any modeling space.
Required arguments
A ConstrainedSketch object.
sketch
Optional arguments
None.
Return value
None.
Exceptions
None.
assignThickness(...)
This method assigns thickness data to shell faces. The thickness can be used while assigning shell and membrane
sections to faces.
Required arguments
A sequence of Face objects specifying the regions where thickness will be applied.
faces
Optional arguments
A Float specifying the thickness along the given faces . Either thickness, topFaces, or bottomFaces
must be speciﬁed.
thickness
A sequence of Face objects whose distance to faces argument is used to calculate the thickness
along the faces. The combination of topFaces and bottomFaces determines the thickness and the
topFaces
offset of the elements. If bottomFaces is not speciﬁed then the thickness is twice the distance to
the topFaces. This argument will be ignored if thickness is speciﬁed. Either thickness, topFaces,
or bottomFaces must be speciﬁed.
A sequence of Face objects whose distance to faces is used to calculate the thickness along the
faces. The combination of topFaces and bottomFaces determines the thickness and the offset of
bottomFaces
the elements. If topFaces is not speciﬁed then the thickness is twice the distance to the bottomFaces.
1923
Abaqus Scripting Reference Guide
Part object

This argument will be ignored if thickness is speciﬁed. Either thickness, topFaces, or bottomFaces
must be speciﬁed.
Return value
None.
Exceptions
None.
backup()
This method makes a backup copy of the features in the part. Use the restore method to retrieve the part's features from
the backup.
Arguments
None.
Return value
None.
Exceptions
None.
checkGeometry(...)
This method checks the validity of the geometry of the part and prints a count of all topological entities on the part
(faces, edges, vertices, etc.).
Required arguments
None.
Optional arguments
A Boolean specifying whether detailed output will be printed to the replay ﬁle. The default
value is OFF.
detailed
A Boolean specifying whether faces are checked for proper facetting. The default value is
OFF.
reportFacetErrors
An Int specifying which level of checking is performed. Values can range from 20 to 70, with
higher values reporting less and less important errors. The default value is 20, which reports
level
all critical errors. When the default value is used, the stored validity status is updated to agree
with the result of this check.
Return value
None.
Abaqus Scripting Reference Guide
1924
Part object

Exceptions
None.
clearGeometryCache()
This method clears the geometry cache. Clearing the geometry cache reduces the amount of memory being used to
cache part features.
Arguments
None.
Return value
None.
Exceptions
None.
deleteAllFeatures()
This method deletes all the features in the part.
Arguments
None.
Return value
None.
Exceptions
None.
deleteFeatures(...)
This method deletes the given features.
Required arguments
A sequence of Strings specifying the feature names that will be deleted from the
part.
featureNames
Optional arguments
None.
Return value
None.
1925
Abaqus Scripting Reference Guide
Part object

Exceptions
None.
getAngle(...)
This method returns the angle between the speciﬁed entities.
Required arguments
A Face, MeshFace, or a Datum object specifying the ﬁrst plane. The Datum object must represent
a datum plane. The plane1 and line1 arguments are mutually exclusive. One of them must be
speciﬁed.
plane1
A Face, MeshFace, or a Datum object specifying the second plane. The Datum object must represent
a datum plane. The plane2 and line2 arguments are mutually exclusive. One of them must be
speciﬁed.
plane2
An Edge, MeshEdge, or a Datum object specifying the ﬁrst curve. The Datum object must represent
a datum axis. The plane1 and line1 arguments are mutually exclusive. One of them must be speciﬁed.
line1
An Edge, MeshEdge, or a Datum object specifying the second curve. The Datum object must
represent a datum axis. The plane2 and line2 arguments are mutually exclusive. One of them must
be speciﬁed.
line2
Optional arguments
If the two selected Edge objects have more than one vertex in common, this Vertex
object speciﬁes the vertex at which to evaluate the angle.
commonVertex
Return value
A Float specifying the angle between the speciﬁed entities. If you provide a plane as an argument, Abaqus/CAE
computes the angle using the normal to the plane.
Exceptions
None.
getArea(...)
This method returns the total surface area of a given face or group of faces.
Required arguments
A sequence of face objects whose area the method will calculate.
faces
Abaqus Scripting Reference Guide
1926
Part object

Optional arguments
A Float specifying that the area computation should stop when the speciﬁed relative
accuracy has been achieved. The default value is 0.000001 (0.0001%).
relativeAccuracy
Return value
A Float specifying the sum of the calculated areas of the given faces.
Exceptions
None.
getAssociatedCADPaths()
This method returns the paths to the associated CAD part and root ﬁle. These are available only if the part was imported
from one of the supported CAD softwares using the Associative Import capability. The root ﬁle can be the assembly
ﬁle or the part ﬁle, depending on which one was imported.
Arguments
None.
Return value
A sequence containing the path to the associated CAD part and assembly ﬁle.
Exceptions
None.
getCADParameters()
This method returns the names and values of the CAD parameters associated with the part. These are available only
if the part was imported from one of the supported CAD softwares using the Associative Import capability, and if the
parameter names deﬁned in that CAD software are preﬁxed with the string ABQ.
Arguments
None.
Return value
A dictionary object representing a map of the name of the parameter and its associated value.
Exceptions
None.
getCentroid(...)
Depending on the arguments provided, this method returns the following:
•
The location of the centroid of a given face or group of faces.
1927
Abaqus Scripting Reference Guide
Part object

•
The location of the centroid of a given cell or group of cells.
Required arguments
A sequence of face objects whose centroid the method will calculate. The arguments faces and
cells are mutually exclusive.
faces
A sequence of face objects whose centroid the method will calculate. The arguments faces and
cells are mutually exclusive.
cells
Optional arguments
A Float specifying that the centroid computation should stop when the speciﬁed relative
accuracy has been achieved. The default value is 0.000001 (0.0001%).
relativeAccuracy
Return value
A sequence of Floats specifying the X-, Y-, and Z-coordinates of the centroid.
Exceptions
None.
getCoordinates(...)
This method returns the coordinates of speciﬁed point.
Required arguments
A Vertex, Datum point, MeshNode, or ReferencePoint specifying the entity to query.
entity
Optional arguments
A DatumCsys object specifying the desired coordinate system of the returned coordinates. By
default, coordinates are given in the global coordinate system.
csys
Return value
A tuple of 3 Floats representing the coordinates of the speciﬁed point.
Exceptions
None.
getCurvature(...)
This method returns the maximum curvature of a given edge or group of edges. For an arc, the curvature is constant
over the entire edge, and equal to the inverse of the radius. For a straight line, the curvature is constant and equal to 0.
For a spline edge, the curvature varies over a range, and this method computes the maximum.
Abaqus Scripting Reference Guide
1928
Part object

Required arguments
A sequence of edge objects whose curvature the method will calculate.
edges
Optional arguments
An Int specifying the number of points along each edge at which the curvature will be
computed. The higher the number of sample points, the better the accuracy of the computation.
The default value is 100.
samplePoints
Return value
A Float specifying the maximum curvature.
Exceptions
None.
getDistance(...)
Depending on the arguments provided, this method returns one of the following:
•
The distance between two points.
•
The minimum distance between a point and an edge.
•
The minimum distance between two edges.
Required arguments
A Vertex, Datum point, MeshNode, or Edge specifying the ﬁrst entity from which to measure.
entity1
A Vertex, Datum point, MeshNode, or Edge specifying the second entity to which to measure.
entity2
Optional arguments
None.
Return value
A Float specifying the distance between entity1 and entity2.
Exceptions
None.
getLength(...)
This method returns the length of a given edge or group of edges.
1929
Abaqus Scripting Reference Guide
Part object

Required arguments
A sequence of edge objects whose total length the method will calculate.
edges
Optional arguments
None.
Return value
A Float specifying the total length.
Exceptions
None.
getPerimeter(...)
This method returns the total perimeter of a given face or group of faces. All faces need to be on the same part. If the
speciﬁed faces have shared edges, these edges are excluded from the computation, thus providing the length of the
outer perimeter of the speciﬁed faces.
Required arguments
A sequence of face objects whose perimeter the method will calculate.
faces
Optional arguments
None.
Return value
A Float specifying the perimeter.
Exceptions
None.
getVolume(...)
This method returns the volume area of a given cell or group of cells.
Required arguments
A sequence of cell objects whose volume the method will calculate.
cells
Optional arguments
A Float specifying the relative accuracy of the computation. The default value is
0.000001 (0.0001%).
relativeAccuracy
Abaqus Scripting Reference Guide
1930
Part object

Return value
A Float specifying the sum of the areas of the given faces.
Exceptions
None.
getMassProperties(...)
This method returns the mass properties of a part or region. Only beams, trusses, shells, solids, point, nonstructural
mass, and rotary inertia elements are supported.
Required arguments
None.
Optional arguments
A MeshElementArray, CellArray, FaceArray, or EdgeArray specifying the regions whose
mass properties are to be queried. The whole part is queried by default.
regions
A SymbolicConstant specifying the relative accuracy for geometry computation. Possible
values are LOW, MEDIUM and HIGH. The default value is LOW.
relativeAccuracy
A Boolean specifying whether the mesh should be used in the computation if the geometry
is meshed. The default value is False.
useMesh
A Boolean specifying whether a user-speciﬁed density should be used in regions with
density errors such as undeﬁned material density. The default value is False.
specifyDensity
A double value specifying the user-speciﬁed density value to be used in regions with
density errors. The user-speciﬁed density should be greater than 0.
density
A Boolean specifying whether a user-speciﬁed thickness should be used in regions with
thickness errors such as undeﬁned thickness. The default value is False.
specifyThickness
A double value specifying the user-speciﬁed thickness value to be used in regions with
thickness errors. The user-speciﬁed thickness should be greater than 0.
thickness
A Boolean specifying if the moments of inertia should be evaluated about the center of
mass. The default value is True.
miAboutCenterOfMass
A tuple of three ﬂoats specifying the coordinates of the point about which to evaluate the
moment of inertia. By default if the moments of inertia are not being evaluated about the
center of mass, they will be evaluated about the origin.
miAboutPoint
Return value
A Dictionary object with the following items:
1931
Abaqus Scripting Reference Guide
Part object

area: None or a Float specifying the sum of the area of the speciﬁed faces. The area is computed only for one side for
shells.
areaCentroid: None or a tuple of three Floats representing the coordinates of the area centroid.
volume: None or a Float specifying the volume of the speciﬁed regions.
volumeCentroid: None or a tuple of three Floats representing the coordinates of the volume centroid.
massFromMassPerUnitSurfaceArea: None or a Float specifying the mass due to mass per unit surface area.
mass: None or a Float specifying the mass of the speciﬁed regions. It is the total mass and includes mass from quantities
such as mass per unit surface area.
centerOfMass: None or a tuple of three Floats representing the coordinates of the center of mass.
momentOfInertia: None or a tuple of six Floats representing the moments of inertia about the center of mass or about
the point speciﬁed.
warnings: A tuple of SymbolicConstants representing the problems encountered while computing the mass properties.
Possible SymbolicConstants are:
UNSUPPORTED_ENTITIES: Some unsupported entities exist in the speciﬁed region. The mass properties are computed
only for beams, trusses, shells, solids, point and nonstructural mass elements and rotary inertia elements. The mass
properties are not computed for axisymmetric elements, springs, connectors, gaskets or any other elements.
MISSING_THICKNESS: For some regions, the section deﬁnitions are missing thickness values.
ZERO_THICKNESS: For some regions, the section deﬁnitions have a zero thickness value.
VARIABLE_THICKNESS: The nodal thickness or ﬁeld thickness speciﬁed for some regions has been ignored.
NON_APPLICABLE_THICKNESS: For some regions, the thickness value is not applicable to the corresponding
sections speciﬁed on the regions.
MISSING_DENSITY: For some regions, the section deﬁnitions are missing material density values.
MISSING_MATERIAL_DEFINITION: For some regions, the material deﬁnition is missing.
ZERO_DENSITY: For some regions, the section deﬁnitions have a zero material density value.
UNSUPPORTED_DENSITY: For some regions, either a negative material density or a temperature-dependent density
has been speciﬁed, or the material value is missing for one or more plies in the composite section.
SHELL_OFFSETS: For shells, this method does not account for any offsets speciﬁed.
MISSING_SECTION_DEFINITION: For some regions, the section deﬁnition is missing.
UNSUPPORTED_SECTION_DEFINITION: The section deﬁnition provided for some regions is not supported.
REINFORCEMENTS: This method does not account for any reinforcements speciﬁed on the model.
SMEARED_PROPERTIES: For regions with composite section assignments, the density is smeared across the thickness.
The volume centroid and center of mass computations for a composite shell use a lumped mass approach where the
volume and mass is assumed to be lumped in the plane of the shell. As a result of these approximations the volume
centroid, center of mass and moments of inertia might be slightly inaccurate for regions with composite section
assignments.
UNSUPPORTED_NON_STRUCTURAL_MASS_ENTITIES: This method does not account for any nonstructural
mass on wires.
INCORRECT_MOMENT_OF_INERTIA: For geometry regions with non-structural mass per volume, the non-structural
mass is assumed to be a point mass at the centroid of the regions. Thus, the moments of inertia might be inaccurate as
the distribution of the non-structural mass is not accounted for. Use the mesh for accurately computing the moments
of inertia.
Abaqus Scripting Reference Guide
1932
Part object

MISSING_BEAM_ORIENTATIONS: For some regions with beam section assignments, the beam section orientations
are missing.
UNSUPPORTED_BEAM_PROFILES: This method supports the Box, Pipe, Circular, Rectangular, Hexagonal,
Trapezoidal, I, L, T, Arbitrary, and Tapered beam proﬁles. Any other beam proﬁle is not supported.
TAPERED_BEAM_MI: Moment of inertia calculations for tapered beams are not accurate.
SUBSTRUCTURE_INCORRECT_PROPERTIES: The user assigned density and thickness is not considered for
substructures.
UNSUPPORTED_NON_STRUCTURAL_MASS_PROPORTIONAL: Nonstructural mass with Mass Proportional
distribution is not supported. Results are computed using Volume Proportional distribution.
Exceptions
None.
getFeatureFaces(...)
This method returns a sequence of Face objects that are created by the given feature.
Required arguments
A string specifying the feature name.
name
Optional arguments
None.
Return value
Sequence of Face objects.
Exceptions
Error: Incorrect feature name.
An exception occurs if a feature with the given name does not exist.
getFeatureEdges(...)
This method returns a sequence of Edge objects that are created by the given feature.
Required arguments
A string specifying the feature name.
name
Optional arguments
None.
Return value
Sequence of Edge objects.
1933
Abaqus Scripting Reference Guide
Part object

Exceptions
Error: Incorrect feature name.
An exception occurs if a feature with the given name does not exist.
getFeatureCells(...)
This method returns a sequence of Cell objects that are created by the given feature.
Required arguments
A string specifying the feature name.
name
Optional arguments
None.
Return value
Sequence of Cell objects.
Exceptions
Error: Incorrect feature name.
An exception occurs if a feature with the given name does not exist.
getFeatureVertices(...)
This method returns a sequence of Vertex objects that are created by the given feature.
Required arguments
A string specifying the feature name.
name
Optional arguments
None.
Return value
Sequence of Vertex objects.
Exceptions
Error: Incorrect feature name.
An exception occurs if a feature with the given name does not exist.
isAlignedWithSketch()
This method checks if the normal of an analytical rigid surface part is aligned with that of its sketch.
Abaqus Scripting Reference Guide
1934
Part object

Arguments
None.
Return value
A Boolean value of True if the part is aligned with the sketch and False if it is not aligned.
Exceptions
AbaqusException: Can only be used with analytical rigid parts.
If the part is not an analytical rigid part:
printAssignedSections()
This method prints information on each section that has been assigned to a region of the part.
Arguments
None.
Return value
None.
Exceptions
None.
projectEdgesOntoSketch(...)
This method projects the selected edges of a part onto the speciﬁed ConstrainedSketch object. The edges appear as
sketch geometry after projection. If the plane of projection is not parallel to the speciﬁed edge, the resultant sketch
geometry might be of a different type. For example, a circular edge can be projected as an ellipse or a line depending
on the angle of the plane of projection. By default, the projected edge will be constrained to the background geometry.
You can remove this constraint by setting constrainToBackground to False.
Required arguments
The ConstrainedSketch object on which the edges are projected.
sketch
A sequence of candidate edges to be projected onto the sketch.
edges
Optional arguments
A Boolean that determines whether the projected edges need to be constrained
to the background geometry. The default is True.
constrainToBackground
Return value
None.
1935
Abaqus Scripting Reference Guide
Part object

Exceptions
None.
projectReferencesOntoSketch(...)
This method projects the vertices of speciﬁed edges, and datum points from the part onto the speciﬁed ConstrainedSketch
object. The vertices and datum points appear on the sketch as reference geometry.
Required arguments
The ConstrainedSketch object on which the edges, vertices, and datum points are projected.
sketch
Optional arguments
A SymbolicConstant specifying how to limit the amount of projection. Possible values are
ALL_EDGES and COPLANAR_EDGES. If ﬁlter=COPLANAR_EDGES, edges that are coplanar
to the sketching plane are the only candidates for projection. The default value is ALL_EDGES.
ﬁlter
A Feature object specifying a marker in the feature-based history of the part. Abaqus/CAE projects
onto the sketch only the part entities that were created before the feature speciﬁed by this marker.
upToFeature
By default, part entities in features created before the sketch you are editing are candidates for
projection.
A sequence of candidate edges whose vertices need to be projected onto the sketch. By default,
all edges speciﬁed by the ﬁlter argument are candidates for projection.
edges
A sequence of candidate vertices to be projected onto the sketch. By default, all vertices are
candidates for projection.
vertices
Return value
None.
Exceptions
None.
queryAttributes(...)
This method prints the following information about a part:
•
the name, modeling space, and analysis type; and
•
whether twist is included (available only when the modeling space is axisymmetric and the analysis type is
deformable); and
•
the number of vertices, edges, faces, and cells if applicable.
Required arguments
None.
Abaqus Scripting Reference Guide
1936
Part object

Optional arguments
A Boolean that speciﬁes whether the above information is to be printed. The default
value is True
printResults
Return value
A Dictionary object with string keys and integer values that returns the above information with the keys being
numVertices, numEdges, numFaces, numCells, numWiredEdges, numShellFaces, and numSolidFaces.
Exceptions
None.
queryCachedStates()
This method displays the position of geometric states relative to the sequence of features in the part cache. The output
is displayed in the message area.
Arguments
None.
Return value
None.
Exceptions
None.
queryGeometry(...)
This method prints the following information about a part:
•
the name, modeling space, and analysis type;
•
whether twist is included (available only when the modeling space is axisymmetric and the analysis type is
deformable);
•
a 3D point representing the minimum of the part's bounding box;
•
a 3D point representing the maximum of the part's bounding box;
•
a 3D point representing the part's centroid (only on 3D solid parts); and
•
the volume (only on 3D solid parts).
Required arguments
None.
Optional arguments
A Float specifying that the property computations should stop when the speciﬁed relative
accuracy has been achieved. The default value is 0.000001 (0.0001%).
relativeAccuracy
1937
Abaqus Scripting Reference Guide
Part object

A Boolean that speciﬁes whether the above information is to be printed. The default
value is True.
printResults
Return value
A Dictionary object with string keys, which returns the above information with the keys being name, space, type,
volume, centroid, category and boundingBox.
Exceptions
None.
queryRegionsMissingSections()
This method returns all regions in the part that do not have a section assignment but require one for analysis.
Arguments
None.
Return value
A Region object, or None.
Exceptions
None.
queryDisjointPlyRegions()
This method provides a list of all composite plys in the current part that have disjoint regions.
Arguments
None.
Return value
None.
Exceptions
None.
regenerate()
This method regenerates a part. When you modify features, it might be convenient to postpone regeneration until you
make all your changes, since regeneration can be time consuming.
Arguments
None.
Abaqus Scripting Reference Guide
1938
Part object

Return value
None.
Exceptions
None.
regenerationWarnings()
This method prints any regeneration warnings associated with the features.
Arguments
None.
Return value
None.
Exceptions
None.
removeInvalidGeometry()
Removes all invalid entities from the part, leaving a valid part. This is not recorded as a feature in the feature list,
therefore it should be used on parts that have a single feature (such as an imported part).
Note:
This might remove valid entities that are connected to invalid ones. You can identify invalid entities using the
query toolset before using this command.
Arguments
None.
Return value
None.
Exceptions
None.
restore()
This method restores the parameters of all features in the assembly to the value they had before a failed regeneration.
Use the restore method after a failed regeneration, followed by a regenerate command.
Arguments
None.
1939
Abaqus Scripting Reference Guide
Part object

Return value
None.
Exceptions
None.
resumeAllFeatures()
This method resumes all the suppressed features in the part.
Arguments
None.
Return value
None.
Exceptions
None.
resumeFeatures(...)
This method resumes the speciﬁed suppressed features in the part.
Required arguments
A tuple of names of features that are to be resumed.
featureNames
Optional arguments
None.
Return value
None.
Exceptions
None.
resumeLastSetFeatures()
This method resumes the last set of features to be suppressed in the part.
Arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
1940
Part object

Exceptions
None.
saveGeometryCache()
This method caches the current geometry. Caching the current geometry improves regeneration performance.
Arguments
None.
Return value
None.
Exceptions
None.
setAssociatedCADPaths(...)
This method sets the paths to the associated CAD part and root ﬁle. This method is available only if the part was
imported from one of the supported CAD softwares using the Associative Import capability. The root ﬁle can be the
assembly ﬁle or the part ﬁle, depending on the one that was imported. This method can be used to specify the new
paths when the CAD data is moved to a different directory.
Required arguments
None.
Optional arguments
A String specifying the name of the associated CAD part ﬁle.
partFile
A String specifying the name of the root associated CAD ﬁle. This can be the same as the
part ﬁle or can be the assembly ﬁle, depending on the one that was imported.
rootFile
Return value
None.
Exceptions
None.
suppressFeatures(...)
This method suppresses the given features.
Required arguments
A tuple of names of features that are to be suppressed in the part.
featureNames
1941
Abaqus Scripting Reference Guide
Part object

Optional arguments
None.
Return value
None.
Exceptions
None.
writeAcisFile(...)
This method exports the geometry of the part to a named ﬁle in ACIS format.
Required arguments
A String specifying the name of the ﬁle to which to write.
ﬁleName
Optional arguments
A Float specifying the ACIS version. For example, the Float “12.0” corresponds to ACIS Version
12.0. The default value is the current version of ACIS.
version
Return value
None.
Exceptions
Cannot export orphan mesh parts to ACIS.
If the part is an orphan mesh part:
writeCADParameters(...)
This method writes the parameters that were imported from the CAD system to a parameter ﬁle.
Required arguments
A String specifying the parameter ﬁle name.
paramFile
Optional arguments
A tuple of tuples each containing the part name, the parameter name, and the modiﬁed
parameter value. Default is an empty tuple.
modiﬁedParams
A Bool specifying whether to update the path of the CAD model ﬁle speciﬁed in the
parameterFile to the current directory, if the CAD model is present in the current directory.
updatePaths
Abaqus Scripting Reference Guide
1942
Part object

Return value
None.
Exceptions
None.
writeIgesFile(...)
This method exports the geometry of the part to a named ﬁle in IGES format.
Required arguments
A String specifying the name of the ﬁle to which to write.
ﬁleName
A SymbolicConstant specifying a particular ﬂavor of IGES. Possible values are STANDARD,
AUTOCAD, SOLIDWORKS, JAMA, and MSBO.
ﬂavor
Optional arguments
None.
Return value
None.
Exceptions
Cannot export orphan mesh parts to IGES.
If the part is an orphan mesh part:
writeStepFile(...)
This method exports the geometry of the part to a named ﬁle in STEP format.
Required arguments
A String specifying the name of the ﬁle to which to write.
ﬁleName
Optional arguments
None.
Return value
None.
Exceptions
Parterror: Cannot export orphan mesh parts to STEP.
If the part contains no geometry:
1943
Abaqus Scripting Reference Guide
Part object

writeVdaFile(...)
This method exports the geometry of the part to a named ﬁle in VDA-FS format.
Required arguments
A String specifying the name of the ﬁle to which to write.
ﬁleName
Optional arguments
None.
Return value
None.
Exceptions
Cannot export orphan mesh parts to VDA-FS.
If the part is an orphan mesh part:
copyMeshPattern(...)
This method copies a mesh pattern from a source region consisting of a set of shell elements or element faces onto a
target face, mapping nodes and elements in a one-one correspondence between source and target.
Required arguments
None.
Optional arguments
A sequence of MeshElement objects or a Set object containing elements and specifying the
source region.
elements
A sequence of Face objects that have associated with shell elements or element faces and
specifying the source region.
faces
A sequence of MeshFace objects specifying the source region.
elemFaces
A MeshFace object specifying the target region.
targetFace
A sequence of MeshNode objects or a Set object containing nodes on the boundary of source
region that are to be positioned to the boundary of target face.
nodes
A sequence of three-dimensional coordinate tuples specifying the coordinates for each of the
given nodes. When speciﬁed, the number of coordinate tuples must match the number of given
coordinates
nodes, and be ordered to correspond to the given nodes in ascending order according to index.
These coordinates are positions of the nodes of a mesh that will be the target face corresponding
to nodes provided.
Abaqus Scripting Reference Guide
1944
Part object

Return value
None.
Exceptions
None.
smoothNodes(...)
This method smooths the given nodes of a native mesh, moving them locally to a more optimal location that improves
the quality of the mesh
Required arguments
A sequence of MeshNode objects or a Set object containing nodes.
nodes
Optional arguments
None.
Return value
None.
Exceptions
None.
Lock()
This method locks the part. Locking the part prevents any further changes to the part that can trigger regeneration of
the part.
Arguments
None.
Return value
None.
Exceptions
None.
Unlock()
This method unlocks the part. Unlocking the part allows it to be regenerated after any modiﬁcations to the part.
Arguments
None.
Return value
None.
1945
Abaqus Scripting Reference Guide
Part object

Exceptions
None.
LockForUpgrade()
This method locks the part for upgrade. Locking the part prevents any further changes to the part that can trigger
regeneration of the part. When the part is unlocked, all the parts are upgraded and regenrated.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Part object has members with the same names and descriptions as the arguments to the Part method.
In addition, the Part object can have the following members:
A Boolean specifying the validity of the geometry of the part. The value is computed,
but it can be set to ON to perform feature and mesh operations on an invalid part. There
is no guarantee that such operations will work if the part was originally invalid.
geometryValidity
An Int specifying that feature parameters have been modiﬁed but that the part has not
been regenerated. Possible values are 0 and 1.
isOutOfDate
A Float specifying when the part was last modiﬁed.
timeStamp
A VertexArray object specifying all the vertices in the part.
vertices
An IgnoredVertexArray object specifying all the ignored vertices in the part.
ignoredVertices
An EdgeArray object specifying all the edges in the part.
edges
An IgnoredEdgeArray object specifying all the ignored edges in the part.
ignoredEdges
A FaceArray object specifying all the faces in the part.
faces
A CellArray object specifying all the cells in the part.
cells
A repository of Feature objects specifying all the features in the part.
features
A repository of Feature objects specifying all Feature objects in the part. The Feature
objects in the featuresById repository are the same as the Feature objects in the features
featuresById
Abaqus Scripting Reference Guide
1946
Part object

repository. However, the key to the objects in the featuresById repository is an integer
specifying the ID, whereas the key to the objects in the features repository is a string
specifying the name.
A repository of Datum objects specifying all the datums in the part.
datums
A MeshElementArray object specifying all the elements in the part.
elements
A repository of MeshFace objects specifying all the element faces in the part. For a
given element and a given face index within that element, the corresponding MeshFace
elemFaces
object can be retrieved from the repository by using the key calculated as (i*8 + j),
where i and j are zero-based element and face indices, respectively.
A MeshFaceArray object specifying all the unique element faces in the part.
elementFaces
A MeshNodeArray object specifying all the nodes in the part.
nodes
A MeshNodeArray object specifying all the retained nodes in the substructure part.
retainedNodes
A repository of Set objects specifying for more information, see Set.
sets
A repository of Set objects specifying the contents of the allSets repository is the same
as the contents of the sets repository.
allSets
A repository of Set objects specifying picked regions.
allInternalSets
A repository of Surface objects specifying for more information, see Surface.
surfaces
A repository of Surface objects specifying the contents of the allSurfaces repository is
the same as the contents of the surfaces repository.
allSurfaces
A repository of Surface objects specifying picked regions.
allInternalSurfaces
A repository of Skin objects specifying the skins created on the part.
skins
A repository of Stringer objects specifying the stringers created on the part.
stringers
A repository of ReferencePoint objects.
referencePoints
An EngineeringFeature object.
engineeringFeatures
A SectionAssignmentArray object.
sectionAssignments
A MaterialOrientationArray object.
materialOrientations
A repository of CompositeLayup objects.
compositeLayups
1947
Abaqus Scripting Reference Guide
Part object

A repository of MeshEdge objects specifying all the element edges in the part. For a
given element and a given edge index on a given face within that element, the
elemEdges
corresponding MeshEdge object can be retrieved from the repository by using the key
calculated as (i*32 + j*4 + k), where i, j, and k are zero-based element, face, and edge
indices, respectively.
A MeshEdgeArray object specifying all the unique element edges in the part.
elementEdges
Abaqus Scripting Reference Guide
1948
Part object

Feature object
The following commands operate on Feature objects. For more information about the Feature object, see Feature
object.
Access
import part
AutoRepair()
This method carries out a sequence of geometry repair operations if it contains invalid entities. It is expected to improve
the geometry, but it does not guarantee that the number of invalid entities will decrease. In some cases, it can also
increase the number of invalid entities. Since a number of geometry repair operations and validity checks are performed,
it could be a slow operation depending on the complexity of the geometry.
Path
mdb.models[name].parts[name].AutoRepair
Arguments
None.
Return value
A Feature object.
Exceptions
None.
AddCells(...)
This method tries to convert a shell entity to a solid entity. The conversion is not always successful.
Path
mdb.models[name].parts[name].AddCells
Required arguments
A sequence of Face objects specifying the faces bounding the cell to add.
faceList
Optional arguments
A Boolean specifying the direction of feature creation. The possible values are True and False. The
default is True indicating that the direction is opposite to the face normal. When multiple faces are
ﬂipped
selected, Abaqus attempts to create cells on both sides of the selected faces and ignores the ﬂipped
argument.
1949
Feature object

Return value
A Feature object.
Exceptions
None.
AnalyticRigidSurf2DPlanar(...)
This method creates a ﬁrst Feature object for an analytical rigid surface by creating a planar wire from the given
ConstrainedSketch object.
Path
mdb.models[name].parts[name].AnalyticRigidSurf2DPlanar
Required arguments
A ConstrainedSketch object specifying the planar wire.
sketch
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
AnalyticRigidSurfExtrude(...)
This method creates a ﬁrst Feature object for an analytical rigid surface by extruding the given ConstrainedSketch
object by the given depth, creating a surface.
Path
mdb.models[name].parts[name].AnalyticRigidSurfExtrude
Required arguments
A ConstrainedSketch object specifying the planar wire.
sketch
Optional arguments
A Float specifying the extrusion depth. The default value is 1.0.
depth
Return value
A Feature object.
Abaqus Scripting Reference Guide
1950
Feature object

Exceptions
None.
AnalyticRigidSurfRevolve(...)
This method creates a ﬁrst Feature object for an analytical rigid surface by revolving the given ConstrainedSketch
object by 360° about the Y-axis.
Path
mdb.models[name].parts[name].AnalyticRigidSurfRevolve
Required arguments
A ConstrainedSketch object specifying the surface to be revolved.
sketch
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
AssignMidsurfaceRegion(...)
This method assign a mid-surface property to sequence of Cell objects. If a reference representation of the part does
not exist, it creates one. It also copies the cells to the reference representation and deletes the cells from the active
representation of the part.
Path
mdb.models[name].parts[name].AssignMidsurfaceRegion
Required arguments
A sequence of Cell objects specifying the regions that will be used for mid-surface construction.
These regions will be copied to the reference representation of the part.
cellList
Optional arguments
None.
Return value
A Feature object.
1951
Abaqus Scripting Reference Guide
Feature object

Exceptions
None.
BaseSolidExtrude(...)
This method creates a ﬁrst Feature object by extruding the given ConstrainedSketch object by the given depth, creating
a solid. The ConstrainedSketch object must deﬁne a closed proﬁle.
Path
mdb.models[name].parts[name].BaseSolidExtrude
Required arguments
A ConstrainedSketch object specifying the plane shape to be extruded.
sketch
A Float specifying the extrusion depth. Possible values are 10–5 depth  105.
depth
Optional arguments
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0. By
convention, for a positive draft angle an outer loop will draft outward and an inner loop will draft
draftAngle
inward. The opposite is true for a negative draft angle. The default value, 0, implies a normal extrude.
The arguments draftAngle and pitch are mutually exclusive.
A Float specifying the pitch. The pitch is the distance traveled along the axial direction by the sketch
when the sketch has completed one full revolution about the twist axis. Pitch can be speciﬁed as positive
pitch
or negative to achieve right-handed or left-handed twist about the twist axis, respectively. The default
value, 0, implies a normal extrude. Possible values are –105 pitch  105. The arguments draftAngle
and pitch are mutually exclusive.
Return value
A Feature object.
Exceptions
RangeError.
BaseSolidRevolve(...)
This method creates a ﬁrst Feature object by revolving the given ConstrainedSketch object by the given angle, creating
a solid. The ConstrainedSketch object must deﬁne a closed proﬁle and an axis of revolution. The axis is deﬁned by a
single construction line.
Path
mdb.models[name].parts[name].BaseSolidRevolve
Abaqus Scripting Reference Guide
1952
Feature object

Required arguments
A ConstrainedSketch object specifying the shape to be revolved.
sketch
A Float specifying the revolve angle in degrees. Possible values are 10–4 angle  360.
angle
Note:
If pitch 0, there is no upper limit for angle.
Optional arguments
A Float specifying the pitch. The pitch is the distance traveled along the axial direction,
measured between corresponding points on the sketch when it has completed one full
pitch
revolution about the axis of revolution. Possible values are 0 pitch  105. The default
value, 0, implies a normal revolve.
A Boolean specifying whether to override the direction of feature creation. If
ﬂipRevolveDirection=OFF, the default direction of revolution is used. If
ﬂipRevolveDirection=ON, the revolve direction is reversed. The default value is OFF.
ﬂipRevolveDirection
A Boolean specifying whether to override the direction of translation. If
ﬂipPitchDirection=OFF, the direction of translation is given by the direction of the revolve
ﬂipPitchDirection
axis. If ﬂipPitchDirection=ON, the translation direction is reversed. The default value is
OFF.
A Boolean specifying whether to rotate the sketch so that it is normal to the path of
revolution when using the pitch option. If moveSketchNormalToPath=OFF, the sketch
moveSketchNormalToPath
plane remains parallel to the revolve axis. If moveSketchNormalToPath=ON, the sketch
is moved to match the angle created by the pitch before being revolved. The default value
is OFF.
Return value
A Feature object.
Exceptions
RangeError.
BaseSolidSweep(...)
This method creates a ﬁrst Feature object by sweeping the given proﬁle ConstrainedSketch object along the path
deﬁned by the path ConstrainedSketch object, creating a solid. The proﬁle ConstrainedSketch object must deﬁne a
closed proﬁle. The origin of the proﬁle sketch is positioned at the start of the sweep path and swept perpendicular to
the path. No checks are made for self-intersection.
Path
mdb.models[name].parts[name].BaseSolidSweep
1953
Abaqus Scripting Reference Guide
Feature object

Required arguments
A ConstrainedSketch object specifying the proﬁle to be swept.
sketch
A ConstrainedSketch object specifying the path of the sweep.
path
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
BaseShell(...)
This method creates a ﬁrst Feature object by creating a planar shell from the given ConstrainedSketch object. The
ConstrainedSketch object must deﬁne a closed proﬁle.
Path
mdb.models[name].parts[name].BaseShell
Required arguments
A ConstrainedSketch object specifying the planar shell.
sketch
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
BaseShellExtrude(...)
This method creates a ﬁrst Feature object by extruding the given ConstrainedSketch object by the given depth, creating
a shell. The ConstrainedSketch object can deﬁne either an open or closed proﬁle.
Path
mdb.models[name].parts[name].BaseShellExtrude
Abaqus Scripting Reference Guide
1954
Feature object

Required arguments
A ConstrainedSketch object specifying the shape to be extruded.
sketch
A Float specifying the extrusion depth. Possible values are Floats > 0.
depth
Optional arguments
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0. By
convention, for a positive draft angle an outer loop will draft outward and an inner loop will draft
draftAngle
inward. The opposite is true for a negative draft angle. The default value, 0, implies a normal extrude.
The arguments draftAngle and pitch are mutually exclusive.
A Float specifying the pitch. The pitch is the distance traveled along the axial direction by the sketch
when the sketch has completed one full revolution about the twist axis. Pitch can be speciﬁed as positive
pitch
or negative to achieve right-handed or left-handed twist about the twist axis, respectively. The default
value, 0, implies a normal extrude. Possible values are –105 pitch  105. The arguments draftAngle
and pitch are mutually exclusive.
Return value
A Feature object.
Exceptions
RangeError.
BaseShellRevolve(...)
This method creates a ﬁrst Feature object by revolving the given ConstrainedSketch object by the given angle, creating
a shell. The ConstrainedSketch object can deﬁne either an open or closed proﬁle and an axis of revolution. The axis
is deﬁned by a single construction line.
Path
mdb.models[name].parts[name].BaseShellRevolve
Required arguments
A ConstrainedSketch object specifying the shape to be revolved.
sketch
A Float specifying the revolve angle in degrees. Possible values are 0 angle  360.
angle
Note:
If pitch  0, there is no upper limit for angle.
1955
Abaqus Scripting Reference Guide
Feature object

Optional arguments
A Float specifying the pitch. The pitch is the distance traveled along the axial direction,
measured between corresponding points on the sketch when it has completed one full
pitch
revolution about the axis of revolution. Possible values are 0 pitch  105. The default
value, 0, implies a normal revolve.
A Boolean specifying whether to override the direction of feature creation. If
ﬂipRevolveDirection=OFF, the default direction of revolution is used. If
ﬂipRevolveDirection=ON, the revolve direction is reversed. The default value is OFF.
ﬂipRevolveDirection
A Boolean specifying whether to override the direction of translation. If
ﬂipPitchDirection=OFF, the direction of translation is given by the direction of the revolve
ﬂipPitchDirection
axis. If ﬂipPitchDirection=ON, the translation direction is reversed. The default value is
OFF.
A Boolean specifying whether to rotate the sketch so that it is normal to the path of
revolution when using the pitch option. If moveSketchNormalToPath=OFF, the sketch
moveSketchNormalToPath
plane remains parallel to the revolve axis. If moveSketchNormalToPath=ON, the sketch
is moved to match the angle created by the pitch before being revolved. The default value
is OFF.
Return value
A Feature object.
Exceptions
None.
BaseShellSweep(...)
This method creates a ﬁrst Feature object by sweeping the given section ConstrainedSketch object along the path
deﬁned by the path ConstrainedSketch object, creating a shell. The ConstrainedSketch object can deﬁne either an open
or closed proﬁle. The origin of the proﬁle sketch is positioned at the start of the sweep path and swept perpendicular
to the path. No checks are made for self-intersection.
Path
mdb.models[name].parts[name].BaseShellSweep
Required arguments
A ConstrainedSketch object specifying the section to be swept.
sketch
A ConstrainedSketch object specifying the path of the sweep.
path
Optional arguments
None.
Abaqus Scripting Reference Guide
1956
Feature object

Return value
A Feature object.
Exceptions
None.
BaseWire(...)
This method creates a ﬁrst Feature object by creating a planar wire from the given ConstrainedSketch object.
Path
mdb.models[name].parts[name].BaseWire
Required arguments
A ConstrainedSketch object specifying the planar wire.
sketch
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
BlendFaces(...)
This method creates a Feature object by creating new faces that blends two sets of faces.
Path
mdb.models[name].parts[name].BlendFaces
Required arguments
A sequence of Edge objects specifying one side of the blend. The edges must form a continuous
chain without branches.
side1
A sequence of Edge or Face objects specifying the second side of the blend. If side2 contains
Edge objects then they must form a continuous chain without branches.
side2
1957
Abaqus Scripting Reference Guide
Feature object

Optional arguments
A SymbolicConstant indicating a method for creating blends. This argument is a required argument if
side2 contains Edge object and it is ignored if side2 contains Faceobjects. It can have one of the
following values:
method
•
TANGENT: The blend is tangent to the sides.
•
SHORTEST_PATH: The blend connects the two sides based on linear interpolation between the
two sides.
•
SPECIFY_PATH: The blend connects the two sides along a speciﬁed path.
An Edge object that connects side1 to side2 and speciﬁes the path for creating the blend. This argument
is required if method=SPECIFY_PATH; otherwise, it is ignored.
path
Return value
A Feature object.
Exceptions
None.
Chamfer(...)
This method creates an additional Feature object by chamfering the given list of edges with a given length.
Path
mdb.models[name].parts[name].Chamfer
Required arguments
A Float specifying the length of the chamfer.
length
A sequence of Edge objects specifying the edges to chamfer.
edgeList
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
Mirror(...)
This method mirrors existing part geometry across a plane to create new geometry.
Abaqus Scripting Reference Guide
1958
Feature object

Path
mdb.models[name].parts[name].Mirror
Required arguments
A Datum plane object or a planar Face object.
mirrorPlane
A boolean specifying whether or not the original part geometry should be retained.
keepOriginal
Optional arguments
A Boolean specifying whether internal boundaries will be retained. The
default value is OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
ConvertToAnalytical()
This method attempts to change entities into a simpler form that will speed up processing and make entities available
during feature operations.
Path
mdb.models[name].parts[name].ConvertToAnalytical
Arguments
None.
Return value
A Feature object.
Exceptions
None.
ConvertToPrecise(...)
This method attempts to change imprecise entities so that the geometry becomes precise.
Path
mdb.models[name].parts[name].ConvertToPrecise
1959
Abaqus Scripting Reference Guide
Feature object

Required arguments
None.
Optional arguments
A SymbolicConstant specifying the method to be used to convert the part to precise. Possible
values are RECOMPUTE_GEOMETRY and TIGHTEN_GAPS. The default value is
RECOMPUTE_GEOMETRY.
method
Return value
A Feature object.
Exceptions
None.
CoverEdges(...)
This method generates a face using the given edges as the face's boundaries. The CoverEdges method generates a face
by creating the geometry consisting of the underlying surface, associated edges, and vertices.
Path
mdb.models[name].parts[name].CoverEdges
Required arguments
A sequence of Edge objects specifying the edges that bound the new face.
edgeList
Optional arguments
A Boolean specifying whether the newly created face should be analytical or not. The
default is False.
tryAnalytical
Return value
A Feature object.
Exceptions
Parterror: Cannot ﬁnd a closed loop
If the given boundary is not a closed loop:
Parterror: Cannot ﬁnd a closed loop
If the given boundary contains a zero length component:
Parterror: Cannot construct face geometry
If the underlying surface is too difﬁcult to ﬁt:
Abaqus Scripting Reference Guide
1960
Feature object

Cut(...)
This method creates an additional Feature object by cutting a hole using the given ConstrainedSketch object.
Path
mdb.models[name].parts[name].Cut
Required arguments
A Datum plane object or a planar Face object.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A ConstrainedSketch object specifying the planar cut.
sketch
Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch.
Possible values are RIGHT, LEFT, TOP, and BOTTOM.
sketchOrientation
Return value
A Feature object.
Exceptions
None.
CutExtrude(...)
This method creates an additional Feature object by extruding the given ConstrainedSketch object by the given depth
and cutting away material in the solid and shell regions of the part. The ConstrainedSketch object must deﬁne a closed
proﬁle. The CutExtrude method creates a blind cut (using depth), an up-to-face cut (using upToFace), or a through-all
cut (if depth and upToFace are not speciﬁed).
Path
mdb.models[name].parts[name].CutExtrude
Required arguments
A Datum plane object or a planar Face object.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
1961
Abaqus Scripting Reference Guide
Feature object

An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch.
Possible values are RIGHT, LEFT, TOP, and BOTTOM.
sketchOrientation
A ConstrainedSketch object specifying the planar sketch to be extruded.
sketch
Optional arguments
A Float specifying the extrusion depth. If depth is speciﬁed, the cut will be a blind cut. The
default is to not specify a depth.
depth
A Face specifying the face up to which to cut. If upToFace is speciﬁed, the cut will be an
up-to-face cut. The default is to not specify a face.
upToFace
Note:
If neither depth nor upToFace is speciﬁed, the cut will be a through-all cut.
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0. By
convention, for a positive draft angle an outer loop will draft outward and an inner loop will
draftAngle
draft inward. The opposite is true for a negative draft angle. The default value, 0, implies a
normal extrude. The arguments draftAngle and pitch are mutually exclusive.
A Float specifying the pitch. The pitch is the distance traveled along the axial direction by the
sketch when the sketch has completed one full revolution about the twist axis. Pitch can be
pitch
speciﬁed as positive or negative to achieve right-handed or left-handed twist about the twist
axis, respectively. The default value, 0, implies a normal extrude. Possible values are
–105 pitch  105. The arguments draftAngle and pitch are mutually exclusive.
A Boolean specifying whether to override the direction of feature creation. If the value is OFF,
it means use the direction deﬁned by the sketchPlaneSide; if the value is ON, it means use the
opposite direction to the one deﬁned by sketchPlaneSide. The default value is OFF.
ﬂipExtrudeDirection
Return value
A Feature object.
Exceptions
None.
CutLoft(...)
This method creates an additional Feature object by lofting between the given sections and cutting away material from
the part. You deﬁne the sections using a sequence of edges from the part or an EdgeArray.
Abaqus Scripting Reference Guide
1962
Feature object

Path
mdb.models[name].parts[name].CutLoft
Required arguments
A sequence of sequences of edges specifying the cross-sections to be lofted. Each outer sequence
speciﬁes a section through which the method will pass the loft feature. Each outer sequence can
loftsections
be deﬁned as a sequence of edges or as an EdgeArray. The edges specifying a section must form
a simple closed proﬁle and must not contain multiple loops.
Optional arguments
A SymbolicConstant specifying the tangent direction at the start section of the loft feature.
Possible values are NONE, NORMAL, RADIAL, and SPECIFIED. You can specify this
startCondition
argument only if the start and end sections are planar. You cannot use this argument in
conjunction with the path argument. You must use the startCondition argument in conjunction
with the endCondition argument.
A SymbolicConstant specifying the tangent direction at the end section of the loft feature.
Possible values are NONE, NORMAL, RADIAL, and SPECIFIED. You can specify this
endCondition
argument only if the start and end sections are planar. You cannot use this argument in
conjunction with the path argument. You must use the endCondition argument in conjunction
with the startCondition argument.
A Float specifying the angle in degrees of the tangent with respect to the plane in which the
start section lies. You must specify the startTangent argument if startCondition=SPECIFIED.
Possible values are 0.0 startTangent  180.0.
startTangent
A Float specifying the magnitude of the startTangent. You must specify the startMagnitude
argument if startCondition=SPECIFIED. Possible values are 0.0 startMagnitude  100.0.
startMagnitude
A Float specifying the angle in degrees of the tangent with respect to the plane in which the
end section lies. You must specify the endTangent argument if startCondition=SPECIFIED.
Possible values are 0.0 endTangent  180.0.
endTangent
A Float specifying the magnitude of the endTangent. This argument is to be used when the
endCondition argument has the value SPECIFIED. Possible values are 0.0 endMagnitude
100.0.
endMagnitude
A Boolean specifying whether each path deﬁned in the paths argument is applied locally or
globally.
globalSmoothing
•
If the path is applied locally, its effect is felt only on faces created from the edges on the
loftSections through which the paths pass through.
•
If the path is applied globally, an averaging algorithm is applied over all the paths deﬁned
and is distributed over all the faces created.
The default value is ON (globally).
1963
Abaqus Scripting Reference Guide
Feature object

Return value
A Feature object.
Exceptions
None.
CutRevolve(...)
This method creates an additional Feature object by revolving the given ConstrainedSketch object by the given angle
and cutting away material from the part. The ConstrainedSketch object must deﬁne a closed proﬁle and an axis of
revolution.
Path
mdb.models[name].parts[name].CutRevolve
Required arguments
A Datum plane object or a planar Face object.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch.
Possible values are RIGHT, LEFT, TOP, and BOTTOM.
sketchOrientation
A ConstrainedSketch object specifying the planar sketch to be revolved.
sketch
A Float specifying the angle in degrees to be revolved.
angle
Optional arguments
A Float specifying the pitch. The pitch is the distance traveled along the axial direction,
measured between corresponding points on the sketch when it has completed one full
pitch
revolution about the axis of revolution. Possible values are 0 pitch  105. The default
value, 0, implies a normal revolve.
A Boolean specifying whether to override the direction of feature creation. If
ﬂipRevolveDirection=OFF, the default direction of revolution is used. If
ﬂipRevolveDirection=ON, the revolve direction is reversed. The default value is OFF.
ﬂipRevolveDirection
A Boolean specifying whether to override the direction of translation. If
ﬂipPitchDirection=OFF, the direction of translation is given by the direction of the revolve
ﬂipPitchDirection
axis. If ﬂipPitchDirection=ON, the translation direction is reversed. The default value is
OFF.
Abaqus Scripting Reference Guide
1964
Feature object

A Boolean specifying whether to rotate the sketch so that it is normal to the path of
revolution when using the pitch option. If moveSketchNormalToPath=OFF, the sketch
moveSketchNormalToPath
plane remains parallel to the revolve axis. If moveSketchNormalToPath=ON, the sketch
is moved to match the angle created by the pitch before being revolved. The default value
is OFF.
Return value
A Feature object.
Exceptions
None.
CutSweep(...)
This method creates an additional Feature object by sweeping the given ConstrainedSketch object along a path which
may be a ConstrainedSketch or a sequence of Edge objects and cutting away material from the part. If the proﬁle
section is a ConstrainedSketch object, it must deﬁne a closed proﬁle. The section sketch can be created at the normal
plane at the start of the sweep path or it may be created on a Datum plane or a planar Face. No checks are made for
self-intersection.
Path
mdb.models[name].parts[name].CutSweep
Required arguments
Path may either be a ConstrainedSketch object or a sequence of Edge objects specifying the
path of the sweep.
path
Proﬁle may either be a ConstrainedSketch object or a Face object specifying the section to be
swept.
proﬁle
Optional arguments
A Datum plane object or a planar Face object. Only required when path is a ConstrainedSketch
object.
pathPlane
An Edge object or a Datum axis object specifying the vertical (Y) direction of the path sketch.
Only required when path is a ConstrainedSketch object.
pathUpEdge
A SymbolicConstant specifying the orientation of pathUpEdge on the sketch. Possible values
are RIGHT, LEFT, TOP, and BOTTOM. Default value is RIGHT. Only required when path is
a ConstrainedSketch object.
pathOrientation
A Datum plane object or a planar Face object specifying the plane on which to sketch the
proﬁle. Not required when proﬁle is a Face object. When proﬁle is chosen as a
sketchPlane
ConstrainedSketch object, user may or may not give this as input. If user does not give this as
input, the normal plane at the start of the path will be the sketchPlane.
1965
Abaqus Scripting Reference Guide
Feature object

An Edge object or a Datum axis object specifying the vertical (Y) direction of the proﬁle sketch.
Only required when proﬁle is a ConstrainedSketch object.
sketchUpEdge
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible values
are RIGHT, LEFT, TOP, and BOTTOM. Default value is RIGHT. Only required when proﬁle
is a ConstrainedSketch object.
sketchOrientation
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0. By
convention, for a positive draft angle an outer loop will draft outward and an inner loop will
draftAngle
draft inward. The opposite is true for a negative draft angle. The default value, 0, implies a
normal extrude. The arguments draftAngle and pitch are mutually exclusive.
A Float specifying the pitch. The pitch is the distance traveled along the axial direction by the
sketch when the sketch has completed one full revolution about the twist axis. Pitch can be
pitch
speciﬁed as positive or negative to achieve right-handed or left-handed twist about the twist
axis, respectively. The default value, 0, implies a normal extrude. Possible values are
–105 pitch  105. The arguments draftAngle and pitch are mutually exclusive.
A Boolean specifying whether to keep the proﬁle normal same as original or varying through
out the sweep path. When proﬁleNormal=OFF, the proﬁle normal will vary through out the
proﬁleNormal
sweep path. When proﬁleNormal=ON, the proﬁle normal will be same as original through out
the sweep path. The default value is OFF.
A Boolean specifying whether to ﬂip the direction in which sweep operation will be performed.
When ﬂipSweepDirection=OFF, sweep operation will be performed in the direction of path
ﬂipSweepDirection
direction. When ﬂipSweepDirection=ON, sweep operation will be performed in the direction
opposite to the path direction. The default value is OFF.
Return value
A Feature object.
Exceptions
None.
ExtendFaces(...)
This method extends faces along its free edges by offsetting the external edges along the surfaces. One of distance,
upToReferenceRep, or upToFaces must be used to specify how far the faces need to be extended.
Path
mdb.models[name].parts[name].ExtendFaces
Required arguments
None.
Abaqus Scripting Reference Guide
1966
Feature object

Optional arguments
A sequence of Face objects specifying the faces to be extended. The faces cannot
belong to the reference representation. The faces and extendAlong arguments are
mutually exclusive. One of them must be speciﬁed.
faces
A sequence of Edge objects specifying the edges where to extend the faces. Only
free edges are considered. The interior edges will be ignored. The faces and
extendAlong arguments are mutually exclusive. One of them must be speciﬁed.
extendAlong
A Float indicating the distance to extend the faces along the edges. Either distance,
upToReferenceRep, or upToFaces must be speciﬁed.
distance
A sequence of Face objects specifying the faces that the selected faces should be
extended up to.
upToFaces
A Boolean indicating that the surfaces of up to target faces should be extended before
extending and trimming the selected faces. The default value is True.
trimToExtendedTargetSurfaces
A Boolean indicating that the selected faces should be extended along the selected
edges and be trimmed along their intersection with the reference representation.
upToReferenceRep
Return value
A Feature object.
Exceptions
None.
FaceFromElementFaces(...)
This method creates a geometry face from a collection of orphan element faces.
Path
mdb.models[name].parts[name].FaceFromElementFaces
Required arguments
A Region object specifying the collection of orphan element faces.
elementFaces
Optional arguments
A Boolean specifying whether the created geometry face should be stitched with existing
geometry faces. Default value is TRUE.
stitch
A Float indicating the maximum gap to be stitched. The value should be smaller than the
minimum feature size and bigger than the maximum gap expected to be stitched in the
stitchTolerance
model. Otherwise this command may remove small (sliver) edges that are smaller than the
1967
Abaqus Scripting Reference Guide
Feature object

tolerance. If stitch tolerance is not provided then default value of 0.001 will be used for
stitching.
A Float indicating the analytical surface ﬁtting tolerance. If analytical tolerance is not
provided then default value of 0.015 will be used for analytical surface ﬁtting.
analyticFitTolerance
A Boolean specifying whether the created geometry face should be associated with the mesh.
Default value is TRUE.
associateFace
Return value
A Feature object.
Exceptions
None.
HoleBlindFromEdges(...)
This method creates an additional Feature object by creating a circular blind hole of the given diameter and depth and
cutting away material in the solid and shell regions of the part. The center of the hole is offset from two non-parallel
straight edges by the given distances.
Path
mdb.models[name].parts[name].HoleBlindFromEdges
Required arguments
A Datum plane object or a planar Face object.
plane
A SymbolicConstant specifying the direction of feature creation. Possible values are
SIDE1 and SIDE2.
planeSide
A Float specifying the diameter of the hole.
diameter
An Edge object specifying the edge from which distance1 is measured.
edge1
A Float specifying the offset from edge1.
distance1
An Edge object specifying the edge from which distance2 is measured.
edge2
A Float specifying the offset from edge2.
distance2
A Float specifying the depth of the hole.
depth
Optional arguments
None.
Abaqus Scripting Reference Guide
1968
Feature object

Return value
A Feature object.
Exceptions
None.
HoleFromEdges(...)
This method creates an additional Feature object by creating a circular hole of the given diameter in a 2D planar part
and cutting away material in the shell and wire regions of the part. The center of the hole is offset from two non-parallel
straight edges by the given distances.
Path
mdb.models[name].parts[name].HoleFromEdges
Required arguments
A Float specifying the diameter of the hole.
diameter
An Edge object specifying the edge from which distance1 is measured.
edge1
A Float specifying the offset from edge1.
distance1
An Edge object specifying the edge from which distance2 is measured.
edge2
A Float specifying the offset from edge2.
distance2
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
HoleThruAllFromEdges(...)
This method creates an additional Feature object by creating a circular through hole of the given diameter and cutting
away material in the solid and shell regions of the part. The center of the hole is offset from two non-parallel straight
edges by the given distances.
Path
mdb.models[name].parts[name].HoleThruAllFromEdges
1969
Abaqus Scripting Reference Guide
Feature object

Required arguments
A Datum plane object or a planar Face object.
plane
A SymbolicConstant specifying the direction of feature creation. Possible values are
SIDE1 and SIDE2.
planeSide
A Float specifying the diameter of the hole.
diameter
An Edge object specifying the edge from which distance1 is measured.
edge1
A Float specifying the offset from edge1.
distance1
An Edge object specifying the edge from which distance2 is measured.
edge2
A Float specifying the offset from edge2.
distance2
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
MergeEdges(...)
This method merges edges either by extending the user selection or using only the selected edges.
Path
mdb.models[name].parts[name].MergeEdges
Required arguments
None.
Optional arguments
A sequence of Edge objects specifying the edges to be merged.
edgeList
A Boolean specifying whether the user selection needs to be extended to include edges
till branching occurs. Branching is said to occur when the vertex of an edge is shared by
more than two edges.
extendSelection
Abaqus Scripting Reference Guide
1970
Feature object

Return value
A Feature object.
Exceptions
None.
OffsetFaces(...)
This method creates new faces by offsetting existing faces.
Path
mdb.models[name].parts[name].OffsetFaces
Required arguments
A sequence of Face objects specifying the faces that will be offset. The faces may belong to
the part or to the reference representation associated with the part.
faceList
Optional arguments
A Float indicating the distance to offset the faces. Either distance or targetFaces must be
speciﬁed.
distance
A sequence of Face objects whose distance to the faces argument together with the
targetFacesMethod determines the distance to offset the faces. Either distance or targetFaces
must be speciﬁed.
targetFaces
A SymbolicConstant indicating how to calculate the distance to offset. It can have one of
the following values:
targetFacesMethod
•
HALF_OF_AVERAGE: Offset the faces by a distance equals to half the average distance
to target faces.
•
CLOSEST_POINT_FRACTION: Offset the faces by a distance equals to the fraction
of the distance to the approximate closest point on the selected target faces.
•
FARTHEST_POINT_FRACTION: Offset the faces by a distance equals to the fraction
of the distance to the approximate farthest point on the selected target faces.
A Float indicating the fraction of the distance to the closest or the farthest point on the target
faces. Its default value is 0.5.
fractionDistance
A Boolean indicating whether to extend the offset faces and trim them along their intersection
with the reference representation.
trimToReferenceRep
Return value
A Feature object.
1971
Abaqus Scripting Reference Guide
Feature object

Exceptions
None.
RemoveCells(...)
This method converts a solid entity to a shell entity.
Path
mdb.models[name].parts[name].RemoveCells
Required arguments
A sequence of Cell objects specifying the cells to remove.
cellList
Optional arguments
None.
Return value
A Boolean value.
Exceptions
Parterror: Geometry that is not 3-dimensional does not
contain cells.
If the intended volume to be turned into a shell entity is
not three-dimensional.
RemoveFaces(...)
This method removes faces from a solid entity or from a shell entity.
Path
mdb.models[name].parts[name].RemoveFaces
Required arguments
A sequence of Face objects specifying the faces to remove.
faceList
Optional arguments
A Boolean specifying whether all cells are to be deleted when the faces are removed.
The default value is False.
deleteCells
Return value
A Feature object.
Abaqus Scripting Reference Guide
1972
Feature object

Exceptions
None.
RemoveFacesAndStitch(...)
This method removes faces from a solid entity and attempts to close the resulting gap by extending the neighboring
faces of the solid.
Path
mdb.models[name].parts[name].RemoveFacesAndStitch
Required arguments
A sequence of Face objects specifying the faces to remove.
faceList
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
RemoveRedundantEntities(...)
This method removes redundant edges and vertices from a solid or a shell entity. One of the two arguments is required.
Path
mdb.models[name].parts[name].RemoveRedundantEntities
Required arguments
None.
Optional arguments
A sequence of Vertex objects specifying the vertices to be removed.
vertexList
A sequence of Edge objects specifying the edges to be removed.
edgeList
A Boolean specifying whether the vertices of the redundant edges need to be
removed. The default is True.
removeEdgeVertices
Return value
A Feature object.
1973
Abaqus Scripting Reference Guide
Feature object

Exceptions
Parterror: None of the selected entities are redundant.
If the selected entity is not a redundant entity.
RepairFaceNormals(...)
This method works on the entire part or a sequence of shell faces. When the entire part is selected, it aligns all the shell
face normals, and inverts all of the solid faces' normals if the solid was originally inside out. When a few shell faces
are selected, it inverts the normals of the selected faces.
Path
mdb.models[name].parts[name].RepairFaceNormals
Required arguments
None.
Optional arguments
A sequence of Face objects.
faceList
Return value
A Feature object.
Exceptions
None.
RepairInvalidEdges(...)
This method repairs invalid edges. It will always attempt to improve edges even if none of selected edges are initially
invalid and may leave behind invalid edges that could not be repaired.
Path
mdb.models[name].parts[name].RepairInvalidEdges
Required arguments
A sequence of Edge objects.
edgeList
Optional arguments
None.
Return value
A Feature object.
Abaqus Scripting Reference Guide
1974
Feature object

Exceptions
None.
RepairSliver(...)
This method repairs the selected sliver from the selected face. The sliver area is speciﬁed using two points. A face
partition is carried out at the speciﬁed points and the smaller of the two faces is removed.
Path
mdb.models[name].parts[name].RepairSliver
Required arguments
A Face object specifying the face on which the sliver is located.
face
A point specifying the location for partition creation. It can be a Vertex object, an Interesting
Point or three coordinates specifying the point on an edge of the face.
point1
A point specifying the location for partition creation. It can be a Vertex object, an Interesting
Point or three coordinates specifying the point on an edge of the face.
point2
Optional arguments
A Boolean specifying whether to use internal tolerance checks to restrict the size of
the sliver face being removed. The default is True.
toleranceChecks
Return value
A Feature object.
Exceptions
None.
RepairSmallEdges(...)
This method repairs small edges. This method will attempt to replace selected small edges with vertices and extend
the adjacent faces and edges. This method might leave behind some small edges that cannot be removed.
Path
mdb.models[name].parts[name].RepairSmallEdges
Required arguments
A sequence of Edge objects.
edgeList
1975
Abaqus Scripting Reference Guide
Feature object

Optional arguments
A Boolean specifying whether to use internal tolerance checks to restrict the size of
the edges being removed. The default is True.
toleranceChecks
Return value
A Feature object.
Exceptions
None.
RepairSmallFaces(...)
This method repairs small faces. It will attempt to replace the selected small faces with edges or vertices and extend
the adjacent faces. This method might leave behind some small faces that cannot be removed.
Path
mdb.models[name].parts[name].RepairSmallFaces
Required arguments
A sequence of Face objects.
faceList
Optional arguments
A Boolean specifying whether to use internal tolerance checks to restrict the size of
the faces being removed. The default is True.
toleranceChecks
Return value
A Feature object.
Exceptions
None.
ReplaceFaces(...)
This method replaces the selected faces with a single face. If one single face is selected, that alone is replaced with a
new face.
Path
mdb.models[name].parts[name].ReplaceFaces
Required arguments
A sequence of Face objects to be replaced.
faceList
Abaqus Scripting Reference Guide
1976
Feature object

Optional arguments
A Boolean specifying whether the newly created face needs to be stitched to the existing geometry.
The default is True.
stitch
Return value
A Feature object.
Exceptions
None.
Round(...)
This method creates an additional Feature object by rounding (ﬁlleting) the given list of entities with the given radius.
Path
mdb.models[name].parts[name].Round
Required arguments
A Float specifying the radius of the ﬁllets.
radius
A sequence of Edge objects. Solid and Shell edges of a part can be rounded. The operation will
fail for non-manifold edges. The edgeList and vertexList arguments are mutually exclusive. One
of them must be speciﬁed.
edgeList
A sequence of Vertex objects. Vertices that are connected to two wire edges can be rounded.
The operation will fail for a vertex connected to a face. The edgeList and vertexList arguments
are mutually exclusive. One of them must be speciﬁed.
vertexList
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
Shell(...)
This method creates an additional Feature object by creating a planar shell from the given ConstrainedSketch object.
The ConstrainedSketch object must deﬁne a closed proﬁle.
Path
mdb.models[name].parts[name].Shell
1977
Abaqus Scripting Reference Guide
Feature object

Required arguments
A Datum plane object or a planar Face object.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A ConstrainedSketch object specifying the planar shell.
sketch
Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
Return value
A Feature object.
Exceptions
None.
ShellExtrude(...)
This method creates an additional Feature object by extruding the given ConstrainedSketch object by the given depth,
creating a shell protrusion. The ConstrainedSketch object can deﬁne either an open or closed proﬁle.
Path
mdb.models[name].parts[name].ShellExtrude
Required arguments
A Datum plane object or a planar Face object.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A ConstrainedSketch object specifying the planar sketch to be extruded.
sketch
Abaqus Scripting Reference Guide
1978
Feature object

Optional arguments
A Float specifying the extrusion depth. The default is to not specify a depth. Either depth
or upToFace must be used to deﬁne the extrusion depth.
depth
A Face specifying the face up to which to extrude. If upToFace is speciﬁed, the extrusion
will be an up-to-face extrusion. The default is to not specify a face. Either depth or upToFace
must be used to deﬁne the extrusion depth.
upToFace
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0.
By convention, for a positive draft angle an outer loop will draft outward and an inner loop
draftAngle
will draft inward. The opposite is true for a negative draft angle. The default value, 0, implies
a normal extrude. The arguments draftAngle and pitch are mutually exclusive.
A Float specifying the pitch. The pitch is the distance traveled along the axial direction by
the sketch when the sketch has completed one full revolution about the twist axis. Pitch can
pitch
be speciﬁed as positive or negative to achieve right-handed or left-handed twist about the
twist axis, respectively. The default value, 0, implies a normal extrude. Possible values are
–105 pitch  105. The arguments draftAngle and pitch are mutually exclusive.
A Boolean specifying whether to override the direction of feature creation. If the value is
OFF, it means use the direction deﬁned by the sketchPlaneSide; if the value is ON, it means
use the opposite direction to the one deﬁned by sketchPlaneSide. The default value is OFF.
ﬂipExtrudeDirection
A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
ShellLoft(...)
This method creates an additional Feature object by lofting between the given sections and adding shell faces to the
part. You deﬁne the sections using a sequence of edges from the part or an EdgeArray.
Path
mdb.models[name].parts[name].ShellLoft
Required arguments
A sequence of sequences of edges specifying the cross-sections to be lofted. Each outer sequence
speciﬁes a section through which the method will pass the loft feature. Each outer sequence can
loftsections
1979
Abaqus Scripting Reference Guide
Feature object

be deﬁned as a sequence of edges or as an EdgeArray. The edges specifying a section must form
a simple closed proﬁle and must not contain multiple loops.
Optional arguments
A SymbolicConstant specifying the tangent direction at the start section of the loft feature.
Possible values are NONE, NORMAL, RADIAL and SPECIFIED. You can specify this
startCondition
argument only if the start and end sections are planar. You cannot use this argument in
conjunction with the path argument. You must use the startCondition argument in conjunction
with the endCondition argument.
A SymbolicConstant specifying the tangent direction at the end section of the loft feature.
Possible values are NONE, NORMAL, RADIAL and SPECIFIED. You can specify this
endCondition
argument only if the start and end sections are planar. You cannot use this argument in
conjunction with the path argument. You must use the endCondition argument in conjunction
with the startCondition argument.
A Float specifying the angle in degrees of the tangent with respect to the plane in which the
start section lies. You must specify the startTangent argument if startCondition=SPECIFIED.
Possible values are 0.0 startTangent  180.0.
startTangent
A Float specifying the magnitude of the startTangent. You must specify the startMagnitude
argument if startCondition=SPECIFIED. Possible values are 0.0 startMagnitude  100.0.
startMagnitude
A Float specifying the angle in degrees of the tangent with respect to the plane in which the
end section lies. You must specify the endTangent argument if startCondition=SPECIFIED.
Possible values are 0.0 endTangent  180.0.
endTangent
A Float specifying the magnitude of the endTangent. This argument is to be used when the
endCondition argument has the value SPECIFIED. Possible values are 0.0 endMagnitude
100.0.
endMagnitude
A sequence of sequences of edges that pass through each section in the loft feature. Each
sequence speciﬁes a path followed by the face or an edge created by a loft feature. Each
paths
path must start at the ﬁrst section, end at the last section, and pass through each section. In
addition, the order of the sequences must be the same as the order of the sections in the
loftsections argument. Each path must not self-intersect and must be tangent continuous. In
addition, the paths must not intersect each other. You cannot use the paths argument in
conjunction with the startCondition and endCondition arguments.
A Boolean specifying whether each path deﬁned in the paths argument is applied locally
or globally.
globalSmoothing
•
If the path is applied locally, its effect is felt only on faces created from the edges on the
loftsections through which the paths pass through.
•
If the path is applied globally, an averaging algorithm is applied over all the paths deﬁned
and is distributed over all the faces created.
The default value is ON (globally).
Abaqus Scripting Reference Guide
1980
Feature object

A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
ShellRevolve(...)
This method creates an additional Feature object by revolving the given ConstrainedSketch object by the given angle,
creating a shell protrusion. The ConstrainedSketch object can deﬁne either an open or closed proﬁle and an axis of
revolution. The axis is deﬁned by a single construction line. For a description of the plane positioning arguments, see
SolidExtrude.
Path
mdb.models[name].parts[name].ShellRevolve
Required arguments
A Datum plane object or a planar Face object.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A ConstrainedSketch object specifying the planar sketch to be revolved.
sketch
A Float specifying the angle in degrees to be revolved.
angle
Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
A Float specifying the pitch. The pitch is the distance traveled along the axial direction,
measured between corresponding points on the sketch when it has completed one full
pitch
revolution about the axis of revolution. Possible values are 0 pitch  105. The default
value, 0, implies a normal revolve.
A Boolean specifying whether to override the direction of feature creation. If
ﬂipRevolveDirection=OFF, the default direction of revolution is used. If
ﬂipRevolveDirection=ON, the revolve direction is reversed. The default value is OFF.
ﬂipRevolveDirection
1981
Abaqus Scripting Reference Guide
Feature object

A Boolean specifying whether to override the direction of translation. If
ﬂipPitchDirection=OFF, the direction of translation is given by the direction of the revolve
ﬂipPitchDirection
axis. If ﬂipPitchDirection=ON, the translation direction is reversed. The default value is
OFF.
A Boolean specifying whether to rotate the sketch so that it is normal to the path of
revolution when using the pitch option. If moveSketchNormalToPath=OFF, the sketch
moveSketchNormalToPath
plane remains parallel to the revolve axis. If moveSketchNormalToPath=ON, the sketch
is moved to match the angle created by the pitch before being revolved. The default value
is OFF.
A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
ShellSweep(...)
This method creates an additional Feature object by sweeping the given ConstrainedSketch object or a sequence of
Edge objects along a path which may be a ConstrainedSketch or a sequence of Edge objects, creating a shell swept
protrusion. The section can be an open or a closed proﬁle. The section sketch can be created at the normal plane at the
start of the sweep path or it may be created on a Datum plane or a planar Face. No checks are made for self-intersection.
Path
mdb.models[name].parts[name].ShellSweep
Required arguments
Path may either be a ConstrainedSketch object or a sequence of Edge objects specifying the
path of the sweep.
path
Proﬁle may either be a ConstrainedSketch object or a sequence of Edge objects specifying the
section to be swept.
proﬁle
Optional arguments
A Datum plane object or a planar Face object. Only required when path is a
ConstrainedSketch object.
pathPlane
An Edge object or a Datum axis object specifying the vertical (Y) direction of the path sketch.
Only required when path is a ConstrainedSketch object.
pathUpEdge
Abaqus Scripting Reference Guide
1982
Feature object

A SymbolicConstant specifying the orientation of pathUpEdge on the sketch. Possible values
are RIGHT, LEFT, TOP, and BOTTOM. Default value is RIGHT. Only required when path
is a ConstrainedSketch object.
pathOrientation
A Datum plane object or a planar Face object specifying the plane on which to sketch the
proﬁle. Not required when proﬁle is a Face object. When proﬁle is chosen as
sketchPlane
ConstrainedSketch object, user may or may not give this as input. If user does not give this
as input, the normal plane at the start of the path will be the sketchPlane.
An Edge object or a Datum axis object specifying the vertical (Y) direction of the proﬁle
sketch. Only required when proﬁle is a ConstrainedSketch object.
sketchUpEdge
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. Default value is RIGHT. Only required
when proﬁle is a ConstrainedSketch object.
sketchOrientation
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0.
By convention, for a positive draft angle an outer loop will draft outward and an inner loop
draftAngle
will draft inward. The opposite is true for a negative draft angle. The default value, 0, implies
a normal extrude. The arguments draftAngle and pitch are mutually exclusive.
A Float specifying the pitch. The pitch is the distance traveled along the axial direction by
the sketch when the sketch has completed one full revolution about the twist axis. Pitch can
pitch
be speciﬁed as positive or negative to achieve right-handed or left-handed twist about the
twist axis, respectively. The default value, 0, implies a normal extrude. Possible values are
–105 pitch  105. The arguments draftAngle and pitch are mutually exclusive.
A Boolean specifying whether to keep the proﬁle normal same as original or varying through
out the sweep path. When proﬁleNormal=OFF, the proﬁle normal will vary through out the
proﬁleNormal
sweep path. When proﬁleNormal=ON, the proﬁle normal will be same as original through
out the sweep path. The default value is OFF.
A Boolean specifying whether to ﬂip the direction in which sweep operation will be
performed. When ﬂipSweepDirection=OFF, sweep operation will be performed in the
ﬂipSweepDirection
direction of path direction. When ﬂipSweepDirection=ON, sweep operation will be performed
in the direction opposite to the path direction. The default value is OFF.
A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
1983
Abaqus Scripting Reference Guide
Feature object

SolidExtrude(...)
This method creates an additional Feature object by extruding the given ConstrainedSketch object by the given depth,
creating a solid protrusion. The ConstrainedSketch object must deﬁne a closed proﬁle.
Path
mdb.models[name].parts[name].SolidExtrude
Required arguments
A Datum plane object or a planar Face object.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A ConstrainedSketch object specifying the planar sketch to be extruded.
sketch
Optional arguments
A Float specifying the extrusion depth. The default is to not specify a depth. Either depth
or upToFace must be used to deﬁne the extrusion depth.
depth
A Face specifying the face up to which to extrude. If upToFace is speciﬁed, the extrusion
will be an up-to-face extrusion. The default is to not specify a face. Either depth or upToFace
must be used to deﬁne the extrusion depth.
upToFace
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0.
By convention, for a positive draft angle an outer loop will draft outward and an inner loop
draftAngle
will draft inward. The opposite is true for a negative draft angle. The default value, 0, implies
a normal extrude. The arguments draftAngle and pitch are mutually exclusive.
A Float specifying the pitch. The pitch is the distance traveled along the axial direction by
the sketch when the sketch has completed one full revolution about the twist axis. Pitch can
pitch
be speciﬁed as positive or negative to achieve right-handed or left-handed twist about the
twist axis, respectively. The default value, 0, implies a normal extrude. Possible values are
–105 pitch  105. The arguments draftAngle and pitch are mutually exclusive.
A Boolean specifying whether to override the direction of feature creation. If the value is
OFF, it means use the direction deﬁned by the sketchPlaneSide; if the value is ON, it means
use the opposite direction to the one deﬁned by sketchPlaneSide. The default value is OFF.
ﬂipExtrudeDirection
Abaqus Scripting Reference Guide
1984
Feature object

A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
SolidLoft(...)
This method creates an additional Feature object by lofting between the given sections and adding material to the part.
You deﬁne the sections using a sequence of edges from the part or an EdgeArray.
Path
mdb.models[name].parts[name].SolidLoft
Required arguments
A sequence of sequences of edges specifying the cross-sections to be lofted. Each outer sequence
speciﬁes a section through which Abaqus will pass the loft feature. Each outer sequence can be
loftsections
deﬁned as a sequence of edges or as an EdgeArray. The edges specifying a section must form a
simple closed proﬁle and must not contain multiple loops.
Optional arguments
A SymbolicConstant specifying the tangent direction at the start section of the loft feature.
Possible values are NONE, NORMAL, RADIAL and SPECIFIED. You can specify this
startCondition
argument only if the start and end sections are planar. You cannot use this argument in
conjunction with the path argument. You must use the startCondition argument in conjunction
with the endCondition argument.
A SymbolicConstant specifying the tangent direction at the end section of the loft feature.
Possible values are NONE, NORMAL, RADIAL and SPECIFIED. You can specify this
endCondition
argument only if the start and end sections are planar. You cannot use this argument in
conjunction with the path argument. You must use the endCondition argument in conjunction
with the startCondition argument.
A Float specifying the angle in degrees of the tangent with respect to the plane in which the
start section lies. You must specify the startTangent argument if startCondition=SPECIFIED.
Possible values are 0.0 startTangent  180.0.
startTangent
A Float specifying the magnitude of the startTangent. You must specify the startMagnitude
argument if startCondition=SPECIFIED. Possible values are 0.0 startMagnitude  100.0.
startMagnitude
1985
Abaqus Scripting Reference Guide
Feature object

A Float specifying the angle in degrees of the tangent with respect to the plane in which the
end section lies. You must specify the endTangent argument if startCondition=SPECIFIED.
Possible values are 0.0 endTangent  180.0.
endTangent
A Float specifying the magnitude of the endTangent. This argument is to be used when the
endCondition argument has the value SPECIFIED. Possible values are 0.0 endMagnitude
100.0.
endMagnitude
A sequence of sequences of edges that pass through each section in the loft feature. Each
sequence speciﬁes a path followed by the face or an edge created by a loft feature. Each
paths
path must start at the ﬁrst section, end at the last section, and pass through each section. In
addition, the order of the sequences must be the same as the order of the sections in the
loftsections argument. Each path must not self-intersect and must be tangent continuous. In
addition, the paths must not intersect each other. You cannot use the paths argument in
conjunction with the startCondition and endCondition arguments.
A Boolean specifying whether each path deﬁned in the paths argument is applied locally
or globally.
globalSmoothing
•
If the path is applied locally, its effect is felt only on faces created from the edges on the
loftsections through which the paths pass through.
•
If the path is applied globally, an averaging algorithm is applied over all the paths deﬁned
and is distributed over all the faces created.
The default value is ON (globally).
A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
SolidRevolve(...)
This method creates an additional Feature object by revolving the given ConstrainedSketch object by the given angle,
creating a solid protrusion. The ConstrainedSketch object must deﬁne a closed proﬁle and an axis of revolution. The
axis is deﬁned by a single construction line.
Path
mdb.models[name].parts[name].SolidRevolve
Required arguments
A Datum plane object or a planar Face object.
sketchPlane
Abaqus Scripting Reference Guide
1986
Feature object

A SymbolicConstant specifying the direction of feature creation. Possible values
are SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A ConstrainedSketch object specifying the planar sketch to be revolved.
sketch
A Float specifying the angle in degrees to be revolved.
angle
Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
A Float specifying the pitch. The pitch is the distance traveled along the axial direction,
measured between corresponding points on the sketch when it has completed one full
pitch
revolution about the axis of revolution. Possible values are 0 pitch  105. The default
value, 0, implies a normal revolve.
A Boolean specifying whether to override the direction of feature creation. If
ﬂipRevolveDirection=OFF, the default direction of revolution is used. If
ﬂipRevolveDirection=ON, the revolve direction is reversed. The default value is OFF.
ﬂipRevolveDirection
A Boolean specifying whether to override the direction of translation. If
ﬂipPitchDirection=OFF, the direction of translation is given by the direction of the revolve
ﬂipPitchDirection
axis. If ﬂipPitchDirection=ON, the translation direction is reversed. The default value is
OFF.
A Boolean specifying whether to rotate the sketch so that it is normal to the path of
revolution when using the pitch option. If moveSketchNormalToPath=OFF, the sketch
moveSketchNormalToPath
plane remains parallel to the revolve axis. If moveSketchNormalToPath=ON, the sketch
is moved to match the angle created by the pitch before being revolved. The default value
is OFF.
A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
1987
Abaqus Scripting Reference Guide
Feature object

SolidSweep(...)
This method creates an additional Feature object by sweeping the given ConstrainedSketch object or a Face object
along a path which may be a ConstrainedSketch or a sequence of Edge objects, creating a solid swept protrusion. If
the proﬁle section is a ConstrainedSketch object, it must deﬁne a closed proﬁle. The section sketch can be created at
the normal plane at the start of the sweep path or it may be created on a Datum plane or a planar Face. No checks are
made for self-intersection.
Path
mdb.models[name].parts[name].SolidSweep
Required arguments
Path may either be a ConstrainedSketch object or a sequence of Edge objects specifying the
path of the sweep.
path
Proﬁle may either be a ConstrainedSketch object or a Face object specifying the section to be
swept.
proﬁle
Optional arguments
A Datum plane object or a planar Face object. Only required when path is a
ConstrainedSketch object.
pathPlane
An Edge object or a Datum axis object specifying the vertical (Y) direction of the path sketch.
Only required when path is a ConstrainedSketch object.
pathUpEdge
A SymbolicConstant specifying the orientation of pathUpEdge on the sketch. Possible values
are RIGHT, LEFT, TOP, and BOTTOM. Default value is RIGHT. Only required when path
is a ConstrainedSketch object.
pathOrientation
A Datum plane object or a planar Face object specifying the plane on which to sketch the
proﬁle. Not required when proﬁle is a Face object. When proﬁle is chosen as
sketchPlane
ConstrainedSketch object, user may or may not give this as input. If user does not give this
as input, the normal plane at the start of the path will be the sketchPlane.
An Edge object or a Datum axis object specifying the vertical (Y) direction of the proﬁle
sketch. Only required when proﬁle is a ConstrainedSketch object.
sketchUpEdge
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. Default value is RIGHT. Only required
when proﬁle is a ConstrainedSketch object.
sketchOrientation
A Float specifying the draft angle in degrees. Possible values are -90.0 draftAngle  90.0.
By convention, for a positive draft angle an outer loop will draft outward and an inner loop
draftAngle
will draft inward. The opposite is true for a negative draft angle. The default value, 0, implies
a normal extrude. The arguments draftAngle and pitch are mutually exclusive.
Abaqus Scripting Reference Guide
1988
Feature object

A Float specifying the pitch. The pitch is the distance traveled along the axial direction by
the sketch when the sketch has completed one full revolution about the twist axis. Pitch can
pitch
be speciﬁed as positive or negative to achieve right-handed or left-handed twist about the
twist axis, respectively. The default value, 0, implies a normal extrude. Possible values are
–105 pitch  105. The arguments draftAngle and pitch are mutually exclusive.
A Boolean specifying whether to keep the proﬁle normal same as original or varying through
out the sweep path. When proﬁleNormal=OFF, the proﬁle normal will vary through out the
proﬁleNormal
sweep path. When proﬁleNormal=ON, the proﬁle normal will be same as original through
out the sweep path. The default value is OFF.
A Boolean specifying whether to ﬂip the direction in which sweep operation will be
performed. When ﬂipSweepDirection=OFF, sweep operation will be performed in the
ﬂipSweepDirection
direction of path direction. When ﬂipSweepDirection=ON, sweep operation will be performed
in the direction opposite to the path direction. The default value is OFF.
A Boolean specifying whether internal boundaries will be retained. The default value is
OFF.
keepInternalBoundaries
Return value
A Feature object.
Exceptions
None.
Stitch(...)
This method attempts to create a valid part by binding together free and imprecise edges of all the faces of a part. If
edgeList is not given, a global stitch will be performed. If stitchTolerance is not speciﬁed, a value of 1.0 will be used.
Path
mdb.models[name].parts[name].Stitch
Required arguments
None.
Optional arguments
A sequence of Edge objects specifying the edges that need to be stitched.
edgeList
A Float indicating the maximum gap to be stitched. The value should be smaller than the
minimum feature size and bigger than the maximum gap expected to be stitched in the model.
Otherwise this command may remove small (sliver) edges that are smaller than the tolerance.
stitchTolerance
Return value
A Feature object.
1989
Abaqus Scripting Reference Guide
Feature object

Exceptions
None.
Wire(...)
This method creates an additional Feature object by creating a planar wire from the given ConstrainedSketch object.
The ConstrainedSketch object must deﬁne a closed proﬁle.
Path
mdb.models[name].parts[name].Wire
Required arguments
A Datum plane object or a planar Face object specifying the plane on which to sketch.
sketchPlane
A SymbolicConstant specifying the direction of feature creation. Possible values are
SIDE1 and SIDE2.
sketchPlaneSide
An Edge object or a Datum axis object specifying the vertical (Y) direction of the
sketch.
sketchUpEdge
A ConstrainedSketch object specifying the planar sketch to be revolved.
sketch
Optional arguments
A SymbolicConstant specifying the orientation of sketchUpEdge on the sketch. Possible
values are RIGHT, LEFT, TOP, and BOTTOM. The default value is RIGHT.
sketchOrientation
Return value
A Feature object.
Exceptions
None.
WireSpline(...)
This method creates an additional Feature object by creating a spline wire that passes through a sequence of given
points. Each point can be a datum point, a vertex, an interesting point, or a tuple.
Path
mdb.models[name].parts[name].WireSpline
Abaqus Scripting Reference Guide
1990
Feature object

Required arguments
A sequence of Vertex, Datum point, or InterestingPoint objects specifying the points through which
the spline wire will pass. points can also be a sequence of tuples of Floats. You must specify at least
two values in the sequence.
points
Optional arguments
A SymbolicConstant specifying the merge behavior of the wire with existing geometry. If
mergeType is MERGE, Abaqus merges the wire into solid regions of the part if the wire passes
mergeType
through them. If mergeType is IMPRINT, Abaqus imprints the spline wire on existing geometry
as edges. If mergeType is SEPARATE, Abaqus neither merges nor imprints the spline wire with
existing geometry. It creates the wire separately. The default value is IMPRINT.
A Boolean specifying the behavior of Abaqus when the points deﬁning a spline wire form a
closed loop (the start and end points are the same). If smoothClosedSpline=ON, Abaqus creates
smoothClosedSpline
a smooth spline wire where the tangencies at the end point meet smoothly. If
smoothClosedSpline=OFF, Abaqus does not automatically create a smooth end condition. The
default value in OFF.
Return value
A Feature object.
Exceptions
None.
WirePolyLine(...)
This method creates an additional Feature object by creating a polyline wire that passes through a sequence of given
points. Each point can be a datum point, a vertex, an interesting point, or a tuple.
Path
mdb.models[name].parts[name].WirePolyLine
Required arguments
A sequence of Vertex, Datum point, or InterestingPoint objects specifying the points through which
the polyline wire will pass. points can also be a sequence of tuples of Floats. You must specify at
least two values in the sequence.
points
Optional arguments
A SymbolicConstant specifying the merge behavior of the wire with existing geometry. If mergeType
is MERGE, Abaqus merges the wire into solid regions of the part if the wire passes through them.
mergeType
If mergeType is IMPRINT, Abaqus imprints the wire on existing geometry as edges. If mergeType
is SEPARATE, Abaqus neither merges nor imprints the spline wire with existing geometry. It
creates the wire separately. The default value is IMPRINT.
1991
Abaqus Scripting Reference Guide
Feature object

A Boolean specifying whether the wire should be available for selection in meshing operations. If
meshable=OFF, the wire can be used for connector section assignment. The default value is ON.
meshable
Return value
A Feature object.
Exceptions
None.
WireFromEdge(...)
This method creates an additional Feature object by creating a Wire by selecting one or more Edge objects of a Solid
or Shell part.
Path
mdb.models[name].parts[name].WireFromEdge
Required arguments
A list of Edge objects specifying the edges from which the wire is to be created.
edgeList
Optional arguments
None.
Return value
A Feature object.
Exceptions
None.
Abaqus Scripting Reference Guide
1992
Feature object

AcisFile object
The AcisFile object is a ﬁle object used to open ACIS-, STEP-, and IGES-format ﬁles.
Access
import part
openAcis(...)
This method creates an AcisFile object from a ﬁle containing ACIS-format geometry. This object is subsequently used
by the PartFromGeometryFile method.
Path
mdb.openAcis
Required arguments
A String specifying the path to the ACIS ﬁle to open.
ﬁleName
Optional arguments
A Boolean specifying whether to scale, rotate, and translate the part using the transform
read from the ACIS ﬁle. The default value is OFF.
scaleFromFile
Return value
An AcisFile object.
Exceptions
Texterror: ACIS File version exceeds Kernel.
File is from a newer version of ACIS than the CAE kernel.
Texterror: Failed to read ACIS ﬁle.
The data in the ACIS ﬁle are corrupted.
openCatia(...)
This method creates an AcisFile object from a ﬁle containing V5-format geometry. This object is subsequently used
by the PartFromGeometryFile method.
Path
mdb.openCatia
Required arguments
A String specifying the path to the CATIA ﬁle to open.
ﬁleName
1993
AcisFile object

Optional arguments
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part
to be created. Possible values are SOLID , SHELL, and WIRE. If topology=SOLID,
topology
Abaqus/CAE attempts to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds
the body as a shell entity and not as a solid entity. The default value is SOLID .
A SymbolicConstant specifying whether the original units should be retained. Possible values
are ON and OFF. The default value is OFF.
convertUnits
A Boolean specifying whether to combine the bodies in the CATPart ﬁle. If the bodies to be
combined touch or overlap, invalid entities would result. For CATProduct ﬁles, this option
will be ignored.
combineBodies
Return value
An AcisFile object.
Exceptions
None.
openEnf(...)
This method creates an AcisFile object from a ﬁle containing Elysium Neutral File-format geometry that was created
by CATIA V5, I-DEAS, or Pro/ENGINEER. This object is subsequently used by the PartFromGeometryFile
method.
Path
mdb.openEnf
Required arguments
A String specifying the path to the Elysium Neutral File that was created by I-DEAS,
Pro/ENGINEER, or CATIA V5.
ﬁleName
A String specifying the type of CAD system that created the ﬁle. Possible values are “ideas”,
“proe”, or “catiav5” or a combination similar to “proe/ideas/catiav5” if the type is unknown.
ﬁleType
Optional arguments
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part
to be created. Possible values are SOLID , SHELL, and WIRE. If topology=SOLID, Abaqus/CAE
topology
attempts to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds the body as
a shell entity and not as a solid entity. The default value is SOLID.
A Boolean specifying if the dimensions of the part should be converted to millimeters. The
default value is OFF.
convertUnits
Abaqus Scripting Reference Guide
1994
AcisFile object

Return value
An AcisFile object.
Exceptions
None.
openIges(...)
This method creates an AcisFile object from a ﬁle containing IGES-format geometry. This object is subsequently used
by the PartFromGeometryFile method.
Path
mdb.openIges
Required arguments
A String specifying the path to the IGES ﬁle to open.
ﬁleName
Optional arguments
A SymbolicConstant specifying the method used to deﬁne the trim curves that bound parametric
surfaces. Possible values are:
trimCurve
•
DEFAULT, use either of the following as speciﬁed by the contents of the IGES ﬁle.
•
PARAMETRIC_DATA, use the parameter space of the surface being trimmed.
•
THREED_DATA, use real space—the coordinate system of the part along with an indication
that the trim curve lies on the parametric surface.
The default value is DEFAULT.
A SymbolicConstant specifying whether the imported geometry needs to be scaled using the units
information available in the IGES ﬁle. Possible values are ON and OFF. The default value is
scaleFromFile
OFF. When the argument is set to  ON, the geometry is scaled to millimeters with respect to the
unit system speciﬁed in the IGES ﬁle.
A Boolean specifying if the IGES ﬁle contains MSBO (Manifold Solid B-Rep Object) entities.
The default value is False.
msbo
A sequence of Ints specifying the levels or layers of entities that will be translated from the IGES
ﬁle to build the part. The default is to include all the layers.
includedLayers
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part
to be created. Possible values are SOLID , SHELL, and WIRE. If topology=SOLID, Abaqus/CAE
topology
attempts to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds the body as a
shell entity and not as a solid entity. The default value is SOLID.
1995
Abaqus Scripting Reference Guide
AcisFile object

A SymbolicConstant specifying whether the imported wires need to be united or not. Possible
values are ON and OFF. The default value is ON. When importing a sketch, this value is set to
OFF.
uniteWires
Return value
An AcisFile object.
Exceptions
Texterror: Failed to read IGES ﬁle.
The data in the IGES ﬁle are corrupted.
openParasolid(...)
This method creates an AcisFile object from a ﬁle containing Parasolid-format geometry. This object is subsequently
used by the PartFromGeometryFile method.
Path
mdb.openParasolid
Required arguments
A String specifying the path to the Parasolid ﬁle to open.
ﬁleName
Optional arguments
A SymbolicConstant specifying the topology of the data to be read from the ﬁle and of the part to be
created. Possible values are SOLID , SHELL, and WIRE. If topology=SOLID, Abaqus/CAE attempts
topology
to attach cells to create a solid. If topology=SHELL, Abaqus/CAE builds the body as a shell entity
and not as a solid entity. The default value is SOLID.
Return value
An AcisFile object.
Exceptions
None.
openStep(...)
This method creates an AcisFile object from a ﬁle containing STEP-format geometry. This object is subsequently used
by the PartFromGeometryFile method.
Path
mdb.openStep
Abaqus Scripting Reference Guide
1996
AcisFile object

Required arguments
A String specifying the path to the STEP ﬁle to open.
ﬁleName
Optional arguments
A Float specifying the scaling factor to apply to the imported geometric entities. The default
value is 1.0.
scale
Return value
An AcisFile object.
Exceptions
Texterror: Failed to read STEP ﬁle.
The data in the STEP ﬁle are corrupted.
openVda(...)
This method creates an AcisFile object from a ﬁle containing VDA-FS-format geometry. This object is subsequently
used by the PartFromGeometryFile method.
Path
mdb.openVda
Required arguments
A String specifying the path to the VDA-FS ﬁle to open.
ﬁleName
Optional arguments
None.
Return value
An AcisFile object.
Exceptions
Texterror: Failed to read VDA ﬁle.
The data in the VDA-FS ﬁle are corrupted.
writeAcisFile(...)
This method exports the assembly to a named ﬁle in ACIS format.
Required arguments
A String specifying the name of the ﬁle to which to write.
ﬁleName
1997
Abaqus Scripting Reference Guide
AcisFile object

Optional arguments
A Float specifying the ACIS version. For example, the Float “12.0” corresponds to ACIS Version
12.0. The default value is the current version of ACIS.
version
Return value
None.
Exceptions
None.
Members
The AcisFile object has the following member:
An Int specifying the number of parts in the object.
numberOfParts
Abaqus Scripting Reference Guide
1998
AcisFile object

Partition commands
The partition commands are used to partition edges, faces, and cells into new regions.
A partition command can be invoked for a Part object or for an Assembly object. The partition commands create
Feature objects and are described in Feature object.
1999
Partition commands

Path and Probe commands
Path commands are used to deﬁne a line through your model by specifying a series of points.
You can view results along the path in the form of an X–Y plot. Probe commands are used to determine model
data and analysis results at selected locations.
In this section:
•
Path object
•
CurrentProbeValues object
•
FreeBody object
•
NodeQuery object
•
ProbeOptions object
•
ProbeReport object
•
SelectedProbeValues object
•
Spectrum object
•
Stream object
Abaqus Scripting Reference Guide
2000

Path object
The Path object deﬁnes a line through your model by specifying a series of nodes or points.
Access
import visualization
session.paths[name]
Path(...)
This method creates a Path object.
Path
session.Path
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the type of path being created. Possible values are NODE_LIST,
POINT_LIST, EDGE_LIST, CIRCUMFERENTIAL, and RADIAL.
type
A sequence specifying the nodes or points that make up the path. The deﬁnition of the path
expression depends on the type argument.
expression
•
If type=NODE_LIST, expression must be a sequence of sequences. Each inner sequence
contains two items, the ﬁrst item is a String specifying the name of a part instance, and the
second item can be either a sequence of Ints or a sequence of Strings, each specifying a range
of Ints.
•
If type=POINT_LIST, expression must be a sequence of tuples of three Floats, specifying the
coordinates of each point.
•
If type=EDGE_LIST, expression must be a sequence of sequences. Each inner sequence
contains two items, the ﬁrst item is a String specifying the name of the part instance, and the
second item is a sequence of tuples of four Ints that uniquely identify an element edge. The
four Ints are:
1. The element label.
2. The element face index (one-based).
3. The face edge index (one-based).
4. The edge direction. A positive number speciﬁes that the edge direction runs from the edge
start node to the edge end node. A negative number speciﬁes the opposite.
•
When type=CIRCUMFERENTIAL or RADIAL, expression must be a sequence of three tuples
of three Floats, specifying the coordinates of the points used to deﬁne a coordinate system.
A SymbolicConstant specifying the method in which the circle is being deﬁned. This argument
is valid only when type=CIRCUMFERENTIAL or RADIAL. Possible values are ORIGIN_AXIS
and POINT_ARC.
circleDeﬁnition
2001
Path object

When the value is ORIGIN_AXIS, the ﬁrst two points in expression are points on the rotational
axis and the third point lies on the x-axis. When the value is POINT_ARC, the three points in
expression are points lying on the arc of the circle.
An Int specifying the number of equal segments in the path. This argument is valid only when
type=CIRCUMFERENTIAL or RADIAL.
numSegments
A Float specifying the start angle of the circumferential path. This argument is valid only when
type=CIRCUMFERENTIAL.
startAngle
A Float specifying the end angle of the circumferential path. This argument is valid only when
type=CIRCUMFERENTIAL.
endAngle
The SymbolicConstant CIRCLE_RADIUS or a Float specifying the radius of the circumferential
path. This argument is valid only when type=CIRCUMFERENTIAL.
radius
A Float specifying the angle between the radial path and the X-axis of the speciﬁed coordinate
system. This argument is valid only when type=RADIAL.
radialAngle
The SymbolicConstant CIRCLE_RADIUS or a Float specifying the start radius of the radial path.
This argument is valid only when type=RADIAL.
startRadius
The SymbolicConstant CIRCLE_RADIUS or a Float specifying the end radius of the radial path.
This argument is valid only when type=RADIAL.
endRadius
Optional arguments
None.
Return value
A Path object.
Exceptions
KeyError and PthError.
Possible error messages for PthError exception: ModelError, ErrorUnsupportedNodeData, ErrorUnsupportedPointData,
ErrorIncorrectPathData, KeyError, ErrorEmptyPathName, ErrorPathNotFound, and ErrorNoOdbPathDisplay.
ValueError: When type=CIRCUMFERENTIAL or RADIAL, the three points speciﬁed in expression are collinear.
Members
The Path object has members with the same names and descriptions as the arguments to the Path method.
In addition, the Path object can have the following member:
If type=NODE_LIST, coordinates is a sequence of tuples of three Floats. This can be used
as the value for the expression argument when creating a Path object of type = POINT_LIST.
coordinates
Abaqus Scripting Reference Guide
2002
Path object

CurrentProbeValues object
The CurrentProbeValues object has no constructor. The CurrentProbeValues object is created when you import the
Visualization module.
Access
import visualization
session.currentProbeValues
Members
The CurrentProbeValues object has the following member:
A tuple of Floats specifying the values obtained while probing. These values are updated constantly
as the user moves the mouse over the object being probed.
values
2003
CurrentProbeValues object

FreeBody object
The FreeBody object deﬁnes a section across which resultant forces and moments are computed.
Access
import visualization
session.freeBodies[name]
FreeBodyFromEdges(...)
This method creates a FreeBody object and places it in the freeBodies repository.
Path
session.FreeBodyFromEdges
Required arguments
A string name for the free body.
name
A DisplayGroup leaf object that speciﬁes the physical constituents of the free body.
edges
Optional arguments
A SymbolicConstant specifying the location of the summation point. Possible values
are CENTROID, NODAL_AVERAGE, and SPECIFY. The default value is
CENTROID.
summationLoc
A tuple of 3 ﬂoats specifying the summation point.
summationPoint
A SymbolicConstant specifying the component resolution. Possible values are
NORMAL_TANGENTIAL and CSYS. The default value is
NORMAL_TANGENTIAL.
componentResolution
A string specifying the name of the coordinate system.
csysName
Return value
A FreeBody object.
Exceptions
None.
FreeBodyFromFaces(...)
This method creates a FreeBody object and places it in the freeBodies repository.
Path
session.FreeBodyFromFaces
Abaqus Scripting Reference Guide
2004
FreeBody object

Required arguments
A string name for the free body.
name
A DisplayGroup leaf object that speciﬁes the physical constituents of the free body.
faces
Optional arguments
A SymbolicConstant specifying the location of the summation point. Possible values
are CENTROID, NODAL_AVERAGE, and SPECIFY. The default value is
CENTROID.
summationLoc
A tuple of 3 ﬂoats specifying the summation point.
summationPoint
A SymbolicConstant specifying the component resolution. Possible values are
NORMAL_TANGENTIAL and CSYS. The default value is
NORMAL_TANGENTIAL.
componentResolution
A string specifying the name of the coordinate system.
csysName
Return value
A FreeBody object.
Exceptions
None.
FreeBodyFromNodesElements(...)
This method creates a FreeBody object and places it in the freeBodies repository.
Path
session.FreeBodyFromNodesElements
Required arguments
A string name for the free body.
name
A DisplayGroup leaf object that speciﬁes the physical constituents of the free body.
elements
A DisplayGroup leaf object that speciﬁes the physical constituents of the free body.
nodes
Optional arguments
A SymbolicConstant specifying the location of the summation point. Possible values
are CENTROID, NODAL_AVERAGE, and SPECIFY. The default value is
CENTROID.
summationLoc
2005
Abaqus Scripting Reference Guide
FreeBody object

A tuple of 3 ﬂoats specifying the summation point.
summationPoint
A SymbolicConstant specifying the component resolution. Possible values are
NORMAL_TANGENTIAL and CSYS. The default value is
NORMAL_TANGENTIAL.
componentResolution
A string specifying the name of the coordinate system.
csysName
Return value
A FreeBody object.
Exceptions
None.
getFreeBodyData(...)
This method returns the force and moment data of a FreeBody object.
Path
session.freeBodies[name].getFreeBodyData
Required arguments
None.
Optional arguments
An Int specifying the step from which to obtain values. The default value is the current
step.
step
An Int specifying the frame from which to obtain values. The default value is the current
frame.
frame
A Boolean specifying whether to obtain the values from the speciﬁed step and frame
or from all active steps and frames.
allActiveStepFrame
Return value
A tuple of tuples of dictionaries, for each requested step and frame, containing the force and moment data.
Exceptions
None.
Members
The FreeBody object has no members.
Abaqus Scripting Reference Guide
2006
FreeBody object

NodeQuery object
The NodeQuery object speciﬁes nodes and their coordinates in a path. The NodeQuery object has no constructor or
methods. Abaqus creates the nodeQuery member when you import the visualization module.
Access
import visualization
session.nodeQuery
Members
The NodeQuery object has the following members:
An Int specifying the ID of the most recently queried node. If the last query was
unsuccessful, nodeID=−1.
nodeId
A tuple of Floats specifying the X-, Y-, and Z-coordinates of the most recently queried node.
nodePos
2007
NodeQuery object

ProbeOptions object
The ProbeOptions object is used to store settings associated with probing a model or an X–Y plot. The ProbeOptions
object has no constructor. Abaqus creates the defaultProbeOptions and the probeOptions members when you import
the Visualization module. When probing is initiated for the ﬁrst time, the values in the probeOptions member are
initialized using the values from the defaultProbeOptions member.
Access
import visualization
session.defaultProbeOptions
session.probeOptions
setValues(...)
This method modiﬁes the settings on the ProbeOptions object.
Required arguments
None.
Optional arguments
A ProbeOptions object from which values are to be copied. If other arguments are also
supplied to setValues, they will override the values in options. The default value is None.
options
A SymbolicConstant specifying the entity being probed when probeObject="ODB". Possible
values are NODE and ELEMENT. The default value is ELEMENT.
probeEntity
A SymbolicConstant specifying the output position to probe for ﬁeld output results when
probeObject="ODB". Possible values are NODAL, INTEGRATION_POINT,
ELEMENT_FACE, ELEMENT_NODAL, and ELEMENT_CENTROID.
probeOutputPosition
When probeEntity=NODE, the only possible value is NODAL. When
probeEntity=ELEMENT, the only possible values are INTEGRATION_POINT,
ELEMENT_FACE, ELEMENT_NODAL, and ELEMENT_CENTROID, and the default is
INTEGRATION_POINT.
A Boolean specifying whether to display the part instance information. This member is valid
when probeObject=“ODB.” The default value is ON.
partInstance
A Boolean specifying whether to display the element ID information. This member is valid
when probeObject=“ODB” and probeEntity=ELEMENT. The default value is ON.
elementID
A Boolean specifying whether to display the element type information. This member is valid
when probeObject=“ODB” and probeEntity=ELEMENT. The default value is ON.
elementType
A Boolean specifying whether to display the element connectivity. This member is valid
when probeObject=“ODB” and probeEntity=ELEMENT. The default value is ON.
elementConnectivity
Abaqus Scripting Reference Guide
2008
ProbeOptions object

A Boolean specifying whether to display the element ﬁeld output results. This member is
valid when probeObject=“ODB”, probeEntity=ELEMENT, and isFieldOutputAvailable=ON.
The default value is ON.
elementFieldResults
A Boolean specifying whether to display the node ID when probeObject=“ODB” and
probeEntity=NODE. The default value is ON.
nodeId
A Boolean specifying whether to display the base coordinates of a node when
probeObject=“ODB” and probeEntity=NODE. The default value is ON.
baseCoordinates
A Boolean specifying whether to display the deformed coordinates of a node when
probeObject=“ODB” and probeEntity=NODE. The default value is ON.
deformedCoordinates
A Boolean specifying whether to display the elements attached to a node when
probeObject=“ODB” and probeEntity=NODE. The default value is ON.
attachedElements
A Boolean specifying whether to display the node ﬁeld output results. This member is valid
when probeObject=“ODB”, probeEntity=NODE, and isFieldOutputAvailable=ON. The
default value is ON.
nodeFieldResults
A Boolean specifying whether to display the legend for a curve being probed. This member
is valid when probeObject=“XYPlot.” The default value is ON.
legend
A Boolean specifying whether to display the x-coordinate value of the point on the curve
being probed. This member is valid when probeObject=“XYPlot.” The default value is ON.
xValue
A Boolean specifying whether to display the y-coordinate value of the point on the curve
being probed. This member is valid when probeObject=“XYPlot.” The default value is ON.
yValue
A Boolean specifying whether to display the sequence ID of the point on the curve being
probed. This member is valid when probeObject=“XYPlot.” The default value is ON.
sequenceID
A Boolean specifying whether to interpolate values within a line segment when
probeObject=“XYPlot.” When interpolateXy=OFF, probing returns the nearest X–Y data
interpolateXy
point on the curve. When interpolateXy=ON, probing interpolates data to return a value at
the nearest point on the curve. The default value is OFF.
Return value
None.
Exceptions
None.
Members
The ProbeOptions object has the following members:
2009
Abaqus Scripting Reference Guide
ProbeOptions object

A SymbolicConstant specifying the entity being probed when probeObject="ODB". Possible
values are NODE and ELEMENT. The default value is ELEMENT.
probeEntity
A SymbolicConstant specifying the output position to probe for ﬁeld output results when
probeObject="ODB". Possible values are NODAL, INTEGRATION_POINT,
ELEMENT_FACE, ELEMENT_NODAL, and ELEMENT_CENTROID.
probeOutputPosition
When probeEntity=NODE, the only possible value is NODAL. When
probeEntity=ELEMENT, the only possible values are INTEGRATION_POINT,
ELEMENT_FACE, ELEMENT_NODAL, and ELEMENT_CENTROID, and the default
is INTEGRATION_POINT.
A Boolean specifying whether to display the part instance information. This member is
valid when probeObject=“ODB.” The default value is ON.
partInstance
A Boolean specifying whether to display the element ID information. This member is valid
when probeObject=“ODB” and probeEntity=ELEMENT. The default value is ON.
elementID
A Boolean specifying whether to display the element type information. This member is
valid when probeObject=“ODB” and probeEntity=ELEMENT. The default value is ON.
elementType
A Boolean specifying whether to display the element connectivity. This member is valid
when probeObject=“ODB” and probeEntity=ELEMENT. The default value is ON.
elementConnectivity
A Boolean specifying whether to display the element ﬁeld output results. This member is
valid when probeObject=“ODB”, probeEntity=ELEMENT, and isFieldOutputAvailable=ON.
The default value is ON.
elementFieldResults
A Boolean specifying whether to display the node ID when probeObject=“ODB” and
probeEntity=NODE. The default value is ON.
nodeId
A Boolean specifying whether to display the base coordinates of a node when
probeObject=“ODB” and probeEntity=NODE. The default value is ON.
baseCoordinates
A Boolean specifying whether to display the deformed coordinates of a node when
probeObject=“ODB” and probeEntity=NODE. The default value is ON.
deformedCoordinates
A Boolean specifying whether to display the elements attached to a node when
probeObject=“ODB” and probeEntity=NODE. The default value is ON.
attachedElements
A Boolean specifying whether to display the node ﬁeld output results. This member is valid
when probeObject=“ODB”, probeEntity=NODE, and isFieldOutputAvailable=ON. The
default value is ON.
nodeFieldResults
A Boolean specifying whether to display the legend for a curve being probed. This member
is valid when probeObject=“XYPlot.” The default value is ON.
legend
A Boolean specifying whether to display the x-coordinate value of the point on the curve
being probed. This member is valid when probeObject=“XYPlot.” The default value is ON.
xValue
Abaqus Scripting Reference Guide
2010
ProbeOptions object

A Boolean specifying whether to display the y-coordinate value of the point on the curve
being probed. This member is valid when probeObject=“XYPlot.” The default value is ON.
yValue
A Boolean specifying whether to display the sequence ID of the point on the curve being
probed. This member is valid when probeObject=“XYPlot.” The default value is ON.
sequenceID
A Boolean specifying whether to interpolate values within a line segment when
probeObject=“XYPlot.” When interpolateXy=OFF, probing returns the nearest X–Y data
interpolateXy
point on the curve. When interpolateXy=ON, probing interpolates data to return a value at
the nearest point on the curve. The default value is OFF.
A Boolean specifying whether ﬁeld output is available for probing when
probeObject=“XYPlot. This member is read-only.”
isFieldOutputAvailable
A String specifying the type of the displayed object being probed. Possible values are "ODB"
and "XYPlot". This member is read-only.
probeObject
2011
Abaqus Scripting Reference Guide
ProbeOptions object

ProbeReport object
The ProbeReport object is used to store settings associated with tabular reports of probe data. The ProbeReport object
has no constructor. Abaqus creates the defaultProbeReport and the probeReport members when you import the
Visualization module. When probing is initiated for the ﬁrst time, the values in the probeReport member are initialized
using the values from the defaultProbeReport member.
Access
import visualization
session.defaultProbeReport
session.probeReport
setValues(...)
This method modiﬁes the ProbeReport object.
Required arguments
None.
Optional arguments
None or a ProbeReport object specifying values to be copied. If other arguments are also
supplied to setValues, they will override the values in options. The default value is None.
options
An Int specifying the number of columns in the report ﬁle. This argument is valid only when
pageWidth=SPECIFY. The default value is 80.
numColumns
An Int specifying the number of signiﬁcant digits to be written for decimal values. The default
value is 6.
numDigits
A SymbolicConstant specifying the number format to be used when formatting decimal
values. Possible values are AUTOMATIC, ENGINEERING, and SCIENTIFIC. The default
value is ENGINEERING.
numFormat
A SymbolicConstant specifying the page width format. Possible values are NO_LIMIT and
SPECIFY. The default value is NO_LIMIT.
pageWidth
A Boolean specifying whether to print the total value of either the ﬁeld output result (when
probeObject=”ODB”) or the x- and y-coordinates (when probeObject=“XYPlot”). The default
value is OFF.
printTotal
A Boolean specifying whether to print the minimum and maximum values of either the ﬁeld
output result (when probeObject=”ODB”) or the x- and y-coordinates (when
probeObject=“XYPlot”). The default value is OFF.
printMinMax
Return value
None.
Abaqus Scripting Reference Guide
2012
ProbeReport object

Exceptions
None.
Members
The ProbeReport object has members with the same names and descriptions as the arguments to the setValues
method.
2013
Abaqus Scripting Reference Guide
ProbeReport object

SelectedProbeValues object
The SelectedProbeValues object has no constructor. The SelectedProbeValues object is created when you import the
Visualization module.
Access
import visualization
session.selectedProbeValues
Members
The SelectedProbeValues object has the following members:
An Int specifying the length of the values member.
length
A Boolean specifying whether any probe values have been selected (as is necessary
prior to writing to a ﬁle).
ﬁeldOutputAvailable
A tuple of tuples of Floats specifying the selected probe values.
values
A tuple of Floats specifying the last sequence of the values member.
lastValues
Abaqus Scripting Reference Guide
2014
SelectedProbeValues object

Spectrum object
The Spectrum object deﬁnes a color spectrum for the contour display.
Access
import visualization
session.spectrums[name]
Spectrum(...)
This method creates a Spectrum object and places it in the spectrums repository.
Path
session.Spectrum
Required arguments
A string name for the spectrum.
name
A sequence of strings indicating the colors of the spectrum.
colors
Optional arguments
None.
Return value
A Spectrum object.
Exceptions
None.
Members
The Spectrum object has no members.
2015
Spectrum object

Stream object
TheStream object deﬁnes a set of streamlines in ﬂuid mechanics.
Access
import visualization
session.streams[name]
Stream(...)
This method creates aStream object and places it in the streams repository.
Path
session.Stream
Required arguments
A string name for the stream.
name
An integer specifying the number of points along the rake.
numPointsOnRake
Optional arguments
A tuple of 3 ﬂoats specifying the starting point of the rake. Alternatively, a string representation
of the node selected in the viewport.
pointA
A tuple of 3 ﬂoats specifying the end point of the rake. Alternatively, a string representation
of the node selected in the viewport.
pointB
APath object that speciﬁes the rake.
path
Return value
A Stream object.
Exceptions
None.
Members
The Stream object has no members.
Abaqus Scripting Reference Guide
2016
Stream object

Plot Options commands
Plot options commands are used to control the appearance of plots in the Visualization module.
Plots can be undeformed, deformed, contour, symbol, or material orientation.
In this section:
•
BasicOptions object
•
DGCommonOptions object
•
DGContourOptions object
•
DisplayOptions object
•
DGDisplayBodyOptions object
•
FreeBodyOptions object
•
HistoryVariable object
•
OdbData object
•
OdbDataDatumCsys object
•
OdbDataElementSet object
•
OdbDataFrame object
•
OdbDataInstance object
•
OdbDataMaterial object
•
OdbDataNodeSet object
•
OdbDataSection object
•
OdbDataStep object
•
OdbDataSurfaceSet object
•
CouplingConstraint object
•
RigidBodyConstraint object
•
TieConstraint object
•
MpcConstraint object
•
OdbDiagnosticData object
•
OdbAnalysisError object
•
OdbAnalysisWarning object
•
OdbJobTime object
•
OdbNumericalProblemSummary object
•
OdbDiagnosticStep object
•
OdbAuxiliaryData object
•
OdbDiagnosticIncrement object
•
OdbDiagnosticAttempt object
•
OdbContactDiagnostics object
•
OdbDisplayOptions object
•
OptionArg object
•
DGOrientationOptions object
•
StreamOptions object
•
DGSuperimposeOptions object
•
DGSymbolOptions object
2017

•
ViewCutOptions object
•
DetailPlotOptions object
•
PlyStackPlotOptions object
•
MdbData object
•
MdbDataFrame object
•
MdbDataInstance object
•
MdbDataStep object
Abaqus Scripting Reference Guide
2018

BasicOptions object
The BasicOptions object stores values and attributes associated with an OdbDisplay object.
The BasicOptions object has no constructor command. Abaqus creates the defaultOdbDisplay.basicOptions member
when you import the Visualization module. Abaqus creates a basicOptions member when it creates the OdbDisplay
object, using the values from defaultOdbDisplay.basicOptions. Abaqus creates the odbDisplay member when a viewport
is created, using the attributes from the previous active viewport. The previous active viewport contains the attributes
from the defaultOdbDisplay object for the session. The attributes from the defaultOdbDisplay object are copied from
the previous active viewport to create the new viewport.
BasicOptions objects are accessed in one of two ways:
•
The default basic options: these settings are used as defaults when other basicOptions members are created. These
settings can be set to customize user preferences.
•
The basic options associated with a particular viewport.
Access
import visualization
session.defaultOdbDisplay.basicOptions
session.viewports[name].layers[name].odbDisplay.basicOptions
session.viewports[name].odbDisplay.basicOptions
setValues(...)
This method modiﬁes the BasicOptions object.
Required arguments
None.
Optional arguments
A BasicOptions object from which values are to be copied. If other arguments are
also supplied to setValues, they will override the values in options. The default
value is None.
options
A String specifying the name of the coordinate system driving the moving camera.
cameraCsysName
A Boolean specifying whether the camera moves with the coordinate system. The
default value is OFF.
cameraMovesWithCsys
A Boolean specifying whether the camera, when it moves, follows the rotation of the
coordinate system. The default value is OFF.
cameraFollowsRotation
A Float specifying the nodal averaging threshold percentage. Possible values are 0
averagingThreshold  100. The default value is 75.0.
averagingThreshold
A SymbolicConstant specifying the quantity to plot. Possible values are
FIELD_OUTPUT and DISCONTINUITIES. The default value is FIELD_OUTPUT.
quantityToPlot
2019
BasicOptions object

A SymbolicConstant specifying the reﬁnement level for drawing curves. Possible
values are EXTRA_COARSE, COARSE, MEDIUM, FINE, and EXTRA_FINE. The
default value is COARSE.
curveReﬁnementLevel
A String specifying the color of elements that do not have any results. The default
value is "White".
noResultsColor
A Float specifying the feature angle to be used when visibleEdges=FEATURE. The
default value is 30.0.
featureAngle
An Int specifying the size of various glyph symbols (boundary conditions, coupling
constraints, etc.). The default value is 6.
otherSymbolSize
A Boolean specifying whether to render the beam proﬁles. The default value is OFF.
renderBeamProﬁles
A Float specifying the beam proﬁle scale factor. The beamScaleFactor must be greater
than zero. The default value is 1.0.
beamScaleFactor
A Boolean specifying whether to render the shell thickness. The default value is OFF.
renderShellThickness
A Float specifying the shell thickness scale factor. The shellScaleFactor must be
greater than zero. The default value is 1.0.
shellScaleFactor
A Boolean specifying whether to account for deactivated elements. The default value
is ON.
accountForDeactivatedElems
A Boolean specifying whether to display boundary conditions. The default value is
OFF.
bcDisplay
A Boolean specifying whether to display connectors. The default value is OFF.
connectorDisplay
A Boolean specifying whether to highlight connector points. The default value is
ON.
highlightConnectorPts
A Boolean specifying whether to display connector orientations or coordinate systems.
The default value is ON.
showConnectorAxes
A Boolean specifying whether to display the text that describes the connector type.
The default value is ON.
showConnectorType
A Boolean specifying whether to display point type elements. The default value is
ON.
pointElements
A Boolean specifying whether to display reference points. referencePoints is valid
only when pointElements=ON. The default value is ON.
referencePoints
A Boolean specifying whether to display mass, heat capacity and inertia elements.
massElements is valid only when pointElements=ON. The default value is OFF.
massElements
Abaqus Scripting Reference Guide
2020
BasicOptions object

A Boolean specifying whether to display spring and dashpot elements. springElements
is valid only when pointElements=ON. The default value is OFF.
springElements
A Boolean specifying whether to display spot weld and distributed coupling elements.
spotWelds is valid only when pointElements=ON. The default value is OFF.
spotWelds
A Boolean specifying whether to display tracer particles. tracerParticles is valid only
when pointElements=ON. The default value is OFF.
tracerParticles
A Boolean specifying whether to display PC3D elements. pc3dElements is valid only
when pointElements=ON. The default value is ON.
pc3dElements
A Boolean specifying whether to display PD3D elements. pd3dElements is valid only
when pointElements=ON. The default value is ON.
pd3dElements
A Boolean specifying whether to sweep the analytical surfaces. The default value is
ON or OFF, depending on the characteristics of your model.
sweepArs
A Boolean specifying whether to sweep the deformable elements. The default value
is ON or OFF, depending on the characteristics of your model.
sweepElem
A Float specifying the starting angle (in degrees) from which to sweep the analytical
surfaces when sweepArs=ON. The default value is 0.0.
sweepStartAngleArs
A Float specifying the starting angle (in degrees) from which to sweep the model
when sweepElem=ON. The default value is 0.0.
sweepStartAngleElem
A Float specifying the angle (in degrees) through which to sweep the analytical
surfaces when sweepArs=ON. The default value is 360.0.
sweepEndAngleArs
A Float specifying the angle (in degrees) through which to sweep the model when
sweepElem=ON. The default value is 180.0.
sweepEndAngleElem
An Int specifying the number of segments to display when sweepArs=ON. The default
value is 10 or 20, depending on characteristics of your model.
numSweepSegmentsArs
An Int specifying the number of segments to display when sweepElem=ON. The
default value is 10 or 20, depending on characteristics of your model.
numSweepSegmentsElem
A SymbolicConstant specifying the numeric form in which to display results that
contain complex numbers. Possible values are COMPLEX_MAGNITUDE,
numericForm
COMPLEX_PHASE, REAL, IMAGINARY, COMPLEX_MAG_AT_ANGLE,
COMPLEX_ENVELOPE_MAX_ABS, COMPLEX_ENVELOPE_MAX, and
COMPLEX_ENVELOPE_MIN. The default value is REAL.
A Float specifying the angle (in degrees) at which to display results that contain
complex numbers when numericForm=COMPLEX_MAG_AT_ANGLE. The default
value is 0.0.
complexAngle
2021
Abaqus Scripting Reference Guide
BasicOptions object

A SymbolicConstant specifying which of the section points to use. Possible values
are USE_BOTTOM, USE_TOP, USE_BOTTOM_AND_TOP, and USE_ENVELOPE.
The default value is USE_BOTTOM.
sectionResults
A SymbolicConstant specifying the envelope criterion. Possible values are
MAX_VALUE, MIN_VALUE, and MAX_ABS_VALUE. The default value is
MAX_ABS_VALUE.
envelopeCriteria
A SymbolicConstant specifying the output position for envelope calculations. Possible
values are CENTROID, ELEMENT_NODAL, and INTEGRATION_POINT. The
default value is INTEGRATION_POINT.
envelopeDataPosition
A SymbolicConstant specifying the ply result location. Possible values are BOTTOM,
MIDDLE, TOP, and TOP_AND_BOTTOM. The default value is MIDDLE.
plyResultLocation
A SymbolicConstant specifying the section point scheme. Possible values are
CATEGORY_BASED and PLY_BASED. The default value is CATEGORY_BASED.
sectionPointScheme
A Boolean specifying whether to sweep the cyclic symmetry sectors. The default
value is OFF.
sweepSectors
A SymbolicConstant specifying how sectors will be selected for sweeping. Possible
values are SELECT_BY_NUMBER, SELECT_BY_ANGLE, and SELECT_ALL.
The default value is SELECT_BY_NUMBER.
sectorSelectionType
A sequence of Ints specifying which sectors to display when
sectorSelectionType=SELECT_BY_NUMBER. Possible values are 1
selectedSectorNumbers  the number of sectors. The default value is (1).
selectedSectorNumbers
A Float specifying the angle (in degrees) from which to sweep cyclic symmetry
sectors when sweepSectors=ON. Possible values are multiples of the sector angle
such that 0 sweepSectorStartAngle  360. The default value is 0.0.
sweepSectorStartAngle
A Float specifying the angle (in degrees) through which to sweep cyclic symmetry
sectors when sweepSectors=ON. Possible values are multiples of the sector angle
such that 0 sweepSectorEndAngle  360. The default value is 360.0.
sweepSectorEndAngle
A Boolean specifying whether to extrude analytical surfaces. The default value is
ON or OFF depending on characteristics of your model.
extrudeArs
A Boolean specifying whether to use automatic depth determination when extruding
analytical surfaces. The default value is ON. The default value is ON.
extrudeArsDepthAutoCompute
A Boolean specifying whether to extrude deformable elements. The default value is
ON or OFF depending on characteristics of your model.
extrudeElem
A Float specifying the depth (in model units) by which the analytical surfaces are to
be extruded when extrudeArs=ON. The default value is 1.0.
extrudeArsDepth
Abaqus Scripting Reference Guide
2022
BasicOptions object

A Float specifying the depth (in model units) by which the deformable elements are
to be extruded when extrudeElem=ON. The default value is 1.0.
extrudeElemDepth
A SymbolicConstant specifying the order of operations to create the mirror pattern.
Possible values are MIRROR_RECT_CIRC, RECT_MIRROR_CIRC,
mirrorPatternOrder
MIRROR_CIRC_RECT, RECT_CIRC_MIRROR, CIRC_MIRROR_RECT, and
CIRC_RECT_MIRROR. The default value is MIRROR_RECT_CIRC.
The SymbolicConstant GLOBAL or a String specifying the name of the mirror's
coordinate system. The default value is GLOBAL.
mirrorCsysName
A Boolean specifying whether to mirror about the XY plane. The default value is
OFF.
mirrorAboutXyPlane
A Boolean specifying whether to mirror about the XZ plane. The default value is
OFF.
mirrorAboutXzPlane
A Boolean specifying whether to mirror about the YZ plane. The default value is
OFF.
mirrorAboutYzPlane
A Boolean specifying whether to mirror display bodies. The default value is OFF.
mirrorDisplayBodies
The SymbolicConstant GLOBAL or a String specifying the name of the pattern's
coordinate system. The default value is GLOBAL.
patternCsysName
An Int specifying the number of patterns to create in the X-direction for a rectangular
pattern. The default value is 1.
patternNumX
An Int specifying the number of patterns to create in the Y-direction for a rectangular
pattern. The default value is 1.
patternNumY
An Int specifying the number of patterns to create in the Z-direction for a rectangular
pattern. The default value is 1.
patternNumZ
A Float specifying the offset of the pattern along the X-axis for a rectangular pattern.
The default value is 0.0.
patternOffsetX
A Float specifying the offset of the pattern along the Y-axis for a rectangular pattern.
The default value is 0.0.
patternOffsetY
A Float specifying the offset of the pattern along the Z-axis for a rectangular pattern.
The default value is 0.0.
patternOffsetZ
A SymbolicConstant specifying the axis of rotation for a circular. Possible values
are XAXIS, YAXIS, and ZAXIS. The default value is ZAXIS.
patternRotationAxis
A Float specifying the total angle of a circular pattern. The default value is 360.0.
patternTotalAngle
2023
Abaqus Scripting Reference Guide
BasicOptions object

An Int specifying the number of patterns to create in a circular pattern. The default
value is 1.
patternNumCircular
A Boolean specifying whether to display coupling constraints. The default value is
ON.
couplingDisplay
A Boolean specifying whether to display coordinate systems. The default value is
OFF.
coordSystemDisplay
A Boolean specifying whether to display coordinate systems that represent
user-deﬁned orientations. The default value is OFF.
scratchCoordSystemDisplay
A SymbolicConstant specifying the transformation to apply to the PrimaryVariable.
Possible values are DEFAULT, NODAL, USER_SPECIFIED, ANGULAR, and
LAYUP_ORIENTATION. The default value is DEFAULT.
transformationType
If transformationType=NODAL, Abaqus will transform nodal vector ﬁelds into any
orientation deﬁned in the analysis with the *TRANSFORM option. Setting
transformationType=NODAL has no effect on element-based results.
If transformationType=USER_SPECIFIED, Abaqus will transform tensor and vector
ﬁelds into the coordinate system speciﬁed by datumCsys.
If transformationType=LAYUP_ORIENTATION, Abaqus will transform tensor and
vector ﬁelds into the layup orientation deﬁned in the composite section. The odb
should contain the ﬁeld SORIENT in order to use this option.
A DatumCsys object specifying the coordinate system to use for results transformation
when transformationType=USER_SPECIFIED.
datumCsys
A Boolean specifying whether to perform a rigid transformation of nodal vector
datasets based on the active user speciﬁc system The default value is OFF.
rigidTransformPrimary
A Boolean specifying whether to perform a rigid transformation of current
deformedVariable based on the active user speciﬁc system The default value is OFF.
rigidTransformDeformed
A Boolean specifying whether to include the effects of deformation on the
transformation calculations The default value is ON.
transformOnDeformed
A Boolean specifying whether to average the element output. The default value is
ON.
averageElementOutput
A Boolean specifying whether to average only values on displayed elements. The
default value is ON.
averageOnlyDisplayed
A SymbolicConstant specifying the order or the computations to be performed.
Possible values are EXTRAPOLATE_AVERAGE_COMPUTE,
computeOutput
EXTRAPOLATE_COMPUTE_AVERAGE, EXTRAPOLATE_COMPUTE,
EXTRAPOLATE_COMPUTE_DISCONTINUITIES, and RAW_DATA. The default
value is EXTRAPOLATE_AVERAGE_COMPUTE.
Abaqus Scripting Reference Guide
2024
BasicOptions object

A SymbolicConstant specifying the type of averaging region boundaries. Possible
values are NONE, ODB_REGIONS, ELEMENT_SET, and DISPLAY_GROUPS.
The default value is ODB_REGIONS.
regionBoundaries
A Boolean specifying whether to use region boundaries when averaging. The default
value is ON.
useRegionBoundaries
A sequence of Strings specifying either element set or display group names (depending
on the value of regionBoundaries) deﬁning the averaging region boundaries. The
default value is an empty sequence.
userRegions
A Boolean specifying whether to include additional averaging boundaries for shells
and membranes based on feature edges. The default value is ON.
includeFeatureBoundaries
Return value
None.
Exceptions
RangeError: featureAngle must be a ﬂoat in the range 0-90,
inclusive
If featureAngle is not in the valid range:
Members
The BasicOptions object can have the following members:
A Boolean specifying whether to ignore region boundaries when computing values.
The default value is ON.
regionAveraging
A Boolean specifying whether the camera moves with the coordinate system. The
default value is OFF.
cameraMovesWithCsys
A Boolean specifying whether the camera, when it moves, follows the rotation of the
coordinate system. The default value is OFF.
cameraFollowsRotation
A Float specifying the nodal averaging threshold percentage. Possible values are 0
averagingThreshold  100. The default value is 75.0.
averagingThreshold
A SymbolicConstant specifying the quantity to plot. Possible values are
FIELD_OUTPUT and DISCONTINUITIES. The default value is FIELD_OUTPUT.
quantityToPlot
A SymbolicConstant specifying the extrapolation algorithm. This member is for
internal use only. The only possible value is EXTRAP_COMPUTE_AVERAGE.
extrapAlgorithm
A SymbolicConstant specifying the reﬁnement level for drawing curves. Possible
values are EXTRA_COARSE, COARSE, MEDIUM, FINE, and EXTRA_FINE. The
default value is COARSE.
curveReﬁnementLevel
2025
Abaqus Scripting Reference Guide
BasicOptions object

A Float specifying the feature angle to be used when visibleEdges=FEATURE. The
default value is 30.0.
featureAngle
An Int specifying the size of various glyph symbols (boundary conditions, coupling
constraints, etc.). The default value is 6.
otherSymbolSize
A Boolean specifying whether to render the beam proﬁles. The default value is OFF.
renderBeamProﬁles
A Float specifying the beam proﬁle scale factor. The beamScaleFactor must be greater
than zero. The default value is 1.0.
beamScaleFactor
A Boolean specifying whether to render the shell thickness. The default value is OFF.
renderShellThickness
A Float specifying the shell thickness scale factor. The shellScaleFactor must be
greater than zero. The default value is 1.0.
shellScaleFactor
A Boolean specifying whether to account for deactivated elements. The default value
is ON.
accountForDeactivatedElems
A Boolean specifying whether to display boundary conditions. The default value is
OFF.
bcDisplay
A Boolean specifying whether to display connectors. The default value is OFF.
connectorDisplay
A Boolean specifying whether to highlight connector points. The default value is
ON.
highlightConnectorPts
A Boolean specifying whether to display connector orientations or coordinate systems.
The default value is ON.
showConnectorAxes
A Boolean specifying whether to display the text that describes the connector type.
The default value is ON.
showConnectorType
A Boolean specifying whether to display point type elements. The default value is
ON.
pointElements
A Boolean specifying whether to display reference points. referencePoints is valid
only when pointElements=ON. The default value is ON.
referencePoints
A Boolean specifying whether to display mass, heat capacity and inertia elements.
massElements is valid only when pointElements=ON. The default value is OFF.
massElements
A Boolean specifying whether to display spring and dashpot elements. springElements
is valid only when pointElements=ON. The default value is OFF.
springElements
A Boolean specifying whether to display spot weld and distributed coupling elements.
spotWelds is valid only when pointElements=ON. The default value is OFF.
spotWelds
Abaqus Scripting Reference Guide
2026
BasicOptions object

A Boolean specifying whether to display tracer particles. tracerParticles is valid only
when pointElements=ON. The default value is OFF.
tracerParticles
A Boolean specifying whether to display PC3D elements. pc3dElements is valid only
when pointElements=ON. The default value is ON.
pc3dElements
A Boolean specifying whether to display PD3D elements. pd3dElements is valid only
when pointElements=ON. The default value is ON.
pd3dElements
A Boolean specifying whether to sweep the analytical surfaces. The default value is
ON or OFF, depending on the characteristics of your model.
sweepArs
A Boolean specifying whether to sweep the deformable elements. The default value
is ON or OFF, depending on the characteristics of your model.
sweepElem
A Float specifying the starting angle (in degrees) from which to sweep the analytical
surfaces when sweepArs=ON. The default value is 0.0.
sweepStartAngleArs
A Float specifying the starting angle (in degrees) from which to sweep the model
when sweepElem=ON. The default value is 0.0.
sweepStartAngleElem
A Float specifying the angle (in degrees) through which to sweep the analytical
surfaces when sweepArs=ON. The default value is 360.0.
sweepEndAngleArs
A Float specifying the angle (in degrees) through which to sweep the model when
sweepElem=ON. The default value is 180.0.
sweepEndAngleElem
An Int specifying the number of segments to display when sweepArs=ON. The default
value is 10 or 20, depending on characteristics of your model.
numSweepSegmentsArs
An Int specifying the number of segments to display when sweepElem=ON. The
default value is 10 or 20, depending on characteristics of your model.
numSweepSegmentsElem
A SymbolicConstant specifying the numeric form in which to display results that
contain complex numbers. Possible values are COMPLEX_MAGNITUDE,
numericForm
COMPLEX_PHASE, REAL, IMAGINARY, COMPLEX_MAG_AT_ANGLE,
COMPLEX_ENVELOPE_MAX_ABS, COMPLEX_ENVELOPE_MAX, and
COMPLEX_ENVELOPE_MIN. The default value is REAL.
A Float specifying the angle (in degrees) at which to display results that contain
complex numbers when numericForm=COMPLEX_MAG_AT_ANGLE. The default
value is 0.0.
complexAngle
A SymbolicConstant specifying which of the section points to use. Possible values
are USE_BOTTOM, USE_TOP, USE_BOTTOM_AND_TOP, and USE_ENVELOPE.
The default value is USE_BOTTOM.
sectionResults
2027
Abaqus Scripting Reference Guide
BasicOptions object

A SymbolicConstant specifying the envelope criterion. Possible values are
MAX_VALUE, MIN_VALUE, and MAX_ABS_VALUE. The default value is
MAX_ABS_VALUE.
envelopeCriteria
A SymbolicConstant specifying the output position for envelope calculations. Possible
values are CENTROID, ELEMENT_NODAL, and INTEGRATION_POINT. The
default value is INTEGRATION_POINT.
envelopeDataPosition
A SymbolicConstant specifying the ply result location. Possible values are BOTTOM,
MIDDLE, TOP, and TOP_AND_BOTTOM. The default value is MIDDLE.
plyResultLocation
A SymbolicConstant specifying the section point scheme. Possible values are
CATEGORY_BASED and PLY_BASED. The default value is CATEGORY_BASED.
sectionPointScheme
A Boolean specifying whether to sweep the cyclic symmetry sectors. The default
value is OFF.
sweepSectors
A SymbolicConstant specifying how sectors will be selected for sweeping. Possible
values are SELECT_BY_NUMBER, SELECT_BY_ANGLE, and SELECT_ALL.
The default value is SELECT_BY_NUMBER.
sectorSelectionType
A Float specifying the angle (in degrees) from which to sweep cyclic symmetry
sectors when sweepSectors=ON. Possible values are multiples of the sector angle
such that 0 sweepSectorStartAngle  360. The default value is 0.0.
sweepSectorStartAngle
A Float specifying the angle (in degrees) through which to sweep cyclic symmetry
sectors when sweepSectors=ON. Possible values are multiples of the sector angle
such that 0 sweepSectorEndAngle  360. The default value is 360.0.
sweepSectorEndAngle
A Boolean specifying whether to extrude analytical surfaces. The default value is
ON or OFF depending on characteristics of your model.
extrudeArs
A Boolean specifying whether to use automatic depth determination when extruding
analytical surfaces. The default value is ON. The default value is ON.
extrudeArsDepthAutoCompute
A Boolean specifying whether to extrude deformable elements. The default value is
ON or OFF depending on characteristics of your model.
extrudeElem
A Float specifying the depth (in model units) by which the analytical surfaces are to
be extruded when extrudeArs=ON. The default value is 1.0.
extrudeArsDepth
A Float specifying the depth (in model units) by which the deformable elements are
to be extruded when extrudeElem=ON. The default value is 1.0.
extrudeElemDepth
A SymbolicConstant specifying the order of operations to create the mirror pattern.
Possible values are MIRROR_RECT_CIRC, RECT_MIRROR_CIRC,
mirrorPatternOrder
MIRROR_CIRC_RECT, RECT_CIRC_MIRROR, CIRC_MIRROR_RECT, and
CIRC_RECT_MIRROR. The default value is MIRROR_RECT_CIRC.
Abaqus Scripting Reference Guide
2028
BasicOptions object

A Boolean specifying whether to mirror about the XY plane. The default value is
OFF.
mirrorAboutXyPlane
A Boolean specifying whether to mirror about the XZ plane. The default value is
OFF.
mirrorAboutXzPlane
A Boolean specifying whether to mirror about the YZ plane. The default value is
OFF.
mirrorAboutYzPlane
A Boolean specifying whether to mirror display bodies. The default value is OFF.
mirrorDisplayBodies
An Int specifying the number of patterns to create in the X-direction for a rectangular
pattern. The default value is 1.
patternNumX
An Int specifying the number of patterns to create in the Y-direction for a rectangular
pattern. The default value is 1.
patternNumY
An Int specifying the number of patterns to create in the Z-direction for a rectangular
pattern. The default value is 1.
patternNumZ
A Float specifying the offset of the pattern along the X-axis for a rectangular pattern.
The default value is 0.0.
patternOffsetX
A Float specifying the offset of the pattern along the Y-axis for a rectangular pattern.
The default value is 0.0.
patternOffsetY
A Float specifying the offset of the pattern along the Z-axis for a rectangular pattern.
The default value is 0.0.
patternOffsetZ
A SymbolicConstant specifying the axis of rotation for a circular. Possible values
are XAXIS, YAXIS, and ZAXIS. The default value is ZAXIS.
patternRotationAxis
A Float specifying the total angle of a circular pattern. The default value is 360.0.
patternTotalAngle
An Int specifying the number of patterns to create in a circular pattern. The default
value is 1.
patternNumCircular
A Boolean specifying whether to display coupling constraints. The default value is
ON.
couplingDisplay
A Boolean specifying whether to display coordinate systems. The default value is
OFF.
coordSystemDisplay
A Boolean specifying whether to display coordinate systems that represent
user-deﬁned orientations. The default value is OFF.
scratchCoordSystemDisplay
A SymbolicConstant specifying the transformation to apply to the PrimaryVariable.
Possible values are DEFAULT, NODAL, USER_SPECIFIED, ANGULAR, and
LAYUP_ORIENTATION. The default value is DEFAULT.
transformationType
2029
Abaqus Scripting Reference Guide
BasicOptions object

If transformationType=NODAL, Abaqus will transform nodal vector ﬁelds into any
orientation deﬁned in the analysis with the *TRANSFORM option. Setting
transformationType=NODAL has no effect on element-based results.
If transformationType=USER_SPECIFIED, Abaqus will transform tensor and vector
ﬁelds into the coordinate system speciﬁed by datumCsys.
If transformationType=LAYUP_ORIENTATION, Abaqus will transform tensor and
vector ﬁelds into the layup orientation deﬁned in the composite section. The odb
should contain the ﬁeld SORIENT in order to use this option.
A Boolean specifying whether to perform a rigid transformation of nodal vector
datasets based on the active user speciﬁc system The default value is OFF.
rigidTransformPrimary
A Boolean specifying whether to perform a rigid transformation of current
deformedVariable based on the active user speciﬁc system The default value is OFF.
rigidTransformDeformed
A Boolean specifying whether to include the effects of deformation on the
transformation calculations The default value is ON.
transformOnDeformed
A Boolean specifying whether the model contains any elements or surfaces that can
be extruded.
modelCanExtrude
An Int specifying the types of sweepable elements and surfaces contained in the
model, if any.
sweepModelType
A Boolean specifying whether to average the element output. The default value is
ON.
averageElementOutput
A Boolean specifying whether to average only values on displayed elements. The
default value is ON.
averageOnlyDisplayed
A SymbolicConstant specifying the type of averaging region boundaries. Possible
values are NONE, ODB_REGIONS, ELEMENT_SET, and DISPLAY_GROUPS.
The default value is ODB_REGIONS.
regionBoundaries
A Boolean specifying whether to use region boundaries when averaging. The default
value is ON.
useRegionBoundaries
A Boolean specifying whether to include additional averaging boundaries for shells
and membranes based on feature edges. The default value is ON.
includeFeatureBoundaries
An Int specifying the number of sectors of a cyclic symmetric model. The value is
automatically computed from the cyclic symmetric model. This value is read-only.
numSectors
A Float specifying the sector angle of a cyclic symmetric model. The value is
automatically computed from the cyclic symmetric model. This value is read-only.
sectorAngle
A Float specifying the automatic extrude depth used to extrude analytical rigid surfaces
in the default setting. This value is read-only.
automaticExtrudeDepth
Abaqus Scripting Reference Guide
2030
BasicOptions object

A String specifying the name of the coordinate system driving the moving camera.
cameraCsysName
A String specifying the color of elements that do not have any results. The default
value is "White".
noResultsColor
The SymbolicConstant GLOBAL or a String specifying the name of the mirror's
coordinate system. The default value is GLOBAL.
mirrorCsysName
The SymbolicConstant GLOBAL or a String specifying the name of the pattern's
coordinate system. The default value is GLOBAL.
patternCsysName
A DatumCsys object specifying the coordinate system to use for results transformation
when transformationType=USER_SPECIFIED.
datumCsys
A tuple of Ints specifying which sectors to display when
sectorSelectionType=SELECT_BY_NUMBER. Possible values are 1
selectedSectorNumbers  the number of sectors. The default value is (1).
selectedSectorNumbers
A tuple of Strings specifying either element set or display group names (depending
on the value of regionBoundaries) deﬁning the averaging region boundaries. The
default value is an empty sequence.
userRegions
2031
Abaqus Scripting Reference Guide
BasicOptions object

DGCommonOptions object
The DGCommonOptions object stores values and attributes that are common to all plot states. The DGCommonOptions
object has no constructor command. Abaqus creates an odbDisplayOptions.commonOptions member when a display
group instance is created, using values from odbDisplay.commonOptions.
Access
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.commonOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.commonOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.commonOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.commonOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.commonOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.commonOptions
Members
The DGCommonOptions object can have the following members:
A SymbolicConstant specifying the render style of the plot. Possible values are
WIREFRAME, FILLED, HIDDEN, and SHADED. The default value is SHADED.
renderStyle
A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is EXTERIOR.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A Boolean specifying whether to plot the element labels. The default value is OFF.
elemLabels
A Boolean specifying whether to plot the face labels. The default value is OFF.
faceLabels
A Boolean specifying whether to plot the node labels. The default value is OFF.
nodeLabels
A Boolean specifying whether to plot the node symbols. The default value is OFF.
nodeSymbols
A SymbolicConstant specifying the node symbol types. Possible values are:
nodeSymbolType
Abaqus Scripting Reference Guide
2032
DGCommonOptions object

•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
The default value is HOLLOW_CIRCLE.
A SymbolicConstant specifying the node symbol size. Possible values are SMALL,
MEDIUM, and LARGE. The default value is SMALL.
nodeSymbolSize
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A Boolean specifying whether to draw arrows that indicate the directions of element
and surface normals. The default value is OFF.
normals
A SymbolicConstant specifying whether to draw element normals or surface normals.
Possible values are ELEMENT and SURFACE. The default value is ELEMENT.
normalDisplay
A SymbolicConstant specifying the length of the normal arrows. Possible values are
SHORT, MEDIUM, and LONG. The default value is MEDIUM.
normalArrowLength
A SymbolicConstant specifying the thickness of the normal arrows. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
normalLineThickness
A SymbolicConstant specifying the arrowhead style of the normal arrows. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
normalArrowheadStyle
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "White".
edgeColorWireHide
2033
Abaqus Scripting Reference Guide
DGCommonOptions object

A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED
or SHADED. The default value is "White".
ﬁllColor
A String specifying the label font to be used for all model labels. The default value is
"-*-courier-medium-r-normal-*-*-120-*-*-m-*-*-*".
labelFont
A String specifying the color to be used to plot the element labels. The default value
is "Cyan".
elemLabelColor
A String specifying the color to be used to plot the face labels. The default value is
"Red".
faceLabelColor
A String specifying the color to be used to plot the node labels. The default value is
"Yellow".
nodeLabelColor
A String specifying the color to be used to plot the node symbols. The default value
is "Yellow".
nodeSymbolColor
A String specifying the color to be used to plot the normal to a nonbeam element or
to a surface. The default value is "Red".
faceNormalColor
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Blue".
beamN1Color
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Red".
beamN2Color
A String specifying the color to be used to plot an arrow along the tangent to a beam.
The default value is "White".
beamTangentColor
A tuple of three Floats specifying the coordinate scaling in each of the three coordinate
directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
Abaqus Scripting Reference Guide
2034
DGCommonOptions object

DGContourOptions object
The DGContourOptions object stores values and attributes associated with a contour plot. The DGContourOptions
object has no constructor command. Abaqus creates an odbDisplayOptions.contourOptions member when a display
group instance is created, using values from odbDisplay.contourOptions.
Access
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.contourOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.contourOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.contourOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.contourOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.contourOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.contourOptions
Members
The DGContourOptions object can have the following members:
A SymbolicConstant specifying the contour rendering method. Possible values are
TEXTURE_MAPPED and TESSELLATED. The default value is TEXTURE_MAPPED.
contourMethod
A Boolean specifying whether tick mark plots should be displayed on line-type elements.
If tickmarkPlots=ON, Abaqus displays a tick mark plot. If tickmarkPlots=OFF, Abaqus
displays contours on the element faces. The default value is OFF.
tickmarkPlots
A SymbolicConstant specifying the interval style of the contour plot. Possible values
are CONTINUOUS and UNIFORM. The default value is UNIFORM.
contourStyle
A Boolean specifying whether to plot the edges of each contour interval when
contourType=BANDED or ISOSURFACE. The default value is OFF.
contourEdges
A SymbolicConstant specifying the edge line style to be used to plot the contour edges
when contourType=BANDED or ISOSURFACE. Possible values are SOLID, DASHED,
DOTTED, and DOT_DASH. The default value is SOLID.
contourEdgeStyle
A SymbolicConstant specifying the edge line thickness to be used to plot the edge of
the contour intervals when contourType=BANDED or ISOSURFACE. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
contourEdgeThickness
A Boolean specifying the display of the nodal averaged coordinate systems used when
averaging element vector or tensor data. The default value is OFF.
averagedOrientationDisplay
A Boolean specifying whether the label for the matching ply shows up in the viewport.
The default value is OFF.
matchingPlyLabels
2035
DGContourOptions object

A Boolean specifying whether the contour color is driven by the matching ply. The
default value is OFF.
colorByMatchingPlies
A SymbolicConstant specifying the length of the tick mark plot axes. Possible values
are SHORT, MEDIUM, and LONG. The default value is MEDIUM.
tickmarkAxisLength
A Float specifying the base contour value deﬁning the tick mark axis contour value that
intersects the elements. Possible values are
autoMinValue tickmarkBaseValue autoMaxValue. The default value is 0.0.
tickmarkBaseValue
A SymbolicConstant specifying the orientation of the tick mark plots. Possible values
are N1 and N2. The default value is N2.
tickmarkOrientation
A String specifying the edge color to be used when contourType=LINE. The default
value is "White".
edgeColorLine
A String specifying the edge color to be used when contourType=BANDED or QUILT.
The default value is "Black".
edgeColorBandedQuilt
A String specifying the color to be used to plot the contour edges when
contourType=BANDED or ISOSURFACE. The default value is "Grey60".
contourEdgeColor
A String specifying the color to be used to plot the tick mark curve. The default value
is "Cyan".
tickmarkCurveColor
A tuple of tuples of SymbolicConstants specifying the line style and line thickness for
each interval in the plot when contourType=LINE. The size of the outer sequence must
intervalLineAttributes
be equal to numIntervals-1. The inner sequence consists of two SymbolicConstants
specifying the line style and line thickness. For possible values, refer to the edgeLineStyle
and edgeLineThickness members of the DGCommonOptions object. The default is
((SOLID, VERY_THIN), ).
Abaqus Scripting Reference Guide
2036
DGContourOptions object

DisplayOptions object
The DisplayOptions object stores a plot state.
Access
import visualization
session.viewports[name].layers[name].odbDisplay.display
session.viewports[name].odbDisplay.display
setValues(...)
This method modiﬁes the DisplayOptions object.
Required arguments
None.
Optional arguments
A DisplayOptions object from which values are to be copied. If other arguments are also supplied
to setValues, they will override the values in options. The default value is None.
options
A sequence of SymbolicConstants specifying the plot state of the display. Possible values are
UNDEFORMED, DEFORMED, CONTOURS_ON_UNDEF, CONTOURS_ON_DEF,
plotState
SYMBOLS_ON_UNDEF, SYMBOLS_ON_DEF, ORIENT_ON_UNDEF, and ORIENT_ON_DEF.
The default value is (UNDEFORMED).
Return value
None.
Exceptions
None.
Members
The DisplayOptions object can have the following member:
A tuple of SymbolicConstants specifying the plot state of the display. Possible values are
UNDEFORMED, DEFORMED, CONTOURS_ON_UNDEF, CONTOURS_ON_DEF,
plotState
SYMBOLS_ON_UNDEF, SYMBOLS_ON_DEF, ORIENT_ON_UNDEF, and ORIENT_ON_DEF.
The default value is (UNDEFORMED).
2037
DisplayOptions object

DGDisplayBodyOptions object
The DGDisplayBodyOptions object stores values and attributes applied to display bodies. The DGDisplayBodyOptions
object has no constructor command. Abaqus creates an odbDisplayOptions.displayBodyOptions member when a display
group instance is created, using values from odbDisplay.displayBodyOptions.
Access
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.displayBodyOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.displayBodyOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.displayBodyOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.displayBodyOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.displayBodyOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.displayBodyOptions
Members
The DGDisplayBodyOptions object can have the following members:
A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is EXTERIOR.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
Abaqus Scripting Reference Guide
2038
DGDisplayBodyOptions object

A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "White".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED
or SHADED. The default value is "White".
ﬁllColor
A tuple of three Floats specifying the coordinate scaling in each of the three coordinate
directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
2039
Abaqus Scripting Reference Guide
DGDisplayBodyOptions object

FreeBodyOptions object
The FreeBodyOptions object stores values and attributes associated with a free body plot. The FreeBodyOptions object
has no constructor command. Abaqus creates a defaultOdbDisplay.freeBodyOptions member when you import the
Visualization module. Abaqus creates a FreeBodyOptions member when it creates the OdbDisplay object, using the
values from defaultOdbDisplay.freeBodyOptions. Abaqus creates the odbDisplay member when a viewport is created,
using the values from defaultOdbDisplay.
FreeBodyOptions objects are accessed in one of two ways:
•
The default free body options. These settings are used as defaults when other freeBodyOptions members are created.
These settings can be set to customize user preferences.
•
The free body options associated with a particular viewport.
Access
import visualization
session.defaultOdbDisplay.freeBodyOptions
session.viewports[name].layers[name].odbDisplay.freeBodyOptions
session.viewports[name].odbDisplay.freeBodyOptions
setValues(...)
This method modiﬁes the FreeBodyOptions object.
Required arguments
None.
Optional arguments
A String specifying color of the ﬁrst force component. The default value is
"#FF1932".
comp1ColorF
A String specifying color of the ﬁrst moment component. The default value is
"#0000FF".
comp1ColorM
A String specifying color of the second force component. The default value is
"#FF1932".
comp2ColorF
A String specifying color of the second moment component. The default value is
"#0000FF".
comp2ColorM
A String specifying color of the third force component. The default value is
"#FF1932".
comp3ColorF
A String specifying color of the third moment component. The default value is
"#0000FF".
comp3ColorM
A String specifying color of the resultant force. The default value is "#FF1932".
resultantColorF
Abaqus Scripting Reference Guide
2040
FreeBodyOptions object

A String specifying color of the resultant moment. The default value is "#0000FF".
resultantColorM
A String specifying text color for force. The default value is "Yellow".
textColorF
A String specifying text color for moment. The default value is "Yellow".
textColorM
A String specifying text font for force. The default value is "verdana".
textFontF
A String specifying text font for moment. The default value is "verdana".
textFontM
A SymbolicConstant specifying the number format for force. Possible values are
SCIENTIFIC, FIXED, and ENGINEERING. The default value is SCIENTIFIC.
numberFormatF
A SymbolicConstant specifying the number format for moment. Possible values are
SCIENTIFIC, FIXED, and ENGINEERING. The default value is SCIENTIFIC.
numberFormatM
A SymbolicConstant specifying the size scaling mode for force. Possible values are
MODEL_SIZE and SCREEN_SIZE. The default value is MODEL_SIZE.
scaleModeF
A SymbolicConstant specifying the size scaling mode for moment. Possible values
are MODEL_SIZE and SCREEN_SIZE. The default value is MODEL_SIZE.
scaleModeM
A SymbolicConstant specifying the vector display mode. Possible values are
RESULTANT and COMPONENT. The default value is RESULTANT.
vectorDisplay
An Int specifying the number of digits in the force label. The default value is 3.
numDigitsF
An Int specifying the number of digits in the moment label. The default value is 3.
numDigitsM
A Float specifying the size of the force symbol as a percentage of the screen or
model. The default value is 10.0.
sizePercentageF
A Float specifying the size of the moment symbol as a percentage of the screen or
model. The default value is 10.0.
sizePercentageM
A Float specifying the force threshold value. The default value is 10–6.
thresholdF
A Float specifying the moment threshold value. The default value is 10–6.
thresholdM
A Boolean specifying whether to draw force labels. The default value is ON.
drawLabelF
A Boolean specifying whether to draw moment labels. The default value is ON.
drawLabelM
A Boolean specifying whether to show the ﬁrst force component. The default value
is ON.
showComp1F
A Boolean specifying whether to show the ﬁrst moment component. The default
value is ON.
showComp1M
2041
Abaqus Scripting Reference Guide
FreeBodyOptions object

A Boolean specifying whether to show the second force component. The default
value is ON.
showComp2F
A Boolean specifying whether to show the second moment component. The default
value is ON.
showComp2M
A Boolean specifying whether to show the third force component. The default value
is ON.
showComp3F
A Boolean specifying whether to show the third moment component. The default
value is ON.
showComp3M
A Boolean specifying whether to show forces. The default value is ON.
showForce
A Boolean specifying whether to show moments. The default value is ON.
showMoment
A Boolean specifying whether to use a constant length for all arrows. The default
value is OFF.
constantLengthArrow
Return value
None.
Exceptions
None.
Members
The FreeBodyOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2042
FreeBodyOptions object

HistoryVariable object
The HistoryVariable object stores history data.
Access
import visualization
session.odbData[name].historyVariables[i]
Members
The HistoryVariable object has the following members:
A String specifying the history request label. This String is read-only.
name
A String specifying the legend text. This String is read-only.
legendLabel
A tuple of (String, Int, SymbolicConstant) tuples specifying the steps. This sequence is read-only.
Each inner sequence contains the following elements:
steps
•
stepLabel: A String specifying the step label.
•
stepNumber: An Int specifying the step number.
•
procedureDomain: A SymbolicConstant specifying the analysis type of the step, which can
have these values: “TIME,” “FREQUENCY,” or “MODAL.”
2043
HistoryVariable object

OdbData object
The OdbData object stores non persistent values and attributes associated with an open odb for the given session. The
OdbData object has no constructor. Abaqus creates the odbData repository when you import the Visualization module.
Abaqus creates a OdbData object when an odb is opened.
Access
import visualization
session.odbData[name]
setValues(...)
This method modiﬁes the OdbData object.
Required arguments
None.
Optional arguments
A sequence specifying the active frames, or the SymbolicConstant ALL. Each item in the sequence
is a tuple deﬁning the stepName followed by a sequence of expressions specifying frame numbers.
The expression can be any of the following:
activeFrames
•
An Int specifying a single frame number; for example, 1.
•
A String specifying a single frame number ; for example, '7'.
•
A String specifying a sequence of frame numbers; for example, '3:5' and '3:15:3'.
For these expressions a negative number will indicate reverse numbering: -1 is the last frame of
the step, -2 is the one before the last frame. Frame numbering starts at 0.
A sequence of (String, Float) sequences specifying the stepName and the stepPeriod. Alternatively,
this member may take the value ODB_VALUES.
stepPeriods
Return value
None.
Exceptions
None.
Members
The OdbData object can have the following members:
A tuple specifying the active frames, or the SymbolicConstant ALL. Each item in the
sequence is a tuple deﬁning the stepName followed by a sequence of expressions
specifying frame numbers. The expression can be any of the following:
activeFrames
•
An Int specifying a single frame number; for example, 1.
Abaqus Scripting Reference Guide
2044
OdbData object

•
A String specifying a single frame number ; for example, '7'.
•
A String specifying a sequence of frame numbers; for example, '3:5' and
'3:15:3'.
For these expressions a negative number will indicate reverse numbering: -1 is the last
frame of the step, -2 is the one before the last frame. Frame numbering starts at 0.
A tuple of (String, Float) tuples specifying the stepName and the stepPeriod. Alternatively,
this member may take the value ODB_VALUES.
stepPeriods
A repository of HistoryVariable objects specifying the history request label. The repository
is read-only.
historyVariables
A repository of OdbDataStep objects specifying the list of steps. The repository is
read-only.
steps
A repository of OdbDataInstance objects specifying the list of instances. The repository
is read-only.
instances
A repository of OdbDataMaterial objects specifying the list of materials. The repository
is read-only.
materials
A repository of OdbDataSection objects specifying the list of sections. The repository is
read-only.
sections
A repository of OdbDataElementSet objects specifying the list of element sets. The
repository is read-only.
elementSets
A repository of OdbDataNodeSet objects specifying the list of node sets. The repository
is read-only.
nodeSets
A repository of OdbDataSurfaceSet objects specifying the list of surface sets. The
repository is read-only.
surfaceSets
A repository of OdbDataDatumCsys objects specifying the list of coordinate systems
deﬁned in the model. The repository is read-only.
datumCsyses
A repository of CouplingConstraint objects specifying the list of kinematic couplings.
The repository is read-only.
kinematicCouplings
A repository of CouplingConstraint objects specifying the list of distributing couplings.
The repository is read-only.
distributingCouplings
A repository of CouplingConstraint objects specifying the list of shellsolid couplings.
The repository is read-only.
shellSolidCouplings
A repository of RigidBodyConstraint objects specifying the list of rigid body constraints.
The repository is read-only.
rigidbodies
2045
Abaqus Scripting Reference Guide
OdbData object

A repository of MpcConstraint objects specifying the list of multipoint constraints. The
repository is read-only.
multiPointConstraints
A repository of TieConstraint objects specifying the list of Tie constraints. The repository
is read-only.
ties
An OdbDiagnosticData object.
diagnosticData
Abaqus Scripting Reference Guide
2046
OdbData object

OdbDataDatumCsys object
The OdbDataDatumCsys object stores coordinate system data.
Access
import visualization
session.odbData[name].datumCsyses[i]
Members
The OdbDataDatumCsys object can have the following members:
A String specifying the coordinate system name. This String is read-only.
name
A SymbolicConstant specifying the coordinate system type. This String is read-only. Possible
values are CARTESIAN, CYLINDRICAL, and SPHERICAL.
type
A tuple of three Floats specifying a sequence of three ﬂoats specifying the x-Axis vector. The
default value is (1, 0, 0).
xAxis
A tuple of three Floats specifying a sequence of three ﬂoats specifying the y-Axis vector. The
default value is (0, 1, 0).
yAxis
A tuple of three Floats specifying a sequence of three ﬂoats specifying the z-Axis vector. The
default value is (0, 0, 1).
zAxis
A tuple of three Floats specifying a sequence of three ﬂoats specifying the origin. The default
value is (0, 0, 0).
origin
2047
OdbDataDatumCsys object

OdbDataElementSet object
The OdbDataElementSet object stores element set data.
Access
import visualization
session.odbData[name].elementSets[i]
Members
The OdbDataElementSet object has the following members:
A String specifying the set name. This attribute is read-only.
name
A String-to-tuple-of-Ints Dictionary specifying the elements in the set. This attribute is
read-only.
elements
Abaqus Scripting Reference Guide
2048
OdbDataElementSet object

OdbDataFrame object
The OdbDataFrame object.
Access
import visualization
session.odbData[name].steps[i].frames[i]
setValues(...)
This method modiﬁes the OdbDataFrame object.
Required arguments
A Boolean specifying whether to activate the frame.
activateFrame
Optional arguments
A Boolean specifying whether to update the model. The default value is ON
update
Return value
None.
Exceptions
None.
Members
The OdbDataFrame object has no members.
2049
OdbDataFrame object

OdbDataInstance object
The OdbDataInstance object instance data.
Access
import visualization
session.odbData[name].instances[i]
Members
The OdbDataInstance object has the following member:
A String specifying the instance name. This attribute is read-only.
name
Abaqus Scripting Reference Guide
2050
OdbDataInstance object

OdbDataMaterial object
The OdbDataMaterial object stores material data.
Access
import visualization
session.odbData[name].materials[i]
Members
The OdbDataMaterial object has the following members:
A String specifying the set name. This attribute is read-only.
name
A String-to-tuple-of-Ints Dictionary specifying the elements in the set. This attribute is
read-only.
elements
2051
OdbDataMaterial object

OdbDataNodeSet object
The OdbDataNodeSet object stores node set data.
Access
import visualization
session.odbData[name].nodeSets[i]
Members
The OdbDataNodeSet object has the following members:
A String specifying the set name. This attribute is read-only.
name
A String-to-tuple-of-Ints Dictionary specifying the nodes in the set. This attribute is read-only.
nodes
Abaqus Scripting Reference Guide
2052
OdbDataNodeSet object

OdbDataSection object
The OdbDataSection object stores section data.
Access
import visualization
session.odbData[name].sections[i]
Members
The OdbDataSection object has the following members:
A String specifying the set name. This attribute is read-only.
name
A String-to-tuple-of-Ints Dictionary specifying the elements in the set. This attribute is
read-only.
elements
2053
OdbDataSection object

OdbDataStep object
The OdbDataStep object.
Access
import visualization
session.odbData[name].steps[i]
setValues(...)
This method modiﬁes the OdbDataStep object.
Required arguments
A Boolean specifying whether to activate all the frames in the step.
activateFrames
Optional arguments
A Boolean specifying whether to update the model. The default value is ON
update
Return value
None.
Exceptions
None.
Members
The OdbDataStep object has the following member:
An OdbDataFrameArray object specifying the list of frames. The list is read-only.
frames
Abaqus Scripting Reference Guide
2054
OdbDataStep object

OdbDataSurfaceSet object
The OdbDataSurfaceSet object stores surface set data.
Access
import visualization
session.odbData[name].surfaceSets[i]
Members
The OdbDataSurfaceSet object has the following members:
A String specifying the set name. This attribute is read-only.
name
A String-to-tuple-of-Ints Dictionary specifying the elements in the set. This attribute is
read-only.
elements
A String-to-tuple-of-Ints Dictionary specifying the facets corresponding to the elements.
This attribute is read-only.
facets
2055
OdbDataSurfaceSet object

CouplingConstraint object
The CouplingConstraint object.
Access
        import visualization
        session.odbData[name].kinematicCouplings[i]
        session.odbData[name].distributingCouplings[i]
        session.odbData[name].shellSolidCouplings[i]
constraintData(...)
This method returns node numbers of the surface being controlled by the control point.
Required arguments
None.
Optional arguments
None.
Return value
Tuple-of-Ints Dictionary specifying the node numbers on the controlled surface.
Exceptions
None.
Members
The CouplingConstraint object has the following members:
A String specifying the coupling name. This attribute is read-only.
name
A String specifying the type of coupling. This attribute is read-only.
type
Abaqus Scripting Reference Guide
2056
CouplingConstraint object

RigidBodyConstraint object
The RigidBodyConstraint object.
Access
        import visualization
        session.odbData[name].rigidbodies[i]
constraintData(...)
This method returns constraint data if any are associated with the object.
Required arguments
None.
Optional arguments
None.
Return value
A String Value: NONE in the absence of constraint data.
Exceptions
None.
Members
The RigidBodyConstraint object has the following members:
A String specifying the rigidbody constraint name. This attribute is read-only.
name
2057
RigidBodyConstraint object

TieConstraint object
The TieConstraint object.
Access
        import visualization
        session.odbData[name].ties[i]
constraintData(...)
This method returns constraint data if any are associated with the object
Required arguments
None.
Optional arguments
None.
Return value
A tuple containing coordinates of the nodes pertaining to the constraint.
Exceptions
None.
Members
The TieConstraint object has the following members:
A String specifying the tie constraint name. This attribute is read-only.
name
Abaqus Scripting Reference Guide
2058
TieConstraint object

MpcConstraint object
The MpcConstraint object.
Access
        import visualization
        session.odbData[name].multiPointConstraints[i]
constraintData(...)
This method returns constraint data if any are associated with the object.
Required arguments
None.
Optional arguments
None.
Return value
A tuple containing coordinates of the nodes pertaining to the constraint.
Exceptions
None.
Members
The MpcConstraint object has the following members:
A String specifying the multipoint constraint name. This attribute is read-only.
name
2059
MpcConstraint object

OdbDiagnosticData object
The OdbDiagnosticData object.
Access
        import visualization
        session.odbData[name].diagnosticData
Members
The OdbDiagnosticData object has the following members:
A repository of OdbAnalysisError objects.
analysisErrors
A repository of OdbAnalysisWarning objects.
analysisWarnings
A repository of OdbDiagnosticStep objects.
steps
An OdbJobTime object.
jobTime
An OdbNumericalProblemSummary object.
numericalProblemSummary
A boolean specifying whether or not double precision is used for the analysis.
This attribute is read-only.
isXplDoublePrecision
A String specifying the job status after the analysis. This attribute is read-only.
jobStatus
An int specifying the number of domains. This attribute is read-only.
numDomains
An int specifying the number of analysis errors encountered. This attribute
is read-only.
numberOfAnalysisErrors
An int specifying the number of analysis warnings encountered. This attribute
is read-only.
numberOfAnalysisWarnings
An int specifying the number of steps present in the analysis. This attribute
is read-only.
numberOfSteps
Abaqus Scripting Reference Guide
2060
OdbDiagnosticData object

OdbAnalysisError object
The OdbAnalysisError object stores the description of different errors encountered during the analysis.
Access
        import visualization
        session.odbData[name].diagnosticData.analysisErrors[i]
Members
The OdbAnalysisError object has the following members:
An int specifying the increment number where the analysis was aborted. This
attribute is read-only.
incrementNumber
An int specifying the iteration number where the analysis was aborted. This attribute
is read-only.
iterationNumber
An int specifying the attempt number on which the analysis was aborted. This
attribute is read-only.
attemptNumber
String specifying the category of error. This attribute is read-only.
category
An OdbAuxiliaryData object.
data
String specifying the cause of the error. This attribute is read-only.
description
String specifying the exact nature of the problem. This attribute is read-only.
detailStrings
String specifying the exact reason for the error encountered. This attribute is
read-only.
knowledgeItem
An int specifying the number of variations. This attribute is read-only.
numberOfVariations
An int specifying the step number on which the error was encountered. This
attribute is read-only.
stepNumber
2061
OdbAnalysisError object

OdbAnalysisWarning object
The OdbAnalysisWarning object stores the description of different warnings encountered during the analysis.
Access
        import visualization
        session.odbData[name].diagnosticData.analysisWarnings[i]
Members
The OdbAnalysisWarning object has members that are similar to the OdbAnalysisError object.
Abaqus Scripting Reference Guide
2062
OdbAnalysisWarning object

OdbJobTime object
The OdbJobTime object stores the analysis time of a job.
Access
        import visualization
        session.odbData[name].diagnosticData.jobTime
Members
The OdbJobTime object has the following members:
A ﬂoat specifying the systemtime for the analysis. This attribute is read-only.
systemTime
A ﬂoat specifying the usertime for the analysis. This attribute is read-only.
userTime
A ﬂoat specifying the wallclocktime for the analysis. This attribute is read-only.
wallclockTime
2063
OdbJobTime object

OdbNumericalProblemSummary object
The OdbNumericalProblemSummary object stores the numerical problem summary of a job.
Access
        import visualization
        session.odbData[name].diagnosticData.numericalProblemSummary
Members
The OdbNumericalProblemSummary object has the following members:
A boolean specifying whether negative eigenvalues converged during the
analysis. This attribute is read-only.
convergedNegativeEigenValues
A boolean specifying whether numerical singularities converged during
the analysis. This attribute is read-only.
convergedNumericalSingularities
A boolean specifying whether pivot points converged during the analysis.
This attribute is read-only.
convergedZeroPivots
An int specifying the number of zero pivots. This attribute is read-only.
numberOfZeroPivots
An int specifying the number of numerical singularities. This attribute is
read-only.
numberOfNumericalSingularities
An int specifying the number of negative eigenvalues. This attribute is
read-only.
numberOfNegativeEigenValues
Abaqus Scripting Reference Guide
2064
OdbNumericalProblemSummary object

OdbDiagnosticStep object
The OdbDiagnosticStep object stores step data.
Access
        import visualization
        session.odbData[name].diagnosticData.steps[i]
extractData(...)
This method creates a temporary XYData object, with increments on the x-axis and requested output on the y-axis.
Required arguments
An enum specifying the requested output variable for the data table. Possible enum values are
NUM_ATTEMPTS (the number of attempts), NUM_SDI (the number of severe discontinuity
incrementStatistics
iterations), NUM_EQI (the number of equivalent iterations), NUM_ITERS (the number of
iterations), STEP_TIME (the cumulative step time until that increment) or INC_SIZE (the step
time for each increment).
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The OdbDiagnosticStep object has the following members:
A Tuple of the status values. This attribute is read-only.
activeXplStatus
A ﬂoat specifying the characteristic element length for the step. This attribute
is read-only.
characteristicElementLength
A repository of OdbContactDiagnostic objects.
contactDiagnostics
A sequence of string specifying the explicit increment status. This attribute is
read-only.
explicitIncrementStatus
A String specifying the method (Linear or logarithmic) used for extrapolation.
This attribute is read-only.
extrapolation
2065
OdbDiagnosticStep object

A String specifying the method of incrementation (Auto or ﬁxed). This attribute
is read-only.
incrementationScheme
An int specifying the number of completed increments. This attribute is read-only.
incrementsCompleted
A repository of OdbDiagnosticIncrement objects.
increments
A ﬂoat specifying the initial increment size for the step. This attribute is
read-only.
initialTimeIncrement
A boolean specifying whether or not the effects of geometric nonlinearities are
considered. This attribute is read-only.
isNlgeom
A boolean specifying whether or not the step is a perturbation step. This attribute
is read-only.
isPerturbation
A boolean specifying whether or not stabilization for the system in any form is
considered. This attribute is read-only.
isStabilized
A boolean specifying whether the step is static riks. This attribute is read-only.
isRiks
A boolean specifying whether the matrix storage is unsymmetric. This attribute
is read-only.
isUnsymm
A string specifying the method of solving (Direct or Iterative). This attribute is
read-only.
matrixSolver
An int specifying the maximum number of allowed increments in the step. This
attribute is read-only.
maximumNumberOfIncrements
A ﬂoat specifying the size of the allowed maximum time increment in the step.
This attribute is read-only.
maximumTimeIncrement
A ﬂoat specifying the size of the allowed minimum time increment in the step.
This attribute is read-only.
minimumTimeIncrement
A string specifying the name of the step. This attribute is read-only.
name
An int specifying the step number. This attribute is read-only.
number
An int specifying the number of contact diagnostics encountered. This attribute
is read-only.
numberOfContactDiagnostics
An int specifying the number of increments taken in the step to complete the
solution. This attribute is read-only.
numberOfIncrements
An int specifying the number of the explicit status. This attribute is read-only.
numberOfXplStatus
Abaqus Scripting Reference Guide
2066
OdbDiagnosticStep object

A ﬂoat specifying the stabilize factor. This attribute is read-only.
stabilizeFactor
A ﬂoat specifying the time taken for the completion of the step. This attribute
is read-only.
stepTimeCompleted
A ﬂoat specifying the duration for the step. This attribute is read-only.
timePeriod
2067
Abaqus Scripting Reference Guide
OdbDiagnosticStep object

OdbAuxiliaryData object
The OdbAuxiliaryData object stores auxiliary data related to the steps in the analysis.
Access
         import visualization
         session.odbData[name].diagnosticData.analysisErrors[i].data[i]
         session.odbData[name].diagnosticData.analysisWarnings[i].data[i]
session.odbData[name].diagnosticData.steps[i].contactDiagnostics[i].data[i]
Members
The OdbAuxiliaryData object has the following members:
A tuple consisting of element instance names. This attribute is read-only.
elementInstanceNames
A tuple consisting of element label names. This attribute is read-only.
elementLabels
A boolean specifying whether the OdbAuxiliaryData object has values in it.
This attribute is read-only.
hasValues
A tuple consisting of node instance names. This attribute is read-only.
nodeInstanceNames
A tuple consisting of node label names. This attribute is read-only.
nodeLables
Abaqus Scripting Reference Guide
2068
OdbAuxiliaryData object

OdbDiagnosticIncrement object
The OdbDiagnosticIncrement object.
Access
        import visualization
        session.odbData[name].diagnosticData.steps[i].increments[i]
Members
The OdbDiagnosticIncrement object has the following members:
A repository of OdbDiagnosticAttempt objects.
attempts
A ﬂoat specifying the size of the initial increment. This attribute is read-only.
initialSize
A boolean specifying whether the solution converged for the particular increment.
This attribute is read-only.
isConverged
An int specifying the number of attempts for the particular increment. This attribute
is read-only.
numberOfAttempts
An int specifying the number of element diagnostics encountered for the particular
increment. This attribute is read-only.
numberOfElementDiagnostics
A ﬂoat specifying the size of the particular increment. This attribute is read-only.
size
A ﬂoat specifying the amount of step time completed in the particular increment.
This attribute is read-only.
stepTimeCompleted
2069
OdbDiagnosticIncrement object

OdbDiagnosticAttempt object
The OdbDiagnosticAttempt object.
Access
         import visualization
         session.odbData[name].diagnosticData.steps[i].increments[i].attempts[i]
Members
The OdbDiagnosticAttempt object has the following members:
A boolean specifying the state of Auto-stablilization. This attribute is
read-only.
autoStabilize
A boolean specifying the state of convergence for the attempt. This attribute
is read-only.
isConverged
A boolean specifying the state of cutback. This attribute is read-only.
isCutBack
A boolean specifying whether or not reordering is needed. This attribute is
read-only.
needsReordering
An int specifying the number of cutback diagnostics. This attribute is
read-only.
numberOfCutbackDiagnostics
An int specifying the number of iterations for the particular attempt. This
attribute is read-only.
numberOfIterations
An int specifying the number of iterations with severe discontinuities This
attribute is read-only.
numberOfSevereDiscontinuityIterations
A ﬂoat specifying the size of the increment of the particular attempt. This
attribute is read-only.
size
Abaqus Scripting Reference Guide
2070
OdbDiagnosticAttempt object

OdbContactDiagnostics object
The OdbDiagnosticContact object.
Access
        import visualization
        session.odbData[name].diagnosticData.steps[i].contactDiagnostics[i]
Members
The OdbContactDiagnostic object has the following members:
A repository of OdbAuxiliaryData objects. This attribute is read-only.
data
A string specifying the opening/overclosure status of the contact. This attribute is
read-only.
description
A sequence of strings specifying the nature of each of the contact pair. This attribute
is read-only.
detailStrings
A string specifying the type of contact initialization. This attribute is read-only.
type
A string specifying the default format value. This attribute is read-only.
defaultFormats
A string specifying the element description. This attribute is read-only.
elementDescriptions
A string specifying the node description. This attribute is read-only.
nodeDescriptions
2071
OdbContactDiagnostics object

OdbDisplayOptions object
The OdbDisplayOptions object stores the display options associated with an OdbInstance object. This object does not
have a constructor. Abaqus creates the OdbDisplayOptions object when an OdbInstance object is created using the
display options associated with the current viewport at the time of creation.
Access
import assembly
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions
import visualization
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions
import part
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions
Members
The OdbDisplayOptions object has the following members:
A DGCommonOptions object.
commonOptions
A DGSuperimposeOptions object.
superimposeOptions
A DGContourOptions object.
contourOptions
A DGSymbolOptions object.
symbolOptions
A DGOrientationOptions object.
materialOrientationOptions
A DGDisplayBodyOptions object.
displayBodyOptions
Abaqus Scripting Reference Guide
2072
OdbDisplayOptions object

OptionArg object
The OptionArg object is used to store values and attributes as a temporary object to be associated with a viewCutOptions
object. The OptionArg object has only a constructor command.
Access
import visualization
session.defaultOdbDisplay.viewCutOptions.aboveOptions
session.defaultOdbDisplay.viewCutOptions.belowOptions
session.defaultOdbDisplay.viewCutOptions.onOptions
session.viewports[name].layers[name].odbDisplay.viewCutOptions\
.aboveOptions
session.viewports[name].layers[name].odbDisplay.viewCutOptions\
.belowOptions
session.viewports[name].layers[name].odbDisplay.viewCutOptions\
.onOptions
session.viewports[name].odbDisplay.viewCutOptions.aboveOptions
session.viewports[name].odbDisplay.viewCutOptions.belowOptions
session.viewports[name].odbDisplay.viewCutOptions.onOptions
OptionArg(...)
This method creates an OptionArg object.
Path
visualization.OptionArg
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the render style of the plot. Possible values are
WIREFRAME, FILLED, HIDDEN, and SHADED. The default value is WIREFRAME.
renderStyle
A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is FEATURE.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A String specifying the color to be used to plot the edges of the undeformed plot when
renderStyle=WIREFRAME or HIDDEN. The default value is "Green".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the undeformed plot when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
2073
OptionArg object

A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED or
SHADED. The default value is "Green".
ﬁllColor
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency = ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
Return value
An OptionArg object.
Exceptions
RangeError.
Members
The OptionArg object has members with the same names and descriptions as the arguments to the OptionArg  method.
Abaqus Scripting Reference Guide
2074
OptionArg object

DGOrientationOptions object
The DGOrientationOptions object stores values and attributes associated with a material orientation plot. The
DGOrientationOptions object has no constructor command. Abaqus creates an
odbDisplayOptions.materialOrientationOptions member when a display group instance is created, using values from
odbDisplay.materialOrientationOptions.
Access
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.materialOrientationOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.materialOrientationOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.materialOrientationOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.materialOrientationOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.materialOrientationOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.materialOrientationOptions
Members
The DGOrientationOptions object can have the following members:
A Boolean specifying whether axis 1 of the material orientation triad should be displayed.
The default value is ON.
showAxis1
A Boolean specifying whether axis 2 of the material orientation triad should be displayed.
The default value is ON.
showAxis2
A Boolean specifying whether axis 3 of the material orientation triad should be displayed.
The default value is ON.
showAxis3
A Float specifying the size of the material orientation triad. The default value is 6.0.
symbolSize
A SymbolicConstant specifying the thickness of the material orientation triad. Possible
values are VERY_THIN, THIN, MEDIUM, and THICK. The default value is
VERY_THIN.
lineThickness
A SymbolicConstant specifying the orientation used for composites. Possible values are
PLY and LAYUP. The default value is PLY.
orientation
A SymbolicConstant specifying the arrowhead style for the material orientation triad.
Possible values are NONE, FILLED, and WIRE. The default value is NONE.
arrowheadStyle
A SymbolicConstant specifying the scaling basis for the material orientation triad. Possible
values are MODEL_SIZE and SCREEN_SIZE. The default value is MODEL_SIZE.
scaleMode
2075
DGOrientationOptions object

A String specifying the color of axis 1 of the material orientation triad. The default value
is "Cyan".
axis1Color
A String specifying the color of axis 2 of the material orientation triad. The default value
is "Yellow".
axis2Color
A String specifying the color of axis 3 of the material orientation triad. The default value
is "Red".
axis3Color
Abaqus Scripting Reference Guide
2076
DGOrientationOptions object

StreamOptions object
The StreamOptions object stores values and attributes associated with a stream plot. The StreamOptions object has no
constructor command. Abaqus creates a defaultOdbDisplay.streamOptions member when you import the Visualization
module. Abaqus creates a StreamOptions member when it creates the OdbDisplay object, using the values from
defaultOdbDisplay.streamOptions. Abaqus creates the odbDisplay member when a viewport is created, using the
values from defaultOdbDisplay.
StreamOptions objects are accessed in one of two ways:
•
The default stream options. These settings are used as defaults when other streamOptions members are created.
These settings can be set to customize user preferences.
•
The stream options associated with a particular viewport.
Access
import visualization
session.defaultOdbDisplay.streamOptions
session.viewports[name].layers[name].odbDisplay.streamOptions
session.viewports[name].odbDisplay.streamOptions
setValues(...)
This method modiﬁes the StreamOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the method for coloring stream lines. Possible values
are UNIFORM, SPECTRUM, and CONTINUOUS. The default value is UNIFORM.
colorMethod
A String specifying uniform color of the stream lines. The default value is "#FFFF00".
uniformColor
A Float specifying the stream line thickness. The default value is 6.0.
lineThickness
A Boolean specifying whether to show arrows. The default value is OFF.
showArrow
An Int specifying the number of arrows on each stream line. The default value is 10.
numArrows
Return value
None.
Exceptions
None.
2077
StreamOptions object

Members
The StreamOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2078
StreamOptions object

DGSuperimposeOptions object
The DGSuperimposeOptions object stores values and attributes associated with the undeformed shape when the display
contains both the deformed shape and the undeformed shape. The DGSuperimposeOptions object has no constructor
command. Abaqus creates an odbDisplayOptions.superimposeOptions member when a display group instance is
created, using values from odbDisplay.superimposeOptions.
Access
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.superimposeOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.superimposeOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.superimposeOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.superimposeOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.superimposeOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.superimposeOptions
Members
The DGSuperimposeOptions object can have the following members:
A SymbolicConstant specifying the render style of the plot. Possible values are
WIREFRAME, FILLED, HIDDEN, and SHADED. The default value is WIREFRAME.
renderStyle
A SymbolicConstant specifying which edges to plot. Possible values are ALL,
EXTERIOR, FEATURE, FREE, and NONE. The default value is FEATURE.
visibleEdges
NONE can be used only when renderStyle=SHADED.
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeLineStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeLineThickness
A Boolean specifying whether to allow color coded items in the output database to
override the edge and ﬁll color settings. The default value is ON.
colorCodeOverride
A Boolean specifying whether to plot the element labels. The default value is OFF.
elemLabels
A Boolean specifying whether to plot the face labels. The default value is OFF.
faceLabels
A Boolean specifying whether to plot the node labels. The default value is OFF.
nodeLabels
A Boolean specifying whether to plot the node symbols. The default value is OFF.
nodeSymbols
2079
DGSuperimposeOptions object

A SymbolicConstant specifying the node symbol types. Possible values are:
nodeSymbolType
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
The default value is HOLLOW_CIRCLE.
A SymbolicConstant specifying the node symbol size. Possible values are SMALL,
MEDIUM, and LARGE. The default value is SMALL.
nodeSymbolSize
A Boolean specifying whether elements are displayed in a shrunk format. The default
value is OFF.
elementShrink
An Int specifying the percentage to shrink the elements when elementShrink=ON.
Possible values are 0 elementShrinkPercentage  90. The default value is 5.
elementShrinkFactor
A Boolean specifying whether to scale coordinates. The default value is OFF.
coordinateScale
A Boolean specifying whether to draw arrows that indicate the directions of element
and surface normals. The default value is OFF.
normals
A SymbolicConstant specifying whether to draw element normals and surface normals.
Possible values are ELEMENT and SURFACE. The default value is ELEMENT.
normalDisplay
A SymbolicConstant specifying the length of the normal arrows. Possible values are
SHORT, MEDIUM, and LONG. The default value is MEDIUM.
normalArrowLength
A SymbolicConstant specifying the thickness of the normal arrows. Possible values
are VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
normalLineThickness
A SymbolicConstant specifying the arrowhead style of the normal arrows. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
normalArrowheadStyle
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
Abaqus Scripting Reference Guide
2080
DGSuperimposeOptions object

A String specifying the color to be used to plot the edges of the model when
renderStyle=WIREFRAME or HIDDEN. The default value is "Green".
edgeColorWireHide
A String specifying the color to be used to plot the edges of the model when
renderStyle=FILLED or SHADED. The default value is "Black".
edgeColorFillShade
A String specifying the color to be used to ﬁll elements when renderStyle=FILLED
or SHADED. The default value is "Green".
ﬁllColor
A String specifying the label font to be used for all model labels. The default value is
"-*-courier-medium-r-normal-*-*-120-*-*-m-*-*-*".
labelFont
A String specifying the color to be used to plot the element labels. The default value
is "Cyan".
elemLabelColor
A String specifying the color to be used to plot the face labels. The default value is
"Red".
faceLabelColor
A String specifying the color to be used to plot the node labels. The default value is
"Yellow".
nodeLabelColor
A String specifying the color to be used to plot the node symbols. The default value
is "Yellow".
nodeSymbolColor
A String specifying the color to be used to plot the normal to a nonbeam element or
to a surface. The default value is "Red".
faceNormalColor
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Blue".
beamN1Color
A String specifying the color to be used to plot an arrow along the beam 
-direction.
The default value is "Red".
beamN2Color
A String specifying the color to be used to plot an arrow along the tangent to a beam.
The default value is "White".
beamTangentColor
A tuple of three Floats specifying the coordinate scaling in each of the three coordinate
directions when coordinateScale=ON. The default value is (1, 1, 1).
coordinateScaleFactors
2081
Abaqus Scripting Reference Guide
DGSuperimposeOptions object

DGSymbolOptions object
The DGSymbolOptions object stores values and attributes associated with a symbol plot. The DGSymbolOptions
object has no constructor command. Abaqus creates an odbDisplayOptions.symbolOptions member when a display
group instance is created, using values from odbDisplay.symbolOptions.
Access
session.viewports[name].assemblyDisplay.displayGroupInstances[name]\
.odbDisplayOptions.symbolOptions
session.viewports[name].layers[name].assemblyDisplay\
.displayGroupInstances[name].odbDisplayOptions.symbolOptions
session.viewports[name].layers[name].odbDisplay\
.displayGroupInstances[name].odbDisplayOptions.symbolOptions
session.viewports[name].layers[name].partDisplay\
.displayGroupInstances[name].odbDisplayOptions.symbolOptions
session.viewports[name].odbDisplay.displayGroupInstances[name]\
.odbDisplayOptions.symbolOptions
session.viewports[name].partDisplay.displayGroupInstances[name]\
.odbDisplayOptions.symbolOptions
Members
The DGSymbolOptions object can have the following members:
A SymbolicConstant specifying the vector line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
vectorLineThickness
A SymbolicConstant specifying the vector color method. Possible values are
UNIFORM and SPECTRUM. The default value is SPECTRUM.
vectorColorMethod
A SymbolicConstant specifying the tensor color method. Possible values are
UNIFORM and SPECTRUM. The default value is SPECTRUM.
tensorColorMethod
A SymbolicConstant specifying the vector arrowhead style. Possible values are
NONE, FILLED, and WIRE. The default value is WIRE.
vectorArrowheadStyle
An Int specifying the length of vector and tensor symbols. The default value is 6.
arrowSymbolSize
An Int specifying the number of color intervals for vector symbols. The default
value is 12.
vectorIntervalNumber
A Float specifying the factor for randomized sampling. The default value is 1.0.
symbolDensity
A Boolean specifying whether to use constant-length arrows for vector symbols.
The default value is OFF.
constantLengthArrows
An Int specifying the number of color intervals for tensor symbols. The default
value is 12.
tensorIntervalNumber
Abaqus Scripting Reference Guide
2082
DGSymbolOptions object

A SymbolicConstant specifying the line thickness of the tensor symbols. Possible
values are VERY_THIN, THIN, MEDIUM, and THICK. The default value is
VERY_THIN.
tensorLineThickness
A SymbolicConstant specifying the arrowhead style of the tensor symbols. Possible
values are NONE, FILLED, and WIRE. The default value is WIRE.
tensorArrowheadStyle
A SymbolicConstant specifying the number format for tensor. Possible values are
SCIENTIFIC, FIXED, and ENGINEERING. The default value is SCIENTIFIC.
numberFormatT
A SymbolicConstant specifying the number format for vector. Possible values are
SCIENTIFIC, FIXED, and ENGINEERING. The default value is SCIENTIFIC.
numberFormatV
A SymbolicConstant specifying the arrow scaling mode. Possible values are
MODEL_SIZE and SCREEN_SIZE. The default value is MODEL_SIZE.
arrowScaleMode
A Boolean specifying whether to draw tensor labels. The default value is OFF.
drawLabelT
A Boolean specifying whether to draw vector labels. The default value is OFF.
drawLabelV
An Int specifying the number of digits in the tensor label. The default value is 2.
numDigitsT
An Int specifying the number of digits in the vector label. The default value is 2.
numDigitsV
A String specifying the vector color. The default value is "Red".
vectorColor
A String specifying the vector color spectrum name. The default value is "Rainbow".
vectorColorSpectrum
A String specifying the tensor color spectrum name. The default value is "Rainbow".
tensorColorSpectrum
A String specifying the text color for tensor. The default value is "Yellow".
textColorT
A String specifying the text color for vector. The default value is "Yellow".
textColorV
A String specifying the text font for tensor. The default value is "verdana".
textFontT
A String specifying the text font for vector. The default value is "verdana".
textFontV
A String specifying the color of the maximum principal tensor symbols. The default
value is "Red".
tensorMaxPrinColor
A String specifying the color of the minimum principal tensor symbols. The default
value is "Cyan".
tensorMinPrinColor
A String specifying the color of the intermediate principal tensor symbols. The
default value is "Yellow".
tensorMidPrinColor
2083
Abaqus Scripting Reference Guide
DGSymbolOptions object

A String specifying the color of the selected principal tensor symbols. The default
value is "Red".
tensorSelectedPrinColor
Abaqus Scripting Reference Guide
2084
DGSymbolOptions object

ViewCutOptions object
The ViewCutOptions object stores values and attributes associated with a view cut plot. The ViewCutOptions object
has no constructor command. Abaqus creates a defaultOdbDisplay.viewCutOptions member when you import the
Visualization module. Abaqus creates an viewCutOptions member when it creates the OdbDisplay object, using the
values from defaultOdbDisplay.viewCutOptions. Abaqus creates the odbDisplay member when a viewport is created,
using the values from defaultOdbDisplay.
ViewCutOptions objects are accessed in one of two ways:
•
The default view cut options. These settings are used as defaults when other viewCutOptions members are created.
These settings can be set to customize user preferences.
•
The view cut options associated with a particular viewport.
Access
import visualization
session.defaultOdbDisplay.viewCutOptions
session.viewports[name].layers[name].odbDisplay.viewCutOptions
session.viewports[name].odbDisplay.viewCutOptions
setValues(...)
This method modiﬁes the ViewCutOptions object.
Required arguments
None.
Optional arguments
A ViewCutOptions object from which values are to be copied. If other arguments are
also supplied to setValues, they will override the values in options. The default
value is None.
options
None or an OptionArg object specifying values to be used for deﬁning the options
applicable on the model below the cut. The default value is None.
belowOptions
A Boolean specifying whether to use the options deﬁned for displaying the model
below the cut. The default value is OFF.
useBelowOptions
None or an OptionArg object specifying values to be used for deﬁning the options
applicable on the model on the cut. The default value is None.
onOptions
A Boolean specifying whether to use the options deﬁned for displaying the model on
the cut. The default value is OFF.
useOnOptions
None or an OptionArg object specifying values to be used for deﬁning the options
applicable on the model above the cut. The default value is None.
aboveOptions
2085
ViewCutOptions object

A Boolean specifying whether to use the options deﬁned for displaying the model
above the cut. The default value is OFF.
useAboveOptions
A SymbolicConstant specifying the domain through which the free body cuts. Possible
values are CURRENT_DISPLAY_GROUP and WHOLE_MODEL. The default value
is CURRENT_DISPLAY_GROUP.
freeBodyCutThru
A SymbolicConstant specifying the domain through which the free body steps. Possible
values are ACTIVE_CUT_RANGE and PREDEFINED_PATH. The default value is
ACTIVE_CUT_RANGE.
freeBodyStepThru
An Int specifying number of free bodies per view cut. The default value is 1.
numCutFreeBody
A Boolean specifying whether to display slicing. The default value is OFF.
displaySlicing
A Boolean specifying whether to slice at path nodes. The default value is OFF.
slicingAtPathNodes
A Boolean specifying whether to put the summation point at the path. The default value
is ON.
freeBodySumOnPath
A Float specifying free body minimum value. The default value is 0.0.
cutFreeBodyMin
A Float specifying free body maximum value. The default value is 0.0.
cutFreeBodyMax
A SymbolicConstant specifying whether to show the heat ﬂow rate when available.
Possible values are ON and OFF. The default value is ON.
showHeatFlowRate
A SymbolicConstant specifying the summation location for the free body cut. Possible
values are CENTROID and SPECIFY. The default value is CENTROID.
summationLoc
A SymbolicConstant specifying the component resolution choice for the free body cut.
Possible values are NORMAL_TANGENTIAL and CSYS. The default value is
NORMAL_TANGENTIAL.
componentResolution
The SymbolicConstant GLOBAL or a String specifying the coordinate system name
for the free body cut's component resolution. The default value is GLOBAL.
csysName
A String specifying the name of the path along which slicing occurs. The default value
is an empty string.
pathName
A sequence of three Floats specifying the summation point for the free body cut. The
default value is (0, 0, 0).
summationPoint
A sequence of three Floats specifying the Y axis for free body component resolution.
The default value is (0, 1, 0).
yAxis
Return value
None.
Abaqus Scripting Reference Guide
2086
ViewCutOptions object

Exceptions
RangeError.
Members
The ViewCutOptions object can have the following members:
A Boolean specifying whether to use the options deﬁned for displaying the model
below the cut. The default value is OFF.
useBelowOptions
A Boolean specifying whether to use the options deﬁned for displaying the model on
the cut. The default value is OFF.
useOnOptions
A Boolean specifying whether to use the options deﬁned for displaying the model
above the cut. The default value is OFF.
useAboveOptions
An Int specifying number of free bodies per view cut. The default value is 1.
numCutFreeBody
A Boolean specifying whether to display slicing. The default value is OFF.
displaySlicing
A Boolean specifying whether to slice at path nodes. The default value is OFF.
slicingAtPathNodes
A Boolean specifying whether to put the summation point at the path. The default
value is ON.
freeBodySumOnPath
A Float specifying free body minimum value. The default value is 0.0.
cutFreeBodyMin
A Float specifying free body maximum value. The default value is 0.0.
cutFreeBodyMax
A SymbolicConstant specifying the domain through which the free body cuts. Possible
values are CURRENT_DISPLAY_GROUP and WHOLE_MODEL. The default value
is CURRENT_DISPLAY_GROUP.
freeBodyCutThru
A SymbolicConstant specifying the domain through which the free body steps. Possible
values are ACTIVE_CUT_RANGE and PREDEFINED_PATH. The default value is
ACTIVE_CUT_RANGE.
freeBodyStepThru
A SymbolicConstant specifying whether to show the heat ﬂow rate when available.
Possible values are ON and OFF. The default value is ON.
showHeatFlowRate
A SymbolicConstant specifying the summation location for the free body cut. Possible
values are CENTROID and SPECIFY. The default value is CENTROID.
summationLoc
A SymbolicConstant specifying the component resolution choice for the free body
cut. Possible values are NORMAL_TANGENTIAL and CSYS. The default value is
NORMAL_TANGENTIAL.
componentResolution
None or an OptionArg object specifying values to be used for deﬁning the options
applicable on the model below the cut. The default value is None.
belowOptions
2087
Abaqus Scripting Reference Guide
ViewCutOptions object

None or an OptionArg object specifying values to be used for deﬁning the options
applicable on the model on the cut. The default value is None.
onOptions
None or an OptionArg object specifying values to be used for deﬁning the options
applicable on the model above the cut. The default value is None.
aboveOptions
The SymbolicConstant GLOBAL or a String specifying the coordinate system name
for the free body cut's component resolution. The default value is GLOBAL.
csysName
A String specifying the name of the path along which slicing occurs. The default value
is an empty string.
pathName
A tuple of three Floats specifying the summation point for the free body cut. The
default value is (0, 0, 0).
summationPoint
A tuple of three Floats specifying the Y axis for free body component resolution. The
default value is (0, 1, 0).
yAxis
Abaqus Scripting Reference Guide
2088
ViewCutOptions object

DetailPlotOptions object
The DetailPlotOptions object stores values and attributes associated with a Viewport object. The DetailPlotOptions
object has no constructor command. Abaqus creates the detailPlotOptions member whenever a Viewport is created.
Access
session.viewports[name].detailPlotOptions
Members
The DetailPlotOptions object has the following member:
A PlyStackPlotOptions object.
plyStackPlotOptions
2089
DetailPlotOptions object

PlyStackPlotOptions object
The PlyStackPlotOptions object stores values and attributes associated with aViewport object. The PlyStackPlotOptions
object has no constructor command. Abaqus creates the detailPlotOptions.plyStackPlotPlotOptions member whenever
a Viewport is created.
Access
session.viewports[name].detailPlotOptions.plyStackPlotOptions
setValues(...)
This method modiﬁes the PlyStackPlotOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying how the plies in the viewport are rendered. Possible
values are WIRE_FRAME, FILLED, and SHADED. The default value is SHADED.
renderStyle
A Boolean specifying whether to draw the edges for the plies. The default value is
OFF.
showEdges
A SymbolicConstant specifying the edge line style. Possible values are SOLID,
DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
edgeStyle
A SymbolicConstant specifying the edge line thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
edgeThickness
A SymbolicConstant specifying whether to display the plies in an unsymmetric
staircase fashion or symmetric staircase fashion. Possible values are
UNSYMMETRIC and SYMMETRIC. The default value is UNSYMMETRIC.
plyDisplay
An Int specifying the start ply. The default value is 1.
startLayer
An Int specifying the number of plies to show. The default value is 30.
numLayers
A String specifying the ply color for the even numbered plies. The numbering is
based on the displayed plies and not on the actual ply number in the layup. The
default value is "#A2B3FF".
evenNumPlyColor
A String specifying the ply color for the odd numbered plies. The numbering is based
on the displayed plies and not on the actual ply number in the layup. The default
value is "#ECC9AD".
oddNumPlyColor
A Boolean specifying whether to show the ﬁbers. The default value is ON.
showFibers
Abaqus Scripting Reference Guide
2090
PlyStackPlotOptions object

A String specifying the ﬁber color. The default value is "Red".
ﬁberColor
A SymbolicConstant specifying the ﬁber style. Possible values are SOLID, DASHED,
DOTTED, and DOT_DASH. The default value is SOLID.
ﬁberStyle
A SymbolicConstant specifying the ﬁber thickness. Possible values are VERY_THIN,
THIN, MEDIUM, and THICK. The default value is VERY_THIN.
ﬁberThickness
A Float specifying the spacing between the ﬁbers. The default value is 0.1.
ﬁberSpacing
A Boolean specifying whether to show the reference surface. The default value is
OFF.
showReferencePlane
A String specifying the reference surface color. The default value is "White".
referenceSurfaceColor
A Boolean specifying whether to set translucency. The default value is OFF.
translucency
A Float specifying the translucency factor when translucency=ON. Possible values
are 0.0 translucencyFactor  1.0. The default value is 0.3.
translucencyFactor
A Boolean specifying whether to use depth sorting. The default value is OFF.
translucencySort
A Boolean specifying whether to show the reference outline. The default value is
OFF.
showReferenceOutline
A String specifying the reference outline color. The default value is "Red".
referenceOutlineColor
A SymbolicConstant specifying the reference outline style. Possible values are
SOLID, DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
referenceOutlineStyle
A SymbolicConstant specifying the reference outline thickness. Possible values are
VERY_THIN, THIN, MEDIUM, and THICK. The default value is VERY_THIN.
referenceOutlineThickness
A String specifying the font for all the labels. The default value is
“-*-verdana-medium-r-normal-*-*-80-*-*-p-*-*-*” on Windows and
allLabelsFont
“-*-verdana-medium-r-normal-*-*-90-*-*-p-*-*-*” on Linux platforms. The default
value is an empty string.
A Boolean specifying whether to show the material names. The default value is OFF.
showMaterialNames
A String specifying the material names text color. The default value is "Green".
materialNamesColor
A Boolean specifying whether to show the orientation names or the ﬁber angles.
The default value is OFF.
showOrientationNames
A String specifying the orientation names ﬁber angles text color. The default value
is "Orange".
orientationNamesColor
2091
Abaqus Scripting Reference Guide
PlyStackPlotOptions object

A Boolean specifying whether to show the state block. The default value is ON.
showStateBlock
A String specifying the state block text color. The default value is "White".
stateBlockColor
A Boolean specifying whether to show the ply names. The default value is ON.
showPlyNames
A String specifying the ply names text color. The default value is "Yellow".
plyNamesColor
A Boolean specifying whether to show the thickness labels. The default value is ON.
showThicknessLabels
A String specifying the thickness labels text color. The default value is "Red".
thicknessLabelsColor
A Boolean specifying whether to show the through thickness integration points. The
default value is OFF.
showIntPoints
A String specifying the through thickness integration points color. The default value
is "Blue".
intPointsColor
A Float specifying the size of the ply in the X-direction. The default value is 1.5.
sizeX
A Float specifying the size of the ply in the Y-direction. The default value is 1.0.
sizeY
A Float specifying the size of the ply in the Z-direction. The default value is 0.8.
sizeZ
Return value
None.
Exceptions
None.
Members
The PlyStackPlotOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2092
PlyStackPlotOptions object

MdbData object
The MdbData object has no constructor. Abaqus creates an MdbData object when a cae ﬁle is opened or a new model
is created. There is one MdbData for each model in session. MdbData is updated when it is displayed in a viewport.
Access
import visualization
session.mdbData[name]
Members
The MdbData object has the following members:
A tuple of (String, Float) tuples specifying the stepName and the stepPeriod.
stepPeriods
A repository of MdbDataStep objects specifying the list of steps. The repository is
read-only.
steps
A repository of MdbDataInstance objects specifying the list of instances. The repository
is read-only.
instances
2093
MdbData object

MdbDataFrame object
The MdbDataFrame object. There is one and only MdbDataFrame in a MdbDataStep.
Access
import visualization
session.mdbData[name].steps[i].frames[i]
Members
The MdbDataFrame object has no members.
Abaqus Scripting Reference Guide
2094
MdbDataFrame object

MdbDataInstance object
The MdbDataInstance object instance data. It corresponds to same named part instance with a mesh in the cae model.
Access
import visualization
session.mdbData[name].instances[i]
Members
The MdbDataInstance object has the following member:
A String specifying the instance name. This attribute is read-only.
name
2095
MdbDataInstance object

MdbDataStep object
The MdbDataStep object.It corresponds to same named step in the cae model.
Access
import visualization
session.mdbData[name].steps[i]
Members
The MdbDataStep object has the following member:
A MdbDataFrameArray object specifying the list of frames. The list is read-only. There is
only one frame in a step.
frames
Abaqus Scripting Reference Guide
2096
MdbDataStep object

Plug-in registration commands
Plug-in commands register kernel and GUI plug-ins in either the Plug-ins menu or in a toolbox.
Plug-in registration commands for accessing both kernel and GUI plug-ins are located in the Abaqus GUI Toolkit
Reference Guide.
2097
Plug-in registration commands

Predefined field commands
A PredeﬁnedField object stores the non-propagating data of a predeﬁned ﬁeld as well as a number of instances
of the corresponding PredeﬁnedFieldState object.
The PredeﬁnedFieldState object stores the propagating data of the predeﬁned ﬁeld in a single step. A speciﬁc
type of PredeﬁnedField object and a speciﬁc type of PredeﬁnedFieldState object are designed for each type of
predeﬁned ﬁeld. Instances of the PredeﬁnedFieldState object are created and deleted internally by its corresponding
PredeﬁnedField object.
In this section:
•
PredefinedField object
•
Field object
•
FieldState object
•
FluidCavityPressure object
•
IMAField object
•
IMARegion object
•
InitialState object
•
KinematicHardening object
•
MaterialAssignment object
•
PredefinedFieldState object
•
Stress object
•
Temperature object
•
TemperatureState object
•
Velocity object
Abaqus Scripting Reference Guide
2098

PredefinedField object
The PredeﬁnedField object is the base object for the objects in the predeﬁned ﬁeld repository. The methods and
members of the PredeﬁnedField object are common to all objects derived from PredeﬁnedField.
An instance of any PredeﬁnedField object can be obtained through the predeﬁned ﬁeld repository of the Model object.
An instance of any PredeﬁnedFieldState object can be obtained through the predeﬁned ﬁeld repository of the Step
object.
Access
import load
mdb.models[name].predefinedFields[name]
move(...)
This method moves a speciﬁc PredeﬁnedFieldState object from one step to a different step.
Required arguments
A String specifying the name of the step from which the PredeﬁnedFieldState object
is moved.
fromStepName
A String specifying the name of the step to which the PredeﬁnedFieldState object
is moved.
toStepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
resume()
This method resumes the predeﬁned ﬁeld that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
2099
PredefinedField object

suppress()
This method suppresses the predeﬁned ﬁeld.
Arguments
None.
Return value
None.
Exceptions
None.
delete(...)
This method allows you to delete existing ﬁelds.
Required arguments
A sequence of Ints specifying the index of each ﬁeld to delete.
indices
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The PredeﬁnedField object can have the following members:
A String specifying the repository key.
name
A Region object specifying the region to which the predeﬁned ﬁeld is applied. Region is ignored
if the predeﬁned ﬁeld has an instances member available. Region is also ignored if the predeﬁned
region
ﬁeld has a distributionType member available, and distributionType=FROM_FILE or
FROM_FILE_AND_USER_DEFINED.
Abaqus Scripting Reference Guide
2100
PredefinedField object

Field object
The Field object stores the data for ﬁeld predeﬁned ﬁelds.
The Field object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
Field(...)
This method creates a Field object.
Path
mdb.models[name].Field
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the predeﬁned ﬁeld is created.
createStepName
A Region object specifying the region to which the predeﬁned ﬁeld is applied. Region is
ignored if the predeﬁned ﬁeld has a distributionType member available, and
distributionType=FROM_FILE.
region
Optional arguments
A String specifying the scalar nodal output variable that will be read from an output database
and used to initialize a speciﬁed predeﬁned ﬁeld. This argument is a required argument if
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
outputVariable
An Int specifying the ﬁeld variable number.
ﬁeldVariableNum
A SymbolicConstant specifying how the predeﬁned ﬁeld varies spatially. Possible values
are UNIFORM, USER_DEFINED, FROM_FILE, FIELD,
distributionType
FROM_FILE_AND_USER_DEFINED, and DISCRETE_FIELD. The default value is
UNIFORM.
A SymbolicConstant specifying how the predeﬁned ﬁeld is distributed over the cross-section
of the region. Possible values are
crossSectionDistribution
•
CONSTANT_THROUGH_THICKNESS
•
GRADIENTS_THROUGH_SHELL_CS
•
GRADIENTS_THROUGH_BEAM_CS
•
POINTS_THROUGH_SECTION
The default value is CONSTANT_THROUGH_THICKNESS.
2101
Field object

A String specifying the name of the AnalyticalField or DiscreteField object associated with
this predeﬁned ﬁeld. The ﬁeld argument applies only when distributionType=FIELD or
distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeld
A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the predeﬁned ﬁeld has no amplitude reference. The default value
is UNSET.
amplitude
Note:
amplitude should be given only if it is valid for the speciﬁed step.
A String specifying the name of the ﬁle from which the Field values are to be read when
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
ﬁleName
An Int specifying the ﬁrst step from which Field values are to be read or the
SymbolicConstant FIRST_STEP or LAST_STEP. This argument is valid only when
beginStep
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
An Int specifying the ﬁrst increment of the step set in beginStep or the SymbolicConstants
STEP_START or STEP_END. This argument is valid only when
beginIncrement
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
An Int specifying the last step from which Field values are to be read or the
SymbolicConstants FIRST_STEP and LAST_STEP. This argument is valid only when
endStep
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
An Int specifying the last increment of the step set in endStep or the SymbolicConstants
STEP_START and STEP_END. This argument is valid only when
endIncrement
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
A SymbolicConstant specifying whether to interpolate a ﬁeld read from an output database
or results ﬁle. Possible values are OFF, ON, or MIDSIDE_ONLY. The default value is
OFF.
interpolate
A Sequence of Doubles specifying the Field values when distributionType=UNIFORM or
FIELD. The value of the magnitudes argument is a function of the crossSectionDistribution
argument, as shown in the following list:
magnitudes
•
If crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, magnitudes is
a Double specifying the Field.
•
If crossSectionDistribution=GRADIENTS_THROUGH_SHELL_CS, magnitudes is a
sequence of Doubles specifying the mean value and the gradient in the thickness direction.
•
If crossSectionDistribution=GRADIENTS_THROUGH_BEAM_CS, magnitudes is a
sequence of Doubles specifying the mean value, the gradient in the N1 direction, and
the gradient in the N2 direction.
Abaqus Scripting Reference Guide
2102
Field object

•
If crossSectionDistribution=POINTS_THROUGH_SECTION, magnitudes is a sequence
of Doubles specifying the Field at each point.
Return value
A Field object.
Exceptions
None.
move(...)
This method moves the FieldState object from one step to a different step.
Required arguments
A String specifying the name of the step from which the PredeﬁnedFieldState is
moved.
fromStepName
A String specifying the name of the step to which the PredeﬁnedFieldState is moved.
toStepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
setValues(...)
This method modiﬁes the data for an existing Field object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Field  method, except for the name and
createStepName arguments.
Return value
None.
Exceptions
None.
2103
Abaqus Scripting Reference Guide
Field object

setValuesInStep(...)
This method modiﬁes the propagating data for an existing Field object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the predeﬁned ﬁeld is modiﬁed.
stepName
Optional arguments
The optional arguments to setValuesInStep are the same as the optional arguments to the Field  method, except
for the distributionType and crossSectionDistribution arguments.
Return value
None.
Exceptions
None.
Members
The Field object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying how the predeﬁned ﬁeld varies spatially. Possible values are
UNIFORM, USER_DEFINED, FROM_FILE, FIELD, FROM_FILE_AND_USER_DEFINED,
and DISCRETE_FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField or DiscreteField object associated with this
predeﬁned ﬁeld. The ﬁeld argument applies only when distributionType=FIELD or
distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeld
A Region object specifying the region to which the predeﬁned ﬁeld is applied. Region is ignored
if the predeﬁned ﬁeld has an instances member available. Region is also ignored if the predeﬁned
region
ﬁeld has a distributionType member available, and distributionType=FROM_FILE or
FROM_FILE_AND_USER_DEFINED.
Corresponding analysis keywords
•
*INITIAL CONDITIONS, TYPE=FIELD
•
*FIELD
Abaqus Scripting Reference Guide
2104
Field object

FieldState object
The FieldState object stores the propagating data of a ﬁeld in a step. One instance of this object is created internally
by the Field object for each step.
The FieldState object has no constructor or methods.
The FieldState object is derived from the PredeﬁnedFieldState object.
Access
import load
mdb.models[name].steps[name].predefinedFieldStates[name]
Members
The FieldState object can have the following members:
A String specifying the scalar nodal output variable that will be read from an output database
and used to initialize a speciﬁed predeﬁned ﬁeld. This argument is a required argument if
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
outputVariable
A SymbolicConstant specifying the propagation state of the ﬁleName member. Possible values
are UNSET, SET, and UNCHANGED.
ﬁleNameState
A SymbolicConstant or an Int specifying the ﬁrst step from which ﬁeld values are to be read.
This argument is valid only when distribution=FROM_FILE or
beginStep
distribution=FROM_FILE_AND_USER_DEFINED. Possible values are FIRST_STEP,
LAST_STEP, and NONE. The default value is NONE.
A SymbolicConstant specifying the propagation state of the beginStep member. Possible values
are UNSET, SET, and UNCHANGED.
beginStepState
None or an Int specifying the ﬁrst increment of the step set in beginStep or the
SymbolicConstants STEP_START or STEP_END. This argument is valid only when
beginIncrement
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
A SymbolicConstant specifying the propagation state of the beginIncrement member. Possible
values are UNSET, SET, and UNCHANGED.
beginIncrementState
None or an Int specifying the last step from which ﬁeld values are to be read or the
SymbolicConstants FIRST_STEP and LAST_STEP. This argument is valid only when
endStep
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
A SymbolicConstant specifying the propagation state of the endStep member. Possible values
are UNSET, SET, and UNCHANGED.
endStepState
None or an Int specifying the last increment of the step set in endStep or the SymbolicConstants
STEP_START and STEP_END. This argument is valid only when
endIncrement
2105
FieldState object

distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
A SymbolicConstant specifying the propagation state of the endIncrement member. Possible
values are UNSET, SET, and UNCHANGED.
endIncrementState
A SymbolicConstant specifying the propagation state of the amplitudeState member. Possible
values are UNSET, SET, and UNCHANGED.
amplitudeState
A String specifying the name of the ﬁle from which the ﬁeld values are to be read when
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
ﬁleName
The SymbolicConstant UNSET or a String specifying the name of the amplitude reference. The
SymbolicConstant UNSET should be used if the predeﬁned ﬁeld has no amplitude reference.
The default value is UNSET.
amplitude
Note: amplitude should be given only if it is valid for the speciﬁed step.
A tuple of SymbolicConstants specifying the propagation state of each item of the magnitudes
member. Possible values are UNSET, SET, and UNCHANGED.
magnitudesState
A tuple of Floats specifying the ﬁeld values when distributionType=UNIFORM or
distributionType=FIELD. The value of the magnitudes argument is a function of the
crossSectionDistribution argument, as shown in the following list:
magnitudes
•
If crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, magnitudes is a
Double specifying the ﬁeld.
•
If crossSectionDistribution=GRADIENTS_THROUGH_SHELL_CS, magnitudes is a
sequence of Doubles specifying the mean value and the gradient in the thickness direction.
•
If crossSectionDistribution=GRADIENTS_THROUGH_BEAM_CS, magnitudes is a
sequence of Doubles specifying the mean value, the gradient in the N1 direction, and the
gradient in the N2 direction.
•
If crossSectionDistribution=POINTS_THROUGH_SECTION, magnitudes is a sequence
of Doubles specifying the ﬁeld at each point.
A SymbolicConstant specifying the propagation state of the PredeﬁnedFieldState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
DEACTIVATED_TO_INITIAL
•
NO_LONGER_ACTIVE
•
RESET_TO_INITIAL
Abaqus Scripting Reference Guide
2106
FieldState object

•
TO_BE_COMPUTED
•
PROPAGATED_FROM_COMPUTED
•
BUILT_INTO_BASE_STATE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
This member exists in all PredeﬁnedFieldState objects, but different predeﬁned ﬁelds use
different subsets of the entire list of possible values depending on propagation rules.
2107
Abaqus Scripting Reference Guide
FieldState object

FluidCavityPressure object
The FluidCavityPressure object stores the data for initial ﬂuid cavity pressures. The base classregion argument can
not be specifed with this object.
The FluidCavityPressure object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
FluidCavityPressure(...)
This method creates a FluidCavityPressure object.
Path
mdb.models[name].FluidCavityPressure
Required arguments
A String specifying the repository key.
name
A String specifying the name of a Fluid Cavity Interaction.
ﬂuidCavity
A Float specifying the initial ﬂuid pressure.
ﬂuidPressure
Optional arguments
None.
Return value
A FluidCavityPressure object.
Exceptions
None.
setValues(...)
This method modiﬁes the FluidCavityPressure object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FluidCavityPressure  method, except
for the name argument.
Abaqus Scripting Reference Guide
2108
FluidCavityPressure object

Return value
None.
Exceptions
None.
Members
The FluidCavityPressure object has members with the same names and descriptions as the arguments to the
FluidCavityPressure  method.
In addition, the FluidCavityPressure object can have the following member:
A Region object on which the ﬂuidCavity interaction is speciﬁed.
region
Corresponding analysis keywords
•
*INITIAL CONDITIONS, TYPE=FLUID PRESSURE
2109
Abaqus Scripting Reference Guide
FluidCavityPressure object

IMAField object
A IMAField is an object used to deﬁne material instance name volume fractions for the MaterialAssignment predeﬁned
ﬁeld.
Access
import load
mdb.models[name].predefinedFields[name].fieldList
Members
The IMAField object can have the following members:
A Region object specifying the sub-region of the selected part instance to which the volume
fractions will be applied.
region
A tuple of Strings specifying the name of the discrete ﬁelds that contain the volume fraction
data. The length of the tuple corresponds to the number of material instance names, as
established by the assigned Eulerian section.
discFieldList
Abaqus Scripting Reference Guide
2110
IMAField object

IMARegion object
A IMARegion is an object used to deﬁne material instance name volume fractions for the MaterialAssignment predeﬁned
ﬁeld.
Access
import load
mdb.models[name].predefinedFields[name].assignmentList
Members
The IMARegion object can have the following members:
A Region object specifying the sub-region of the selected part instance to which the volume
fractions will be applied.
region
A tuple of Floats specifying the volume fractions, per material instance name. The length of
the tuple corresponds to the number of material instance names, as established by the assigned
Eulerian section.
fractionList
2111
IMARegion object

InitialState object
The InitialState object stores the data for an initial state predeﬁned ﬁeld.
The InitialState object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
InitialState(...)
This method creates an InitialState predeﬁned ﬁeld object.
Path
mdb.models[name].InitialState
Required arguments
A String specifying the repository key.
name
A PartInstanceArray object specifying the instances to which the predeﬁned ﬁeld is
applied.
instances
A String specifying the name of the job that generated the initial state data.
ﬁleName
Optional arguments
The SymbolicConstant LAST_STEP or an Int specifying the step from which the
initial state values are to be read or the SymbolicConstant LAST_STEP. The default
value is LAST_STEP.
endStep
The SymbolicConstant STEP_END or an Int specifying the increment, interval or
iteration of the step set in endStep or the SymbolicConstant STEP_END. The default
value is STEP_END.
endIncrement
A Boolean specifying whether to update the reference conﬁguration based on the
import data. The default value is OFF.
updateReferenceConﬁguration
Return value
An InitialState object.
Exceptions
None.
Abaqus Scripting Reference Guide
2112
InitialState object

setValues(...)
This method modiﬁes the InitialState object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the InitialState  method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The InitialState object has members with the same names and descriptions as the arguments to the InitialState  method.
Corresponding analysis keywords
•
*INSTANCE
2113
Abaqus Scripting Reference Guide
InitialState object

KinematicHardening object
The KinematicHardening object stores the data for initial equivalent plastic strains and, if relevant, the initial backstress
tensor.
The KinematicHardening object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
KinematicHardening(...)
This method creates a KinematicHardening object.
Path
mdb.models[name].KinematicHardening
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the predeﬁned ﬁeld is applied.
region
Optional arguments
An Int specifying the number of backstresses. The default value is 1.
numBackStress
A sequence of Floats specifying the initial equivalent plastic strain.
equivPlasticStrain
A sequence of sequences of Floats specifying the initial backstress tensor for kinematic
hardening models. The default value is an empty sequence.
backStress
A sequence of Ints specifying section point numbers. This argument is valid only when
deﬁnition=SECTION_PTS.
sectPtNum
A SymbolicConstant specifying different types of kinematic hardening. Possible values
are KINEMATIC_HARDENING, CRUSHABLE_FOAM, REBAR, SECTION_PTS,
and USER_DEFINED. The default value is KINEMATIC_HARDENING.
deﬁnition
A sequence of Strings specifying rebar layer names. This argument is valid only when
deﬁnition=REBAR.
rebarLayerNames
A SymbolicConstant specifying whether the load is uniform. Possible values are
MAGNITUDE and ANALYTICAL_FIELD. The default value is MAGNITUDE.
distributionType
Abaqus Scripting Reference Guide
2114
KinematicHardening object

Return value
A KinematicHardening object.
Exceptions
None.
setValues(...)
This method modiﬁes the KinematicHardening object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the KinematicHardening  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The KinematicHardening object has members with the same names and descriptions as the arguments to the
KinematicHardening  method.
In addition, the KinematicHardening object can have the following member:
A String specifying the name of the AnalyticalField object associated with this predeﬁned ﬁeld. The
ﬁeld argument applies only when distributionType=ANALYTICAL_FIELD. The default value is an
empty string.
ﬁeld
Corresponding analysis keywords
•
*INITIAL CONDITIONS, TYPE=HARDENING
2115
Abaqus Scripting Reference Guide
KinematicHardening object

MaterialAssignment object
The MaterialAssignment object stores the data for an initial material assignment predeﬁned ﬁeld, for use with an
Eulerian analysis.
The MaterialAssignment object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
MaterialAssignment(...)
This method creates a MaterialAssignment predeﬁned ﬁeld object.
Path
mdb.models[name].MaterialAssignment
Required arguments
A String specifying the repository key.
name
A PartInstanceArray object specifying the part instances to which the predeﬁned ﬁeld is
applied. All instances must be assigned the same Eulerian section.
instanceList
Optional arguments
A Boolean specifying whether the volume fraction data will be uniform or deﬁned by discrete
ﬁelds. The default value is OFF.
useFields
A sequence of tuples specifying the uniform volume fractions to be assigned. This argument is
valid only when useFields=FALSE. Each tuple contains two entries:
assignmentList
•
A Region object.
•
A tuple of Floats specifying the uniform volume fraction values. The length of the tuple must
match the number of material instance names speciﬁed in the Eulerain section assigned to part
instances speciﬁed by instanceList.
A sequence of tuples specifying the discrete volume fractions to be assigned. This argument is
valid only when useFields=TRUE. Each tuple contains two entries:
ﬁeldList
•
A Region object.
•
A tuple of Strings specifying Discrete Field names. The length of the tuple must match the
number of material instance names speciﬁed in the Eulerain section assigned to part instances
speciﬁed by instanceList.
Abaqus Scripting Reference Guide
2116
MaterialAssignment object

A sequence of three Ints specifying colors used to display the material instance assignments. This
is a sequence of R,G,B colors, where the values are represented by integers between 0 and 255.
The default value is an empty sequence.
colorList
Return value
A MaterialAssignment object.
Exceptions
None.
setValues(...)
This method modiﬁes the MaterialAssignment object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MaterialAssignment  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The MaterialAssignment object has members with the same names and descriptions as the arguments to the
MaterialAssignment  method.
In addition, the MaterialAssignment object can have the following member:
A Region object specifying the region to which the predeﬁned ﬁeld is applied.
region
Corresponding analysis keywords
•
*INITIAL CONDITIONS, TYPE=EULERIAN MATERIAL
2117
Abaqus Scripting Reference Guide
MaterialAssignment object

PredefinedFieldState object
The PredeﬁnedFieldState object is the base object for the objects in the predeﬁnedFieldState repository of the Step
object. The members of the PredeﬁnedFieldState object are common to all objects derived from PredeﬁnedFieldState.
The PredeﬁnedFieldState object has no constructor or methods.
Access
import load
mdb.models[name].steps[name].predefinedFieldStates[name]
Members
The PredeﬁnedFieldState object has the following member:
A SymbolicConstant specifying the propagation state of the PredeﬁnedFieldState object. Possible values
are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
•
DEACTIVATED
•
DEACTIVATED_TO_INITIAL
•
NO_LONGER_ACTIVE
•
RESET_TO_INITIAL
•
TO_BE_COMPUTED
•
PROPAGATED_FROM_COMPUTED
•
BUILT_INTO_BASE_STATE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
This member exists in all PredeﬁnedFieldState objects, but different predeﬁned ﬁelds use different subsets
of the entire list of possible values depending on propagation rules.
Abaqus Scripting Reference Guide
2118
PredefinedFieldState object

Stress object
The Stress object stores the data for an initial stress predeﬁned ﬁeld.
The Stress object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
Stress(...)
This method creates a Stress predeﬁned ﬁeld object.
Path
mdb.models[name].Stress
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the predeﬁned ﬁeld is applied. Region is
ignored if the predeﬁned ﬁeld has distributionType=FROM_FILE.
region
Optional arguments
A SymbolicConstant specifying whether the load is uniform. Possible values are
UNIFORM and FROM_FILE. The default value is UNIFORM.
distributionType
A Float specifying the ﬁrst principal component of the stress.
sigma11
A Float specifying the second principal component of the stress.
sigma22
A Float specifying the third principal component of the stress.
sigma33
A Float specifying the ﬁrst shear component of the stress.
sigma12
A Float specifying the second shear component of the stress.
sigma13
A Float specifying the third shear component of the stress.
sigma23
Return value
A Stress object.
Exceptions
None.
setValues(...)
This method modiﬁes the Stress object.
2119
Stress object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Stress method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The Stress object has members with the same names and descriptions as the arguments to the Stress method.
Corresponding analysis keywords
•
*INITIAL CONDITIONS, TYPE=STRESS
Abaqus Scripting Reference Guide
2120
Stress object

Temperature object
The Temperature object stores the data for temperature predeﬁned ﬁelds.
The Temperature object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
Temperature(...)
This method creates a Temperature object.
Path
mdb.models[name].Temperature
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the predeﬁned ﬁeld is created.
createStepName
A Region object specifying the region to which the predeﬁned ﬁeld is applied. Region is
ignored if the predeﬁned ﬁeld has a distributionType member available, and
distributionType=FROM_FILE .
region
Optional arguments
A SymbolicConstant specifying how the predeﬁned ﬁeld varies spatially. Possible values
are UNIFORM, USER_DEFINED, FROM_FILE, FIELD,
distributionType
FROM_FILE_AND_USER_DEFINED, and DISCRETE_FIELD. The default value is
UNIFORM.
A SymbolicConstant specifying how the predeﬁned ﬁeld is distributed over the cross
section of the region. Possible values are
crossSectionDistribution
•
CONSTANT_THROUGH_THICKNESS
•
GRADIENTS_THROUGH_SHELL_CS
•
GRADIENTS_THROUGH_BEAM_CS
•
POINTS_THROUGH_SECTION
The default value is CONSTANT_THROUGH_THICKNESS.
A String specifying the name of the AnalyticalField or DiscreteField object associated
with this predeﬁned ﬁeld. The ﬁeld argument applies only when distributionType=FIELD
or distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeld
2121
Temperature object

A String or the SymbolicConstant UNSET specifying the name of the amplitude reference.
UNSET should be used if the predeﬁned ﬁeld has no amplitude reference. The default
value is UNSET.
amplitude
Note:
amplitude should be given only if it is valid for the speciﬁed step.
A String specifying the name of the ﬁle from which the temperature values are to be read
when distributionType=FROM_FILE or
distributionType=FROM_FILE_AND_USER_DEFINED.
ﬁleName
An Int specifying the ﬁrst step from which temperature values are to be read or the
SymbolicConstant FIRST_STEP or LAST_STEP. This argument is valid only when
beginStep
distributionType=FROM_FILE or
distributionType=FROM_FILE_AND_USER_DEFINED. The default value is None.
An Int specifying the ﬁrst increment of the step set in beginStep or the SymbolicConstants
STEP_START or STEP_END. This argument is valid only when
beginIncrement
distributionType=FROM_FILE or
distributionType=FROM_FILE_AND_USER_DEFINED. The default value is None.
An Int specifying the last step from which temperature values are to be read or the
SymbolicConstants FIRST_STEP and LAST_STEP. This argument is valid only when
endStep
distributionType=FROM_FILE or
distributionType=FROM_FILE_AND_USER_DEFINED. The default value is None.
An Int specifying the last increment of the step set in endStep or the SymbolicConstants
STEP_START and STEP_END. This argument is valid only when
endIncrement
distributionType=FROM_FILE or
distributionType=FROM_FILE_AND_USER_DEFINED. The default value is None.
A SymbolicConstant specifying whether to interpolate a ﬁeld read from an output database
or results ﬁle. Possible values are OFF, ON or MIDSIDE_ONLY. The default value is
OFF.
interpolate
A Sequence of Doubles specifying the temperature values when
distributionType=UNIFORM or FIELD. The value of the magnitudes argument is a
function of the crossSectionDistribution argument, as shown in the following list:
magnitudes
•
If crossSectionDistribution=CONSTANT_THROUGH_THICKNESS then magnitudes
is a Double specifying the temperature.
•
If crossSectionDistribution=GRADIENTS_THROUGH_SHELL_CS then magnitudes
is a sequence of Doubles specifying the mean value and the gradient in the thickness
direction.
•
If crossSectionDistribution=GRADIENTS_THROUGH_BEAM_CS then magnitudes
is a sequence of Doubles specifying the mean value, the gradient in the N1 direction,
and the gradient in the N2 direction.
•
If crossSectionDistribution=POINTS_THROUGH_SECTION then magnitudes is a
sequence of Doubles specifying the temperature at each point.
Abaqus Scripting Reference Guide
2122
Temperature object

A Float specifying the absolute value by which a driven node of the ﬁeld can lie outside
the region of the elements of the global model. The default value is 0.0. This argument
cannot be used with midside.
absoluteExteriorTolerance
A Float specifying the fraction of the average element size in the global model by which
a driven node of the ﬁeld can lie outside the region of the elements of the global model.
The default value is 0.0. This argument cannot be used with midside.
exteriorTolerance
Return value
A Temperature object.
Exceptions
None.
move(...)
This method moves the TemperatureState object from one step to a different step.
Required arguments
A String specifying the name of the step from which the PredeﬁnedFieldState is
moved.
fromStepName
A String specifying the name of the step to which the PredeﬁnedFieldState is moved.
toStepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
setValues(...)
This method modiﬁes the data for an existing Temperature object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Temperature  method, except for the
name and createStepName arguments.
2123
Abaqus Scripting Reference Guide
Temperature object

Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing Temperature object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the predeﬁned ﬁeld is modiﬁed.
stepName
Optional arguments
The optional arguments to setValuesInStep are the same as the optional arguments to the Temperature  method,
except for the distributionType and crossSectionDistribution arguments.
Return value
None.
Exceptions
None.
Members
The Temperature object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying how the predeﬁned ﬁeld varies spatially. Possible values are
UNIFORM, USER_DEFINED, FROM_FILE, FIELD, FROM_FILE_AND_USER_DEFINED,
and DISCRETE_FIELD. The default value is UNIFORM.
distributionType
A String specifying the name of the AnalyticalField or DiscreteField object associated with this
predeﬁned ﬁeld. The ﬁeld argument applies only when distributionType=FIELD or
distributionType=DISCRETE_FIELD. The default value is an empty string.
ﬁeld
A Region object specifying the region to which the predeﬁned ﬁeld is applied. Region is ignored
if the predeﬁned ﬁeld has an instances member available. Region is also ignored if the predeﬁned
region
ﬁeld has a distributionType member available, and distributionType=FROM_FILE or
FROM_FILE_AND_USER_DEFINED.
Corresponding analysis keywords
•
*INITIAL CONDITIONS, TYPE=TEMPERATURE
•
*TEMPERATURE
Abaqus Scripting Reference Guide
2124
Temperature object

TemperatureState object
The TemperatureState object stores the propagating data of a temperature in a step. One instance of this object is created
internally by the Temperature object for each step.
The TemperatureState object has no constructor or methods.
The TemperatureState object is derived from the PredeﬁnedFieldState object.
Access
import load
mdb.models[name].steps[name].predefinedFieldStates[name]
Members
The TemperatureState object can have the following members:
A SymbolicConstant specifying the propagation state of the ﬁleName member. Possible values
are UNSET, SET, and UNCHANGED.
ﬁleNameState
A SymbolicConstant or an Int specifying the ﬁrst step from which temperature values are to be
read. This argument is valid only when distribution=FROM_FILE or
beginStep
distribution=FROM_FILE_AND_USER_DEFINED. Possible values are FIRST_STEP,
LAST_STEP, and NONE. The default value is NONE.
A SymbolicConstant specifying the propagation state of the beginStep member. Possible values
are UNSET, SET, and UNCHANGED.
beginStepState
None or an Int specifying the ﬁrst increment of the step set in beginStep or the
SymbolicConstants STEP_START or STEP_END. This argument is valid only when
beginIncrement
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
A SymbolicConstant specifying the propagation state of the beginIncrement member. Possible
values are UNSET, SET, and UNCHANGED.
beginIncrementState
None or an Int specifying the last step from which temperature values are to be read or the
SymbolicConstants FIRST_STEP and LAST_STEP. This argument is valid only when
endStep
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
A SymbolicConstant specifying the propagation state of the endStep member. Possible values
are UNSET, SET, and UNCHANGED.
endStepState
None or an Int specifying the last increment of the step set in endStep or the SymbolicConstants
STEP_START and STEP_END. This argument is valid only when
endIncrement
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
The default value is None.
2125
TemperatureState object

A SymbolicConstant specifying the propagation state of the endIncrement member. Possible
values are UNSET, SET, and UNCHANGED.
endIncrementState
A Boolean specifying that temperatures in second-order elements are to be interpolated from
corner node temperatures. This argument is valid only when distributionType=FROM_FILE
or distributionType=FROM_FILE_AND_USER_DEFINED.
midside
A SymbolicConstant specifying the propagation state of the midside member. Possible values
are UNSET, SET, and UNCHANGED.
midsideState
A SymbolicConstant specifying the propagation state of the amplitudeState member. Possible
values are UNSET, SET, and UNCHANGED.
amplitudeState
A String specifying the name of the ﬁle from which the temperature values are to be read when
distributionType=FROM_FILE or distributionType=FROM_FILE_AND_USER_DEFINED.
ﬁleName
The SymbolicConstant UNSET or a String specifying the name of the amplitude reference. The
SymbolicConstant UNSET should be used if the predeﬁned ﬁeld has no amplitude reference.
The default value is UNSET.
amplitude
Note:
amplitude should be given only if it is valid for the speciﬁed step.
A tuple of SymbolicConstants specifying the propagation state of each item of the magnitudes
member. Possible values are UNSET, SET, and UNCHANGED.
magnitudesState
A tuple of Floats specifying the temperature values when distributionType=UNIFORM or
distributionType=FIELD. The value of the magnitudes argument is a function of the
crossSectionDistribution argument, as shown in the following list:
magnitudes
•
If crossSectionDistribution=CONSTANT_THROUGH_THICKNESS then magnitudes is
a Double specifying the temperature.
•
If crossSectionDistribution=GRADIENTS_THROUGH_SHELL_CS then magnitudes is a
sequence of Doubles specifying the mean value and the gradient in the thickness direction.
•
If crossSectionDistribution=GRADIENTS_THROUGH_BEAM_CS then magnitudes is a
sequence of Doubles specifying the mean value, the gradient in the N1 direction, and the
gradient in the N2 direction.
•
If crossSectionDistribution=POINTS_THROUGH_SECTION then magnitudes is a sequence
of Doubles specifying the temperature at each point.
A SymbolicConstant specifying the propagation state of the PredeﬁnedFieldState object. Possible
values are:
status
•
NOT_YET_ACTIVE
•
CREATED
•
PROPAGATED
•
MODIFIED
Abaqus Scripting Reference Guide
2126
TemperatureState object

•
DEACTIVATED
•
DEACTIVATED_TO_INITIAL
•
NO_LONGER_ACTIVE
•
RESET_TO_INITIAL
•
TO_BE_COMPUTED
•
PROPAGATED_FROM_COMPUTED
•
BUILT_INTO_BASE_STATE
•
TYPE_NOT_APPLICABLE
•
INSTANCE_NOT_APPLICABLE
This member exists in all PredeﬁnedFieldState objects, but different predeﬁned ﬁelds use
different subsets of the entire list of possible values depending on propagation rules.
2127
Abaqus Scripting Reference Guide
TemperatureState object

Velocity object
The Velocity object stores the data for an initial velocity predeﬁned ﬁeld.
The Velocity object is derived from the PredeﬁnedField object.
Access
import load
mdb.models[name].predefinedFields[name]
Velocity(...)
This method creates a Velocity predeﬁned ﬁeld object.
Path
mdb.models[name].Velocity
Required arguments
A String specifying the repository key.
name
A Region object specifying the region to which the predeﬁned ﬁeld is applied.
region
A Float specifying the ﬁrst component of the velocity.
velocity1
A Float specifying the second component of the velocity.
velocity2
A Float specifying the third component of the velocity.
velocity3
A Float specifying the angular velocity.
omega
A sequence of Floats specifying the X-, Y-, and Z- coordinates of the starting point of
the axis about which omega is deﬁned.
axisBegin
A sequence of Floats specifying the X-, Y-, and Z- coordinates of the end point of the
axis about which omega is deﬁned.
axisEnd
Optional arguments
A String specifying the name of the AnalyticalField object associated with this predeﬁned
ﬁeld. The ﬁeld argument applies only when distributionType=FIELD_ANALYTICAL. The
default value is an empty string.
ﬁeld
A SymbolicConstant specifying whether the load is uniform. Possible values are MAGNITUDE
and FIELD_ANALYTICAL. The default value is MAGNITUDE.
distributionType
Abaqus Scripting Reference Guide
2128
Velocity object

Return value
A Velocity object.
Exceptions
None.
setValues(...)
This method modiﬁes the Velocity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Velocity  method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The Velocity object has members with the same names and descriptions as the arguments to the Velocity  method.
Corresponding analysis keywords
•
*INITIAL CONDITIONS, TYPE=VELOCITY
•
*INITIAL CONDITIONS, TYPE=ROTATING VELOCITY
2129
Abaqus Scripting Reference Guide
Velocity object

Print commands
The print commands are used to print selected canvas objects to a ﬁle or to a Windows or PostScript printer and
to control the format of the printed output.
In this section:
•
PrintOptions object
•
EpsOptions object
•
PageSetupOptions object
•
PngOptions object
•
PsOptions object
•
SvgOptions object
•
TiffOptions object
Abaqus Scripting Reference Guide
2130

PrintOptions object
The PrintOptions object stores the common settings that Abaqus uses for all print methods. The PrintOptions object
has no constructor. Abaqus creates the printOptions member when a session is started.
Access
session.printOptions
setValues(...)
This method modiﬁes the PrintOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying how the image is rendered. Possible values are
BLACK_AND_WHITE, GREYSCALE, and COLOR. The default value is COLOR.
rendition
A Boolean specifying whether the output includes the viewport border and title. The
default value is ON.
vpDecorations
A Boolean specifying whether the output includes viewport backgrounds. The default
value is OFF.
vpBackground
A Boolean specifying whether the output includes the view compass The default value
is OFF.
compass
A String specifying the default print command that will be used by the printToPrinter
method if no printCommand argument is provided. The default value is "lpr".
printCommand
A Boolean specifying whether to delete the temporary ﬁles created when an image is
printed. The default value is ON.
deleteTemporaryFiles
You should set the deleteTemporaryFiles argument to False if your printer does not
support print spooling.
A Boolean specifying whether the raster image printed is reduced from true color to 256
colors to reduce ﬁle size. The quality of the image will be compromised. The default
value is OFF.
reduceColors
Return value
None.
Exceptions
None.
2131
PrintOptions object

Members
The PrintOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2132
PrintOptions object

EpsOptions object
The EpsOptions object stores the settings that Abaqus uses when printing using Encapsulated PostScript format. The
EpsOptions object has no constructor. Abaqus creates the epsOptions member when a session is started.
Access
session.epsOptions
setValues(...)
This method modiﬁes the EpsOptions object.
Required arguments
None.
Optional arguments
The SymbolicConstant SIZE_ON_SCREEN or a pair of Floats specifying the width and height
of the image in the units speciﬁed by units. Possible numeric values are imageSize
 (minWidth,
minHeight). The default value is SIZE_ON_SCREEN.
imageSize
Note:
The minimum value of width and height (minWidth and minHeight) is 10 mm
(approximately 0.4 inches).
A SymbolicConstant specifying the units of the imageSize argument. This argument is ignored
if imageSize is SIZE_ON_SCREEN. Possible values are INCHES and MM. The default value
is INCHES.
units
A SymbolicConstant specifying the resolution of the image in dots per inch (dpi). The resolution
can be DPI_1200 only if imageFormat=VECTOR. Possible values are DPI_75, DPI_150,
DPI_300, DPI_450, DPI_600, and DPI_1200. The default value is DPI_150.
resolution
A SymbolicConstant specifying the PostScript font substitution rules to be applied. Possible
values are PS_ALWAYS, PS_IF_AVAILABLE, and AS_DISPLAYED. The default value is
PS_IF_AVAILABLE.
fontType
A SymbolicConstant specifying how the viewport display will be represented. Possible values
are VECTOR and RASTER. The default value is VECTOR.
imageFormat
A SymbolicConstant specifying how ﬁne the shading of curved surfaces will be for vector images.
Possible values are EXTRA COARSE, COARSE, MEDIUM, FINE, and EXTRA FINE. The
default value is MEDIUM.
shadingQuality
Return value
None.
2133
EpsOptions object

Exceptions
RangeError.
RangeError: imageSize must be SIZE_ON_SCREEN or a sequence
of 2 Floats >= (minWidth, minHeight)
If either element of imageSize is out of
range:
Members
The EpsOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2134
EpsOptions object

PageSetupOptions object
The PageSetupOptions object stores the settings that Abaqus uses when printing using a Windows printer. The
PageSetupOptions object has no constructor. Abaqus creates the pageSetupOptions member when a session is started.
Access
session.pageSetupOptions
setValues(...)
This method modiﬁes the PageSetupOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant or a pair of Floats specifying the size of the printed image in the currently
selected units (inches or millimeters). Possible values are FIT_TO_PAGE and
SIZE_ON_SCREEN. The default value is FIT_TO_PAGE.
imageSize
Note:
The minimum value of width and height (minWidth and minHeight) is 10 mm
(approximately 0.4 inches).
A SymbolicConstant specifying the units to use for the margins and image size. Possible values
are INCHES and MM. The default value is INCHES.
units
A SymbolicConstant specifying the quality of the image. Possible values are COARSE,
MEDIUM, and FINE. The default value is MEDIUM.
quality
A Float specifying the top margin of the paper in the currently selected units (inches or
millimeters). Possible values are topMargin
 0. The default value is 0.5.
topMargin
A Float specifying the bottom margin of the paper in the currently selected units (inches or
millimeters). Possible values are bottomMargin
 0. The default value is 0.5.
bottomMargin
A Float specifying the left margin of the paper in the currently selected units (inches or
millimeters). Possible values are leftMargin
 0. The default value is 0.5.
leftMargin
A Float specifying the right margin of the paper in the currently selected units (inches or
millimeters). Possible values are rightMargin
 0. The default value is 0.5.
rightMargin
A SymbolicConstant specifying the orientation of the image. Possible values are PORTRAIT
and LANDSCAPE. The default value is PORTRAIT.
orientation
2135
PageSetupOptions object

A Boolean specifying whether the output includes the Abaqus logo. The default value is ON.
logo
A Boolean specifying whether the output includes the date. The default value is ON.
date
Return value
None.
Exceptions
RangeError.
Note:
The minimum value of width and height (minWidth and minHeight) is 10 mm (approximately 0.4 inches).
RangeError: leftMargin and rightMargin must produce image width
>= minWidth
If leftMargin + rightMargin is out of range:
RangeError: topMargin and bottomMargin must produce image
height >= minHeight
If topMargin + bottomMargin is out of range:
Members
The PageSetupOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2136
PageSetupOptions object

PngOptions object
The PngOptions object stores the settings that Abaqus uses when printing in PNG format. The PngOptions object has
no constructor. Abaqus creates the pngOptions member when a session is started.
Access
session.pngOptions
setValues(...)
This method modiﬁes the PngOptions object.
Required arguments
None.
Optional arguments
The SymbolicConstant SIZE_ON_SCREEN or a pair of Ints specifying the width and height of the
image in pixels. Possible values are (minWidth, minHeight) 
imageSize
 (maxWidth and maxHeight).
The default value is SIZE_ON_SCREEN.
imageSize
Note:
The minimum value of width and height (minWidth and minHeight ) is the number of pixels that
occupy 10 mm at the current screen resolution. The value is typically around 50 pixels and may
be different for width and height.
The maximum value of width and height (maxWidth and maxHeight ) is the largest number of
pixels supported by the system graphics and will be at least as large as the screen dimensions.
Return value
None.
Exceptions
RangeError.
RangeError: imageSize must be
SIZE_ON_SCREEN or a sequence of 2 Ints in
If either the width or height arguments of imageSize are out of
range (where minWidth and minHeight are the number of pixels
corresponding to approximately 10 mm for a given display and the range (minWidth, minHeight) <= (width,
height) <= (maxWidth, maxHeight).
maxWidth and maxHeight are the largest allowable number of
pixels supported by the system graphics):
Members
The PngOptions object has members with the same names and descriptions as the arguments to the setValues
method.
2137
PngOptions object

PsOptions object
The PsOptions object stores the settings that Abaqus uses when printing using PostScript format. The PsOptions object
has no constructor. Abaqus creates the psOptions member when a session is started.
Access
session.psOptions
setValues(...)
This method modiﬁes the PsOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the paper size. Possible values are:
paperSize
•
LETTER
•
LEGAL
•
LEDGER
•
A0
•
A1
•
A2
•
A3
•
A4
•
A5
The default value is LETTER.
A Float specifying the top margin of the paper in inches. Possible values are topMargin
0. The default value is 0.5.
topMargin
A Float specifying the bottom margin of the paper in inches. Possible values are bottomMargin
 0. The default value is 0.5.
bottomMargin
A Float specifying the left margin of the paper in inches. Possible values are leftMargin
0. The default value is 0.5.
leftMargin
A Float specifying the right margin of the paper in inches. Possible values are rightMargin
 0. The default value is 0.5.
rightMargin
A SymbolicConstant specifying the orientation of the image. Possible values are PORTRAIT
and LANDSCAPE. The default value is PORTRAIT.
orientation
Abaqus Scripting Reference Guide
2138
PsOptions object

A Boolean specifying whether the output includes the Abaqus logo. The default value is
ON.
logo
A Boolean specifying whether the output includes the date. The default value is ON.
date
A SymbolicConstant specifying the resolution of the image in dots per inch (dpi). The
resolution can be DPI_1200 only if imageFormat = VECTOR. Possible values are DPI_75,
DPI_150, DPI_300, DPI_450, DPI_600, and DPI_1200. The default value is DPI_150.
resolution
A SymbolicConstant specifying the PostScript font substitution rules to be applied. Possible
values are PS_ALWAYS, PS_IF_AVAILABLE, and AS_DISPLAYED. The default value
is PS_IF_AVAILABLE.
fontType
A SymbolicConstant specifying how the viewport display will be represented. Possible
values are VECTOR and RASTER. The default value is VECTOR.
imageFormat
A SymbolicConstant specifying how ﬁne the shading of curved surfaces will be for vector
images. Possible values are EXTRA COARSE, COARSE, MEDIUM, FINE, and EXTRA
FINE. The default value is MEDIUM.
shadingQuality
Return value
None.
Exceptions
RangeError.
Note:
The minimum value of width and height (minWidth and minHeight) is 10 mm (approximately 0.4 inches).
RangeError: leftMargin and rightMargin must produce image width
>= minWidth
If leftMargin + rightMargin is out of range:
RangeError: topMargin and bottomMargin must produce image
height >= minHeight
If topMargin + bottomMargin is out of range:
Members
The PsOptions object has members with the same names and descriptions as the arguments to the setValues
method.
2139
Abaqus Scripting Reference Guide
PsOptions object

SvgOptions object
The SvgOptions object stores the settings that Abaqus uses when printing in SVG format. The SvgOptions object has
no constructor. Abaqus creates the svgOptions member when a session is started.
Access
session.svgOptions
setValues(...)
This method modiﬁes the SvgOptions object.
Required arguments
None.
Optional arguments
The SymbolicConstant SIZE_ON_SCREEN or a pair of Ints specifying the width and height of the
image in pixels. Possible values are (minWidth, minHeight ) 
imageSize
 (maxWidth and maxHeight).
The default value is SIZE_ON_SCREEN.
imageSize
Note:
The minimum value of width and height (minWidth and minHeight) is the number of pixels that
occupy 10 mm at the current screen resolution. The value is typically around 50 pixels and may
be different for width and height.
The maximum value of width and height (maxWidth and maxHeight) is the largest number of
pixels supported by the system graphics and will be at least as large as the screen dimensions.
Return value
None.
Exceptions
RangeError.
RangeError: imageSize must be
SIZE_ON_SCREEN or a sequence of 2 Ints in
If either the width or height arguments of imageSize are out of
range (where minWidth and minHeight are the number of pixels
corresponding to approximately 10 mm for a given display and the range (minWidth, minHeight) <= (width,
height) <= (maxWidth, maxHeight).
maxWidth and maxHeight are the largest allowable number of
pixels supported by the system graphics):
Members
The SvgOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2140
SvgOptions object

TiffOptions object
The TiffOptions object stores the settings that Abaqus uses when printing in TIFF format. The TiffOptions object has
no constructor. Abaqus creates the tiffOptions member when a session is started.
Access
session.tiffOptions
setValues(...)
This method modiﬁes the TiffOptions object.
Required arguments
None.
Optional arguments
The SymbolicConstant SIZE_ON_SCREEN or a pair of Ints specifying the width and height of the
image in pixels. Possible values are (minWidth, minHeight) 
imageSize
 (maxWidth and maxHeight).
The default value is SIZE_ON_SCREEN.
imageSize
Note:
The minimum value of width and height (minWidth and minHeight ) is the number of pixels that
occupy 10 mm at the current screen resolution. The value is typically around 50 pixels and may
be different for width and height.
The maximum value of width and height (maxWidth and maxHeight ) is the largest number of
pixels supported by the system graphics and will be at least as large as the screen dimensions.
Return value
None.
Exceptions
RangeError.
RangeError: imageSize must be
SIZE_ON_SCREEN or a sequence of 2 Ints in
If either the width or height arguments of imageSize are out of
range (where minWidth and minHeight are the number of pixels
corresponding to approximately 10 mm for a given display and the range (minWidth, minHeight) <= (width,
height) <= (maxWidth, maxHeight).
maxWidth and maxHeight are the largest allowable number of
pixels supported by the system graphics):
Members
The TiffOptions object has members with the same names and descriptions as the arguments to the setValues
method.
2141
TiffOptions object

Property commands
The Property commands are used to create and manage reinforcements and to assign properties to a part.
(See also Material commands and Section commands.) The Property commands are methods of a Part object.
In this section:
•
SectionAssignment object
•
CompositeLayup object
•
CompositePly object
•
MaterialOrientation object
•
PlyStackPlot object
•
Property assignment commands
Abaqus Scripting Reference Guide
2142

SectionAssignment object
The SectionAssignment object is used to specify a section assignment on an assembly or part. Section assignments on
the assembly are limited to connector elements only.
Access
import section
mdb.models[name].parts[name].sectionAssignments[i]
import assembly
mdb.models[name].rootAssembly.sectionAssignments[i]
import odbAccess
session.odbs[name].parts[name].sectionAssignments[i]
session.odbs[name].rootAssembly.instances[name].sectionAssignments[i]
session.odbs[name].rootAssembly.sectionAssignments[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.sectionAssignments[i]
SectionAssignment(...)
This method creates a SectionAssignment object.
Path
mdb.models[name].parts[name].SectionAssignment
mdb.models[name].rootAssembly.SectionAssignment
Required arguments
A Set object specifying the region to which the section is assigned.
region
A String specifying the name of the section.
sectionName
Optional arguments
A SymbolicConstant specifying section thickness assignment method. Possible values are
FROM_SECTION and FROM_GEOMETRY. The default value is FROM_SECTION.
thicknessAssignment
A Float specifying the offset of the shell section. The default value is 0.0.
offset
A SymbolicConstant specifying the method used to deﬁne the shell offset. If offsetType is
set to OFFSET_FIELD the offsetField must have a value. Possible values are
offsetType
SINGLE_VALUE, MIDDLE_SURFACE, TOP_SURFACE, BOTTOM_SURFACE,
FROM_GEOMETRY, and OFFSET_FIELD. The default value is SINGLE_VALUE.
A String specifying the name of the ﬁeld specifying the offset. The default value is "".
offsetField
Return value
A SectionAssignment object.
2143
SectionAssignment object

Exceptions
None.
resume()
This method resumes the section assignment that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the section assignment.
Arguments
None.
Return value
None.
Exceptions
None.
getVertices(...)
This method is only valid for connector section assignments. This method returns a sequence consisting of tuples of
coordinates of the connector's endpoints.
Arguments
None.
Return value
A sequence of tuples of ﬂoats.
Exceptions
This method is valid only for connector section
assignments.
An exception is thrown if getVertices() is called on any section
assignment except connector section assignment.
Abaqus Scripting Reference Guide
2144
SectionAssignment object

setValues(...)
This method modiﬁes the SectionAssignment object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SectionAssignment  method.
Return value
None.
Exceptions
None.
Members
The SectionAssignment object has members with the same names and descriptions as the arguments to the
SectionAssignment  method.
In addition, the SectionAssignment object has the following member:
A Boolean specifying whether the section assignment is suppressed or not. The default
value is OFF.
suppressed
2145
Abaqus Scripting Reference Guide
SectionAssignment object

CompositeLayup object
The CompositeLayup object is used to specify a composite layup on a part.
Access
import part
mdb.models[name].parts[name].compositeLayups[i]
CompositeLayup(...)
This method creates a CompositeLayup object.
Path
mdb.models[name].parts[name].CompositeLayup
Required arguments
A String specifying the repository key.
name
Optional arguments
A String specifying a description of the composite layup.
description
A SymbolicConstant specifying the method used to deﬁne the shell offset. If
offsetType=OFFSET_FIELD the offsetField argument is required. This member is valid only
offsetType
if elementType=SHELL. Possible values are SINGLE_VALUE, MIDDLE_SURFACE,
TOP_SURFACE, BOTTOM_SURFACE, OFFSET_FIELD, and GLOBAL. The default
value is GLOBAL.
A String specifying The name of the ﬁeld specifying the offset. This member is valid only
if elementType=SHELL. The default value is an empty string.
offsetField
A Float specifying The offset of the shell section. This member is valid only if
elementType=SHELL. The default value is 0.0.
offsetValues
A SymbolicConstant specifying the type of element in the composite layup. Possible values
are SHELL, CONTINUUM_SHELL, and SOLID. The default value is SHELL.
elementType
A Boolean specifying whether or not the layup should be made symmetric by the analysis.
The default value is OFF.
symmetric
Return value
A CompositeLayup object.
Exceptions
AbaqusException.
Abaqus Scripting Reference Guide
2146
CompositeLayup object

suppress()
This method suppresses a composite layup.
Arguments
None.
Return value
None.
Exceptions
None.
resume()
This method resumes a composite layup that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
deletePlies()
This method deletes all of the plies from a composite layup.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the CompositeLayup object.
Required arguments
None.
2147
Abaqus Scripting Reference Guide
CompositeLayup object

Optional arguments
The optional arguments to setValues are the same as the arguments to the CompositeLayup  method, except for
the name argument.
Return value
None.
Exceptions
None.
Members
The CompositeLayup object has members with the same names and descriptions as the arguments to the CompositeLayup
method.
In addition, the CompositeLayup object has the following members:
A GeometryShellSection object.
section
A MaterialOrientation object.
orientation
A CompositePlyArray object specifying the plies that make up this composite layup.
plies
Corresponding analysis keywords
•
*SHELL SECTION
•
*SHELL GENERAL SECTION
•
*SOLID SECTION
Abaqus Scripting Reference Guide
2148
CompositeLayup object

CompositePly object
The CompositePly object deﬁnes the material layers in a composite layup.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].plies[i]
CompositePly(...)
This method creates a CompositePly object.
Path
mdb.models[name].parts[name].compositeLayups[name].CompositePly
Required arguments
A Float specifying the thickness of the section layer.
thickness
A Region object specifying the region to which the composite ply applies.
region
A String specifying the name of the material for the ply.
material
A String specifying the ply identiﬁer for this section layer. The default value is an empty
string.
plyName
A SymbolicConstant specifying the method used to deﬁne the relative orientation. If
orientationType=SPECIFY_ORIENT the orientationValue argument is required. If
orientationType
orientationType=CSYS the orientation argument is required. Possible values are CSYS,
SPECIFY_ORIENT, ANGLE_0, ANGLE_45, ANGLE_90, and ANGLE_NEG45. The
default value is ANGLE_0.
A SymbolicConstant specifying the method used to deﬁne the thickness. If
thicknessType=SPECIFY_THICKNESS, the thickness argument is required. Possible values
thicknessType
are SPECIFY_THICKNESS, FIELD_THICKNESS, and
ANALYTICAL_FIELD_THICKNESS. The default value is SPECIFY_THICKNESS.
Optional arguments
A Float specifying the relative orientation of the section layer. The default value is 0.0.
orientationValue
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements and composite ply. The thicknessField argument applies
thicknessField
when thicknessType=ANALYTICAL_FIELD or thicknessType=DISCRETE_FIELD for
shell elements and thicknessType=FIELD_THICKNESS or
thicknessType=ANALYTICAL_FIELD_THICKNESS for composite ply. The default value
is an empty string.
2149
CompositePly object

An Int specifying the number of integration points to be used through the section layer. This
argument is valid only if preIntegrate=OFF. The default value is 3.
numIntPts
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. For shells this axis is also the shell normal.
axis
The axis argument applies only if a valid reference is provided for the orientation. Possible
values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
A Float specifying the angle of the additional rotation. The angle argument applies only if
a valid reference is provided for the orientation. The default value is 0.0.
angle
A SymbolicConstant specifying the method used to describe the additional rotation when a
valid orientation is speciﬁed. Use orientationType=ANGLE_0 and
additionalRotationType
additionalRotationType=ROTATION_FIELD to specify a discrete ﬁeld of rotations for this
CompositePly. Possible values are ROTATION_NONE, ROTATION_ANGLE, and
ROTATION_FIELD. The default value is ROTATION_NONE.
The SymbolicConstant None or a DatumCsys object specifying a coordinate system reference
for the relative orientation of this layer. The default value is None.
orientation
A String specifying the name of the ﬁeld specifying the additional rotation. The default value
is an empty string.
additionalRotationField
Return value
A CompositePly object.
Exceptions
AbaqusException.
Members
The CompositePly object has members with the same names and descriptions as the arguments to the CompositePly
method.
Abaqus Scripting Reference Guide
2150
CompositePly object

MaterialOrientation object
The MaterialOrientation object represents the orientation of the material properties and composite layups.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].orientation
mdb.models[name].parts[name].materialOrientations[i]
import odbAccess
session.odbs[name].parts[name].materialOrientations[i]
session.odbs[name].rootAssembly.instances[name]\
.materialOrientations[i]
session.odbs[name].steps[name].frames[i].fieldOutputs[name].values[i]\
.instance.materialOrientations[i]
MaterialOrientation(...)
This method creates a MaterialOrientation object.
Path
mdb.models[name].parts[name].MaterialOrientation
Required arguments
None.
Optional arguments
A Set object specifying a region for which the material orientation is deﬁned.
region
A DatumCsys object specifying the local coordinate system or None, describing the
material orientation for the given region. In the ODB, this member was previously
localCsys
accessible using "csys," but support has now been added for localCsys and the csys
member will be deprecated.
A SymbolicConstant specifying the axis of a datum coordinate system about which an
additional rotation is applied. For shells this axis is also the shell normal. Possible values
are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation (if accessed from the ODB instead
of the MDB, it will be a string instead of a ﬂoat). The default value is 0.0.
angle
A SymbolicConstant specifying the stack or thickness direction. Possible values are
STACK_1, STACK_2, STACK_3, and STACK_ORIENTATION. The default value is
STACK_3.
stackDirection
A String specifying the name of the DiscreteField object specifying the orientation. The
default value is an empty string.
ﬁeldName
2151
MaterialOrientation object

A SymbolicConstant specifying the method used to deﬁne the material orientation. If
orientationType=SYSTEM, the region and localCsys arguments are required. If
orientationType
orientationType=FIELD, the ﬁeldName argument is required. Possible values are
GLOBAL, SYSTEM, FIELD, DISCRETE, and USER. The default value is GLOBAL.
A SymbolicConstant specifying the axis that is deﬁned by the normal axis direction for
a discrete orientation. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default
value is AXIS_3.
normalAxisDirection
A SymbolicConstant specifying the method used to deﬁne the normal axis direction for
a discrete orientation. Possible values are SURFACE, NORMAL_DATUM, and
NORMAL_VECTOR. The default value is NORMAL_VECTOR.
normalAxisDeﬁnition
A Surface object specifying a region whose geometric normals deﬁne the normal axis
for the discrete orientation.
normalAxisRegion
A DatumAxis object specifying the Datum Axis or None, describing the normal axis
direction for the discrete orientation.
normalAxisDatum
A Boolean specifying the ﬂag to reverse the direction of the deﬁned normal axis direction.
The default value is OFF.
ﬂipNormalDirection
A sequence of Floats specifying the vector that deﬁnes the direction of the normal axis
of the discrete orientation.
normalAxisVector
A SymbolicConstant specifying the axis that is deﬁned by the primary axis direction for
a discrete orientation. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default
value is AXIS_1.
primaryAxisDirection
A SymbolicConstant specifying the method used to deﬁne the primary axis direction for
a discrete orientation. Possible values are SURFACE, PRIMARY_DATUM, and
PRIMARY_VECTOR. The default value is PRIMARY_VECTOR.
primaryAxisDeﬁnition
A Set object specifying a region whose geometric tangents deﬁne the primary axis for
the discrete orientation.
primaryAxisRegion
A DatumAxis object specifying the Datum Axis or None, describing the primary axis
direction for the discrete orientation.
primaryAxisDatum
A Boolean specifying the ﬂag to reverse the direction of the deﬁned primary axis direction.
The default value is OFF.
ﬂipPrimaryDirection
A sequence of Floats specifying the vector that deﬁnes the direction of the primary axis
of the discrete orientation.
primaryAxisVector
Return value
A MaterialOrientation object.
Abaqus Scripting Reference Guide
2152
MaterialOrientation object

Exceptions
None.
ReferenceOrientation(...)
This method creates a MaterialOrientation object.
Path
mdb.models[name].parts[name].compositeLayups[name].ReferenceOrientation
Required arguments
None.
Optional arguments
A DatumCsys object specifying the local coordinate system or None, describing the
material orientation for the given region. In the ODB, this member was previously
localCsys
accessible using "csys," but support has now been added for localCsys and the csys
member will be deprecated.
A SymbolicConstant specifying the axis of a datum coordinate system about which an
additional rotation is applied. For shells this axis is also the shell normal. Possible values
are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation (if accessed from the ODB instead
of the MDB, it will be a string instead of a ﬂoat). The default value is 0.0.
angle
A SymbolicConstant specifying the stack or thickness direction. Possible values are
STACK_1, STACK_2, STACK_3, and STACK_ORIENTATION. The default value is
STACK_3.
stackDirection
A String specifying the name of the DiscreteField object specifying the orientation. The
default value is an empty string.
ﬁeldName
A SymbolicConstant specifying the method used to deﬁne the material orientation. If
orientationType=SYSTEM, the region and localCsys arguments are required. If
orientationType
orientationType=FIELD, the ﬁeldName argument is required. Possible values are
GLOBAL, SYSTEM, FIELD, DISCRETE, and USER. The default value is GLOBAL.
A String specifying the name of the DiscreteField object specifying the additional
rotation. The default value is an empty string.
additionalRotationField
A SymbolicConstant specifying the method used to describe the additional rotation when
a valid orientation is speciﬁed. Possible values are ROTATION_NONE,
additionalRotationType
ROTATION_ANGLE, and ROTATION_FIELD. The default value is
ROTATION_NONE.
2153
Abaqus Scripting Reference Guide
MaterialOrientation object

A SymbolicConstant specifying the axis that is deﬁned by the normal axis direction for
a discrete orientation. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default
value is AXIS_3.
normalAxisDirection
A SymbolicConstant specifying the method used to deﬁne the normal axis direction for
a discrete orientation. Possible values are SURFACE, DATUM, and VECTOR. The
default value is VECTOR.
normalAxisDeﬁnition
A Surface object specifying a region whose geometric normals deﬁne the normal axis
for the discrete orientation.
normalAxisRegion
A DatumAxis object specifying the Datum Axis or None, describing the normal axis
direction for the discrete orientation.
normalAxisDatum
A Boolean specifying the ﬂag to reverse the direction of the deﬁned normal axis direction.
The default value is OFF.
ﬂipNormalDirection
A sequence of Floats specifying the vector that deﬁnes the direction of the normal axis
of the discrete orientation.
normalAxisVector
A SymbolicConstant specifying the axis that is deﬁned by the primary axis direction for
a discrete orientation. Possible values are AXIS_1, AXIS_2, and AXIS_3. The default
value is AXIS_1.
primaryAxisDirection
A SymbolicConstant specifying the method used to deﬁne the primary axis direction
for a discrete orientation. Possible values are EDGE, DATUM, and VECTOR. The
default value is VECTOR.
primaryAxisDeﬁnition
A Set object specifying a region whose geometric tangents deﬁne the primary axis for
the discrete orientation.
primaryAxisRegion
A DatumAxis object specifying the Datum Axis or None, describing the primary axis
direction for the discrete orientation.
primaryAxisDatum
A Boolean specifying the ﬂag to reverse the direction of the deﬁned primary axis
direction. The default value is OFF.
ﬂipPrimaryDirection
A sequence of Floats specifying the vector that deﬁnes the direction of the primary axis
of the discrete orientation.
primaryAxisVector
Return value
A MaterialOrientation object.
Exceptions
None.
Abaqus Scripting Reference Guide
2154
MaterialOrientation object

setValues(...)
This method modiﬁes the MaterialOrientation object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MaterialOrientation  method.
Return value
None.
Exceptions
None.
Members
The MaterialOrientation object has members with the same names and descriptions as the arguments to the
MaterialOrientation  method.
In addition, the MaterialOrientation object can have the following members:
A SymbolicConstant specifying the method used to describe the additional rotation
when a valid orientation is speciﬁed. Possible values are ROTATION_NONE,
additionalRotationType
ROTATION_ANGLE, and ROTATION_FIELD. The default value is
ROTATION_NONE.
A String specifying the name of the DiscreteField object specifying the additional
rotation. The default value is an empty string.
additionalRotationField
2155
Abaqus Scripting Reference Guide
MaterialOrientation object

PlyStackPlot object
The PlyStackPlot object is used to plot the stacking of plies in a composite layup or in a composite shell section.
Access
import section
import visualization
MdbPlyStackPlot(...)
This method creates a PlyStackPlot object from a region of a part that contains a composite shell layup.
Path
section.MdbPlyStackPlot
Required arguments
A Part object.
part
A Region object which contains a composite shell layup.
region
Optional arguments
None.
Return value
A PlyStackPlot object.
Exceptions
None.
OdbPlyStackPlot(...)
This method creates a PlyStackPlot object from a composite shell section of an Odb object.
Path
visualization.OdbPlyStackPlot
Required arguments
An Odb object.
odb
A String specifying the section name that contains a composite shell section.
sectionName
Abaqus Scripting Reference Guide
2156
PlyStackPlot object

Optional arguments
A Float specifying the shell offset. The default value is 0.0.
offset
Return value
A PlyStackPlot object.
Exceptions
None.
Members
The PlyStackPlot object has no members.
2157
Abaqus Scripting Reference Guide
PlyStackPlot object

Property assignment commands
The Property assignment commands are used to assign and unassign properties to parts. The part and section
modules must be imported to give access to the Property assignment commands.
Access
import part
import section
assignBeamSectionOrientation
This method assigns a beam section orientation to a region of a part.
Path
mdb.models[name].parts[name].assignBeamSectionOrientation
Required arguments
A sequence of geomSequences of Edge objects or a sequence of sequences of
one-dimensional elements.
region
A SymbolicConstant specifying the assignment method. Only a value of N1_COSINES
is currently supported.
method
A sequence of three Floats specifying the approximate local 
-direction of the beam
cross-section.
n1
Optional arguments
None.
Return value
None.
Exceptions
None.
assignMaterialOrientation
This method assigns a material orientation to a region.
Path
mdb.models[name].parts[name].assignMaterialOrientation
Abaqus Scripting Reference Guide
2158
Property assignment commands

Required arguments
A sequence of geomSequences of Vertex, Edge, Face, and Cell objects or a sequence
of sequences of elements.
region
A Datum object specifying the local coordinate system or None, indicating the global
coordinate system.
localCsys
Optional arguments
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. For shells this axis is also the shell normal.
Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
Return value
None.
Exceptions
None.
assignRebarOrientation
This method assigns a rebar reference orientation to a region.
Path
mdb.models[name].parts[name].assignRebarOrientation
Required arguments
A sequence of geomSequences of Vertex, Edge, Face, and Cell objects or a sequence
of sequences of elements.
region
A Datum object specifying the local coordinate system or None, indicating the global
coordinate system.
localCsys
Optional arguments
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. For shells this axis is also the shell normal.
Possible values are AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_1.
axis
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
Return value
None.
2159
Abaqus Scripting Reference Guide
Property assignment commands

Exceptions
None.
flipNormal
This method ﬂips the normals of shell or membrane elements of an orphan mesh or of two-dimensional geometric
regions.
Path
mdb.models[name].parts[name].ﬂipNormal
Required arguments
A Region object specifying the region on which normals are ﬂipped. For 3D parts, the region
contains Face objects or two-dimensional triangle or quadrilateral Element objects. For
axisymmetric parts, the region contains Edge objects or line Elements objects.
regions
Optional arguments
A two-dimensional element object whose normal is to be matched. If unspeciﬁed, all the
normals associated with the given regions will be ﬂipped. The referenceRegion argument
referenceRegion
is applicable only if the argument regions contain a sequence of quadrilateral or triangular
elements.
Return value
None.
Exceptions
None.
flipTangent
This method ﬂips the tangents of beam or truss elements of an orphan mesh or of one-dimensional geometric
regions.
Path
mdb.models[name].parts[name].ﬂipTangent
Required arguments
A Region object specifying the region on which normals are ﬂipped. The region contains
Edge objects or one-dimensional Element objects.
regions
Optional arguments
None.
Abaqus Scripting Reference Guide
2160
Property assignment commands

Return value
None.
Exceptions
None.
unassignBeamSectionOrientation
This method deletes a beam section orientation assignment.
Path
mdb.models[name].parts[name].unassignBeamSectionOrientation
Required arguments
An Int specifying the number of the beam section orientation assignment to be deleted.
index
Optional arguments
None.
Return value
None.
Exceptions
None.
unassignMaterialOrientation
This method deletes a material orientation assignment.
Path
mdb.models[name].parts[name].unassignMaterialOrientation
Required arguments
An Int specifying the number of the material assignment to be deleted.
index
Optional arguments
None.
Return value
None.
Exceptions
None.
2161
Abaqus Scripting Reference Guide
Property assignment commands

unassignRebarOrientation
This method deletes a rebar orientation assignment.
Path
mdb.models[name].parts[name].unassignRebarOrientation
Required arguments
An Int specifying the number of the rebar reference orientation assignment to be deleted.
index
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2162
Property assignment commands

Region commands
Region commands are used to create part and assembly sets or surfaces from elements, nodes, and geometry.
For more information, see Specifying a region. Part and assembly objects have the following member, a repository
of Set objects:
•
sets
In turn, a Set object can contain any one of the following types:
•
elements
•
nodes
•
geometry
A Set object can contain a number of entities of a single type (nodes, elements, or geometry) or a combination
of node and element types. However, except for nodes and elements, a Set object cannot contain a combination
of types.
The following are members of the Set object:
•
nodes
•
elements
•
cells
•
faces
•
edges
•
vertices
•
referencePoints
Region commands are also used to create surfaces on the assembly. Surfaces are sets with additional “sidedness”
information.
Part sets contain regions of a part. You can assign section deﬁnitions to a set created by selecting a region of a
part. The part sets can be accessed from the instance; however, the section deﬁnition you assigned to a region
is copied automatically to all instances of that part in the assembly.
Assembly sets contain regions of an assembly and are used by many commands that operate on the assembly.
For example, you can apply a load or boundary condition to a set created by selecting a region of the assembly.
Sets can include regions from multiple part instances.
In this section:
•
Assembly object
•
Part object
•
Region object
•
Set object
•
Surface object
•
Skin object
•
Stringer object
2163

Assembly object
The following commands operate on Assembly objects. For more information about the Assembly object, see Assembly
object.
Access
import regionToolset
clashSets(...)
This command prints a message describing the relationship between the contents of two sets. Possible outcomes are:
•
Both sets are the same.
•
Set 2 is a subset of set 1.
•
Set 2 is a superset of set 1.
•
Set 2 intersects set 1.
•
Set 2 touches set 1 (their boundaries intersect).
•
Set 2 and set 1 are disjoint.
This command accepts only positional arguments and has no keywords.
Required arguments
A Set or Surface object specifying set 1.
arg1
A Set or Surface object specifying set 2.
arg2
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteSets(...)
This command deletes the given sets from the assembly.
Required arguments
A sequence of Strings specifying the set names that will be deleted from the assembly.
setNames
Abaqus Scripting Reference Guide
2164
Assembly object

Optional arguments
None.
Return value
None.
Exceptions
None.
markSetInternal(...)
This command marks the given Set as internal or external.
Required arguments
A string specifying the Set name.
setName
A Boolean specifying whether the Set should be marked as internal.
internalSet
Optional arguments
None.
Return value
None.
Exceptions
None.
markSurfaceInternal(...)
This command marks the given Surface as internal or external.
Required arguments
A string specifying the Surface name.
setName
A Boolean specifying whether the Surface should be marked as internal.
internalSurface
Optional arguments
None.
Return value
None.
Exceptions
None.
2165
Abaqus Scripting Reference Guide
Assembly object

isSetInternal(...)
This command returns a ﬂag indicating whether the Set is Internal.
Required arguments
A string specifying the Set name.
setName
Optional arguments
None.
Return value
None.
Exceptions
None.
isSurfaceInternal(...)
This command returns a ﬂag indicating whether the Surface is Internal.
Required arguments
A string specifying the Surface name.
surfaceName
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteSurfaces(...)
This command deletes the given surfaces from the assembly.
Required arguments
A sequence of Strings specifying the surface names that will be deleted from the
assembly.
surfaceNames
Optional arguments
None.
Abaqus Scripting Reference Guide
2166
Assembly object

Return value
None.
Exceptions
None.
2167
Abaqus Scripting Reference Guide
Assembly object

Part object
The following commands operate on Part objects. For more information about the Part object, see Part object.
Access
import regionToolset
clashSets(...)
This command prints a message describing the relationship between the contents of two sets. Possible outcomes are:
•
Both sets are the same.
•
Set 2 is a subset of set 1.
•
Set 2 is a superset of set 1.
•
Set 2 intersects set 1.
•
Set 2 touches set 1 (their boundaries intersect).
•
Set 2 and set 1 are disjoint.
This command accepts only positional arguments and has no keywords.
Required arguments
A Set or Surface object specifying set 1.
arg1
A Set or Surface object specifying set 2.
arg2
Optional arguments
None.
Return value
None.
Exceptions
None.
markSetInternal(...)
This command marks the given Set as internal or external.
Required arguments
A string specifying the Set name.
setName
A Boolean specifying whether the Set should be marked as internal.
internalSet
Abaqus Scripting Reference Guide
2168
Part object

Optional arguments
None.
Return value
None.
Exceptions
None.
markSurfaceInternal(...)
This command marks the given Surface as internal or external.
Required arguments
A string specifying the Surface name.
setName
A Boolean specifying whether the Surface should be marked as internal.
internalSurface
Optional arguments
None.
Return value
None.
Exceptions
None.
isSetInternal(...)
This command returns a ﬂag indicating whether the Set is Internal.
Required arguments
A string specifying the Set name.
setName
Optional arguments
None.
Return value
None.
Exceptions
None.
2169
Abaqus Scripting Reference Guide
Part object

isSurfaceInternal(...)
This command returns a ﬂag indicating whether the Surface is Internal.
Required arguments
A string specifying the Surface name.
surfaceName
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteSets(...)
This command deletes the given sets from the part.
Required arguments
A sequence of Strings specifying the set names that will be deleted from the part.
setNames
Optional arguments
None.
Return value
None.
Exceptions
None.
deleteSurfaces(...)
This command deletes the given surfaces from the part.
Required arguments
A sequence of Strings specifying the surface names that will be deleted from the
part.
surfaceNames
Optional arguments
None.
Abaqus Scripting Reference Guide
2170
Part object

Return value
None.
Exceptions
None.
2171
Abaqus Scripting Reference Guide
Part object

Region object
The purpose of the Region object is to provide a link between an attribute and the geometric or discrete entities to
which the attribute is applied. An attribute (Load, BC, IC, etc.) is applied to one or more Region objects; each Region
object in turn is associated with a picked Set or Surface or with a named Set or Surface. The Region object provides
a uniﬁed interface (or "façade") to data and functionality located at the Set or Surface.
A script that applies an attribute to a picked Set or Surface requires the explicit creation of a Region object and will
implicitly create a matching internal Set or Surface. Conversely, a script that applies an attribute to a named Set or
Surface requires the explicit creation of that Set or Surface (see 39.4) and will implicitly create a region object.
The reference between Region and Set/Surface is by name (user-provided or internal.) If the Set/Surface is suppressed,
deleted, or renamed, the Region object will not be able to ﬁnd the associated Set/Surface, and will communicate that
to the attribute, but will not be affected otherwise. If a Set/Surface with the same name becomes available (only possible
with user-provided names) the Region object will re-establish the connection. Another way of correcting this problem
is to re-apply the attribute.
Wherever a particular Load, BC, IC, etc. command accepts a named set or a named surface, that command will also
accept a Region object. For example,
myRegion = regionToolset.Region(edges=edges1)
mdb.models['Model-1'].DisplacementBC(name='BC-1',
    createStepName='Initial', region=myRegion, u1=SET,
    u2=SET)
myRegion = regionToolset.Region(elements=e[1:100])
p = mdb.models['mirror'].parts['COLLAR_MIRROR-1']
p.SectionAssignment(region=myRegion, sectionName='Section-1')
Abaqus does not provide a regions repository; as an alternative, you should assign a variable to a Region object and
refer to the variable. The lifecycle of a Region object is similar to the lifecycle of a Leaf object used by display groups;
as a result, you should use a Region object immediately after you create it. The contents of a Region object are not
intended to survive regeneration. If you use an out-of-date Region object, the script is unlikely to function correctly.
Querying an attribute's Region will return a Region tuple. The contents of the tuple are the set name followed by the
owners of the set and three ﬂags expressed as integers. The ﬂags indicate the region space, the type of region and the
whether the region is an internal set.
Access
import regionToolset
Region(...)
This command creates a set-like region. For example,
myRegion = regionToolset.Region(vertices=v[2:4],
    edges=e[4:5]+e[6:9])
The arguments are the same as the arguments to the Set method, except for the name argument.
In most cases, the constructor will be called with only one argument of sequences. The arguments xVertices, xEdges,
and xFaces are used to exclude lower-dimension entities and to provide ﬁner control on the content of the region. For
example, the following statement deﬁnes a region enclosing a square face but without two of its edges:
region = regionToolset.Region(faces=f[3:4], xEdges=e[1:3])
Path
Region
Abaqus Scripting Reference Guide
2172
Region object

Required arguments
None.
Optional arguments
A sequence of Element objects. The default value is None.
elements
A sequence of Node objects. The default value is None.
nodes
A sequence of Vertex objects. The default value is None.
vertices
A sequence of Edge objects. The default value is None.
edges
A sequence of Face objects. The default value is None.
faces
A sequence of Cell objects. The default value is None.
cells
A sequence of ReferencePoint objects. The default value is an empty sequence.
referencePoints
A sequence of Vertex objects that excludes speciﬁc vertices from the region. The default
value is None.
xVertices
A sequence of Vertex objects that excludes speciﬁc edges from the region. The default
value is None.
xEdges
A sequence of Vertex objects that excludes speciﬁc faces from the region. The default
value is None.
xFaces
A tuple of tuples specifying a skin name and the sequence of faces associated with this
skin. Valid only for geometric regions on 3D and 2D parts.
skinFaces
A tuple of tuples specifying a skin name and the sequence of edges associated with this
skin. Valid only for geometric regions on Axisymmetric parts.
skinEdges
A tuple of tuples specifying a stringer name and the sequence of edges associated with
this stringer. Valid only for geometric regions on 3D and 2D parts.
stringerEdges
Return value
A Region object.
Exceptions
None.
Region(...)
This command creates a surface-like region. For example,
myRegion = regionToolset.Region(side1Faces=f[12:14])
2173
Abaqus Scripting Reference Guide
Region object

The arguments are the same as the arguments to the Surface method, except for the name argument.
Path
Region
Required arguments
None.
Optional arguments
In most cases, you will provide only one argument of sequences.
A sequence of Face objects (surface applies to SIDE1 of face). The default value is
None.
side1Faces
A sequence of Face objects (surface applies to SIDE2 of face). The default value is
None.
side2Faces
A sequence of Face objects (surface applies to both SIDE1 and SIDE2 of face). The
default value is None.
side12Faces
A sequence of Edge objects (surface applies to SIDE1 of edge). The default value is
None.
side1Edges
A sequence of Edge objects (surface applies to SIDE2 of edge). The default value is
None.
side2Edges
A sequence of Edge objects (surface applies to END1 of edge). The default value is
None.
end1Edges
A sequence of Edge objects (surface applies to END2 of edge). The default value is
None.
end2Edges
A sequence of Edge objects (surface applies circumferentially to edge). The default
value is None.
circumEdges
A sequence of Element objects (surface applies to FACE1 of element). The default
value is None.
face1Elements
A sequence of Element objects (surface applies to FACE2 of element). The default
value is None.
face2Elements
A sequence of Element objects (surface applies to FACE3 of element). The default
value is None.
face3Elements
A sequence of Element objects (surface applies to FACE4 of element). The default
value is None.
face4Elements
Abaqus Scripting Reference Guide
2174
Region object

A sequence of Element objects (surface applies to FACE5 of element). The default
value is None.
face5Elements
A sequence of Element objects (surface applies to FACE6 of element). The default
value is None.
face6Elements
A sequence of Element objects (surface applies to SIDE1 of element). The default
value is None.
side1Elements
A sequence of Element objects (surface applies to SIDE2 of element). The default
value is None.
side2Elements
A sequence of Element objects (surface applies to both SIDE1 and SIDE2 of element).
The default value is None.
side12Elements
A sequence of Element objects (surface applies to END1 of element). The default
value is None.
end1Elements
A sequence of Element objects (surface applies to END2 of element). The default
value is None.
end2Elements
A sequence of Element objects (surface applies to circumference of element). The
default value is None.
circumElements
Return value
A Region object.
Exceptions
None.
Members
The Region object has no members.
2175
Abaqus Scripting Reference Guide
Region object

Set object
If a set spans more than one part instance, the members vertices, edges, faces, cells, elements, or nodes return a sequence
of all the queried vertices/edges/faces/celss/elements/nodes respectively for each part instance contained in the set.
For example:
assembly=mdb.models['Transmission'].rootAssembly
clutchElements=assembly.instances['Clutch'].elements 
clutchSet=clutchElements[16:18]+clutchElements[78:80] 
housingElements=assembly.instances['Housing'].elements 
housingSet=housingElements[45:48] 
transmissionSet=assembly.Set(name='TransmissionSet', \
                             elements=(clutchSet, housingSet))
len(transmissionSet.elements)=7 
transmissionSet.elements[0]=mdb.models['Transmission'].rootAssembly.instances['Clutch-1'].elements[16]
transmissionSet.elements[6]=mdb.models['Transmission'].rootAssembly.instances['housing-1'].elements[47]
Access
import part
mdb.models[name].parts[name].allInternalSets[name]
mdb.models[name].parts[name].allSets[name]
mdb.models[name].parts[name].sets[name]
import assembly
mdb.models[name].rootAssembly.allInstances[name].sets[name]
mdb.models[name].rootAssembly.allInternalSets[name]
mdb.models[name].rootAssembly.allSets[name]
mdb.models[name].rootAssembly.instances[name].sets[name]
mdb.models[name].rootAssembly.modelInstances[i].sets[name]
mdb.models[name].rootAssembly.sets[name]
Set(...)
This method creates a set from a sequence of objects in a model database.
Path
mdb.models[name].parts[name].Set
mdb.models[name].rootAssembly.Set
Required arguments
A String specifying the repository key.
name
Optional arguments
At least one sequence argument must be provided—elements, nodes, vertices, edges, faces, cells, or referencePoints.
The arguments xVertices, xEdges, and xFaces are used to exclude lower-dimension entities and to provide ﬁner control
Abaqus Scripting Reference Guide
2176
Set object

on the content of the set. For example, the following statement deﬁnes a region enclosing a square face but without
two of its edges:
set = mdb.models['Model-1'].rootAssembly.Set(name='mySet', \
        faces=f[3:4], \
                                             xEdges=e[1:3])
A sequence of MeshNode objects. The default value is None.
nodes
A sequence of MeshElement objects. The default value is None.
elements
A Region object specifying other objects to be included in the set. The default value is
None.
region
A sequence of Vertex objects. The default value is None.
vertices
A sequence of Edge objects. The default value is None.
edges
A sequence of Face objects. The default value is None.
faces
A sequence of Cell objects. The default value is None.
cells
A sequence of Vertex objects that excludes speciﬁc vertices from the set. The default
value is None.
xVertices
A sequence of Edge objects that excludes speciﬁc edges from the set. The default value
is None.
xEdges
A sequence of Face objects that excludes speciﬁc faces from the set. The default value
is None.
xFaces
A sequence of ReferencePoint objects. The default value is an empty sequence.
referencePoints
A tuple of tuples specifying a skin name and the sequence of faces associated with this
skin. Valid only for geometric regions on 3D and 2D parts.
skinFaces
A tuple of tuples specifying a skin name and the sequence of edges associated with this
skin. Valid only for geometric regions on Axisymmetric parts.
skinEdges
A tuple of tuples specifying a stringer name and the sequence of edges associated with
this stringer. Valid only for geometric regions on 3D and 2D parts.
stringerEdges
Return value
A Set object.
Exceptions
InvalidNameError.
2177
Abaqus Scripting Reference Guide
Set object

Set(...)
This method copies a set from an existing set.
Path
mdb.models[name].parts[name].Set
mdb.models[name].rootAssembly.Set
Required arguments
A String specifying the name of the set.
name
A Set object to be copied.
objectToCopy
Optional arguments
None.
Return value
A Set object.
Exceptions
InvalidNameError.
SetByBoolean(...)
This method creates a set by performing a boolean operation on two or more input sets.
Path
mdb.models[name].parts[name].SetByBoolean
mdb.models[name].rootAssembly.SetByBoolean
Required arguments
A String specifying the repository key.
name
A sequence of Set objects.
sets
Optional arguments
A SymbolicConstant specifying the boolean operation to perform. Possible values are UNION,
INTERSECTION, and DIFFERENCE. The default value is UNION. Note that if DIFFERENCE
operation
is speciﬁed, the order of the given input sets is important; All sets speciﬁed after the ﬁrst one are
subtracted from the ﬁrst one.
Abaqus Scripting Reference Guide
2178
Set object

Return value
A Set object.
Exceptions
InvalidNameError.
SetFromColor(...)
This method creates a set containing faces of the part marked with a speciﬁed color attribute. Third-party applications
can assign color attributes to faces, and the color attribute can be imported into Abaqus from an ACIS ﬁle. You can
use this method to create sets only on parts; however, you can access the sets from instances of the parts in the assembly.
Path
mdb.models[name].parts[name].SetFromColor
Required arguments
A String specifying the repository key.
name
A sequence of three Ints specifying the RGB color. Values can range from 0 to 255. The ﬁrst
integer is for red, the second for green, and the third for blue. For example, a face colored in
yellow is identiﬁed by:
color=(255,255,0)
color
Optional arguments
None.
Return value
A Set object.
Exceptions
InvalidNameError.
SetFromElementLabels(...)
This method creates a set from a sequence of element labels in a model database.
Path
mdb.models[name].parts[name].SetFromElementLabels
mdb.models[name].rootAssembly.SetFromElementLabels
Required arguments
A String specifying the repository key.
name
2179
Abaqus Scripting Reference Guide
Set object

A sequence of element labels. An element label is a sequence of Int element identiﬁers. For
example, for a part:
elementLabels=(2,3,5,7)
elementLabels
For an assembly:
elementLabels=(('Instance-1', (2,3,5,7)), 
      ('Instance-2', (1,2,3)))
Optional arguments
None.
Return value
A Set object.
Exceptions
InvalidNameError.
SetFromNodeLabels(...)
This method creates a set from a sequence of node labels in a model database.
Path
mdb.models[name].parts[name].SetFromNodeLabels
mdb.models[name].rootAssembly.SetFromNodeLabels
Required arguments
A String specifying the repository key.
name
A sequence of node labels. A node label is a sequence of Int node identiﬁers. For example,
for a part:
nodeLabels=(2,3,5,7)
nodeLabels
For an assembly:
nodeLabels=(('Instance-1', (2,3,5,7)), ('Instance-2', (1,2,3)))
Optional arguments
A Boolean specifying whether the created set is unsorted. The default value is False.
unsorted
Return value
A Set object.
Exceptions
InvalidNameError.
Abaqus Scripting Reference Guide
2180
Set object

MapSetsFromOdb(...)
This method creates sets based on mapping sets from element centroid locations in an Odb.
Path
mdb.models[name].parts[name].MapSetsFromOdb
Required arguments
A String specifying the path to the ODB containing the source sets.
odbPath
A list of names of sets on the ODB to map.
odbSets
Optional arguments
A list of names of sets to construct or use corresponding to the ODB sets.
partSets
An enum to specify OVERWRITE, APPEND, INTERSECT, or REMOVE. The default
is OVERWRITE.
method
Return value
A Set object or a tuple of Set objects.
Exceptions
None.
Members
The Set object has the following members:
A MeshElementArray object.
elements
A MeshNodeArray object.
nodes
A VertexArray object.
vertices
An EdgeArray object.
edges
A FaceArray object.
faces
A CellArray object.
cells
A VertexArray object.
xVertices
An EdgeArray object.
xEdges
2181
Abaqus Scripting Reference Guide
Set object

A FaceArray object.
xFaces
A ReferencePointArray object.
referencePoints
Abaqus Scripting Reference Guide
2182
Set object

Surface object
The Surface object stores surfaces selected from the assembly. A surface is comprised of geometric or discrete entities
but not both. An instance of a Surface object is available from the surface member of the Assembly object.
Access
import part
mdb.models[name].parts[name].allInternalSurfaces[name]
mdb.models[name].parts[name].allSurfaces[name]
mdb.models[name].parts[name].surfaces[name]
import assembly
mdb.models[name].rootAssembly.allInstances[name].surfaces[name]
mdb.models[name].rootAssembly.allInternalSurfaces[name]
mdb.models[name].rootAssembly.allSurfaces[name]
mdb.models[name].rootAssembly.instances[name].surfaces[name]
mdb.models[name].rootAssembly.modelInstances[i].surfaces[name]
mdb.models[name].rootAssembly.surfaces[name]
Surface(...)
This method creates a surface from a sequence of objects in a model database. The surface will apply to the sides
speciﬁed by the arguments.For example,
surface=mdb.models['Model-1'].parts['Part-1'].Surface(side1Faces=side1Faces, 
name='Surf-1')
Path
mdb.models[name].parts[name].Surface
mdb.models[name].rootAssembly.Surface
Required arguments
On three-dimensional solid faces, you can use the following arguments:
•
side1Faces
•
side2Faces
On three-dimensional shell faces, you can use the following arguments:
•
side1Faces
•
side2Faces
•
side12Faces
On three-dimensional wire edges, you can use the following arguments:
•
end1Edges
•
end2Edges
•
circumEdges
On three-dimensional or two-dimensional or axisymmetric edges, you can use the following arguments:
•
side1Edges
2183
Surface object

•
side2Edges
On two-dimensional or axisymmetric shell elements, you can use the following arguments:
•
face1Elements
•
face2Elements
•
face3Elements
•
face4Elements
On solid elements, you can use the following arguments:
•
face1Elements
•
face2Elements
•
face3Elements
•
face4Elements
•
face5Elements
•
face6Elements
On three-dimensional shell elements, you can use the following arguments:
•
side1Elements
•
side2Elements
•
side12Elements
On three-dimensional wire elements, you can use the following arguments:
•
end1Elements
•
end2Elements
•
circumElements
On two-dimensional or axisymmetric wire elements, you can use the following arguments:
•
side1Elements
•
side2Elements
A String specifying the repository key. The default value is an empty string.
name
Optional arguments
A sequence of MeshElement objects (surface applies to SIDE1 of element). The default
value is None.
side1Elements
A sequence of MeshElement objects (surface applies to SIDE2 of element). The default
value is None.
side2Elements
A sequence of MeshElement objects (surface applies to both SIDE1 and SIDE2 of
element). The default value is None.
side12Elements
Abaqus Scripting Reference Guide
2184
Surface object

A sequence of MeshElement objects (surface applies to END1 of element). The default
value is None.
end1Elements
A sequence of MeshElement objects (surface applies to END2 of element). The default
value is None.
end2Elements
A sequence of MeshElement objects (surface applies to circumference of element).
The default value is None.
circumElements
A sequence of MeshElement objects (surface applies to FACE1 of element) or
MeshFace objects. The default value is None.
face1Elements
A sequence of MeshElement objects (surface applies to FACE2 of element) or
MeshFace objects. The default value is None.
face2Elements
A sequence of MeshElement objects (surface applies to FACE3 of element) or
MeshFace objects. The default value is None.
face3Elements
A sequence of MeshElement objects (surface applies to FACE4 of element) or
MeshFace objects. The default value is None.
face4Elements
A sequence of MeshElement objects (surface applies to FACE5 of element) or
MeshFace objects. The default value is None.
face5Elements
A sequence of MeshElement objects (surface applies to FACE6 of element) or
MeshFace objects. The default value is None.
face6Elements
A sequence of Face objects (surface applies to SIDE1 of face). The default value is
None.
side1Faces
A sequence of Face objects (surface applies to SIDE2 of face). The default value is
None.
side2Faces
A sequence of Face objects (surface applies to both SIDE1 and SIDE2 of face). The
default value is None.
side12Faces
A sequence of Edge objects (surface applies to SIDE1 of edge). The default value is
None.
side1Edges
A sequence of Edge objects (surface applies to SIDE2 of edge). The default value is
None.
side2Edges
A sequence of Edge objects (surface applies to END1 of edge). The default value is
None.
end1Edges
A sequence of Edge objects (surface applies to END2 of edge). The default value is
None.
end2Edges
2185
Abaqus Scripting Reference Guide
Surface object

A sequence of Edge objects (surface applies circumferentially to edge). The default
value is None.
circumEdges
Return value
A Surface object.
Exceptions
InvalidNameError.
Surface(...)
This method copies a surface from an existing surface.
Path
mdb.models[name].parts[name].Surface
mdb.models[name].rootAssembly.Surface
Required arguments
A String specifying the name of the surface.
name
A Surface object to be copied.
objectToCopy
Optional arguments
None.
Return value
A Surface object.
Exceptions
InvalidNameError.
SurfaceByBoolean(...)
This method creates a surface by performing a boolean operation on two or more input surfaces.
Path
mdb.models[name].parts[name].SurfaceByBoolean
mdb.models[name].rootAssembly.SurfaceByBoolean
Required arguments
A String specifying the repository key.
name
Abaqus Scripting Reference Guide
2186
Surface object

A sequence of Surface objects.
surfaces
Optional arguments
A SymbolicConstant specifying the boolean operation to perform. Possible values are UNION,
INTERSECTION, andDIFFERENCE. The default value is UNION. Note that if DIFFERENCE is
operation
speciﬁed, the order of the given input surfaces is important; All surfaces speciﬁed after the ﬁrst one
are subtracted from the ﬁrst one.
Return value
A Surface object.
Exceptions
InvalidNameError.
SurfaceFromElsets(...)
This method creates a surface from a sequence of element sets in a model database.
Path
mdb.models[name].rootAssembly.SurfaceFromElsets
Required arguments
A String specifying the repository key.
name
A sequence of element sets. For example,
elementSetSeq=((elset1, S1),(elset2, S2))
elementSetSeq
where elset1=mdb.models[name].rootAssembly.sets['Clutch'] and S1
and S2 indicate the side of the element set.
Optional arguments
None.
Return value
A Surface object.
Exceptions
InvalidNameError.
Members
The Surface object can have the following members:
2187
Abaqus Scripting Reference Guide
Surface object

An EdgeArray object.
edges
A FaceArray object.
faces
A MeshElementArray object.
elements
A MeshNodeArray object.
nodes
A tuple of SymbolicConstants specifying the sides; for example, (SIDE1, SIDE2).
sides
A tuple of Ints specifying the instances. This member is not applicable for a Surface
object on an output database.
instances
Abaqus Scripting Reference Guide
2188
Surface object

Skin object
The Skin object stores information on skin reinforcements created on entities.
Access
import part
mdb.models[name].parts[name].skins[name]
import assembly
mdb.models[name].rootAssembly.allInstances[name].skins[name]
mdb.models[name].rootAssembly.instances[name].skins[name]
mdb.models[name].rootAssembly.skins[name]
Skin(...)
This method creates a skin from a sequence of objects in a model database. At least one of the optional arguments
needs to be speciﬁed.
Path
mdb.models[name].parts[name].Skin
Required arguments
A String specifying the repository key. The default value is an empty string.
name
Optional arguments
A sequence of Face objects specifying the faces on which skins should be created. Applicable
to three and two dimensional parts.
faces
A sequence of Edge objects specifying the edges on which skins should be created.
Applicable to axisymmetric parts.
edges
A sequence of MeshFace objects specifying the mesh faces on which skins should be created.
Applicable to three and two dimensional parts.
elementFaces
A sequence of MeshEdge objects specifying the mesh edges on which skins should be
created. Applicable to axisymmetric parts.
elementEdges
Return value
A Skin object.
Exceptions
InvalidNameError.
2189
Skin object

EditSkin(...)
This method modiﬁes underlying entities of the selected skin. At least one of the optional arguments needs to be
speciﬁed.
Path
mdb.models[name].parts[name].EditSkin
Required arguments
A String specifying the repository key. The default value is an empty string.
name
Optional arguments
A sequence of Face objects specifying the faces on which skins should be created. Applicable
to three and two dimensional parts.
faces
A sequence of Edge objects specifying the edges on which skins should be created.
Applicable to axisymmetric parts.
edges
A sequence of MeshFace objects specifying the mesh faces on which skins should be created.
Applicable to three and two dimensional parts.
elementFaces
A sequence of MeshEdge objects specifying the mesh edges on which skins should be
created. Applicable to axisymmetric parts.
elementEdges
Return value
A Skin object.
Exceptions
InvalidNameError.
Members
The Skin object has the following members:
A MeshElementArray object.
elements
An EdgeArray object.
edges
A FaceArray object.
faces
Abaqus Scripting Reference Guide
2190
Skin object

Stringer object
The Stringer object stores information on stringer reinforcements created on entities.
Access
import part
mdb.models[name].parts[name].stringers[name]
import assembly
mdb.models[name].rootAssembly.allInstances[name].stringers[name]
mdb.models[name].rootAssembly.instances[name].stringers[name]
mdb.models[name].rootAssembly.stringers[name]
Stringer(...)
This method creates a stringer from a sequence of objects in a model database. At least one of the optional arguments
needs to be speciﬁed.
Path
mdb.models[name].parts[name].Stringer
Required arguments
A String specifying the repository key. The default value is an empty string.
name
Optional arguments
A sequence of Edge objects specifying the edges on which stringers should be created.
Applicable to three and two dimensional parts.
edges
A sequence of MeshEdge objects specifying the mesh edges on which stringers should be
created. Applicable to three and two dimensional parts.
elementEdges
Return value
A Stringer object.
Exceptions
InvalidNameError.
EditStringer(...)
This method modiﬁes underlying entities of the selected stringer. At least one of the optional arguments needs to be
speciﬁed.
Path
mdb.models[name].parts[name].EditStringer
2191
Stringer object

Required arguments
A String specifying the repository key. The default value is an empty string.
name
Optional arguments
A sequence of Edge objects specifying the edges on which stringers should be created.
Applicable to three and two dimensional parts.
edges
A sequence of MeshEdge objects specifying the mesh edges on which stringers should be
created. Applicable to three and two dimensional parts.
elementEdges
Return value
A Stringer object.
Exceptions
InvalidNameError.
Members
The Stringer object has the following members:
A MeshElementArray object.
elements
An EdgeArray object.
edges
Abaqus Scripting Reference Guide
2192
Stringer object

Section commands
The Section commands are used to create sections and proﬁles with their associated properties and behavior.
The various section objects are all derived from the Section object. The various proﬁle objects are all derived
from the Proﬁle object. See Property commands for the property assignment commands.
In this section:
•
Section object
•
AcousticInfiniteSection object
•
AcousticInterfaceSection object
•
BeamSection object
•
CohesiveSection object
•
CompositeShellSection object
•
CompositeSolidSection object
•
ConnectorSection object
•
EulerianSection object
•
GasketSection object
•
GeneralStiffnessSection object
•
GeometryShellSection object
•
HomogeneousShellSection object
•
HomogeneousSolidSection object
•
LayerProperties object
•
MembraneSection object
•
MPCSection object
•
PEGSection object
•
RebarLayers object
•
SectionLayer object
•
ShellSection object
•
SolidSection object
•
SurfaceSection object
•
TransverseShearBeam object
•
TransverseShearShell object
•
TrussSection object
2193

Section object
The Section object deﬁnes the properties of a section. The Section object is the abstract base type for other Section
objects. The Section object has no explicit constructor. The methods and members of the Section object are common
to all objects derived from the Section.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
sectionsFromOdb(...)
This method creates Section objects by reading an output database. The new sections are placed in the sections repository.
Path
mdb.models[name].sectionsFromOdb
Required arguments
A String specifying the name of the output database ﬁle (including the .odb extension) to be
read. This String can also be the full path to the output database ﬁle if it is located in another
directory.
ﬁleName
Optional arguments
None.
Return value
A list of Section objects.
Exceptions
None.
Members
The Section object has the following member:
A String specifying the repository key.
name
Abaqus Scripting Reference Guide
2194
Section object

AcousticInfiniteSection object
The AcousticInﬁniteSection object deﬁnes the properties of an acoustic section.
The AcousticInﬁniteSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
AcousticInfiniteSection(...)
This method creates an AcousticInﬁniteSection object.
Path
mdb.models[name].AcousticInfiniteSection
session.odbs[name].AcousticInfiniteSection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the material.
material
Optional arguments
A Float specifying the thickness of the section. Possible values are thickness  0.0. The default
value is 1.0.
thickness
An Int specifying the number of ninth-order polynomials that will be used to resolve the variation
of the acoustic ﬁeld in the inﬁnite direction. Possible values are 0 order  10. The default
value is 10.
order
Return value
An AcousticInﬁniteSection object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the AcousticInﬁniteSection object.
Required arguments
None.
2195
AcousticInfiniteSection object

Optional arguments
The optional arguments to setValues are the same as the arguments to the AcousticInﬁniteSection  method, except
for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The AcousticInﬁniteSection object has members with the same names and descriptions as the arguments to the
AcousticInﬁniteSection  method.
Corresponding analysis keywords
•
*SOLID SECTION
Abaqus Scripting Reference Guide
2196
AcousticInfiniteSection object

AcousticInterfaceSection object
The AcousticInterfaceSection object deﬁnes the properties of an acoustic section.
The AcousticInterfaceSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
AcousticInterfaceSection(...)
This method creates an AcousticInterfaceSection object.
Path
mdb.models[name].AcousticInterfaceSection
session.odbs[name].AcousticInterfaceSection
Required arguments
A String specifying the repository key.
name
Optional arguments
A Float specifying the thickness of the section. Possible values are thickness  0.0. The
default value is 1.0.
thickness
Return value
An AcousticInterfaceSection object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the AcousticInterfaceSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the AcousticInterfaceSection  method, except
for the name argument.
2197
AcousticInterfaceSection object

Return value
None.
Exceptions
RangeError.
Members
The AcousticInterfaceSection object has members with the same names and descriptions as the arguments to the
AcousticInterfaceSection  method.
Corresponding analysis keywords
•
*INTERFACE
Abaqus Scripting Reference Guide
2198
AcousticInterfaceSection object

BeamSection object
The BeamSection object deﬁnes the properties of a beam section.
The BeamSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
BeamSection(...)
This method creates a BeamSection object.
Path
mdb.models[name].BeamSection
session.odbs[name].BeamSection
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the integration method for the section. Possible values
are BEFORE_ANALYSIS and DURING_ANALYSIS.
integration
A String specifying the name of the proﬁle. This argument represents the start proﬁle in
case of beamShape=TAPERED.
proﬁle
Optional arguments
A Float specifying the Poisson's ratio of the section. The default value is 0.0.
poissonRatio
A Boolean specifying whether to use thermal expansion data. The default value is OFF.
thermalExpansion
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
None or a Float specifying the density of the section. The default value is None.
density
None or a Float specifying the reference temperature of the section. The default value
is None.
referenceTemperature
A SymbolicConstant specifying the temperature variation for the section. Possible values
are LINEAR and INTERPOLATED. The default value is LINEAR.
temperatureVar
2199
BeamSection object

A Float specifying the 
 factor to create mass proportional damping in direct-integration
dynamics. The default value is 0.0.
alphaDamping
A Float specifying the 
 factor to create stiffness proportional damping in
direct-integration dynamics. The default value is 0.0.
betaDamping
A Float specifying the fraction of critical damping to be used in calculating composite
damping factors for the modes (for use in modal dynamics). The default value is 0.0.
compositeDamping
A Boolean specifying whether added mass effects will be simulated. The default value
is OFF.
useFluidInertia
A SymbolicConstant specifying whether the section is either full submerged or half
submerged. This argument applies only when useFluidInertia = True. Possible values
are FULLY and HALF. The default value is FULLY.
submerged
None or a Float specifying the mass density of the ﬂuid. This argument applies only
when useFluidInertia = True and must be speciﬁed in that case. The default value is
None.
ﬂuidMassDensity
None or a Float specifying the radius of the cylindrical cross-section. This argument
applies only when useFluidInertia = True and must be speciﬁed in that case. The default
value is None.
crossSectionRadius
A Float specifying the added mass coefﬁcient, 
, for lateral motions of the beam. This
argument applies only whenuseFluidInertia = True. The default value is 1.0.
lateralMassCoef
A Float specifying the added mass coefﬁcient, 
, for motions along the axis of the
beam. This argument affects only the term added to the free end(s) of the beam, and
applies only when useFluidInertia = True. The default value is 0.0.
axialMassCoef
A Float specifying the local 1-coordinate of the center of the cylindrical cross-section
with respect to the beam cross-section. This argument applies only when useFluidInertia
= True. The default value is 0.0.
massOffsetX
A Float specifying the local 2-coordinate of the center of the cylindrical cross-section
with respect to the beam cross-section. This argument applies only when useFluidInertia
= True. The default value is 0.0.
massOffsetY
A SymbolicConstant specifying the change in cross-section of the beam along length.
Possible values are CONSTANT and TAPERED. The default value is CONSTANT.
beamShape
This parameter is available for manipulating the model database but not for the ODB
API.
A String specifying the name of the material. The default value is an empty string. The
material is required when integration is "DURING_ANALYSIS".
material
Abaqus Scripting Reference Guide
2200
BeamSection object

A sequence of sequences of Floats specifying the items described below. The default
value is an empty sequence.
table
A sequence of pairs of Floats specifying the positions at which output is requested. The
default value is an empty sequence.
outputPts
A pair of Floats specifying the X–Y coordinates of the centroid. The default value is (0.0,
0.0).
centroid
A pair of Floats specifying the X–Y coordinates of the shear center. The default value is
(0.0, 0.0).
shearCenter
A String specifying the name of the end proﬁle. The type of the end proﬁle must be same
as that of the start proﬁle. This argument is valid only when beamShape=TAPERED.
proﬁleEnd
The default value is an empty string. This parameter is available for manipulating the
model database but not for the ODB API.
A pair of Floats specifying the X- and Y-coordinates to deﬁne an offset for the
cross-section origin from the beam axis with respect to the default (that is, without an
offset) local (1, 2) axis system. The default beamSectionOffset is (0, 0).
beamSectionOffset
Table data
The table data specify the following:
•
E, the Young's modulus of the section.
•
G, the torsional shear modulus of the section.
•
Thermal expansion coefﬁcient, if using thermal expansion.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BeamSection object.
Exceptions
None.
setValues(...)
This method modiﬁes the BeamSection object.
Required arguments
None.
2201
Abaqus Scripting Reference Guide
BeamSection object

Optional arguments
The optional arguments to setValues are the same as the arguments to the BeamSection method, except for the
name argument.
Return value
None.
Exceptions
None.
Members
The BeamSection object has members with the same names and descriptions as the arguments to the BeamSection
method.
In addition, the BeamSection object can have the following member:
A TransverseShearBeam object specifying the transverse shear stiffness
properties.
beamTransverseShear
Corresponding analysis keywords
•
*BEAM GENERAL SECTION
•
*BEAM SECTION
•
*BEAM FLUID INERTIA
•
*CENTROID
•
*DAMPING
•
*SHEAR CENTER
•
*SECTION POINTS
Abaqus Scripting Reference Guide
2202
BeamSection object

CohesiveSection object
The CohesiveSection object deﬁnes the properties of a cohesive section.
The CohesiveSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
CohesiveSection(...)
This method creates a CohesiveSection object.
Path
mdb.models[name].CohesiveSection
session.odbs[name].CohesiveSection
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the geometric assumption that deﬁnes the constitutive
behavior of the cohesive elements. Possible values are TRACTION_SEPARATION,
CONTINUUM, and GASKET.
response
A String specifying the name of the material.
material
Optional arguments
A SymbolicConstant specifying the method used to compute the initial thickness. Possible
values are:
initialThicknessType
•
SOLVER_DEFAULT, specifying that Abaqus will use the analysis product default
•
GEOMETRY, specifying that Abaqus will compute the thickness from the nodal
coordinates of the elements.
•
SPECIFY, specifying that Abaqus will use the value given for initialThickness
The default value is SOLVER_DEFAULT.
A Float specifying the initial thickness for the section. The initialThickness argument
applies only when initialThicknessType=SPECIFY. The default value is 1.0.
initialThickness
None or a Float specifying the out-of-plane thickness for the section. The default value
is None.
outOfPlaneThickness
2203
CohesiveSection object

Return value
A CohesiveSection object.
Exceptions
RangeError and InvalidNameError.
setValues(...)
This method modiﬁes the CohesiveSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CohesiveSection  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The CohesiveSection object has members with the same names and descriptions as the arguments to the CohesiveSection
method.
Corresponding analysis keywords
•
*COHESIVE SECTION
Abaqus Scripting Reference Guide
2204
CohesiveSection object

CompositeShellSection object
The CompositeShellSection object deﬁnes the properties of a composite shell section.
The CompositeShellSection object is derived from the GeometryShellSection object.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
CompositeShellSection(...)
This method creates a CompositeShellSection object.
Path
mdb.models[name].parts[name].compositeLayups[i].CompositeShellSection
mdb.models[name].CompositeShellSection
session.odbs[name].CompositeShellSection
Required arguments
A String specifying the repository key.
name
A SectionLayerArray object specifying the shell cross-section.
layup
Optional arguments
A Boolean specifying whether or not the layup should be made symmetric by the analysis.
The default value is OFF.
symmetric
A SymbolicConstant specifying the distribution used for deﬁning the thickness of the elements.
Possible values are UNIFORM, ANALYTICAL_FIELD, DISCRETE_FIELD,
thicknessType
NODAL_ANALYTICAL_FIELD, and NODAL_DISCRETE_FIELD. The default value is
UNIFORM.
A Boolean specifying whether the shell section properties are speciﬁed by the user prior to
the analysis (ON) or integrated during the analysis (OFF). The default value is OFF.
preIntegrate
A SymbolicConstant specifying whether to use the default value for the Poisson's ratio.
Possible values are:
poissonDeﬁnition
•
DEFAULT, specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an Abaqus/Explicit
analysis.
•
VALUE, specifying that the Poisson's ratio used in the analysis is the value provided in
poisson.
2205
CompositeShellSection object

The default value is DEFAULT.
A Float specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This argument
is valid only when poissonDeﬁnition=VALUE. The default value is 0.5.
poisson
A SymbolicConstant specifying the shell section integration rule. Possible values are
SIMPSON and GAUSS. The default value is SIMPSON.
integrationRule
A SymbolicConstant specifying the mode used for temperature and ﬁeld variable input across
the section thickness. Possible values are GRADIENT and POINTWISE. The default value
is GRADIENT.
temperature
A SymbolicConstant specifying the mechanical idealization used for the section calculations.
This member is only applicable when preIntegrate is set to ON. Possible values are
idealization
NO_IDEALIZATION, SMEAR_ALL_LAYERS, MEMBRANE, and BENDING. The default
value is NO_IDEALIZATION.
None or an Int specifying the number of temperature points to be input. This argument is
valid only when temperature=POINTWISE. The default value is None.
nTemp
None or a Float specifying the effective thickness modulus. This argument is relevant only
for continuum shells and must be used in conjunction with the argument poisson. The default
value is None.
thicknessModulus
A Boolean specifying whether or not to use the value of density. The default value is OFF.
useDensity
A Float specifying the value of density to apply to this section. The default value is 0.0.
density
A String specifying the layup name for this section. The default value is an empty string.
layupName
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements. The thicknessField argument applies only when
thicknessField
thicknessType=ANALYTICAL_FIELD or thicknessType=DISCRETE_FIELD. The default
value is an empty string.
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements at each node. The nodalThicknessField argument applies
nodalThicknessField
only when thicknessType=NODAL_ANALYTICAL_FIELD or
thicknessType=NODAL_DISCRETE_FIELD. The default value is an empty string.
Return value
A CompositeShellSection object.
Exceptions
None.
Abaqus Scripting Reference Guide
2206
CompositeShellSection object

setValues(...)
This method modiﬁes the CompositeShellSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CompositeShellSection  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The CompositeShellSection object has members with the same names and descriptions as the arguments to the
CompositeShellSection  method.
In addition, the CompositeShellSection object can have the following members:
A RebarLayers object specifying reinforcement properties.
rebarLayers
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Corresponding analysis keywords
•
*SHELL SECTION
•
*SHELL GENERAL SECTION
2207
Abaqus Scripting Reference Guide
CompositeShellSection object

CompositeSolidSection object
The CompositeSolidSection object deﬁnes the properties of a composite solid section.
The CompositeSolidSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
CompositeSolidSection(...)
This method creates a CompositeSolidSection object.
Path
mdb.models[name].CompositeSolidSection
session.odbs[name].CompositeSolidSection
Required arguments
A String specifying the repository key.
name
A SectionLayerArray object specifying the solid cross-section.
layup
Optional arguments
A Boolean specifying whether or not the layup should be made symmetric by the analysis.
The default value is OFF.
symmetric
A String specifying the layup name for this section. The default value is an empty string.
layupName
Return value
A CompositeSolidSection object.
Exceptions
None.
setValues(...)
This method modiﬁes the CompositeSolidSection object.
Required arguments
None.
Abaqus Scripting Reference Guide
2208
CompositeSolidSection object

Optional arguments
The optional arguments to setValues are the same as the arguments to the CompositeSolidSection  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The CompositeSolidSection object has members with the same names and descriptions as the arguments to the
CompositeSolidSection  method.
Corresponding analysis keywords
•
*SOLID SECTION
2209
Abaqus Scripting Reference Guide
CompositeSolidSection object

ConnectorSection object
A ConnectorSection object describes the connection type and the behavior of a connector.
The ConnectorSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
ConnectorSection(...)
This method creates a ConnectorSection object.
Path
mdb.models[name].ConnectorSection
session.odbs[name].ConnectorSection
Required arguments
A String specifying the repository key.
name
Optional arguments
A SymbolicConstant specifying the assembled connection type. Possible values are:
assembledType
•
NONE
•
BEAM
•
BUSHING
•
CVJOINT
•
CYLINDRICAL
•
HINGE
•
PLANAR
•
RETRACTOR
•
SLIPRING
•
TRANSLATOR
•
UJOINT
•
WELD
The default value is NONE.
You cannot include the assembledType argument if translationalType or rotationalType are
given a value other than NONE. At least one of the arguments assembledType,
translationalType, or rotationalType must be given a value other than NONE.
Abaqus Scripting Reference Guide
2210
ConnectorSection object

A SymbolicConstant specifying the basic rotational connection type. Possible values are:
rotationalType
•
NONE
•
ALIGN
•
CARDAN
•
CONSTANT_VELOCITY
•
EULER
•
FLEXION_TORSION
•
FLOW_CONVERTER
•
PROJECTION_FLEXION_TORSION
•
REVOLUTE
•
ROTATION
•
ROTATION_ACCELEROMETER
•
UNIVERSAL
The default value is NONE.
You cannot include the rotationalType argument if assembledType is given a value other
than NONE. At least one of the arguments assembledType, translationalType, or
rotationalType must be given an value other than NONE.
A SymbolicConstant specifying the basic translational connection type. Possible values are:
translationalType
•
NONE
•
ACCELEROMETER
•
AXIAL
•
CARTESIAN
•
JOIN
•
LINK
•
PROJECTION_CARTESIAN
•
RADIAL_THRUST
•
SLIDE_PLANE
•
SLOT
The default value is NONE.
You cannot include the translationalType argument if assembledType is given a value other
than NONE. At least one of the arguments assembledType, translationalType, or
rotationalType must be given an value other than NONE.
A SymbolicConstant specifying the time integration scheme to use for analysis. This argument
is applicable only to an Abaqus/Explicit analysis. Possible values are UNSPECIFIED,
IMPLICIT, and EXPLICIT. The default value is UNSPECIFIED.
integration
None or a Float specifying the reference length associated with constitutive response for
the ﬁrst component of relative motion. The default value is None.
u1ReferenceLength
2211
Abaqus Scripting Reference Guide
ConnectorSection object

None or a Float specifying the reference length associated with constitutive response for
the second component of relative motion. The default value is None.
u2ReferenceLength
None or a Float specifying the reference length associated with constitutive response for
the third component of relative motion. The default value is None.
u3ReferenceLength
None or a Float specifying the reference angle in degrees associated with constitutive response
for the fourth component of relative motion. The default value is None.
ur1ReferenceAngle
None or a Float specifying the reference angle in degrees associated with constitutive response
for the ﬁfth component of relative motion. The default value is None.
ur2ReferenceAngle
None or a Float specifying the reference angle in degrees associated with constitutive response
for the sixth component of relative motion. The default value is None.
ur3ReferenceAngle
None or a Float specifying the mass per unit reference length of belt material. This argument
is applicable only when assembledType=SLIPRING, and must be speciﬁed in that case. The
default value is None.
massPerLength
None or a Float specifying the contact angle made by the belt wrapping around node b. This
argument is applicable only to an Abaqus/Explicit analysis, and only when
assembledType=SLIPRING. The default value is None.
contactAngle
A Float specifying the scaling factor for material ﬂow at node b. This argument is applicable
only when assembledType=RETRACTOR or rotationalType=FLOW_CONVERTER. The
default value is 1.0.
materialFlowFactor
A Boolean specifying whether or not all tabular data associated with the behaviorOptions
will be regularized. This argument is applicable only for an Abaqus/Explicit analysis. The
default value is ON.
regularize
A Boolean specifying whether or not the default regularization tolerance will be used for all
tabular data associated with the behaviorOptions. This argument is applicable only for an
Abaqus/Explicit analysis and only if regularize=ON. The default value is ON.
defaultTolerance
A Float specifying the regularization increment to be used for all tabular data associated with
the behaviorOptions. This argument is applicable only for an Abaqus/Explicit analysis and
only if regularize=ON and defaultTolerance=OFF. The default value is 0.03.
regularization
A SymbolicConstant specifying the extrapolation technique to be used for all tabular data
associated with the behaviorOptions. Possible values are CONSTANT and LINEAR. The
default value is CONSTANT.
extrapolation
A ConnectorBehaviorOptionArray object.
behaviorOptions
Return value
A ConnectorSection object.
Abaqus Scripting Reference Guide
2212
ConnectorSection object

Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the ConnectorSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorSection  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The ConnectorSection object has members with the same names and descriptions as the arguments to the
ConnectorSection  method.
Corresponding analysis keywords
•
*CONNECTOR SECTION
•
*CONNECTOR BEHAVIOR
•
*CONNECTOR CONSTITUTIVE REFERENCE
2213
Abaqus Scripting Reference Guide
ConnectorSection object

EulerianSection object
The EulerianSection object deﬁnes the properties of a Eulerian section.
The EulerianSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
EulerianSection(...)
This method creates a EulerianSection object.
Path
mdb.models[name].EulerianSection
session.odbs[name].EulerianSection
Required arguments
A String specifying the repository key.
name
A String-to-String Dictionary specifying a dictionary mapping Material instance names to
Material names. Internally the speciﬁed mapping gets sorted on Material instance name.
data
Optional arguments
None.
Return value
An EulerianSection object.
Exceptions
None.
setValues(...)
This method modiﬁes the EulerianSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the EulerianSection  method, except for the
name argument.
Abaqus Scripting Reference Guide
2214
EulerianSection object

Return value
None.
Exceptions
None.
Members
The EulerianSection object has members with the same names and descriptions as the arguments to the EulerianSection
method.
Corresponding analysis keywords
•
*EULERIAN SECTION
2215
Abaqus Scripting Reference Guide
EulerianSection object

GasketSection object
The GasketSection object deﬁnes the properties of a gasket section.
The GasketSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
GasketSection(...)
This method creates a GasketSection object.
Path
mdb.models[name].GasketSection
session.odbs[name].GasketSection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the material of which the gasket is made or material that
deﬁnes gasket behavior.
material
Optional arguments
A Float specifying the cross-sectional area, width, or out-of-plane thickness, if applicable,
depending on the gasket element type. The default value is 1.0.
crossSection
A Float specifying the initial gap. The default value is 0.0.
initialGap
The SymbolicConstant DEFAULT or a Float specifying the initial gasket thickness. If
DEFAULT is speciﬁed, the initial thickness is determined using nodal coordinates. The
default value is DEFAULT.
initialThickness
A Float specifying the initial void. The default value is 0.0.
initialVoid
The SymbolicConstant DEFAULT or a Float specifying the default stabilization stiffness
used in all but link elements to stabilize gasket elements that are not supported at all nodes,
stabilizationStiffness
such as those that extend outside neighboring components. If DEFAULT is speciﬁed, a
value is used equal to 10–9 times the initial compressive stiffness in the thickness direction.
The default value is DEFAULT.
Return value
A GasketSection object.
Abaqus Scripting Reference Guide
2216
GasketSection object

Exceptions
InvalidNameError and ValueError.
setValues(...)
This method modiﬁes the GasketSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GasketSection  method, except for the
name argument.
Return value
None.
Exceptions
ValueError.
Members
The GasketSection object has members with the same names and descriptions as the arguments to the GasketSection
method.
Corresponding analysis keywords
•
*GASKET SECTION
2217
Abaqus Scripting Reference Guide
GasketSection object

GeneralStiffnessSection object
The GeneralStiffnessSection object deﬁnes the properties of a shell section via the stiffness matrix.
The GeneralStiffnessSection object is derived from the ShellSection object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
GeneralStiffnessSection(...)
This method creates a GeneralStiffnessSection object.
Path
mdb.models[name].GeneralStiffnessSection
session.odbs[name].GeneralStiffnessSection
Required arguments
A String specifying the repository key.
name
A sequence of Floats specifying the stiffness matrix for the section in the order D11,
D12, D22, D13, D23, D33, ...., D66. Twenty-one entries must be given.
stiffnessMatrix
Optional arguments
None or a Float specifying the reference temperature for thermal expansion. The default
value is None.
referenceTemperature
A Boolean specifying whether or not the section stiffness varies with thermal stresses.
The default value is OFF.
applyThermalStress
A Boolean specifying whether the data depend on temperature. The default value is OFF.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A SymbolicConstant specifying whether to use the default value for the Poisson's ratio.
Possible values are:
poissonDeﬁnition
•
DEFAULT, specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an
Abaqus/Explicit analysis.
•
VALUE, specifying that the Poisson's ratio used in the analysis is the value provided
in poisson.
The default value is DEFAULT.
Abaqus Scripting Reference Guide
2218
GeneralStiffnessSection object

A Float specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This
argument is valid only when poissonDeﬁnition=VALUE. The default value is 0.5.
poisson
A Boolean specifying whether or not to use the value of density. The default value is
OFF.
useDensity
A Float specifying the value of density to apply to this section. The default value is 0.0.
density
A sequence of Floats specifying the generalized stress values caused by a unit temperature
rise. Six entries must be given if the value of applyThermalStress is set to True. The
default value is ("").
thermalStresses
A sequence of sequences of Floats specifying the scaling factors for given temperatures
and/or ﬁeld data. Each row should contain (Y, alpha, T, F1,...,Fn). The default value is
an empty sequence.
scalingData
Return value
A GeneralStiffnessSection object.
Exceptions
None.
setValues(...)
This method modiﬁes the GeneralStiffnessSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GeneralStiffnessSection  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The GeneralStiffnessSection object has members with the same names and descriptions as the arguments to the
GeneralStiffnessSection  method.
In addition, the GeneralStiffnessSection object can have the following members:
A RebarLayers object specifying reinforcement properties.
rebarLayers
2219
Abaqus Scripting Reference Guide
GeneralStiffnessSection object

A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Corresponding analysis keywords
•
*SHELL GENERAL SECTION
Abaqus Scripting Reference Guide
2220
GeneralStiffnessSection object

GeometryShellSection object
The GeometryShellSection object deﬁnes the properties of a geometry shell section. The GeometryShellSection object
has no explicit constructor and no methods. The GeometryShellSection object is an abstract base type.
The GeometryShellSection object is derived from the ShellSection object.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
Section(...)
This method creates a GeometryShellSection object.
Path
mdb.models[name].parts[name].compositeLayups[name].Section
Required arguments
None.
Optional arguments
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements at each node. The nodalThicknessField argument applies
nodalThicknessField
only when thicknessType=NODAL_ANALYTICAL_FIELD or
thicknessType=NODAL_DISCRETE_FIELD. The default value is an empty string.
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements. The thicknessField argument applies only when
thicknessField
thicknessType=ANALYTICAL_FIELD or thicknessType=DISCRETE_FIELD. The default
value is an empty string.
A SymbolicConstant specifying the distribution used for deﬁning the thickness of the elements.
Possible values are UNIFORM, ANALYTICAL_FIELD, DISCRETE_FIELD,
thicknessType
NODAL_ANALYTICAL_FIELD, and NODAL_DISCRETE_FIELD. The default value is
UNIFORM.
A Boolean specifying whether the shell section properties are speciﬁed by the user prior to
the analysis (ON) or integrated during the analysis (OFF). The default value is OFF.
preIntegrate
A SymbolicConstant specifying whether to use the default value for the Poisson's ratio.
Possible values are:
poissonDeﬁnition
2221
GeometryShellSection object

•
DEFAULT, specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an Abaqus/Explicit
analysis.
•
VALUE, specifying that the Poisson's ratio used in the analysis is the value provided in
poisson.
The default value is DEFAULT.
A Float specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This argument
is valid only when poissonDeﬁnition=VALUE. The default value is 0.5.
poisson
A SymbolicConstant specifying the shell section integration rule. Possible values are
SIMPSON and GAUSS. The default value is SIMPSON.
integrationRule
A SymbolicConstant specifying the mode used for temperature and ﬁeld variable input across
the section thickness. Possible values are GRADIENT and POINTWISE. The default value
is GRADIENT.
temperature
None or an Int specifying the number of temperature points to be input. This argument is
valid only when temperature=POINTWISE. The default value is None.
nTemp
None or a Float specifying the effective thickness modulus. This argument is relevant only
for continuum shells and must be used in conjunction with the argument poisson. The default
value is None.
thicknessModulus
A Boolean specifying whether or not to use the value of density. The default value is OFF.
useDensity
A Float specifying the value of density to apply to this section. The default value is 0.0.
density
Return value
A GeometryShellSection object.
Exceptions
None.
Members
The GeometryShellSection object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the distribution used for deﬁning the thickness of the
elements. Possible values are UNIFORM, ANALYTICAL_FIELD, DISCRETE_FIELD,
thicknessType
NODAL_ANALYTICAL_FIELD, and NODAL_DISCRETE_FIELD. The default value is
UNIFORM.
A Boolean specifying whether the shell section properties are speciﬁed by the user prior to
the analysis (ON) or integrated during the analysis (OFF). The default value is OFF.
preIntegrate
Abaqus Scripting Reference Guide
2222
GeometryShellSection object

A SymbolicConstant specifying whether to use the default value for the Poisson's ratio.
Possible values are:
poissonDeﬁnition
•
DEFAULT, specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an
Abaqus/Explicit analysis.
•
VALUE, specifying that the Poisson's ratio used in the analysis is the value provided in
poisson.
The default value is DEFAULT.
A Float specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This argument
is valid only when poissonDeﬁnition=VALUE. The default value is 0.5.
poisson
A SymbolicConstant specifying the shell section integration rule. Possible values are
SIMPSON and GAUSS. The default value is SIMPSON.
integrationRule
A SymbolicConstant specifying the mode used for temperature and ﬁeld variable input across
the section thickness. Possible values are GRADIENT and POINTWISE. The default value
is GRADIENT.
temperature
A SymbolicConstant specifying the mechanical idealization used for the section calculations.
This member is only applicable when preIntegrate is set to ON. Possible values are
idealization
NO_IDEALIZATION, SMEAR_ALL_LAYERS, MEMBRANE, and BENDING. The
default value is NO_IDEALIZATION.
None or an Int specifying the number of temperature points to be input. This argument is
valid only when temperature=POINTWISE. The default value is None.
nTemp
None or a Float specifying the effective thickness modulus. This argument is relevant only
for continuum shells and must be used in conjunction with the argument poisson. The default
value is None.
thicknessModulus
A Boolean specifying whether or not to use the value of density. The default value is OFF.
useDensity
A Float specifying the value of density to apply to this section. The default value is 0.0.
density
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements. The thicknessField argument applies only when
thicknessField
thicknessType=ANALYTICAL_FIELD or thicknessType=DISCRETE_FIELD. The default
value is an empty string.
A RebarLayers object specifying reinforcement properties.
rebarLayers
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements at each node. The nodalThicknessField argument applies
nodalThicknessField
only when thicknessType=NODAL_ANALYTICAL_FIELD or
thicknessType=NODAL_DISCRETE_FIELD. The default value is an empty string.
2223
Abaqus Scripting Reference Guide
GeometryShellSection object

A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Abaqus Scripting Reference Guide
2224
GeometryShellSection object

HomogeneousShellSection object
The HomogeneousShellSection object deﬁnes the properties of a shell section.
The HomogeneousShellSection object is derived from the GeometryShellSection object.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
HomogeneousShellSection(...)
This method creates a HomogeneousShellSection object.
Path
mdb.models[name].parts[name].compositeLayups[i]\
.HomogeneousShellSection
mdb.models[name].HomogeneousShellSection
session.odbs[name].HomogeneousShellSection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the section material.
material
Optional arguments
A Float specifying the thickness of the section. The thickness argument applies only when
thicknessType=UNIFORM. The default value is 0.0.
thickness
An Int specifying the number of integration points to be used through the section. Possible
values are numIntPts  0. The default value is 5.
numIntPts
To use the default settings of the analysis products, set numIntPts to 5 if
integrationRule=SIMPSON or set numIntPts to 7 if integrationRule=GAUSS.
A SymbolicConstant specifying the distribution used for deﬁning the thickness of the elements.
Possible values are UNIFORM, ANALYTICAL_FIELD, DISCRETE_FIELD,
thicknessType
NODAL_ANALYTICAL_FIELD, and NODAL_DISCRETE_FIELD. The default value is
UNIFORM.
A Boolean specifying whether the shell section properties are speciﬁed by the user prior to
the analysis (ON) or integrated during the analysis (OFF). The default value is OFF.
preIntegrate
2225
HomogeneousShellSection object

A SymbolicConstant specifying whether to use the default value for the Poisson's ratio. Possible
values are:
poissonDeﬁnition
•
DEFAULT, specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an Abaqus/Explicit
analysis.
•
VALUE, specifying that the Poisson's ratio used in the analysis is the value provided in
poisson.
The default value is DEFAULT.
A Float specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This argument
is valid only when poissonDeﬁnition=VALUE. The default value is 0.5.
poisson
A SymbolicConstant specifying the shell section integration rule. Possible values are SIMPSON
and GAUSS. The default value is SIMPSON.
integrationRule
A SymbolicConstant specifying the mode used for temperature and ﬁeld variable input across
the section thickness. Possible values are GRADIENT and POINTWISE. The default value
is GRADIENT.
temperature
A SymbolicConstant specifying the mechanical idealization used for the section calculations.
This member is only applicable when preIntegrate is set to ON. Possible values are
idealization
NO_IDEALIZATION, SMEAR_ALL_LAYERS, MEMBRANE, and BENDING. The default
value is NO_IDEALIZATION.
None or an Int specifying the number of temperature points to be input. This argument is
valid only when temperature=POINTWISE. The default value is None.
nTemp
None or a Float specifying the effective thickness modulus. This argument is relevant only
for continuum shells and must be used in conjunction with the argument poisson. The default
value is None.
thicknessModulus
A Boolean specifying whether or not to use the value of density. The default value is OFF.
useDensity
A Float specifying the value of density to apply to this section. The default value is 0.0.
density
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements. The thicknessField argument applies only when
thicknessField
thicknessType=ANALYTICAL_FIELD or thicknessType=DISCRETE_FIELD. The default
value is an empty string.
A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne
the thickness of the shell elements at each node. The nodalThicknessField argument applies
nodalThicknessField
only when thicknessType=NODAL_ANALYTICAL_FIELD or
thicknessType=NODAL_DISCRETE_FIELD. The default value is an empty string.
Return value
A HomogeneousShellSection object.
Abaqus Scripting Reference Guide
2226
HomogeneousShellSection object

Exceptions
None.
setValues(...)
This method modiﬁes the HomogeneousShellSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the HomogeneousShellSection  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The HomogeneousShellSection object has members with the same names and descriptions as the arguments to the
HomogeneousShellSection  method.
In addition, the HomogeneousShellSection object can have the following members:
A RebarLayers object specifying reinforcement properties.
rebarLayers
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Corresponding analysis keywords
•
*SHELL SECTION
•
*SHELL GENERAL SECTION
2227
Abaqus Scripting Reference Guide
HomogeneousShellSection object

HomogeneousSolidSection object
The HomogeneousSolidSection object deﬁnes the properties of a solid section.
The HomogeneousSolidSection object is derived from the SolidSection object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
HomogeneousSolidSection(...)
This method creates a HomogeneousSolidSection object.
Path
mdb.models[name].HomogeneousSolidSection
session.odbs[name].HomogeneousSolidSection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the material.
material
Optional arguments
A Float specifying the thickness of the section. Possible values are None or greater than
zero. The default value is 1.0.
thickness
Return value
A HomogeneousSolidSection object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the HomogeneousSolidSection object.
Required arguments
None.
Abaqus Scripting Reference Guide
2228
HomogeneousSolidSection object

Optional arguments
The optional arguments to setValues are the same as the arguments to the HomogeneousSolidSection  method,
except for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The HomogeneousSolidSection object has members with the same names and descriptions as the arguments to the
HomogeneousSolidSection  method.
Corresponding analysis keywords
•
*SOLID SECTION
2229
Abaqus Scripting Reference Guide
HomogeneousSolidSection object

LayerProperties object
The LayerProperties object deﬁnes the properties of a layer of reinforcement for membrane, shell, and surface sections.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].section.rebarLayers\
.layerTable[i]
mdb.models[name].sections[name].rebarLayers.layerTable[i]
import odbSection
session.odbs[name].sections[name].rebarLayers.layerTable[i]
LayerProperties(...)
This method creates a LayerProperties object.
Path
section.LayerProperties
odbSection.LayerProperties
Required arguments
A Float specifying the area per bar.
barArea
A Float or a String specifying the orientation of the rebar. A Float speciﬁes the
angular orientation; a String speciﬁes an orientation name.
orientationAngle
A String specifying the name of the rebar layer.
layerName
A String specifying the name of the rebar material.
material
Optional arguments
A Float specifying the spacing of the rebar. This argument is only valid if the rebarSpacing
argument on the parent RebarLayers object is set to CONSTANT. The default value is 0.0.
barSpacing
A Float specifying the position of the rebar from the middle surface of the shell. layerPosition
applies only for homogeneous shell sections and composite shell sections. The default value
is 0.0.
layerPosition
A Float specifying the spacing angle of the rebar. This argument is only valid if the
rebarSpacing argument on the parent RebarLayers object is set to ANGULAR. The default
value is 0.0.
spacingAngle
A Float specifying the extension ratio for the rebar. This argument is only valid if the
rebarSpacing argument on the parent RebarLayers object is set to LIFT_EQUATION. The
default value is 0.0.
extensionRatio
Abaqus Scripting Reference Guide
2230
LayerProperties object

A Float specifying the radius of the rebar. This argument is only valid if the rebarSpacing
argument on the parent RebarLayers object is set to LIFT_EQUATION. The default value
is 0.0.
radius
Return value
A LayerProperties object.
Exceptions
None.
Members
The LayerProperties object has members with the same names and descriptions as the arguments to the LayerProperties
method.
Corresponding analysis keywords
•
*REBAR LAYER
2231
Abaqus Scripting Reference Guide
LayerProperties object

MembraneSection object
The MembraneSection object deﬁnes the properties of a membrane section.
The MembraneSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
MembraneSection(...)
This method creates a MembraneSection object.
Path
mdb.models[name].MembraneSection
session.odbs[name].MembraneSection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the material.
material
Optional arguments
A Float specifying the thickness for the section. Possible values are thickness  0.0. The default
value is 1.0.
thickness
A SymbolicConstant specifying the distribution used for deﬁning the thickness of the elements.
Possible values are UNIFORM, ANALYTICAL_FIELD, and DISCRETE_FIELD. The default
value is UNIFORM.
thicknessType
A SymbolicConstant specifying whether to use the default value for the Poisson's ratio. Possible
values are:
poissonDeﬁnition
•
DEFAULT, specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an Abaqus/Explicit
analysis.
•
VALUE, specifying that the Poisson's ratio used in the analysis is the value provided in
poisson.
The default value is DEFAULT.
A Float specifying the section Poisson's ratio. Possible values are −1.0 poisson  0.5. This
argument is valid only when poissonDeﬁnition=VALUE. The default value is 0.5.
poisson
Abaqus Scripting Reference Guide
2232
MembraneSection object

A String specifying the name of the AnalyticalField or DiscreteField object used to deﬁne the
thickness of the shell elements. The thicknessField argument applies only when
thicknessField
thicknessType=ANALYTICAL_FIELD or thicknessType=DISCRETE_FIELD. The default
value is an empty string.
Return value
A MembraneSection object.
Exceptions
RangeError and InvalidNameError.
setValues(...)
This method modiﬁes the MembraneSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MembraneSection method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The MembraneSection object has members with the same names and descriptions as the arguments to the
MembraneSection method, except for the thicknessType and thicknessField arguments.
In addition, the MembraneSection object can have the following member:
A RebarLayers object specifying reinforcement properties.
rebarLayers
Corresponding analysis keywords
•
*MEMBRANE SECTION
2233
Abaqus Scripting Reference Guide
MembraneSection object

MPCSection object
The MPCSection object deﬁnes the properties of a multi-point constraint section.
The MPCSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
MPCSection(...)
This method creates a MPCSection object.
Path
mdb.models[name].MPCSection
session.odbs[name].MPCSection
Required arguments
A String specifying the repository key.
name
A SymbolicConstant specifying the MPC type of the section. Possible values are
BEAM_MPC, ELBOW_MPC, PIN_MPC, LINK_MPC, TIE_MPC, and USER_DEFINED.
mpcType
Optional arguments
A SymbolicConstant specifying the mode of the MPC when it is user-deﬁned. Possible values
are DOF_MODE and NODE_MODE. The default value is DOF_MODE.
userMode
The userMode argument applies only when mpcType=USER_DEFINED.
An Int specifying to differentiate between different constraint types in a user-deﬁned MPCSection.
The default value is 0.
userType
The userType argument applies only when mpcType=USER_DEFINED.
Return value
A MPCSection object.
Exceptions
RangeError and InvalidNameError.
Members
The MPCSection object has members with the same names and descriptions as the arguments to the MPCSection
method.
Abaqus Scripting Reference Guide
2234
MPCSection object

Corresponding analysis keywords
•
*MPC
2235
Abaqus Scripting Reference Guide
MPCSection object

PEGSection object
The PEGSection object deﬁnes the properties of a solid section.
The PEGSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
PEGSection(...)
This method creates a PEGSection object.
Path
mdb.models[name].PEGSection
session.odbs[name].PEGSection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the material.
material
Optional arguments
A Float specifying the thickness of the section. Possible values are thickness  0.0. The
default value is 1.0.
thickness
A Float specifying the value of the x component of the angle between the bounding
planes, 
. The default value is 0.0.
wedgeAngle1
A Float specifying the value of the y component of the angle between the bounding
planes, 
. The default value is 0.0.
wedgeAngle2
Return value
A PEGSection object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the PEGSection object.
Abaqus Scripting Reference Guide
2236
PEGSection object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PEGSection  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The PEGSection object has members with the same names and descriptions as the arguments to the PEGSection
method.
Corresponding analysis keywords
•
*SOLID SECTION
2237
Abaqus Scripting Reference Guide
PEGSection object

RebarLayers object
The RebarLayers object deﬁnes the rebar properties of a section.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].section.rebarLayers
mdb.models[name].sections[name].rebarLayers
import odbSection
session.odbs[name].sections[name].rebarLayers
RebarLayers(...)
This method creates a RebarLayers object.
Path
mdb.models[name].parts[name].compositeLayups[i].section.RebarLayers
mdb.models[name].sections[name].RebarLayers
session.odbs[name].sections[name].RebarLayers
Required arguments
A SymbolicConstant specifying the type of rebar geometry. Possible values are
CONSTANT, ANGULAR, and LIFT_EQUATION.
rebarSpacing
A LayerPropertiesArray object specifying the layers of reinforcement.
layerTable
Optional arguments
None.
Return value
A RebarLayers object.
Exceptions
None.
setValues(...)
This method modiﬁes the RebarLayers object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RebarLayers  method.
Abaqus Scripting Reference Guide
2238
RebarLayers object

Return value
None.
Exceptions
None.
Members
The RebarLayers object has members with the same names and descriptions as the arguments to the RebarLayers
method.
Corresponding analysis keywords
•
*REBAR LAYER
2239
Abaqus Scripting Reference Guide
RebarLayers object

SectionLayer object
The SectionLayer object deﬁnes the material layer in a composite shell.
Access
import section
mdb.models[name].parts[name].compositeLayups[i].section.layup[i]
mdb.models[name].sections[name].layup[i]
import odbSection
session.odbs[name].sections[name].layup[i]
SectionLayer(...)
This method creates a SectionLayer object.
Path
section.SectionLayer 
odbSection.SectionLayer
Required arguments
A Float specifying the thickness of the section layer.
thickness
A String specifying the name of the section layer material.
material
Optional arguments
A Float or a String specifying the relative orientation of the section layer. A Float speciﬁes
the angular orientation; a String speciﬁes a user-subroutine orientation name. If a String is
orientAngle
speciﬁed, a user-subroutine orientation is used, otherwise the Float value is used as an angular
orientation. The default value is 0.0.
An Int specifying the number of integration points to be used through the section. This
argument is valid only if the preIntegrate argument on the parent CompositeShellSection
object is set to ON. The default value is 3.
numIntPts
A SymbolicConstant specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. For shells this axis is also the shell normal.
axis
This only applies if a valid reference is provided for the orientation. Possible values are
AXIS_1, AXIS_2, and AXIS_3. The default value is AXIS_3.
A Float specifying the angle of the additional rotation. This only applies if a valid reference
is provided for the orientation. The default value is 0.0.
angle
A SymbolicConstant specifying the method used to describe the additional rotation when a
valid orientation is speciﬁed. Possible values are ROTATION_NONE, ROTATION_ANGLE,
and ROTATION_FIELD. The default value is ROTATION_NONE.
additionalRotationType
Abaqus Scripting Reference Guide
2240
SectionLayer object

A String specifying the ply identiﬁer for this section layer. The default value is "".
plyName
The SymbolicConstant None or a DatumCsys object specifying a coordinate system reference
for the relative orientation of this layer. If this reference is valid it is used as the relative
orientation
orientation of the layer, otherwise the orientAngle is used as described. The default value is
None.
A String specifying the name of the ﬁeld specifying the additional rotation. The default value
is "".
additionalRotationField
Return value
A SectionLayer object.
Exceptions
None.
Members
The SectionLayer object has members with the same names and descriptions as the arguments to the SectionLayer
method.
Corresponding analysis keywords
•
*SHELL SECTION
•
*SHELL GENERAL SECTION
2241
Abaqus Scripting Reference Guide
SectionLayer object

ShellSection object
The ShellSection object deﬁnes the properties of a shell section. The ShellSection object is derived from the Section
object. The ShellSection object has no explicit constructor and no methods or members.
The ShellSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
Members
The ShellSection object can have the following members:
A String specifying the repository key.
name
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Abaqus Scripting Reference Guide
2242
ShellSection object

SolidSection object
The SolidSection object deﬁnes the properties of a solid section. The SolidSection object has no explicit constructor,
no members, and no methods. The SolidSection object is an abstract base type.
The SolidSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
Members
The SolidSection object has the following member:
A String specifying the repository key.
name
2243
SolidSection object

SurfaceSection object
The SurfaceSection object deﬁnes the properties of a surface section.
The SurfaceSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
SurfaceSection(...)
This method creates a SurfaceSection object.
Path
mdb.models[name].SurfaceSection
session.odbs[name].SurfaceSection
Required arguments
A String specifying the repository key.
name
Optional arguments
A Boolean specifying whether or not to use the value of density. The default value is
OFF.
useDensity
A Float specifying the value of density to apply to this section. The default value is 0.0.
density
Return value
A SurfaceSection object.
Exceptions
RangeError and InvalidNameError.
Members
The SurfaceSection object has members with the same names and descriptions as the arguments to the SurfaceSection
method.
In addition, the SurfaceSection object can have the following member:
A RebarLayers object specifying reinforcement properties.
rebarLayers
Abaqus Scripting Reference Guide
2244
SurfaceSection object

Corresponding analysis keywords
•
*SURFACE SECTION
2245
Abaqus Scripting Reference Guide
SurfaceSection object

TransverseShearBeam object
The TransverseShearBeam object deﬁnes the transverse shear stiffness properties of a beam section.
Access
import section
mdb.models[name].sections[name].beamTransverseShear
import odbSection
session.odbs[name].sections[name].beamTransverseShear
TransverseShearBeam(...)
This method creates a TransverseShearBeam object.
Path
mdb.models[name].sections[name].TransverseShearBeam
session.odbs[name].sections[name].TransverseShearBeam
Required arguments
A SymbolicConstant specifying how slenderness compensation factor of the section is
given. Possible values are ANALYSIS_DEFAULT, COMPUTED, and VALUE.
scfDeﬁnition
Optional arguments
None or a Float specifying the k23 shear stiffness of the section. The default value is
None.
k23
None or a Float specifying the k13 shear stiffness of the section. The default value is
None.
k13
The SymbolicConstant COMPUTED or a Float specifying the slenderness compensation
factor of the section. The default value is 0.25.
slendernessCompensation
Return value
A TransverseShearBeam object.
Exceptions
None.
setValues(...)
This method modiﬁes the TransverseShearBeam object.
Required arguments
None.
Abaqus Scripting Reference Guide
2246
TransverseShearBeam object

Optional arguments
The optional arguments to setValues are the same as the arguments to the TransverseShearBeam  method.
Return value
None.
Exceptions
None.
Members
The TransverseShearBeam object has members with the same names and descriptions as the arguments to the
TransverseShearBeam  method.
Corresponding analysis keywords
•
*TRANSVERSE SHEAR STIFFNESS
2247
Abaqus Scripting Reference Guide
TransverseShearBeam object

TransverseShearShell object
The TransverseShearShell object deﬁnes the transverse shear stiffness properties of a shell section.
Access
import section
mdb.models[name].sections[name].transverseShear
import odbSection
session.odbs[name].sections[name].transverseShear
TransverseShearShell(...)
This method creates a TransverseShearShell object.
Path
mdb.models[name].sections[name].TransverseShearShell
session.odbs[name].sections[name].TransverseShearShell
Required arguments
A Float specifying the shear stiffness of the section in the ﬁrst direction.
k11
A Float specifying the shear stiffness of the section in the second direction.
k22
A Float specifying the coupling term in the shear stiffness of the section.
k12
Optional arguments
None.
Return value
A TransverseShearShell object.
Exceptions
None.
setValues(...)
This method modiﬁes the TransverseShearShell object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TransverseShearShell  method.
Abaqus Scripting Reference Guide
2248
TransverseShearShell object

Return value
None.
Exceptions
None.
Members
The TransverseShearShell object has members with the same names and descriptions as the arguments to the
TransverseShearShell  method.
Corresponding analysis keywords
•
*TRANSVERSE SHEAR STIFFNESS
2249
Abaqus Scripting Reference Guide
TransverseShearShell object

TrussSection object
The TrussSection object deﬁnes the properties of a truss section.
The TrussSection object is derived from the Section object.
Access
import section
mdb.models[name].sections[name]
import odbSection
session.odbs[name].sections[name]
TrussSection(...)
This method creates a TrussSection object.
Path
mdb.models[name].TrussSection
session.odbs[name].TrussSection
Required arguments
A String specifying the repository key.
name
A String specifying the name of the material.
material
Optional arguments
A Float specifying the cross-sectional area for the section. Possible values are area  0. The
default value is 1.0.
area
Return value
A TrussSection object.
Exceptions
RangeError and InvalidNameError.
setValues(...)
This method modiﬁes the TrussSection object.
Required arguments
None.
Abaqus Scripting Reference Guide
2250
TrussSection object

Optional arguments
The optional arguments to setValues are the same as the arguments to the TrussSection  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The TrussSection object has members with the same names and descriptions as the arguments to the TrussSection
method.
Corresponding analysis keywords
•
*SOLID SECTION
2251
Abaqus Scripting Reference Guide
TrussSection object

Session commands
Session commands are used to create objects that are not stored with the model; for example, viewports and
display groups.
Abaqus/CAE retains Session objects only for the duration of the session; they are not saved when the model
database is saved.
In this section:
•
Session object
•
AutoColors object
•
Color object
•
Drawing object
•
Image object
•
JournalOptions object
•
MemoryReductionOptions object
•
NetworkDatabaseConnector object
•
NumberFormat object
Abaqus Scripting Reference Guide
2252

Session object
The Session object has no constructor. Abaqus creates the session member when a session is started.
Access
session
setValues(...)
This method modiﬁes the Session object.
Required arguments
None.
Optional arguments
A Float specifying the memory limit value for the Abaqus/CAE kernel process in megabytes. If
the limit is exceeded, Abaqus/CAE displays an error message.
kernelMemoryLimit
The default memory limit value for Windows 32-bit systems if not set is 1800 MB. Increasing
the memory limit is not recommended unless you are using a Windows 32-bit system with the
boot option /3GB /userva=SizeInMBytes to extend the amount of memory available for
Abaqus/CAE. In this case the limit can be changed to 2800 MB.
If the kernel memory size reaches the abq_ker_memory value or the virtual memory limit of
the machine, the following message will be displayed:
Operation did not complete due to a memory allocation failure.
For optimal performance, the memory limit should be set to a value less than the physical amount
of memory on the machine.
The minimum setting allowed is 256 MB.
Return value
None.
Exceptions
None.
enableCADConnection(...)
This method enables the Abaqus/CAE listening port for the speciﬁed CAD system.
Required arguments
A String specifying the CAD system. Available options are Pro/ENGINEER, CATIA V5,
CATIA V6, NX, and SolidWorks.
CADName
2253
Session object

Optional arguments
An Integer specifying the port number to be used by the CAD system to communicate with
Abaqus/CAE. If unspeciﬁed, attempts will be made to identify an open port. The default ports used
are:
portNum
Pro/E: 49178
CATIA V5: 49179
SolidWorks: 49180
NX: 49181
CATIA V6: 49182
Return value
The connection port number used for the CAD connection.
Exceptions
None.
isCADConnectionEnabled()
This method checks the status of CAD Connection.
Arguments
None.
Return value
A Boolean value of True if the CAD connection enabled and False if the CAD connection disabled.
Exceptions
None.
disableCADConnection(...)
This method disables an associative import CAD connection that was enabled.
Required arguments
A String specifying the CAD system for which associative import will be disabled. Available
options are Pro/ENGINEER, CATIA V5, and CATIA V6, NX, and SolidWorks.
CADName
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
2254
Session object

Exceptions
None.
enableParameterUpdate(...)
This method enables parameter updates for ProE and NX by establishing a connection with the listening port previously
set up by the CAD application.
Required arguments
A String specifying the CAD system for which parameter update will be enabled. Available
options are Pro/ENGINEER and NX.
CADName
A String specifying the CAD system version. Allowable options take the form of the speciﬁc
CAD system plus a version string. Examples for Pro/ENGINEER are "Wildﬁre5" and "Creo4."
An NX example is "NX11."
CADVersion
Optional arguments
An Integer specifying the port number to be used by Abaqus/CAE to communicate with the CAD
system. If unspeciﬁed, attempts will be made to identify an open port. This port number is not the
same as the portNum used by the associative import interface. The default CAD listening ports are:
CADPort
ProE: 3344
NX: 3344
Return value
None.
Exceptions
None.
setCADPortNumber(...)
This method enables parameter updates for CATIA V5 and CATIA V6 by establishing a connection with the listening
port previously set up by the CAD application. This port number is used to send the parameter information to the CAD
system.
Required arguments
A String specifying the CAD system for which the port number will be saved. The available
options are 'CATIA V5' and ' CATIA V6'.
CADName
An integer specifying the port number to be used by Abaqus/CAE to send the modiﬁed
parameters to the CAD system.
Port
2255
Abaqus Scripting Reference Guide
Session object

Optional arguments
None.
Return value
None.
Exceptions
None.
updateCADParameters(...)
This method updates the parameters for the speciﬁed model using the speciﬁed parameter ﬁle.
Required arguments
A String specifying the model name to update.
modelName
A String specifying the CAD system for which Abaqus updates the parameters. The available
options are 'Pro/ENGINEER', 'CATIA V5', and 'CATIA V6.'
CADName
A parameter ﬁle containing the parameters that were exposed in the CAD system using the
'ABQ_' preﬁx.
parameterFile
A ﬁle name specifying the CAD part ﬁle for which parameter update is triggered.
CADPartFile
For CADName='CATIA V5' or 'CATIA V6', you can specify either products or parts using
this argument. If you specify a product, Abaqus updates all the parts associated with that
product.
For CADName='Pro/ENGINEER', this argument is optional, and you can specify update for
parts only. However, a single ﬁle can be associated with multiple parts in the case of family
tables. In this case, Abaqus updates all listed parts.
Optional arguments
An String specifying the part name to update. This part name should match the part name in
the originating CAD system.
CADPartName
If you specify neither CADPartFile nor CADPartName during an update in which you speciﬁed
CADName='Pro/ENGINEER,', Abaqus updates all the parts in the speciﬁed ﬁle.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2256
Session object

disableParameterUpdate(...)
This method disables an associative CAD connection using parameters.
Required arguments
A String specifying the CAD system for which the parameter update will be disabled.
Available option is Pro/ENGINEER.
CADName
Optional arguments
None.
Return value
None.
Exceptions
None.
printToFile(...)
This method prints canvas objects to a ﬁle using the attributes stored in the PrintOptions object and the appropriate
format options object.
Required arguments
A String specifying the ﬁle to which the image is to be written. If no ﬁle extension is supplied,
an extension is added based on the selected image format (.ps, .eps, .png, .tif, .svg,
or .svgz).
ﬁleName
Optional arguments
A SymbolicConstant specifying the image format. Possible values are PNG, SVG, TIFF,
PS, and EPS. The default value is PNG.
format
A sequence of canvas objects (viewports, text strings, or arrows) to print. The default is to
print all canvas objects.
canvasObjects
A Boolean specifying the format for an SVG ﬁle. It is valid to use this argument only when
format is SVG. Possible values are False (Uncompressed) and True (Compressed).
compression
Return value
None.
Exceptions
None.
2257
Abaqus Scripting Reference Guide
Session object

printToPrinter(...)
This method prints canvas objects to a Windows printer or to a PostScript printer. The attributes used for printing to
a Windows printer are stored in the PrintOptions object and the PageSetupOptions object; the attributes used for
printing to a PostScript printer are stored in the PrintOptions object and the PsOptions object.
Required arguments
None.
Optional arguments
A String specifying the operating system command or printer name to issue for printing to the
printer. The default value is “lpr” or the value speciﬁed by the printOptions method. If you
printCommand
create a script to print directly to a Windows printer, the printCommand must take the following
form:
session.printToPrinter.setValues(printCommand='PRINTER[
number of characters in name
                                 ]:
printername
                                 PROPERTIES[
number of characters in properties
                                 ]:
document properties
                                 ')
The PROPERTIES is a list of characters that represents the printing preferences for the selected
Windows printer. The properties are not required in a script; the printed output will use the current
settings for the selected printer. You can use 'PRINTER[7]: DEFAULT' to specify the default
Windows printer.
An Int specifying the number of copies to print. Possible values are 1 
numCopies
 100. The
default value is 1.
numCopies
A sequence of canvas objects (viewports, text strings, or arrows) to print. The default is to print all
canvas objects.
canvasObjects
Return value
None.
Exceptions
SystemError: invalid print command
If printCommand is invalid:
SystemError: print command failed
If the print command fails:
RangeError: numCopies must be in the range 1 <= value <=
100
If numCopies is out of range:
Abaqus Scripting Reference Guide
2258
Session object

TypeError: keyword error on compression
If compression is speciﬁed when format is not SVG:
saveOptions(...)
This method saves your customized display settings.
Required arguments
A SymbolicConstant specifying the directory in which Abaqus saves the ﬁle that will be used
to restore your customized settings (abaqus_2025.gpr). Possible values are HOME and
CURRENT.
directory
Optional arguments
None.
Return value
None.
Exceptions
None.
writeVrmlFile(...)
This method exports the current viewport objects to a ﬁle.
Required arguments
A String specifying the ﬁle to which the graphics data is to be written. If no ﬁle extension is
supplied, an extension is added based on the selected format (.wrl, .wrz).
ﬁleName
Optional arguments
A Boolean specifying the format of the VRML ﬁle. Possible values are OFF
(Uncompressed) and ON (Compressed).
compression
A sequence of canvas objects (viewports, text strings, or arrows) to export.
canvasObjects
Return value
None.
Exceptions
None.
write3DXMLFile(...)
This method exports the current viewport objects to a ﬁle.
2259
Abaqus Scripting Reference Guide
Session object

Required arguments
A String specifying the ﬁle to which the graphics data is to be written. If no ﬁle extension
is supplied, (.3dxml) will be added.
ﬁleName
Optional arguments
A Boolean specifying the format. Possible values are False (Uncompressed) and
True (Compressed).
format
A sequence of canvas objects to export.
canvasObjects
Return value
None.
Exceptions
None.
writeOBJFile(...)
This method exports the current viewport objects to a ﬁle.
Required arguments
A String specifying the ﬁle to which the graphics data is to be written. If no ﬁle extension
is supplied, (.obj) will be added.
ﬁleName
Optional arguments
A sequence of canvas objects to export.
canvasObjects
Return value
None.
Exceptions
None.
Members
The Session object can have the following members:
A Boolean specifying whether an Abaqus interactive session is running.
attachedToGui
A Boolean specifying whether Abaqus is executing a replay ﬁle.
replayInProgress
Abaqus Scripting Reference Guide
2260
Session object

A Float specifying the memory usage value for the Abaqus/CAE kernel
process in megabytes.
kernelMemoryFootprint
A Float specifying the maximum value for the memory usage for the
Abaqus/CAE kernel process in megabytes.
kernelMemoryMaxFootprint
A Float specifying the limit for the memory use for the Abaqus/CAE
kernel process in megabytes.
kernelMemoryLimit
A repository of Color objects.
colors
A JournalOptions object specifying how to record selection of geometry
in the journal and replay ﬁles.
journalOptions
A MemoryReductionOptions object specifying options for running in
reduced memory mode.
memoryReductionOptions
A NodeQuery object specifying nodes and their coordinates in a path.
nodeQuery
A ConstrainedSketcherOptions object specifying common options for
all sketches.
sketcherOptions
A ViewerOptions object.
viewerOptions
An AnimationOptions object.
animationOptions
An AVIOptions object.
aviOptions
A GIFOptions object.
gifOptions
An ImageAnimationOptions object.
imageAnimationOptions
An ImageAnimation object.
imageAnimation
An MP4Options object.
mp4Options
A QuickTimeOptions object.
quickTimeOptions
A repository of Viewport objects.
viewports
A RepositorySupport object.
customData
A FieldReportOptions object.
defaultFieldReportOptions
A FreeBodyReportOptions object.
defaultFreeBodyReportOptions
A FieldReportOptions object.
ﬁeldReportOptions
2261
Abaqus Scripting Reference Guide
Session object

A FreeBodyReportOptions object.
freeBodyReportOptions
A repository of Odb objects.
odbs
A repository of ScratchOdb objects.
scratchOdbs
A DefaultOdbDisplay object.
defaultOdbDisplay
A DefaultPlot object.
defaultPlot
A DefaultChartOptions object.
defaultChartOptions
A repository of OdbData objects.
odbData
A repository of MdbData objects.
mdbData
A repository of Path objects.
paths
A repository of FreeBody objects.
freeBodies
A repository of Stream objects.
streams
A repository of Spectrum objects.
spectrums
A CurrentProbeValues object.
currentProbeValues
A ProbeOptions object.
defaultProbeOptions
A ProbeOptions object.
probeOptions
A ProbeReport object.
probeReport
A ProbeReport object.
defaultProbeReport
A SelectedProbeValues object.
selectedProbeValues
A PrintOptions object.
printOptions
An EpsOptions object.
epsOptions
A PageSetupOptions object.
pageSetupOptions
A PngOptions object.
pngOptions
A PsOptions object.
psOptions
A SvgOptions object.
svgOptions
Abaqus Scripting Reference Guide
2262
Session object

A TiffOptions object.
tiffOptions
An AutoColors object specifying the color palette to be used for color
coding.
autoColors
An AutoColors object specifying the color palette to be used forXYCurve
objects.
xyColors
A repository of XYData objects.
xyDataObjects
A repository of XYCurve objects.
curves
A repository of XYPlot objects.
xyPlots
A repository of Chart objects.
charts
An XYReportOptions object.
defaultXYReportOptions
An XYReportOptions object.
xyReportOptions
A repository of View objects.
views
A repository of NetworkDatabaseConnector objects.
networkDatabaseConnectors
A repository of DisplayGroup objects.
displayGroups
A GraphicsInfo object.
graphicsInfo
A GraphicsOptions object.
defaultGraphicsOptions
A GraphicsOptions object.
graphicsOptions
A ViewportAnnotationOptions object.
defaultViewportAnnotationOptions
A repository of Queue objects.
queues
A String specifying the name of the current viewport.
currentViewportName
A Dictionary object specifying the viewports and their associated models.
The Dictionary key speciﬁes the viewport name. The Dictionary value
is a Dictionary specifying the model name.
sessionState
A repository of Image objects.
images
A repository of Movie objects.
movies
A LightOptions object.
defaultLightOptions
2263
Abaqus Scripting Reference Guide
Session object

A DrawingArea object.
drawingArea
A MesherOptions object specifying how to control default settings in
the Mesh module.
defaultMesherOptions
A repository of Drawing objects.
drawings
Abaqus Scripting Reference Guide
2264
Session object

AutoColors object
The AutoColors object deﬁnes a color palette.
Access
session.autoColors
setValues(...)
This method changes the color palette.
Required arguments
A sequence of Strings specifying the colors of the palette. Strings must be named colors or represent
red, green, blue components in hexadecimal form. For instance, '#FF0000' for red, '#00FF00' for
green and '#0000FF' for blue
colors
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The AutoColors object has members with the same names and descriptions as the arguments to the setValues
method.
2265
AutoColors object

Color object
The Color object contains the RGB deﬁnition of a system color.
Access
session.colors[name]
setByRGB(...)
This method changes the RGB value of a user-deﬁned color. However, users cannot deﬁne colors, and this method
does not modify system-deﬁned colors.
Required arguments
A sequence of three Floats specifying the RGB value of the color. The Float values must be between
0.0 and 1.0.
rgb
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The Color object has the following members:
A String specifying the name of the color.
name
A tuple of three Floats specifying the RGB value of the color. The Float values must be between
0.0 and 1.0.
rgb
Abaqus Scripting Reference Guide
2266
Color object

Drawing object
A drawing is the container for a geometric object. The Drawing object stores the vertex data and various settings that
determine how the drawing will be displayed.
Access
session.drawings[name]
Drawing(...)
This method creates an empty Drawing object.
Path
session.Drawing
Required arguments
A String specifying the repository key.
name
Optional arguments
None.
Return value
A Drawing object.
Exceptions
ValueError.
ValueError: There is already a drawing with this
name
If the user attempts to create a new drawing with the name
of an existing drawing:
setVertices(...)
This method accepts the vertex data that deﬁnes the Drawing object. It deﬁnes in an array of vertices with a length
equal to the length of the vertexData sequence divided by vertexDimension.
Required arguments
An Integer in the range of 2 to 4 specifying how many Float values are needed to
compose a single vertex.
vertexDimension
A sequence of Float values that will be used to compose the vertices. There must be
vertexDimension values in the sequence for each vertex.
vertexData
2267
Drawing object

Optional arguments
None.
Return value
The number of vertices described.
Exceptions
RangeError.
ValueError.
RangeError: vertexDimension must be in the range 2 <=
value <= 4
If an invalid vertexDimension is speciﬁed:
ValueError: vertexData cannot be empty.
If vertexData is an empty sequence:
ValueError: vertexData cannot be reduced
If setVertices has already been called and this call
is sending fewer vertices:
setNormals(...)
This method accepts the normal data for each vertex. It deﬁnes in an array of normal vectors with a length equal to the
length of the normalData sequence divided by 3.
Required arguments
A sequence of Float values that will be used to compose the normals. There must be 3 values
in the sequence for each normal.
normalData
If only one normal is speciﬁed, all vertices will use the normal value.
Optional arguments
None.
Return value
The number of normals described.
Exceptions
RangeError.
ValueError.
ValueError: normalData must have at least three
values.
If normalData is sequence with less than 3 values:
ValueError: normalData cannot be reduced.
If setNormals has already been called and this call is
sending fewer values:
Abaqus Scripting Reference Guide
2268
Drawing object

setColors(...)
This method accepts the color data for each vertex. It deﬁnes in an array of colors with a length equal to the length of
the colorData sequence divided by colorDimension.
Required arguments
An Integer in the range of 3 to 4 specifying how many Float values are needed to compose a
single color.
colorDimension
A sequence of Float values in the range of 0.0 to 1.0 that will be used to compose the colors.
There must be colorDimension values in the sequence for each color. The ﬁrst color will be
associated with the ﬁst vertex and so on.
colorData
The ﬁrst Float will be the red value for the ﬁrst color. The second Float will be the green value
and the third will be the blue value. When colorDimension is 4 the 4th Float will be the alpha
value for the ﬁrst color but is ignored.
If only one color is speciﬁed, all vertices will use the color value.
Optional arguments
None.
Return value
The number of colors described.
Exceptions
RangeError.
ValueError.
RangeError: colorDimension must be in the range 3 <=
value <= 4
If an invalid colorDimension is speciﬁed:
ValueError: colorData cannot be empty.
If colorData is an empty sequence:
ValueError: colorData cannot be reduced
If setColors has already been called and this call is
sending fewer colors:
setEdgeColor(...)
This method allows a separate, single color to be used when rendering the edges of the drawing. Once called, edges
will be rendered using the speciﬁed color but facets will continue to use the colors speciﬁed in the setColors
method. An empty sequence can be speciﬁed to resume using the colors arrays for edges.
Required arguments
A sequence of 0 or 3 Float values in the range of 0.0 to 1.0 that will be used to compose the
edge color.
edgeColor
2269
Abaqus Scripting Reference Guide
Drawing object

If the initial Float value is -1, the viewport background color will be used for the edge color.
Optional arguments
None.
Return value
None.
Exceptions
ValueError.
ValueError: edgeColor must be a tuple with 3 values
If edgeColor is not a sequence of 0 or 3 Floats:
setPointColor(...)
This method allows a separate, single color to be used when rendering the points of the drawing. Once called, points
will be rendered using the speciﬁed color but facets will continue to use the colors speciﬁed in the setColors
method. An empty sequence can be speciﬁed to resume using the colors arrays for points.
Required arguments
A sequence of 0 or 3 Float values in the range of 0.0 to 1.0 that will be used to compose the
point color.
pointColor
If the initial Float value is -1, the viewport background color will be used for the edge color.
Optional arguments
None.
Return value
None.
Exceptions
ValueError.
ValueError: pointColor must be a tuple with 3 values
If pointColor is a not sequence of 0 or 3 Floats:
addArrayDraw(...)
This method adds a rendering command to the drawing and can be called multiple times to add additional rendering
commands. When the drawing is referenced by a Viewport, the drawing commands are used the render the Drawing.
The rendering command constructs the speciﬁed type of geometric primitive using numVertices array elements starting
at element index startIndex.
Abaqus Scripting Reference Guide
2270
Drawing object

Required arguments
A SymbolicConstant specifying the type of graphics primitive rendered by this command.
Possible values are POINTS, LINES, LINE_LOOP, LINE_STRIP, TRIANGLES,
TRIANGLE_STRIP, TRIANGLE_FAN, QUADS, and QUAD_STRIP.
type
An Integer specifying the index of the ﬁrst vertex to render.
startIndex
An Integer specifying the total number of vertices to render.
numVertices
Optional arguments
A SymbolicConstant specifying how polygonal graphics primitives will be rendered by this
command. Possible values are FILL, EDGES, and POINTS. The default value is FILL.
polygonMode
Return value
The total number of rendering commands that have been speciﬁed.
Exceptions
ValueError.
ValueError: Drawing request extends past array
size of vertices.
If (startIndex + numVertices - 1) is larger than the length of the
vertex array:
Drawing request extends past array size of
normals.
If (startIndex + numVertices - 1) is larger than the length of the
normal array and normals are required for the graphics primitive:
Drawing request extends past array size of
colors.
If (startIndex + numVertices - 1) is larger than the length of the
color array and vertex colors are required for the graphics
primitive:
addIndexDraw(...)
This method adds a rendering command to the drawing and can be called multiple times to add additional rendering
commands. When the drawing is referenced by a Viewport, the drawing commands are used the render the Drawing.
The rendering command constructs the speciﬁed type of geometric primitive using numVertices array elements starting
at element index startIndex.
Required arguments
A SymbolicConstant specifying the type of graphics primitive rendered by this command. Possible
values are POINTS, LINES, LINE_LOOP, LINE_STRIP, TRIANGLES, TRIANGLE_STRIP,
TRIANGLE_FAN, QUADS, and QUAD_STRIP.
type
A sequence of Integer values specifying index of each vertex to render.
indices
2271
Abaqus Scripting Reference Guide
Drawing object

Optional arguments
A SymbolicConstant specifying how polygonal graphics primitives will be rendered by this
command. Possible values are FILL, EDGES, and POINTS. The default value is FILL.
polygonMode
Return value
The total number of rendering commands that have been speciﬁed.
Exceptions
ValueError.
ValueError: Index values must be positive.
If any value in the indices sequence negative:
ValueError: Drawing request extends past array
size of vertices.
If any value in the indices sequence is larger than the length of
the vertex array:
Drawing request extends past array size of
normals.
If any value in the indices sequence is larger than the length of
the normal array and normals are required for the graphics
primitive:
Drawing request extends past array size of
colors.
If any value in the indices sequence is larger than the length of
the color array and vertex colors are required for the graphics
primitive:
setValues(...)
This method modiﬁes the rendering of the Drawing object.
Required arguments
None.
Optional arguments
A Boolean specifying whether the drawing object will be rendered when referenced. The default
value is OFF.
show
A Boolean specifying whether polygonal graphics primitives facing away from the viewer should
be culled (not rendered). The default value is OFF.
cullBackfaces
The winding order, and not the normal, of the graphics primitive is used to determine its facing.
A SymbolicConstant specifying the winding order for polygonal graphics primitives that face the
viewer. Possible values are:
frontFaceOrder
•
CCW, specifying front face winding order is counter-clockwise.
•
CW, specifying front face winding order is clockwise.
The default value is CCW.
Abaqus Scripting Reference Guide
2272
Drawing object

A Boolean specifying whether the lighting of polygonal graphics primitives is consistent for each
facet or calculated for each displayed pixel. The default value is ON.
smoothShade
When False, only the last normal for each facet will be used in the lighting calculation.
A Boolean specifying whether edge and point drawing commands will be issued in a FILLED or
SHADED display. The default value is ON.
edgesInShaded
If no edge or point drawing commands have been deﬁned, the polygonal drawing commands will
be issued in WIREFRAME and HIDDEN_LINE displays with the polygonMode set to EDGES.
If only edge and point drawing commands have been deﬁned, the Drawing will not be rendered
in FILLED or SHADED displays.
A Float specifying the opacity for polygonal graphics primitives. Possible values are 0.0 
translucency
  1.0 with 0.0 being completely transparent (invisible) and 1.0 being opaque. The
default value is 1.0.
translucency
A value greater than 0.3 will cause the translucent facets to be sorted by depth before being
rendered and has the side effect of disabling two-sided lighting for those facets.
A Float specifying the width of the line, in millimeters, used to render edges. Possible values are
0.0 
lineSize
  5.0 with 0.0 being interpreted as the thinnest possible line. The default value
is 0.0.
lineSize
A value of 0.0 will be one pixel on the output device. One pixel on the screen is generally visible
but one pixel on a 1200 DPI printer may not be clear.
A Float specifying the width of points, in millimeters, used to render points. Possible values are
0.0 
lineSize
  5.0 with 0.0 being interpreted as the smallest possible point. The default value
is 0.0.
pointSize
A value of 0.0 will be one pixel on the output device. One pixel on the screen is generally visible
but one pixel on a 1200 DPI printer may not be clear.
A Boolean specifying whether an object's depth will be considered during rendering. The default
value is ON.
depthTest
When OFF, the object will not be hidden by other objects in front of it.
Return value
None.
Exceptions
RangeError.
RangeError: translucency must be in the range 0.0 <= value <=
1.0
If an invalid translucency value is speciﬁed:
RangeError: lineSize must be in the range 0.0 <= value <= 5.0
If an invalid lineSize value is speciﬁed:
RangeError: pointSize must be in the range 0.0 <= value <= 5.0
If an invalid pointSize value is speciﬁed:
2273
Abaqus Scripting Reference Guide
Drawing object

Members
The Drawing object has members with the same names and descriptions as the arguments to the Drawing  method.
In addition, the Drawing object has the following members:
An Int specifying the number of vertices in the vertex array after a call to the setVertices
method. The default value is 0.
vertexCount
An Int specifying the number of normal vectors in the normal array after a call to the
setNormals method. The default value is 0.
normalCount
An Int specifying the number of colors in the color array after a call to the setColors method.
The default value is 0.
colorCount
A Boolean specifying whether the drawing object will be rendered when referenced. The default
value is OFF.
show
A Boolean specifying whether polygonal graphics primitives facing away from the viewer
should be culled (not rendered). The default value is OFF.
cullBackfaces
The winding order, and not the normal, of the graphics primitive is used to determine its facing.
A SymbolicConstant specifying the winding order for polygonal graphics primitives that face
the viewer. Possible values are:
frontFaceOrder
•
CCW, specifying front face winding order is counter-clockwise.
•
CW, specifying front face winding order is clockwise.
The default value is CCW.
A Float specifying the opacity for polygonal graphics primitives. Possible values are 0.0 
translucency
  1.0 with 0.0 being completely transparent (invisible) and 1.0 being opaque.
The default value is 1.0.
translucency
A value greater than 0.3 will cause the translucent facets to be sorted by depth before being
rendered and has the side effect of disabling two-sided lighting for those facets.
A Float specifying the width of the line, in millimeters, used to render edges. Possible values
are 0.0 
lineSize
  5.0 with 0.0 being interpreted as the thinnest possible line. The default
value is 0.0.
lineSize
A value of 0.0 will be one pixel on the output device. One pixel on the screen is generally visible
but one pixel on a 1200 DPI printer may not be clear.
A Float specifying the width of points, in millimeters, used to render points. Possible values
are 0.0 
lineSize
  5.0 with 0.0 being interpreted as the smallest possible point. The default
value is 0.0.
pointSize
A value of 0.0 will be one pixel on the output device. One pixel on the screen is generally visible
but one pixel on a 1200 DPI printer may not be clear.
Abaqus Scripting Reference Guide
2274
Drawing object

A Boolean specifying whether the lighting of polygonal graphics primitives is consistent for
each facet or calculated for each displayed pixel. The default value is ON.
smoothShade
When False, only the last normal for each facet will be used in the lighting calculation.
A Boolean specifying whether edge and point drawing commands will be issued in a FILLED
or SHADED display. The default value is ON.
edgesInShaded
If no edge or point drawing commands have been deﬁned, the polygonal drawing commands
will be issued in WIREFRAME and HIDDEN_LINE displays with the polygonMode set to
EDGES. If only edge and point drawing commands have been deﬁned, the Drawing will not
be rendered in FILLED or SHADED displays.
A tuple of three Floats specifying the Red, Green, and Blue component values for the edge
color. Possible values for each component are between 0.0 and 1.0.
edgeColor
A tuple of three Floats specifying the Red, Green, and Blue component values for the point
color. Possible values for each component are between 0.0 and 1.0.
pointColor
A Boolean specifying whether an object's depth will be considered during rendering. The default
value is ON.
depthTest
When OFF, the object will not be hidden by other objects in front of it.
2275
Abaqus Scripting Reference Guide
Drawing object

Image object
The Image object is used to store color values and attributes associated with a raster ﬁle. Upon creation, the Image
object is added to the session.images repository.
Access
session.images[name]
Image(...)
This method creates an Image object from the contents of the speciﬁed ﬁle.
Path
session.Image
Required arguments
A String specifying the repository name for the image.
name
A String specifying the ﬁle from which the image is to be read. The ﬁle extension must be
speciﬁed and indicate the image format (.bmp, .gif, .jpg, .jpeg, .ico, .pcx, .png,
.rgb, .tga, .tif, or .xpm).
ﬁleName
Optional arguments
None.
Return value
An Image object.
Exceptions
ValueError.
ValueError: Unable to open image ﬁle
If ﬁleName does not exist or can not be read:
ValueError: Unsupported image format
If ﬁleName references an unsupported image ﬁle format:
ValueError: Unable to decode image ﬁle
If the contents of ﬁleName are corrupt or can not be decoded:
ImageFromMovie(...)
This method creates an Image object from a given frame of an existing Movie object.
Required arguments
A String specifying the repository name for the image.
name
Abaqus Scripting Reference Guide
2276
Image object

A String specifying the name of the movie from which the image is to be extracted. The
movie must exist in the session.movies repository.
movieName
An Int specifying the movie frame number deﬁning the image to be extracted.
frame
A Float specifying the time of the movie deﬁning the image to be extracted.
time
Optional arguments
None.
Return value
An Image object.
Exceptions
ValueError.
TypeError.
ValueError: There is no movie object with this name:
'movieName'
If movieName does not exist:
ValueError: Could not load frame n from movie: 'movieName'
If frame references an non existing frame:
ValueError: Could not load frame at time 't' from movie:
'movieName'
If time references an non existing frame:
TypeError: keyword error on time
If time and frame are given in the same command:
Members
The Image object has members with the same names and descriptions as the arguments to the Image  method.
2277
Abaqus Scripting Reference Guide
Image object

JournalOptions object
A JournalOptions object speciﬁes how to record selection of geometry in the journal and replay ﬁles. journalOptions
can also be used to set the numeric formatting options for ﬁeld report output, geometry commands output, and a default
format for other numeric output. The JournalOptions object has no constructor. Abaqus creates the journalOptions
member when a session is started.
Access
session.journalOptions
setValues(...)
This method modiﬁes the JournalOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the format of the geometry in the replay ﬁle. Possible
values are COORDINATE, INDEX, and COMPRESSEDINDEX. The default value is
COMPRESSEDINDEX.
replayGeometry
A SymbolicConstant specifying the format of the geometry in the recovery ﬁle. Possible
values are COORDINATE, INDEX, and COMPRESSEDINDEX. The default value is
COMPRESSEDINDEX.
recoverGeometry
A NumberFormat object specifying the default format for numeric output. The default
values are the same as the default values for the NumberFormat object.
defaultFormat
A NumberFormat object specifying the default format for numbers in a ﬁeld report output.
The default values are the same as the default values for the NumberFormat object.
ﬁeldReportFormat
A NumberFormat object specifying the default format for numbers in geometry commands
output. The default values are the same as the default values for the NumberFormat object.
geometryFormat
Return value
None.
Exceptions
None.
Members
The JournalOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2278
JournalOptions object

MemoryReductionOptions object
The MemoryReductionOptions object controls the default settings that Abaqus/CAE uses for running in reduced
memory mode. The MemoryReductionOptions object has no constructor. Abaqus creates the MemoryReductionOptions
member when a session is started.
Access
session.memoryReductionOptions
setValues(...)
This method modiﬁes the MemoryReductionOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether Abaqus/CAE should run in reduced memory mode.
The default value is ON.
reducedMemoryMode
A Float specifying the percent of kernelMemoryLimit at which the reduced memory
mode starts. The default value is 75.0.
percentThreshold
Return value
None.
Exceptions
None.
Members
The MemoryReductionOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
2279
MemoryReductionOptions object

NetworkDatabaseConnector object
The NetworkDatabaseConnector object allows you to access an output database on a remote system.
Access
session.networkDatabaseConnectors[name]
NetworkDatabaseConnector(...)
This method creates a NetworkDatabaseConnector object that you can use to access a remote output database. You
can create a network database connector from any platform: Windows or Linux. However, the network database
connector server must reside on a Linux platform; you cannot access an output database that resides on a remote
Windows system. You can access only a remote output database; you cannot access a remote model database.
Path
session.NetworkDatabaseConnector
Required arguments
A String specifying the repository key.
name
A String specifying the name of the remote computer.
hostName
A String specifying the directory on the remote computer.
directory
Optional arguments
A String specifying the name of command to execute Abaqus/CAE on the remote
computer.
remoteAbaqusDriverName
A SymbolicConstant specifying the remote shell command on the local system.
Possible values are RSH and SSH. The default value is SSH.
remoteLoginMechanism
A String specifying the path to thessh command on the local system. The default
value is an empty string.
sshPath
An Int specifying the server port on the remote computer. If serverPort =0, the host
and remote systems are allowed to establish their own port numbers. The default value
is 0.
serverPort
An Int specifying the connection port on the remote computer. The default value is
0.
connectionPort
An Int specifying the timeout in seconds for the remote server. For example: 86400
corresponds to one day. The server exits if it does not receive any communication
from the client during the time speciﬁed. The default value is 86400.
serverTimeout
Abaqus Scripting Reference Guide
2280
NetworkDatabaseConnector object

A Boolean specifying whether to start the remote network database connector server.
The default value is ON.
allowAutomaticStartup
Return value
A NetworkDatabaseConnector object.
Exceptions
None.
start(...)
This method starts the remote network database connector server on the remote host.
Required arguments
None.
Optional arguments
An Int specifying the server port on the remote computer. If serverPort =0, the host and remote
systems are allowed to establish their own port numbers. The default value is 0.
serverPort
An Int specifying the timeout in seconds for the remote server. For example: 86400 corresponds
to one day. The server exits if it does not receive any communication from the client during
the time speciﬁed. The default value is 86400.
serverTimeout
Return value
None.
Exceptions
None.
stop()
This method stops the remote network database connector server on the remote host.
Arguments
None.
Return value
None.
Exceptions
None.
2281
Abaqus Scripting Reference Guide
NetworkDatabaseConnector object

setValues(...)
This method modiﬁes the NetworkDatabaseConnector object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the NetworkDatabaseConnector  method,
except for the name argument.
Return value
None.
Exceptions
None.
Members
The NetworkDatabaseConnector object has members with the same names and descriptions as the arguments to the
NetworkDatabaseConnector  method.
In addition, the NetworkDatabaseConnector object has the following member:
A Boolean specifying if the connection between the client and the server is established.
connected
Abaqus Scripting Reference Guide
2282
NetworkDatabaseConnector object

NumberFormat object
The NumberFormat object is a formatting template used to deﬁne formatting options for certain numeric output.
Access
import visualization
session.defaultFieldReportOptions.numberFormat
session.fieldReportOptions.numberFormat
session.journalOptions.defaultFormat
session.journalOptions.fieldReportFormat
session.journalOptions.geometryFormat
NumberFormat(...)
This method creates a NumberFormat object.
Path
session.defaultFieldReportOptions.NumberFormat
session.fieldReportOptions.NumberFormat
session.journalOptions.NumberFormat
Required arguments
None.
Optional arguments
A Boolean specifying whether the printed digits should be padded with blank characters to
ensure equal sized ﬁelds. The blankPad argument is useful when your printed output includes
columns. The default value is ON.
blankPad
A SymbolicConstant specifying the formatting type. Possible values are ENGINEERING,
SCIENTIFIC, and AUTOMATIC. The default value is ENGINEERING.
format
An Int specifying the number of digits to be displayed in the result. numDigits
. The
default value is 6.
numDigits
An Int specifying the number of decimal places to which the number is to be truncated for
display. precision
. If precision =0, no truncation is applied. The default value is 0.
precision
Return value
A NumberFormat object.
Exceptions
None.
2283
NumberFormat object

Members
The NumberFormat object has members with the same names and descriptions as the arguments to the NumberFormat
method.
Abaqus Scripting Reference Guide
2284
NumberFormat object

Sketcher commands
Sketcher commands are used to deﬁne the entities, such as the geometry, constraints, and dimensions, to create
a sketch and to store the values and attributes associated with a particular sketch.
In this section:
•
ConstrainedSketch object
•
ConstrainedSketchConstraint object
•
ConstrainedSketchDimension object
•
ConstrainedSketcherOptions object
•
ConstrainedSketchGeometry object
•
ConstrainedSketchGeometryArray object
•
ConstrainedSketchImageOptions object
•
ConstrainedSketchOptions object
•
ConstrainedSketchParameter object
•
ConstrainedSketchVertex object
•
ConstrainedSketchVertexArray object
2285

ConstrainedSketch object
A ConstrainedSketch object contains the entities that are used to create a sketch. The objects include
ConstrainedSketchGeometry objects contained in the Geometry Repository, such as Line, Arc, and Spline. Vertex,
Dimension, Constraint, and Parameter objects are contained in their respective repositories.
Access
import sketch
mdb.models[name].sketches[name]
ConstrainedSketch(...)
This method creates a ConstrainedSketch object. If the sketch cannot be created, the method returns None.
Path
mdb.models[name].ConstrainedSketch
Required arguments
A String specifying the repository key.
name
A Float specifying the sheet size.
sheetSize
Optional arguments
A Float specifying the spacing between gridlines. Possible values are Floats  0. The default value
is approximately 2 percent of sheetSize.
gridSpacing
A sequence of sequences of Floats specifying the three-dimensional orientation of the sketch. The
sequence is a 3 × 4 transformation matrix specifying the axis of rotation and the translation vector.
Possible values are any Floats.
transform
The default value for the axis of rotation is the identity matrix
(1.0, 0.0, 0.0),  (0.0, 1.0, 0.0),  (0.0, 0.0, 1.0)
The default value for the translation vector is
(0.0, 0.0, 0.0)
The default values position the sketch on the X–Y plane centered at the origin.
Return value
A ConstrainedSketch object.
Exceptions
None.
Abaqus Scripting Reference Guide
2286
ConstrainedSketch object

ConstrainedSketch(...)
This method copies one ConstrainedSketch object to a new ConstrainedSketch object.
Note:  If the name of the sketch to be copied to is __edit__, Abaqus creates an exact copy that contains both
reference geometry and a nonidentity transform matrix. Otherwise, the Sketch copy constructor strips the reference
geometry from the copied sketch and sets the transform matrix to identity, creating a stand-alone copy.
Path
mdb.models[name].ConstrainedSketch
Required arguments
A String specifying the repository key.
name
A ConstrainedSketch object to be copied.
objectToCopy
Optional arguments
None.
Return value
A ConstrainedSketch object.
Exceptions
InvalidNameError.
ConstrainedSketchFromGeometryFile(...)
This method creates a ConstrainedSketch object and places it in the sketches repository.
Path
mdb.models[name].ConstrainedSketchFromGeometryFile
Required arguments
A String specifying the repository key.
name
An AcisFile object specifying a ﬁle containing geometry. The geometry in the ﬁle is
converted to two-dimensional sketch geometry in the X–Y plane.
geometryFile
Optional arguments
None.
2287
Abaqus Scripting Reference Guide
ConstrainedSketch object

Return value
A ConstrainedSketch object.
Exceptions
InvalidNameError.
print()
This method prints the following statistics about a sketch:
•
The sketch Id (a positive integer).
•
The number of geometry curves (the number of ConstrainedSketchGeometry objects).
•
The number of dimensions (the number of ConstrainedSketchDimension objects).
•
The number of vertices (the number of ConstrainedSketchVertex objects).
Arguments
None.
Return value
None.
Exceptions
None.
assignCenterline(...)
This method indicates the construction line that will be used as a centerline for revolved features.
Required arguments
A ConstrainedSketchGeometry object specifying a construction line that indicates the centerline
of revolved features.
line
Optional arguments
None.
Return value
None.
Exceptions
None.
assignCenterOfTwist(...)
This method indicates the isolated point that will be used as the center of twist when an extruded feature is created
with twist.
Abaqus Scripting Reference Guide
2288
ConstrainedSketch object

Required arguments
A ConstrainedSketchVertex object specifying an isolated point that indicates the center of twist
for extruded features that use a twist angle.
point
Optional arguments
None.
Return value
None.
Exceptions
None.
autoDimension(...)
This method applies dimensions to the selected ConstrainedSketchGeometry objects in an effort to make the
ConstrainedSketch well deﬁned.
Required arguments
A sequence specifying the ConstrainedSketchGeometry objects to dimension.
objectList
Optional arguments
None.
Return value
None.
Exceptions
None.
autoTrimCurve(...)
This method automatically trims a selected ConstrainedSketchGeometry object at the speciﬁed location. If the object
does not intersect other ConstrainedSketchGeometry objects, the entire selected object will be deleted.
Required arguments
The ConstrainedSketchGeometry object to be trimmed.
curve1
A pair of Floats specifying the location on ConstrainedSketchGeometry where the trimming
should be applied. point1 and parameter1 are mutually exclusive.
point1
A Float specifying the parameter location on the ConstrainedSketchGeometry where the
trimming should be applied. point1 and parameter1 are mutually exclusive.
parameter1
2289
Abaqus Scripting Reference Guide
ConstrainedSketch object

Optional arguments
None.
Return value
None.
Exceptions
None.
breakCurve(...)
This method breaks a speciﬁed ConstrainedSketchGeometry object (curve1) using another speciﬁed
ConstrainedSketchGeometry object (curve2). If the selected ConstrainedSketchGeometry objects intersect, then only
curve1 will be broken; curve2 is not affected by the operation. The location for the break is determined by the speciﬁed
point values.
Required arguments
A ConstrainedSketchGeometry object specifying the object to be broken.
curve1
A pair of Floats specifying the location on curve1 near where the break should be applied.
point1
A ConstrainedSketchGeometry object specifying where curve1 should be broken.
curve2
A pair of Floats specifying the location on curve2 near where curve1 should be broken.
point2
Optional arguments
None.
Return value
None.
Exceptions
None.
copyMirror(...)
This method creates copies of the given ConstrainedSketchGeometry objects, mirrors them about a selected line, and
inserts them into the appropriate repositories of the ConstrainedSketch object.
Required arguments
A ConstrainedSketchGeometry object specifying the line about which Abaqus will mirror
the sketch.
mirrorLine
A sequence of ConstrainedSketchGeometry objects specifying the sketch to be copied
and mirrored.
objectList
Abaqus Scripting Reference Guide
2290
ConstrainedSketch object

Optional arguments
None.
Return value
None.
Exceptions
None.
copyMove(...)
This method creates copies of the given ConstrainedSketchGeometry objects, moves them from their original position,
and inserts them into the appropriate repositories of the ConstrainedSketch object.
Required arguments
A sequence of two Floats specifying the translation vector.
vector
A sequence of ConstrainedSketchGeometry objects to be copied and moved.
objectList
Optional arguments
None.
Return value
None.
Exceptions
None.
copyRotate(...)
This method creates copies of the given ConstrainedSketchGeometry objects, rotates them, and inserts them into the
appropriate repositories of the ConstrainedSketch object.
Required arguments
A pair of Floats specifying the center of rotation.
centerPoint
A Float specifying the angle of rotation in degrees.
angle
A sequence of ConstrainedSketchGeometry objects to be copied and moved.
objectList
Optional arguments
None.
2291
Abaqus Scripting Reference Guide
ConstrainedSketch object

Return value
None.
Exceptions
None.
copyScale(...)
This method creates copies of the given ConstrainedSketchGeometry objects, scales them by the speciﬁed value about
a selected point, and inserts them into the appropriate repositories of the ConstrainedSketch object.
Required arguments
A Float specifying the value for scaling.
scaleValue
A pair of Floats specifying the center of scaling.
scaleCenter
A sequence of ConstrainedSketchGeometry objects to be copied and scaled.
objectList
Optional arguments
None.
Return value
None.
Exceptions
None.
delete(...)
This method deletes the given ConstrainedSketchGeometry, ConstrainedSketchDimension, or
ConstrainedSketchConstraint objects.
Required arguments
A sequence of ConstrainedSketchGeometry, ConstrainedSketchDimension, or
ConstrainedSketchConstraint objects to be deleted.
objectList
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2292
ConstrainedSketch object

deleteParameter(...)
The command deletes a speciﬁed parameter.
Required arguments
A String specifying the name of the parameter to delete.
name
Optional arguments
None.
Return value
None.
Exceptions
None.
dragEntity(...)
This method drags a speciﬁed ConstrainedSketchGeometry or ConstrainedSketchVertex object to a speciﬁc location.
Required arguments
A ConstrainedSketchGeometry or ConstrainedSketchVertex object specifying the object to drag.
entity
A sequence of sequences of three Floats specifying a sequence of points along which to drag the
entity. The order of points in the sequence deﬁnes a path that determines the solution.
points
Optional arguments
None.
Return value
None.
Exceptions
None.
linearPattern(...)
This method copies ConstrainedSketchGeometry objects in a linear pattern along one or two directions. This method
also copies any associated dimension or constraint objects that exist between the given objects.
2293
Abaqus Scripting Reference Guide
ConstrainedSketch object

Required arguments
An Integer specifying the total number of copies, including the original objects, that appear
along the ﬁrst direction in the pattern. Possible values are 1 
number1
 1000.
number1
A Float specifying the spacing between copies along the ﬁrst direction in the pattern. Possible
values are 0.0 
spacing1 .
spacing1
A Float specifying the angle in degrees of the ﬁrst direction in the pattern. Possible values are
–360.0 
angle1
 360.0.
angle1
Optional arguments
A sequence of ConstrainedSketchVertex objects to copy.
vertexList
A sequence of ConstrainedSketchGeometry objects to copy.
geomList
An integer specifying the total number of copies, including the original objects, that appear
along the second direction in the pattern. Possible values are 1 
number2
 1000. The
default value is 1. The value of either number1 or number2 must be greater than one.
number2
A Float specifying the spacing between copies along the ﬁrst direction in the pattern. Possible
values are 0.0 
spacing2. The default value is spacing1.
spacing2
A Float specifying the angle in degrees of the ﬁrst direction in the pattern. Possible values
are –360.0 
angle2
 360.0. The default value is 90° beyond the value of angle1.
angle2
Return value
None.
Exceptions
Number must be greater than 1 for at least one direction.
AbaqusException
mergeVertices(...)
This method merges the ConstrainedSketchVertex objects that lie within the speciﬁed distance of each other. If only
one ConstrainedSketchVertex object is selected, it will merge all ConstrainedSketchVertex objects that lie within the
speciﬁed distance of that vertex. If more than one vertex is selected, the search will be restricted to only the selected
ConstrainedSketchVertex objects.
Required arguments
A Float specifying the search radius.
value
A sequence of ConstrainedSketchVertex objects to be merged.
vertexList
Abaqus Scripting Reference Guide
2294
ConstrainedSketch object

Optional arguments
None.
Return value
None.
Exceptions
None.
move(...)
This method translates the given ConstrainedSketchGeometry objects by the given vector.
Required arguments
A sequence of two Floats specifying the translation vector.
vector
A sequence of ConstrainedSketchGeometry objects specifying the objects to be translated.
objectList
Optional arguments
None.
Return value
None.
Exceptions
None.
offset(...)
This method creates copies of the selected ConstrainedSketchGeometry objects, offsets them by the speciﬁed distance
in the speciﬁed direction, and inserts them into the ConstrainedSketch object's appropriate repositories. If connected
objects are selected, trim or extend is carried out to complete the offset.
Required arguments
A Float specifying the distance to be offset.
distance
A sequence of ConstrainedSketchGeometry objects to be copied and offset.
objectList
A SymbolicConstant specifying which side the offset should occur. Possible values are
LEFT and RIGHT.
side
2295
Abaqus Scripting Reference Guide
ConstrainedSketch object

Optional arguments
A Boolean specifying whether the corners need to be rounded instead of being
extended.
ﬁlletCorners
Return value
None.
Exceptions
None.
radialPattern(...)
This method copies ConstrainedSketchGeometry objects in a radial pattern about a speciﬁed center point.
Required arguments
An Int specifying the total number of copies, including the original objects, that appear in the
radial pattern. Possible values are 2 
number2
 1000.
number
A Float specifying the total angle in degrees between the ﬁrst and last instance in the pattern.
A positive angle corresponds to a counter-clockwise direction. The values 360° and -360°
totalAngle
represent a special case where the pattern makes a full circle. In this case, because the copy
would overlay the original, the copy is not placed at the last position. Possible values are –360.0
totalAngle
 360.0.
A pair of Floats specifying the center of the radial pattern.
centerPoint
Optional arguments
A sequence of ConstrainedSketchVertex objects to copy.
vertexList
A sequence of ConstrainedSketchGeometry objects to copy.
geomList
Return value
None.
Exceptions
None.
resetView()
This method resets the view to be perpendicular to the sketching plane.
Arguments
None.
Abaqus Scripting Reference Guide
2296
ConstrainedSketch object

Return value
None.
Exceptions
None.
rectangle(...)
This method creates four lines that form a rectangle with diagonal corners deﬁned by the given points and inserts them
into the geometry repository of the ConstrainedSketch object.
Required arguments
A pair of Floats specifying the ﬁrst corner of the rectangle.
point1
A pair of Floats specifying the second corner of the rectangle.
point2
Optional arguments
None.
Return value
A list of ConstrainedSketchGeometry objects.
Exceptions
None.
removeGapsAndOverlaps(...)
This method removes gaps and overlaps between sketch geometries speciﬁed by the user. This method is particularly
useful when cleaning up imported sketches
Required arguments
A ﬂoat value that speciﬁes the largest size of the gap or overlap between entities that is to be
removed. Typically this value is small and is used to close gaps and overlaps that may not exist
tolerance
in the originating program but exist in the sketch because of mismatched tolerances between
the two programs.
A sequence of ConstrainedSketchGeometry objects where the gaps and overlaps are to be
removed.
geomList
Optional arguments
None.
Return value
None.
2297
Abaqus Scripting Reference Guide
ConstrainedSketch object

Exceptions
None.
repairShortEdges(...)
This method deletes the short edges speciﬁed, optionally selecting only those short edges whose lengths are smaller
than the speciﬁed tolerance and healing the resultant gap in the sketch. This method is particularly useful in conjunction
with removeGapsAndOverlap when cleaning up imported sketches.
Required arguments
A sequence of ConstrainedSketchGeometry objects where the short edges are to be
removed.
geomList
Optional arguments
A ﬂoat value that is used to select and delete only those edges speciﬁed in geomList whose lengths
are smaller than the given value. The default value is –1.0. This value implies that all edges speciﬁed
in geomList will be removed and the sketch healed to remove gaps left by their removal.
tolerance
Return value
None.
Exceptions
None.
retrieveSketch(...)
This method copies all ConstrainedSketchGeometry, ConstrainedSketchDimension, ConstrainedSketchConstraint, and
ConstrainedSketchParameter objects from the speciﬁed ConstrainedSketch object. The new objects are added to the
existing objects (if any). The objects in the speciﬁed ConstrainedSketch object are not modiﬁed by the retrieve operation.
Required arguments
A ConstrainedSketch object specifying the object from which to copy.
sketch
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2298
ConstrainedSketch object

rotate(...)
This method rotates the given ConstrainedSketchGeometry objects by the given angle and about the given point.
Required arguments
A pair of Floats specifying the center of rotation.
centerPoint
A Float specifying the angle of rotation in degrees.
angle
A sequence of ConstrainedSketchGeometry specifying the objects to be rotated.
objectList
Optional arguments
None.
Return value
None.
Exceptions
None.
scale(...)
This method scales the given ConstrainedSketchGeometry objects by the given scale factor and about the given point.
Required arguments
A Float specifying the value of scale.
scaleValue
A pair of Floats specifying the center of scale.
scaleCenter
A sequence of ConstrainedSketchGeometry objects specifying the objects to be
scaled.
objectList
Optional arguments
None.
Return value
None.
Exceptions
None.
2299
Abaqus Scripting Reference Guide
ConstrainedSketch object

setPrimaryObject(...)
This method makes the ConstrainedSketch object the primary object in the current viewport. The sketch remains the
primary object in the current viewport until an unsetPrimaryobject command is issued.
Required arguments
A SymbolicConstant specifying how the sketch is displayed. Possible values are:
option
•
STANDALONE: Indicates a new stand-alone sketch. The current viewport is cleared and is replaced
by the stand-alone sketch. The view direction is set to −.
•
SUPERIMPOSE: Indicates that the sketch is superimposed on the current viewport. The view direction
is changed to be perpendicular to the sketch plane. The change is effected smoothly as an animated
sequence of many small viewing steps.
Optional arguments
None.
Return value
None.
Exceptions
None.
trimExtendCurve(...)
This method trims or extends a speciﬁed ConstrainedSketchGeometry object (curve1) using another speciﬁed
ConstrainedSketchGeometry object (curve2). curve2 is not affected by the operation. The location for the trim or extend
is determined by the speciﬁed point values.
Required arguments
The ConstrainedSketchGeometry object specifying the object to be trimmed or extended.
curve1
A pair of Floats specifying the location on curve1 where trim or extend should be applied.
point1
The ConstrainedSketchGeometry object specifying the object to which curve1 is trimmed or
extended. curve2 is not trimmed or extended.
curve2
A pair of Floats specifying the location on curve2 near where curve1 should be trimmed or
extended.
point2
Optional arguments
None.
Abaqus Scripting Reference Guide
2300
ConstrainedSketch object

Return value
None.
Exceptions
None.
undo()
This method undoes the effects of the last ConstrainedSketch object method.
Arguments
None.
Return value
None.
Exceptions
None.
unsetPrimaryObject()
This method removes the ConstrainedSketch object from the current viewport, reversing the effects of the
setPrimaryobject command. If the option argument was set to SUPERIMPOSE, the viewport will be returned
to the view orientation that was in place when the setPrimaryobject command was issued. If the option argument
was set to STANDALONE, the viewport will be left empty.
Arguments
None.
Return value
None.
Exceptions
None.
writeAcisFile(...)
This method exports the geometry of the sketch to a named ﬁle in ACIS format.
Required arguments
A String specifying the ﬁle name.
ﬁleName
Optional arguments
A Float specifying the ACIS version. For example, the Float “12.0” corresponds to ACIS Version
12.0. The default value is the current version of ACIS.
version
2301
Abaqus Scripting Reference Guide
ConstrainedSketch object

Return value
None.
Exceptions
InvalidNameError.
writeIgesFile(...)
This method exports the geometry of the sketch to a named ﬁle in IGES format.
Required arguments
A String specifying the ﬁle name.
ﬁlename
Optional arguments
A SymbolicConstant specifying a particular ﬂavor of IGES to export. Possible values are
STANDARD, AUTOCAD, SOLIDWORKS, JAMA, and MSBO.
ﬂavor
Return value
None.
Exceptions
InvalidNameError.
Members
The ConstrainedSketch object can have the following members:
A repository of ConstrainedSketchConstraint objects.
constraints
A repository of ConstrainedSketchDimension objects.
dimensions
A ConstrainedSketchGeometryArray object specifying the sketch geometry, such
as lines, arcs, circles, and splines.
geometry
A repository of ConstrainedSketchParameter objects specifying sketch parameters,
which may be associated with dimensions.
parameters
A ConstrainedSketchOptions object specifying the sketch option settings.
sketchOptions
A ConstrainedSketchVertexArray object.
vertices
A ConstrainedSketchImageOptions object.
imageOptions
Abaqus Scripting Reference Guide
2302
ConstrainedSketch object

ConstrainedSketchConstraint object
The ConstrainedSketchConstraint object stores the constraints associated with a sketch.
Access
import sketch
mdb.models[name].sketches[name].constraints[i]
CoincidentConstraint(...)
This method creates a coincident constraint. This constraint applies to two vertices, to a vertex and a
ConstrainedSketchGeometry object, or to two ConstrainedSketchGeometry objects of the same type and constrains
them to be coincident.
Path
mdb.models[name].sketches[name].CoincidentConstraint
Required arguments
A ConstrainedSketchGeometry object or a Vertex object specifying the ﬁrst object.
entity1
A ConstrainedSketchGeometry object or a Vertex object specifying the second object.
entity2
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
ConcentricConstraint(...)
This method creates a concentric constraint. This constraint applies to any combination of circles, arcs, ellipses, and
points and constrains them to be concentric. A concentric constraint implies that the center of ConstrainedSketchGeometry
objects coincide.
Path
mdb.models[name].sketches[name].ConcentricConstraint
Required arguments
A ConstrainedSketchGeometry object specifying the ﬁrst arc, circle, ellipse, or sketch vertex.
entity1
2303
ConstrainedSketchConstraint object

A ConstrainedSketchGeometry object specifying the second arc, circle, ellipse, or sketch
vertex.
entity2
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
EqualLengthConstraint(...)
This method creates an equal length constraint. This constraint applies to lines and constrains them such that their
lengths are equal.
Path
mdb.models[name].sketches[name].EqualLengthConstraint
Required arguments
A ConstrainedSketchGeometry object specifying the ﬁrst line.
entity1
A ConstrainedSketchGeometry object specifying the second line.
entity2
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
EqualRadiusConstraint(...)
This method creates an equal radius constraint. This constraint applies to circles and arcs and constrains them such
that their radii are equal.
Path
mdb.models[name].sketches[name].EqualRadiusConstraint
Abaqus Scripting Reference Guide
2304
ConstrainedSketchConstraint object

Required arguments
A ConstrainedSketchGeometry object specifying the ﬁrst arc or circle.
entity1
A ConstrainedSketchGeometry specifying the second arc or circle.
entity2
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
FixedConstraint(...)
This method creates a ﬁxed constraint. This constraint applies to a ConstrainedSketchGeometry object or a Vertex
object and constrains them to be ﬁxed in space. Both the location and the shape of the sketch geometry is ﬁxed.
Path
mdb.models[name].sketches[name].FixedConstraint
Required arguments
A ConstrainedSketchGeometry object or a Vertex object specifying the item to ﬁx in space.
entity
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
HorizontalConstraint(...)
This method creates a horizontal constraint. This constraint applies to a line and constrains it to be horizontal.
Path
mdb.models[name].sketches[name].HorizontalConstraint
2305
Abaqus Scripting Reference Guide
ConstrainedSketchConstraint object

Required arguments
A ConstrainedSketchGeometry object specifying the line to constrain.
entity
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
VerticalConstraint(...)
This method creates a vertical constraint. This constraint applies to a line and constrains it to be vertical.
Path
mdb.models[name].sketches[name].VerticalConstraint
Required arguments
A ConstrainedSketchGeometry object specifying the line to constrain.
entity
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
ParallelConstraint(...)
This method creates a parallel constraint. This constraint applies to lines and constrains them to be parallel.
Path
mdb.models[name].sketches[name].ParallelConstraint
Required arguments
A ConstrainedSketchGeometry object specifying the ﬁrst line.
entity1
A ConstrainedSketchGeometry object specifying the second line.
entity2
Abaqus Scripting Reference Guide
2306
ConstrainedSketchConstraint object

Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
PerpendicularConstraint(...)
This method creates a perpendicular constraint. This constraint applies to different types of ConstrainedSketchGeometry
objects and constrains them to be perpendicular to each other.
Path
mdb.models[name].sketches[name].PerpendicularConstraint
Required arguments
A ConstrainedSketchGeometry object specifying the ﬁrst object.
entity1
A ConstrainedSketchGeometry object specifying the second object.
entity2
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
EqualDistanceConstraint(...)
This method creates an equal distance constraint. This constraint can be applied between a midpoint Vertex object and
any other two Vertex objects or between a midpoint Vertex object and two ConstrainedSketchGeometry objects that
are lines. The equal distance constraint forces the midpoint vertex to remain at an equal distance from the two other
vertices or lines.
Path
mdb.models[name].sketches[name].EqualDistanceConstraint
Required arguments
AConstrainedSketchGeometry object specifying the ﬁrst line or Vertex object.
entity1
2307
Abaqus Scripting Reference Guide
ConstrainedSketchConstraint object

A ConstrainedSketchGeometry object specifying the second line or Vertex object.
entity2
A Vertex object specifying the vertex that will be positioned an equal distance from entity1
and entity2.
midpoint
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
TangentConstraint(...)
This method creates a tangent constraint. This constraint applies to different types of ConstrainedSketchGeometry
objects and constrains them to remain tangential.
Path
mdb.models[name].sketches[name].TangentConstraint
Required arguments
A ConstrainedSketchGeometry object specifying the ﬁrst object.
entity1
A ConstrainedSketchGeometry object specifying the second object.
entity2
Optional arguments
None.
Return value
A ConstrainedSketchConstraint object.
Exceptions
None.
Members
The ConstrainedSketchConstraint object has no members.
Abaqus Scripting Reference Guide
2308
ConstrainedSketchConstraint object

ConstrainedSketchDimension object
The ConstrainedSketchDimension object stores the dimensions associated with a sketch.
Access
import sketch
mdb.models[name].sketches[name].dimensions[i]
AngularDimension(...)
This method constructs a ConstrainedSketchDimension object between two ConstrainedSketchGeometry objects, with
the given angle between them.
Path
mdb.models[name].sketches[name].AngularDimension
Required arguments
A ConstrainedSketchGeometry object specifying the ﬁrst line.
line1
A ConstrainedSketchGeometry object specifying the second line.
line2
A pair of Floats specifying the location of the dimension text.
textPoint
Optional arguments
A Float specifying the angle between the two lines.
value
A Boolean specifying whether the created dimension enforces the above value or if it
simply measures the angle between two lines.
reference
Return value
A ConstrainedSketchDimension object (None if the dimension cannot be created).
Exceptions
None.
HorizontalDimension(...)
This method constructs a ConstrainedSketchDimension object between two vertices. A horizontal dimension indicates
the horizontal distance along the X-axis between two vertices.
Path
mdb.models[name].sketches[name].HorizontalDimension
2309
ConstrainedSketchDimension object

Required arguments
A ConstrainedSketchVertex object specifying the ﬁrst endpoint.
vertex1
A ConstrainedSketchVertex object specifying the second endpoint.
vertex2
A pair of Floats specifying the location of the dimension text.
textPoint
Optional arguments
A Float distance between the two vertices.
value
A Boolean specifying whether the created dimension enforces the above value or if it
simply measures the distance between the two vertices.
reference
Return value
A ConstrainedSketchDimension object (None if the dimension cannot be created).
Exceptions
None.
ObliqueDimension(...)
This method constructs a ConstrainedSketchDimension object between two vertices. An oblique dimension indicates
the distance between two vertices.
Path
mdb.models[name].sketches[name].ObliqueDimension
Required arguments
A ConstrainedSketchVertex object specifying the ﬁrst endpoint.
vertex1
A ConstrainedSketchVertex object specifying the second endpoint.
vertex2
A pair of Floats specifying the location of the dimension text.
textPoint
Optional arguments
A Float specifying the distance between the two ConstrainedSketchVertex objects.
value
A Boolean specifying whether the created dimension enforces the above value or if it simply
measures the distance between the two vertices.
reference
Return value
A ConstrainedSketchDimension object (None if the dimension cannot be created).
Abaqus Scripting Reference Guide
2310
ConstrainedSketchDimension object

Exceptions
None.
RadialDimension(...)
This method constructs a ConstrainedSketchDimension object on a circular or elliptical arc. A radial dimension indicates
the radius of an arc or circle or the major or minor radius of an ellipse.
Path
mdb.models[name].sketches[name].RadialDimension
Required arguments
A ConstrainedSketchGeometry object specifying the circular or elliptical arc.
curve
A pair of Floats specifying the location of the dimension text.
textPoint
Optional arguments
A Float specifying the radius of the arc, circle or ellipse.
value
A Boolean specifying whether the created dimension enforces the above value or if it
simply measures the angle between two lines.
reference
A Float specifying the major Radius if curve is an ellipse. This is mutually exclusive
with value and minorRadius.
majorRadius
A Float specifying the minor Radius if curve is an ellipse. This is mutually exclusive
with value and majorRadius.
minorRadius
Return value
A ConstrainedSketchDimension object (None if the dimension cannot be created).
Exceptions
None.
VerticalDimension(...)
This method constructs a ConstrainedSketchDimension between two vertices. A vertical dimension controls the vertical
distance along the Y-axis between two vertices.
Path
mdb.models[name].sketches[name].VerticalDimension
2311
Abaqus Scripting Reference Guide
ConstrainedSketchDimension object

Required arguments
A ConstrainedSketchVertex object specifying the ﬁrst endpoint.
vertex1
A ConstrainedSketchVertex object specifying the second endpoint.
vertex2
A pair of Floats specifying the location of the dimension text.
textPoint
Optional arguments
A Float specifying the angle between the two lines.
value
A Boolean specifying whether the created dimension enforces the above value or if it
simply measures the angle between two lines.
reference
Return value
A ConstrainedSketchDimension object (None if the dimension cannot be created).
Exceptions
None.
DistanceDimension(...)
This method constructs a ConstrainedSketchDimension object between two ConstrainedSketchGeometry, or
aConstrainedSketchVertex and ConstrainedSketchGeometry object. A distance dimension speciﬁes the shortest distance
between two entities.
Path
mdb.models[name].sketches[name].DistanceDimension
Required arguments
A ConstrainedSketchVertex object or ConstrainedSketchGeometry object.
entity1
A ConstrainedSketchVertex object or ConstrainedSketchGeometry object.
entity2
A pair of Floats specifying the location of the dimension text.
textPoint
Optional arguments
A Float specifying the angle between the two lines.
value
A Boolean specifying whether the created dimension enforces the above value or if it
simply measures the angle between two lines.
reference
Abaqus Scripting Reference Guide
2312
ConstrainedSketchDimension object

Return value
A ConstrainedSketchDimension object (None if the dimension cannot be created).
Exceptions
None.
Members
The ConstrainedSketchDimension object has no members.
2313
Abaqus Scripting Reference Guide
ConstrainedSketchDimension object

ConstrainedSketcherOptions object
The ConstrainedSketcherOptions object is used to store values and attributes which will be applied to all sketches used
in the current session. The ConstrainedSketcherOptions object has no constructor.
Access
import sketch
session.sketcherOptions
setValues(...)
This method modiﬁes the ConstrainedSketchOptions object.
Required arguments
None.
Optional arguments
A Boolean specifying whether construction geometry is shown. The default value
is ON.
constructionGeometry
A Boolean specifying whether the cursor snaps to the grid. The default value is
ON.
gridSnap
A Boolean specifying whether geometry will be preselected. The default value is
ON.
preselection
A Boolean specifying if implied constraints are added during sketching. The default
value is ON.
addImpliedConstraints
An Int specifying the maximum number of coplanar entities which should be
automatically projected from the background, when a sketch based feature is created
maxCoplanarEntities
or edited. When this value is exceeded no entities are automatically projected and
a warning issued. Possible values are maxCoplanarEntities
 0. The default value
is 300.
A Float specifying the angular tolerance in degrees which is used to determine
parallel and tangential conditions during the auto-constrain operation. For example
autoConstrainAngularTolerance
any two lines which have an angle smaller than the given
autoConstrainAngularTolerance will be assumed to be parallel, and a parallel
constrain may be added during the auto-constrain operation. The default value is
0.01.
A Float specifying the linear tolerance which is used to determine when two points
or geometries are coincident during the auto-constrain operation. The default value
is 10–6.
autoConstrainLinearTolerance
Abaqus Scripting Reference Guide
2314
ConstrainedSketcherOptions object

A sequence of SymbolicConstants specifying which type of constraints may be
added by the auto-constraint tool. Possible values are PARALLEL,
autoConstrainOptions
PERPENDICULAR, IDENTICAL, TANGENT, CONCENTRIC, and
EQUALRADIUS. The default value is (PARALLEL,, PERPENDICULAR,,
IDENTICAL,, TANGENT,, CONCENTRIC,, EQUALRADIUS).
A SymbolicConstant specifying the constraint solving mode used by the sketcher
during drag operation. Possible values are MINIMUM_MOVE, STANDARD,
WEIGHTED, and RELAXATION. The default value is MINIMUM_MOVE.
dragMethod
A SymbolicConstant specifying the constraint solving mode used by the sketcher
during regular sketch editing and adding new constraints and dimensions. Possible
editMethod
values are MINIMUM_MOVE, STANDARD, WEIGHTED, and RELAXATION.
The default value is STANDARD.
Return value
None.
Exceptions
RangeError.
Members
The ConstrainedSketcherOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
2315
Abaqus Scripting Reference Guide
ConstrainedSketcherOptions object

ConstrainedSketchGeometry object
The ConstrainedSketchGeometry object stores the geometry of a sketch, such as lines, circles, arcs, and construction
lines.
Access
import sketch
mdb.models[name].sketches[name].geometry[i]
mdb.models[name].sketches[name].geometry[i][i]
Arc3Points(...)
This method constructs an arc using a two endpoints and an intermediate third point on the arc.
Path
mdb.models[name].sketches[name].Arc3Points
Required arguments
A pair of Floats specifying the ﬁrst endpoint of the arc.
point1
A pair of Floats specifying the second endpoint of the arc.
point2
A pair of Floats specifying the third point on the arc.
point3
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the arc cannot be created).
Exceptions
None.
ArcByCenterEnds(...)
This method constructs an arc using a center point and two vertices. The Arc object is added to the geometry repository
of the ConstrainedSketch object. The arc is created in a clockwise fashion from point1 to point2.
Path
mdb.models[name].sketches[name].ArcByCenterEnds
Required arguments
A pair of Floats specifying the center point of the arc.
center
Abaqus Scripting Reference Guide
2316
ConstrainedSketchGeometry object

A pair of Floats specifying the ﬁrst endpoint of the arc.
point1
A pair of Floats specifying the second endpoint of the arc.
point2
A SymbolicConstant specifying the direction of the arc. Possible values are CLOCKWISE
and COUNTERCLOCKWISE.
direction
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the arc cannot be created).
Exceptions
If incompatible data are given, the second endpoint is ignored.
ArcByStartEndTangent(...)
This method constructs an arc using two vertices. The Arc object is added to the geometry repository of the
ConstrainedSketch object.
Path
mdb.models[name].sketches[name].ArcByStartEndTangent
Required arguments
A pair of Floats specifying the ﬁrst endpoint of the arc.
point1
A pair of Floats specifying the second endpoint of the arc.
point2
A sequence of two Floats specifying the start direction for constructing the arc.
vector
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the arc cannot be created).
Exceptions
None.
CircleByCenterPerimeter(...)
This method constructs a circle using a center point and a point on the perimeter. The circle is added to the geometry
repository of the ConstrainedSketch object.
2317
Abaqus Scripting Reference Guide
ConstrainedSketchGeometry object

Path
mdb.models[name].sketches[name].CircleByCenterPerimeter
Required arguments
A pair of Floats specifying the center point of the circle.
center
A pair of Floats specifying a point on the perimeter of the circle.
point1
Return value
A ConstrainedSketchGeometry object (None if the circle cannot be created).
Exceptions
None.
ConstructionCircleByCenterPerimeter(...)
This method constructs a construction circle using a center point and a point on the perimeter. The circle is added to
the geometry repository of the ConstrainedSketch object.
Path
mdb.models[name].sketches[name].ConstructionCircleByCenterPerimeter
Required arguments
A pair of Floats specifying the center point of the construction circle.
center
A pair of Floats specifying a point on the perimeter of the construction circle.
point1
Return value
A ConstrainedSketchGeometry object (None if the circle cannot be created).
Exceptions
None.
EllipseByCenterPerimeter(...)
This method constructs an ellipse using a center point, a major axis point, and a minor axis point. The ellipse is added
to the geometry repository of the ConstrainedSketch object.
Path
mdb.models[name].sketches[name].EllipseByCenterPerimeter
Required arguments
A pair of Floats specifying the center point of the ellipse.
center
Abaqus Scripting Reference Guide
2318
ConstrainedSketchGeometry object

A pair of Floats specifying the major or minor axis point of the ellipse.
axisPoint1
A pair of Floats specifying the minor or major axis point of the ellipse.
axisPoint2
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the ellipse cannot be created).
Exceptions
None.
FilletByRadius(...)
This method constructs a ﬁllet arc of a given radius between two curves. The ﬁllet is added to the geometry repository
of the ConstrainedSketch object.
Path
mdb.models[name].sketches[name].FilletByRadius
Required arguments
A Float specifying the radius of the ﬁllet arc. Possible values are Floats > 0.
radius
A ConstrainedSketchGeometry object specifying the ﬁrst curve.
curve1
A pair of Floats specifying a point on the sketch near where the user wishes the ﬁllet to
intersect with curve1. This point does not need to be oncurve1; it is used as a hint to draw
the ﬁllet.
nearPoint1
A ConstrainedSketchGeometry object specifying the second curve.
curve2
A pair of Floats specifying a point on the sketch near where the user wishes the ﬁllet to
intersect with curve2. This point does not need to be on curve2; it is used as a hint to draw
the ﬁllet.
nearPoint2
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the ﬁllet cannot be created).
2319
Abaqus Scripting Reference Guide
ConstrainedSketchGeometry object

Exceptions
Range Error: cannot construct the Fillet speciﬁed
If the radius given cannot be used to create a ﬁllet between the
two curves given:
Line(...)
This method creates a line between two given points.
Path
mdb.models[name].sketches[name].Line
Required arguments
A pair of Floats specifying the ﬁrst endpoint.
point1
A pair of Floats specifying the second endpoint.
point2
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the line cannot be created).
Exceptions
None.
ConstructionLine(...)
This method creates an oblique construction line that runs between two given points.
Path
mdb.models[name].sketches[name].ConstructionLine
Required arguments
A pair of Floats specifying the ﬁrst endpoint.
point1
A pair of Floats specifying the second endpoint.
point2
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the line cannot be created).
Abaqus Scripting Reference Guide
2320
ConstrainedSketchGeometry object

Exceptions
None.
Spline(...)
This method creates a spline curve running through a sequence of points.
Path
mdb.models[name].sketches[name].Spline
Required arguments
A sequence of pairs of Floats specifying the points through which the spline passes.
points
Optional arguments
A Boolean that determines whether the points given are to constrained to always remain on
the Spline. The default is True. For a large sequence of points, signiﬁcant performance gains
may be achieved by setting the value to False.
constrainPoints
Return value
A ConstrainedSketchGeometry object (None if the spline cannot be created).
Exceptions
None.
Spot(...)
This method creates a spot construction point located at the speciﬁed coordinates. The spot is added to the vertex
repository of the ConstrainedSketch object.
Path
mdb.models[name].sketches[name].Spot
Required arguments
A pair of Floats specifying the coordinates of the spot construction point.
point
Optional arguments
None.
Return value
A ConstrainedSketchGeometry object (None if the spot cannot be created).
2321
Abaqus Scripting Reference Guide
ConstrainedSketchGeometry object

Exceptions
None.
getVertices()
This method returns an list of ConstrainedSketchVertex objects which are a part of the given ConstrainedSketchGeometry
object.
Arguments
None.
Return value
A list of ConstrainedSketchVertex objects.
Exceptions
None.
getSize()
This method returns the length of the given ConstrainedSketchGeometry object.
Arguments
None.
Return value
The length of the given ConstrainedSketchGeometry.
Exceptions
None.
getPointAtDistance(...)
This method returns a point offset along the given ConstrainedSketchGeometry from the given end by a speciﬁed arc
length distance or a percentage of the total length of the ConstrainedSketchGeometry object.
Required arguments
A pair of Floats specifying the point from which the distance is to be measured.
point
A ﬂoat specifying the arc length distance along the ConstrainedSketchGeometry from the
point at which the required point is situated.
distance
Optional arguments
A Boolean that speciﬁes if the distance is an absolute distance or is a fraction relative to
the length of the ConstrainedSketchGeometry object.
percentage
Abaqus Scripting Reference Guide
2322
ConstrainedSketchGeometry object

Return value
A pair of ﬂoats representing the point along the edge.
Exceptions
None.
Members
The ConstrainedSketchGeometry object has the following members:
An Int specifying the index of the sketch entity in the ConstrainedSketchGeometryArray.
id
A SymbolicConstant specifying the geometry of the sketch entity. Possible values are ARC,
CIRCLE, ELLIPSE, LINE, and SPLINE.
curveType
A SymbolicConstant specifying the type of sketch entity. Possible values are REGULAR,
REFERENCE, and CONSTRUCTION.
type
A tuple of Floats specifying the X- andY-coordinates of a point located on the geometry.
pointOn
2323
Abaqus Scripting Reference Guide
ConstrainedSketchGeometry object

ConstrainedSketchGeometryArray object
The ConstrainedSketchGeometryArray is a sequence of ConstrainedSketchGeometry objects.
Access
import sketch
mdb.models[name].sketches[name].geometry[i]
findAt(...)
This method returns the ConstrainedSketchGeometry object located at the given coordinates.
Required arguments
A sequence of Floats specifying the X- and Y-coordinates of the object to ﬁnd.
coordinates
Optional arguments
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
A ConstrainedSketchGeometry object.
Exceptions
None.
Members
The ConstrainedSketchGeometryArray object has no members.
Abaqus Scripting Reference Guide
2324
ConstrainedSketchGeometryArray object

ConstrainedSketchImageOptions object
The ConstrainedSketchImageOptions object is used to store values and attributes associated with the background image
for a particular sketch. The ConstrainedSketchImageOptions object has no constructor.
Access
import sketch
mdb.models[name].sketches[name].imageOptions
setValues(...)
This method modiﬁes the ConstrainedSketchOptions object.
Required arguments
None.
Optional arguments
A String specifying the name of the image. A list of valid image names is in the images
repository in the session object.
imageName
A Boolean specifying whether an image should be displayed in the sketcher background. The
default value is OFF.
showImage
A pair of Floats specifying the X- and Y-offsets in millimeters from the lower-left corner of
the viewport. The default value is (0, 0).
origin
A Float specifying the scale applied to the image width. The default value is 1.0.
xScale
When xScale is negative, the image is mirrored about its y-axis but its position is not affected.
A Float specifying the scale applied to the image height. The default value is 1.0.
yScale
When yScale is negative, the image is mirrored about its x-axis but its position is not affected.
A Float specifying the translucency factor to use when displaying the image. Possible values
are 0.0 
translucency
 1.0 with 0.0 being invisible and 1.0 being opaque. The default
value is 1.0.
translucency
Return value
None.
Exceptions
RangeError.
2325
ConstrainedSketchImageOptions object

Members
The ConstrainedSketchImageOptions object has members with the same names and descriptions as the arguments to
the setValues  method.
Abaqus Scripting Reference Guide
2326
ConstrainedSketchImageOptions object

ConstrainedSketchOptions object
The ConstrainedSketchOptions object is used to store values and attributes associated with a particular sketch. The
ConstrainedSketchOptions object has no constructor.
Access
import sketch
mdb.models[name].sketches[name].sketchOptions
setValues(...)
This method modiﬁes the ConstrainedSketchOptions object.
Required arguments
None.
Optional arguments
A Float specifying the sheet size. Possible values are Floats  0. The default value
is the sheetSize speciﬁed with the Sketch method.
sheetSize
A Float specifying the spacing between gridlines. Possible values are Floats  0.
The default value is approximately 2.5% of sheetSize.
gridSpacing
A Boolean specifying whether the grid is shown. The default value is ON.
grid
An Int specifying how often gridlines are shown. Possible values are gridFrequency
 0. The default value is 1.
gridFrequency
A Float specifying the height of the dimension text in points. Possible values are
Floats  0. The default value is 12.0.
dimensionTextHeight
An Int specifying how many decimal places are shown in dimensions. Possible
values are 0 
decimalPlaces
 6. The initial value depends on the value of
sheetSize.
decimalPlaces
A Boolean specifying whether construction geometry is shown. The default value
is ON.
constructionGeometry
A Boolean specifying whether the cursor snaps to the grid. The default value is
ON.
gridSnap
A Boolean specifying whether geometry will be preselected. The default value is
ON.
preselection
A Boolean specifying if the sheet size and the grid spacing are automatically
computed. The default value is ON.
sheetAuto
2327
ConstrainedSketchOptions object

A sequence of Floats specifying the X–Y coordinates for the origin of the grid. The
default value is (0, 0).
gridOrigin
A Float specifying the angle of the grid relative to the computer screen. The default
value is 0.0.
gridAngle
A SymbolicConstant specifying the type of sketch displayed in the viewport.
Possible values are REGULAR and AXISYM. The default value is REGULAR.
viewStyle
A Boolean specifying if implied constraints are added during sketching. The default
value is ON.
addImpliedConstraints
An Int specifying the maximum number of coplanar entities which should be
automatically projected from the background, when a sketch based feature is created
maxCoplanarEntities
or edited. When this value is exceeded no entities are automatically projected and
a warning issued. Possible values are maxCoplanarEntities
 0. The default value
is 300.
A Float specifying the angular tolerance in degrees which is used to determine
parallel and tangential conditions during the auto-constrain operation. For example
autoConstrainAngularTolerance
any two lines which have an angle smaller than the given
autoConstrainAngularTolerance will be assumed to be parallel, and a parallel
constrain may be added during the auto-constrain operation. The default value is
0.01.
A Float specifying the linear tolerance which is used to determine when two points
or geometries are coincident during the auto-constrain operation. The default value
is 10–6.
autoConstrainLinearTolerance
A sequence of SymbolicConstants specifying which type of constraints may be
added by the auto-constraint tool. Possible values are PARALLEL,
autoConstrainOptions
PERPENDICULAR, IDENTICAL, TANGENT, CONCENTRIC, and
EQUALRADIUS. The default value is (PARALLEL,, PERPENDICULAR,,
IDENTICAL,, TANGENT,, CONCENTRIC,, EQUALRADIUS).
A SymbolicConstant specifying the constraint solving mode used by the sketcher
during drag operation. Possible values are MINIMUM_MOVE, STANDARD,
WEIGHTED, and RELAXATION. The default value is MINIMUM_MOVE.
dragMethod
A SymbolicConstant specifying the constraint solving mode used by the sketcher
during regular sketch editing and adding new constraints and dimensions. Possible
editMethod
values are MINIMUM_MOVE, STANDARD, WEIGHTED, and RELAXATION.
The default value is STANDARD.
Return value
None.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
2328
ConstrainedSketchOptions object

Members
The ConstrainedSketchOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
2329
Abaqus Scripting Reference Guide
ConstrainedSketchOptions object

ConstrainedSketchParameter object
The ConstrainedSketchParameter object stores the deﬁnition of a parameter in the sketch.
Access
import sketch
mdb.models[name].sketches[name].parameters[i]
Parameter(...)
This method creates a parameter and optionally associates a dimension with this parameter.
Path
mdb.models[name].sketches[name].Parameter
Required arguments
A String specifying the name of the ConstrainedSketchParameter object. No two parameters in
the same ConstrainedSketch can have the same name.
name
Optional arguments
A String specifying the ConstrainedSketchDimension object with which this parameter is
associated.
path
A String specifying the expression or value associated with the ConstrainedSketchParameter.
expression
A String specifying the name of the previous ConstrainedSketchParameter, if it exists. The
previousParameter argument implies an order among the parameters. No two parameters
can reference the same parameter as the previous parameter.
previousParameter
Return value
A ConstrainedSketchParameter object.
Exceptions
None.
Members
The ConstrainedSketchParameter object has the following members:
A String specifying the name of the ConstrainedSketchParameter object.
name
A String specifying the path to the ConstrainedSketchDimension that depends on this
ConstrainedSketchParameter.
path
Abaqus Scripting Reference Guide
2330
ConstrainedSketchParameter object

A String specifying an expression or value associated with this
ConstrainedSketchParameter.
expression
A String specifying the name of the ConstrainedSketchParameter that appears before
this one in the ordered list.
previousParameter
2331
Abaqus Scripting Reference Guide
ConstrainedSketchParameter object

ConstrainedSketchVertex object
The ConstrainedSketchVertex object stores the vertex position.
Access
import sketch
mdb.models[name].sketches[name].vertices[i]
mdb.models[name].sketches[name].vertices[i][i]
Spot(...)
This method creates a spot (construction point) located at the speciﬁed coordinates.
Path
mdb.models[name].sketches[name].Spot
Required arguments
A pair of Floats specifying the coordinates of the construction point.
point
Optional arguments
None.
Return value
A ConstrainedSketchVertex object (None if the spot cannot be created).
Exceptions
None.
Members
The ConstrainedSketchVertex object has the following member:
A tuple of Floats specifying theX-, Y-, and Z-coordinates of the sketch vertex.
coords
Abaqus Scripting Reference Guide
2332
ConstrainedSketchVertex object

ConstrainedSketchVertexArray object
The ConstrainedSketchVertexArray is a sequence of ConstrainedSketchVertex objects.
Access
import sketch
mdb.models[name].sketches[name].vertices[i]
findAt(...)
This method returns the ConstrainedSketchVertex located at the given coordinates.
Required arguments
A sequence of Floats specifying the X- and Y-coordinates of the object to ﬁnd.
coordinates
Optional arguments
A Boolean specifying whether a message is to be printed to the CLI if no entity is found
at the speciﬁed location. The default value is True.
printWarning
Return value
A ConstrainedSketchVertex object.
Exceptions
None.
Members
The ConstrainedSketchVertexArray object has no members.
2333
ConstrainedSketchVertexArray object

Step commands (step)
The Step commands described in this chapter are used to create and conﬁgure analysis steps.
Step commands (output) describes the commands used to create and conﬁgure output requests and integrated
output sections and the commands to conﬁgure diagnostic printing, monitoring, and restart. Step commands
(miscellaneous) describes the commands used to conﬁgure controls, damping, and frequency tables.
In this section:
•
Step object
•
AnalysisStep object
•
AnnealStep object
•
BuckleStep object
•
ComplexFrequencyStep object
•
CoupledTempDisplacementStep object
•
CoupledThermalElectricalStructuralStep object
•
CoupledThermalElectricStep object
•
DirectCyclicStep object
•
EmagTimeHarmonicStep object
•
ExplicitDynamicsStep object
•
FrequencyStep object
•
GeostaticStep object
•
HeatTransferStep object
•
ImplicitDynamicsStep object
•
InitialStep object
•
MassDiffusionStep object
•
ModalDynamicsStep object
•
RandomResponseStep object
•
ResponseSpectrumStep object
•
SoilsStep object
•
StaticLinearPerturbationStep object
•
StaticRiksStep object
•
StaticStep object
•
SteadyStateDirectStep object
•
SteadyStateModalStep object
•
SteadyStateSubspaceStep object
•
SubspaceDynamicsStep object
•
SubstructureGenerateStep object
•
TempDisplacementDynamicsStep object
•
ViscoStep object
Abaqus Scripting Reference Guide
2334

Step object
The Step object stores the parameters that determine the context of the step. The Step object is the abstract base type
for other Step objects. The Step object has no explicit constructor. The methods and members of the Step object are
common to all objects derived from the Step.
Access
import step
mdb.models[name].steps[name]
resume()
This method resumes the step that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
None.
suppress()
This method suppresses the step.
Arguments
None.
Return value
None.
Exceptions
None.
Members
The Step object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
2335
Step object

A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
Abaqus Scripting Reference Guide
2336
Step object

A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
A repository of ActivateElements objects.
activateElements
2337
Abaqus Scripting Reference Guide
Step object

AnalysisStep object
The AnalysisStep object is the abstract base type for other Step objects, except the InitialStep object. It has no explicit
constructor, no methods, and has only inherited members.
The AnalysisStep object is derived from the Step object.
Access
import step
mdb.models[name].steps[name]
Members
The AnalysisStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
Abaqus Scripting Reference Guide
2338
AnalysisStep object

•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
2339
Abaqus Scripting Reference Guide
AnalysisStep object

AnnealStep object
The AnnealStep object anneals a structure by setting the velocities and all appropriate state variables to zero.
The AnnealStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
AnnealStep(...)
This method creates an AnnealStep object.
Path
mdb.models[name].AnnealStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the post-anneal reference temperature. The default value is the current
temperature at all nodes in the model after the annealing has completed.
refTemp
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
Return value
An AnnealStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the AnnealStep object.
Required arguments
None.
Abaqus Scripting Reference Guide
2340
AnnealStep object

Optional arguments
The optional arguments to setValues are the same as the arguments to the AnnealStep  method, except for the
name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The AnnealStep object can have the following members:
A String specifying the repository key.
name
A Float specifying the post-anneal reference temperature. The default value is the
current temperature at all nodes in the model after the annealing has completed.
refTemp
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
2341
Abaqus Scripting Reference Guide
AnnealStep object

•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
Abaqus Scripting Reference Guide
2342
AnnealStep object

A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*ANNEAL
•
*STEP
2343
Abaqus Scripting Reference Guide
AnnealStep object

BuckleStep object
The BuckleStep object controls eigenvalue buckling estimation.
The BuckleStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
BuckleStep(...)
This method creates a BuckleStep object.
Path
mdb.models[name].BuckleStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step
in the list of analysis steps.
previous
An Int specifying the number of eigenvalues to be estimated.
numEigen
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the eigensolver. Possible values are SUBSPACE and
LANCZOS. The default value is SUBSPACE.
eigensolver
None or a Float specifying the minimum eigenvalue of interest. The default value is None.
minEigen
None or a Float specifying the maximum eigenvalue of interest. The default value is
None.
maxEigen
An Int specifying the number of vectors used in the iteration. The default value is the
minimum of (2n, n + 8), where n is the number of eigenvalues requested.
vectors
An Int specifying the maximum number of iterations. The default value is 30.
maxIterations
The SymbolicConstant DEFAULT or an Int specifying the size of the Lanczos block steps.
The default value is DEFAULT.
blockSize
The SymbolicConstant DEFAULT or an Int specifying the maximum number of Lanczos
block steps within each Lanczos run. The default value is DEFAULT.
maxBlocks
Abaqus Scripting Reference Guide
2344
BuckleStep object

Note:
minEigen, blockSize, and maxBlocks are ignored unless eigensolver=LANCZOS.
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
Return value
A BuckleStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the BuckleStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BuckleStep  method, except for the name,
previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The BuckleStep object can have the following members:
A String specifying the repository key.
name
An Int specifying the number of eigenvalues to be estimated.
numEigen
A SymbolicConstant specifying the eigensolver. Possible values are SUBSPACE
and LANCZOS. The default value is SUBSPACE.
eigensolver
2345
Abaqus Scripting Reference Guide
BuckleStep object

None or a Float specifying the minimum eigenvalue of interest. The default value is
None.
minEigen
None or a Float specifying the maximum eigenvalue of interest. The default value
is None.
maxEigen
An Int specifying the number of vectors used in the iteration. The default value is the
minimum of (2n, n + 8), where n is the number of eigenvalues requested.
vectors
An Int specifying the maximum number of iterations. The default value is 30.
maxIterations
The SymbolicConstant DEFAULT or an Int specifying the size of the Lanczos block
steps. The default value is DEFAULT.
blockSize
The SymbolicConstant DEFAULT or an Int specifying the maximum number of
Lanczos block steps within each Lanczos run. The default value is DEFAULT.
maxBlocks
Note:
minEigen, blockSize, and maxBlocks are ignored unless
eigensolver=LANCZOS.
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
Abaqus Scripting Reference Guide
2346
BuckleStep object

•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
2347
Abaqus Scripting Reference Guide
BuckleStep object

A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*BUCKLE
•
*STEP
Abaqus Scripting Reference Guide
2348
BuckleStep object

ComplexFrequencyStep object
The ComplexFrequencyStep object is used to perform eigenvalue extraction to calculate the complex eigenvalues and
corresponding complex mode shapes of a system.
The ComplexFrequencyStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
ComplexFrequencyStep(...)
This method creates a ComplexFrequencyStep object.
Path
mdb.models[name].ComplexFrequencyStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
The SymbolicConstant ALL or an Int specifying the number of complex eigenmodes
to be calculated or a SymbolicConstant ALL. The default value is ALL.
numEigen
A String specifying a description of the new step. The default value is an empty string.
description
None or a Float specifying the shift point in cycles per time. The default value is
None.
shift
A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
None or a Float specifying the minimum frequency of interest in cycles per time. The
default value is None.
minEigen
2349
ComplexFrequencyStep object

None or a Float specifying the maximum frequency of interest in cycles per time.
The default value is None.
maxEigen
None or a Float specifying the frequency at which to evaluate frequency-dependent
properties for viscoelasticity, springs, and dashpots during the eigenvalue extraction.
propertyEvaluationFrequency
If the value is None, the analysis product will evaluate the stiffness associated with
frequency-dependent springs and dashpots at zero frequency and will not consider the
stiffness contributions from frequency-domain viscoelasticity in the step. The default
value is None.
Return value
A ComplexFrequencyStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ComplexFrequencyStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ComplexFrequencyStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The ComplexFrequencyStep object can have the following members:
A String specifying the repository key.
name
The SymbolicConstant ALL or an Int specifying the number of complex eigenmodes
to be calculated or a SymbolicConstant ALL. The default value is ALL.
numEigen
None or a Float specifying the shift point in cycles per time. The default value is
None.
shift
Abaqus Scripting Reference Guide
2350
ComplexFrequencyStep object

A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
None or a Float specifying the minimum frequency of interest in cycles per time.
The default value is None.
minEigen
None or a Float specifying the maximum frequency of interest in cycles per time.
The default value is None.
maxEigen
None or a Float specifying the frequency at which to evaluate frequency-dependent
properties for viscoelasticity, springs, and dashpots during the eigenvalue extraction.
propertyEvaluationFrequency
If the value is None, the analysis product will evaluate the stiffness associated with
frequency-dependent springs and dashpots at zero frequency and will not consider
the stiffness contributions from frequency-domain viscoelasticity in the step. The
default value is None.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
2351
Abaqus Scripting Reference Guide
ComplexFrequencyStep object

•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
Abaqus Scripting Reference Guide
2352
ComplexFrequencyStep object

A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*COMPLEX FREQUENCY
•
*STEP
2353
Abaqus Scripting Reference Guide
ComplexFrequencyStep object

CoupledTempDisplacementStep object
The CoupledTempDisplacementStep object is used to analyze problems where the simultaneous solution of the
temperature and stress/displacement ﬁelds is necessary.
The CoupledTempDisplacementStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
CoupledTempDisplacementStep(...)
This method creates a CoupledTempDisplacementStep object.
Path
mdb.models[name].CoupledTempDisplacementStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the analysis type. Possible values are STEADY_STATE
and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable and stabilizationMethod NONE. The default value
is 2×10–4.
stabilizationMagnitude
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
Abaqus Scripting Reference Guide
2354
CoupledTempDisplacementStep object

An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
A Float specifying the maximum temperature change to be allowed in an increment in
a transient analysis. The default value is 0.0.
deltmx
A Float specifying the maximum difference in the creep strain increment calculated from
the creep strain rates at the beginning and end of the increment. The default value is 0.0.
cetol
A SymbolicConstant specifying the type of integration to be used for creep and swelling
effects throughout the step. Possible values are IMPLICIT, EXPLICIT, and NONE. The
default value is IMPLICIT.
creepIntegration
A SymbolicConstant specifying the type of solution technique. Possible values are
FULL_NEWTON and SEPARATED. The default value is FULL_NEWTON.
solutionTechnique
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
A Float specifying the maximum allowable ratio of the stabilization energy to the total
strain energy and can be used only if stabilizationMethod is not NONE. The default value
is 0.05.
adaptiveDampingRatio
2355
Abaqus Scripting Reference Guide
CoupledTempDisplacementStep object

A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
Return value
A CoupledTempDisplacementStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the CoupledTempDisplacementStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CoupledTempDisplacementStep  method,
except for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The CoupledTempDisplacementStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the analysis type. Possible values are
STEADY_STATE and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
Abaqus Scripting Reference Guide
2356
CoupledTempDisplacementStep object

A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable and stabilizationMethod NONE. The default value
is 2×10–4.
stabilizationMagnitude
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
A Float specifying the maximum temperature change to be allowed in an increment
in a transient analysis. The default value is 0.0.
deltmx
A Float specifying the maximum difference in the creep strain increment calculated
from the creep strain rates at the beginning and end of the increment. The default
value is 0.0.
cetol
A SymbolicConstant specifying the type of integration to be used for creep and
swelling effects throughout the step. Possible values are IMPLICIT, EXPLICIT, and
NONE. The default value is IMPLICIT.
creepIntegration
A SymbolicConstant specifying the type of solution technique. Possible values are
FULL_NEWTON and SEPARATED. The default value is FULL_NEWTON.
solutionTechnique
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
2357
Abaqus Scripting Reference Guide
CoupledTempDisplacementStep object

A Float specifying the maximum allowable ratio of the stabilization energy to the
total strain energy and can be used only if stabilizationMethod is not NONE. The
default value is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
Abaqus Scripting Reference Guide
2358
CoupledTempDisplacementStep object

•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*COUPLED TEMPERATURE-DISPLACEMENT
•
*SOLUTION TECHNIQUE
•
*STEP
2359
Abaqus Scripting Reference Guide
CoupledTempDisplacementStep object

CoupledThermalElectricalStructuralStep object
The CoupledThermalElectricalStructuralStep object is used to analyze problems where the simultaneous solution of
the temperature, stress/displacement and electrical ﬁelds is necessary.
The CoupledThermalElectricalStructuralStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
CoupledThermalElectricalStructuralStep(...)
This method creates a CoupledThermalElectricalStructuralStep object.
Path
mdb.models[name].CoupledThermalElectricalStructuralStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the analysis type. Possible values are STEADY_STATE
and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable and stabilizationMethod NONE. The default value
is 2×10–4.
stabilizationMagnitude
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
Abaqus Scripting Reference Guide
2360
CoupledThermalElectricalStructuralStep object

An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
A Float specifying the maximum temperature change to be allowed in an increment in
a transient analysis. The default value is 0.0.
deltmx
A Float specifying the maximum difference in the creep strain increment calculated from
the creep strain rates at the beginning and end of the increment. The default value is 0.0.
cetol
A SymbolicConstant specifying the type of integration to be used for creep and swelling
effects throughout the step. Possible values are IMPLICIT, EXPLICIT, and NONE. The
default value is IMPLICIT.
creepIntegration
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
A Float specifying the maximum allowable ratio of the stabilization energy to the total
strain energy and can be used only if stabilizationMethod is not NONE. The default value
is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
2361
Abaqus Scripting Reference Guide
CoupledThermalElectricalStructuralStep object

Return value
A CoupledThermalElectricalStructuralStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the CoupledThermalElectricalStructuralStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CoupledThermalElectricalStructuralStep
method, except for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The CoupledThermalElectricalStructuralStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the analysis type. Possible values are
STEADY_STATE and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable and stabilizationMethod NONE. The default value
is 2×10–4.
stabilizationMagnitude
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
Abaqus Scripting Reference Guide
2362
CoupledThermalElectricalStructuralStep object

An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
A Float specifying the maximum temperature change to be allowed in an increment
in a transient analysis. The default value is 0.0.
deltmx
A Float specifying the maximum difference in the creep strain increment calculated
from the creep strain rates at the beginning and end of the increment. The default
value is 0.0.
cetol
A SymbolicConstant specifying the type of integration to be used for creep and
swelling effects throughout the step. Possible values are IMPLICIT, EXPLICIT, and
NONE. The default value is IMPLICIT.
creepIntegration
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A Float specifying the maximum allowable ratio of the stabilization energy to the
total strain energy and can be used only if stabilizationMethod is not NONE. The
default value is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
2363
Abaqus Scripting Reference Guide
CoupledThermalElectricalStructuralStep object

A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
Abaqus Scripting Reference Guide
2364
CoupledThermalElectricalStructuralStep object

A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*COUPLED TEMPERATURE-DISPLACEMENT
•
*SOLUTION TECHNIQUE
•
*STEP
2365
Abaqus Scripting Reference Guide
CoupledThermalElectricalStructuralStep object

CoupledThermalElectricStep object
The CoupledThermalElectricStep object is used to analyze problems where the electrical potential and temperature
ﬁelds must be solved simultaneously.
The CoupledThermalElectricStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
CoupledThermalElectricStep(...)
This method creates a CoupledThermalElectricStep object.
Path
mdb.models[name].CoupledThermalElectricStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the analysis type. Possible values are STEADY_STATE
and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
Abaqus Scripting Reference Guide
2366
CoupledThermalElectricStep object

A SymbolicConstant specifying the time period to be analyzed in a transient analysis.
Possible values are PERIOD and SS. The default value is PERIOD.
end
A Float specifying the maximum temperature change to be allowed in an increment in
a transient analysis. The default value is 0.0.
deltmx
A Float specifying the maximum allowable emissivity change with temperature and ﬁeld
variables during an increment. The default value is 0.1.
mxdem
A SymbolicConstant specifying the type of solution technique. Possible values are
FULL_NEWTON and SEPARATED. The default value is FULL_NEWTON.
solutionTechnique
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
Return value
A CoupledThermalElectricStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the CoupledThermalElectricStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CoupledThermalElectricStep  method,
except for the name, previous, and maintainAttributes arguments.
2367
Abaqus Scripting Reference Guide
CoupledThermalElectricStep object

Return value
None.
Exceptions
RangeError.
Members
The CoupledThermalElectricStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the analysis type. Possible values are
STEADY_STATE and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
A SymbolicConstant specifying the time period to be analyzed in a transient analysis.
Possible values are PERIOD and SS. The default value is PERIOD.
end
A Float specifying the maximum temperature change to be allowed in an increment
in a transient analysis. The default value is 0.0.
deltmx
A Float specifying the maximum allowable emissivity change with temperature and
ﬁeld variables during an increment. The default value is 0.1.
mxdem
A SymbolicConstant specifying the type of solution technique. Possible values are
FULL_NEWTON and SEPARATED. The default value is FULL_NEWTON.
solutionTechnique
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
Abaqus Scripting Reference Guide
2368
CoupledThermalElectricStep object

A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
2369
Abaqus Scripting Reference Guide
CoupledThermalElectricStep object

•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*COUPLED THERMAL-ELECTRICAL
•
*SOLUTION TECHNIQUE
•
*STEP
Abaqus Scripting Reference Guide
2370
CoupledThermalElectricStep object

DirectCyclicStep object
The DirectCyclicStep object is used to provide a direct cyclic procedure for nonlinear, non-isothermal quasi-static
analysis. It can also be used to predict progressive damage and failure for ductile bulk materials and/or to predict
delamination/debonding growth at the interfaces in laminated composites in a low-cycle fatigue analysis.
The DirectCyclicStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
DirectCyclicStep(...)
This method creates a DirectCyclicStep object.
Path
mdb.models[name].DirectCyclicStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty
string.
description
A Float specifying the time of single loading cycle. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value
is 100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time
period for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
2371
DirectCyclicStep object

An Int specifying the maximum number of iterations in a step. The default value is
200.
maxNumIterations
An Int specifying the initial number of terms in the Fourier series. The default value
is 11.
initialTerms
An Int specifying the maximum number of terms in the Fourier series. The default
value is 25.
maxTerms
An Int specifying the increment in number of terms in the Fourier series. The default
value is 5.
termsIncrement
A Float specifying the maximum temperature change to be allowed in an increment.
The default value is 0.0.
deltmx
A Float specifying the maximum difference in the creep strain increment calculated
from the creep strain rates at the beginning and end of the increment. The default
value is 0.0.
cetol
None or a String specifying a String specifying the name of a time point object used
to determine at which times the response of the structure will be evaluated. The
default value is NONE.
timePoints
A Boolean specifying whether to include low-cycle fatigue analysis. The default
value is OFF.
fatigue
A Boolean specifying whether the displacement solution in the Fourier series obtained
in the previous direct cyclic step is used as the starting values for the current step.
The default value is OFF.
continueAnalysis
An Int specifying the minimum number of cycles over which the damage is
extrapolated forward. The default value is 100.
minCycleInc
An Int specifying the maximum number of cycles over which the damage is
extrapolated forward. The default value is 1000.
maxCycleInc
The SymbolicConstant DEFAULT or an Int specifying the maximum number of
cycles allowed in a step or DEFAULT. A value of 1 plus half of the maximum
maxNumCycles
number of cycles will be used if DEFAULT is speciﬁed. The default value is
DEFAULT.
A Float specifying the maximum extrapolated damage increment. The default value
is 1.0.
damageExtrapolationTolerance
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
Abaqus Scripting Reference Guide
2372
DirectCyclicStep object

A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to retain attributes from an existing step with the
same name. The default value is False.
maintainAttributes
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
Return value
A DirectCyclicStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the DirectCyclicStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DirectCyclicStep  method, except for
the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The DirectCyclicStep object can have the following members:
A String specifying the repository key.
name
A Float specifying the time of single loading cycle. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
2373
Abaqus Scripting Reference Guide
DirectCyclicStep object

An Int specifying the maximum number of increments in a step. The default value
is 100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time
period for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
An Int specifying the maximum number of iterations in a step. The default value is
200.
maxNumIterations
An Int specifying the initial number of terms in the Fourier series. The default value
is 11.
initialTerms
An Int specifying the maximum number of terms in the Fourier series. The default
value is 25.
maxTerms
An Int specifying the increment in number of terms in the Fourier series. The default
value is 5.
termsIncrement
A Float specifying the maximum temperature change to be allowed in an increment.
The default value is 0.0.
deltmx
A Float specifying the maximum difference in the creep strain increment calculated
from the creep strain rates at the beginning and end of the increment. The default
value is 0.0.
cetol
A Boolean specifying whether to include low-cycle fatigue analysis. The default
value is OFF.
fatigue
A Boolean specifying whether the displacement solution in the Fourier series obtained
in the previous direct cyclic step is used as the starting values for the current step.
The default value is OFF.
continueAnalysis
An Int specifying the minimum number of cycles over which the damage is
extrapolated forward. The default value is 100.
minCycleInc
An Int specifying the maximum number of cycles over which the damage is
extrapolated forward. The default value is 1000.
maxCycleInc
The SymbolicConstant DEFAULT or an Int specifying the maximum number of
cycles allowed in a step or DEFAULT. A value of 1 plus half of the maximum
maxNumCycles
number of cycles will be used if DEFAULT is speciﬁed. The default value is
DEFAULT.
Abaqus Scripting Reference Guide
2374
DirectCyclicStep object

A Float specifying the maximum extrapolated damage increment. The default value
is 1.0.
damageExtrapolationTolerance
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
None or a String specifying a String specifying the name of a time point object used
to determine at which times the response of the structure will be evaluated. The
default value is NONE.
timePoints
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
2375
Abaqus Scripting Reference Guide
DirectCyclicStep object

•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
Abaqus Scripting Reference Guide
2376
DirectCyclicStep object

A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*DIRECT CYCLIC
•
*STEP
2377
Abaqus Scripting Reference Guide
DirectCyclicStep object

EmagTimeHarmonicStep object
The EmagTimeHarmonicStep object is used to calculate the electromagnetic response of the system to harmonic
excitation of the model.
The EmagTimeHarmonicStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
EmagTimeHarmonicStep(...)
This method creates a EmagTimeHarmonicStep object.
Path
mdb.models[name].EmagTimeHarmonicStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
An EmagTimeHarmonicFrequencyArray object.
frequencyRange
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether damping terms are to be ignored so that a real,
rather than a complex, system matrix is factored. Possible values are REAL_ONLY and
COMPLEX. The default value is COMPLEX.
factorization
Return value
An EmagTimeHarmonicStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the EmagTimeHarmonicStep object.
Abaqus Scripting Reference Guide
2378
EmagTimeHarmonicStep object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the EmagTimeHarmonicStep  method,
except for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The EmagTimeHarmonicStep object has members with the same names and descriptions as the arguments to the
EmagTimeHarmonicStep  method.
In addition, the EmagTimeHarmonicStep object can have the following members:
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value
is SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to subdivide each frequency range using the
eigenfrequencies of the system. The default value is OFF.
subdivideUsingEigenfrequencies
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
2379
Abaqus Scripting Reference Guide
EmagTimeHarmonicStep object

•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
Abaqus Scripting Reference Guide
2380
EmagTimeHarmonicStep object

A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*ELECTROMAGNETIC TIME HARMONIC
•
*STEP
2381
Abaqus Scripting Reference Guide
EmagTimeHarmonicStep object

ExplicitDynamicsStep object
The ExplicitDynamicsStep object is used to perform a dynamic stress/displacement analysis using explicit integration
in Abaqus/Explicit.
The ExplicitDynamicsStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
ExplicitDynamicsStep(...)
This method creates an ExplicitDynamicsStep object.
Path
mdb.models[name].ExplicitDynamicsStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is ON.
nlgeom
A Boolean specifying that an adiabatic stress analysis is to be performed. The default
value is OFF.
adiabatic
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are AUTOMATIC_GLOBAL, AUTOMATIC_EBE,
timeIncrementationMethod
FIXED_USER_DEFINED_INC, and FIXED_EBE. The default value is
AUTOMATIC_GLOBAL.
None or a Float specifying the maximum time increment. If there is no upper limit,
maxIncrement=None. This argument is required only when
maxIncrement
timeIncrementationMethod=AUTOMATIC_GLOBAL or AUTOMATIC_EBE. The
default value is None.
Abaqus Scripting Reference Guide
2382
ExplicitDynamicsStep object

A Float specifying the factor that is used to scale the time increment. This argument is
required only when timeIncrementationMethod=AUTOMATIC_GLOBAL,
AUTOMATIC_EBE, or FIXED_EBE. The default value is 1.0.
scaleFactor
A tuple of tuples, where each tuple speciﬁes the MassScaling Object controls. The default
value is PREVIOUS_STEP.
massScaling
A Float specifying the linear bulk viscosity parameter, 
. The default value is 0.06.
linearBulkViscosity
A Float specifying the quadratic bulk viscosity parameter, 
. The default value is 1.2.
quadBulkViscosity
None or a Float specifying the user-deﬁned time increment. This argument is required
only when timeIncrementationMethod=FIXED_USER_DEFINED_INC. The default
value is None.
userDeﬁnedInc
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A Boolean specifying whether to use the "improved" (improvedDtMethod=ON) or
"conservative" (improvedDtMethod=OFF) method to estimate the element stable time
improvedDtMethod
increment for three-dimensional continuum elements and elements with plane stress
formulations (shell, membrane, and two-dimensional plane stress elements). The default
value is ON.
Return value
An ExplicitDynamicsStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ExplicitDynamicsStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ExplicitDynamicsStep method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
2383
Abaqus Scripting Reference Guide
ExplicitDynamicsStep object

Members
The ExplicitDynamicsStep object can have the following members:
A String specifying the repository key.
name
A Float specifying the total time period for the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is ON.
nlgeom
A Boolean specifying that an adiabatic stress analysis is to be performed. The default
value is OFF.
adiabatic
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are AUTOMATIC_GLOBAL, AUTOMATIC_EBE,
timeIncrementationMethod
FIXED_USER_DEFINED_INC, and FIXED_EBE. The default value is
AUTOMATIC_GLOBAL.
None or a Float specifying the maximum time increment. If there is no upper limit,
maxIncrement=None. This argument is required only when
maxIncrement
timeIncrementationMethod=AUTOMATIC_GLOBAL or AUTOMATIC_EBE. The
default value is None.
A Float specifying the factor that is used to scale the time increment. This argument
is required only when timeIncrementationMethod=AUTOMATIC_GLOBAL,
AUTOMATIC_EBE, or FIXED_EBE. The default value is 1.0.
scaleFactor
A Float specifying the linear bulk viscosity parameter, 
. The default value is 0.06.
linearBulkViscosity
A Float specifying the quadratic bulk viscosity parameter, 
. The default value is
1.2.
quadBulkViscosity
None or a Float specifying the user-deﬁned time increment. This argument is required
only when timeIncrementationMethod=FIXED_USER_DEFINED_INC. The default
value is None.
userDeﬁnedInc
A Boolean specifying whether to use the "improved" (improvedDtMethod=ON) or
"conservative" (improvedDtMethod=OFF) method to estimate the element stable time
improvedDtMethod
increment for three-dimensional continuum elements and elements with plane stress
formulations (shell, membrane, and two-dimensional plane stress elements). The
default value is ON.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
Abaqus Scripting Reference Guide
2384
ExplicitDynamicsStep object

A MassScalingArray object specifying mass scaling controls. The default value is
PREVIOUS_STEP.
massScaling
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
2385
Abaqus Scripting Reference Guide
ExplicitDynamicsStep object

A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*BULK VISCOSITY
•
*DYNAMIC
•
*FIXED MASS SCALING
•
*STEP
•
*VARIABLE MASS SCALING
Abaqus Scripting Reference Guide
2386
ExplicitDynamicsStep object

FrequencyStep object
The FrequencyStep object is used to perform eigenvalue extraction to calculate the natural frequencies and corresponding
mode shapes of a system.
The FrequencyStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
FrequencyStep(...)
This method creates a FrequencyStep object.
Path
mdb.models[name].FrequencyStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in the list
of analysis steps.
previous
A SymbolicConstant specifying the eigensolver. Possible values are LANCZOS, SUBSPACE, and
AMS.
eigensolver
The following optional arguments are ignored unless eigensolver=LANCZOS: blockSize, maxBlocks,
normalization, propertyEvaluationFrequency.
The following optional arguments are ignored unless eigensolver=LANCZOS or AMS: minEigen,
maxEigen, and acousticCoupling.
The following optional arguments are ignored unless eigensolver=AMS: projectDamping,
acousticRangeFactor, substructureCutoffMultiplier, ﬁrstCutoffMultiplier, secondCutoffMultiplier,
residualModeRegion, regionalModeDof, and limitSavedEigenvectorRegion.
Optional arguments
The SymbolicConstant ALL or an Int specifying the number of eigenvalues to be
calculated or ALL. The default value is ALL.
numEigen
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the shift point in cycles per time. The default value is 0.0.
shift
None or a Float specifying the minimum frequency of interest in cycles per time. The
default value is None.
minEigen
2387
FrequencyStep object

None or a Float specifying the maximum frequency of interest in cycles per time.
The default value is None.
maxEigen
None or an Int specifying the number of vectors used in the iteration. The default is
the minimum of (2n, n + 8), where n is the number of eigenvalues requested. The
default value is None.
vectors
An Int specifying the maximum number of iterations. The default value is 30.
maxIterations
A SymbolicConstant specifying the size of the Lanczos block steps. The default value
is DEFAULT.
blockSize
A SymbolicConstant specifying the maximum number of Lanczos block steps within
each Lanczos run. The default value is DEFAULT.
maxBlocks
A SymbolicConstant specifying the method for normalizing eigenvectors. Possible
values are DISPLACEMENT and MASS. The default value is DISPLACEMENT.
normalization
A value of DISPLACEMENT indicates normalizing the eigenvectors so that the largest
displacement entry in each vector is unity. A value of MASS indicates normalizing
the eigenvectors with respect to the structure's mass matrix, which results in scaling
the eigenvectors so that the generalized mass for each vector is unity.
None or a Float specifying the frequency at which to evaluate frequency-dependent
properties for viscoelasticity, springs, and dashpots during the eigenvalue extraction.
propertyEvaluationFrequency
If the value is None, the analysis product will evaluate the stiffness associated with
frequency-dependent springs and dashpots at zero frequency and will not consider the
stiffness contributions from frequency-domain viscoelasticity in the step. The default
value is None.
A Boolean specifying whether to include projection of viscous and structural damping
operators during AMS eigenvalue extraction. Valid only when eigenSolver=AMS. The
default value is ON.
projectDamping
A SymbolicConstant specifying the type of acoustic-structural coupling in models
with acoustic and structural elements coupled using the *TIE option or in models with
acousticCoupling
ASI-type elements. Possible values are AC_ON, AC_OFF, and AC_PROJECTION.
The default value is AC_ON.
A Float specifying the ratio of the maximum acoustic frequency to the maximum
structural frequency. The default value is 1.0.
acousticRangeFactor
A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
Abaqus Scripting Reference Guide
2388
FrequencyStep object

A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A Boolean specifying whether to activate the SIM-based linear dynamics procedures.
The default value is OFF.
simLinearDynamics
A Boolean specifying whether to include residual modes from an immediately
preceding Static, Linear Perturbation step. The default value is OFF.
residualModes
A Float specifying the cutoff frequency for substructure eigenproblems, deﬁned as a
multiplier of the maximum frequency of interest. The default value is 5.0.
substructureCutoffMultiplier
A Float specifying the ﬁrst cutoff frequency for a reduced eigenproblem, deﬁned as
a multiplier of the maximum frequency of interest. The default value is 1.7.
ﬁrstCutoffMultiplier
A Float specifying the second cutoff frequency for a reduced eigenproblem deﬁned
as a multiplier of the maximum frequency of interest. The default value is 1.1.
secondCutoffMultiplier
None or a sequence of Strings specifying the name of a region for which residual
modes are requested. The default value is None.
residualModeRegion
None or a sequence of Ints specifying the degree of freedom for which residual modes
are requested. The default value is None.
residualModeDof
None or a Region object specifying a region for which eigenvectors should be saved
or the SymbolicConstant None representing the whole model. The default value is
None.
limitSavedEigenvectorRegion
Return value
A FrequencyStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the FrequencyStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FrequencyStep  method, except for the
name, previous, and maintainAttributes arguments.
Return value
None.
2389
Abaqus Scripting Reference Guide
FrequencyStep object

Exceptions
RangeError.
Members
The FrequencyStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the eigensolver. Possible values are LANCZOS,
SUBSPACE, and AMS.
eigensolver
The following optional arguments are ignored unless eigensolver=LANCZOS:
blockSize, maxBlocks, normalization, propertyEvaluationFrequency.
The following optional arguments are ignored unless eigensolver=LANCZOS or
AMS: minEigen, maxEigen, and acousticCoupling.
The following optional arguments are ignored unless eigensolver=AMS:
projectDamping, acousticRangeFactor, substructureCutoffMultiplier,
ﬁrstCutoffMultiplier, secondCutoffMultiplier, residualModeRegion, regionalModeDof,
and limitSavedEigenvectorRegion.
The SymbolicConstant ALL or an Int specifying the number of eigenvalues to be
calculated or ALL. The default value is ALL.
numEigen
A Float specifying the shift point in cycles per time. The default value is 0.0.
shift
None or a Float specifying the minimum frequency of interest in cycles per time.
The default value is None.
minEigen
None or a Float specifying the maximum frequency of interest in cycles per time.
The default value is None.
maxEigen
None or an Int specifying the number of vectors used in the iteration. The default is
the minimum of (2n, n + 8), where n is the number of eigenvalues requested. The
default value is None.
vectors
An Int specifying the maximum number of iterations. The default value is 30.
maxIterations
A SymbolicConstant specifying the size of the Lanczos block steps. The default value
is DEFAULT.
blockSize
A SymbolicConstant specifying the maximum number of Lanczos block steps within
each Lanczos run. The default value is DEFAULT.
maxBlocks
A SymbolicConstant specifying the method for normalizing eigenvectors. Possible
values are DISPLACEMENT and MASS. The default value is DISPLACEMENT.
normalization
A value of DISPLACEMENT indicates normalizing the eigenvectors so that the
largest displacement entry in each vector is unity. A value of MASS indicates
Abaqus Scripting Reference Guide
2390
FrequencyStep object

normalizing the eigenvectors with respect to the structure's mass matrix, which results
in scaling the eigenvectors so that the generalized mass for each vector is unity.
None or a Float specifying the frequency at which to evaluate frequency-dependent
properties for viscoelasticity, springs, and dashpots during the eigenvalue extraction.
propertyEvaluationFrequency
If the value is None, the analysis product will evaluate the stiffness associated with
frequency-dependent springs and dashpots at zero frequency and will not consider
the stiffness contributions from frequency-domain viscoelasticity in the step. The
default value is None.
A Boolean specifying whether to include projection of viscous and structural damping
operators during AMS eigenvalue extraction. Valid only when eigenSolver=AMS.
The default value is ON.
projectDamping
A SymbolicConstant specifying the type of acoustic-structural coupling in models
with acoustic and structural elements coupled using the *TIE option or in models with
acousticCoupling
ASI-type elements. Possible values are AC_ON, AC_OFF, and AC_PROJECTION.
The default value is AC_ON.
A Float specifying the ratio of the maximum acoustic frequency to the maximum
structural frequency. The default value is 1.0.
acousticRangeFactor
A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to activate the SIM-based linear dynamics procedures.
The default value is OFF.
simLinearDynamics
A Boolean specifying whether to include residual modes from an immediately
preceding Static, Linear Perturbation step. The default value is OFF.
residualModes
A Float specifying the cutoff frequency for substructure eigenproblems, deﬁned as a
multiplier of the maximum frequency of interest. The default value is 5.0.
substructureCutoffMultiplier
A Float specifying the ﬁrst cutoff frequency for a reduced eigenproblem, deﬁned as
a multiplier of the maximum frequency of interest. The default value is 1.7.
ﬁrstCutoffMultiplier
A Float specifying the second cutoff frequency for a reduced eigenproblem deﬁned
as a multiplier of the maximum frequency of interest. The default value is 1.1.
secondCutoffMultiplier
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
2391
Abaqus Scripting Reference Guide
FrequencyStep object

None or a tuple of Strings specifying the name of a region for which residual modes
are requested. The default value is None.
residualModeRegion
None or a tuple of Ints specifying the degree of freedom for which residual modes
are requested. The default value is None.
residualModeDof
None or a Region object specifying a region for which eigenvectors should be saved
or the SymbolicConstant None representing the whole model. The default value is
None.
limitSavedEigenvectorRegion
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
Abaqus Scripting Reference Guide
2392
FrequencyStep object

•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*FREQUENCY
•
*STEP
2393
Abaqus Scripting Reference Guide
FrequencyStep object

GeostaticStep object
The GeostaticStep object is used to verify that the geostatic stress ﬁeld is in equilibrium with the applied loads and
boundary conditions on the model and to iterate, if needed, to obtain equilibrium.
The GeostaticStep object is derived from the AnalysisStep object.
Access
import
step mdb.models[name].steps[name]
GeostaticStep(...)
This method creates a GeostaticStep object.
Path
mdb.models[name].GeostaticStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel matrix
is reformed.. The default value is 8.
reformKernel
Abaqus Scripting Reference Guide
2394
GeostaticStep object

A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
None or a Float specifying the tolerance for maximum change of displacements. The
default value is None.
utol
A Float specifying the total time period. The default value is 1.0.
timePeriod
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10−5 times the total time period.
minInc
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
Return value
A GeostaticStep object.
Exceptions
RangeError.
2395
Abaqus Scripting Reference Guide
GeostaticStep object

setValues(...)
This method modiﬁes the GeostaticStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the GeostaticStep  method, except for the
name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The GeostaticStep object can have the following members:
A String specifying the repository key.
name
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel
matrix is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
None or a Float specifying the tolerance for maximum change of displacements. The
default value is None.
utol
Abaqus Scripting Reference Guide
2396
GeostaticStep object

A Float specifying the total time period. The default value is 1.0.
timePeriod
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
Note:
This parameter is ignored unless timeIncrementationMethod=AUTOMATIC.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
2397
Abaqus Scripting Reference Guide
GeostaticStep object

•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
Abaqus Scripting Reference Guide
2398
GeostaticStep object

A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*GEOSTATIC
•
*STEP
2399
Abaqus Scripting Reference Guide
GeostaticStep object

HeatTransferStep object
The HeatTransferStep object is used to control uncoupled heat transfer for either transient or steady-state response.
The HeatTransferStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
HeatTransferStep(...)
This method creates a HeatTransferStep object.
Path
mdb.models[name].HeatTransferStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the analysis type. Possible values are STEADY_STATE
and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of 0.8 times the initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
Abaqus Scripting Reference Guide
2400
HeatTransferStep object

None or a Float specifying the temperature change rate (temperature per time) used to
deﬁne steady state. When all nodal temperatures are changing at less than this rate, the
solution terminates. The default value is None.
end
Note:
This parameter is ignored unless response=STEADY_STATE.
A Float specifying the maximum temperature change to be allowed in an increment
during a transient heat transfer analysis. The default value is 0.0.
deltmx
A Float specifying the maximum allowable emissivity change with temperature and ﬁeld
variables during an increment. The default value is 0.1.
mxdem
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel matrix
is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
Return value
A HeatTransferStep object.
Exceptions
RangeError.
2401
Abaqus Scripting Reference Guide
HeatTransferStep object

setValues(...)
This method modiﬁes the HeatTransferStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the HeatTransferStep  method, except for
the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The HeatTransferStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the analysis type. Possible values are
STEADY_STATE and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of 0.8 times the initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
None or a Float specifying the temperature change rate (temperature per time) used
to deﬁne steady state. When all nodal temperatures are changing at less than this rate,
the solution terminates. The default value is None.
end
Abaqus Scripting Reference Guide
2402
HeatTransferStep object

Note:
This parameter is ignored unless response=STEADY_STATE.
A Float specifying the maximum temperature change to be allowed in an increment
during a transient heat transfer analysis. The default value is 0.0.
deltmx
A Float specifying the maximum allowable emissivity change with temperature and
ﬁeld variables during an increment. The default value is 0.1.
mxdem
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel
matrix is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
2403
Abaqus Scripting Reference Guide
HeatTransferStep object

A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
Abaqus Scripting Reference Guide
2404
HeatTransferStep object

A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*HEAT TRANSFER
•
*STEP
2405
Abaqus Scripting Reference Guide
HeatTransferStep object

ImplicitDynamicsStep object
The ImplicitDynamicsStep object is used to provide direct integration of a dynamic stress/displacement response in
Abaqus/Standard analyses and is generally used for nonlinear cases.
The ImplicitDynamicsStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
ImplicitDynamicsStep(...)
This method creates an ImplicitDynamicsStep object.
Path
mdb.models[name].ImplicitDynamicsStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the total time period of the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is based on the previous step.
nlgeom
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the application type of the step. Possible values are
ANALYSIS_PRODUCT_DEFAULT, TRANSIENT_FIDELITY,
application
MODERATE_DISSIPATION, and QUASI_STATIC. The default value is
ANALYSIS_PRODUCT_DEFAULT.
A Boolean specifying whether an adiabatic stress analysis is to be performed. The default
value is OFF.
adiabatic
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
Abaqus Scripting Reference Guide
2406
ImplicitDynamicsStep object

An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10−5 times the total time period.
minInc
The SymbolicConstant DEFAULT or a Float specifying the maximum time increment
allowed.
maxInc
A SymbolicConstant specifying the way of specifying half-increment residual tolerance
with the automatic time incrementation scheme. Possible values are
hafTolMethod
ANALYSIS_PRODUCT_DEFAULT, VALUE, and SCALE. The default value is
VALUE.
None or a Float specifying the half-increment residual tolerance to be used with the
automatic time incrementation scheme. The default value is None.
haftol
None or a Float specifying the half-increment residual tolerance scale factor to be used
with the automatic time incrementation scheme. The default value is None.
halfIncScaleFactor
A Boolean specifying whether to suppress calculation of the half-increment residual.
The default value is OFF.
nohaf
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. Possible values are STEP and RAMP. The default value is STEP.
amplitude
The SymbolicConstant DEFAULT or a Float specifying the nondefault value of the
numerical (artiﬁcial) damping control parameter, , in the implicit operator. Possible
values are −.333 
 0. The default value is DEFAULT.
alpha
A SymbolicConstant specifying whether accelerations should be calculated or recalculated
at the beginning of the step. Possible values are DEFAULT, BYPASS, and ALLOW.
The default value is DEFAULT.
initialConditions
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
extrapolation
PARABOLIC, VELOCITY_PARABOLIC, and ANALYSIS_PRODUCT_DEFAULT.
The default value is ANALYSIS_PRODUCT_DEFAULT.
A Boolean specifying whether to accept the solution to an increment after the maximum
number of iterations allowed have been completed, even if the equilibrium tolerances
are not satisﬁed. The default value is OFF.
noStop
Warning:
You should set noStop=OFF only in special cases when you have a thorough
understanding of how to interpret the results.
2407
Abaqus Scripting Reference Guide
ImplicitDynamicsStep object

A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel matrix
is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
Return value
An ImplicitDynamicsStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ImplicitDynamicsStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ImplicitDynamicsStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The ImplicitDynamicsStep object can have the following members:
A String specifying the repository key.
name
A Float specifying the total time period of the step. The default value is 1.0.
timePeriod
Abaqus Scripting Reference Guide
2408
ImplicitDynamicsStep object

A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is based on the previous step.
nlgeom
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the application type of the step. Possible values are
ANALYSIS_PRODUCT_DEFAULT, TRANSIENT_FIDELITY,
application
MODERATE_DISSIPATION, and QUASI_STATIC. The default value is
ANALYSIS_PRODUCT_DEFAULT.
A Boolean specifying whether an adiabatic stress analysis is to be performed. The
default value is OFF.
adiabatic
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
The SymbolicConstant DEFAULT or a Float specifying the maximum time increment
allowed.
maxInc
A SymbolicConstant specifying the way of specifying half-increment residual tolerance
with the automatic time incrementation scheme. Possible values are
hafTolMethod
ANALYSIS_PRODUCT_DEFAULT, VALUE, and SCALE. The default value is
VALUE.
None or a Float specifying the half-increment residual tolerance to be used with the
automatic time incrementation scheme. The default value is None.
haftol
None or a Float specifying the half-increment residual tolerance scale factor to be
used with the automatic time incrementation scheme. The default value is None.
halfIncScaleFactor
A Boolean specifying whether to suppress calculation of the half-increment residual.
The default value is OFF.
nohaf
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. Possible values are STEP and RAMP. The default value is STEP.
amplitude
2409
Abaqus Scripting Reference Guide
ImplicitDynamicsStep object

The SymbolicConstant DEFAULT or a Float specifying the nondefault value of the
numerical (artiﬁcial) damping control parameter, , in the implicit operator. Possible
values are −.333 
 0. The default value is DEFAULT.
alpha
A SymbolicConstant specifying whether accelerations should be calculated or
recalculated at the beginning of the step. Possible values are DEFAULT, BYPASS,
and ALLOW. The default value is DEFAULT.
initialConditions
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
extrapolation
PARABOLIC, VELOCITY_PARABOLIC, and ANALYSIS_PRODUCT_DEFAULT.
The default value is ANALYSIS_PRODUCT_DEFAULT.
A Boolean specifying whether to accept the solution to an increment after the maximum
number of iterations allowed have been completed, even if the equilibrium tolerances
are not satisﬁed. The default value is OFF.
noStop
Warning:
You should set noStop=OFF only in special cases when you have a thorough
understanding of how to interpret the results.
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel
matrix is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
Abaqus Scripting Reference Guide
2410
ImplicitDynamicsStep object

•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
2411
Abaqus Scripting Reference Guide
ImplicitDynamicsStep object

A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*DYNAMIC
•
*STEP
Abaqus Scripting Reference Guide
2412
ImplicitDynamicsStep object

InitialStep object
The InitialStep object is a placeholder that you cannot create, delete, or modify. The InitialStep object exists in every
model by default and is used to allow the preexisting boundary conditions and interactions to be deﬁned in the model.
The InitialStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
Members
The InitialStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
2413
InitialStep object

•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Abaqus Scripting Reference Guide
2414
InitialStep object

MassDiffusionStep object
The MassDiffusionStep object is used to control uncoupled transient or steady-state mass diffusion analysis.
The MassDiffusionStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
MassDiffusionStep(...)
This method creates a MassDiffusionStep object.
Path
mdb.models[name].MassDiffusionStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the analysis type. Possible values are STEADY_STATE
and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of 0.8 times the initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
2415
MassDiffusionStep object

A SymbolicConstant specifying the time period to be analyzed in a transient analysis.
Possible values are PERIOD and SS. The default value is PERIOD.
end
A Float specifying the maximum normalized concentration change to be allowed in an
increment. The default value is 0.0.
dcmax
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
Return value
A MassDiffusionStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the MassDiffusionStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the MassDiffusionStep  method, except for
the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The MassDiffusionStep object can have the following members:
Abaqus Scripting Reference Guide
2416
MassDiffusionStep object

A String specifying the repository key.
name
A SymbolicConstant specifying the analysis type. Possible values are
STEADY_STATE and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period. The default value is 1.0.
timePeriod
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of 0.8 times the initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
A SymbolicConstant specifying the time period to be analyzed in a transient analysis.
Possible values are PERIOD and SS. The default value is PERIOD.
end
A Float specifying the maximum normalized concentration change to be allowed in
an increment. The default value is 0.0.
dcmax
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
2417
Abaqus Scripting Reference Guide
MassDiffusionStep object

A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
Abaqus Scripting Reference Guide
2418
MassDiffusionStep object

A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*MASS DIFFUSION
•
*STEP
2419
Abaqus Scripting Reference Guide
MassDiffusionStep object

ModalDynamicsStep object
The ModalDynamicsStep object is used to provide dynamic time history response as a linear perturbation procedure
using modal superposition.
The ModalDynamicsStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
ModalDynamicsStep(...)
This method creates a ModalDynamicsStep object.
Path
mdb.models[name].ModalDynamicsStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an
empty string.
description
A Boolean specifying that the step starts with zero initial conditions. The
default value is OFF.
continueAnalysis
A Float specifying the total time period. The default value is 1.0.
timePeriod
A Float specifying the time increment to be used. The default value is 1.0.
incSize
A DirectDamping object.
directDamping
A CompositeDamping object.
compositeDamping
A RayleighDamping object.
rayleighDamping
A SymbolicConstant specifying the amplitude variation for loading magnitudes
during the step. Possible values are STEP and RAMP. The default value is
STEP.
amplitude
Abaqus Scripting Reference Guide
2420
ModalDynamicsStep object

A Boolean specifying whether to retain attributes from an existing step with
the same name. The default value is False.
maintainAttributes
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
Return value
A ModalDynamicsStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ModalDynamicsStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ModalDynamicsStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The ModalDynamicsStep object can have the following members:
A String specifying the repository key.
name
A Boolean specifying that the step starts with zero initial conditions. The default
value is OFF.
continueAnalysis
A Float specifying the total time period. The default value is 1.0.
timePeriod
A Float specifying the time increment to be used. The default value is 1.0.
incSize
A SymbolicConstant specifying the amplitude variation for loading magnitudes
during the step. Possible values are STEP and RAMP. The default value is STEP.
amplitude
2421
Abaqus Scripting Reference Guide
ModalDynamicsStep object

A String specifying the name of the previous step. The new step appears after
this step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A DirectDamping object.
directDamping
A CompositeDamping object.
compositeDamping
A RayleighDamping object.
rayleighDamping
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
Abaqus Scripting Reference Guide
2422
ModalDynamicsStep object

•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*DAMPING
•
*MODAL DAMPING
•
*MODAL DYNAMIC
2423
Abaqus Scripting Reference Guide
ModalDynamicsStep object

•
*STEP
Abaqus Scripting Reference Guide
2424
ModalDynamicsStep object

RandomResponseStep object
The RandomResponseStep object is used to give the linearized response of a model to random excitation.
The RandomResponseStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
RandomResponseStep(...)
This method creates a RandomResponseStep object.
Path
mdb.models[name].RandomResponseStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
A RandomResponseFrequencyArray object specifying frequencies over ranges of modes.
freq
Optional arguments
A String specifying a description of the new step. The default value is
an empty string.
description
A SymbolicConstant specifying the frequency scale. Possible values are
LINEAR and LOG. The default value is LOG.
scale
A DirectDamping object.
directDamping
A CompositeDamping object.
compositeDamping
A RayleighDamping object.
rayleighDamping
A StructuralDamping object.
structuralDamping
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
A StructuralDampingByFrequency object.
structuralDampingByFrequency
2425
RandomResponseStep object

A Boolean specifying whether to retain attributes from an existing step
with the same name. The default value is False.
maintainAttributes
Return value
A RandomResponseStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the RandomResponseStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the RandomResponseStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The RandomResponseStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the frequency scale. Possible values are LINEAR
and LOG. The default value is LOG.
scale
A String specifying the name of the previous step. The new step appears after
this step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A RandomResponseFrequencyArray object specifying frequencies over ranges
of modes.
freq
A DirectDamping object.
directDamping
Abaqus Scripting Reference Guide
2426
RandomResponseStep object

A CompositeDamping object.
compositeDamping
A RayleighDamping object.
rayleighDamping
A StructuralDamping object.
structuralDamping
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
A StructuralDampingByFrequency object.
structuralDampingByFrequency
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
2427
Abaqus Scripting Reference Guide
RandomResponseStep object

•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value
is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*DAMPING
•
*MODAL DAMPING
•
*RANDOM RESPONSE
•
*STEP
Abaqus Scripting Reference Guide
2428
RandomResponseStep object

ResponseSpectrumStep object
The ResponseSpectrumStep object is used to calculate estimates of peak values of displacements and stresses based
on user-supplied response spectra and on the natural modes of the system.
The ResponseSpectrumStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
ResponseSpectrumStep(...)
This method creates a ResponseSpectrumStep object.
Path
mdb.models[name].ResponseSpectrumStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A ResponseSpectrumComponentArray object.
components
Optional arguments
A String specifying a description of the new step. The default value is an empty
string.
description
A SymbolicConstant specifying the order and method used to sum the components.
Possible values are SINGLE_DIRECTION,
comp
MULTIPLE_DIRECTION_ABSOLUTE_SUM,
MULTIPLE_DIRECTION_SRSS_SUM,
MULTIPLE_DIRECTION_THIRTY_PERCENT_RULE, and
MULTIPLE_DIRECTION_FORTY_PERCENT_RULE. The default value is
SINGLE_DIRECTION.
A SymbolicConstant specifying the method used to sum the components. Possible
values are ABS, CQC, NRL, SRSS, TENP, DSC, and GRP. The default value is
ABS.
sum
A DirectDamping object.
directDamping
A CompositeDamping object.
compositeDamping
2429
ResponseSpectrumStep object

A RayleighDamping object.
rayleighDamping
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
A Boolean specifying whether to retain attributes from an existing step with the
same name. The default value is False.
maintainAttributes
Return value
A ResponseSpectrumStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ResponseSpectrumStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ResponseSpectrumStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The ResponseSpectrumStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the order and method used to sum the components.
Possible values are SINGLE_DIRECTION,
comp
MULTIPLE_DIRECTION_ABSOLUTE_SUM,
MULTIPLE_DIRECTION_SRSS_SUM,
MULTIPLE_DIRECTION_THIRTY_PERCENT_RULE, and
MULTIPLE_DIRECTION_FORTY_PERCENT_RULE. The default value is
SINGLE_DIRECTION.
Abaqus Scripting Reference Guide
2430
ResponseSpectrumStep object

A SymbolicConstant specifying the method used to sum the components. Possible
values are ABS, CQC, NRL, SRSS, TENP, DSC, and GRP. The default value is
ABS.
sum
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A ResponseSpectrumComponentArray object.
components
A DirectDamping object.
directDamping
A CompositeDamping object.
compositeDamping
A RayleighDamping object.
rayleighDamping
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
A StructuralDamping object.
structuralDamping
A StructuralDampingByFrequency object.
structuralDampingByFrequency
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
2431
Abaqus Scripting Reference Guide
ResponseSpectrumStep object

•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
Abaqus Scripting Reference Guide
2432
ResponseSpectrumStep object

A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*RESPONSE SPECTRUM
•
*STEP
2433
Abaqus Scripting Reference Guide
ResponseSpectrumStep object

SoilsStep object
The SoilsStep object is used to specify transient (consolidation) or steady-state response analysis of partially or fully
saturated ﬂuid-ﬁlled porous media.
The SoilsStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
SoilsStep(...)
This method creates a SoilsStep object.
Path
mdb.models[name].SoilsStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the analysis type. Possible values are STEADY_STATE
and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable, and stabilizationMethod is not NONE. The default
value is 2×10–4.
stabilizationMagnitude
A Boolean specifying whether a creep response occurs during this step. The default value
is ON.
creep
Abaqus Scripting Reference Guide
2434
SoilsStep object

A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A SymbolicConstant specifying the time period to be analyzed in a transient analysis.
Possible values are PERIOD and SS. The default value is PERIOD.
end
None or a Float specifying the maximum pore pressure change permitted in any increment
(in pressure units) in a transient consolidation analysis. The default value is None.
utol
A Float specifying the maximum allowable difference in the creep strain increment
calculated from the creep strain rates at the beginning and end of the increment. The
default value is 0.0.
cetol
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel matrix
is reformed.. The default value is 8.
reformKernel
2435
Abaqus Scripting Reference Guide
SoilsStep object

A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
A Float specifying the maximum allowable ratio of the stabilization energy to the total
strain energy and can be used only if stabilizationMethod is not NONE. The default value
is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
Return value
A SoilsStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SoilsStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SoilsStep  method, except for the name,
previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The SoilsStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the analysis type. Possible values are
STEADY_STATE and TRANSIENT. The default value is TRANSIENT.
response
A Float specifying the total time period. The default value is 1.0.
timePeriod
Abaqus Scripting Reference Guide
2436
SoilsStep object

A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable, and stabilizationMethod is not NONE. The default
value is 2×10–4.
stabilizationMagnitude
A Boolean specifying whether a creep response occurs during this step. The default
value is ON.
creep
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A SymbolicConstant specifying the time period to be analyzed in a transient analysis.
Possible values are PERIOD and SS. The default value is PERIOD.
end
None or a Float specifying the maximum pore pressure change permitted in any
increment (in pressure units) in a transient consolidation analysis. The default value
is None.
utol
A Float specifying the maximum allowable difference in the creep strain increment
calculated from the creep strain rates at the beginning and end of the increment. The
default value is 0.0.
cetol
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. The default value is STEP. Possible values are STEP and RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
2437
Abaqus Scripting Reference Guide
SoilsStep object

A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel
matrix is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A Float specifying the maximum allowable ratio of the stabilization energy to the
total strain energy and can be used only if stabilizationMethod is not NONE. The
default value is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
Abaqus Scripting Reference Guide
2438
SoilsStep object

•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
2439
Abaqus Scripting Reference Guide
SoilsStep object

A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*SOILS
•
*STEP
Abaqus Scripting Reference Guide
2440
SoilsStep object

StaticLinearPerturbationStep object
The StaticLinearPerturbationStep object is used to indicate that the static step should be analyzed as a linear perturbation
load step.
The StaticLinearPerturbationStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
StaticLinearPerturbationStep(...)
This method creates a StaticLinearPerturbationStep object.
Path
mdb.models[name].StaticLinearPerturbationStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step
in the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying the technique used for solving nonlinear equations.
Possible values are FULL_NEWTON and LCP_CONTACT.
solutionTechnique
A Float specifying the zone within which potential contact constraints are exposed to
the LCP solver, applicable when solutionTechnique is LCP_CONTACT.
gapDistance
A Float specifying the scaling factor for the initial gap distance speciﬁed by gapDistance
or the internally computed (contact) pair-wise gap distances, applicable when
solutionTechnique is LCP_CONTACT.
scaleFactor
2441
StaticLinearPerturbationStep object

Return value
A StaticLinearPerturbationStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the StaticLinearPerturbationStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StaticLinearPerturbationStep method,
except for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The StaticLinearPerturbationStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the type of solver. Possible values are DIRECT
and ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value
is SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the technique used for solving nonlinear equations.
Possible values are FULL_NEWTON and LCP_CONTACT.
solutionTechnique
A Float specifying the zone within which potential contact constraints are exposed
to the LCP solver, applicable when solutionTechnique is LCP_CONTACT.
gapDistance
A Float specifying the scaling factor for the initial gap distance speciﬁed by
gapDistance or the internally computed (contact) pair-wise gap distances, applicable
when solutionTechnique is LCP_CONTACT.
scaleFactor
Abaqus Scripting Reference Guide
2442
StaticLinearPerturbationStep object

A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
2443
Abaqus Scripting Reference Guide
StaticLinearPerturbationStep object

A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*STATIC
•
*STEP
Abaqus Scripting Reference Guide
2444
StaticLinearPerturbationStep object

StaticRiksStep object
The StaticRiksStep object is used to indicate that the step should be analyzed as a static load step using the modiﬁed
Riks method for proportional loading cases.
The StaticRiksStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
StaticRiksStep(...)
This method creates a StaticRiksStep object.
Path
mdb.models[name].StaticRiksStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Boolean specifying whether to allow for geometric nonlinearity. The default value is
OFF.
nlgeom
A Boolean specifying whether to perform an adiabatic stress analysis. The default value
is OFF.
adiabatic
None or a Float specifying the maximum value of the load proportionality factor. The
default value is None.
maxLPF
A Boolean specifying whether to monitor the ﬁnishing displacement value at a node.
The default value is OFF.
nodeOn
A Float specifying the value of the total displacement (or rotation) at the node and degree
of freedom that, if crossed during an increment, ends the step at the current increment.
This argument is required when nodeOn=ON. The default value is 0.0.
maximumDisplacement
An Int specifying the degree of freedom being monitored. This argument is required
when nodeOn=ON. The default value is 0.
dof
2445
StaticRiksStep object

A Region object specifying the vertex at which the ﬁnishing displacement value is being
monitored. This argument is required when nodeOn=ON.
region
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the total load proportionality factor associated with the load in this
step. The default value is 1.0.
totalArcLength
A Float specifying the initial load proportionality factor. The default value is the total
load proportionality factor for the step.
initialArcInc
A Float specifying the minimum arc length increment allowed. The default value is the
smaller of the suggested initial load proportionality factor or 10−5 times the total load
proportionality factor for the step.
minArcInc
A Float specifying the maximum arc length increment allowed. The default value is the
total load proportionality factor for the step.
maxArcInc
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A String specifying the name of the region being monitored for fully plastic behavior.
The default value is an empty string.
fullyPlastic
A Boolean specifying whether to accept the solution to an increment after the maximum
number of iterations allowed have been completed, even if the equilibrium tolerances
are not satisﬁed. The default value is OFF.
noStop
Warning:
You should set noStop=ON only in special cases when you have a thorough
understanding of how to interpret the results.
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A Boolean specifying wether to obtain the fully relaxed long-term elastic solution with
time-domain viscoelasticity or the long-term elastic-plastic solution for two-layer
viscoplasticity. The default value is OFF.
useLongTermSolution
Abaqus Scripting Reference Guide
2446
StaticRiksStep object

A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
Return value
A StaticRiksStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the StaticRiksStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StaticRiksStep  method, except for the
name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The StaticRiksStep object can have the following members:
A String specifying the repository key.
name
A Boolean specifying whether to allow for geometric nonlinearity. The default value
is OFF.
nlgeom
A Boolean specifying whether to perform an adiabatic stress analysis. The default
value is OFF.
adiabatic
None or a Float specifying the maximum value of the load proportionality factor.
The default value is None.
maxLPF
A Boolean specifying whether to monitor the ﬁnishing displacement value at a node.
The default value is OFF.
nodeOn
2447
Abaqus Scripting Reference Guide
StaticRiksStep object

A Float specifying the value of the total displacement (or rotation) at the node and
degree of freedom that, if crossed during an increment, ends the step at the current
increment. This argument is required when nodeOn=ON. The default value is 0.0.
maximumDisplacement
An Int specifying the degree of freedom being monitored. This argument is required
when nodeOn=ON. The default value is 0.
dof
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the total load proportionality factor associated with the load in this
step. The default value is 1.0.
totalArcLength
A Float specifying the initial load proportionality factor. The default value is the total
load proportionality factor for the step.
initialArcInc
A Float specifying the minimum arc length increment allowed. The default value is
the smaller of the suggested initial load proportionality factor or 10−5 times the total
load proportionality factor for the step.
minArcInc
A Float specifying the maximum arc length increment allowed. The default value is
the total load proportionality factor for the step.
maxArcInc
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to accept the solution to an increment after the maximum
number of iterations allowed have been completed, even if the equilibrium tolerances
are not satisﬁed. The default value is OFF.
noStop
Warning:
You should set noStop=ON only in special cases when you have a thorough
understanding of how to interpret the results.
A Boolean specifying wether to obtain the fully relaxed long-term elastic solution
with time-domain viscoelasticity or the long-term elastic-plastic solution for two-layer
viscoplasticity. The default value is OFF.
useLongTermSolution
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
Abaqus Scripting Reference Guide
2448
StaticRiksStep object

CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A String specifying the name of the region being monitored for fully plastic behavior.
The default value is an empty string.
fullyPlastic
A Region object specifying the vertex at which the ﬁnishing displacement value is
being monitored. This argument is required when nodeOn=ON.
region
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
2449
Abaqus Scripting Reference Guide
StaticRiksStep object

•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*STATIC
•
*STEP
Abaqus Scripting Reference Guide
2450
StaticRiksStep object

StaticStep object
The StaticStep object is used to indicate that the step should be analyzed as a static load step.
The StaticStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
StaticStep(...)
This method creates a StaticStep object.
Path
mdb.models[name].StaticStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the total time period. The default value is 1.0.
timePeriod
A Boolean specifying whether to allow for geometric nonlinearity. The default value is
OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable, and stabilizationMethod is not NONE. The default
value is 2×10–4.
stabilizationMagnitude
A Boolean specifying whether to perform an adiabatic stress analysis. The default value
is OFF.
adiabatic
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
2451
StaticStep object

An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10–5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the total
time period for the step.
maxInc
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. Possible values are STEP and RAMP. The default value is RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A String specifying the region being monitored for fully plastic behavior. The default
value is an empty string.
fullyPlastic
A Boolean specifying whether to accept the solution to an increment after the maximum
number of iterations allowed has been completed, even if the equilibrium tolerances are
not satisﬁed. The default value is OFF.
noStop
Warning:
You should set noStop=ON only in special cases when you have a thorough
understanding of how to interpret the results.
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A Boolean specifying wether to obtain the fully relaxed long-term elastic solution with
time-domain viscoelasticity or the long-term elastic-plastic solution for two-layer
viscoplasticity. The default value is OFF.
useLongTermSolution
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
Abaqus Scripting Reference Guide
2452
StaticStep object

An Int specifying the number of quasi-Newton iterations allowed before the kernel matrix
is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
A Float specifying the maximum allowable ratio of the stabilization energy to the total
strain energy and can be used only if stabilizationMethod is not NONE. The default value
is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
Return value
A StaticStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the StaticStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the StaticStep  method, except for the name,
previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The StaticStep object can have the following members:
A String specifying the repository key.
name
A Float specifying the total time period. The default value is 1.0.
timePeriod
2453
Abaqus Scripting Reference Guide
StaticStep object

A Boolean specifying whether to allow for geometric nonlinearity. The default value
is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable, and stabilizationMethod is not NONE. The default
value is 2×10–4.
stabilizationMagnitude
A Boolean specifying whether to perform an adiabatic stress analysis. The default
value is OFF.
adiabatic
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10–5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default value is the
total time period for the step.
maxInc
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. Possible values are STEP and RAMP. The default value is RAMP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to accept the solution to an increment after the maximum
number of iterations allowed has been completed, even if the equilibrium tolerances
are not satisﬁed. The default value is OFF.
noStop
Abaqus Scripting Reference Guide
2454
StaticStep object

Warning:
You should set noStop=ON only in special cases when you have a thorough
understanding of how to interpret the results.
A Boolean specifying wether to obtain the fully relaxed long-term elastic solution
with time-domain viscoelasticity or the long-term elastic-plastic solution for two-layer
viscoplasticity. The default value is OFF.
useLongTermSolution
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel
matrix is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
A Float specifying the maximum allowable ratio of the stabilization energy to the
total strain energy and can be used only if stabilizationMethod is not NONE. The
default value is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A String specifying the region being monitored for fully plastic behavior. The default
value is an empty string.
fullyPlastic
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
2455
Abaqus Scripting Reference Guide
StaticStep object

•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
Abaqus Scripting Reference Guide
2456
StaticStep object

A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*STATIC
•
*STEP
2457
Abaqus Scripting Reference Guide
StaticStep object

SteadyStateDirectStep object
The SteadyStateDirectStep object is used to calculate the linearized steady-state response of the system to harmonic
excitation in terms of the physical degrees of freedom of the model.
The SteadyStateDirectStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
SteadyStateDirectStep(...)
This method creates a SteadyStateDirectStep object.
Path
mdb.models[name].SteadyStateDirectStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A SteadyStateDirectFrequencyArray object.
frequencyRange
Optional arguments
A String specifying a description of the new step. The default value is an empty
string.
description
A SymbolicConstant specifying whether damping terms are to be ignored so that
a real, rather than a complex, system matrix is factored. Possible values are
REAL_ONLY and COMPLEX. The default value is COMPLEX.
factorization
A SymbolicConstant specifying whether a logarithmic or linear scale is used for
output. Possible values are LOGARITHMIC and LINEAR. The default value is
LOGARITHMIC.
scale
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value
is SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the
same name. The default value is False.
maintainAttributes
Abaqus Scripting Reference Guide
2458
SteadyStateDirectStep object

A Boolean specifying whether to subdivide each frequency range using the
eigenfrequencies of the system. The default value is OFF.
subdivideUsingEigenfrequencies
A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
Return value
A SteadyStateDirectStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SteadyStateDirectStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SteadyStateDirectStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The SteadyStateDirectStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying whether damping terms are to be ignored so that
a real, rather than a complex, system matrix is factored. Possible values are
REAL_ONLY and COMPLEX. The default value is COMPLEX.
factorization
A SymbolicConstant specifying whether a logarithmic or linear scale is used for
output. Possible values are LOGARITHMIC and LINEAR. The default value is
LOGARITHMIC.
scale
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value
is SOLVER_DEFAULT.
matrixStorage
2459
Abaqus Scripting Reference Guide
SteadyStateDirectStep object

A Boolean specifying whether to subdivide each frequency range using the
eigenfrequencies of the system. The default value is OFF.
subdivideUsingEigenfrequencies
A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A SteadyStateDirectFrequencyArray object.
frequencyRange
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
Abaqus Scripting Reference Guide
2460
SteadyStateDirectStep object

•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*STEADY STATE DYNAMICS
•
*STEP
2461
Abaqus Scripting Reference Guide
SteadyStateDirectStep object

SteadyStateModalStep object
The SteadyStateModalStep object is used to calculate the linearized steady-state response of the system to harmonic
excitation.
The SteadyStateModalStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
SteadyStateModalStep(...)
This method creates a SteadyStateModalStep object.
Path
mdb.models[name].SteadyStateModalStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A SteadyStateModalFrequencyArray object.
frequencyRange
Optional arguments
A String specifying a description of the new step. The default value is an
empty string.
description
A SymbolicConstant specifying whether a logarithmic or linear scale is
used for output. Possible values are LOGARITHMIC and LINEAR. The
default value is LOGARITHMIC.
scale
A DirectDamping object.
directDamping
A CompositeDamping object.
compositeDamping
A RayleighDamping object.
rayleighDamping
A StructuralDamping object.
structuralDamping
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
Abaqus Scripting Reference Guide
2462
SteadyStateModalStep object

A StructuralDampingByFrequency object.
structuralDampingByFrequency
A Boolean specifying whether to retain attributes from an existing step
with the same name. The default value is False.
maintainAttributes
A Boolean specifying whether to subdivide each frequency range using
the eigenfrequencies of the system. The default value is ON.
subdivideUsingEigenfrequencies
Return value
A SteadyStateModalStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SteadyStateModalStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SteadyStateModalStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The SteadyStateModalStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying whether a logarithmic or linear scale is used
for output. Possible values are LOGARITHMIC and LINEAR. The default
value is LOGARITHMIC.
scale
A Boolean specifying whether to subdivide each frequency range using the
eigenfrequencies of the system. The default value is ON.
subdivideUsingEigenfrequencies
A String specifying the name of the previous step. The new step appears after
this step in the list of analysis steps.
previous
2463
Abaqus Scripting Reference Guide
SteadyStateModalStep object

A String specifying a description of the new step. The default value is an empty
string.
description
A SteadyStateModalFrequencyArray object.
frequencyRange
A DirectDamping object.
directDamping
A CompositeDamping object.
compositeDamping
A RayleighDamping object.
rayleighDamping
A StructuralDamping object.
structuralDamping
A DirectDampingByFrequency object.
directDampingByFrequency
A RayleighDampingByFrequency object.
rayleighDampingByFrequency
A StructuralDampingByFrequency object.
structuralDampingByFrequency
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
Abaqus Scripting Reference Guide
2464
SteadyStateModalStep object

•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value
is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
2465
Abaqus Scripting Reference Guide
SteadyStateModalStep object

Corresponding analysis keywords
•
*DAMPING
•
*MODAL DAMPING
•
*STEADY STATE DYNAMICS
•
*STEP
Abaqus Scripting Reference Guide
2466
SteadyStateModalStep object

SteadyStateSubspaceStep object
The SteadyStateSubspaceStep object is used to calculate the linearized steady-state response of the system to harmonic
excitation on the basis of the subspace projection method.
The SteadyStateSubspaceStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
SteadyStateSubspaceStep(...)
This method creates a SteadyStateSubspaceStep object.
Path
mdb.models[name].SteadyStateSubspaceStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A SteadyStateSubspaceFrequencyArray object.
frequencyRange
Optional arguments
A String specifying a description of the new step. The default value is an empty
string.
description
A SymbolicConstant specifying whether damping terms are to be ignored so that
a real, rather than a complex, system matrix is factored. Possible values are
REAL_ONLY and COMPLEX. The default value is COMPLEX.
factorization
A SymbolicConstant specifying whether a logarithmic or linear scale is used for
output. Possible values are LOGARITHMIC and LINEAR. The default value is
LOGARITHMIC.
scale
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value
is SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to retain attributes from an existing step with the
same name. The default value is False.
maintainAttributes
2467
SteadyStateSubspaceStep object

A Boolean specifying whether to subdivide each frequency range using the
eigenfrequencies of the system. The default value is ON.
subdivideUsingEigenfrequencies
A SymbolicConstant specifying how often to perform subspace projections onto
the modal subspace. Possible values are ALL_FREQUENCIES, CONSTANT,
projection
EIGENFREQUENCY, PROPERTY_CHANGE, and RANGE. The default value
is ALL_FREQUENCIES.
A Float specifying the maximum relative change in damping material properties
before a new projection is to be performed. The default value is 0.1.
maxDampingChange
A Float specifying the maximum relative change in stiffness material properties
before a new projection is to be performed. The default value is 0.1.
maxStiffnessChange
A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
Return value
A SteadyStateSubspaceStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SteadyStateSubspaceStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SteadyStateSubspaceStep  method,
except for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The SteadyStateSubspaceStep object can have the following members:
A String specifying the repository key.
name
Abaqus Scripting Reference Guide
2468
SteadyStateSubspaceStep object

A SymbolicConstant specifying whether damping terms are to be ignored so that
a real, rather than a complex, system matrix is factored. Possible values are
REAL_ONLY and COMPLEX. The default value is COMPLEX.
factorization
A SymbolicConstant specifying whether a logarithmic or linear scale is used for
output. Possible values are LOGARITHMIC and LINEAR. The default value is
LOGARITHMIC.
scale
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value
is SOLVER_DEFAULT.
matrixStorage
A Boolean specifying whether to subdivide each frequency range using the
eigenfrequencies of the system. The default value is ON.
subdivideUsingEigenfrequencies
A SymbolicConstant specifying how often to perform subspace projections onto
the modal subspace. Possible values are ALL_FREQUENCIES, CONSTANT,
projection
EIGENFREQUENCY, PROPERTY_CHANGE, and RANGE. The default value
is ALL_FREQUENCIES.
A Float specifying the maximum relative change in damping material properties
before a new projection is to be performed. The default value is 0.1.
maxDampingChange
A Float specifying the maximum relative change in stiffness material properties
before a new projection is to be performed. The default value is 0.1.
maxStiffnessChange
A Boolean specifying whether to add to the damping matrix contributions due to
friction effects. The default value is OFF.
frictionDamping
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A SteadyStateSubspaceFrequencyArray object.
frequencyRange
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
2469
Abaqus Scripting Reference Guide
SteadyStateSubspaceStep object

•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
Abaqus Scripting Reference Guide
2470
SteadyStateSubspaceStep object

A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*STEADY STATE DYNAMICS
•
*STEP
2471
Abaqus Scripting Reference Guide
SteadyStateSubspaceStep object

SubspaceDynamicsStep object
The SubspaceDynamicsStep object is used to calculate the linearized steady-state response of the system to harmonic
excitation on the basis of the subspace projection method.
The SubspaceDynamicsStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
SubspaceDynamicsStep(...)
This method creates a SubspaceDynamicsStep object.
Path
mdb.models[name].SubspaceDynamicsStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the total time period of the step. The default value is 1.0.
timePeriod
The SymbolicConstant ALL or an Int specifying the number of modes to be used for
subspace projection. The possible value for the SymbolicConstant is ALL. The default
value is ALL.
vectors
A Boolean specifying whether to allow for geometric nonlinearity. The default value is
OFF.
nlgeom
An Int specifying the maximum number of increments in a step. The default value is 100.
maxNumInc
A Float specifying the suggested time increment. The default value is 0.0.
incSize
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. Possible values are STEP and RAMP. The default value is STEP.
amplitude
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
Abaqus Scripting Reference Guide
2472
SubspaceDynamicsStep object

Return value
A SubspaceDynamicsStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SubspaceDynamicsStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SubspaceDynamicsStep  method, except
for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The SubspaceDynamicsStep object can have the following members:
A String specifying the repository key.
name
A Float specifying the total time period of the step. The default value is 1.0.
timePeriod
The SymbolicConstant ALL or an Int specifying the number of modes to be used
for subspace projection. The possible value for the SymbolicConstant is ALL. The
default value is ALL.
vectors
A Boolean specifying whether to allow for geometric nonlinearity. The default value
is OFF.
nlgeom
An Int specifying the maximum number of increments in a step. The default value
is 100.
maxNumInc
A Float specifying the suggested time increment. The default value is 0.0.
incSize
A SymbolicConstant specifying the amplitude variation for loading magnitudes
during the step. Possible values are STEP and RAMP. The default value is STEP.
amplitude
2473
Abaqus Scripting Reference Guide
SubspaceDynamicsStep object

A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
Abaqus Scripting Reference Guide
2474
SubspaceDynamicsStep object

A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*DYNAMIC
•
*STEP
2475
Abaqus Scripting Reference Guide
SubspaceDynamicsStep object

SubstructureGenerateStep object
TheSubstructureGenerateStep object is used to generate a substructure.
The SubstructureGenerateStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
SubstructureGenerateStep(...)
This method creates a SubstructureGenerateStep object.
Path
mdb.models[name].SubstructureGenerateStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
An Integer specifying a unique identiﬁer for the substructure.
substructureIdentiﬁer
Optional arguments
A String specifying a description of the new step. The default value is
an empty string.
description
A SymbolicConstant specifying the subtructure recovery to be computed.
Possible values are WHOLE_MODEL, REGION, and NONE. The
default value is WHOLE_MODEL.
recoveryMatrix
A Region object specifying the region for substructure recovery. This
argument is required when recoveryMatrix=REGION.
recoveryRegion
A Boolean specifying whether to compute the gravity load vectors. The
default value is False.
computeGravityLoadVectors
A Boolean specifying whether to compute the reduced mass matrix. The
default value is False.
computeReducedMassMatrix
A Boolean specifying whether to compute the reduced structural damping
matrix. The default value is False.
computeReducedStructuralDampingMatrix
Abaqus Scripting Reference Guide
2476
SubstructureGenerateStep object

A Boolean specifying whether to compute the reduced viscous damping
matrix. The default value is False.
computeReducedViscousDampingMatrix
A Boolean specifying whether to evaluate the frequency dependent
properties. The default value is False.
evaluateFrequencyDependentProperties
A Float specifying the frequency at which to evaluate the frequency
dependent properties. The default value is 0.0.
frequency
A SymbolicConstant specifying the eigenmodes to be retained. Possible
values are MODE_RANGE, FREQUENCY_RANGE, and NONE. The
default value is NONE.
retainedEigenmodesMethod
A SubstructureGenerateModesArray object.
modeRange
A SubstructureGenerateFrequencyArray object.
frequencyRange
A SymbolicConstant specifying the ﬁeld to which the global damping
factors should be applied. Possible values are ALL, ACOUSTIC,
MECHANICAL, and NONE. The default value is NONE.
globalDampingField
A Float specifying the factor to create global Rayleigh mass proportional
damping. The default value is 0.0.
alphaDampingRatio
A Float specifying the factor to create global Rayleigh stiffness
proportional damping. The default value is 0.0.
betaDampingRatio
A Float specifying the factor to create frequency-independent stiffness
proportional structural damping. The default value is 0.0.
structuralDampingRatio
A SymbolicConstant specifying the damping control to include the
viscous damping matrix. Possible values are ELEMENT, FACTOR,
COMBINED, and NONE. The default value is NONE.
viscousDampingControl
A SymbolicConstant specifying the damping control to include the
structural damping matrix. Possible values are ELEMENT, FACTOR,
COMBINED, and NONE. The default value is NONE.
structuralDampingControl
Return value
A SubstructureGenerateStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the SubstructureGenerateStep object.
2477
Abaqus Scripting Reference Guide
SubstructureGenerateStep object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SubstructureGenerateStep  method,
except for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The SubstructureGenerateStep object can have the following members:
A String specifying the repository key.
name
A SymbolicConstant specifying the subtructure recovery to be computed. Possible
values are WHOLE_MODEL, REGION, and NONE. The default value is
WHOLE_MODEL.
recoveryMatrix
A Float specifying the frequency at which to evaluate the frequency dependent
properties. The default value is 0.0.
frequency
A SymbolicConstant specifying the eigenmodes to be retained. Possible values are
MODE_RANGE, FREQUENCY_RANGE, and NONE. The default value is NONE.
retainedEigenmodesMethod
A SymbolicConstant specifying the ﬁeld to which the global damping factors should
be applied. Possible values are ALL, ACOUSTIC, MECHANICAL, and NONE.
The default value is NONE.
globalDampingField
A Float specifying the factor to create global Rayleigh mass proportional damping.
The default value is 0.0.
alphaDampingRatio
A Float specifying the factor to create global Rayleigh stiffness proportional
damping. The default value is 0.0.
betaDampingRatio
A Float specifying the factor to create frequency-independent stiffness proportional
structural damping. The default value is 0.0.
structuralDampingRatio
A SymbolicConstant specifying the damping control to include the viscous damping
matrix. Possible values are ELEMENT, FACTOR, COMBINED, and NONE. The
default value is NONE.
viscousDampingControl
Abaqus Scripting Reference Guide
2478
SubstructureGenerateStep object

A SymbolicConstant specifying the damping control to include the structural
damping matrix. Possible values are ELEMENT, FACTOR, COMBINED, and
NONE. The default value is NONE.
structuralDampingControl
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A String specifying a unique identiﬁer for the substructure. The default value is an
empty string.
substructureIdentiﬁer
A Region object specifying the region for substructure recovery. This argument is
required when recoveryMatrix=REGION.
recoveryRegion
A SubstructureGenerateFrequencyArray object.
frequencyRange
A SubstructureGenerateModesArray object.
modeRange
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
2479
Abaqus Scripting Reference Guide
SubstructureGenerateStep object

•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Abaqus Scripting Reference Guide
2480
SubstructureGenerateStep object

Corresponding analysis keywords
•
*SUBSTRUCTURE GENERATE
•
*STEP
2481
Abaqus Scripting Reference Guide
SubstructureGenerateStep object

TempDisplacementDynamicsStep object
The TempDisplacementDynamicsStep object is used to perform a dynamic coupled thermal-stress analysis using
explicit integration.
The TempDisplacementDynamicsStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
TempDisplacementDynamicsStep(...)
This method creates a TempDisplacementDynamicsStep object.
Path
mdb.models[name].TempDisplacementDynamicsStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the time period of the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for during
the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are AUTOMATIC_GLOBAL, AUTOMATIC_EBE,
timeIncrementationMethod
FIXED_USER_DEFINED_INC, and FIXED_EBE. The default value is
AUTOMATIC_GLOBAL.
None or a Float specifying the maximum time increment allowed. If there is no upper
limit, maxIncrement=None. The default value is None.
maxIncrement
A Float specifying the factor that is used to scale the time increment. This argument is
required only when timeIncrementationMethod=AUTOMATIC_GLOBAL,
AUTOMATIC_EBE, or FIXED_EBE. The default value is 1.0.
scaleFactor
None or a Float specifying the user-deﬁned time increment. The default value is None.
userDeﬁnedInc
Abaqus Scripting Reference Guide
2482
TempDisplacementDynamicsStep object

A tuple of tuples, where each tuple speciﬁes the MassScaling Object controls. The
default value is PREVIOUS_STEP.
massScaling
A Float specifying the linear bulk viscosity parameter, 
. The default value is 0.06.
linearBulkViscosity
A Float specifying the quadratic bulk viscosity parameter, 
. The default value is 1.2.
quadBulkViscosity
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A Boolean specifying whether to use the "improved" (improvedDtMethod=ON) or
"conservative" (improvedDtMethod=OFF) method to estimate the element stable time
improvedDtMethod
increment for three-dimensional continuum elements and elements with plane stress
formulations (shell, membrane, and two-dimensional plane stress elements). The default
value is ON.
Return value
A TempDisplacementDynamicsStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the TempDisplacementDynamicsStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TempDisplacementDynamicsStep method,
except for the name, previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The TempDisplacementDynamicsStep object can have the following members:
A String specifying the repository key.
name
2483
Abaqus Scripting Reference Guide
TempDisplacementDynamicsStep object

A Float specifying the time period of the step. The default value is 1.0.
timePeriod
A Boolean specifying whether geometric nonlinearities should be accounted for
during the step. The default value is OFF.
nlgeom
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are AUTOMATIC_GLOBAL, AUTOMATIC_EBE,
timeIncrementationMethod
FIXED_USER_DEFINED_INC, and FIXED_EBE. The default value is
AUTOMATIC_GLOBAL.
None or a Float specifying the maximum time increment allowed. If there is no
upper limit, maxIncrement=None. The default value is None.
maxIncrement
A Float specifying the factor that is used to scale the time increment. This argument
is required only when timeIncrementationMethod=AUTOMATIC_GLOBAL,
AUTOMATIC_EBE, or FIXED_EBE. The default value is 1.0.
scaleFactor
None or a Float specifying the user-deﬁned time increment. The default value is
None.
userDeﬁnedInc
A Float specifying the linear bulk viscosity parameter, 
. The default value is 0.06.
linearBulkViscosity
A Float specifying the quadratic bulk viscosity parameter, 
. The default value is
1.2.
quadBulkViscosity
A Boolean specifying whether to use the "improved" (improvedDtMethod=ON) or
"conservative" (improvedDtMethod=OFF) method to estimate the element stable
improvedDtMethod
time increment for three-dimensional continuum elements and elements with plane
stress formulations (shell, membrane, and two-dimensional plane stress elements).
The default value is ON.
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty
string.
description
A MassScalingArray object specifying mass scaling controls. The default value is
PREVIOUS_STEP.
massScaling
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
Abaqus Scripting Reference Guide
2484
TempDisplacementDynamicsStep object

A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is
OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
2485
Abaqus Scripting Reference Guide
TempDisplacementDynamicsStep object

A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*BULK VISCOSITY
•
*DYNAMIC
•
*FIXED MASS SCALING
•
*STEP
•
*VARIABLE MASS SCALING
Abaqus Scripting Reference Guide
2486
TempDisplacementDynamicsStep object

ViscoStep object
The ViscoStep object is used to obtain a transient static response in an analysis with time-dependent material behavior
(creep, swelling, and viscoelasticity).
The ViscoStep object is derived from the AnalysisStep object.
Access
import step
mdb.models[name].steps[name]
ViscoStep(...)
This method creates a ViscoStep object.
Path
mdb.models[name].ViscoStep
Required arguments
A String specifying the repository key.
name
A String specifying the name of the previous step. The new step appears after this step in
the list of analysis steps.
previous
Optional arguments
A String specifying a description of the new step. The default value is an empty string.
description
A Float specifying the total time period. The default value is 1.0.
timePeriod
A Boolean specifying whether to allow for geometric nonlinearity. The default value is
OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable, and stabilizationMethod is not NONE. The default
value is 2×10–4.
stabilizationMagnitude
A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
2487
ViscoStep object

A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the minimum time increment allowed. The default value is the smaller
of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default is the total time
period for the step. The default value is 1.0.
maxInc
A SymbolicConstant specifying which type of integration to use throughout the step.
Possible values are IMPLICIT_EXPLICIT and EXPLICIT_ONLY. The default value
is IMPLICIT_EXPLICIT.
integration
A Float specifying the maximum difference in the creep strain increment calculated from
the creep strain rates at the beginning and end of the increment. The default value is 0.0.
cetol
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. Possible values are STEP and RAMP. The default value is STEP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR, and
PARABOLIC. The default value is LINEAR.
extrapolation
A Boolean specifying whether to retain attributes from an existing step with the same
name. The default value is False.
maintainAttributes
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel matrix
is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe discontinuities
occur during an iteration. Possible values are PROPAGATED, CONVERT_SDI_OFF,
and CONVERT_SDI_ON. The default value is PROPAGATED.
convertSDI
A Float specifying the maximum allowable ratio of the stabilization energy to the total
strain energy and can be used only if stabilizationMethod is not NONE. The default value
is 0.05.
adaptiveDampingRatio
Abaqus Scripting Reference Guide
2488
ViscoStep object

A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
Return value
A ViscoStep object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ViscoStep object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ViscoStep  method, except for the name,
previous, and maintainAttributes arguments.
Return value
None.
Exceptions
RangeError.
Members
The ViscoStep object can have the following members:
A String specifying the repository key.
name
A Float specifying the total time period. The default value is 1.0.
timePeriod
A Boolean specifying whether to allow for geometric nonlinearity. The default value
is OFF.
nlgeom
A SymbolicConstant specifying the stabilization type. Possible values are NONE,
DISSIPATED_ENERGY_FRACTION, and DAMPING_FACTOR. The default value
is NONE.
stabilizationMethod
A Float specifying the damping intensity of the automatic damping algorithm if the
problem is expected to be unstable, and stabilizationMethod is not NONE. The default
value is 2×10–4.
stabilizationMagnitude
2489
Abaqus Scripting Reference Guide
ViscoStep object

A SymbolicConstant specifying the time incrementation method to be used. Possible
values are FIXED and AUTOMATIC. The default value is AUTOMATIC.
timeIncrementationMethod
A SymbolicConstant specifying the type of solver. Possible values are DIRECT and
ITERATIVE. The default value is DIRECT.
matrixSolver
A SymbolicConstant specifying the type of matrix storage. Possible values are
SYMMETRIC, UNSYMMETRIC, and SOLVER_DEFAULT. The default value is
SOLVER_DEFAULT.
matrixStorage
A Float specifying the initial time increment. The default value is the total time period
for the step.
initialInc
An Int specifying the maximum number of increments in a step. The default value is
100.
maxNumInc
A Float specifying the minimum time increment allowed. The default value is the
smaller of the suggested initial time increment or 10−5 times the total time period.
minInc
A Float specifying the maximum time increment allowed. The default is the total time
period for the step. The default value is 1.0.
maxInc
A SymbolicConstant specifying which type of integration to use throughout the step.
Possible values are IMPLICIT_EXPLICIT and EXPLICIT_ONLY. The default value
is IMPLICIT_EXPLICIT.
integration
A Float specifying the maximum difference in the creep strain increment calculated
from the creep strain rates at the beginning and end of the increment. The default
value is 0.0.
cetol
A SymbolicConstant specifying the amplitude variation for loading magnitudes during
the step. Possible values are STEP and RAMP. The default value is STEP.
amplitude
A SymbolicConstant specifying the type of extrapolation to use in determining the
incremental solution for a nonlinear analysis. Possible values are NONE, LINEAR,
and PARABOLIC. The default value is LINEAR.
extrapolation
A SymbolicConstant specifying the technique used to for solving nonlinear equations.
Possible values are FULL_NEWTON and QUASI_NEWTON. The default value is
FULL_NEWTON.
solutionTechnique
An Int specifying the number of quasi-Newton iterations allowed before the kernel
matrix is reformed.. The default value is 8.
reformKernel
A SymbolicConstant specifying whether to force a new iteration if severe
discontinuities occur during an iteration. Possible values are PROPAGATED,
convertSDI
CONVERT_SDI_OFF, and CONVERT_SDI_ON. The default value is
PROPAGATED.
Abaqus Scripting Reference Guide
2490
ViscoStep object

A Float specifying the maximum allowable ratio of the stabilization energy to the
total strain energy and can be used only if stabilizationMethod is not NONE. The
default value is 0.05.
adaptiveDampingRatio
A Boolean specifying whether this step will carry over the damping factors from the
results of the preceding general step. This parameter must be used in conjunction with
the adaptiveDampingRatio parameter. The default value is OFF.
continueDampingFactors
A String specifying the name of the previous step. The new step appears after this
step in the list of analysis steps.
previous
A String specifying a description of the new step. The default value is an empty string.
description
A SymbolicConstant specifying whether the step has an explicit procedure type
(procedureType=ANNEAL, DYNAMIC_EXPLICIT, or
DYNAMIC_TEMP_DISPLACEMENT).
explicit
A Boolean specifying whether the step has a perturbation procedure type.
perturbation
A Boolean specifying whether the step has a mechanical procedure type.
nonmechanical
A SymbolicConstant specifying the Abaqus procedure. Possible values are:
procedureType
•
ANNEAL
•
BUCKLE
•
COMPLEX_FREQUENCY
•
COUPLED_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRIC
•
DIRECT_CYCLIC
•
DYNAMIC_IMPLICIT
•
DYNAMIC_EXPLICIT
•
DYNAMIC_SUBSPACE
•
DYNAMIC_TEMP_DISPLACEMENT
•
COUPLED_THERMAL_ELECTRICAL_STRUCTURAL
•
FREQUENCY
•
GEOSTATIC
•
HEAT_TRANSFER
•
MASS_DIFFUSION
•
MODAL_DYNAMICS
•
RANDOM_RESPONSE
•
RESPONSE_SPECTRUM
•
SOILS
•
STATIC_GENERAL
•
STATIC_LINEAR_PERTURBATION
2491
Abaqus Scripting Reference Guide
ViscoStep object

•
STATIC_RIKS
•
STEADY_STATE_DIRECT
•
STEADY_STATE_MODAL
•
STEADY_STATE_SUBSPACE
•
VISCO
A Boolean specifying whether the step is suppressed or not. The default value is OFF.
suppressed
A repository of FieldOutputRequestState objects.
ﬁeldOutputRequestState
A repository of HistoryOutputRequestState objects.
historyOutputRequestState
A DiagnosticPrint object.
diagnosticPrint
A Monitor object.
monitor
A Restart object.
restart
A repository of AdaptiveMeshConstraintState objects.
adaptiveMeshConstraintStates
A repository of AdaptiveMeshDomain objects.
adaptiveMeshDomains
A Control object.
control
A SolverControl object.
solverControl
A repository of BoundaryConditionState objects.
boundaryConditionStates
A repository of InteractionState objects.
interactionStates
A repository of LoadState objects.
loadStates
A repository of LoadCase objects.
loadCases
A repository of PredeﬁnedFieldState objects.
predeﬁnedFieldStates
Corresponding analysis keywords
•
*VISCO
•
*STEP
Abaqus Scripting Reference Guide
2492
ViscoStep object

Step commands (miscellaneous)
Miscellaneous Step commands are used for conﬁguring controls, damping, and frequency tables.
In this section:
•
CompositeDamping object
•
CompositeDampingComponent object
•
Control object
•
DirectDamping object
•
DirectDampingByFrequency object
•
DirectDampingByFrequencyComponent object
•
DirectDampingComponent object
•
EmagTimeHarmonicFrequency object
•
MassScaling object
•
RandomResponseFrequency object
•
RayleighDamping object
•
RayleighDampingByFrequency object
•
RayleighDampingByFrequencyComponent object
•
RayleighDampingComponent object
•
ResponseSpectrumComponent object
•
SolverControl object
•
SteadyStateDirectFrequency object
•
SteadyStateModalFrequency object
•
SteadyStateSubspaceFrequency object
•
StructuralDamping object
•
StructuralDampingByFrequency object
•
StructuralDampingByFrequencyComponent object
•
StructuralDampingComponent object
•
SubstructureGenerateFrequency object
•
SubstructureGenerateModes object
2493

CompositeDamping object
A CompositeDamping object contains composite modal damping parameters.
Access
import step
mdb.models[name].steps[name].compositeDamping
Members
The CompositeDamping object can have the following member:
A CompositeDampingComponentArray object.
components
Abaqus Scripting Reference Guide
2494
CompositeDamping object

CompositeDampingComponent object
A CompositeDampingComponent object is used to deﬁne composite damping over a range of modes.
Access
import step
mdb.models[name].steps[name].compositeDamping.components[i]
Members
The CompositeDampingComponent object has the following members:
An Int specifying the mode number of the lowest mode of a range.
start
An Int specifying the mode number of the highest mode of a range.
end
2495
CompositeDampingComponent object

Control object
The Control object is used to provide additional optional general solution controls.
Access
import step
mdb.models[name].steps[name].control
setValues(...)
This method modiﬁes the Control object.
Required arguments
None.
Optional arguments
A Boolean specifying whether to allow all control values to propagate from a previous
step. Setting this argument to ON automatically sets resetDefaultValues to OFF. The
default value is ON.
allowPropagation
A Boolean specifying whether to use all default control values. Setting this argument
to ON automatically sets allowPropagation to OFF. The default value is OFF.
resetDefaultValues
A Boolean specifying whether to set timeIncrementation values that will usually
improve efﬁciency for analyses with severely discontinuous behavior. The default
value is OFF.
discontinuous
The SymbolicConstant DEFAULT or a sequence of Floats specifying tolerances on
constraint equations. If a speciﬁed sequence contains a value of 0, that item in the
constraints
sequence will be set to its system-deﬁned value. The value can also be the
SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying line search
control parameters. If a speciﬁed sequence contains a value of 0, that item in the
lineSearch
sequence will be set to its system-deﬁned value. The value can also be the
SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying time
incrementation control parameters. If a speciﬁed sequence contains a value of 0, that
timeIncrementation
item in the sequence will be set to its system-deﬁned value. The value can also be the
SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying direct cyclic
control parameters. If a speciﬁed sequence contains a value of 0, that item in the
directCyclic
sequence will be set to its system-deﬁned value. The value can also be the
SymbolicConstant DEFAULT. The default value is DEFAULT.
Abaqus Scripting Reference Guide
2496
Control object

The SymbolicConstant DEFAULT or a sequence of Floats specifying mass
concentration ﬁeld equilibrium equation parameters. If a speciﬁed sequence contains
concentrationField
a value of 0, that item in the sequence will be set to its system-deﬁned value. The
value can also be the SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying displacement
ﬁeld and warping degree of freedom ﬁeld equilibrium equation parameters. If a
displacementField
speciﬁed sequence contains a value of 0, that item in the sequence will be set to its
system-deﬁned value. The value can also be the SymbolicConstant DEFAULT. The
default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying electrical
potential ﬁeld equilibrium equation parameters. If a speciﬁed sequence contains a
electricalPotentialField
value of 0, that item in the sequence will be set to its system-deﬁned value. The value
can also be the SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying parameters for
all applicable ﬁeld equilibrium equations. This argument overwrites all other ﬁeld
globalField
equilibrium equation control values. If a speciﬁed sequence contains a value of 0,
that item in the sequence will be set to its system-deﬁned value. The value can also
be the SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying hydrostatic
ﬂuid element volume constraint parameters. If a speciﬁed sequence contains a value
hydrostaticFluidPressureField
of 0, that item in the sequence will be set to its system-deﬁned value. The value can
also be the SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying pore liquid
volumetric continuity equilibrium equation parameters. If a speciﬁed sequence contains
poreFluidPressureField
a value of 0, that item in the sequence will be set to its system-deﬁned value. The
value can also be the SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying rotation ﬁeld
equilibrium equation parameters. If a speciﬁed sequence contains a value of 0, that
rotationField
item in the sequence will be set to its system-deﬁned value. The value can also be the
SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a sequence of Floats specifying temperature
ﬁeld equilibrium equation parameters. If a speciﬁed sequence contains a value of 0,
temperatureField
that item in the sequence will be set to its system-deﬁned value. The value can also
be the SymbolicConstant DEFAULT. The default value is DEFAULT.
The SymbolicConstant DEFAULT or a Float specifying linear scaling parameter for
a VCCT debonding analysis. If a speciﬁed value is 0, it will be set to its system-deﬁned
vcctLinearScaling
value. The value can also be the SymbolicConstant DEFAULT. The default value is
DEFAULT.
Return value
None.
2497
Abaqus Scripting Reference Guide
Control object

Exceptions
RangeError.
Members
The Control object has members with the same names and descriptions as the arguments to the setValues  method.
Abaqus Scripting Reference Guide
2498
Control object

DirectDamping object
A DirectDamping object contains direct modal damping parameters.
Access
import step
mdb.models[name].steps[name].directDamping
Members
The DirectDamping object can have the following member:
A DirectDampingComponentArray object.
components
2499
DirectDamping object

DirectDampingByFrequency object
A DirectDampingByFrequency object contains direct damping parameters.
Access
import step
mdb.models[name].steps[name].directDampingByFrequency
Members
The DirectDampingByFrequency object can have the following member:
A DirectDampingByFrequencyComponentArray object.
components
Abaqus Scripting Reference Guide
2500
DirectDampingByFrequency object

DirectDampingByFrequencyComponent object
A DirectDampingByFrequencyComponent object is used to deﬁne direct damping over a range of frequencies.
Access
import step
mdb.models[name].steps[name].directDampingByFrequency.components[i]
Members
The DirectDampingByFrequencyComponent object has the following members:
A Float specifying the frequency value in cycles/time.
frequency
A Float specifying the fraction of critical damping.
fraction
2501
DirectDampingByFrequencyComponent object

DirectDampingComponent object
A DirectDampingComponent object is used to deﬁne direct damping over a range of modes.
Access
import step
mdb.models[name].steps[name].directDamping.components[i]
Members
The DirectDampingComponent object has the following members:
An Int specifying the mode number of the lowest mode of a range.
start
An Int specifying the mode number of the highest mode of a range.
end
A Float specifying the fraction of critical damping.
fraction
Abaqus Scripting Reference Guide
2502
DirectDampingComponent object

EmagTimeHarmonicFrequency object
A EmagTimeHarmonicFrequency is an object used to deﬁne frequency over range of modes.
Access
import step
mdb.models[name].steps[name].frequencyRange[i]
Members
The EmagTimeHarmonicFrequency object has the following members:
A Float specifying the lower limit of frequency range or a single frequency, in cycles/time.
lower
A Float specifying the upper limit of frequency range, in cycles/time.
upper
An Int specifying the number of points in the frequency range at which results should be
given.
nPoints
2503
EmagTimeHarmonicFrequency object

MassScaling object
A MassScaling object deﬁnes the region and controls that govern mass scaling.
Access
import step
mdb.models[name].steps[name].massScaling[i]
Members
The MassScaling object can have the following members:
A SymbolicConstant specifying the objective of the mass scaling deﬁnition. Possible values
are SEMI_AUTOMATIC, AUTOMATIC, and REINITIALIZE. The default value is
SEMI_AUTOMATIC.
objective
A SymbolicConstant specifying whether mass scaling should be performed at the beginning
of the step or throughout the step. Possible values are AT_BEGINNING and
THROUGHOUT_STEP.
occurs
A SymbolicConstant specifying the type of scaling. Possible values are UNIFORM,
BELOW_MIN, SET_EQUAL_DT, and ROLLING. The default value is BELOW_MIN.
type
A Float specifying a scaling factor.
factor
A Float specifying a target time increment.
dt
An Int specifying the frequency at which mass scaling calculations are performed.
frequency
An Int specifying the number of intervals at which mass scaling calculations are performed.
numberInterval
A Float specifying the estimated average velocity of the workpiece in the rolling direction
at steady-state conditions.
feedRate
A Float specifying the average element length in the extruded direction.
extrudedLength
An Int specifying the number of nodes in the cross-section of the workpiece.
crossSection
A SymbolicConstant specifying the rolling direction. Possible values are GLOBAL_X,
GLOBAL_Y, GLOBAL_Z, and GLOBAL_NONE. The default value is GLOBAL_X.
direction
The SymbolicConstant MODEL or a Region object specifying where the mass scaling is
applied. The default value is MODEL.
region
Abaqus Scripting Reference Guide
2504
MassScaling object

RandomResponseFrequency object
A RandomResponseFrequency is an object used to deﬁne frequency over a range of modes.
Access
import step
mdb.models[name].steps[name].freq[i]
Members
The RandomResponseFrequency object has the following members:
A Float specifying the lower limit of the frequency range in cycles per time.
lower
A Float specifying the upper limit of the frequency range in cycles per time.
upper
An Int specifying the number of points between eigenfrequencies at which the response
should be calculated.
nCalcs
A Float specifying the bias parameter.
bias
2505
RandomResponseFrequency object

RayleighDamping object
A RayleighDamping object contains Rayleigh Damping parameters.
Access
import step
mdb.models[name].steps[name].rayleighDamping
Members
The RayleighDamping object can have the following member:
A RayleighDampingComponentArray object.
components
Abaqus Scripting Reference Guide
2506
RayleighDamping object

RayleighDampingByFrequency object
A RayleighDampingByFrequency object contains Rayleigh Damping parameters.
Access
import step
mdb.models[name].steps[name].rayleighDampingByFrequency
Members
The RayleighDampingByFrequency object can have the following member:
A RayleighDampingByFrequencyComponentArray object.
components
2507
RayleighDampingByFrequency object

RayleighDampingByFrequencyComponent object
A RayleighDampingByFrequencyComponent object is used to deﬁne Rayleigh damping over a range of frequencies.
Access
import step
mdb.models[name].steps[name].rayleighDampingByFrequency.components[i]
Members
The RayleighDampingByFrequencyComponent object has the following members:
A Float specifying the frequency value in cycles/time.
frequency
A Float specifying the mass proportional damping, 
.
alpha
A Float specifying the stiffness proportional damping, 
.
beta
Abaqus Scripting Reference Guide
2508
RayleighDampingByFrequencyComponent object

RayleighDampingComponent object
A RayleighDampingComponent object is used to deﬁne Rayleigh damping over a range of modes.
Access
import step
mdb.models[name].steps[name].rayleighDamping.components[i]
Members
The RayleighDampingComponent object has the following members:
An Int specifying the mode number of the lowest mode of a range.
start
An Int specifying the mode number of the highest mode of a range.
end
A Float specifying the mass proportional damping, 
.
alpha
A Float specifying the stiffness proportional damping, 
.
beta
2509
RayleighDampingComponent object

ResponseSpectrumComponent object
A ResponseSpectrumComponent is an element of the ResponseSpectrumComponentArray.
Access
import step
mdb.models[name].steps[name].components[i]
Members
The ResponseSpectrumComponent object has the following members:
A Float specifying the X-direction cosine.
x
A Float specifying the Y-direction cosine.
y
A Float specifying the Z-direction cosine.
z
A Float specifying the scale factor.
scale
A Float specifying the time duration of the dynamic event, from which this spectrum was
created.
timeDuration
Note:
This parameter is ignored unless used with the DSC modal summation rule.
A String specifying the name of the response spectrum speciﬁed with the keyword
*SPECTRUM.
respSpectrum
Abaqus Scripting Reference Guide
2510
ResponseSpectrumComponent object

SolverControl object
The SolverControl object is used to provide additional optional solver controls.
Access
import step
mdb.models[name].steps[name].solverControl
setValues(...)
This method modiﬁes the SolverControl object.
Required arguments
None.
Optional arguments
A Boolean specifying whether to allow all solver control values to propagate from a
previous step. Setting this argument to ON automatically sets resetDefaultValues to OFF.
The default value is ON.
allowPropagation
A Boolean specifying whether to use all default solver control values. Setting this argument
to ON automatically sets allowPropagationto OFF. The default value is OFF.
resetDefaultValues
The SymbolicConstant DEFAULT or a Float specifying the relative tolerance for
convergence of the domain decomposition iterative solver. The default value is DEFAULT.
relativeTolerance
The SymbolicConstant DEFAULT or an Int specifying the maximum number of linear
solver iterations. The default value is DEFAULT.
maxIterations
The SymbolicConstant DEFAULT or an Int specifying the incomplete LU factorization
ﬁll-in level (for geostatic and soil analysis only). The default value is DEFAULT.
ﬁllInLevel
Return value
None.
Exceptions
RangeError.
Members
The SolverControl object has members with the same names and descriptions as the arguments to the setValues
method.
2511
SolverControl object

SteadyStateDirectFrequency object
A SteadyStateDirectFrequency is an object used to deﬁne frequency over range of modes.
Access
import step
mdb.models[name].steps[name].frequencyRange[i]
Members
The SteadyStateDirectFrequency object has the following members:
A Float specifying the lower limit of frequency range or a single frequency, in cycles/time.
lower
A Float specifying the upper limit of frequency range, in cycles/time.
upper
An Int specifying the number of points in the frequency range at which results should be given.
nPoints
A Float specifying the Bias parameter. When results are requested at four or more frequency
points, Abaqus biases the results toward the ends of the intervals to obtain better resolution.
The default value is 3.0.
bias
Abaqus Scripting Reference Guide
2512
SteadyStateDirectFrequency object

SteadyStateModalFrequency object
A SteadyStateModalFrequency is an object used to deﬁne frequency over a range of modes.
Access
import step
mdb.models[name].steps[name].frequencyRange[i]
Members
The SteadyStateModalFrequency object has the following members:
A Float specifying the lower limit of frequency range or a single frequency, in cycles/time.
lower
A Float specifying the upper limit of frequency range, in cycles/time.
upper
An Int specifying the number of points in the frequency range at which results should be given.
nPoints
A Float specifying the bias parameter. When results are requested at four or more frequency
points, Abaqus biases the results toward the ends of the intervals to obtain better resolution.
The default value is 3.0.
bias
2513
SteadyStateModalFrequency object

SteadyStateSubspaceFrequency object
A SteadyStateSubspaceFrequency is an object used to deﬁne frequency over range of modes.
Access
import step
mdb.models[name].steps[name].frequencyRange[i]
Members
The SteadyStateSubspaceFrequency object has the following members:
A Float specifying the lower limit of frequency range or a single frequency, in cycles/time.
lower
A Float specifying the upper limit of frequency range, in cycles/time.
upper
An Int specifying the number of points in the frequency range at which results should be given.
nPoints
A Float specifying the Bias parameter. When results are requested at four or more frequency
points, Abaqus biases the results toward the ends of the intervals to obtain better resolution.
The default value is 3.0.
bias
Abaqus Scripting Reference Guide
2514
SteadyStateSubspaceFrequency object

StructuralDamping object
A StructuralDamping object contains structural damping parameters.
Access
import step
mdb.models[name].steps[name].structuralDamping
Members
The StructuralDamping object can have the following member:
A StructuralDampingComponentArray object.
components
2515
StructuralDamping object

StructuralDampingByFrequency object
A StructuralDampingByFrequency object contains structural damping parameters.
Access
import step
mdb.models[name].steps[name].structuralDampingByFrequency
Members
The StructuralDampingByFrequency object can have the following member:
A StructuralDampingByFrequencyComponentArray object.
components
Abaqus Scripting Reference Guide
2516
StructuralDampingByFrequency object

StructuralDampingByFrequencyComponent object
A StructuralDampingByFrequencyComponent object is used to deﬁne structural damping over a range of frequencies.
Access
import step
mdb.models[name].steps[name].structuralDampingByFrequency\
.components[i]
Members
The StructuralDampingByFrequencyComponent object has the following members:
A Float specifying the frequency value in cycles/time.
frequency
A Float specifying the damping factor, .
factor
2517
StructuralDampingByFrequencyComponent object

StructuralDampingComponent object
A StructuralDampingComponent object is used to deﬁne structural damping over a range of modes.
Access
import step
mdb.models[name].steps[name].structuralDamping.components[i]
Members
The StructuralDampingComponent object has the following members:
An Int specifying the mode number of the lowest mode of a range.
start
An Int specifying the mode number of the highest mode of a range.
end
A Float specifying the damping factor, .
factor
Abaqus Scripting Reference Guide
2518
StructuralDampingComponent object

SubstructureGenerateFrequency object
A SubstructureGenerateFrequency object is used to deﬁne the modes to be used in a modal dynamic analysis. These
modes are selected from the speciﬁed frequency range including the frequency boundary.
Access
import step
mdb.models[name].steps[name].frequencyRange[i]
Members
The SubstructureGenerateFrequency object has the following members:
A Float specifying the lower limit of the frequency range, in cycles/time.
lower
A Float specifying the upper limit of the frequency range, in cycles/time.
upper
2519
SubstructureGenerateFrequency object

SubstructureGenerateModes object
A SubstructureGenerateModes object is used to deﬁne the modes to be used in a modal dynamic analysis.
Access
import step
mdb.models[name].steps[name].modeRange[i]
Members
The SubstructureGenerateModes object has the following members:
An Int specifying the mode number of the lowest mode of a range.
start
An Int specifying the mode number of the highest mode of a range.
end
An Int specifying the increment used to deﬁne the intermediate mode numbers beginning
from the lowest mode to the highest mode.
increment
Abaqus Scripting Reference Guide
2520
SubstructureGenerateModes object

Step commands (output)
Step output commands are used for conﬁguring output requests, integrated output sections, diagnostic printing,
monitoring, and restart.
In this section:
•
DiagnosticPrint object
•
FieldOutputRequest object
•
FieldOutputRequestState object
•
HistoryOutputRequest object
•
HistoryOutputRequestState object
•
IntegratedOutputSection object
•
Monitor object
•
Restart object
•
TimePoint object
2521

DiagnosticPrint object
The DiagnosticPrint object is used to request detailed diagnostic output or to disable speciﬁc diagnostic checks.
Access
import step
mdb.models[name].steps[name].diagnosticPrint
DiagnosticPrint(...)
This method creates a DiagnosticPrint object.
Path
mdb.models[name].steps[name].DiagnosticPrint
Required arguments
None.
Optional arguments
A Boolean specifying a request for a column containing the total kinetic energy. This argument
is valid only for an Abaqus/Explicit analysis. The default value is ON.
allke
A Boolean specifying a request for a column containing the element that has the smallest stable
time increment and a column listing the value. This argument is valid only for an Abaqus/Explicit
analysis. The default value is ON.
criticalElement
A Boolean specifying a request for a column containing the percent change in total mass of the
model as a result of mass scaling. This argument is valid only for an Abaqus/Explicit analysis.
The default value is OFF unless mass scaling is present in the model.
dmass
A Boolean specifying a request for a column containing the energy balance of the model. This
argument is valid only for an Abaqus/Explicit analysis. The default value is OFF.
etotal
A Boolean specifying a request for detailed output of points that are contacting or separating in
interface and gap problems. This argument is valid only for an Abaqus/Standard analysis. The
default value is ON.
contact
A Boolean specifying a request for detailed output of which elements are being removed or
reactivated in the step. This argument is valid only for an Abaqus/Standard analysis. The default
value is OFF.
modelChange
A Boolean specifying a request for detailed output of element and integration point numbers for
which the plasticity algorithms have failed to converge in the material routines. This argument
is valid only for an Abaqus/Standard analysis. The default value is OFF.
plasticity
A Boolean specifying a request for output of equilibrium residuals during the equilibrium iterations.
This argument is valid only for an Abaqus/Standard analysis. The default value is ON.
residual
Abaqus Scripting Reference Guide
2522
DiagnosticPrint object

An Int specifying the frequency of output, in increments. The default value is 1.
frequency
A Boolean specifying a request for information regarding the actual number of equations and the
wavefront in each iteration. This argument is valid only for an Abaqus/Standard analysis. The
default value is ON.
solve
A Boolean specifying a request for a column containing the total mass of the model as a result
of mass scaling. This argument is valid only for an Abaqus/Explicit analysis. The default value
is OFF.
mass
Return value
A DiagnosticPrint object.
Exceptions
None.
setValues(...)
This method modiﬁes the DiagnosticPrint object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DiagnosticPrint  method.
Return value
None.
Exceptions
None.
Members
The DiagnosticPrint object has members with the same names and descriptions as the arguments to the DiagnosticPrint
method.
Corresponding analysis keywords
•
*DIAGNOSTICS
2523
Abaqus Scripting Reference Guide
DiagnosticPrint object

FieldOutputRequest object
The FieldOutputRequest object deﬁnes a ﬁeld output request.
Access
import step
mdb.models[name].fieldOutputRequests[name]
FieldOutputRequest(...)
This method creates a FieldOutputRequest object.
Path
mdb.models[name].FieldOutputRequest
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the object is created.
createStepName
Optional arguments
The SymbolicConstant MODEL or a Region object specifying the region from which
output is requested. The SymbolicConstant MODEL represents the whole model. The
default value is MODEL.
region
A sequence of Strings specifying output request variable or component names, or the
SymbolicConstant PRESELECT or ALL. PRESELECT represents all default output
variables
variables for the given step. ALL represents all valid output variables. The default value
is PRESELECT.
The SymbolicConstant LAST_INCREMENT or an Int specifying the output frequency in
increments. The default value is 1.
frequency
The SymbolicConstant ALL or a sequence of Ints specifying a list of eigenmodes for which
output is desired. The default value is ALL.
modes
The SymbolicConstant EVERY_TIME_INCREMENT or a Float specifying the time
interval at which the output states are to be written. The default value is
EVERY_TIME_INCREMENT.
timeInterval
An Int specifying the number of intervals during the step at which output database states
are to be written. The default value is 20.
numIntervals
A Boolean specifying when to write results to the output database. OFF indicates that
output is written immediately after the time dictated by the speciﬁed number of intervals.
timeMarks
Abaqus Scripting Reference Guide
2524
FieldOutputRequest object

ON indicates that output is written at the exact times dictated by the speciﬁed number of
intervals. The default value is OFF.
A String specifying a bolt load from which output is requested.
boltLoad
The SymbolicConstant DEFAULT or a sequence of Ints specifying the section points for
which output requested. The default is DEFAULT.
sectionPoints
None or a sequence of Strings specifying the interaction names. The default value is None.
interactions
The sequence can contain only one String.
A SymbolicConstant specifying whether output is requested for rebar. Possible values are
EXCLUDE, INCLUDE, and ONLY. The default value is EXCLUDE.
rebar
The SymbolicConstant ANTIALIASING or a String specifying the name of an output
ﬁlter object. The default value is None.
ﬁlter
A Boolean specifying whether to output directions of the local material coordinate system.
The default value is ON.
directions
A String specifying the fastener name. The default value is an empty string.
fasteners
A String specifying the assembled fastener name. The default value is an empty string.
assembledFastener
A String specifying the set name from the model referenced by the assembled fastener,
assembledFastener. The default value is an empty string.
assembledFastenerSet
A Boolean specifying whether the output domain is restricted to the exterior of the model.
This argument is only valid if region=MODEL. The default value is OFF.
exteriorOnly
A List of Composite Layer Names.
layupNames
A Symbolic constant specifying the method used to indicate the output locations for
composite layups. Possible values are ALL_LOCATIONS, SPECIFIED and, TYPED_IN.
The default value is SPECIFIED.
layupLocationMethod
A Boolean specifying whether to output at the ply top section point. The default value is
False.
outputAtPlyTop
A Boolean specifying whether to output at the ply midsection point. The default value is
True.
outputAtPlyMid
A Boolean specifying whether to output at the ply bottom section point. The default value
is False.
outputAtPlyBottom
A SymbolicConstant specifying the position on an element where output needs to be
written. Possible values are INTEGRATION_POINTS, AVERAGED_AT_NODES,
CENTROIDAL, and NODES. The default value is INTEGRATION_POINTS.
position
2525
Abaqus Scripting Reference Guide
FieldOutputRequest object

Return value
A FieldOutputRequest object.
Exceptions
None.
deactivate(...)
This method deactivates the ﬁeld output request in the speciﬁed step and all its subsequent steps.
Required arguments
A String specifying the name of the step in which the ﬁeld output request is deactivated.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
move(...)
This method moves the ﬁeld output request state object from one step to a different step.
Required arguments
A String specifying the name of the step from which the ﬁeld output request state
is moved.
fromStepName
A String specifying the name of the step to which the ﬁeld output request state is
moved.
toStepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
Abaqus Scripting Reference Guide
2526
FieldOutputRequest object

reset(...)
This method resets the ﬁeld output request state of the speciﬁed step to the state of the previous step.
Required arguments
A String specifying the name of the step in which the ﬁeld output request state is reset.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
resume()
This method resumes the ﬁeld output request that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
TextError.
suppress()
This method suppresses the ﬁeld output request.
Arguments
None.
Return value
None.
Exceptions
TextError.
setValues(...)
This method modiﬁes the data for an existing FieldOutputRequest object in the step where it is created.
2527
Abaqus Scripting Reference Guide
FieldOutputRequest object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the FieldOutputRequest method, except for
the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing FieldOutputRequest object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the ﬁeld output request is modiﬁed.
stepName
Optional arguments
A sequence of Strings specifying output request variable or component names, or the
SymbolicConstant PRESELECT or ALL. PRESELECT represents all default output variables
for the given step. ALL represents all valid output variables.
variables
The SymbolicConstant LAST_INCREMENT or an Int specifying the output frequency in
increments. The default value is 1.
frequency
The SymbolicConstant ALL or a sequence of Ints specifying a list of eigenmodes for which
output is desired. The default value is ALL.
modes
The SymbolicConstant EVERY_TIME_INCREMENT or a Float specifying the time interval
at which the output states are to be written. The default value is
EVERY_TIME_INCREMENT.
timeInterval
An Int equal to the number of intervals during the step at which output database states are
to be written. The default value is 20.
numIntervals
A String specifying the name of a time point object. The default value is equal to the number
of intervals during the step at which output database states are to be written. The default
value is None.
timePoint
A Boolean specifying when to write results to the output database. The default value is OFF.
timeMarks
Abaqus Scripting Reference Guide
2528
FieldOutputRequest object

Return value
None.
Exceptions
None.
Members
The FieldOutputRequest object can have the following members:
A String specifying a bolt load from which output is requested.
boltLoad
The SymbolicConstant MODEL or a Region object specifying the region from which output
is requested. The SymbolicConstant MODEL represents the whole model. The default value
is MODEL.
region
None or a tuple of Strings specifying the interaction names. The default value is None.
interactions
The sequence can contain only one String.
Corresponding analysis keywords
•
*CONTACT OUTPUT
•
*ELEMENT OUTPUT
•
*ENERGY OUTPUT
•
*INCREMENTATION OUTPUT
•
*MODAL OUTPUT
•
*NODE OUTPUT
•
*OUTPUT
•
*RADIATION OUTPUT
2529
Abaqus Scripting Reference Guide
FieldOutputRequest object

FieldOutputRequestState object
The FieldOutputRequestState object stores the propagating data of a ﬁeld output request current in a step. One instance
of this object is created internally by the FieldOutputRequest object for each step. The instance is also deleted internally
by the FieldOutputRequest object.
The FieldOutputRequestState object has no constructor or methods.
Access
import step
mdb.models[name].steps[name].fieldOutputRequestState[name]
Members
The FieldOutputRequestState object can have the following members:
A SymbolicConstant specifying the propagation state of the ﬁeld output request variables.
Possible values are UNSET, SET, and UNCHANGED.
variablesState
The SymbolicConstant LAST_INCREMENT or an Int specifying the output frequency in
increments. The default value is 1.
frequency
A SymbolicConstant specifying the propagation state of the ﬁeld output request frequency.
Possible values are UNSET, SET, and UNCHANGED.
frequencyState
A SymbolicConstant specifying the propagation state of the ﬁeld output request modes.
Possible values are UNSET, SET, and UNCHANGED.
modesState
The SymbolicConstant EVERY_TIME_INCREMENT or a Float specifying the time interval
at which the output states are to be written. The default value is
EVERY_TIME_INCREMENT.
timeInterval
A SymbolicConstant specifying the propagation state of the ﬁeld output request time interval.
Possible values are UNSET, SET, and UNCHANGED.
timeIntervalState
An Int specifying the number of intervals during the step at which output database states
are to be written. The default value is 20.
numIntervals
A SymbolicConstant specifying the propagation state of the ﬁeld output request. Possible
values are UNSET, SET, and UNCHANGED.
numIntervalsState
A Boolean specifying when to write results to the output database. The default value is
OFF.
timeMarks
A SymbolicConstant specifying the propagation state of the ﬁeld output request. Possible
values are UNSET, SET, and UNCHANGED.
timeMarksState
A SymbolicConstant specifying the propagation state of the ﬁeld output request. Possible
values are UNSET, SET, and UNCHANGED.
timePointState
Abaqus Scripting Reference Guide
2530
FieldOutputRequestState object

A SymbolicConstant specifying the propagation state of the FieldOutputRequestState object.
Possible values are NOT_YET_ACTIVE, CREATED, PROPAGATED, MODIFIED,
status
DEACTIVATED, NO_LONGER_ACTIVE, TYPE_NOT_APPLICABLE, and
INSTANCE_NOT_APPLICABLE.
A tuple of Strings specifying output request variable or component names, or the
SymbolicConstant PRESELECT or ALL. PRESELECT represents all default output variables
for the given step. ALL represents all valid output variables.
variables
The SymbolicConstant ALL or a tuple of Ints specifying a list of eigenmodes for which
output is desired. The default value is ALL.
modes
A String specifying the name of a time point object used to determine which output database
states are to be written. The default value is an empty string.
timePoint
A String specifying a read-only SymbolicConstant describing which type of frequency of
output is used. Possible values areFREQUENCY, NUMBER_INTERVALS,
frequencyType
TIME_INTERVAL, TIME_POINT and MODES. The default value depends on the
procedure. The default value is an empty string.
2531
Abaqus Scripting Reference Guide
FieldOutputRequestState object

HistoryOutputRequest object
The HistoryOutputRequest object deﬁnes a history output request.
Access
import step
mdb.models[name].historyOutputRequests[name]
HistoryOutputRequest(...)
This method creates a HistoryOutputRequest object.
Path
mdb.models[name].HistoryOutputRequest
Required arguments
A String specifying the repository key.
name
A String specifying the name of the step in which the object is created.
createStepName
Optional arguments
The SymbolicConstant MODEL or a Region object specifying the region from which
output is requested. The SymbolicConstant MODEL represents the whole model. The
default value is MODEL.
region
If the region is a surface region, the surface must lie within the general contact surface
domain.
A sequence of Strings specifying output request variable or component names, or the
SymbolicConstant PRESELECT or ALL. PRESELECT represents all default output
variables
variables for the given step. ALL represents all valid output variables. The default value
is PRESELECT.
The SymbolicConstant LAST_INCREMENT or an Int specifying the output frequency
in increments. The default value is 1.
frequency
The SymbolicConstant ALL or a sequence of Ints specifying a list of eigenmodes for
which output is desired. The default value is ALL.
modes
The SymbolicConstant EVERY_TIME_INCREMENT or a Float specifying the time
interval at which the output states are to be written. The default value is
EVERY_TIME_INCREMENT.
timeInterval
An Int specifying the number of intervals during the step at which output database states
are to be written. The default value is 20.
numIntervals
Abaqus Scripting Reference Guide
2532
HistoryOutputRequest object

A String specifying a bolt load from which output is requested. The default value is an
empty string.
boltLoad
The SymbolicConstant DEFAULT or a sequence of Ints specifying the section points for
which output is requested. The default value is DEFAULT.
sectionPoints
A String specifying the name of the step. The default value is an empty string.
stepName
None or a sequence of Strings specifying the interaction names. The default value is
None.
interactions
The sequence can contain only one String.
A String specifying the contour integral name. The default value is None.
contourIntegral
An Int specifying the number of contour integrals to output for the contour integral object.
The default value is 0.
numberOfContours
A String specifying the name of the stress initialization step. The default value is None.
stressInitializationStep
A SymbolicConstant specifying the type of contour integral. Possible values are
J_INTEGRAL, C_INTEGRAL, T_STRESS, and K_FACTORS. The default value is
J_INTEGRAL.
contourType
A SymbolicConstant specifying the stress intensity factor direction. Possible values are
MTS, MERR, and K110. The kFactorDirection argument is valid only if
contourType=K_FACTORS. The default value is MTS.
kFactorDirection
A SymbolicConstant specifying whether output is requested for rebar. Possible values
are EXCLUDE, INCLUDE, and ONLY. The default value is EXCLUDE.
rebar
A String specifying the integrated output section. The default value is an empty string.
integratedOutputSection
A sequence of Strings specifying the springs/dashpots names. The default value is None.
The sequence can contain only one String.
springs
The SymbolicConstant ANTIALIASING or a String specifying the name of an output
ﬁlter object. The default value is None.
ﬁlter
A String specifying the fastener name. The default value is an empty string.
fasteners
A String specifying the assembled fastener name. The default value is an empty string.
assembledFastener
A String specifying the set name from the model referenced by the assembled fastener,
assembledFastener. The default value is an empty string.
assembledFastenerSet
A Boolean specifying whether to associate the output request with a sensor deﬁnition.
The default value is OFF.
sensor
2533
Abaqus Scripting Reference Guide
HistoryOutputRequest object

A Boolean specifying whether to output vector-valued nodal variables in the global
directions. The default value is True.
useGlobal
Return value
A HistoryOutputRequest object.
Exceptions
None.
deactivate(...)
This method deactivates the history output request in the speciﬁed step and all subsequent steps.
Required arguments
A String specifying the name of the step in which the history output request is
deactivated.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
move(...)
This method moves the history output request state object from one step to a different step.
Required arguments
A String specifying the name of the step from which the history output request state
is moved.
fromStepName
A String specifying the name of the step to which the history output request state is
moved.
toStepName
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
2534
HistoryOutputRequest object

Exceptions
TextError.
reset(...)
This method resets the history output request state of the speciﬁed step to the state of the previous step.
Required arguments
A String specifying the name of the step in which the history output request state is
reset.
stepName
Optional arguments
None.
Return value
None.
Exceptions
TextError.
resume()
This method resumes the history output request that was previously suppressed.
Arguments
None.
Return value
None.
Exceptions
TextError.
suppress()
This method suppresses the history output request.
Arguments
None.
Return value
None.
Exceptions
TextError.
2535
Abaqus Scripting Reference Guide
HistoryOutputRequest object

setValues(...)
This method modiﬁes the data for an existing HistoryOutputRequest object in the step where it is created.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the HistoryOutputRequest  method, except
for the name and createStepName arguments.
Return value
None.
Exceptions
None.
setValuesInStep(...)
This method modiﬁes the propagating data for an existing HistoryOutputRequest object in the speciﬁed step.
Required arguments
A String specifying the name of the step in which the history output request is modiﬁed.
stepName
Optional arguments
A sequence of Strings specifying output request variable or component names or the
SymbolicConstant PRESELECT or ALL. PRESELECT represents all default output variables
for the given step. ALL represents all valid output variables.
variables
The SymbolicConstant LAST_INCREMENT or an Int specifying the output frequency in
increments. The default value is 1.
frequency
The SymbolicConstant ALL or a sequence of Ints specifying a list of eigenmodes for which
output is desired. The default value is ALL.
modes
The SymbolicConstant EVERY_TIME_INCREMENT or a Float specifying the time interval
at which the output states are to be written. The default value is EVERY_TIME_INCREMENT.
timeInterval
An Int specifying the number of intervals during the step at which output database states are
to be written. The default value is 20.
numIntervals
A String specifying the name of a time point object. The default value is equal to the number
of intervals during the step at which output database states are to be written. The default value
is None.
timePoints
Abaqus Scripting Reference Guide
2536
HistoryOutputRequest object

Return value
None.
Exceptions
None.
Members
The HistoryOutputRequest object can have the following members:
A String specifying a bolt load from which output is requested. The default value is an empty
string.
boltLoad
The SymbolicConstant MODEL or a Region object specifying the region from which output
is requested. The SymbolicConstant MODEL represents the whole model. The default value
is MODEL.
region
If the region is a surface region, the surface must lie within the general contact surface domain.
The SymbolicConstant DEFAULT or a tuple of Ints specifying the section points for which
output is requested. The default value is DEFAULT.
sectionPoints
None or a tuple of Strings specifying the interaction names. The default value is None.
interactions
The sequence can contain only one String.
Corresponding analysis keywords
•
*CONTACT OUTPUT
•
*ELEMENT OUTPUT
•
*ENERGY OUTPUT
•
*INCREMENTATION OUTPUT
•
*MODAL OUTPUT
•
*NODE OUTPUT
•
*OUTPUT
•
*RADIATION OUTPUT
2537
Abaqus Scripting Reference Guide
HistoryOutputRequest object

HistoryOutputRequestState object
The HistoryOutputRequestState object stores the propagating data of a History output request current in a step. One
instance of this object is created internally by the HistoryOutputRequest object for each step. The instance is also
deleted internally by the HistoryOutputRequest object.
The HistoryOutputRequestState object has no constructor or methods.
Access
import step
mdb.models[name].steps[name].historyOutputRequestState[name]
Members
The HistoryOutputRequestState object can have the following members:
A SymbolicConstant specifying the propagation state of the history output request variables.
Possible values are UNSET, SET, and UNCHANGED.
variablesState
The SymbolicConstant LAST_INCREMENT or an Int specifying the output frequency in
increments. The default value is 1.
frequency
A SymbolicConstant specifying the propagation state of the history output request frequency.
Possible values are UNSET, SET, and UNCHANGED.
frequencyState
A SymbolicConstant specifying the propagation state of the history output request modes.
Possible values are UNSET, SET, and UNCHANGED.
modesState
The SymbolicConstant EVERY_TIME_INCREMENT or a Float specifying the time interval
at which the output states are to be written. The default value is
EVERY_TIME_INCREMENT.
timeInterval
A SymbolicConstant specifying the propagation state of the history output request time
interval. Possible values are UNSET, SET, and UNCHANGED.
timeIntervalState
An Int specifying the number of intervals during the step at which output database states are
to be written. The default value is 20.
numIntervals
A SymbolicConstant specifying the propagation state of the history output request. Possible
values are UNSET, SET, and UNCHANGED.
timePointState
A SymbolicConstant specifying the propagation state of the history output request. Possible
values are UNSET, SET, and UNCHANGED.
numIntervalsState
A SymbolicConstant specifying the propagation state of the HistoryOutputRequestState
object. Possible values are NOT_YET_ACTIVE, CREATED, PROPAGATED, MODIFIED,
status
DEACTIVATED, NO_LONGER_ACTIVE, TYPE_NOT_APPLICABLE, and
INSTANCE_NOT_APPLICABLE.
Abaqus Scripting Reference Guide
2538
HistoryOutputRequestState object

A tuple of Strings specifying output request variable or component names, or the
SymbolicConstant PRESELECT or ALL. PRESELECT represents all default output variables
for the given step. ALL represents all valid output variables.
variables
The SymbolicConstant ALL or a tuple of Ints specifying a list of eigenmodes for which
output is desired. The default value is ALL.
modes
A String specifying the name of a time point object used to determine at which points in the
time period data is written to the output database. The default value is an empty string.
timePoint
A String specifying a read-only SymbolicConstant describing which type of frequency of
output is used. Possible values areFREQUENCY, NUMBER_INTERVALS,
frequencyType
TIME_INTERVAL, TIME_POINT and MODES. The default value depends on the procedure.
The default value is an empty string.
2539
Abaqus Scripting Reference Guide
HistoryOutputRequestState object

IntegratedOutputSection object
The IntegratedOutputSection object speciﬁes parameters used for integrated output.
Access
import step
mdb.models[name].integratedOutputSections[name]
IntegratedOutputSection(...)
This method creates an IntegratedOutputSection object.
Path
mdb.models[name].IntegratedOutputSection
Required arguments
A String specifying the repository key.
name
Optional arguments
A Region object specifying the surface over which the output is based.
surface
None or a Region object specifying the anchor point about which the integrated moment over
the output region is computed or the SymbolicConstant None representing the global origin.
The default value is None.
refPoint
A Boolean specifying that the refPoint be adjusted so that it coincides with the center of the
output region in the initial conﬁguration. This argument is valid only when you include the
refPoint argument. The default value is OFF.
refPointAtCenter
A SymbolicConstant specifying how to relate the motion of refPoint to the average motion of
the output region. A value of INDEPENDENT will allow the refPoint to move independent of
refPointMotion
the output region. A value of AVERAGE_TRANSLATION will set the displacement of the
refPoint equal to the average translation of the output region. A value of AVERAGE will set
the displacement and rotation of the refPoint equal to the average translation of the output region.
The default value is INDEPENDENT.
This argument is valid only when you include the refPoint argument.
None or a DatumCsys object specifying the local coordinate system used to express vector
output. If localCsys=None, the degrees of freedom are deﬁned in the global coordinate system.
The default value is None.
localCsys
A Boolean specifying that the coordinate system be projected onto the surface such that the
1–axis is normal to the surface. Projection onto a planar surface is such that the 1-axis is normal
projectOrientation
to the surface, and a projection onto a nonplanar surface is such that a least-squares ﬁt surface
will be used. The default value is OFF.
Abaqus Scripting Reference Guide
2540
IntegratedOutputSection object

Return value
An IntegratedOutputSection object.
Exceptions
None.
setValues(...)
This method modiﬁes the IntegratedOutputSection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the IntegratedOutputSection  method, except
for the name argument.
Return value
None.
Exceptions
None.
Members
The IntegratedOutputSection object has members with the same names and descriptions as the arguments to the
IntegratedOutputSection  method.
2541
Abaqus Scripting Reference Guide
IntegratedOutputSection object

Monitor object
The Monitor object deﬁnes a degree of freedom to monitor.
Access
import step
mdb.models[name].steps[name].monitor
Monitor(...)
This method creates a request for a degree of freedom to be monitored in a general or modal procedure.
Path
mdb.models[name].steps[name].Monitor
Required arguments
A String specifying the name of the region to be monitored.
node
A SymbolicConstant specifying the degree of freedom to be monitored at the node. Possible values
are:
dof
•
U1
•
U2
•
U3
•
UR1
•
UR2
•
UR3
•
WARP
•
FLUID_PRESSURE
•
ELECTRICAL_POTENTIAL
•
NT11
•
NT30
•
NN11
•
NN30
The NT identiﬁers are not available for mass diffusion. The NN identiﬁers are available only for
mass diffusion.
An Int specifying the output frequency in increments. This argument is valid only for an
Abaqus/Standard analysis.
frequency
Optional arguments
None.
Abaqus Scripting Reference Guide
2542
Monitor object

Return value
A Monitor object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Monitor object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Monitor method.
Return value
None.
Exceptions
RangeError.
Members
The Monitor object has members with the same names and descriptions as the arguments to the Monitor method.
Corresponding analysis keywords
•
*MONITOR
2543
Abaqus Scripting Reference Guide
Monitor object

Restart object
The Restart object deﬁnes a restart request.
Access
import step
mdb.models[name].steps[name].restart
Restart(...)
This method creates a restart request.
Path
mdb.models[name].steps[name].Restart
Required arguments
None.
Optional arguments
An Int specifying the number of intervals during the step at which restart information will
be written. The default value is 0. The default value is 1.
numberIntervals
A Boolean specifying whether to use exact time marks for writing during an analysis. The
default value is OFF. The default value is OFF.
timeMarks
A Boolean specifying that only one increment per step should be retained on the restart ﬁle,
thus minimizing the size of the restart ﬁle. The default value is OFF. The default value is
ON.
overlay
An Int specifying the increments at which restart information will be written. The default
value is 0. The default value is 0.
frequency
This argument applies only to Abaqus/Standard analyses.
Return value
A Restart object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the Restart object.
Required arguments
None.
Abaqus Scripting Reference Guide
2544
Restart object

Optional arguments
The optional arguments to setValues are the same as the arguments to the Restart  method.
Return value
None.
Exceptions
RangeError.
Members
The Restart object has members with the same names and descriptions as the arguments to the Restart  method.
Corresponding analysis keywords
•
*RESTART
2545
Abaqus Scripting Reference Guide
Restart object

TimePoint object
The TimePoint object deﬁnes time points at which data are written to the output database or restart ﬁles.
Access
import step
mdb.models[name].timePoints[name]
TimePoint(...)
This method creates a TimePoint object.
Path
mdb.models[name].TimePoint
Required arguments
A String specifying the repository key.
name
A sequence of sequences of Floats specifying time points at which data are written to the
output database or restart ﬁles.
points
Optional arguments
None.
Return value
A TimePoint object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the TimePoint object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TimePoint  method, except for the name
argument.
Return value
None.
Abaqus Scripting Reference Guide
2546
TimePoint object

Exceptions
RangeError.
Members
The TimePoint object has members with the same names and descriptions as the arguments to the TimePoint  method.
Corresponding analysis keywords
•
*TIME POINTS
2547
Abaqus Scripting Reference Guide
TimePoint object

Table Collection commands
Table Collection commands are used to create dynamic table types and tables.
In this section:
•
ActivateElements object
•
DataTable object
•
ElementProgressiveActivation object
•
EventSeries object
•
EventSeriesType object
•
ParameterColumn object
•
ParameterTable object
•
PropertyTable object
•
PropertyTableData object
•
TableCollection object
Abaqus Scripting Reference Guide
2548

ActivateElements object
The ActivateElements object is used turn on progressive element activation within a step deﬁnition.
Access
mdb.models[name].steps[name].activateElements[key]
ActivateElements(...)
This method creates an ActivateElements object.
Path
mdb.models[name].ActivateElements
Required arguments
A String specifying the name of the tableCollection object.
tableCollection
A string specifying the name of progressive element activation.
activation
Optional arguments
A Double specifying the time constant used to ramp up the eigenstrains at
element activation.
eigenTimeConst
A Double specifying the time constant used to ramp up the thermal strains at
element activation.
expansionTimeConstant
Return value
An ActivateElements object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the ActivateElements object.
Optional arguments
The optional arguments to setValues are the same as the optional arguments to the ActivateElements method.
Exceptions
RangeError.
2549
ActivateElements object

Members
The ActivateElements object has members with the same names and descriptions as the arguments to the
ActivateElements method.
Corresponding analysis keywords
•
*ActivateElements
•
*ElementProgressiveActivation
Abaqus Scripting Reference Guide
2550
ActivateElements object

DataTable object
The DataTable object is used to specify the parameter table of the respective parameter table type.
The data type of the values in each column in the DataTable object corresponds to the data type mentioned for the
respective ParameterColumn object. The DataTable object should be created when all the required ParameterColumn
objects are created for the current ParameterTable.
Access
mdb.models[name].tableCollections[name].parameterTables[name].dataTables[i]
DataTable(...)
This method creates a DataTable object and places it in the dataTables array.
Path
mdb.models[name].tableCollections[name].parameterTables[name].DataTable
Required arguments
A String specifying a unique label name for the current ParameterTable object.
label
Optional arguments
None.
Return value
A DataTable object.
Exceptions
AbaqusException.
Members
The DataTable object has the following members.
A String specifying the label of the data table.
label
A DataColumnArray specifying all the dataColumns in the DataTable object.
columns
Corresponding analysis keywords
•
*PARAMETER TABLE
2551
DataTable object

ElementProgressiveActivation object
The ElementProgressiveActivation object is used to specify elements that can be activated during an analysis.
Access
mdb.models[name].rootAssembly.elementProgressiveActivations[name]
ElementProgressiveActivation(...)
This method creates an ElementProgressiveActivation object and places it in the elementProgressiveActivation
repository.
Path
mdb.models[name].rootAssembly.ElementProgressiveActivation
Required arguments
A String specifying the key of the repository.
name
Optional arguments
A Region object specifying the region containing the elements that will be activated during the
analysis.
elset
A Boolean value specifying whether the elements that have not yet been activated will follow
the deformations of the active elements. Set deformation=ON when the deformation of the active
elements is excessive. The default value is OFF.
deformation
A SymbolicConstant specifying the exposed areas of the element facets that are active for
convection or radiation boundary conditions to be applied. Possible values are NONE and FACET.
freeSurfaceType
If freeSurfaceType=FACET, user subroutine UEPACTIVATIONFACET will be called at the start
of the increment for each element. If freeSurfaceType=NONE, all the exposed areas of the element
facets are considered. The default value is NONE.
Return value
An ElementProgressiveActivation object.
Exceptions
AbaqusException: If the region does not contain only elements.
setValues
Members
The ElementProgressiveActivation object has members with the same names and descriptions as the arguments to the
ElementProgressiveActivation method.
Abaqus Scripting Reference Guide
2552
ElementProgressiveActivation object

Corresponding analysis keywords
•
*ELEMENT PROGRESSIVE ACTIVATION
2553
Abaqus Scripting Reference Guide
ElementProgressiveActivation object

EventSeries object
The EventSeries object is used to deﬁne an event based on an already deﬁned EventSeriesType object.
After EventSeries is instantiated, making changes to EventSeriesType may lead to data corruption.
Access
mdb.models[name].eventSeriesDatas[name]
EventSeries(...)
This method creates an EventSeries object.
Path
mdb.models[name].EventSeriesData
Required arguments
A String specifying the repository key.
name
A string specifying the step name.
createStepName
A string specifying the type of event series.
eventSeriesType
Optional arguments
A Symbolic constant specifying the type of transformation. Possible values are NONE,
BOTH, TRANSLATE, and ROTATE. The default value is NONE.
transformType
A Symbolic constant specifying time. Possible values are TOTAL_TIME and
STEP_TIME. The default value is STEP_TIME.
timeSpan
An Array specifying the required transformations over event series data.
transformations
A String specifying the ﬁlename.
ﬁleName
An Array of double specifying the values of ﬁelds provided in EventSeriesType.
data
Return value
An EventSeries object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the EventSeries object.
Abaqus Scripting Reference Guide
2554
EventSeries object

Optional arguments
The optional arguments to setValues are the same as the arguments to the EventSeries method, except for the name
argument.
Exceptions
RangeError.
Members
The EventSeries object has members with the same names and descriptions as the arguments to the EventSeries method.
Corresponding analysis keywords
•
*EVENT SERIES TYPE
•
*EVENT SERIES
2555
Abaqus Scripting Reference Guide
EventSeries object

EventSeriesType object
The EventSeriesType object is used to deﬁne a type of event in a process.
Access
mdb.models[name].eventSeriesTypes[name]
EventSeriesType(...)
This method creates an EventSeriesType object.
Path
mdb.models[name].EventSeriesType
Required arguments
A String specifying the repository key.
name
A string specifying the step name.
createStepName
Optional arguments
A String array specifying ﬁelds. The default value is an empty array.
ﬁelds
Return value
A EventSeriesType object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the EventSeriesType object.
Optional arguments
The optional arguments to setValues are the same as the arguments to the EventSeriesType method, except for the
name argument.
Exceptions
RangeError.
Members
The EventSeriesType object has members with the same names and descriptions as the arguments to the EventSeriesType
method.
Abaqus Scripting Reference Guide
2556
EventSeriesType object

Corresponding analysis keywords
•
*EVENT SERIES TYPE
•
*EVENT SERIES
2557
Abaqus Scripting Reference Guide
EventSeriesType object

ParameterColumn object
The ParameterColumn object is used to deﬁne the type of parameters that will collectively build the type of parameter
table.
Once the object is created, it is noneditable.
Access
mdb.models[name].tableCollections[name].parameterTables[name].columns[i]
ParameterColumn(...)
ParameterColumn is a constructor method that creates a ParameterColumn object and stores it in the array data structure.
It is accessible from the ParameterTable object using a column member.
Path
mdb.models[name].tableCollections[name].parameterTables[name].Column
Required arguments
A SymbolicConstant specifying the data type of the parameter. Possible values are STRING,
INTEGER, and FLOAT.
type
Optional arguments
A String specifying the unit of the parameter.
unit
A String specifying the description of the parameter.
description
The default value of the ﬁrst parameter. The data type of the value depends on the
value of type argument.
default
A Set of allowed values for the parameter.
allowedValues
Return value
A ParameterTable object.
Exceptions
Incompatible data are given.
Members
The ParameterTable object has members with the same names and descriptions as the arguments to the ParameterColumn
method.
Abaqus Scripting Reference Guide
2558
ParameterColumn object

Corresponding analysis keywords
•
*PARAMETER TABLE TYPE
•
*PARAMETER TABLE
2559
Abaqus Scripting Reference Guide
ParameterColumn object

ParameterTable object
A ParameterTable is an object that is used to deﬁne the containers that encapsulate ParameterColumn and DataTable
objects.
The data of DataTable is dependent on the contents of ParameterColumn. After DataTable is instantiated, making
changes to ParameterColumn may lead to data corruption.
The following topics are discussed:
Access
mdb.models[name].tableCollections[name].parameterTables[name]
ParameterTable(...)
This method creates a ParameterTable object and places it in the parameterTables repository.
Path
mdb.models[name]tableCollections[name].ParameterTable
Required arguments
A String specifying the repository key.
name
Optional arguments
None.
Return value
A ParameterTable object.
Exceptions
None.
Members
The ParameterTable object has the following members:
A ParameterColumnArray specifying all the columns in the ParameterTable.
columns
A DataTableArray specifying all the dataTables in the ParameterTable.
dataTables
Corresponding analysis keywords
•
*PARAMETER TABLE TYPE
•
*PARAMETER TABLE
Abaqus Scripting Reference Guide
2560
ParameterTable object

PropertyTable object
A PropertyTable is an object that is used to deﬁne the container that encapsulates the PropertyTableData object.
The data of the PropertyTableData object is dependent on the contents of the PropertyTable object.
After PropertyTableDatais instantiated, making changes to PropertyTable may lead to data corruption.
Access
mdb.models[name].tableCollections[name].propertyTables[name]
PropertyTable(...)
This method creates a PropertyTable object.
Path
mdb.models[name].tableCollections[name].PropertyTable
Required arguments
A String specifying the repository key.
name
A string array specifying the multiple properties to build the parameter table type.
properties
Optional arguments
A String array specifying multiple independent variables. The default value is an empty
array.
variables
Return value
A PropertyTable object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the PropertyTable object.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PropertyTable method, except for the
name argument.
Exceptions
RangeError.
2561
PropertyTable object

Members
The PropertyTableType object has members with the same names and descriptions as the arguments to the PropertyTable
method.
In addition, the PropertyTable object has following members:
A repository of PropertyTableData. Speciﬁes all the propertyTableData in
PropertyTable
propertyTableDatas
Corresponding analysis keywords
•
*PROPERTY TABLE TYPE
•
*PROPERTY TABLE
Abaqus Scripting Reference Guide
2562
PropertyTable object

PropertyTableData object
A PropertyTableData is an object that is used to specify the property table of the respective property table type.
The values in each column in the PropertyTableData  object corresponds to the properties and variables mentioned in
the PropertyTable object.
Access
mdb.models[name].tableCollections[name].propertyTables[name].propertyTableDatas[name]
PropertyTableData(...)
This method creates a PropertyTableData object.
Path
mdb.models[name].tableCollections[name].propertyTables[name].PropertTableData
Optional arguments
A String specifying a unique label name for the current PropertyTable object.
label
A SymbolicConstant specifying the type of regularize to the user-deﬁned property data.
regularize
A SymbolicConstant specifying the type of extrapolation of dependent variables outside
the speciﬁed range of the independent variables.
extrapolate
A Boolean specifying the dependency of properties on temperature.
isTemp
An Int specifying the ﬁeld variables on which properties are dependent.
ﬁeldNums
A Double specifying the tolerance to be used to regularize the property table data.
regularizeTolerance
An Array of doubles specifying the values of the properties, the variables mentioned in
PropertyTable, and the ﬁeld variables mentioned in PropertyTableData.
data
Return value
A PropertyTableData object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the PropertyTableData object.
2563
PropertyTableData object

Optional arguments
Exceptions
RangeError.
Members
The PropertyTableData object has members with the same names and descriptions as the arguments to the
PropertyTableData method.
Corresponding analysis keywords
•
*PROPERTY TABLE TYPE
•
*PROPERTY TABLE
Abaqus Scripting Reference Guide
2564
PropertyTableData object

TableCollection object
A TableCollection is an object used to deﬁne the containers that encapsulate the ParameterTable and PropertyTable
objects.
Access
mdb.models[name].tableCollections[name]
TableCollection(...)
This method creates a TableCollection object and places it in the tableCollections repository.
Path
mdb.models[name].TableCollection
Required arguments
A String specifying the repository key.
name
Optional arguments
None.
Return value
A TableCollection object.
Exceptions
None.
Members
The TableCollection object has the following members:
A repository of the PropertyTable object.
propertyTables
A repository of the ParameterTable object
parameterTables
Corresponding analysis keywords
•
*TABLE COLLECTION
2565
TableCollection object

Text Representation commands
Text representation commands are used to determine how objects are printed on the Python command line.
In this section:
•
redentABQ module
•
textRepr module
•
TextReprOptions object
Abaqus Scripting Reference Guide
2566

redentABQ module
The Python module redentABQ is a wrapper around the Python redent module. The module makes the indentation in
a Python text ﬁle consistent.
The module can be run as a script from a command prompt using the following statement:
abaqus Python -m redentABQ [options] pathToFile
where the following options are available to customize the redentABQ process:
•
-b: Create a backup of the selected ﬁle if any modiﬁcations are made.
•
-i: Specify a number of spaces to be used for indentation.
•
-t: Test the newly indented ﬁle after any changes are made.
For more information on running the abaqus Python execution procedure, see Python Execution.
Access
import redentABQ
indentFile(...)
This method outputs the indented ﬁle to the terminal window or backs up the speciﬁed ﬁle and replaces it.
Required arguments
A String specifying the ﬁle to be processed.
path
Optional arguments
A String specifying the amount of indentation to be used. The default value is four spaces of
indentation. Custom indentation strings must be ﬂanked by quotation marks (" ").
indent
A Boolean specifying whether to back up the ﬁle speciﬁed in the path argument if changes are
made. The default value is False.
backup
A Boolean specifying whether to test the newly indented ﬁle to ensure that it is semantically
the same after any changes. The default value is False.
runTest
Return value
A Boolean. True, if the indentation is successful; otherwise, False.
Exceptions
None.
2567
redentABQ module

textRepr module
The Python module textRepr contains functions to print an Abaqus object and to convert the output from the str()
function into a formatted string, indented for each object in the recursive listing of a Python object.
Access
import textRepr
getIndentedRepr(...)
This method returns a String with each level of parentheses indented.
Required arguments
A Python object to be processed. (The Python object can be an Abaqus object.) This argument can
also be a String representation of a Python object obtained from str(object).
object
Optional arguments
An Int specifying the maximum depth to which the object will be printed, the
SymbolicConstant UNLIMITED, or None. A value of None implies that the current setting
maxRecursionDepth
in the TextReprOptions object will be used. If object is not an Abaqus object,
maxRecursionDepth has no effect. The default value is None.
You should take care when setting maxRecursionDepth=UNLIMITED because the resulting
output can be very large. To limit the output, you should set maxElementsInSequence to a
small number.
An Int specifying the maximum number of elements of a sequence to return or the
SymbolicConstant UNLIMITED. The initial value is 100. After the maximum number of
elements have been printed, the remainder are indicated by the string '...'.
maxElementsInSequence
An Int specifying the number of signiﬁcant digits for Floats in the output. Possible values
are 0 signiﬁcantDigits  15. The default value is 6.
signiﬁcantDigits
Return value
A String.
Exceptions
None.
getPaths(...)
This method processes the argument and interprets its structure. It then returns a String containing the object paths of
all the child objects found.
Abaqus Scripting Reference Guide
2568
textRepr module

Required arguments
A Python object to be processed. (The Python object can be an Abaqus object.) This argument
can also be a String representation of a Python object.
object
Optional arguments
An Int specifying the maximum depth to which the object will be printed, the
SymbolicConstant UNLIMITED, or None. A value of None implies that the current setting
maxRecursionDepth
in the TextReprOptions object will be used. If object is not an Abaqus object,
maxRecursionDepth has no effect. The default value is None.
You should take care when setting maxRecursionDepth=UNLIMITED because the resulting
output can be very large. To limit the output, you should set maxElementsInSequence to a
small number.
An Int specifying the maximum number of elements of a sequence to return or the
SymbolicConstant UNLIMITED. The initial value is 100. After the maximum number of
elements have been printed, the remainder are indicated by the string '...'.
maxElementsInSequence
A String specifying the root of the paths. This String is prepended to each path found. The
default value is None, implying that the path to object will be used unless object is a String.
pathRoot
Return value
A String.
Exceptions
None.
getTypes(...)
This method processes the argument, interprets its structure, and returns a String containing all the object types within
the object in the form 'TypeNamePath'.
Required arguments
An Abaqus object.
object
Optional arguments
An Int specifying the maximum depth to which the object will be printed, the
SymbolicConstant UNLIMITED, or None. A value of None implies that the current setting
in the TextReprOptions object will be used. The default value is None.
maxRecursionDepth
You should take care when setting maxRecursionDepth=UNLIMITED because the resulting
output can be very large. To limit the output, you should set maxElementsInSequence to a
small number.
2569
Abaqus Scripting Reference Guide
textRepr module

An Int specifying the maximum number of elements of a sequence to return or the
SymbolicConstant UNLIMITED. The initial value is 100. After the maximum number of
elements have been printed, the remainder are indicated by the string '...'.
maxElementsInSequence
A String specifying the root of the paths. This String is prepended to each path found. The
default value is None, implying that the path to object will be used unless object is a String.
pathRoot
Return value
A String.
Exceptions
None.
prettyPrint(...)
This method prints a formatted version of the object. The prettyPrint function uses getIndentedRepr to
format the String representation, but does not save the full text output of getIndentedRepr. Therefore this function
can be used in cases where getIndentedRepr would run out of memory.
Required arguments
An Abaqus object.
object
Optional arguments
An Int specifying the maximum depth to which the object will be printed, the
SymbolicConstant UNLIMITED, or None. A value of None implies that the current setting
in the TextReprOptions object will be used. The default value is None.
maxRecursionDepth
You should take care when setting maxRecursionDepth=UNLIMITED because the resulting
output can be very large. To limit the output, you should set maxElementsInSequence to a
small number.
An Int specifying the maximum number of elements of a sequence to return or the
SymbolicConstant UNLIMITED. The initial value is 100. After the maximum number of
elements have been printed, the remainder are indicated by the string '...'.
maxElementsInSequence
An Int specifying the number of signiﬁcant digits for Floats in the output. Possible values
are 0 signiﬁcantDigits  15. The default value is 6.
signiﬁcantDigits
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2570
textRepr module

printPaths(...)
This method prints the object path of the object argument and its members, depending on the maxRecursionDepth
argument. The printPaths function uses getPaths to print a list of paths to each of the child objects in object.
Required arguments
An Abaqus object. This argument can also be a String representation of an Abaqus object
obtained from str(object).
object
Optional arguments
An Int specifying the maximum depth to which the object will be printed, the
SymbolicConstant UNLIMITED, or None. A value of None implies that the current setting
in the TextReprOptions object will be used. The default value is None.
maxRecursionDepth
You should take care when setting maxRecursionDepth=UNLIMITED because the resulting
output can be very large. To limit the output, you should set maxElementsInSequence to a
small number.
An Int specifying the maximum number of elements of a sequence to return or the
SymbolicConstant UNLIMITED. The initial value is 100. After the maximum number of
elements have been printed, the remainder are indicated by the string '...'.
maxElementsInSequence
A String specifying the root of the paths to be printed. This String is prepended to each
path found. The default value is None, implying that the path to object will be used.
pathRoot
Return value
None.
Exceptions
None.
printTypes(...)
This method prints the object type. The printTypes function uses getTypes to print a list of all the object types
in object.
Required arguments
An Abaqus object.
object
Optional arguments
An Int specifying the maximum depth to which the object will be printed, the
SymbolicConstant UNLIMITED, or None. A value of None implies that the current setting
in the TextReprOptions object will be used. The default value is None.
maxRecursionDepth
2571
Abaqus Scripting Reference Guide
textRepr module

You should take care when setting maxRecursionDepth=UNLIMITED because the resulting
output can be very large. To limit the output, you should set maxElementsInSequence to a
small number.
An Int specifying the maximum number of elements of a sequence to return or the
SymbolicConstant UNLIMITED. The initial value is 100. After the maximum number of
elements have been printed, the remainder are indicated by the string '...'.
maxElementsInSequence
A String specifying the root of the paths to be printed. This String is prepended to each
path found. The default value is None, implying that the path to object will be used.
pathRoot
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2572
textRepr module

TextReprOptions object
The TextReprOptions object is used to conﬁgure the output of the Pythonstr() command within Abaqus/CAE. (The
str() command is used by the Python print function.) The TextReprOptions object stores the various settings that
determine how objects are printed on the Python command line.
The TextReprOptions object has no constructor. Abaqus creates the textReprOptions member when a session is started.
Access
import textRepr
textReprOptions
session.textReprOptions
setValues(...)
This method modiﬁes the TextReprOptions object.
Required arguments
None.
Optional arguments
A SymbolicConstant specifying the style of the text representation. Possible values are:
style
•
RECURSIVE: return a recursive representation of the object.
•
SIMPLE: return a String representing the object as either 'interface object', 'dictionary
object', or 'sequence object'.
The initial value is RECURSIVE.
An Int, SymbolicConstant, or None specifying the maximum depth to which the object
will be printed. Possible values for the depth are Ints  0, the SymbolicConstant
maxRecursionDepth
UNLIMITED, or None. A value of None implies that the current setting in the
TextReprOptions object will be used. If object is not an Abaqus object, maxRecursionDepth
has no effect. The default value is None.
A String specifying the string to be returned when the maximum depth of recursion is
reached. The string can include a format speciﬁer (%s), which will be substituted by the
object type. The initial value is '%s object'.
maxRecursionString
An Int or the SymbolicConstant UNLIMITED specifying the maximum number of elements
of a sequence to return. Possible values are UNLIMITED or Ints  0. The initial value is
100. After the maximum number of elements, the remainder are indicated by the string '...'.
maxElementsInSequence
Return value
None.
Exceptions
None.
2573
TextReprOptions object

Members
The TextReprOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2574
TextReprOptions object

Utility and View commands
Utility commands are used to do the following:
•
Create SymbolicConstant and Boolean objects.
•
Change the name of a key to a Repository object.
•
Control the use of deprecated commands.
•
Request input from the user.
•
Display status information.
•
Execute Python commands or functions.
•
Register a callback that will be invoked when certain Abaqus Scripting Interface commands are about to be
executed.
•
Register a callback that will be invoked when certain Abaqus Scripting Interface objects are about to be
deleted.
•
Upgrade Abaqus kernel or GUI scripts from one release of Abaqus to a later release.
View commands are used to transform three-dimensional views stored in Session and Viewport objects to the
screen. (See Session object and Viewport object.)
In this section:
•
SymbolicConstant object
•
AbaqusBoolean object
•
Repository object
•
BackwardCompatibility object
•
User input commands
•
Status commands
•
Callback commands
•
Method callback command
•
Delete object callback command
•
Upgrade script commands
•
Customization commands
•
View object
2575

SymbolicConstant object
The SymbolicConstant object represents a string in a way that can be stored in a replay ﬁle and used as an argument
to Abaqus Scripting Interface methods and functions. By convention the string representation of the SymbolicConstant
object is the same as its variable name. If you pass a SymbolicConstant object to the Python repr() function, the
function returns the text without quotes. In effect, the text is the variable that, by convention, refers to the
SymbolicConstant object.
Two SymbolicConstant objects with the same text are the same Python object, although you can assign them to different
variables. All of the SymbolicConstant objects that are required in Abaqus Scripting Interface methods are deﬁned in
the abaqusConstants module. Some SymbolicConstant objects and the SymbolicConstant constructor are deﬁned in
the abaqus module. The SymbolicConstant constructor is also deﬁned in the symbolicConstants module.
Access
from symbolicConstants import *
from abaqusConstants import *
SymbolicConstant(...)
The SymbolicConstant method creates a SymbolicConstant object.
Path
SymbolicConstant
Required arguments
A String specifying the text of the SymbolicConstant object. The String must contain only capital
letters, digits, or underscores and must not start with a digit.
text
Optional arguments
None.
Return value
A SymbolicConstant object.
Exceptions
None.
Abaqus Scripting Reference Guide
2576
SymbolicConstant object

AbaqusBoolean object
The AbaqusBoolean object is used in a similar way to the SymbolicConstant object. If you pass an AbaqusBoolean
object to the Python repr() function, the function returns the text without quotes. In effect, the text is the variable
that, by convention, refers to the AbaqusBoolean object.
An AbaqusBoolean object has a value of 0 or 1, and an AbaqusBoolean object can be tested in an if statement. You
can use an AbaqusBoolean object as an argument to a method in place of 1 or 0. Conversely, you can pass a 0 or a 1
to an Abaqus Scripting Interface method that expects a Boolean argument, and the 0 or 1 will be coerced to the
appropriate AbaqusBoolean value.
There are only two possible values for an AbaqusBoolean object: 1 and 0. You can import both values from the
symbolicConstants module or from the abaqus module. Abaqus Scripting Interface commands that expect an
AbaqusBoolean object will also accept a Python bool (True, False), or a Python int (1, 0).
Access
from symbolicConstants import *
from abaqusConstants import *
AbaqusBoolean(...)
The AbaqusBoolean method creates an AbaqusBoolean object.
Path
AbaqusBoolean
Required arguments
An Int specifying whether the AbaqusBoolean object will test true or false. Possible values are 0
and 1, which will create the AbaqusBoolean method OFF and ON, respectively.
value
Optional arguments
None.
Return value
An AbaqusBoolean object.
Exceptions
None.
2577
AbaqusBoolean object

Repository object
Repositories are containers that store a particular type of object; for example, the steps repository contains all the steps
deﬁned in the model. An Abaqus Scripting Interface Repository maps a key to a value. The key is usually a String,
and the value is any Python object, usually an Abaqus object. A repository is similar to a Python dictionary; however,
only a constructor can add an object to a repository. In addition, all of the objects in a repository are of the same base
type. For more information, see Repositories. A Repository has no constructor. Abaqus creates empty repositories
when you import a module. For example, Abaqus creates an empty parts repository when you import the part module.
The following methods of the Repository object are standard Python dictionary methods and are not described here:
•
has_key
•
items
•
keys
•
values
changeKey(...)
This method changes the name of a key in a repository and the name member of the value object.
Required arguments
A String specifying the old name of the repository key.
fromName
A String specifying the new name of the repository key.
toName
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2578
Repository object

BackwardCompatibility object
The BackwardCompatibility object enables the user to control access to deprecated commands in the Abaqus Scripting
Interface and to collect data on which deprecated commands have been used. This enables the user to check that no
deprecated methods, members, or arguments have been used. Data are recorded on any deprecated members, methods,
or arguments that are used.
The BackwardCompatibility object has no constructor. The abaqus module and the odbAccess module each have a
member named backwardCompatibility.
By default, the value of the includeDeprecated member is ON, and Abaqus will execute a script containing deprecated
commands with no indication that you should update the script. You can do either of the following to change the value
of the includeDeprecated member and to determine which commands have been deprecated:
•
From the command line interface in Abaqus/CAE or from an Abaqus Scripting Interface script that is run from
within Abaqus/CAE, use the following command:
backwardCompatibility.setValues(includeDeprecated=OFF) 
•
From an Abaqus Scripting Interface script that is run using abaqus python at the system prompt, use the
following two commands:
from odbAccess import * 
backwardCompatibility.setValues(includeDeprecated=OFF)  
In addition, the BackwardCompatibility object provides tools to assist you in determining the deprecated commands
that have been used. For example, to determine the deprecated commands used in the script createLug.py, use the
following commands:
backwardCompatibility.resetDeprecatedMethodsUsed()
backwardCompatibility.resetDeprecatedMembersUsed()
backwardCompatibility.resetDeprecatedArgsUsed()
execfile('createLug.py')
print(backwardCompatibility.getDeprecatedMethodsUsed())
print(backwardCompatibility.getDeprecatedMembersUsed())
print(backwardCompatibility.getDeprecatedArgsUsed())
Access
backwardCompatibility
getDeprecatedMethodsUsed()
This method returns a list of deprecated methods used since the last call to resetDeprecatedMethodsUsed.
Arguments
None.
Return value
A list of Strings.
Exceptions
None.
2579
BackwardCompatibility object

getDeprecatedMembersUsed()
This method returns a list of deprecated members used since the last call to resetDeprecatedMembersUsed.
Arguments
None.
Return value
A list of Strings.
Exceptions
None.
getDeprecatedArgsUsed()
This method returns a list of deprecated arguments used since the last call to resetDeprecatedArgsUsed.
Arguments
None.
Return value
A list of Strings.
Exceptions
None.
resetDeprecatedMethodsUsed()
This method clears the list of deprecated methods used.
Arguments
None.
Return value
None.
Exceptions
None.
resetDeprecatedMembersUsed()
This method clears the list of deprecated members used.
Arguments
None.
Abaqus Scripting Reference Guide
2580
BackwardCompatibility object

Return value
None.
Exceptions
None.
resetDeprecatedArgsUsed()
This method clears the list of deprecated arguments used.
Arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the BackwardCompatibility object.
Required arguments
None.
Optional arguments
A Boolean specifying whether deprecated members, methods, and arguments can be
seen and used. The default value is ON.
includeDeprecated
A Boolean specifying whether a warning is displayed after running a script that
contains deprecated commands. The default value is True.
reportDeprecated
A Boolean specifying whether the keys and indices are included in the report that is
displayed when reportDeprecated is True. The default value is False.
showKeysInReport
Return value
None.
Exceptions
None.
Members
The BackwardCompatibility object has the following members:
2581
Abaqus Scripting Reference Guide
BackwardCompatibility object

A Boolean specifying whether deprecated members, methods, and arguments can be
seen and used. Possible values are ON and OFF. The default value is ON.
includeDeprecated
A Boolean specifying whether a warning is displayed after running a script that contains
deprecated commands. The default value is True.
reportDeprecated
A Boolean specifying whether the keys and indices are included in the report that is
displayed when reportDeprecated is True. The default value is False.
showKeysInReport
Abaqus Scripting Reference Guide
2582
BackwardCompatibility object

User input commands
The following commands are used to request data entry from a user.
getInput
This method is used to obtain a single input from a user from a dialog box. The method displays a modal dialog
box with a text ﬁeld prefaced by the speciﬁed label. The user enters data in the text ﬁeld or accepts the optional
default value that is displayed in the text ﬁeld. When the user clicks the OK button, the getInput method
reads the data from the dialog box and closes the dialog box. You can use a “\t” separator in the label argument
to provide a tooltip from the dialog box; for example,
getInput('Enter a number:\tEnter the number of nodes to delete')
Note:
You cannot use a script that contains getInput if you are running the script from the command line
and passing the script name to the command line options -start, -script, -replay, or -noGUI.
Path
getInput
Required arguments
A String specifying the text ﬁeld in the dialog box.
prompt
Optional arguments
A String specifying a default value to be displayed in the text ﬁeld in the dialog box.
default
Return value
A String or None if the user clicks Cancel.
Exceptions
None.
getInputs
This method is used to obtain multiple inputs from a user from a dialog box. The method displays a modal dialog
box with a column of text ﬁelds prefaced by the speciﬁed labels. The user enters data in the text ﬁelds or accepts
the optional default values that are displayed in the text ﬁeld. When the user clicks the OK button, the
getInputs method reads the data from the dialog box and closes the dialog box.
Note:
You cannot use a script that contains getInputs if you are running the script from the command line
and passing the script name to the command line options -start, -script, -replay, or -noGUI.
2583
User input commands

Path
getInputs
Required arguments
A sequence of sequence of Strings specifying the text ﬁelds in the dialog box. Each inner sequence
is a pair of Strings specifying a label that describes a text ﬁeld along with a default value that
ﬁelds
appears in the text ﬁeld. If the ﬁeld has no default value, you should enter an empty string in the
second string in the pair.
Optional arguments
A String specifying a label to be placed at the top of the dialog box. The default is an
empty string, indicating that no label will be shown.
label
A String specifying the text to be shown in the title bar of the dialog box. The default
is “Get Inputs”.
dialogTitle
Return value
A sequence of Strings representing the data in each of the text ﬁelds in the dialog box. If the user clicks the
Cancel button, the method returns a sequence of None objects.
Exceptions
None.
getWarningReply
This method is used to obtain a reply from a user from a warning dialog box. The method displays a modal
warning dialog box with a message and standard buttons. The user clicks the one of the standard buttons, the
getWarningReply returns the corresponding button value and closes the dialog box. You can use a “\n”
separator in the message argument to provide a multi-line message in the warning dialog box; for example,
getWarningReply('Out of disk space!\nOkay to continue', (YES,NO))
Note:
You cannot use a script that contains getWarningReply if you are running the script from the command
line and passing the script name to the command line options -start, -script, -replay, or -noGUI.
Path
getWarningReply
Required arguments
A String specifying the message in the warning dialog box.
message
A Sequence of standard buttons to be displayed in the warning dialog box. Permissible
values are YES, NO, YES_TO_ALL and CANCEL.
buttons
Abaqus Scripting Reference Guide
2584
User input commands

Optional arguments
None.
Return value
The button that the user clicks.
Exceptions
None.
2585
Abaqus Scripting Reference Guide
User input commands

Status commands
These functions display status information.
milestone
This function displays a string in the prompt area.
Path
milestone
Required arguments
A String specifying the text to display.
message
Optional arguments
None.
Return value
None.
Exceptions
None.
milestone
This function displays a percentage complete message in the prompt area.
Path
milestone
Required arguments
A String specifying the text to display.
message
An Int specifying the percentage complete.
percent
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2586
Status commands

milestone
This function displays a message in the prompt area indicating the number done out of a total. The form of the
message is operation: object nn out of nn
Path
milestone
Required arguments
A String specifying the operation.
message
A String specifying the object.
object
An Int specifying the number being processed.
done
An Int specifying the total number.
total
Optional arguments
None.
Return value
None.
Exceptions
None.
2587
Abaqus Scripting Reference Guide
Status commands

Callback commands
These functions execute Python commands or functions.
addImportCallback
This function deﬁnes a function to be called when a speciﬁed Abaqus/CAE module is imported. You cannot
specify a custom module.
For more information, see An example of a callback function.
Path
addImportCallback
Required arguments
A String specifying the name of a speciﬁed Abaqus/CAE module.
moduleName
A Python function to be called. The interface deﬁnition of the callback function is :
def functionName(moduleName, userData)
callback
•
moduleName is a String.
•
userData is the object passed as the userData argument to the
addImportCallback method.
Optional arguments
Any Python object or None. This object is passed to the callback function.
userData
Return value
None.
Exceptions
None.
removeImportCallback
This function removes a callback added in addImportCallback.
Path
removeImportCallback
Required arguments
A Python function to be called; it must be the same as the callback argument speciﬁed
in the original call to addImportCallback.
callback
Abaqus Scripting Reference Guide
2588
Callback commands

Any Python object or None; it must be the same as the userData argument speciﬁed
in the original call to addImportCallback.
userData
Optional arguments
None.
Return value
None.
Exceptions
None.
2589
Abaqus Scripting Reference Guide
Callback commands

Method callback command
The methodCallback module provides functions that allow you to register a callback that will be invoked when
certain Abaqus Scripting Interface commands are about to be executed. This callback allows you to augment the
standard behavior of Abaqus Scripting Interface commands.
For example, in the following script the myCallback function is executed when the writeInput method of an
object whose type is JobType (in other words, any Job object) is about to be called:
import methodCallback
from job import JobType
def myCallback(callingObject, arguments, keywordArguments, userData):
    print('An input file  is about to be written.')
methodCallback.addCallback(JobType, 'writeInput', myCallback)
Access
import methodCallback
addCallback
This method adds a callback function that will be invoked when certain Abaqus/CAE commands are about to
be executed.
Path
methodCallback.addCallback
Required arguments
An object or type object specifying which object will trigger the callback function to be invoked
or the Symbolic Constant ALL_TYPES.
caller
A String specifying the name of the method on the caller that will trigger the callback function
to be invoked or the Symbolic Constant ALL_METHODS.
methodName
A Python function to be called when a command matching the speciﬁed caller and method
name is about to be executed. The interface deﬁnition of the callback function is:
def functionName(callingMethod, args, keywordArgs, userData)
callback
where:
•
callingMethod is the method that called this function.
•
args is the sequence of non-keyword arguments that was passed to the calling method.
•
keywordArgs is the dictionary of keyword arguments that was passed to the calling method.
•
userData is the object passed as the userData argument to the addCallback method.
Abaqus Scripting Reference Guide
2590
Method callback command

Optional arguments
Any type of data. This data will be passed to the callback function. The default value is None.
userData
A Boolean specifying that the callback should be called after the method has executed (instead
of before the method is called). The default value is False, which indicates that the callback
should be called before the method has executed.
callAfter
If callAfter=True, you can also access the return value of the command from within the callback
by including the following statement:
returnValue = getMethodReturnValue()
The getMethodReturnValue function is in the global namespace of the callback function.
Return value
None.
Exceptions
None.
removeCallback
This method removes a callback added by the addCallback method. To successfully remove a callback, all
arguments must exactly match those used when the callback was added.
Path
methodCallback.removeCallback
Required arguments
An object or type object specifying which object will trigger the callback function to be invoked
or the Symbolic Constant ALL_TYPES.
caller
A String specifying the name of the method on the caller that will trigger the callback function
to be invoked or the Symbolic Constant ALL_METHODS.
methodName
A Python function to be called when a command matching the speciﬁed caller and method
name is about to be executed. The interface deﬁnition of the callback function is:
def functionName(callingMethod, args, keywordArgs, userData)
callback
where:
•
callingMethod is the method that called this function.
•
args is the sequence of nonkeyword arguments that was passed to the calling method.
•
keywordArgs is the dictionary of keyword arguments that was passed to the calling method.
•
userData is the object passed as the userData argument to the removeCallback method.
2591
Abaqus Scripting Reference Guide
Method callback command

Optional arguments
Any type of data. This data will be passed to the callback function. The default value
is None.
userData
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2592
Method callback command

Delete object callback command
The deleteObjectCallback module provides methods that allow you to register a callback that will be invoked
when speciﬁed Abaqus Scripting Interface objects are about to be deleted. This callback allows you to examine an
object before it is deleted.
For example, in the following script the myCallback function is executed when any Job object is about to be deleted:
import deleteObjectCallback
def myCallback(path, userData):
    print('About to delete', path)
deleteObjectCallback.addCallback(path='mdb.jobs[*]')
Access
import deleteObjectCallback
deleteObjectCallback
This method adds a callback function that will be invoked when the speciﬁed Abaqus Scripting Interface objects
are about to be deleted. The callback is invoked only when the object is deleted using the Python statement del
object. The callback is not invoked when the object is deleted using an Abaqus Scripting Interface command
such as mdb.models[name].parts[name].deleteFeature().
Path
deleteObjectCallback.addCallback
Required arguments
A Python function to be called when an object matching the speciﬁed path is about to be deleted.
The interface deﬁnition of the callback function is:
def functionName(objectPath, userData)
callback
where:
•
objectPath is the path to the object about to be deleted.
•
userData is the object passed as the userData argument to the addCallback method.
A String specifying the path to an object or the SymbolicConstant ANY. You can include wildcards
in the path to specify a pattern to be matched. Examples of valid paths are:
path='mdb.models[*]'
path=”mdb.models['Axle*'].parts[*]”
path='mdb.models[*].materials[*]'
path
Optional arguments
Any type of data. This data will be passed to the callback function. The default value
is None.
userData
2593
Delete object callback command

A Boolean specifying that the callback should be called if an object owned by the
object speciﬁed by the path argument is about to be deleted. The default value is
False.
includeChildren
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2594
Delete object callback command

Upgrade script commands
The upgradeScript module allows you to upgrade scripts from one release of Abaqus to a later release. The
upgradeScript module allows you to upgrade over several releases at one time. It also allows you to upgrade only
kernel commands, only GUI commands, or both.
Access
import upgradeScript
upgradeScript
This function can be used to upgrade a directory, a ﬁle, or a list of both directories and ﬁles. You can preview
the changes before you choose to upgrade the ﬁle. A user interface to this function is available via the Plug-ins
menu. For more information, see Upgrading a script. You can also use a simpler interface from the command
line to upgrade scripts. For more information, see the summary of changed commands at the end of this guide.
Path
upgradeScript.upgradeScript
Required arguments
A String or sequence of Strings specifying the ﬁles or directories to upgrade. If a directory
path is found, it will be searched for ﬁles with the sufﬁx .py or .guiLog. If
searchSubdirectories is True, any directories found within a directory will also be searched.
ﬁleNames
Optional arguments
A Boolean specifying whether to search any subdirectories (if the ﬁle name is a directory).
If searchSubdirectories is True, the command will search the subdirectories of any
searchSubdirectories
directory in ﬁleNames. If searchSubdirectories is False, the command will search the
directory but not the subdirectories. The default value is True.
A Boolean specifying whether to make backups of the ﬁles. The default value is True.
This argument is ignored if preview is set.
backup
A Boolean specifying whether to preview the changes to the ﬁle instead of changing the
ﬁle. If preview is True, display a preview of the ﬁle changes. The default value is True.
preview
By default, the preview is displayed in a web browser. The diffExecutable argument
allows you to specify a different application in which to preview the changes.
A String specifying the application used to display the differences between the script and
the upgraded script. The default value is an empty string, and the differences are displayed
diffExecutable
by a web browser. Examples of values for diffExecutable are winmerge and diff. This
argument is ignored if preview is False.
A String specifying the name of the log ﬁle where any warnings and changes found during
the upgrade are written. The default value is asiUpgrade.log.
logFileName
2595
Upgrade script commands

A String specifying the Abaqus release from which to upgrade. The default value is
EARLIEST.
fromVersion
A String specifying the Abaqus release to which to upgrade. The default value is LATEST.
toVersion
A SymbolicConstant specifying the type of scripting commands to be upgraded. Possible
values are KERNEL, GUI, or BOTH. If scriptType is KERNEL only Abaqus Scripting
scriptType
Interface commands will be upgraded; if scriptType is GUI only Abaqus GUI Toolkit
commands will be upgraded. The default value is BOTH.
Return value
The number of changes made or, if preview was used, the number of changes that would have been made.
Exceptions
None.
Abaqus Scripting Reference Guide
2596
Upgrade script commands

Customization commands
The following command is used to record a user-deﬁned command in the Abaqus journal ﬁle.
journalMethodCall
This function may be used by a user-deﬁned command to record itself in the Abaqus journal ﬁle.
For example,
def setValues( self, **kargs ):
        for arg,value in kargs.items():
            setattr(self, arg, value)
        from abaqus import journalMethodCall
        objPath = '%s[%r]' % (self.reposPath, self.name)
        journalMethodCall(objPath, 'setValues', (), kargs)
Note:
Your command should not call journalMethodCall if the command changes the mdb using built-in
Abaqus Scripting Interface commands, because built-in commands are journaled by default. A command
that changes the mdb customData is one example of a command that should call journalMethodCall.
Path
journalMethodCall
Required arguments
A String specifying the path to the object.
objectPath
A String specifying the name of the method.
methodName
A sequence specifying the positional arguments to be written to the journal ﬁle.
args
A Python dict object specifying the keyword arguments to be written to the journal
ﬁle.
kargs
Optional arguments
None.
Return value
None.
Exceptions
None.
2597
Customization commands

View object
The Session and ViewportView objects store view settings for custom (both predeﬁned and user-deﬁned) views. The
paradigm used to deﬁne a view is based on a camera analogy. Similar to taking a photograph with a camera, features
such as camera position, view direction, orientation, depth of ﬁeld, and projection are speciﬁed to transform
three-dimensional views to the screen.
The LayerView objects store a transformation matrix used to position the contents of the Layer within a viewport.
Access
session.viewports[name].layers[name].view
session.viewports[name].view
session.views[name]
View(...)
This method creates a View object.
Note:
All dimensions and coordinates are speciﬁed in the model coordinate system.
Note:
This method cannot be used to create a View for a Layer object.
Path
session.View
Required arguments
A String specifying the name of the view (also used as the repository key). Possible values
are 'Front', 'Back', 'Top', 'Bottom', 'Left', `Right', 'Iso', 'User-1', 'User-2', 'User-3', and 'User-4'.
name
The object member associated with this argument is a SymbolicConstant. Possible values of
the name member are:FRONT, BACK, TOP, BOTTOM, LEFT, RIGHT, ISO, USER1,
USER2, USER3, and USER4.
A Float specifying the distance from the camera to the near clipping plane. Possible values
are nearPlane
 0.0.
nearPlane
A Float specifying the distance from the camera to the far clipping plane when farPlaneMode
=SPECIFY. Possible values are farPlane
nearPlane.
farPlane
A Float specifying the width of the front clipping plane. Possible values are width
 0.0.
width
A Float specifying the height of the front clipping plane. Possible values are height
 0.0.
height
A SymbolicConstant specifying the projection mode. Possible values are PERSPECTIVE
and PARALLEL.
projection
Abaqus Scripting Reference Guide
2598
View object

A sequence of three Floats specifying the camera position.
cameraPosition
A sequence of three Floats specifying the camera's up vector (the screen's positive Y-axis).
The initial value is (0, 0, 0).
cameraUpVector
A sequence of three Floats specifying the center of the scene.
cameraTarget
A Float specifying the amount to pan the model in the screen X-direction as a fraction of the
viewport width. A positive value pans the model to the right. A negative value pans the model
to the left.
viewOffsetX
TheviewOffsetX and viewOffsetY arguments allow you to pan the view without changing the
position of the camera or the target (cameraPosition and cameraTarget arguments to the
View method). The resulting change in the view allows you to pan a perspective display
without producing an apparent rotation of the model.
A Float specifying the amount to pan the model in the screen Y-direction as a fraction of the
viewport height. A positive value pans the model upward. A negative value pans the model
downward.
viewOffsetY
A Boolean specifying whether the view is auto-ﬁt when applied.
autoFit
Optional arguments
A Boolean specifying whether or not the camera is in movie mode. The default value
is OFF.
movieMode
Return value
A View object.
Exceptions
RangeError.
fitView(...)
This method scales the displayable object (such as a part, the assembly, or an X–Y plot) to ﬁt the viewport.
Required arguments
None.
Optional arguments
A Boolean specifying the viewport should refresh immediately after the command is
processed. This is typically only used when writing a script and it is desirable to show
intermediate results before the script completes. The default value is False.
drawImmediately
2599
Abaqus Scripting Reference Guide
View object

Return value
None.
Exceptions
None.
next(...)
This method restores the view in the viewport to the next view setting in the list. (There is a list of eight views stored
for each viewport.) If there is no next view, no action is taken.
Note:
This method is not available for a LayerView.
Required arguments
None.
Optional arguments
A Boolean specifying the viewport should refresh immediately after the command is
processed. This is typically only used when writing a script and it is desirable to show
intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
pan(...)
This method pans the view in the viewport using absolute, not relative, mode.
Required arguments
None.
Optional arguments
A Float specifying the amount to pan the model in the screen X-direction as a fraction of the
viewport width. A positive value pans the model to the right. A negative value pans the model
to the left. The default value is 0.0.
xFraction
A Float specifying the amount to pan the model in the screen Y-direction as a fraction of the
viewport height. A positive value pans the model upward. A negative value pans the model
downward. The default value is 0.0.
yFraction
Abaqus Scripting Reference Guide
2600
View object

A Boolean specifying the alternate mode of the pan view manipulation should be used. The
default value is OFF. This argument is ignored for a LayerView.
asMovie
A Boolean specifying the viewport should refresh immediately after the command is processed.
This argument is typically used only when writing a script and it is desirable to show
intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
previous(...)
This method restores the view in the viewport to the previous view setting in the list. (There is a list of eight views
stored for each viewport.) If there is no previous view, no action is taken.
Note:
This method is not available for a LayerView.
Required arguments
None.
Optional arguments
A Boolean specifying the viewport should refresh immediately after the command is
processed. This argument is typically used only when writing a script and it is desirable to
show intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
rotate(...)
This method rotates the view in the viewport. If a center of rotation has been previously speciﬁed and asMovie is OFF
then this method will honor that rotation center.
Required arguments
None.
2601
Abaqus Scripting Reference Guide
View object

Optional arguments
A Float specifying the degrees to rotate about the X-axis. The default value is 0.0.
xAngle
A Float specifying the degrees to rotate about the Y-axis. The default value is 0.0.
yAngle
A Float specifying the degrees to rotate about theZ-axis. The default value is 0.0.
zAngle
A SymbolicConstant specifying the rotation mode. Possible values are:
mode
•
TOTAL : Set the view to (0, 0, 1), then rotate about the screen's axes (an absolute rotation).
•
SCREEN : Rotate incrementally about the screen's axes (a relative rotation).
•
MODEL : Rotate incrementally about the model's axes (a relative rotation).
The default value is MODEL.
A Boolean specifying the alternate mode of the rotate view manipulation should be used.
The default value is OFF.
asMovie
A Boolean specifying the viewport should refresh immediately after the command is processed.
This argument is typically used only when writing a script and it is desirable to show
intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
setLayerTransform(...)
This method modiﬁes the transformation used to position a Layer.
Note:
This method is not available for Session and ViewportViews.
Required arguments
None.
Optional arguments
A sequence of 16 Floats specifying the transformation matrix.
layerTransform
A View object from which the view settings are to be copied. If the layerTransform argument
is also supplied to setLayerTransform, it will override the values in the View object
speciﬁed by view.
options
Abaqus Scripting Reference Guide
2602
View object

A Boolean specifying the viewport should refresh immediately after the command is
processed. This argument is typically used only when writing a script and it is desirable to
show intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
setProjection(...)
This method modiﬁes the appearance of three-dimensional models in the viewport. Choosing PERSPECTIVE makes
a model appear more realistic by decreasing the apparent size of features that are farther away from the viewing point.
Note:
This method is not available for a LayerView.
Required arguments
A SymbolicConstant specifying the projection mode. Possible values are PERSPECTIVE
and PARALLEL.
projection
Optional arguments
A Boolean specifying the viewport should refresh immediately after the command is
processed. This argument is typically used only when writing a script and it is desirable to
show intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
RangeError.
setRotationCenter(...)
This method sets the center of rotation to the speciﬁed location.
Required arguments
A sequence of a String and an Int specifying a part instance name and a node label or
a sequence of 3 Floats specifying a point.
rotationCenter
2603
Abaqus Scripting Reference Guide
View object

Optional arguments
None.
Return value
None.
Exceptions
TypeError: rotationCenter cannot be set using a part instance and node label unless the displayed object is an ODB
setValues(...)
This method modiﬁes the View object.
Note:
This method is not available for a LayerView.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the View  method, except for the name and
autoFit arguments. In addition, setValues has the following optional arguments:
A View object from which the view settings are to be copied. If other arguments are also
supplied to setValues, they will override the values in the View object speciﬁed by
view.
options
A Boolean specifying the viewport should refresh immediately after the command is
processed. This argument is typically used only when writing a script and it is desirable to
show intermediate results before the script completes. The member is False by default.
drawImmediately
A Float specifying the viewing angle of the camera. Possible values are 0.0 
ﬁledOfViewAngle 180.0
ﬁeldOfViewAngle
A SymbolicConstant specifying how the distance from the camera to the far clipping plane
is set. Possible values are AUTOCOMPUTE and SPECIFY.
farPlaneMode
Return value
None.
Exceptions
RangeError.
setViewpoint(...)
This method sets the camera's position in the viewport.
Abaqus Scripting Reference Guide
2604
View object

Note:
This method is not available for a LayerView.
Required arguments
A sequence of three Floats specifying the viewing vector (from the camera to the origin
of the model).
viewVector
Optional arguments
A sequence of three Floats specifying the camera's up vector (the screen's positive Y-axis).
The initial value is (0, 0, 0).
cameraUpVector
A Boolean specifying the viewport should refresh immediately after the command is
processed. This argument is typically used only when writing a script and it is desirable
to show intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
zoom(...)
This method magniﬁes the view in the viewport.
Required arguments
A Float specifying the amount to zoom. Possible values are 0.000001 
zoomFactor
1000000. A zoomFactor less than one reduces the image. A zoomFactor greater than one
enlarges the image.
zoomFactor
Optional arguments
A SymbolicConstant specifying the way the zoom is executed. Possible values are:
mode
•
ABSOLUTE : Execute fitView, then zoom.
•
RELATIVE : Zoom from the current camera settings.
The default value is ABSOLUTE.
A Boolean specifying the alternate mode of the zoom view manipulation should be used. The
default value is OFF. This argument is ignored for a LayerView.
asMovie
2605
Abaqus Scripting Reference Guide
View object

A Boolean specifying the viewport should refresh immediately after the command is processed.
This argument is typically used only when writing a script and it is desirable to show intermediate
results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
RangeError.
zoomRectangle(...)
This method ﬁlls the viewport with the graphics located within the given rectangle.
Required arguments
A pair of Floats specifying theX- and Y-coordinates of one corner of the rectangle in fractions
of the viewport width and height.
point1
A pair of Floats specifying theX- and Y-coordinates of the other corner of the rectangle in
fractions of the viewport width and height.
point2
Optional arguments
A Boolean specifying the viewport should refresh immediately after the command is
processed. This argument is typically used only when writing a script and it is desirable to
show intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
Members
The View object has members with the same names and descriptions as the arguments to the View  method.
In addition, the View object has the following members:
A Float specifying the width in viewport millimeters of the bounding rectangle around
the viewport contents. This value does not include annotations or symbols and it is
not clipped to the size of the viewport window.
displayedObjectScreenWidth
A Float specifying the height in viewport millimeters of the bounding rectangle around
the viewport contents. This value does not include annotations or symbols and it is
not clipped to the size of the viewport window.
displayedObjectScreenHeight
Abaqus Scripting Reference Guide
2606
View object

A tuple of Floats specifying a transformation matrix used to position the contents of
the Layer within a viewport.
layerTransform
2607
Abaqus Scripting Reference Guide
View object

XY commands
XY commands are used to plot X–Y data and store its display attributes and to write X–Y data to an ASCII ﬁle.
In this section:
•
XYData object
•
Area object
•
AreaStyle object
•
Axis object
•
AxisData object
•
Chart object
•
CurveOptions object
•
DefaultChartOptions object
•
DefaultPlot object
•
Legend object
•
LineStyle object
•
QuantityType object
•
SymbolStyle object
•
TextStyle object
•
Title object
•
XYCurve object
•
XYPlot object
•
XYReportOptions object
•
Session object
•
writeXYReport
Abaqus Scripting Reference Guide
2608

XYData object
The XYData object is used to store values and attributes associated with XYData type objects.
XYData objects can be created using the methods described below. The methods accessed via the Session object cause
the XYData object to be added to the session.xyData repository.
Temporary XYData objects will be created if no name is supplied. Temporary XYData objects will be added to the
session.xyData repository but automatically deleted when they are not used anymore. Temporary XYData objects are
also created as a result of math operations found in the abaqusMath module.
Access
import visualization
session.charts[name].axes1[i].axisData.curves[i].data
session.charts[name].axes2[i].axisData.curves[i].data
session.charts[name].curves[name].data
session.curves[name].data
session.defaultChartOptions.defaultAxis1Options.axisData.curves[i]\
.data
session.defaultChartOptions.defaultAxis2Options.axisData.curves[i]\
.data
import odbAccess
session.odbs[name].userData.xyDataObjects[name]
session.xyDataObjects[name]
session.xyPlots[name].charts[name].axes1[i].axisData.curves[i].data
session.xyPlots[name].charts[name].axes2[i].axisData.curves[i].data
session.xyPlots[name].charts[name].curves[name].data
session.xyPlots[name].curves[name].data
XYData(...)
This method creates an XYData object from a sequence of X–Y data pairs.
Path
session.XYData
xyPlot.XYData
Required arguments
A sequence of pairs of Floats specifying the X–Y data pairs.
data
Optional arguments
The repository key. If the name is not supplied while creating the XYData object using
xyPlot.XYData, a default name in the form _temp#_ is generated and the XYData object
name
is temporary. (This argument is required if the method is accessed from the session
object.)
A String specifying the source of the X–Y data (e.g., “Entered from keyboard”, “Taken
from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty string.
sourceDescription
2609
XYData object

A String specifying the content of the X–Y data (e.g., “ﬁeld 1 vs. ﬁeld 2”). The default
value is an empty string.
contentDescription
A String specifying additional information about the X–Y data (e.g., “for whole model”).
The default value is an empty string.
positionDescription
A String specifying the label to be used in the legend. The default value is the name of
the XYData object.
legendLabel
A String specifying the label for the X-values. This value may be overridden if the X–Y
data are combined with other X–Y data. The default value is an empty string.
xValuesLabel
A String specifying the label for the Y-values. This value may be overridden if the X–Y
data are combined with other X–Y data. The default value is an empty string.
yValuesLabel
A QuantityType object specifying the QuantityType object associated to the X -axis1-
values.
axis1QuantityType
A QuantityType object specifying the QuantityType object associated to the Y -axis2-
values.
axis2QuantityType
Return value
An XYData object.
Exceptions
InvalidNameError.
XYData(...)
This method creates an XYData object by copying an existing XYData object.
Path
session.odbs[name].userData.XYData
session.XYData
xyPlot.XYData
Required arguments
An XYData object to be copied.
objectToCopy
Optional arguments
The optional arguments are the same as the optional arguments to the XYData method.
Return value
An XYData object.
Abaqus Scripting Reference Guide
2610
XYData object

Exceptions
InvalidNameError.
XYDataFromFile(...)
This method creates an XYData object from data in an ASCII ﬁle.
Path
session.XYDataFromFile
xyPlot.XYDataFromFile
Required arguments
A String specifying the name of the ﬁle from which the X–Y data will be read.
ﬁleName
Optional arguments
The repository key. If the name is not supplied, a default name in the form _temp#_ is
generated and the XYData object is temporary.
name
A String specifying the source of the X–Y data (e.g., “Entered from keyboard”, “Taken
from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty string.
sourceDescription
A String specifying the content of the X–Y data (e.g., “ﬁeld 1 vs. ﬁeld 2”). The default
value is an empty string.
contentDescription
A String specifying additional information about the X–Y data (e.g., “for whole model”).
The default value is an empty string.
positionDescription
A String specifying the label to be used in the legend. The default value is the name of
the XYData object.
legendLabel
A String specifying the label for the X-values. This value may be overridden if the X–Y
data are combined with other X–Y data. The default value is an empty string.
xValuesLabel
A String specifying the label for the Y-values. This value may be overridden if the X–Y
data are combined with other X–Y data. The default value is an empty string.
yValuesLabel
A QuantityType object specifying the QuantityType object associated to the X -axis1-
values.
axis1QuantityType
A QuantityType object specifying the QuantityType object associated to the Y -axis2-
values.
axis2QuantityType
An Int specifying the ﬁeld from which the X-data will be read. Fields are delimited by
spaces, tabs, or commas. The default value is 1.
xField
2611
Abaqus Scripting Reference Guide
XYData object

An Int specifying the ﬁeld from which the Y-data will be read. Fields are delimited by
spaces, tabs, or commas. The default value is 2.
yField
An Int specifying how often data rows will be skipped. A skipFrequency of 1 means
skip every other row. The ﬁrst row is always read. Possible values are skipFrequency
0. The default value is 0 (data are read from every row).
skipFrequency
Return value
An XYData object.
Exceptions
InvalidNameError and RangeError.
XYDataFromHistory(...)
This method creates an XYData object by reading history data from an Odb object.
Path
session.XYDataFromHistory
xyPlot.XYDataFromHistory
Required arguments
An Odb object specifying the output database from which data will be read.
odb
A String specifying the output variable from which the X–Y data will be read.
outputVariableName
A sequence of Strings specifying the names of the steps from which data will be
extracted.
steps
Optional arguments
The repository key. If the name is not supplied, a default name in the form _temp#_ is
generated and the XYData object is temporary (this argument is required if the method is
accessed from the session object).
name
A String specifying the source of the X–Y data (for example, “Entered from keyboard”,
“Taken from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty string.
sourceDescription
A String specifying the content of the X–Y data (for example, “ﬁeld 1 vs. ﬁeld 2”). The
default value is an empty string.
contentDescription
A String specifying additional information about the X–Y data (for example, “for whole
model”). The default value is an empty string.
positionDescription
Abaqus Scripting Reference Guide
2612
XYData object

A String specifying the label to be used in the legend. The default value is the name of the
XYData object.
legendLabel
An Int specifying how often data frames will be skipped. If skipFrequency=1, Abaqus will
skip every other frame. The ﬁrst frame is always read. Possible values are skipFrequency
0. The default value is 0 (data are read from every frame).
skipFrequency
A SymbolicConstant specifying the numeric form in which to display results that contain
complex numbers. Possible values are COMPLEX_MAGNITUDE, COMPLEX_PHASE,
REAL, IMAGINARY, and COMPLEX_VAL_AT_ANGLE. The default value is REAL.
numericForm
A Float specifying the angle (in degrees) at which to display results that contain complex
numbers when numericForm=COMPLEX_VAL_AT_ANGLE. The default value is 0.
complexAngle
A tuple of Integers specifying the steps to include when extracting data.
stepTuple
Return value
An XYData object.
Exceptions
InvalidNameError and RangeError.
xyDataListFromField(...)
This method creates a list of XYData objects by reading ﬁeld data from an Odb object.
Path
session.xyDataListFromField
xyPlot.xyDataListFromField
Required arguments
An Odb object specifying the output database from which data will be read.
odb
A SymbolicConstant specifying the position from which output will be read. Possible values are
ELEMENT_CENTROID, ELEMENT_NODAL, INTEGRATION_POINT, and NODAL.
outputPosition
A tuple of tuples containing the descriptions of variables for which to extract data from the ﬁeld. Each
tuple speciﬁes the following:
variable
•
Variable label: A String specifying the variable; for example, 'U'.
•
Variable output position: A SymbolicConstant specifying the output position. Possible values are
ELEMENT_CENTROID, ELEMENT_FACE, ELEMENT_NODAL, GENERAL_PARTICLE,
INTEGRATION_POINT, NODAL, WHOLE_ELEMENT, WHOLE_MODEL,
WHOLE_PART_INSTANCE, and WHOLE_REGION.
2613
Abaqus Scripting Reference Guide
XYData object

•
Reﬁnement: A tuple specifying the reﬁnement. If the reﬁnement tuple is omitted, data are written
for all components and invariants (if applicable). This element is required if the location dictionary
(the following element in the tuple) is included. The reﬁnement tuple contains the following:
-
Type: A SymbolicConstant specifying the type of reﬁnement. Possible values are INVARIANT
and COMPONENT.
-
Label: A String specifying the invariant or the component; for example, 'Mises' or 'S22'.
•
Location: An optional Dictionary specifying the location. The dictionary contains pairs of the
following:
-
A String specifying the category selection label.
-
A String specifying the section point label.
For example,
variable= ('S',INTEGRATION_POINT, ( (COMPONENT, 'S22' ), ), )
variable= (('S',INTEGRATION_POINT, ((COMPONENT, 'S11' ), ), ), 
           ('U',NODAL,((COMPONENT, 'U1'),)),)
variable= (('S', INTEGRATION_POINT, ((INVARIANT, 'Mises' ), ), 
           {'shell < STEEL > < 3 section points >':'SNEG, 
                                    (fraction = -1.0)', }), )
Optional arguments
At least one of the following arguments elementSets, elementLabels, nodeSets, and nodeLabels is required.
A sequence of Strings specifying element sets or a String specifying a single element set.
elementSets
A sequence of expressions specifying element labels per part instance in the model. Each part
instance element expression is a sequence of a String specifying the part instance name and a
elementLabels
sequence of element expressions; for example,
(('partInstance1',(1,'7','3:15;3'),), ('partInstance2','8'),)). The
element expressions can be any of the following:
•
An Int specifying a single element label; for example, 1.
•
A String specifying a single element label; for example, '7'.
•
A String specifying a sequence of element labels; for example, '3:5' and '3:15:3'.
A sequence of Strings specifying node sets or a String specifying a single node set.
nodeSets
A sequence of expressions specifying node labels per part instance in the model. Each part instance
node expression is a sequence of a String specifying the part instance name and a sequence of node
nodeLabels
expressions; for example, (('partInstance1',(1,'7','3:15;3'),),
('partInstance2','8'),)). The node expressions can be any of the following:
•
An Int specifying a single node label; for example, 1.
•
A String specifying a single node label; for example, '7'.
•
A String specifying a sequence of node labels; for example, '3:5' and '3:15:3'.
Abaqus Scripting Reference Guide
2614
XYData object

A SymbolicConstant specifying the numeric form in which to display results that contain complex
numbers. Possible values are COMPLEX_MAGNITUDE, COMPLEX_PHASE, REAL,
IMAGINARY, and COMPLEX_VAL_AT_ANGLE. The default value is REAL.
numericForm
A Float specifying the angle (in degrees) at which to display results that contain complex numbers
when numericForm=COMPLEX_VAL_AT_ANGLE. The default value is 0.
complexAngle
A SymbolicConstant specifying the mathematical, trigonometric, logarithmic, exponential, or other
operations. Possible values are ADD, SUBTRACT, MULTIPLY, DIVIDE, POWER, MINIMUM,
operator
MAXIMUM, AVERAGE, RANGE, SRSS, ABSOLUTE, UNARY_NEGATIVE, COSINE,
HYPERBOLIC_COSINE, INVERSE_COSINE, SINE, HYPERBOLIC_SINE, INVERSE_SINE,
TANGENT,  HYPERBOLIC_TANGENT, INVERSE_TANGENT, EXPONENTIAL,
NATURAL_LOG, LOG, SQUARE_ROOT, NORMALIZE, DEG2RAD, RAD2DEG, SMOOTH,
SWAP, AVERAGE_ALL, MAXIMUM_ENVELOPE, MINIMUM_ENVELOPE, and
RANGE_ALL. If no value is deﬁned, no operation will be performed on the data, and the data will
be saved as is.
Return value
A list of XYData objects.
Exceptions
InvalidNameError and RangeError.
XYDataFromFreeBody(...)
This method creates a list of XYData objects by computing free body data from an Odb object.
Path
session.XYDataFromFreeBody
xyPlot.XYDataFromFreeBody
Required arguments
An Odb object specifying the output database from which data will be read.
odb
Optional arguments
A boolean indicating whether to compute the force. The default is ON.
force
A boolean indicating whether to compute the moment. The default is OFF.
moment
A boolean indicating whether to compute the heat ﬂow rate resultant magnitude. It is extracted
only for viewcut based freebodies. The default is OFF.
heatFlowRate
A boolean indicating whether to compute the resultant. It applies only to force and moment.
The default is ON.
resultant
2615
Abaqus Scripting Reference Guide
XYData object

A boolean indicating whether to compute the ﬁrst component. It applies only to force and
moment. The default is OFF.
comp1
A boolean indicating whether to compute the second component. It applies only to force
and moment. The default is OFF.
comp2
A boolean indicating whether to compute the third component. It applies only to force and
moment. The default is OFF.
comp3
Return value
A list of XYData objects.
Exceptions
InvalidNameError and RangeError.
XYDataFromShellThickness(...)
This method creates a list of XYData objects by reading through the thickness ﬁeld data from an Odb object.
Path
xyPlot.XYDataFromShellThickness
Required arguments
An Odb object specifying the output database from which data will be read.
odb
A SymbolicConstant specifying the position from which output will be read. Possible values are
ELEMENT_CENTROID, ELEMENT_NODAL, INTEGRATION_POINT, and NODAL.
outputPosition
A tuple of tuples containing the descriptions of variables for which to extract data from the ﬁeld. Each
tuple speciﬁes the following:
variable
•
Variable label: A String specifying the variable; for example, 'U'.
•
Variable output position: A SymbolicConstant specifying the output position. Possible values are
ELEMENT_CENTROID, ELEMENT_FACE, ELEMENT_NODAL, GENERAL_PARTICLE,
INTEGRATION_POINT, NODAL, WHOLE_ELEMENT, WHOLE_MODEL,
WHOLE_PART_INSTANCE, and WHOLE_REGION.
•
Reﬁnement: A tuple specifying the reﬁnement. If the reﬁnement tuple is omitted, data are written
for all components and invariants (if applicable). This element is required if the location dictionary
(the following element in the tuple) is included. The reﬁnement tuple contains the following:
-
Type: A SymbolicConstant specifying the type of reﬁnement. Possible values are INVARIANT
and COMPONENT.
-
Label: A String specifying the invariant or the component; for example, 'Mises' or 'S22'.
•
Location: An optional Dictionary specifying the location. The dictionary contains pairs of the
following:
Abaqus Scripting Reference Guide
2616
XYData object

-
A String specifying the category selection label.
-
A String specifying the section point label.
For example,
variable= ('S',INTEGRATION_POINT, ( (COMPONENT, 'S22' ), ), )
variable= (('S',INTEGRATION_POINT, ((COMPONENT, 'S11' ), ), ), 
           ('U',NODAL,((COMPONENT, 'U1'),)),)
variable= (('S', INTEGRATION_POINT, ((INVARIANT, 'Mises' ), ), 
           {'shell < STEEL > < 3 section points >':'SNEG,
                                    (fraction = -1.0)', }), )
Optional arguments
At least one of the following arguments elementSets, elementLabels, nodeSets, and nodeLabels is required.
A sequence of Strings specifying element sets or a String specifying a single element set.
elementSets
A sequence of expressions specifying element labels per part instance in the model. Each part
instance element expression is a sequence of a String specifying the part instance name and a
elementLabels
sequence of element expressions; for example,
(('partInstance1',(1,'7','3:15;3'),), ('partInstance2','8'),)).
The element expressions can be any of the following:
•
An Int specifying a single element label; for example, 1.
•
A String specifying a single element label; for example, '7'.
•
A String specifying a sequence of element labels; for example, '3:5' and '3:15:3'.
A sequence of Strings specifying node sets or a String specifying a single node set.
nodeSets
A sequence of expressions specifying node labels per part instance in the model. Each part
instance node expression is a sequence of a String specifying the part instance name and a
nodeLabels
sequence of node expressions; for example, (('partInstance1',(1,'7','3:15;3'),),
('partInstance2','8'),)). The node expressions can be any of the following:
•
An Int specifying a single node label; for example, 1.
•
A String specifying a single node label; for example, '7'.
•
A String specifying a sequence of node labels; for example, '3:5' and '3:15:3'.
A SymbolicConstant specifying the numeric form in which to display results that contain complex
numbers. Possible values are COMPLEX_MAGNITUDE, COMPLEX_PHASE, REAL,
IMAGINARY, and COMPLEX_VAL_AT_ANGLE. The default value is REAL.
numericForm
A Float specifying the angle (in degrees) at which to display results that contain complex numbers
when numericForm=COMPLEX_VAL_AT_ANGLE. The default value is 0.
complexAngle
Return value
A list of XYData objects.
2617
Abaqus Scripting Reference Guide
XYData object

Exceptions
InvalidNameError and RangeError.
XYDataFromPath(...)
This method creates an XYData object from path information.
Path
session.XYDataFromPath
xyPlot.XYDataFromPath
Required arguments
A Path object to use in X–Y data generation.
path
A String specifying the repository key:
name
•
for session 'name' is required argument and for xyPlot 'name' is optional argument.
A Boolean specifying whether to include X–Y data for the intersections between the path
and element faces or edges. The default value is False.
includeIntersections
A SymbolicConstant specifying the model shape to use. Possible values are UNDEFORMED
and DEFORMED.
shape
A SymbolicConstant specifying the path style. Possible values are PATH_POINTS and
UNIFORM_SPACING.
pathStyle
An Int specifying the number of uniform-spacing intervals. The default value is 10.
numIntervals
A SymbolicConstant specifying the X-label type to use. Possible values are
NORM_DISTANCE, SEQ_ID, TRUE_DISTANCE, TRUE_DISTANCE_X,
labelType
TRUE_DISTANCE_Y, TRUE_DISTANCE_Z, X_COORDINATE, Y_COORDINATE
and Z_COORDINATE.
Optional arguments
A String specifying the viewport name or an Int specifying the viewport id from which to
obtain values. The default is the current viewport.
viewport
A Boolean specifying whether to remove duplicate XY values from the ﬁnal result. The
default value is True.
removeDuplicateXYPairs
A Boolean specifying whether to include elements which do not lie in the direction of the
path. The default value is False.
includeAllElements
An Int identifying the step from which to obtain values. The default value is the current
step.
step
Abaqus Scripting Reference Guide
2618
XYData object

An Int identifying the frame from which to obtain values. The default value is the current
frame.
frame
A tuple of tuples containing the descriptions of variables for which to extract data along
the path. The default value is the current variable. Each tuple speciﬁes the following:
variable
•
Variable label: A String specifying the variable; for example, 'U'.
•
Variable output position: A SymbolicConstant specifying the output position. Possible
values are ELEMENT_CENTROID, ELEMENT_FACE, ELEMENT_NODAL,
GENERAL_PARTICLE, INTEGRATION_POINT, NODAL, WHOLE_ELEMENT,
WHOLE_MODEL, WHOLE_PART_INSTANCE, and WHOLE_REGION.
•
Reﬁnement: A tuple specifying the reﬁnement. If the reﬁnement tuple is omitted, data
are written for all components and invariants (if applicable). This element is required
if the location dictionary (the following element in the tuple) is included. The reﬁnement
tuple contains the following:
-
Type: A SymbolicConstant specifying the type of reﬁnement. Possible values are
INVARIANT and COMPONENT.
-
Label: A String specifying the invariant or the component; for example, 'Mises' or
'S22'.
•
Location: An optional Dictionary specifying the location. The dictionary contains pairs
of the following:
-
A String specifying the category selection label.
-
A String specifying the section point label.
For example,
variable= ('S',INTEGRATION_POINT, ( (COMPONENT, 'S22' ), ), 
)
variable= (('S',INTEGRATION_POINT, ((COMPONENT, 'S11' ), ), 
), 
           ('U',NODAL,((COMPONENT, 'U1'),)),)
variable= (('S', INTEGRATION_POINT, ((INVARIANT, 'Mises' ), 
), 
           {'shell < STEEL > < 3 section points >':'SNEG,
                                    (fraction = -1.0)', }), 
)
A tuple of three Floats specifying the deformation magnitude in the X-, Y-, and Z-planes.
The default value is (1, 1, 1).
deformedMag
A SymbolicConstant specifying the numeric form in which to display results that contain
complex numbers. Possible values are COMPLEX_MAGNITUDE, COMPLEX_PHASE,
REAL, IMAGINARY, and COMPLEX_VAL_AT_ANGLE. The default value is REAL.
numericForm
A Float specifying the angle (in degrees) at which to display results that contain complex
numbers when numericForm=COMPLEX_VAL_AT_ANGLE. The default value is 0.
complexAngle
2619
Abaqus Scripting Reference Guide
XYData object

A Boolean to specify whether to consider the data points that do not lie on or inside the
mesh. The default value is False.
projectOntoMesh
A Float specifying the tolerance value for the projected distance considered for the data
extraction when projectOntoMesh= True. The default value is 0.
projectionTolerance
Return value
If variable speciﬁed has one ﬁeldoutput: Returns an XYData object.
If variable speciﬁed has more than one ﬁeldoutputs: Returns list of XYData objects.
Exceptions
ErrorPathNotFound: Path not found.
If path is invalid:
ErrorCurrentVPNotFound: Current viewport not found.
If viewport is invalid:
ErrorInvalidUserStepAndFrame: The user step and frame
speciﬁed have not been deﬁned.
If step and/or frame are invalid:
ErrorNoVarInPathExtract: No variable selection for XY data
extraction from path.
If the variable argument is empty:
ErrorUnavailableSelectedVariable: The selected variable is not
available for the current frame.
If the speciﬁed output variable is not available
in the output database:
ErrorUnusableVarInPathExtract: Speciﬁed variable cannot be
used in XY data extraction from path.
If the speciﬁed output variable cannot be used
to obtain X–Y data:
ErrorUnsupportedReﬁnementType: Unsupported reﬁnement
type.
If the SymbolicConstant specifying the
reﬁnement type is invalid:
ErrorInvalidReﬁnementSpeciﬁcation: Invalid reﬁnement
speciﬁcation.
If the label specifying the reﬁnement invariant
or component is invalid:
ErrorDeformedMagTupleInPathExtract: Deformed magniﬁcation
tuple must contain X, Y and Z values.
If deformedMag does not contain three Floats:
save()
This method saves a temporary XYData. The name of the XYData is changed to "XYData-#". If the XYData is already
saved, nothing is done.
Arguments
None.
Abaqus Scripting Reference Guide
2620
XYData object

Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the XYData object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the XYData method, except for the name
argument.
Return value
None.
Exceptions
None.
Members
The XYData object has members with the same names and descriptions as the arguments to the XYData method.
In addition, the XYData object has the following members:
A SymbolicConstant specifying the source type of the XYData object. Possible values
are FROM_ODB, FROM_KEYBOARD, FROM_ASCII_FILE, FROM_OPERATION,
and FROM_USER_DEFINED.
sourceType
A String specifying the source ﬁle name of the XYData object.
ﬁleName
A String specifying the complete description of the XYData object.
description
2621
Abaqus Scripting Reference Guide
XYData object

Area object
The Area object is used to display a rectangular area in an XYPlot. The Area object has no constructor. Area objects
are automatically created whenever a XYPlot, Chart, PlotTitle, or Legend objects are created.
Access
import visualization
session.charts[name].area
session.charts[name].gridArea
session.charts[name].legend.area
session.defaultChartOptions.gridArea
session.defaultChartOptions.legend.area
session.defaultPlot.area
session.defaultPlot.title.area
session.xyPlots[name].area
session.xyPlots[name].charts[name].area
session.xyPlots[name].charts[name].gridArea
session.xyPlots[name].charts[name].legend.area
session.xyPlots[name].title.area
setValues(...)
This method modiﬁes the Area object.
Required arguments
None.
Optional arguments
An Area object from which attributes are to be copied.
area
An AreaStyle object.
style
A LineStyle object.
border
A SymbolicConstant specifying how the area is positioned. Possible values are AUTO_ALIGN
and MANUAL. The default value is AUTO_ALIGN.
positionMethod
A SymbolicConstant specifying the relative position of the area in its parent when
positionMethod=AUTO_ALIGN. Possible values are:
alignment
•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
Abaqus Scripting Reference Guide
2622
Area object

•
TOP_CENTER
•
TOP_RIGHT
The default value is BOTTOM_LEFT.
A SymbolicConstant specifying how the area size is deﬁned. Possible values are AUTOMATIC
and MANUAL. The default value is AUTOMATIC.
sizeMethod
A pair of Floats specifying the X- and Y-offsets of the origin as a fraction of the available
area. The originOffset argument is ignored unless positionMethod=MANUAL. The default
value is (-1, 0). The valid range for each ﬂoat is (0, 1).
originOffset
A Float specifying the scale as a fraction of the width of the available area when the
sizeMethod=MANUAL. The valid range is (0, 1). The default value is 1.0.
widthScale
A Float specifying the scale as a fraction of the height of the available area when the
sizeMethod=MANUAL. The valid range is (0, 1). The default value is 1.0.
heightScale
A Boolean specifying whether the area is inset or occupies a reserved area. The default value
is OFF.
inset
A Float specifying the left padding of the area in mm. The default value is 1.0.
pl
A Float specifying the right padding of the area in mm. The default value is 1.0.
pr
A Float specifying the top padding of the area in mm. The default value is 1.0.
pt
A Float specifying the bottom padding of the area in mm. The default value is 1.0.
pb
Return value
None.
Exceptions
RangeError.
Members
The Area object can have the following members:
A Boolean specifying whether the area is inset or occupies a reserved area. The default value
is OFF.
inset
A SymbolicConstant specifying how the area is positioned. Possible values are AUTO_ALIGN
and MANUAL. The default value is AUTO_ALIGN.
positionMethod
A SymbolicConstant specifying the relative position of the area in its parent when
positionMethod=AUTO_ALIGN. Possible values are:
alignment
2623
Abaqus Scripting Reference Guide
Area object

•
BOTTOM_LEFT
•
BOTTOM_CENTER
•
BOTTOM_RIGHT
•
CENTER_LEFT
•
CENTER
•
CENTER_RIGHT
•
TOP_LEFT
•
TOP_CENTER
•
TOP_RIGHT
The default value is BOTTOM_LEFT.
A SymbolicConstant specifying how the area size is deﬁned. Possible values are AUTOMATIC
and MANUAL. The default value is AUTOMATIC.
sizeMethod
A Float specifying the width of the area in mm. The default value is 1.0.
width
A Float specifying the height of the area in mm. The default value is 1.0.
height
A Float specifying the scale as a fraction of the width of the available area when the
sizeMethod=MANUAL. The valid range is (0, 1). The default value is 1.0.
widthScale
A Float specifying the scale as a fraction of the height of the available area when the
sizeMethod=MANUAL. The valid range is (0, 1). The default value is 1.0.
heightScale
A Float specifying the left padding of the area in mm. The default value is 1.0.
pl
A Float specifying the right padding of the area in mm. The default value is 1.0.
pr
A Float specifying the top padding of the area in mm. The default value is 1.0.
pt
A Float specifying the bottom padding of the area in mm. The default value is 1.0.
pb
An AreaStyle object specifying whether and how to ﬁll the area.
style
A LineStyle object specifying whether and how to draw the border of the area.
border
A pair of Floats specifying the X- and Y-offsets in millimeters from the lower-left corner of
the XYPlot.
origin
A pair of Floats specifying the X- and Y-offsets of the origin as a fraction of the available
area. The originOffset argument is ignored unless positionMethod=MANUAL. The default
value is (-1, 0). The valid range for each ﬂoat is (0, 1).
originOffset
Abaqus Scripting Reference Guide
2624
Area object

AreaStyle object
The AreaStyle object is used to deﬁne how areas are to be ﬁlled when drawing XY-plot objects.
AreaStyle objects are automatically created whenever an Area object is created. AreaStyle objects can be created using
the methods described below.
Access
import visualization
session.charts[name].area.style
session.charts[name].gridArea.style
session.charts[name].legend.area.style
session.charts[name].tagAreaStyle
session.defaultChartOptions.areaStyle
session.defaultChartOptions.gridArea.style
session.defaultChartOptions.legend.area.style
session.defaultChartOptions.tagAreaStyle
session.defaultPlot.area.style
session.defaultPlot.title.area.style
session.xyPlots[name].area.style
session.xyPlots[name].charts[name].area.style
session.xyPlots[name].charts[name].gridArea.style
session.xyPlots[name].charts[name].legend.area.style
session.xyPlots[name].charts[name].tagAreaStyle
session.xyPlots[name].title.area.style
AreaStyle(...)
This method creates an AreaStyle.
Path
session.AreaStyle
xyPlot.AreaStyle
Required arguments
None.
Optional arguments
A String specifying the color to be used when ﬁlling an area with this AreaStyle object. The default
value is "White".
color
A Boolean specifying whether to ﬁll the area when using this AreaStyle. The default value is ON.
ﬁll
A SymbolicConstant specifying the area pattern style to be used when ﬁlling an area using this
AreaStyle. The default value is SOLID.
style
Return value
An AreaStyle object.
2625
AreaStyle object

Exceptions
ColorError
setValues(...)
This method modiﬁes the AreaStyle object.
Required arguments
None.
Optional arguments
A String specifying the color to be used when ﬁlling an area with this AreaStyle object. The default
value is "White".
color
A Boolean specifying whether to ﬁll the area when using this AreaStyle. The default value is ON.
ﬁll
A SymbolicConstant specifying the area pattern style to be used when ﬁlling an area using this
AreaStyle. The default value is SOLID.
style
Return value
None.
Exceptions
None.
Members
The AreaStyle object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2626
AreaStyle object

Axis object
The Axis object is used to store the display attributes of axes. Axes objects are automatically created when adding
XYCurve objects to a Chart object.
Access
import visualization
session.charts[name].axes1[i]
session.charts[name].axes2[i]
session.defaultChartOptions.defaultAxis1Options
session.defaultChartOptions.defaultAxis2Options
session.xyPlots[name].charts[name].axes1[i]
session.xyPlots[name].charts[name].axes2[i]
setValues(...)
This method modiﬁes the Axis object.
Required arguments
None.
Optional arguments
An Axis object from which attributes are to be copied.
axis
An Int specifying the frequency of the labels with respect to the tick marks. The default value
is 1.
labelFrequency
A SymbolicConstant specifying how labels are placed on the axis. Possible values are:
labelPlacement
•
NONE, specifying that no labels are displayed.
•
INSIDE, specifying that the labels are placed on the inside of the axis.
•
OUTSIDE, specifying that the labels are placed on the outside of the axis.
The default value is INSIDE.
A TextStyle object specifying the text properties to be used when displaying axis labels.
labelStyle
A LineStyle object specifying the line properties used to display the axis.
lineStyle
A SymbolicConstant specifying the placement of the axis on the grid. Possible values are:
placement
•
MIN_EDGE, specifying that the axis is placed at the minimum edge - for an abscissa at
the bottom, for an ordinate to the left.
•
MAX_EDGE, specifying that the axis is placed at the maximum edge - for an abscissa at
the top, for an ordinate at the right.
•
MIN_MAX_EDGE, specifying that the axis is placed at the minimum edge - for an abscissa
at the bottom, for an ordinate to the left - and repeated without labels and title at the
maximum edge.
2627
Axis object

•
CENTER, specifying that the axis is placed at the center of the grid.
The default value is MIN_MAX_EDGE.
A Float specifying the length of the ticks in mm. The default value is 2.0.
tickLength
A SymbolicConstant specifying how tick marks are placed on the axis. Possible values are:
tickPlacement
•
NONE, specifying that no tick marks are displayed.
•
INSIDE, specifying that the tick marcks are placed on the inside of the axis.
•
OUTSIDE, specifying that the tick marcks are placed on the outside of the axis.
•
ACROSS, specifying that the tick marcks are placed across the axis.
The default value is INSIDE.
A LineStyle object specifying the line properties to be used when displaying axis ticks.
tickStyle
A TextStyle object specifying the text properties to be used when displaying the axis title.
titleStyle
Return value
None.
Exceptions
None.
Members
The Axis object can have the following members:
An Int specifying the frequency of the labels with respect to the tick marks. The default value
is 1.
labelFrequency
A Float specifying the length of the ticks in mm. The default value is 2.0.
tickLength
A SymbolicConstant specifying the placement of the axis on the grid. Possible values are:
placement
•
MIN_EDGE, specifying that the axis is placed at the minimum edge - for an abscissa at
the bottom, for an ordinate to the left.
•
MAX_EDGE, specifying that the axis is placed at the maximum edge - for an abscissa at
the top, for an ordinate at the right.
•
MIN_MAX_EDGE, specifying that the axis is placed at the minimum edge - for an abscissa
at the bottom, for an ordinate to the left - and repeated without labels and title at the
maximum edge.
•
CENTER, specifying that the axis is placed at the center of the grid.
The default value is MIN_MAX_EDGE.
A SymbolicConstant specifying how tick marks are placed on the axis. Possible values are:
tickPlacement
Abaqus Scripting Reference Guide
2628
Axis object

•
NONE, specifying that no tick marks are displayed.
•
INSIDE, specifying that the tick marcks are placed on the inside of the axis.
•
OUTSIDE, specifying that the tick marcks are placed on the outside of the axis.
•
ACROSS, specifying that the tick marcks are placed across the axis.
The default value is INSIDE.
A SymbolicConstant specifying how labels are placed on the axis. Possible values are:
labelPlacement
•
NONE, specifying that no labels are displayed.
•
INSIDE, specifying that the labels are placed on the inside of the axis.
•
OUTSIDE, specifying that the labels are placed on the outside of the axis.
The default value is INSIDE.
An AxisData object specifying the numerical data of the axis.
axisData
A LineStyle object specifying the line properties used to display the axis.
lineStyle
A TextStyle object specifying the text properties to be used when displaying axis labels.
labelStyle
A TextStyle object specifying the text properties to be used when displaying the axis title.
titleStyle
A LineStyle object specifying the line properties to be used when displaying axis ticks.
tickStyle
2629
Abaqus Scripting Reference Guide
Axis object

AxisData object
The AxisData object is used to store the data attributes of axes. An AxisData object is automatically created when
creating an Axis object.
Access
import visualization
session.charts[name].axes1[i].axisData
session.charts[name].axes2[i].axisData
session.defaultChartOptions.defaultAxis1Options.axisData
session.defaultChartOptions.defaultAxis2Options.axisData
session.xyPlots[name].charts[name].axes1[i].axisData
session.xyPlots[name].charts[name].axes2[i].axisData
setValues(...)
This method modiﬁes the AxisData object.
Required arguments
None.
Optional arguments
An AxisData object from which attributes are to be copied.
axisData
A SymbolicConstant specifying how tick labels are formatted. Possible values are
AUTOMATIC, DECIMAL, SCIENTIFIC, and ENGINEERING. The default value is
AUTOMATIC.
labelFormat
An Int specifying the number of signiﬁcant digits displayed for the labels. Possible values
are 1 to 7. The default value is 2.
labelNumDigits
A SymbolicConstant specifying the type of scale to use for the axis. Possible values are:
scale
•
LINEAR, specifying tickmarks and labels are linearly distributed.
•
LOG, specifying tickmarks and labels are logarithmically distributed.
•
DB, specifying tickmarks and labels are distributed on a decibel scale.
•
DB2, specifying tickmarks and labels are distributed on a 2*decibel scale.
The default value is LINEAR.
A Float specifying the reference value for decibel computation. The default value is 1.0.
dbReference
A Boolean specifying whether or not to use the automatically computed minimum value for
the axis. The default value is ON.
minAutoCompute
A Float specifying the minimum value when minAutoCompute is false. By default, minValue
is set to minAutoValue.
minValue
Abaqus Scripting Reference Guide
2630
AxisData object

A Boolean specifying whether or not to use the automatically computed maximum value for
the axis. The default value is ON.
maxAutoCompute
A Float specifying the maximum value when maxAutoCompute is false. By default, maxValue
is set to maxAutoValue.
maxValue
A SymbolicConstant specifying the type of scale to use for the axis. Possible values are:
tickMode
•
AUTOCOMPUTE, specifying tickmarks and labels are automatically computed.
•
INCREMENT, specifying tickmarks and labels are deﬁned by a given increment.
•
TOTAL_NUMBER, specifying tickmarks and labels are deﬁned by the total number of
ticks.
The default value is AUTOCOMPUTE.
A Float specifying the increment of the major tick marks on the axis when tickMode =
INCREMENT. Valid values are 0 tickIncrement. The default value is computed based on
tickIncrement
the results of the automatic method and the range being plotted. When the scale is set to LOG,
the tickIncrement is interpreted as a value per decade and should be between 0.05 and 1.
An Int specifying the number of major tick marks on the axis when tickMode
=TOTAL_NUMBER. Possible values are 0 tickCount  30. The default value is computed
tickCount
based on the range of the axis. When the scale is set to LOG, the tickCount is interpreted as
the number of ticks per decade and acceptable values are 1, 4, 8, and 17.
An Int specifying the number the number of minor tick marks between major ticks. Possible
values are 0 minorTickCount  20. When the scale is set to LOG, the minorTickCount is
minorTickCount
interpreted as the number of ticks per decade and limited to 0, 1, 4, 8, and 17. The default
value is 1.
A String specifying the title of the axis. By default, the title is set to the systemTitle.
title
A Boolean specifying whether the title to use for the axis title is system deﬁned or user deﬁned.
The default value is ON.
useSystemTitle
Return value
None.
Exceptions
RangeError.
Members
The AxisData object can have the following members:
A Float specifying the reference value for decibel computation. The default value is 1.0.
dbReference
2631
Abaqus Scripting Reference Guide
AxisData object

A SymbolicConstant specifying the direction of the axis. Possible values are ABSCISSA
and ORDINATE.
direction
A SymbolicConstant specifying how tick labels are formatted. Possible values are
AUTOMATIC, DECIMAL, SCIENTIFIC, and ENGINEERING. The default value is
AUTOMATIC.
labelFormat
An Int specifying the number of signiﬁcant digits displayed for the labels. Possible values
are 1 to 7. The default value is 2.
labelNumDigits
A Boolean specifying whether or not to use the automatically computed maximum value
for the axis. The default value is ON.
maxAutoCompute
A Float specifying the maximum value when maxAutoCompute is true.
maxAutoValue
A Float specifying the maximum value when maxAutoCompute is false. By default,
maxValue is set to maxAutoValue.
maxValue
A Float specifying the current maximum value displayed for this axis. This value is different
from maxAutoValue or maxValue when the axis is being transformed (zoom or pan).
maxShownValue
A Boolean specifying whether or not to use the automatically computed minimum value
for the axis. The default value is ON.
minAutoCompute
A Float specifying the minimum value when minAutoCompute is true.
minAutoValue
A Float specifying the minimum value when minAutoCompute is false. By default, minValue
is set to minAutoValue.
minValue
A Float specifying the current minimum value displayed for this axis. This value is different
from minAutoValue or minValue when the axis is being transformed (zoom or pan).
minShownValue
An Int specifying the number the number of minor tick marks between major ticks. Possible
values are 0 minorTickCount  20. When the scale is set to LOG, the minorTickCount
minorTickCount
is interpreted as the number of ticks per decade and limited to 0, 1, 4, 8, and 17. The default
value is 1.
A SymbolicConstant specifying the type of scale to use for the axis. Possible values are:
scale
•
LINEAR, specifying tickmarks and labels are linearly distributed.
•
LOG, specifying tickmarks and labels are logarithmically distributed.
•
DB, specifying tickmarks and labels are distributed on a decibel scale.
•
DB2, specifying tickmarks and labels are distributed on a 2*decibel scale.
The default value is LINEAR.
A SymbolicConstant specifying the type of scale to use for the axis. Possible values are:
tickMode
•
AUTOCOMPUTE, specifying tickmarks and labels are automatically computed.
Abaqus Scripting Reference Guide
2632
AxisData object

•
INCREMENT, specifying tickmarks and labels are deﬁned by a given increment.
•
TOTAL_NUMBER, specifying tickmarks and labels are deﬁned by the total number
of ticks.
The default value is AUTOCOMPUTE.
An Int specifying the number of major tick marks on the axis when tickMode
=TOTAL_NUMBER. Possible values are 0 tickCount  30. The default value is computed
tickCount
based on the range of the axis. When the scale is set to LOG, the tickCount is interpreted
as the number of ticks per decade and acceptable values are 1, 4, 8, and 17.
An Int specifying the number of major ticks effectively shown. This value takes zoom, pan
and rounding into account.
tickCountShown
A Float specifying the increment of the major tick marks on the axis when tickMode =
INCREMENT. Valid values are 0 tickIncrement. The default value is computed based
tickIncrement
on the results of the automatic method and the range being plotted. When the scale is set
to LOG, the tickIncrement is interpreted as a value per decade and should be between 0.05
and 1.
A Float specifying the shown tick increment of the major ticks. This value takes zoom/pan
into account.
tickIncrementShown
A Boolean specifying whether the title to use for the axis title is system deﬁned or user
deﬁned. The default value is ON.
useSystemTitle
An XYCurveArray object specifying a read-only sequence of Curve objects associated to
this axis.
curves
A QuantityType object specifying the quantity type: i.e. the physical dimension and
associated label of the data represented by this axis.
quantityType
A tuple of Floats specifying the read-only major tick values shown.
tickValues
A tuple of Strings specifying the read-only major tick labels shown.
tickLabels
A String specifying the system title. The system title is based on the quantityType of the
axis and associated curves.
systemTitle
A String specifying the title of the axis. By default, the title is set to the systemTitle.
title
2633
Abaqus Scripting Reference Guide
AxisData object

Chart object
The Chart object is used to display XYCurve objects. A Chart object is automatically created when creating an XYPlot
object
Access
import visualization
session.charts[name]
session.xyPlots[name].charts[name]
autoColor(...)
This method distributes the colors on all curves displayed in the chart using the color palette deﬁned by the xyColors
object.
Required arguments
None.
Optional arguments
A Boolean deﬁning whether color distribution affects curve lines.
lines
A Boolean deﬁning whether color distribution affects curve symbols.
symbols
Return value
None.
Exceptions
None.
autoSymbol()
This method distributes the symbols on all curves displayed in the chart.
Arguments
None.
Return value
None.
Exceptions
None.
fitCurves()
This method resets the transform of the chart. It cancels any zoom or pan action.
Abaqus Scripting Reference Guide
2634
Chart object

Arguments
None.
Return value
None.
Exceptions
None.
getAxis1(...)
This method returns the Axis object used for displaying the Axis1 of the XYCurve speciﬁed by name or object or used
for the given QuantityType object.
Required arguments
The name or the XYCurve object associated to the Axis object.
curve
The QuantityType object associated to the Axis object.
quantityType
Optional arguments
None.
Return value
An Axis object.
Exceptions
If the given XYCurve is not used in the Chart.
XypError: Curve not found:
TypeError: Specify curve or quantityType; too many arguments;
expected 1, got 2.
If both arguments are speciﬁed.
ValueError: QuantityType not found
If the given QuantityType is not used in the Chart.
getAxis2(...)
This method returns the Axis object used for displaying the Axis2 of the XYCurve speciﬁed by name or object or used
for the given QuantityType object.
Required arguments
The name or the XYCurve object associated to the Axis object.
curve
The QuantityType object associated to the Axis object.
quantityType
2635
Abaqus Scripting Reference Guide
Chart object

Optional arguments
None.
Return value
An Axis object.
Exceptions
If the given XYCurve is not used in the Chart.
XypError: Curve not found:
TypeError: Specify curve or quantityType; too many arguments;
expected 1, got 2.
If both arguments are speciﬁed.
ValueError: QuantityType not found
If the given QuantityType is not used in the Chart.
moveAxisUp(...)
This method moves the relative position of the given Axis object up in the axis sequence of the Chart.
Required arguments
The Axis object to be moved.
axis
Optional arguments
None.
Return value
None.
Exceptions
None.
moveAxisDown(...)
This method moves the relative position of the given Axis object down in the axis sequence of the Chart.
Required arguments
The Axis object to be moved.
axis
Optional arguments
None.
Return value
None.
Abaqus Scripting Reference Guide
2636
Chart object

Exceptions
None.
removeCurve(...)
This method removes the given XYCurve from the Chart.
Required arguments
The XYCurve name or the XYCurve object or a sequence of XYCurve names or XYCurve objects
to be removed from the Chart.
curve
Optional arguments
None.
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the Chart object.
Required arguments
None.
Optional arguments
A Chart object from which attributes are to be copied.
chart
A sequence of Strings specifying the names of the curves to plot. In addition to this type,
the argument can also be one of the following:
curvesToPlot
•
A String specifying the name of the curve to plot.
•
An XYCurve object specifying the curve to plot.
•
A sequence of XYCurve objects specifying the curves to plot (as returned by the
curveSet method).
A Float specifying the aspect ratio of the grid area. A value of -1 speciﬁes that the gridArea
will take up all available space. The default value is −1.
aspectRatio
A sequence of Floats specifying a transformation matrix used to scale or pan along the axes
of the Chart.
transform
2637
Abaqus Scripting Reference Guide
Chart object

A View object.
view
A Boolean specifying whether to use the QuantityType to associate curves with axes. The
default value is ON.
useQuantityType
Return value
None.
Exceptions
RangeError.
Members
The Chart object can have the following members:
A String specifying the name of the Chart object.
name
A Boolean specifying whether to use the QuantityType to associate curves with axes.
The default value is ON.
useQuantityType
A Float specifying the aspect ratio of the grid area. A value of -1 speciﬁes that the
gridArea will take up all available space. The default value is −1.
aspectRatio
A repository of XYCurve objects specifying a repository of XYCurve objects to display
in the Chart.
curves
An AxisArray object specifying a read-only sequence of axis objects displayed as
axes1 - the abscissa for a Cartesian chart.
axes1
An AxisArray object specifying a read-only sequence of axis objects displayed as
axes2 - the ordinate for a Cartesian chart.
axes2
An Area object specifying position, padding, background and borders of the chart.
area
An Area object specifying how to display the grid area.
gridArea
A Legend object specifying the attributes for the legend of the chart.
legend
A LineStyle object specifying the line properties to be used when drawing major
gridlines along axis 1.
majorAxis1GridStyle
A LineStyle object specifying the line properties to be used when drawing major
gridlines along axis 2.
majorAxis2GridStyle
A LineStyle object specifying the line properties to be used when drawing minor
gridlines along axis 1.
minorAxis1GridStyle
Abaqus Scripting Reference Guide
2638
Chart object

A LineStyle object specifying the line properties to be used when drawing minor
gridlines along axis 2.
minorAxis2GridStyle
A TextStyle object specifying the text properties to be used when creating tags.
tagTextStyle
An AreaStyle object specifying the area properties to be used when creating tags.
tagAreaStyle
A LineStyle object specifying the tag area border properties to be used when creating
tags.
tagBorder
A tuple of Floats specifying a transformation matrix used to scale or pan along the
axes of the Chart.
transform
2639
Abaqus Scripting Reference Guide
Chart object

CurveOptions object
The CurveOptions object is used to deﬁne the curve properties when drawing curves.
CurveOptions objects can be created using the methods described below.
Access
import visualization
session.charts[name].axes1[i].axisData.curves[i].curveOptions
session.charts[name].axes2[i].axisData.curves[i].curveOptions
session.charts[name].curves[name].curveOptions
session.curves[name].curveOptions
session.defaultChartOptions.defaultAxis1Options.axisData.curves[i]\
.curveOptions
session.defaultChartOptions.defaultAxis2Options.axisData.curves[i]\
.curveOptions
session.xyPlots[name].charts[name].axes1[i].axisData.curves[i]\
.curveOptions
session.xyPlots[name].charts[name].axes2[i].axisData.curves[i]\
.curveOptions
session.xyPlots[name].charts[name].curves[name].curveOptions
session.xyPlots[name].curves[name].curveOptions
CurveOptions(...)
This method creates a CurveOptions object.
Path
session.CurveOptions
xyPlot.CurveOptions.
Required arguments
None.
Optional arguments
A String specifying the color to be used when drawing a marker with this CurveOptions
object. The default value is "White."
symbolColor
A Boolean specifying whether to draw the marker when using this CurveOptions object.
The default value is ON.
showSymbol
A SymbolicConstant specifying the marker type be used when drawing symbols using this
CurveOptions object. Possible values are:
symbolMarker
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
Abaqus Scripting Reference Guide
2640
CurveOptions object

•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
•
POINT
The default value is FILLED_CIRCLE.
A Float specifying the marker size to be used when drawing markers using this CurveOptions
object. The default value is 2.0.
symbolSize
A String specifying the color to be used when drawing a line with this CurveOptions object.
The default value is "White."
lineColor
A Boolean specifying whether to draw the line when using this CurveOptions object. The
default value is ON.
showLine
A SymbolicConstant specifying the line style to be used when drawing lines using this
CurveOptions object. Possible values are SOLID, DASHED, DOTTED, and DOT_DASH.
The default value is SOLID.
lineStyle
A Float specifying the line thickness in millimeters to be used when drawing lines using
this CurveOptions object. The default value is 0.2.
lineThickness
Return value
A CurveOptions object.
Exceptions
ColorError.
setValues(...)
This method modiﬁes the SymbolStyle object.
Required arguments
None.
Optional arguments
A String specifying the color to be used when drawing a marker with this CurveOptions
object. The default value is "White."
symbolColor
A Boolean specifying whether to draw the marker when using this CurveOptions object.
The default value is ON.
showSymbol
2641
Abaqus Scripting Reference Guide
CurveOptions object

A SymbolicConstant specifying the marker type be used when drawing symbols using this
CurveOptions object. Possible values are:
symbolMarker
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
•
POINT
The default value is FILLED_CIRCLE.
A Float specifying the marker size to be used when drawing markers using this CurveOptions
object. The default value is 2.0.
symbolSize
A String specifying the color to be used when drawing a line with this CurveOptions object.
The default value is "White."
lineColor
A Boolean specifying whether to draw the line when using this CurveOptions object. The
default value is ON.
showLine
A SymbolicConstant specifying the line style to be used when drawing lines using this
CurveOptions object. Possible values are SOLID, DASHED, DOTTED, and DOT_DASH.
The default value is SOLID.
lineStyle
A Float specifying the line thickness in millimeters to be used when drawing lines using this
CurveOptions object. The default value is 0.2.
lineThickness
Return value
None.
Exceptions
None.
Members
The CurveOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2642
CurveOptions object

DefaultChartOptions object
The DefaultChartOptions object is used to hold on default chart and axis attributes. The DefaultChartOptions object
attributes are used whenever Chart or Axis are created. A DefaultChartOptions object is automatically created when
opening a session.
Access
import visualization
session.defaultChartOptions
setValues(...)
This method modiﬁes the DefaultChartOptions object.
Required arguments
None.
Optional arguments
An AreaStyle object specifying an AreaStyle used to hold on to the default display
properties for the chart area.
areaStyle
A Float specifying the default aspect ratio of the grid area. A value of -1 speciﬁes
that the gridArea will take up all available space. The default value is −1.
aspectRatio
An Axis object specifying an Axis object used to hold on to the default properties for
direction 1 axes—the abscissa for a Cartesian chart.
defaultAxis1Options
An Axis object specifying an Axis object used to hold on to the default properties for
direction 2 axes—the ordinate for a Cartesian chart.
defaultAxis2Options
An Area object specifying how to display the grid area by default.
gridArea
A Legend object specifying the default attributes for the legend of the chart.
legend
A LineStyle object specifying the default line properties to be used when drawing
major gridlines along axis 1.
majorAxis1GridStyle
A LineStyle object specifying the default line properties to be used when drawing
major gridlines along axis 2.
majorAxis2GridStyle
A LineStyle object specifying the default line properties to be used when drawing
minor gridlines along axis 1.
minorAxis1GridStyle
A LineStyle object specifying the default line properties to be used when drawing
minor gridlines along axis 2.
minorAxis2GridStyle
2643
DefaultChartOptions object

An AreaStyle object specifying the default area properties to be used when creating
tags.
tagAreaStyle
A LineStyle object specifying the default tag area border properties to be used when
creating tags.
tagBorder
A TextStyle object specifying the default text properties to be used when creating
tags.
tagTextStyle
A Boolean specifying whether to use the QuantityType to associate curves with axes.
The default value is ON.
useQuantityType
Return value
None.
Exceptions
None.
Members
The DefaultChartOptions object has members with the same names and descriptions as the arguments to the
setValues  method.
Abaqus Scripting Reference Guide
2644
DefaultChartOptions object

DefaultPlot object
The DefaultPlot object is used to hold on default plot attributes. The DefaultPlot object attributes are used whenever
an XYPlot object is created. A DefaultPlot object is automatically created when opening a session.
Access
import visualization
session.defaultPlot
Members
The DefaultPlot object can have the following members:
An Area object specifying an Area used to hold on to the default display properties for the plot
area.
area
A Title object specifying a Title object used to hold on to the default properties of the XY-Plot
title.
title
2645
DefaultPlot object

Legend object
The Legend object is used to store the display attributes of the chart legend. A legend object is automatically created
when creating a Chart object.
Access
import visualization
session.charts[name].legend
session.defaultChartOptions.legend
session.xyPlots[name].charts[name].legend
setValues(...)
This method modiﬁes the Legend object.
Required arguments
None.
Optional arguments
A Legend object from which attributes are to be copied.
legend
A Boolean specifying whether to show the legend. The default value is ON.
show
A Boolean specifying whether to display the minimum and maximum values. The default
value is OFF.
showMinMax
A String specifying the title to appear on the legend. The default value is an empty string.
title
A SymbolicConstant specifying how the minimum and maximum values are formatted.
Possible values are AUTOMATIC, DECIMAL, SCIENTIFIC, and ENGINEERING. The
default value is AUTOMATIC.
numberFormat
An Int specifying the number of signiﬁcant digits displayed for the minimum and maximum
values. Possible values are 1 to 7. The default value is 2.
numDigits
A TextStyle object specifying the text properties used to display the legend text.
textStyle
A TextStyle object specifying the text properties used to display the legend title.
titleStyle
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
2646
Legend object

Members
The Legend object can have the following members:
A SymbolicConstant specifying how the minimum and maximum values are formatted.
Possible values are AUTOMATIC, DECIMAL, SCIENTIFIC, and ENGINEERING. The
default value is AUTOMATIC.
numberFormat
An Int specifying the number of signiﬁcant digits displayed for the minimum and maximum
values. Possible values are 1 to 7. The default value is 2.
numDigits
A Boolean specifying whether to show the legend. The default value is ON.
show
A Boolean specifying whether to display the minimum and maximum values. The default
value is OFF.
showMinMax
An Area object specifying the area of the legend.
area
A TextStyle object specifying the text properties used to display the legend text.
textStyle
A String specifying the title to appear on the legend. The default value is an empty string.
title
A TextStyle object specifying the text properties used to display the legend title.
titleStyle
2647
Abaqus Scripting Reference Guide
Legend object

LineStyle object
The LineStyle object is used to deﬁne the line style to be used for drawing XY-Plot objects.
LineStyle objects can be created using the methods described below.
Access
import visualization
session.charts[name].area.border
session.charts[name].axes1[i].axisData.curves[i].lineStyle
session.charts[name].axes1[i].lineStyle
session.charts[name].axes1[i].tickStyle
session.charts[name].axes2[i].axisData.curves[i].lineStyle
session.charts[name].axes2[i].lineStyle
session.charts[name].axes2[i].tickStyle
session.charts[name].curves[name].lineStyle
session.charts[name].gridArea.border
session.charts[name].legend.area.border
session.charts[name].majorAxis1GridStyle
session.charts[name].majorAxis2GridStyle
session.charts[name].minorAxis1GridStyle
session.charts[name].minorAxis2GridStyle
session.charts[name].tagBorder
session.curves[name].lineStyle
session.defaultChartOptions.defaultAxis1Options.axisData.curves[i]\
.lineStyle
session.defaultChartOptions.defaultAxis1Options.lineStyle
session.defaultChartOptions.defaultAxis1Options.tickStyle
session.defaultChartOptions.defaultAxis2Options.axisData.curves[i]\
.lineStyle
session.defaultChartOptions.defaultAxis2Options.lineStyle
session.defaultChartOptions.defaultAxis2Options.tickStyle
session.defaultChartOptions.gridArea.border
session.defaultChartOptions.legend.area.border
session.defaultChartOptions.majorAxis1GridStyle
session.defaultChartOptions.majorAxis2GridStyle
session.defaultChartOptions.minorAxis1GridStyle
session.defaultChartOptions.minorAxis2GridStyle
session.defaultChartOptions.tagBorder
session.defaultPlot.area.border
session.defaultPlot.title.area.border
session.xyPlots[name].area.border
session.xyPlots[name].charts[name].area.border
session.xyPlots[name].charts[name].axes1[i].axisData.curves[i]\
.lineStyle
session.xyPlots[name].charts[name].axes1[i].lineStyle
session.xyPlots[name].charts[name].axes1[i].tickStyle
session.xyPlots[name].charts[name].axes2[i].axisData.curves[i]\
.lineStyle
session.xyPlots[name].charts[name].axes2[i].lineStyle
session.xyPlots[name].charts[name].axes2[i].tickStyle
session.xyPlots[name].charts[name].curves[name].lineStyle
session.xyPlots[name].charts[name].gridArea.border
session.xyPlots[name].charts[name].legend.area.border
session.xyPlots[name].charts[name].majorAxis1GridStyle
Abaqus Scripting Reference Guide
2648
LineStyle object

session.xyPlots[name].charts[name].majorAxis2GridStyle
session.xyPlots[name].charts[name].minorAxis1GridStyle
session.xyPlots[name].charts[name].minorAxis2GridStyle
session.xyPlots[name].charts[name].tagBorder
session.xyPlots[name].curves[name].lineStyle
session.xyPlots[name].title.area.border
LineStyle(...)
This method creates a LineStyle.
Path
session.LineStyle
xyPlot.LineStyle
Required arguments
None.
Optional arguments
A String specifying the color to be used when drawing a line with this LineStyle object. The
default value is "White".
color
A Boolean specifying whether to draw the line when using this LineStyle. The default value is
ON.
show
A SymbolicConstant specifying the line style to be used when drawing lines using this LineStyle.
Possible values are SOLID, DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
style
A Float specifying the line thickness in mm to be used when drawing lines using this LineStyle.
The default value is 0.2.
thickness
Return value
A LineStyle object.
Exceptions
ColorError
setValues(...)
This method modiﬁes the LineStyle object.
Required arguments
None.
2649
Abaqus Scripting Reference Guide
LineStyle object

Optional arguments
A String specifying the color to be used when drawing a line with this LineStyle object. The
default value is "White".
color
A Boolean specifying whether to draw the line when using this LineStyle. The default value is
ON.
show
A SymbolicConstant specifying the line style to be used when drawing lines using this LineStyle.
Possible values are SOLID, DASHED, DOTTED, and DOT_DASH. The default value is SOLID.
style
A Float specifying the line thickness in mm to be used when drawing lines using this LineStyle.
The default value is 0.2.
thickness
Return value
None.
Exceptions
None.
Members
The LineStyle object has members with the same names and descriptions as the arguments to the setValues  method.
Abaqus Scripting Reference Guide
2650
LineStyle object

QuantityType object
The QuantityType object is used to store attributes deﬁning the physical dimension and label of the quantity type to
be associated with an XYData or an AxisData object.
QuantityType objects are automatically created when creating XYData objects from the odb.
QuantityType objects can be created using the methods described below.
Access
import visualization
session.charts[name].axes1[i].axisData.curves[i].data\
.axis1QuantityType
session.charts[name].axes1[i].axisData.curves[i].data\
.axis2QuantityType
session.charts[name].axes1[i].axisData.quantityType
session.charts[name].axes2[i].axisData.curves[i].data\
.axis1QuantityType
session.charts[name].axes2[i].axisData.curves[i].data\
.axis2QuantityType
session.charts[name].axes2[i].axisData.quantityType
session.charts[name].curves[name].data.axis1QuantityType
session.charts[name].curves[name].data.axis2QuantityType
session.curves[name].data.axis1QuantityType
session.curves[name].data.axis2QuantityType
session.defaultChartOptions.defaultAxis1Options.axisData.curves[i]\
.data.axis1QuantityType
session.defaultChartOptions.defaultAxis1Options.axisData.curves[i]\
.data.axis2QuantityType
session.defaultChartOptions.defaultAxis1Options.axisData.quantityType
session.defaultChartOptions.defaultAxis2Options.axisData.curves[i]\
.data.axis1QuantityType
session.defaultChartOptions.defaultAxis2Options.axisData.curves[i]\
.data.axis2QuantityType
session.defaultChartOptions.defaultAxis2Options.axisData.quantityType
import odbAccess
session.odbs[name].userData.axis1QuantityType
session.odbs[name].userData.axis2QuantityType
import visualization
import xyPlot
session.odbs[name].userData.xyDataObjects[name].axis1QuantityType
session.odbs[name].userData.xyDataObjects[name].axis2QuantityType
session.xyDataObjects[name].axis1QuantityType
session.xyDataObjects[name].axis2QuantityType
session.xyPlots[name].charts[name].axes1[i].axisData.curves[i].data\
.axis1QuantityType
session.xyPlots[name].charts[name].axes1[i].axisData.curves[i].data\
.axis2QuantityType
session.xyPlots[name].charts[name].axes1[i].axisData.quantityType
session.xyPlots[name].charts[name].axes2[i].axisData.curves[i].data\
.axis1QuantityType
session.xyPlots[name].charts[name].axes2[i].axisData.curves[i].data\
.axis2QuantityType
session.xyPlots[name].charts[name].axes2[i].axisData.quantityType
session.xyPlots[name].charts[name].curves[name].data.axis1QuantityType
session.xyPlots[name].charts[name].curves[name].data.axis2QuantityType
2651
QuantityType object

session.xyPlots[name].curves[name].data.axis1QuantityType
session.xyPlots[name].curves[name].data.axis2QuantityType
QuantityType(...)
This method creates a QuantityType object.
Path
session.QuantityType
xyPlot.QuantityType
Required arguments
None.
Optional arguments
A String specifying the label for this quantity type.
label
A SymbolicConstant specifying the physical dimension of the axis. Possible values are:
type
•
NONE.
•
ACCELERATION.
•
ACOUSTIC_INTENSITY.
•
ANGLE.
•
ANGULAR_MOMENTUM.
•
ARC_LENGTH.
•
AREA.
•
AREA_VELOCITY_SQUARED, specifying "Velocity squared per area".
•
BIMOMENT.
•
CURVATURE.
•
CORIOLIS_LOAD.
•
DAMAGE.
•
DAMAGE_CRITERION.
•
DENSITY.
•
DENSITY_ROTATIONAL_ACCELERATION, specifying "Density * Angular acceleration".
•
DISPLACEMENT.
•
ECURRENT_AREA_TIME, specifying "Time integrated electric current per area".
•
ELECTRIC_CHARGE.
•
ELECTRIC_CURRENT.
•
ELECTRIC_CURRENT_AREA, specifying "Electric current per unit area".
•
ELECTRIC_POTENTIAL.
•
ENERGY.
Abaqus Scripting Reference Guide
2652
QuantityType object

•
ENERGY_DENSITY.
•
ENERGY_RELEASE_RATE.
•
EPOTENTIAL_GRADIENT, specifying "Electric potential gradient".
•
FREQUENCY.
•
FORCE.
•
FORCE_VOLUME, specifying "Force per volume".
•
HEAT_FLUX.
•
HEAT_FLUX_AREA, specifying "Heat ﬂux per area".
•
HEAT_FLUX_RATE.
•
HEAT_FLUX_VOLUME, specifying "Heat ﬂux per volume".
•
LENGTH.
•
LINEAR_PRESSURE.
•
LUMIN, specifying "Luminous intensity".
•
MASS.
•
MASS_FLOW_AREA, specifying "Mass ﬂow per area".
•
MASS_FLOW_AREA_RATE, specifying "Mass ﬂow rate per area".
•
MASS_FLOW_RATE.
•
MODE_NUMBER.
•
MOMENT.
•
NUMBER.
•
PATH.
•
PHASE.
•
POSITION.
•
PRESSURE.
•
PRESSURE_GRADIENT.
•
RATE.
•
ROTARY_INERTIA.
•
ROTATIONAL_ACCELERATION.
•
ROTATIONAL_VELOCITY.
•
STATUS.
•
STRAIN.
•
STRAIN_RATE.
•
STRESS.
•
STRESS_INTENS_FACTOR, specifying "Stress intensity factor".
•
SUBSTANCE, specifying "Amount of substance".
•
TEMPERATURE.
•
THICKNESS.
•
TIME.
•
TIME_INCREMENT.
2653
Abaqus Scripting Reference Guide
QuantityType object

•
TIME_HEAT_FLUX, specifying "Time integrated heat ﬂux".
•
TIME_HEAT_FLUX_AREA, specifying "Time integrated heat ﬂux per area".
•
TIME_VOLUME, specifying "Time integrated volume".
•
TIME_VOLUME_FLUX, specifying "Time integrated volume ﬂux per area".
•
TWIST.
•
VELOCITY.
•
VELOCITY_SQUARED.
•
VOLUME.
•
VOLUME_FLUX.
•
VOLUME_FLUX_AREA, specifying "Volume ﬂux per area".
•
VOLUME_FRACTION.
The default value is NONE
Return value
A QuantityType object.
Exceptions
None.
setValues(...)
This method modiﬁes the QuantityType object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the QuantityType  method.
Return value
None.
Exceptions
None.
Members
The QuantityType object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2654
QuantityType object

SymbolStyle object
The SymbolStyle object is used to deﬁne the marker properties to be used when drawing curves.
SymbolStyle objects can be created using the methods described below.
Access
import visualization
session.charts[name].axes1[i].axisData.curves[i].symbolStyle
session.charts[name].axes2[i].axisData.curves[i].symbolStyle
session.charts[name].curves[name].symbolStyle
session.curves[name].symbolStyle
session.defaultChartOptions.defaultAxis1Options.axisData.curves[i]\
.symbolStyle
session.defaultChartOptions.defaultAxis2Options.axisData.curves[i]\
.symbolStyle
session.xyPlots[name].charts[name].axes1[i].axisData.curves[i]\
.symbolStyle
session.xyPlots[name].charts[name].axes2[i].axisData.curves[i]\
.symbolStyle
session.xyPlots[name].charts[name].curves[name].symbolStyle
session.xyPlots[name].curves[name].symbolStyle
SymbolStyle(...)
This method creates a SymbolStyle object.
Path
session.SymbolStyle
xyPlot.SymbolStyle
Required arguments
None.
Optional arguments
A String specifying the color to be used when drawing a marker with this SymbolStyle object. The
default value is "White".
color
A Boolean specifying whether to draw the marker when using this SymbolStyle object. The default
value is ON.
show
A SymbolicConstant specifying the marker type be used when drawing symbols using this
SymbolStyle object. Possible values are:
marker
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
2655
SymbolStyle object

•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
•
CROSS
•
XMARKER
•
POINT
The default value is FILLED_CIRCLE.
A Float specifying the marker size to be used when drawing markers using this SymbolStyle object.
The default value is 2.0.
size
Return value
A SymbolStyle object.
Exceptions
ColorError
setValues(...)
This method modiﬁes the SymbolStyle object.
Required arguments
None.
Optional arguments
A String specifying the color to be used when drawing a marker with this SymbolStyle object. The
default value is "White".
color
A Boolean specifying whether to draw the marker when using this SymbolStyle object. The default
value is ON.
show
A SymbolicConstant specifying the marker type be used when drawing symbols using this
SymbolStyle object. Possible values are:
marker
•
FILLED_CIRCLE
•
FILLED_SQUARE
•
FILLED_DIAMOND
•
FILLED_TRI
•
HOLLOW_CIRCLE
•
HOLLOW_SQUARE
•
HOLLOW_DIAMOND
•
HOLLOW_TRI
Abaqus Scripting Reference Guide
2656
SymbolStyle object

•
CROSS
•
XMARKER
•
POINT
The default value is FILLED_CIRCLE.
A Float specifying the marker size to be used when drawing markers using this SymbolStyle object.
The default value is 2.0.
size
Return value
None.
Exceptions
None.
Members
The SymbolStyle object has members with the same names and descriptions as the arguments to the setValues
method.
2657
Abaqus Scripting Reference Guide
SymbolStyle object

TextStyle object
The TextStyle object is used to store the text properties to be used for drawing XY-plot text objects.
TextStyle objects are automatically created when creating a chart or can be created with methods described below.
Access
import visualization
session.charts[name].axes1[i].labelStyle
session.charts[name].axes1[i].titleStyle
session.charts[name].axes2[i].labelStyle
session.charts[name].axes2[i].titleStyle
session.charts[name].legend.textStyle
session.charts[name].legend.titleStyle
session.charts[name].tagTextStyle
session.defaultChartOptions.defaultAxis1Options.labelStyle
session.defaultChartOptions.defaultAxis1Options.titleStyle
session.defaultChartOptions.defaultAxis2Options.labelStyle
session.defaultChartOptions.defaultAxis2Options.titleStyle
session.defaultChartOptions.legend.textStyle
session.defaultChartOptions.legend.titleStyle
session.defaultChartOptions.tagTextStyle
session.defaultPlot.title.titleStyle
session.xyPlots[name].charts[name].axes1[i].labelStyle
session.xyPlots[name].charts[name].axes1[i].titleStyle
session.xyPlots[name].charts[name].axes2[i].labelStyle
session.xyPlots[name].charts[name].axes2[i].titleStyle
session.xyPlots[name].charts[name].legend.textStyle
session.xyPlots[name].charts[name].legend.titleStyle
session.xyPlots[name].charts[name].tagTextStyle
session.xyPlots[name].title.titleStyle
TextStyle(...)
This method creates a TextStyle.
Path
session.TextStyle
xyPlot.TextStyle
Required arguments
None.
Optional arguments
A String specifying the color to be used when drawing text with this TextStyle object. The
default value is "White".
color
A Boolean specifying whether to draw the text when using this TextStyle object. The default
value is ON.
show
Abaqus Scripting Reference Guide
2658
TextStyle object

A String specifying the name of the font to be used when drawing text with this TextStyle
object. The default value is "-*-verdana-medium-r-normal-*-*-120-*-*-p-*-*-*".
font
A Float specifying the angle in degrees used for displaying the text. The default value is 0.0.
rotationAngle
Return value
A TextStyle object.
Exceptions
ColorError
setValues(...)
This method modiﬁes the TextStyle object.
Required arguments
None.
Optional arguments
A String specifying the color to be used when drawing text with this TextStyle object. The
default value is "White".
color
A Boolean specifying whether to draw the text when using this TextStyle object. The default
value is ON.
show
A String specifying the name of the font to be used when drawing text with this TextStyle
object. The default value is "-*-verdana-medium-r-normal-*-*-120-*-*-p-*-*-*".
font
A Float specifying the angle in degrees used for displaying the text. The default value is 0.0.
rotationAngle
Return value
None.
Exceptions
None.
Members
The TextStyle object has members with the same names and descriptions as the arguments to the setValues  method.
2659
Abaqus Scripting Reference Guide
TextStyle object

Title object
The Title object is used to store the display attributes of the XYPlot title.
A Title object is automatically created when creating a XYPlot object.
Access
import visualization
session.defaultPlot.title
session.xyPlots[name].title
setValues(...)
This method modiﬁes the Title object.
Required arguments
None.
Optional arguments
A Title object from which attributes are to be copied.
title
A String specifying the text to appear as a title. By default the title is set to the XYPlot object
name. The default value is an empty string.
text
An Area object specifying the area of the title.
area
A Boolean specifying whether to show the default title. The default value is OFF.
useDefault
A TextStyle object specifying the text properties used to display the legend title.
style
Return value
None.
Exceptions
None.
Members
The Title object can have the following members:
A Boolean specifying whether to show the default title. The default value is OFF.
useDefault
An Area object specifying the area of the title.
area
A String specifying the text to appear as a title. By default the title is set to the XYPlot object
name. The default value is an empty string.
text
Abaqus Scripting Reference Guide
2660
Title object

A TextStyle object specifying the text properties used to display the legend title.
style
2661
Abaqus Scripting Reference Guide
Title object

XYCurve object
The XYCurve object is used to plot X–Y data and to store its display attributes.
Access
import visualization
session.charts[name].axes1[i].axisData.curves[i]
session.charts[name].axes2[i].axisData.curves[i]
session.charts[name].curves[name]
session.curves[name]
session.defaultChartOptions.defaultAxis1Options.axisData.curves[i]
session.defaultChartOptions.defaultAxis2Options.axisData.curves[i]
session.xyPlots[name].charts[name].axes1[i].axisData.curves[i]
session.xyPlots[name].charts[name].axes2[i].axisData.curves[i]
session.xyPlots[name].charts[name].curves[name]
session.xyPlots[name].curves[name]
Curve(...)
This method creates an XYCurve object from an XYData object.
Path
session.Curve
Required arguments
A String specifying the repository key.
name
An XYData object specifying the data for the curve.
data
Optional arguments
None.
Return value
An XYCurve object.
Exceptions
InvalidNameError.
setValues(...)
This method modiﬁes the XYCurve object.
Required arguments
None.
Abaqus Scripting Reference Guide
2662
XYCurve object

Optional arguments
A sequence of SymbolicConstants specifying that describe how curves are to be displayed.
Possible values are LINE and SYMBOL. The default value is (LINE).
displayTypes
A String specifying the label to be displayed in the legend. By default, the label is system
deﬁned.
legendLabel
An Int specifying the frequency of plotting the markers. Possible values are
symbolFrequency  0. If symbolFrequency=1, then markers are plotted at every point.
The default value is 1.
symbolFrequency
A Boolean specifying whether to use the system supplied legend label. The default value
is ON.
useDefault
Return value
None.
Exceptions
None.
Members
The XYCurve object can have the following members:
A String specifying the repository key.
name
An Int specifying the frequency of plotting the markers. Possible values are
symbolFrequency  0. If symbolFrequency=1, then markers are plotted at every point.
The default value is 1.
symbolFrequency
A Boolean specifying whether to use the system supplied legend label. The default
value is ON.
useDefault
An XYData object specifying the data for the curve.
data
A LineStyle object specifying the line properties used to display the curve.
lineStyle
A CurveOptions object specifying the line and symbol properties used to display the
curve.
curveOptions
An AreaStyle object specifying the properties of the area to diaply the curve.
areaStyle
A SymbolStyle object specifying the symbol properties used to display the curve.
symbolStyle
A String specifying the label to be displayed in the legend. By default, the label is
system deﬁned.
legendLabel
2663
Abaqus Scripting Reference Guide
XYCurve object

A tuple of SymbolicConstants specifying that describe how curves are to be displayed.
Possible values are LINE and SYMBOL. The default value is (LINE).
displayTypes
Abaqus Scripting Reference Guide
2664
XYCurve object

XYPlot object
The XYPlot object is used to display Chart objects.
Access
import visualization
session.xyPlots[name]
XYPlot(...)
This method creates an empty XYPlot object.
Path
session.XYPlot
Required arguments
A String specifying the name of the XYPlot object.
name
Optional arguments
None.
Return value
An XYPlot object.
Exceptions
InvalidNameError.
autoColor(...)
This method distributes the colors on all curves displayed in the XYPlot using the color palette deﬁned by the xyColors
AutoColors object.
Required arguments
None.
Optional arguments
A Boolean deﬁning whether color distribution affects curve lines.
lines
A Boolean deﬁning whether color distribution affects curve symbols.
symbols
Return value
None.
2665
XYPlot object

Exceptions
None.
autoSymbol()
This method distributes the symbols on all curves displayed in the XYPlot.
Arguments
None.
Return value
None.
Exceptions
None.
fitCurves()
This method resets the transform of all the charts of the XYPlot object. It cancels any zoom or pan action.
Arguments
None.
Return value
None.
Exceptions
None.
next(...)
This method restores the transform member of the active Chart object to the next setting in the transform list. (There
is a list of eight transforms stored for each chart.) If there is no next transform, no action is taken.
Required arguments
None.
Optional arguments
A Boolean specifying the viewport should refresh immediately after the command is
processed. This is typically only used when writing a script and it is desirable to show
intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Abaqus Scripting Reference Guide
2666
XYPlot object

Exceptions
None.
previous(...)
This method restores the transform member of the active Chart object to the previous setting in the transform list.
(There is a list of eight transforms stored for each chart.) If there is no next transform, no action is taken.
Required arguments
None.
Optional arguments
A Boolean specifying the viewport should refresh immediately after the command is
processed. This is typically only used when writing a script and it is desirable to show
intermediate results before the script completes. The default value is False.
drawImmediately
Return value
None.
Exceptions
None.
setValues(...)
This method modiﬁes the XYPlot object.
Required arguments
None.
Optional arguments
A Title object specifying the title of the XYPlot object.
title
A sequence of Floats specifying a transformation matrix used to scale or pan along the axes
of the active Chart object of this XYPlot.
transform
Return value
None.
Exceptions
None.
Members
The XYPlot object has members with the same names and descriptions as the arguments to the XYPlot  method.
2667
Abaqus Scripting Reference Guide
XYPlot object

In addition, the XYPlot object can have the following members:
An Area object specifying position, padding, background and borders of the XYPlot
object.
area
A Title object specifying the title of the XYPlot object.
title
A repository of Chart objects.
charts
A repository of XYCurve objects.
curves
A tuple of Floats specifying a transformation matrix used to scale or pan along the axes
of the active Chart object of this XYPlot.
transform
Abaqus Scripting Reference Guide
2668
XYPlot object

XYReportOptions object
The XYReportOptions object stores settings used by the writeXYReport method when you write an XYData object
to an ASCII ﬁle. The XYReportOptions object has no constructor. Abaqus creates the xyReportOptions member when
you import the Visualization module.
Access
import visualization
session.defaultXYReportOptions
session.xyReportOptions
setValues(...)
This method modiﬁes the XYReportOptions object.
Required arguments
None.
Optional arguments
An Int specifying the number of characters per line of the report ﬁle when
pageWidthLimited=ON. Possible values are pageWidth  0. The default value is 80.
pageWidth
An Int specifying the number of signiﬁcant digits to be included for each data value in the
report ﬁle. Possible values are 0 numDigits  9. The default value is 6.
numDigits
A Boolean specifying whether to perform linear interpolation for missing data values. The
default value is OFF.
interpolation
A Boolean specifying whether to print the X- and Y-values of the selected XYData objects.
(If xyData=OFF, totals and minMax can still be printed.) The default value is ON.
xyData
A Boolean specifying whether to print the sum of the Y-values of the selected XYData
objects. The default value is OFF.
totals
A Boolean specifying whether to print the minimum and maximum X- and Y-values of the
selected XYData objects. The default value is OFF.
minMax
A Boolean specifying whether the page width is limited. The default value is OFF.
pageWidthLimited
A SymbolicConstant specifying the number format to be used in reporting XYData objects.
Possible values are AUTOMATIC, ENGINEERING, and SCIENTIFIC. The default value
is ENGINEERING.
numberFormat
A SymbolicConstant specifying the format used in reporting the XYData objects. Possible
values are SINGLE_TABLE and SEPARATE_TABLES. The default value is
SINGLE_TABLE.
layout
2669
XYReportOptions object

Return value
None.
Exceptions
RangeError.
At least one of the data print methods must be selected
If xyData, total, and minMax are all OFF:
Members
The XYReportOptions object has members with the same names and descriptions as the arguments to the setValues
method.
Abaqus Scripting Reference Guide
2670
XYReportOptions object

Session object
The following commands operate on Session objects. For more information about the Session object, see Session
object.
Access
import visualization
linearizeStress(...)
This method is used to perform stress linearization along a deﬁned stress line.
Required arguments
A String specifying the name of the stress line.
name
APath object specifying the end points of the stress line.
path
Note:
You must provide either the path argument or the startPoint and endPoint arguments.
A String specifying a part instance and a node belonging to that part instance, or a sequence
of three Floats specifying the coordinates of a point.
startPoint
A String specifying a part instance and a node belonging to that part instance, or a sequence
of three Floats specifying the coordinates of a point.
endPoint
A SymbolicConstant specifying the model shape to be used for obtaining coordinates of the
intermediate points along the stress line. Possible values are UNDEFORMED and
modelShape
DEFORMED. When DEFORMED is selected, the deformation scale factor is always set to
a uniform value of 1.0.
A sequence of Strings specifying the linearized stress components to be displayed in the
xyPlot object. Possible values are "S11", "S22", "S33", "S12", "S23", and "S13".
components
Note:
You must provide at least one of the components , xyMembraneComps , and
xyBendingComps arguments.
A sequence of Strings specifying the linearized stress membrane components to be displayed
in the xyPlot object. Possible values are "S11", "S22", "S33", "S12", "S23", and "S13".
xyMembraneComps
A sequence of Strings specifying the linearized stress bending components to be displayed
in the xyPlot object. Possible values are "S11", "S22", "S33", "S12", "S23", and "S13".
xyBendingComps
2671
Session object

Optional arguments
A sequence of Strings specifying the linearized stress bending components to be included
in the computation of the linearized stress invariants. Possible values are "S11", "S22",
invariantBendingComps
"S33", "S12", "S23", and "S13". The default value of the sequence includes all the
possible values.
An Int specifying the number of equally-spaced intervals into which the stress line is
to be divided. The default value is 40.
intervals
A Float specifying the in-plane radius of curvature of the center section along the stress
line for axi-symmetric models. The default value is 
.
radiusOfCurvature
A Float specifying the out-of-plane radius of curvature of the center section along the
Stress Line for axi-symmetric models. The default value forces Abaqus to compute the
radius of curvature.
oopRadiusOfCurvature
A Boolean specifying whether the out-of-plane curvature correction should be applied
for nonaxisymmetric models when performing linearized stress computations. Curvature
correction is always applied for axisymmetric models. The default value is OFF.
curvatureCorrection
A String specifying the name of the user-deﬁned local coordinate system to be used for
computing the out-of-plane radius of curvature for nonaxisymmetric models when
curvatureCsys
curvatureCorrection =ON . The default value uses the global coordinate system to
compute the out-of-plane radius of curvature.
A Boolean specifying whether to use the user-deﬁned local coordinate system to compute
the local stress line orientation for nonaxisymmetric models when curvatureCorrection
=ON and curvatureCsys is speciﬁed. The default value is OFF.
useCurvatureCsysForOrient
A Boolean specifying whether to save the xyData objects created during the stress
linearization operation to the session. The default value is OFF .
saveXy
A Boolean specifying whether to use the maximum stress value from available multiple
values at a point. The default value is OFF .
useMaxStressValue
A Boolean specifying whether to write the output from the stress linearization operation
to a text ﬁle. The default value is ON .
writeReport
A String specifying the report ﬁle name. The default value is “linearStress.rpt”.
reportFile
A Boolean specifying whether to append output from the stress linearization to the text
ﬁle speciﬁed by the reportFile argument. The default value is ON .
appendToFile
A Boolean specifying whether to create a Path object containing all the points used
when performing the linearized stress computation. The default value is OFF . When
saveToPath
this argument is set to ON , a Path object is created with the same name as that of the
stress line and placed in the Path repository.
Abaqus Scripting Reference Guide
2672
Session object

Return value
A list of xyData objects.
Exceptions
The stress line passes through incompatible part instances. Results cannot be extracted.
Text Error
Speciﬁed variables cannot be used for extracting results along the stress line.
Text Error
Results for all the points along the stress line were not found. Selected end points and all
intermediate sample points must lie within the current display group, and within solid continuum
Text Error
elements. Due to tolerance limitations, intermediate points lying on display group boundaries
may fail to meet this criterion. Choose new end points, adjust the number of intervals along
the line, or modify the current display group to obtain the stress linearization plot.
setPathTolerance(...)
This method is used to set the tolerance to be used when creating XYData objects by extracting results along Path
objects. This command should be exercised with caution since setting a value too low or too high may result in getting
no results or unpredictable results.
Required arguments
None.
Optional arguments
A Double specifying the tolerance. The default value is 0.00001.
tolerance
Return value
None
Exceptions
None.
getPathTolerance()
This method is used to get the tolerance used when creating XYData objects by extracting results along Path objects.
Arguments
None.
Return value
A Double specifying the tolerance.
2673
Abaqus Scripting Reference Guide
Session object

Exceptions
None.
setLimitForXYDataPlots(...)
This method is used to set the limit for number of XY data objects while creating XYData from ﬁeld output.
Required arguments
None.
Optional arguments
None or an Int specifying the limit for number of XY data objects. The default value is no limit
limit
Return value
None
Exceptions
None.
getLimitForXYDataPlots()
This method is used to get the limit for number of XY data objects while creating XYData from ﬁeld output.
Arguments
None.
Return value
Int specifying the limit for number of XY data objects.
Exceptions
None.
Abaqus Scripting Reference Guide
2674
Session object

writeXYReport
This method writes an XYData object to a user-deﬁned ASCII ﬁle.
writeXYReport
This method writes an XYData object to a user-deﬁned ASCII ﬁle.
Path
session.writeXYReport
Required arguments
A String specifying the name of the ﬁle to which X–Y data will be written.
ﬁleName
A sequence of XYData objects to be written to the output ﬁle.
xyData
Optional arguments
A Boolean specifying whether to append the X–Y data to the existing ﬁle. The
default value is ON.
appendMode
Return value
None.
Exceptions
None.
2675
writeXYReport

C++ commands
C++ commands are used to read and write data from an output database.
In this section:
•
Amplitude commands
•
Beam Section profile commands
•
Connector commands
•
Filter commands
•
Material commands
•
Odb commands
•
Property and Section commands
•
Infrastructure commands
Abaqus Scripting Reference Guide
2676
C++ commands

Amplitude commands
Amplitude commands are used to create arbitrary time or frequency variations of load, displacement, and some
interaction attributes throughout a step using step time or throughout an analysis using total time.
In this section:
•
Amplitude object
•
ActuatorAmplitude object
•
BaselineCorrection object
•
DecayAmplitude object
•
EquallySpacedAmplitude object
•
ModulatedAmplitude object
•
PeriodicAmplitude object
•
PsdDefinition object
•
SmoothStepAmplitude object
•
SolutionDependentAmplitude object
•
SpectrumAmplitude object
•
TabularAmplitude object
•
UserAmplitude object
2677

Amplitude object
The Amplitude object is the abstract base type for other Amplitude objects. The Amplitude object has no explicit
constructor. The methods and members of the Amplitude object are common to all objects derived from the Amplitude.
Access
amplitudeApi.amplitudes()[name]
Members
The Amplitude object has the following members:
Prototype
odb_String name() const;
odb_String timeSpan() const;
An odb_String specifying the repository key.
name
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Abaqus Scripting Reference Guide
2678
Amplitude object

ActuatorAmplitude object
The ActuatorAmplitude object deﬁnes an actuator amplitude curve.
The ActuatorAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
ActuatorAmplitude(...)
This method creates a ActuatorAmplitude object.
Path
amplitudeApi.ActuatorAmplitude
Prototype
odb_ActuatorAmplitude&
ActuatorAmplitude(const odb_String& name,
                  const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
Optional arguments
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Return value
An ActuatorAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the ActuatorAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ActuatorAmplitude  method, except for
the name argument.
2679
ActuatorAmplitude object

Return value
None.
Exceptions
RangeError.
Members
The ActuatorAmplitude object has members with the same names and descriptions as the arguments to the
ActuatorAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
2680
ActuatorAmplitude object

BaselineCorrection object
The BaselineCorrection object modiﬁes an acceleration history to minimize the overall drift of the displacement
obtained from the time integration of the given acceleration.
Access
amplitudeApi.amplitudes()[name].baselineCorrection()
BaselineCorrection(...)
This method creates a BaselineCorrection object.
Path
amplitudeApi.amplitudes()[name].BaselineCorrection
Prototype
odb_BaselineCorrection&
BaselineCorrection(const odb_SequenceDouble& intervals);
Required arguments
None.
Optional arguments
An odb_SequenceDouble specifying the correction time interval end points. Possible values are
positive and monotonically increasing Floats. The default value is an empty sequence.
intervals
Return value
A BaselineCorrection object.
Exceptions
RangeError.
setValues(...)
This method modiﬁes the BaselineCorrection object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the BaselineCorrection  method.
Return value
None.
2681
BaselineCorrection object

Exceptions
RangeError.
Members
The BaselineCorrection object has members with the same names and descriptions as the arguments to the
BaselineCorrection  method.
Corresponding analysis keywords
•
*BASELINE CORRECTION
Abaqus Scripting Reference Guide
2682
BaselineCorrection object

DecayAmplitude object
The DecayAmplitude object deﬁnes an amplitude curve using an exponential decay.
The DecayAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
DecayAmplitude(...)
This method creates a DecayAmplitude object.
Path
amplitudeApi.DecayAmplitude
Prototype
odb_DecayAmplitude&
DecayAmplitude(const odb_String& name,
               double initial,
               double maximum,
               double start,
               double decayTime,
               const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the constant 
.
initial
A Double specifying the coefﬁcient .
maximum
A Double specifying the starting time 
. Possible values are non-negative numbers.
start
A Double specifying the decay time 
. Possible values are non-negative numbers.
decayTime
Optional arguments
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Return value
A DecayAmplitude object.
2683
DecayAmplitude object

Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the DecayAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the DecayAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The DecayAmplitude object has members with the same names and descriptions as the arguments to the DecayAmplitude
method.
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
2684
DecayAmplitude object

EquallySpacedAmplitude object
The EquallySpacedAmplitude object deﬁnes a list of amplitude values at ﬁxed time intervals beginning at a speciﬁed
value of time.
The EquallySpacedAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
EquallySpacedAmplitude(...)
This method creates an EquallySpacedAmplitude object.
Path
amplitudeApi.EquallySpacedAmplitude
Prototype
odb_EquallySpacedAmplitude&
EquallySpacedAmplitude(const odb_String& name,
                       double fixedInterval,
                       const odb_SequenceDouble& data,
                       double begin,
                       odb_Union smooth,
                       const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the ﬁxed time interval at which the amplitude data are given.
Possible values are positive numbers.
ﬁxedInterval
An odb_SequenceDouble specifying the amplitude values.
data
Optional arguments
A Double specifying the time at which the ﬁrst amplitude data are given. Possible values are
non-negative numbers. The default value is 0.0.
begin
The string "SOLVER_DEFAULT" or a Double specifying the degree of smoothing. Possible
ﬂoat values are 0 smoothing  0.5. If smooth="SOLVER_DEFAULT", the default degree of
smoothing will be determined by the solver. The default value is "SOLVER_DEFAULT".
smooth
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
2685
EquallySpacedAmplitude object

Return value
An EquallySpacedAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the EquallySpacedAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the EquallySpacedAmplitude  method,
except for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The EquallySpacedAmplitude object has members with the same names and descriptions as the arguments to the
EquallySpacedAmplitude  method.
In addition, the EquallySpacedAmplitude object can have the following member:
Prototype
odb_BaselineCorrection baselineCorrection() const;
A BaselineCorrection object.
baselineCorrection
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
2686
EquallySpacedAmplitude object

ModulatedAmplitude object
The ModulatedAmplitude object deﬁnes a modulated amplitude curve.
The ModulatedAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
ModulatedAmplitude(...)
This method creates a ModulatedAmplitude object.
Path
amplitudeApi.ModulatedAmplitude
Prototype
odb_ModulatedAmplitude&
ModulatedAmplitude(const odb_String& name,
                   double initial,
                   double magnitude,
                   double start,
                   double frequency1,
                   double frequency2,
                   const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the constant 
.
initial
A Double specifying the coefﬁcient .
magnitude
A Double specifying the starting time 
. Possible values are non-negative numbers.
start
A Double specifying the circular frequency 1 (
). Possible values are positive
numbers.
frequency1
A Double specifying the circular frequency 2 (
). Possible values are positive
numbers.
frequency2
Optional arguments
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
2687
ModulatedAmplitude object

Return value
A ModulatedAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the ModulatedAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ModulatedAmplitude  method, except
for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The ModulatedAmplitude object has members with the same names and descriptions as the arguments to the
ModulatedAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
2688
ModulatedAmplitude object

PeriodicAmplitude object
The PeriodicAmplitude object deﬁnes an amplitude curve using a Fourier series.
The PeriodicAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
PeriodicAmplitude(...)
This method creates a PeriodicAmplitude object.
Path
amplitudeApi.PeriodicAmplitude
Prototype
odb_PeriodicAmplitude&
PeriodicAmplitude(const odb_String& name,
                  double frequency,
                  double start,
                  double a_0,
                  const odb_SequenceSequenceDouble& data,
                  const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the circular frequency . Possible values are positive numbers.
frequency
A Double specifying the starting time 
. Possible values are positive numbers.
start
A Double specifying the constant 
.
a_0
An odb_SequenceSequenceDouble specifying 
 and 
 pairs.
data
Optional arguments
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Return value
A PeriodicAmplitude object.
2689
PeriodicAmplitude object

Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the PeriodicAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PeriodicAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The PeriodicAmplitude object has members with the same names and descriptions as the arguments to the
PeriodicAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
2690
PeriodicAmplitude object

PsdDefinition object
The PsdDeﬁnition object deﬁnes the cross-spectral density frequency function for random response loading.
The PsdDeﬁnition object is derived from the Amplitude object.
Access
Api.amplitudes()[name]
PsdDefinition(...)
This method creates a PsdDeﬁnition object.
Path
Api.PsdDefinition
Prototype
odb_PsdDefinition&
PsdDefinition(const odb_String& name,
              const odb_SequenceSequenceDouble& data,
              const odb_String& unitType,
              double referenceGravityAcceleration,
              double referenecePower,
              bool user,
              const odb_String& timeSpan,
              const odb_String& amplitude);
Required arguments
An odb_String specifying the repository key.
name
An odb_SequenceSequenceDouble specifying the real part of the frequency function, the imaginary
part of the frequency function, and the frequency or frequency band number values, depending
on the value of unitType.
data
Optional arguments
An odb_String specifying the type of units for specifying the frequency function.
"FORCE" implies power units. "BASE" implies gravity used to deﬁne base motion.
unitType
"DB" implies decibel units. Possible values are "FORCE", "BASE", and "DB". The
default value is "FORCE".
A Double specifying the reference gravity acceleration. This argument applies when
unitType = "BASE". The default value is 1.0.
referenceGravityAcceleration
A Double specifying the reference power value, in load units squared. This argument
applies when unitType = "DB". The default value is 0.0.
referenecePower
2691
PsdDefinition object

A Boolean specifying whether the frequency function is deﬁned in user subroutine
UPSD. If speciﬁed, then data is not applicable, and the unitType value must not be
"DB". The default value is false.
user
An odb_String specifying the time span of the amplitude. Possible values are "STEP"
and "TOTAL". The default value is "STEP".
timeSpan
An odb_String specifying the name of the amplitude that describes the dynamic event
used to deﬁne the cross-spectral density frequency function. The default value is an
empty string.
amplitude
Return value
A PsdDeﬁnition object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the PsdDeﬁnition object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the PsdDeﬁnition  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The PsdDeﬁnition object has members with the same names and descriptions as the arguments to the PsdDeﬁnition
method.
Corresponding analysis keywords
•
*PSD-DEFINITION
Abaqus Scripting Reference Guide
2692
PsdDefinition object

SmoothStepAmplitude object
The SmoothStepAmplitude object deﬁnes an amplitude that ramps up or down smoothly from one data point to another.
The SmoothStepAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
SmoothStepAmplitude(...)
This method creates a SmoothStepAmplitude object.
Path
amplitudeApi.SmoothStepAmplitude
Prototype
odb_SmoothStepAmplitude&
SmoothStepAmplitude(const odb_String& name,
                    const odb_SequenceSequenceDouble& data,
                    const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
An odb_SequenceSequenceDouble specifying time/frequency and amplitude pairs. Possible
values for time/frequency are positive numbers.
data
Optional arguments
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Return value
A SmoothStepAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the SmoothStepAmplitude object.
Required arguments
None.
2693
SmoothStepAmplitude object

Optional arguments
The optional arguments to setValues are the same as the arguments to the SmoothStepAmplitude  method, except
for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The SmoothStepAmplitude object has members with the same names and descriptions as the arguments to the
SmoothStepAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
2694
SmoothStepAmplitude object

SolutionDependentAmplitude object
The SolutionDependentAmplitude object deﬁnes a solution-dependent amplitude for superplastic forming analysis.
The SolutionDependentAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
SolutionDependentAmplitude(...)
This method creates a SolutionDependentAmplitude object.
Path
amplitudeApi.SolutionDependentAmplitude
Prototype
odb_SolutionDependentAmplitude&
SolutionDependentAmplitude(const odb_String& name,
                           double initial,
                           double minimum,
                           double maximum,
                           const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
Optional arguments
A Double specifying the initial amplitude value. Possible values are those between minimum
and maximum. The default value is 1.0.
initial
A Double specifying the minimum amplitude value. Possible values are those smaller than
maximum and initial. The default value is 0.1.
minimum
A Double specifying the maximum amplitude value. Possible values are those larger than
minimum and initial. The default value is 1000.0.
maximum
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Return value
A SolutionDependentAmplitude object.
Exceptions
InvalidNameError and RangeError.
2695
SolutionDependentAmplitude object

setValues(...)
This method modiﬁes the SolutionDependentAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SolutionDependentAmplitude  method,
except for the name argument.
Return value
None.
Exceptions
RangeError.
Members
The SolutionDependentAmplitude object has members with the same names and descriptions as the arguments to the
SolutionDependentAmplitude  method.
Corresponding analysis keywords
•
*AMPLITUDE
Abaqus Scripting Reference Guide
2696
SolutionDependentAmplitude object

SpectrumAmplitude object
The SpectrumAmplitude object deﬁnes the spectrum of responses for displacement, velocity, or acceleration to be
used in a response spectrum analysis.
The SpectrumAmplitude object is derived from the Amplitude object.
Access
Api.amplitudes()[name]
SpectrumAmplitude(...)
This method creates a SpectrumAmplitude object.
Path
Api.SpectrumAmplitude
Prototype
odb_SpectrumAmplitude&
SpectrumAmplitude(const odb_String& name,
                  const odb_String& method,
                  const odb_SequenceSequenceDouble& data,
                  const odb_String& specificationUnits,
                  const odb_String& eventUnits,
                  const odb_String& solution,
                  double timeIncrement,
                  double gravity,
                  bool criticalDamping,
                  const odb_String& timeSpan,
                  const odb_String& amplitude);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the method for specifying the spectrum. Possible values are
"DEFINE" and "CALCULATE".
method
An odb_SequenceSequenceDouble specifying the magnitude, frequency, and damping values.
data
Optional arguments
An odb_String specifying the units used for specifying the spectrum. Possible values are
"DISPLACEMENT", "VELOCITY", "ACCELERATION", and "GRAVITY". The default
value is "ACCELERATION".
speciﬁcationUnits
An odb_String specifying the units used to describe the dynamic event in the amplitude used
for the calculation. Possible values are "EVENT_DISPLACEMENT", "EVENT_VELOCITY",
eventUnits
"EVENT_ACCELERATION", and "EVENT_GRAVITY". The default value is
"EVENT_ACCELERATION".
2697
SpectrumAmplitude object

An odb_String specifying the solution method for the dynamic equations. Possible values are
"ABSOLUTE_VALUE" and "RELATIVE_VALUE". The default value is
"ABSOLUTE_VALUE".
solution
A Double specifying the implicit time increment used to calculate the spectrum. This argument
is required when the method = "CALCULATE". The default value is 0.0.
timeIncrement
A Double specifying the acceleration due to gravity. This argument applies only when
speciﬁcationUnits = "GRAVITY" oreventUnits = "GRAVITY". The default value is 1.0.
gravity
A Boolean specifying whether to calculate the spectrum for only the speciﬁed range of critical
damping values or a list of values. If criticalDamping = true, the spectrum is calculated only
criticalDamping
for the speciﬁed range of critical damping values. If criticalDamping = false, the spectrum is
calculated for a list of damping values. The default value is false.
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
An odb_String specifying the name of the amplitude that describes the dynamic event used to
calculate the spectrum. The default value is an empty string.
amplitude
Return value
A SpectrumAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the SpectrumAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the SpectrumAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
2698
SpectrumAmplitude object

Members
The SpectrumAmplitude object has members with the same names and descriptions as the arguments to the
SpectrumAmplitude  method.
Corresponding analysis keywords
•
*SPECTRUM
2699
Abaqus Scripting Reference Guide
SpectrumAmplitude object

TabularAmplitude object
The TabularAmplitude object deﬁnes an amplitude curve as a table of values at convenient points on the time scale.
The TabularAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
TabularAmplitude(...)
This method creates a TabularAmplitude object.
Path
amplitudeApi.TabularAmplitude
Prototype
odb_TabularAmplitude&
TabularAmplitude(const odb_String& name,
                 const odb_SequenceSequenceDouble& data,
                 odb_Union smooth,
                 const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
An odb_SequenceSequenceDouble specifying time/frequency and amplitude pairs. Possible
values for time/frequency are positive numbers.
data
Optional arguments
The string "SOLVER_DEFAULT" or a Double specifying the degree of smoothing. Possible
ﬂoat values are between 0 and 0.5. If smooth="SOLVER_DEFAULT", the default degree of
smoothing will be determined by the solver. The default value is "SOLVER_DEFAULT".
smooth
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Return value
A TabularAmplitude object.
Exceptions
InvalidNameError and RangeError.
Abaqus Scripting Reference Guide
2700
TabularAmplitude object

setValues(...)
This method modiﬁes the TabularAmplitude object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TabularAmplitude  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The TabularAmplitude object has members with the same names and descriptions as the arguments to the
TabularAmplitude  method.
In addition, the TabularAmplitude object can have the following member:
Prototype
odb_BaselineCorrection baselineCorrection() const;
A BaselineCorrection object.
baselineCorrection
Corresponding analysis keywords
•
*AMPLITUDE
2701
Abaqus Scripting Reference Guide
TabularAmplitude object

UserAmplitude object
The UserAmplitude object deﬁnes an amplitude curve using the UAMP or VUAMP user subroutine.
The UserAmplitude object is derived from the Amplitude object.
Access
amplitudeApi.amplitudes()[name]
UserAmplitude(...)
This method creates a UserAmplitude object.
Path
amplitudeApi.UserAmplitude
Prototype
odb_UserAmplitude&
UserAmplitude(const odb_String& name,
              int numVariables,
              const odb_String& timeSpan);
Required arguments
An odb_String specifying the repository key.
name
An Int specifying the number of variables for the UAMP or VUAMP user subroutine.
numVariables
Optional arguments
An odb_String specifying the time span of the amplitude. Possible values are "STEP" and
"TOTAL". The default value is "STEP".
timeSpan
Return value
A UserAmplitude object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the UserAmplitude object.
Required arguments
None.
Abaqus Scripting Reference Guide
2702
UserAmplitude object

Optional arguments
The optional arguments to setValues are the same as the arguments to the UserAmplitude  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The UserAmplitude object has members with the same names and descriptions as the arguments to the UserAmplitude
method.
Corresponding analysis keywords
•
*AMPLITUDE
2703
Abaqus Scripting Reference Guide
UserAmplitude object

Beam Section profile commands
The Beam Section proﬁle commands are used to create proﬁles. A proﬁle deﬁnition speciﬁes the properties of
a beam that are related to its cross-section geometry. When you deﬁne a beam section, you must include a
reference to a proﬁle in the section deﬁnition.
In this section:
•
Profile object
•
ArbitraryProfile object
•
BoxProfile object
•
CircularProfile object
•
GeneralizedProfile object
•
HexagonalProfile object
•
IProfile object
•
LProfile object
•
PipeProfile object
•
RectangularProfile object
•
TProfile object
•
TrapezoidalProfile object
Abaqus Scripting Reference Guide
2704

Profile object
The Proﬁle object deﬁnes the geometrical properties of a beam cross-section. Proﬁle is an abstract base type.
Access
sectionApi.profiles()[name]
Members
The Proﬁle object has the following member:
Prototype
odb_String name() const;
An odb_String specifying the repository key.
name
2705
Profile object

ArbitraryProfile object
The ArbitraryProﬁle object deﬁnes the properties of an arbitrary proﬁle.
The ArbitraryProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
ArbitraryProfile(...)
This method creates a ArbitraryProﬁle object.
Path
sectionApi.ArbitraryProfile
Prototype
odb_ArbitraryProfile&
ArbitraryProfile(const odb_String& name,
                 const odb_SequenceSequenceDouble& table);
Required arguments
An odb_String specifying the repository key.
name
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
The ﬁrst sequence in the table speciﬁes the following:
•
1-coordinate of the ﬁrst point deﬁning the proﬁle.
•
2-coordinate of the ﬁrst point deﬁning the proﬁle.
All other sequences in the table specify the following:
•
1–coordinate of the next point deﬁning the proﬁle.
•
2–coordinate of the next point deﬁning the proﬁle.
•
The thickness of the segment ending at that point.
Return value
An ArbitraryProﬁle object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
2706
ArbitraryProfile object

Members
The ArbitraryProﬁle object has members with the same names and descriptions as the arguments to the ArbitraryProﬁle
method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=ARBITRARY
2707
Abaqus Scripting Reference Guide
ArbitraryProfile object

BoxProfile object
The BoxProﬁle object deﬁnes the properties of a box proﬁle.
The BoxProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
BoxProfile(...)
This method creates a BoxProﬁle object.
Path
sectionApi.BoxProfile
Prototype
odb_BoxProfile&
BoxProfile(const odb_String& name,
           double a,
           double b,
           bool uniformThickness,
           double t1,
           double t2,
           double t3,
           double t4);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the a dimension of the box proﬁle. For more information, see Beam
Cross-Section Library.
a
A Double specifying the b dimension of the box proﬁle.
b
A Boolean specifying whether the thickness is uniform.
uniformThickness
A Double specifying the uniform wall thickness if uniformThickness=true, and the wall
thickness of the ﬁrst segment if uniformThickness=false.
t1
Optional arguments
A Double specifying the wall thickness of the second segment. t2 is required only when
uniformThickness=false. The default value is 0.0.
t2
A Double specifying the wall thickness of the third segment. t3 is required only when
uniformThickness=false. The default value is 0.0.
t3
Abaqus Scripting Reference Guide
2708
BoxProfile object

A Double specifying the wall thickness of the fourth segment. t4 is required only when
uniformThickness=false. The default value is 0.0.
t4
Return value
A BoxProﬁle object.
Exceptions
RangeError.
Members
The BoxProﬁle object has members with the same names and descriptions as the arguments to the BoxProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=BOX
2709
Abaqus Scripting Reference Guide
BoxProfile object

CircularProfile object
The CircularProﬁle object deﬁnes the properties of a solid circular proﬁle.
The CircularProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
CircularProfile(...)
This method creates a CircularProﬁle object.
Path
sectionApi.CircularProfile
Prototype
odb_CircularProfile&
CircularProfile(const odb_String& name,
                double r);
Required arguments
An odb_String specifying the repository key.
name
A positive Double specifying the r dimension (outer radius) of the circular proﬁle. For more
information, see Beam Cross-Section Library.
r
Optional arguments
None.
Return value
A CircularProﬁle object.
Exceptions
RangeError.
Members
The CircularProﬁle object has members with the same names and descriptions as the arguments to the CircularProﬁle
method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=CIRC
Abaqus Scripting Reference Guide
2710
CircularProfile object

GeneralizedProfile object
The GeneralizedProﬁle object deﬁnes the properties of a proﬁle via its area, moment of inertia, etc.
The GeneralizedProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
GeneralizedProfile(...)
This method creates a GeneralizedProﬁle object.
Path
sectionApi.GeneralizedProfile
Prototype
odb_GeneralizedProfile&
GeneralizedProfile(const odb_String& name,
                   double area,
                   double i11,
                   double i12,
                   double i22,
                   double j,
                   double gammaO,
                   double gammaW);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the cross-sectional area for the proﬁle.
area
A Double specifying the moment of inertia for bending about the 1-axis, 
.
i11
A Double specifying the moment of inertia for cross bending, 
.
i12
A Double specifying the moment of inertia for bending about the 2-axis, 
.
i22
A Double specifying the torsional constant, .
j
A Double specifying the sectorial moment, 
.
gammaO
A Double specifying the warping constant, 
.
gammaW
Optional arguments
None.
2711
GeneralizedProfile object

Return value
A GeneralizedProﬁle object.
Exceptions
RangeError.
Members
The GeneralizedProﬁle object has members with the same names and descriptions as the arguments to the
GeneralizedProﬁle  method.
Corresponding analysis keywords
•
*BEAM GENERAL SECTION, SECTION=GENERAL or NONLINEAR GENERAL
Abaqus Scripting Reference Guide
2712
GeneralizedProfile object

HexagonalProfile object
The HexagonalProﬁle object deﬁnes the properties of a hexagonal proﬁle.
The HexagonalProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
HexagonalProfile(...)
This method creates a HexagonalProﬁle object.
Path
sectionApi.HexagonalProfile
Prototype
odb_HexagonalProfile&
HexagonalProfile(const odb_String& name,
                 double r,
                 double t);
Required arguments
An odb_String specifying the repository key.
name
A positive Double specifying the r dimension (outer radius) of the hexagonal proﬁle. For more
information, see Beam Cross-Section Library.
r
A positive Double specifying the t dimension (wall thickness) of the hexagonal proﬁle, t < (sqrt(3)/2)r.
t
Optional arguments
None.
Return value
A HexagonalProﬁle object.
Exceptions
RangeError.
Members
The HexagonalProﬁle object has members with the same names and descriptions as the arguments to the
HexagonalProﬁle  method.
2713
HexagonalProfile object

Corresponding analysis keywords
•
*BEAM SECTION, SECTION=HEX
Abaqus Scripting Reference Guide
2714
HexagonalProfile object

IProfile object
The IProﬁle object deﬁnes the properties of an I proﬁle.
The IProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
IProfile(...)
This method creates an IProﬁle object.
Path
sectionApi.IProfile
Prototype
odb_IProfile&
IProfile(const odb_String& name,
         double l,
         double h,
         double b1,
         double b2,
         double t1,
         double t2,
         double t3);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the l dimension (offset of 1–axis from the bottom ﬂange surface) of the I proﬁle.
For more information, see Beam Cross-Section Library.
l
A Double specifying the h dimension (height) of the I proﬁle.
h
A Double specifying the b1 dimension (bottom ﬂange width) of the I proﬁle.
b1
A Double specifying the b2 dimension (top ﬂange width) of the I proﬁle.
b2
A Double specifying the t1 dimension (bottom ﬂange thickness) of the I proﬁle.
t1
A Double specifying the t2 dimension (top ﬂange thickness) of the I proﬁle.
t2
A Double specifying the t3 dimension (web thickness) of the I proﬁle.
t3
Optional arguments
None.
2715
IProfile object

Return value
An IProﬁle object.
Exceptions
RangeError.
Members
The IProﬁle object has members with the same names and descriptions as the arguments to the IProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=I
Abaqus Scripting Reference Guide
2716
IProfile object

LProfile object
The LProﬁle object deﬁnes the properties of a L proﬁle.
The LProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
LProfile(...)
This method creates a LProﬁle object.
Path
sectionApi.LProfile
Prototype
odb_LProfile&
LProfile(const odb_String& name,
         double a,
         double b,
         double t1,
         double t2);
Required arguments
An odb_String specifying the repository key.
name
A positive Double specifying the a dimension (ﬂange length) of the L proﬁle. For more information,
see Beam Cross-Section Library.
a
A positive Double specifying the b dimension (ﬂange length) of the L proﬁle.
b
A positive Double specifying the t1 dimension (ﬂange thickness) of the L proﬁle (t1 < b).
t1
A positive Double specifying the t2 dimension (ﬂange thickness) of the L proﬁle (t2< a).
t2
Optional arguments
None.
Return value
A LProﬁle object.
Exceptions
RangeError.
2717
LProfile object

Members
The LProﬁle object has members with the same names and descriptions as the arguments to the LProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=L
Abaqus Scripting Reference Guide
2718
LProfile object

PipeProfile object
The PipeProﬁle object deﬁnes the properties of a circular pipe proﬁle.
The PipeProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
PipeProfile(...)
This method creates a PipeProﬁle object.
Path
sectionApi.PipeProfile
Prototype
odb_PipeProfile&
PipeProfile(const odb_String& name,
            double r,
            double t,
            const odb_String& formulation);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the outer radius of the pipe. For more information, see Beam Cross-Section
Library.
r
A Double specifying the wall thickness of the pipe.
t
Optional arguments
None.
Return value
A PipeProﬁle object.
Exceptions
RangeError.
Members
The PipeProﬁle object has members with the same names and descriptions as the arguments to the PipeProﬁle method.
2719
PipeProfile object

Corresponding analysis keywords
•
*BEAM SECTION, SECTION=PIPE
•
*BEAM SECTION, SECTION=THICK PIPE
Abaqus Scripting Reference Guide
2720
PipeProfile object

RectangularProfile object
The RectangularProﬁle object deﬁnes the properties of a solid rectangular proﬁle.
The RectangularProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
RectangularProfile(...)
This method creates a RectangularProﬁle object.
Path
sectionApi.RectangularProfile
Prototype
odb_RectangularProfile&
RectangularProfile(const odb_String& name,
                   double a,
                   double b);
Required arguments
An odb_String specifying the repository key.
name
A positive Double specifying the a dimension of the rectangular proﬁle. For more information, see
Beam Cross-Section Library.
a
A positive Double specifying the b dimension of the rectangular proﬁle.
b
Optional arguments
None.
Return value
A RectangularProﬁle object.
Exceptions
RangeError.
Members
The RectangularProﬁle object has members with the same names and descriptions as the arguments to the
RectangularProﬁle  method.
2721
RectangularProfile object

Corresponding analysis keywords
•
*BEAM SECTION, SECTION=RECT
Abaqus Scripting Reference Guide
2722
RectangularProfile object

TProfile object
The TProﬁle object deﬁnes the properties of a T proﬁle.
The TProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
TProfile(...)
This method creates a TProﬁle object.
Path
sectionApi.TProfile
Prototype
odb_TProfile&
TProfile(const odb_String& name,
         double b,
         double h,
         double l,
         double tf,
         double tw);
Required arguments
An odb_String specifying the repository key.
name
A positive Double specifying the b dimension (ﬂange width) of the T proﬁle. For more information,
see Beam Cross-Section Library.
b
A positive Double specifying the h dimension (height) of the T proﬁle.
h
A positive Double specifying the l dimension (offset of 1–axis from the edge of web) of the T proﬁle.
l
A positive Double specifying the tf dimension (ﬂange thickness) of the T proﬁle (tf < h).
tf
A positive Double specifying the tw dimension (web thickness) of the T proﬁle (tw< b).
tw
Optional arguments
None.
Return value
A TProﬁle object.
2723
TProfile object

Exceptions
RangeError.
Members
The TProﬁle object has members with the same names and descriptions as the arguments to the TProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=I
Abaqus Scripting Reference Guide
2724
TProfile object

TrapezoidalProfile object
The TrapezoidalProﬁle object deﬁnes the properties of a trapezoidal proﬁle.
The TrapezoidalProﬁle object is derived from the Proﬁle object.
Access
sectionApi.profiles()[name]
TrapezoidalProfile(...)
This method creates a TrapezoidalProﬁle object.
Path
sectionApi.TrapezoidalProfile
Prototype
odb_TrapezoidalProfile&
TrapezoidalProfile(const odb_String& name,
                   double a,
                   double b,
                   double c,
                   double d);
Required arguments
An odb_String specifying the repository key.
name
A positive Double specifying the a dimension of the Trapezoidal proﬁle. For more information, see
Beam Cross-Section Library.
a
A positive Double specifying the b dimension of the Trapezoidal proﬁle.
b
A positive Double specifying the c dimension of the Trapezoidal proﬁle.
c
A Double specifying the d dimension of the Trapezoidal proﬁle.
d
Optional arguments
None.
Return value
A TrapezoidalProﬁle object.
Exceptions
RangeError.
2725
TrapezoidalProfile object

Members
The TrapezoidalProﬁle object has members with the same names and descriptions as the arguments to the
TrapezoidalProﬁle  method.
Corresponding analysis keywords
•
*BEAM SECTION, SECTION=TRAPEZOID
Abaqus Scripting Reference Guide
2726
TrapezoidalProfile object

Connector commands
A connector describes the relative motions between two points. A connector also describes the behavior associated
with the relative motion.
In this section:
•
ConnectorBehaviorOption object
•
CDCTerm object
•
ConnectorDamage object
•
ConnectorDamping object
•
ConnectorElasticity object
•
ConnectorFailure object
•
ConnectorFriction object
•
ConnectorLock object
•
ConnectorOptions object
•
ConnectorPlasticity object
•
ConnectorPotential object
•
ConnectorStop object
•
DerivedComponent object
•
TangentialBehavior object
2727

ConnectorBehaviorOption object
The ConnectorBehaviorOption object is the abstract base type for other ConnectorBehaviorOption objects. The
ConnectorBehaviorOption object has no explicit constructor. The members of the ConnectorBehaviorOption object
are common to all objects derived from the ConnectorBehaviorOption.
Access
sectionApi.sections()[name].behaviorOptions(i)
Members
The ConnectorBehaviorOption object has no members.
Abaqus Scripting Reference Guide
2728
ConnectorBehaviorOption object

CDCTerm object
The CDCTerm object is used to create contributing terms for a DerivedComponent object.
Access
sectionApi.sections()[name].behaviorOptions(i).connectorPotentials(i)\
.derivedComponent().cdcTerms(i)
sectionApi.sections()[name].behaviorOptions(i).derivedComponent()\
.cdcTerms(i)
sectionApi.sections()[name].behaviorOptions(i).evolutionPotentials(i)\
.derivedComponent().cdcTerms(i)
sectionApi.sections()[name].behaviorOptions(i).initiationPotentials(i)\
.derivedComponent().cdcTerms(i)
CDCTerm(...)
This method creates a CDCTerm object.
Path
sectionApi.sections()[name].behaviorOptions(i).connectorPotentials(i)\
.derivedComponent().CDCTerm
sectionApi.sections()[name].behaviorOptions(i).derivedComponent()\
.CDCTerm
sectionApi.sections()[name].behaviorOptions(i).evolutionPotentials(i)\
.derivedComponent().CDCTerm
sectionApi.sections()[name].behaviorOptions(i).initiationPotentials(i)\
.derivedComponent().CDCTerm
Prototype
odb_CDCTerm&
CDCTerm(const odb_SequenceInt& intrinsicComponents,
        const odb_SequenceSequenceDouble& table,
        const odb_String& termOperator,
        const odb_String& termSign,
        bool localDependency,
        const odb_String& indepCompType,
        const odb_SequenceInt& indepComponents,
        bool tempDependency,
        int fieldDependencies);
Required arguments
An odb_SequenceInt specifying the components of relative motion for which the contributing
term is deﬁned. Possible values are 1 intrinsicComponents  6. Only available components
intrinsicComponents
can be speciﬁed if the DerivedComponent object is being referenced by a Potential object. This
is not the case if the DerivedComponent object is referenced by a ConnectorFriction object
directly. The default value is an empty sequence.
An odb_SequenceSequenceDouble specifying components numbers and temperature and ﬁeld
values. Each sequence of the table data speciﬁes:
table
2729
CDCTerm object

•
The ﬁrst intrinsic component number.
•
If applicable, the second intrinsic component number.
•
Etc.
•
If applicable, the ﬁrst independent component number.
•
If applicable, the second independent component number.
•
Etc.
•
If applicable, the temperature value.
•
If applicable, the value of the ﬁrst ﬁeld variable.
•
If applicable, the value of the second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
Optional arguments
An odb_String specifying the method for combining contributing terms: square root of a
sum of the squares, direct sum, or Macauley sum. Possible values are "RSS", "SUM", and
"MACAULEY". The default value is "RSS".
termOperator
An odb_String specifying the overall sign for the contributing term. Possible values are
"POSITIVE" and "NEGATIVE". The default value is "POSITIVE".
termSign
A Boolean specifying whether the table data depend on either components of relative
position or components of constitutive relative motion. The default value is false.
localDependency
An odb_String specifying whether localDependency refers to components of relative
position or components of constitutive relative motion. Possible values are "POSITION"
and "MOTION". The default value is "POSITION".
indepCompType
The indepCompType argument applies only if localDependency=true.
An odb_SequenceInt specifying the independent components included in the derived
component deﬁnition. Possible values are 1 indepComponents  6. Only available
indepComponents
components can be speciﬁed. The indepComponents argument applies only if
localDependency=true. The default value is an empty sequence.
A Boolean specifying whether the table data depend on temperature. The default value is
false.
tempDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
ﬁeldDependencies
Return value
A CDCTerm object.
Exceptions
ValueError and TextError.
Abaqus Scripting Reference Guide
2730
CDCTerm object

setValues(...)
This method modiﬁes the CDCTerm object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the CDCTerm  method.
Return value
None.
Exceptions
ValueError.
Members
The CDCTerm object has members with the same names and descriptions as the arguments to the CDCTerm  method.
In addition, the CDCTerm object can have the following member:
Prototype
odb_ConnectorOptions options() const;
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular options
for this ConnectorBehaviorOption.
options
2731
Abaqus Scripting Reference Guide
CDCTerm object

ConnectorDamage object
The ConnectorDamage object deﬁnes damage behavior for one or more components of a connector's relative motion.
The ConnectorDamage object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorDamage(...)
This method creates a connector damage behavior option for a ConnectorSection object.
Path
sectionApi.sections()[name].ConnectorDamage
Prototype
odb_ConnectorDamage&
ConnectorDamage(const odb_String& coupling,
  const odb_String& criterion,
  bool initiationTemperature,
  const odb_String& initiationPotentialOperator,
  double initiationPotentialExponent,
  int initiationDependencies,
  bool evolution,
  const odb_String& evolutionType,
  const odb_String& softening,
  bool useAffected,
  const odb_String& degradation,
  bool evolutionTemperature,
  int evolutionDependencies,
  const odb_String& evolutionPotentialOperator,
  double evolutionPotentialExponent,
  const odb_SequenceConnectorPotential& initiationPotentials,
  const odb_SequenceConnectorPotential& evolutionPotentials,
  const odb_SequenceSequenceDouble& initiationTable,
  const odb_SequenceSequenceDouble& evolutionTable,
  const odb_SequenceInt& affectedComponents,
  const odb_SequenceInt& components);
Required arguments
None.
Optional arguments
An odb_String specifying whether or not the behavior is coupled. Possible values are
"UNCOUPLED" and "COUPLED". The default value is "UNCOUPLED".
coupling
An odb_String specifying the damage initiation criterion to be used. Possible values are
"FORCE", "MOTION", and "PLASTIC_MOTION". The default value is "FORCE".
criterion
Abaqus Scripting Reference Guide
2732
ConnectorDamage object

A Boolean specifying whether the initiation data depend on temperature. The default
value is false.
initiationTemperature
An odb_String specifying the contribution operator for the initiation potential
contributions. Possible values are "SUM" and "MAXIMUM". The default value is
"SUM".
initiationPotentialOperator
This argument is only if coupling="COUPLED" and if criterion="FORCE" or
"MOTION".
A Double specifying the number equal to the inverse of the overall exponent in the
initiation potential deﬁnition. The default value is 2.0.
initiationPotentialExponent
This argument is applicable only if coupling="COUPLED", when
initiationPotentialOperator="SUM", and when criterion="FORCE" or "MOTION".
An Int specifying the number of ﬁeld variable dependencies for the initiation data. The
default value is 0.
initiationDependencies
A Boolean specifying whether damage evolution data will be used. The default value
is true.
evolution
An odb_String specifying the type of damage evolution to be speciﬁed. Possible values
are "MOTION_TYPE" and "ENERGY_TYPE". The default value is "MOTION_TYPE".
evolutionType
This argument is applicable only if evolution=true.
An odb_String specifying the damage evolution law to be speciﬁed. Possible values are
"LINEAR", "EXPONENTIAL", and "TABULAR". The default value is "LINEAR".
softening
This argument is applicable only if evolution=true and when
evolutionType="MOTION_TYPE".
A Boolean specifying whether or not affectedComponents will be speciﬁed. If
useAffected=false, then only the components of relative motion speciﬁed by components
will undergo damage. The default value is false.
useAffected
This argument is applicable only if evolution=true.
An odb_String specifying the contribution of each damage mechanism when more than
one damage mechanism is deﬁned. Possible values are "MAXIMUM" and
"MULTIPLICATIVE". The default value is "MAXIMUM".
degradation
This argument is applicable if evolution=true.
A Boolean specifying whether the evolution data depend on temperature. The default
value is false.
evolutionTemperature
This argument is applicable only if evolution=true.
An Int specifying the number of ﬁeld variable dependencies for the evolution data. The
default value is 0.
evolutionDependencies
This argument is applicable only if evolution=true.
2733
Abaqus Scripting Reference Guide
ConnectorDamage object

An odb_String specifying the contribution operator for the evolution potential
contributions. Possible values are "SUM" and "MAXIMUM". The default value is
"SUM".
evolutionPotentialOperator
This argument is applicable only if coupling="COUPLED", when evolution=true, when
evolutionType="MOTION_TYPE", and when criterion="FORCE" or "MOTION".
A Double specifying the number equal to the inverse of the overall exponent in the
evolution potential deﬁnition. The default value is 2.0.
evolutionPotentialExponent
This argument is applicable only if coupling="COUPLED", when evolution=true, when
evolutionPotentialOperator="SUM", when evolutionType="MOTION", and when
criterion="FORCE" or "MOTION".
A sequence of ConnectorPotential objects specifying one ConnectorPotential object
for each initiation potential contribution. This member can be speciﬁed only if
coupling="COUPLED" and if criterion="FORCE" or "MOTION".
initiationPotentials
A sequence of ConnectorPotential objects specifying one ConnectorPotential object
for each evolution potential contribution). This member can be speciﬁed only if
evolutionPotentials
coupling="COUPLED", if evolution=true, if evolutionType="MOTION", and if
criterion="FORCE" or "MOTION".
An odb_SequenceSequenceDouble specifying the initiation properties. The default value
is an empty sequence.
initiationTable
Items in the initiationTable data are described below.
An odb_SequenceSequenceDouble specifying the evolution properties. The default
value is an empty sequence.
evolutionTable
Items in the evolutionTable data are described below. This argument is only applicable
if evolution=true.
An odb_SequenceInt specifying the components of relative motion that will be damaged.
Possible values are 1 components  6. Only available components can be speciﬁed.
affectedComponents
This argument is applicable only if evolution=true and useAffected=true. The default
value is an empty sequence.
An odb_SequenceInt specifying the components of relative motion for which the behavior
is deﬁned. Possible values are 1 components  6. Only available components can be
components
speciﬁed. This argument can be speciﬁed only if coupling="UNCOUPLED". The default
value is an empty sequence.
Table data
Table data for initiationTable:
If criterion=FORCE, then each sequence of the table data speciﬁes the following:
•
Lower (compression) limiting force or moment. Use -1.0E+36 to indicate an unspeciﬁed lower limit.
•
Upper (tension) limiting force or moment. Use 1.0E+36 to indicate an unspeciﬁed upper limit. At least one limit,
lower or upper, must be speciﬁed.
Abaqus Scripting Reference Guide
2734
ConnectorDamage object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If criterion=MOTION, then each sequence of the table data speciﬁes the following:
•
Lower (compression) limiting connector constitutive relative displacement or rotation. Use -1.0E+36 to indicate
an unspeciﬁed lower limit.
•
Upper (tension) limiting connector constitutive relative displacement or rotation. Use 1.0E+36 to indicate an
unspeciﬁed upper limit. At least one limit, lower or upper, must be speciﬁed.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If criterion=PLASTIC_MOTION, then each sequence of the table data speciﬁes the following:
•
Relative equivalent plastic displacement/rotation at which damage will be initiated.
•
Mode mix ratio (only if coupling=COUPLED).
•
Relative equivalent plastic displacement/rotation rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Table data for evolutionTable:
If evolutionType=MOTION and softening=LINEAR, then each sequence of the table data speciﬁes the following:
•
Post-initiation equivalent relative plastic motion at ultimate failure if criterion=PLASTIC_MOTION. Otherwise,
post-initiation constitutive relative motion (displacement/rotation) at ultimate failure.
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=MOTION and softening=EXPONENTIAL, then each sequence of the table data speciﬁes the following:
•
Post-initiation equivalent relative plastic motion at ultimate failure if criterion=PLASTIC_MOTION. Otherwise,
post-initiation constitutive relative motion (displacement/rotation) at ultimate failure.
•
Exponential law parameter.
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
2735
Abaqus Scripting Reference Guide
ConnectorDamage object

•
Etc.
If evolutionType=MOTION and softening=TABULAR, then each sequence of the table data speciﬁes the following:
•
Damage variable (cannot be less than 0 or greater than 1).
•
Post-initiation equivalent relative plastic motion if criterion=PLASTIC_MOTION. Otherwise, post-initiation
constitutive relative motion (displacement/rotation).
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If evolutionType=ENERGY, then each sequence of the table data speciﬁes the following:
•
Total energy dissipated by damage at ultimate failure.
•
Mode mix ratio (only if coupling=COUPLED and criterion=PLASTIC_MOTION).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConnectorDamage object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorDamage object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorDamage method.
Return value
None.
Exceptions
ValueError.
Abaqus Scripting Reference Guide
2736
ConnectorDamage object

Members
The ConnectorDamage object has members with the same names and descriptions as the arguments to the
ConnectorDamage method.
In addition, the ConnectorDamage object can have the following members:
Prototype
odb_ConnectorOptions initiationOptions() const;
odb_ConnectorOptions evolutionOptions() const;
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the damage initiation table.
initiationOptions
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the damage evolution table.
evolutionOptions
Corresponding analysis keywords
•
*CONNECTOR DAMAGE INITIATION, *CONNECTOR DAMAGE EVOLUTION, *CONNECTOR
POTENTIAL
2737
Abaqus Scripting Reference Guide
ConnectorDamage object

ConnectorDamping object
The ConnectorDamping object deﬁnes damping behavior for one or more components of a connector's relative motion.
The ConnectorDamping object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorDamping(...)
This method creates a connector damping behavior option for a ConnectorSection object.
Path
sectionApi.sections()[name].ConnectorDamping
Prototype
odb_ConnectorDamping&
ConnectorDamping(const odb_String& behavior,
                const odb_String& coupling,
                int dependencies,
                bool temperatureDependency,
                bool frequencyDependency,
                const odb_SequenceSequenceDouble& table,
                const odb_SequenceInt& independentComponents,
                const odb_SequenceInt& components);
Required arguments
None.
Optional arguments
An odb_String specifying if the damping behavior is linear or nonlinear. Possible values
are "LINEAR" and "NONLINEAR". The default value is "LINEAR".
behavior
An odb_String specifying whether the damping behavior is coupled between the connector's
components of relative motion. If behavior="LINEAR", then possible values are
coupling
"UNCOUPLED" and "COUPLED". If behavior="NONLINEAR", then possible values are
"UNCOUPLED", "COUPLED_POSITION", and "COUPLED_MOTION". Possible values
are "UNCOUPLED", "COUPLED", "COUPLED_POSITION", and "COUPLED_MOTION".
The default value is "UNCOUPLED".
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Boolean specifying whether the behavior data depend on temperature. The default value
is false.
temperatureDependency
Abaqus Scripting Reference Guide
2738
ConnectorDamping object

A Boolean specifying whether the behavior data depend on frequency. This value is
applicable only if behavior= "LINEAR" and coupling="UNCOUPLED". The default value
is false.
frequencyDependency
An odb_SequenceSequenceDouble specifying damping properties. Items in the table data
are described below. The default value is an empty sequence.
table
An odb_SequenceInt specifying the list of independent components that are included in the
deﬁnition of the connector damping data. This argument is applicable only if
independentComponents
behavior="NONLINEAR" and coupling="COUPLED_POSITION" or
"COUPLED_MOTION". When this argument is applicable, at least one value must be
speciﬁed. Only available components can be speciﬁed. The default value is an empty
sequence.
An odb_SequenceInt specifying the components of relative motion for which the behavior
is deﬁned. Possible values are 1 components  6. Only available components can be
speciﬁed. The default value is an empty sequence.
components
Table data
If behavior=LINEAR and coupling=UNCOUPLED, then each sequence of the table data speciﬁes the following:
•
Damping coefﬁcient (force or moment per relative velocity).
•
Frequency (cycles/time), if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=NONLINEAR and coupling=UNCOUPLED, then each sequence of the table data speciﬁes the following:
•
Force or moment.
•
Relative displacement or rotation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=LINEAR and coupling=COUPLED, the table data specify the symmetric portion of the damping matrix
for the speciﬁed components followed by any temperature data and then any ﬁeld data. For example, if components
2, 3, and 5 are speciﬁed, the table portion of the command is as follows:
table=( (
, 
, 
, 
, 
, 
,), )
The following items should then be speciﬁed as comma-separated data:
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
2739
Abaqus Scripting Reference Guide
ConnectorDamping object

•
Etc.
If behavior=NONLINEAR and coupling=COUPLED_POSITION or COUPLED_MOTION, each sequence of the
table data speciﬁes the following:
•
Force or moment for the directions in the components list.
•
Relative velocity for the directions in the components list.
•
Relative position or angle for the ﬁrst independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the ﬁrst independentComponents direction if coupling=COUPLED_MOTION.
•
Relative position or angle for the second independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the second independentComponents direction if
coupling=COUPLED_MOTION.
•
Etc. up to the Nth independentComponents direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConnectorDamping object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorDamping object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorDamping  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorDamping object has members with the same names and descriptions as the arguments to the
ConnectorDamping  method.
In addition, the ConnectorDamping object can have the following member:
Abaqus Scripting Reference Guide
2740
ConnectorDamping object

Prototype
odb_ConnectorOptions options() const;
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular options
for this ConnectorBehaviorOption.
options
Corresponding analysis keywords
•
*CONNECTOR DAMPING
2741
Abaqus Scripting Reference Guide
ConnectorDamping object

ConnectorElasticity object
The ConnectorElasticity object deﬁnes elastic behavior for one or more components of a connector's relative motion.
The ConnectorElasticity object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorElasticity(...)
This method creates a connector elasticity behavior option for a ConnectorSection object.
Path
sectionApi.sections()[name].ConnectorElasticity
Prototype
odb_ConnectorElasticity&
ConnectorElasticity(const odb_String& behavior,
                const odb_String& coupling,
                int dependencies,
                bool temperatureDependency,
                bool frequencyDependency,
                const odb_SequenceSequenceDouble& table,
                const odb_SequenceInt& independentComponents,
                const odb_SequenceInt& components);
Required arguments
None.
Optional arguments
An odb_String specifying whether the elastic behavior is linear, nonlinear, or rigid. Possible
values are "LINEAR", "NONLINEAR", and "RIGID". The default value is "LINEAR".
behavior
An odb_String specifying whether the elastic behavior is coupled between the connector's
components of relative motion. If behavior="LINEAR", then possible values are
coupling
"UNCOUPLED" and "COUPLED". If behavior="NONLINEAR", then possible values are
"UNCOUPLED", "COUPLED_POSITION", and "COUPLED_MOTION". Possible values
are "UNCOUPLED", "COUPLED", "COUPLED_POSITION", and "COUPLED_MOTION".
The default value is "UNCOUPLED".
This argument is not applicable if behavior="RIGID".
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
This argument is not applicable if behavior="RIGID".
A Boolean specifying whether the behavior data depend on temperature. The default value
is false.
temperatureDependency
Abaqus Scripting Reference Guide
2742
ConnectorElasticity object

This argument is not applicable if behavior="RIGID".
A Boolean specifying whether the behavior data depend on frequency. This value is
applicable only if behavior="LINEAR" and coupling="UNCOUPLED". The default value
is false.
frequencyDependency
This argument is not applicable if behavior="RIGID".
An odb_SequenceSequenceDouble specifying elasticity properties. Items in the table data
are described below. This argument is not applicable if behavior="RIGID". The default
value is an empty sequence.
table
An odb_SequenceInt specifying the list of independent components that are included in the
deﬁnition of the connector elasticity data. This argument is applicable only if
independentComponents
behavior="NONLINEAR" and coupling="COUPLED_POSITION" or
"COUPLED_MOTION". If this argument is applicable, at least one value must be speciﬁed.
Only available components can be speciﬁed. The default value is an empty sequence.
An odb_SequenceInt specifying the components of relative motion for which the behavior
is deﬁned. Possible values are 1 components  6. Only available components can be
speciﬁed. The default value is an empty sequence.
components
Table data
If behavior=LINEAR and coupling=UNCOUPLED, then each sequence of the table data speciﬁes the following:
•
Elastic stiffness (per each speciﬁed force/moment component).
•
Frequency (cycles/time), if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=NONLINEAR and coupling=UNCOUPLED, then each sequence of the table data speciﬁes the following:
•
Force or moment.
•
Relative displacement or rotation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=LINEAR and coupling=COUPLED, the table data specify the symmetric portion of the elastic stiffness
matrix for the speciﬁed components followed by any temperature data and then any ﬁeld data. For example, if
components 2, 3, and 5 are speciﬁed, the table portion of the command is as follows:
table=( (
, 
, 
, 
, 
, 
,),
)
The following items should then be speciﬁed as comma-separated data:
2743
Abaqus Scripting Reference Guide
ConnectorElasticity object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If behavior=NONLINEAR and coupling=COUPLED_POSITION or COUPLED_MOTION, each sequence of the
table data speciﬁes the following:
•
Force or moment for the directions in the components list.
•
Relative position or angle for the ﬁrst independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the ﬁrst independentComponents direction if coupling=COUPLED_MOTION.
•
Relative position or angle for the second independentComponents direction if coupling=COUPLED_POSITION.
Relative displacement or rotation for the second independentComponents direction if
coupling=COUPLED_MOTION.
•
Etc. up to the Nth independentComponents direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConnectorElasticity object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorElasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorElasticity  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorElasticity object has members with the same names and descriptions as the arguments to the
ConnectorElasticity  method.
Abaqus Scripting Reference Guide
2744
ConnectorElasticity object

In addition, the ConnectorElasticity object can have the following member:
Prototype
odb_ConnectorOptions options() const;
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular options
for this ConnectorBehaviorOption.
options
Corresponding analysis keywords
•
*CONNECTOR ELASTICITY
2745
Abaqus Scripting Reference Guide
ConnectorElasticity object

ConnectorFailure object
The ConnectorFailure object deﬁnes failure criteria for one or more components of a connector's relative motion.
The ConnectorFailure object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorFailure(...)
This method creates a connector failure behavior option for a ConnectorSection object.
Path
sectionApi.sections()[name].ConnectorFailure
Prototype
odb_ConnectorFailure&
ConnectorFailure(odb_Union releaseComponent,
                 odb_Union minMotion,
                 odb_Union maxMotion,
                 odb_Union minForce,
                 odb_Union maxForce,
                 const odb_SequenceInt& components);
Required arguments
None.
Optional arguments
The string "ALL" or an Int specifying the motion components that fail. If an Int is speciﬁed,
only that motion component fails when the failure criteria are satisﬁed. If
releaseComponent="ALL", all motion components fail. The default value is "ALL".
releaseComponent
The string "NONE" or a Double specifying the lower bound for the connector's relative position
for all speciﬁed components, or no lower bound. The default value is "NONE".
minMotion
The string "NONE" or a Double specifying the upper bound for the connector's relative position
for all speciﬁed components, or no upper bound. The default value is "NONE".
maxMotion
The string "NONE" or a Double specifying the lower bound of the force or moment in the
directions of the speciﬁed components at which locking occurs, or no lower bound. The default
value is "NONE".
minForce
The string "NONE" or a Double specifying the upper bound of the force or moment in the
directions of the speciﬁed components at which locking occurs, or no upper bound. The default
value is "NONE".
maxForce
Abaqus Scripting Reference Guide
2746
ConnectorFailure object

An odb_SequenceInt specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
Return value
A ConnectorFailure object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorFailure object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorFailure  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorFailure object has members with the same names and descriptions as the arguments to the
ConnectorFailure  method.
Corresponding analysis keywords
•
*CONNECTOR FAILURE
2747
Abaqus Scripting Reference Guide
ConnectorFailure object

ConnectorFriction object
The ConnectorFriction object deﬁnes Coulomb-like or hysteretic friction behavior for one or more components of a
connector's relative motion.
The ConnectorFriction object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorFriction(...)
This method creates a connector friction behavior option for a ConnectorSection object. Depending upon the arguments
provided, the friction behavior can be Coulomb-like or hysteretic in nature.
Path
sectionApi.sections()[name].ConnectorFriction
Prototype
odb_ConnectorFriction&
ConnectorFriction(const odb_String& frictionModel,
   const odb_String& slipStyle,
   odb_Union tangentDirection,
   odb_Union stickStiffness,
   const odb_String& componentType,
   bool slipDependency,
   bool temperatureDependency,
   int dependencies,
   bool useContactForceComponent,
   const odb_String& contactForceStyle,
   int contactForceComponent,
   const odb_String& forcePotentialOperator,
   double forcePotentialExponent,
   const odb_SequenceConnectorPotential& connectorPotentials,
   const odb_SequenceSequenceDouble& table,
   const odb_SequenceInt& independentComponents);
Required arguments
None.
Optional arguments
An odb_String specifying the desired frictional response model. Possible values are
"PREDEFINED" and "USER_CUSTOMIZED". The default value is "PREDEFINED".
frictionModel
An odb_String specifying the method of indicating the slip direction: either speciﬁed
or computed based upon the force potential data. Possible values are "SPECIFY" and
"COMPUTE". The default value is "SPECIFY".
slipStyle
This argument is applicable only if frictionModel="USER_CUSTOMIZED".
Abaqus Scripting Reference Guide
2748
ConnectorFriction object

The string "NONE" or an Int specifying the direction for which the frictional behavior
is speciﬁed. Possible values are 1 tangentDirection  6, indicating an available
tangentDirection
component of relative motion. This argument applies only if
frictionModel="USER_CUSTOMIZED" and if slipStyle="SPECIFY". The default
value is "NONE".
The string "NONE" or a Double specifying the stick stiffness associated with the
frictional behavior in the direction speciﬁed by tangentDirection. If this argument is
stickStiffness
omitted, Abaqus computes an appropriate number for the stick stiffness. The default
value is "NONE".
An odb_String specifying the type of the independentComponents. Possible values are
"POSITION", "MOTION", and "NO_INDEPENDENT_COMPONENTS". The default
value is "NO_INDEPENDENT_COMPONENTS".
componentType
A Boolean specifying whether the table data depend on accumulated slip. The default
value is false.
slipDependency
This argument applies only if frictionModel="USER_CUSTOMIZED".
A Boolean specifying whether the table data depend on temperature. The default value
is false.
temperatureDependency
This argument applies only if frictionModel="USER_CUSTOMIZED".
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
This argument applies only if frictionModel="USER_CUSTOMIZED".
A Boolean specifying whether the contact force component will be deﬁned. The default
value is false.
useContactForceComponent
This argument applies only if frictionModel="USER_CUSTOMIZED".
An odb_String specifying the method of indicating the contact force component direction:
either speciﬁed or computed based on upon a DerivedComponent. Possible values are
contactForceStyle
"COMPONENT_NUMBER" and "DERIVED_COMPONENT". The default value is
"COMPONENT_NUMBER".
This argument is applicable only if frictionModel="USER_CUSTOMIZED" and if
useContactForceComponent=true.
An Int specifying the contact force component direction. This argument applies only
if frictionModel="USER_CUSTOMIZED", if useContactForceComponent=true, and
if contactForceStyle="COMPONENT_NUMBER". The default value is 0.
contactForceComponent
An odb_String specifying the contribution operator for the force potential contributions.
Possible values are "SUM" and "MAXIMUM". The default value is "SUM".
forcePotentialOperator
This argument is applicable only if frictionModel="USER_CUSTOMIZED" and if
slipStyle="COMPUTE".
2749
Abaqus Scripting Reference Guide
ConnectorFriction object

A Double specifying the number equal to the inverse of the overall exponent in the
force potential deﬁnition. The default value is 2.0.
forcePotentialExponent
This argument is applicable only if frictionModel="USER_CUSTOMIZED", if
slipStyle="COMPUTE", and if forcePotentialOperator="SUM".
A sequence of ConnectorPotential objects specifying one ConnectorPotential object
for each force potential contribution. This member can be speciﬁed only if
frictionModel="USER_CUSTOMIZED", and if slipStyle="COMPUTE".
connectorPotentials
An odb_SequenceSequenceDouble specifying friction properties. The default value is
an empty sequence.
table
If frictionModel="PREDEFINED", each sequence of the table data speciﬁes:
•
If applicable, the ﬁrst geometric scaling constant relevant to frictional interactions.
•
Etc., up to as many geometric scaling constants as are associated with this connection
type.
•
Internal contact force/moment generating friction in the ﬁrst predeﬁned slip direction.
•
If applicable, internal contact force/moment generating friction in the second
predeﬁned slip direction.
•
Connector constitutive relative motion in the direction speciﬁed by
independentComponent.
•
Accumulated slip in the ﬁrst predeﬁned slip direction, if the data depend on
accumulated slip.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If frictionModel="USER_CUSTOMIZED", each sequence of the table data speciﬁes:
•
Effective radius of the cylindrical or spherical surface over which frictional slip
occurs in the connector associated with frictional effects in the direction speciﬁed
by tangentDirection. This radius is relevant only if the connection type includes an
available rotational component of relative motion and
tangentDirection="SLIP_DIRECTION".
•
Internal contact force/moment generating friction in the direction speciﬁed by
tangentDirection.
•
Connector constitutive relative motion in the direction speciﬁed by
independentComponent.
•
Accumulated slip in the direction speciﬁed by tangentDirection, if the data depend
on accumulated slip.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2750
ConnectorFriction object

An odb_SequenceInt specifying the independent components. Possible values are 1
independentComponents  6. In addition, each independent component value must
independentComponents
be unique. The independentComponents argument applies only if
frictionModel="USER_CUSTOMIZED". Only available components can be speciﬁed.
The default value is an empty sequence.
Return value
A ConnectorFriction object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorFriction object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorFriction  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorFriction object has members with the same names and descriptions as the arguments to the
ConnectorFriction  method.
In addition, the ConnectorFriction object can have the following members:
Prototype
odb_TangentialBehavior tangentialBehavior() const;
odb_DerivedComponent derivedComponent() const;
odb_ConnectorOptions options() const;
A TangentialBehavior object.
tangentialBehavior
A DerivedComponent object specifying the DerivedComponent used to compute the
contact force component direction. This argument applies only if
derivedComponent
frictionModel="USER_CUSTOMIZED", if useContactForceComponent=true, and if
contactForceStyle="DERIVED_COMPONENT".
2751
Abaqus Scripting Reference Guide
ConnectorFriction object

A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for this ConnectorBehaviorOption.
options
Corresponding analysis keywords
•
*CONNECTOR FRICTION, *FRICTION, *CONNECTOR POTENTIAL, *CONNECTOR DERIVED
COMPONENT
Abaqus Scripting Reference Guide
2752
ConnectorFriction object

ConnectorLock object
The ConnectorLock object deﬁnes locking criteria for one or more available components of a connector's relative
motion.
The ConnectorLock object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorLock(...)
This method creates a connector lock behavior option for a ConnectorSection.
Path
sectionApi.sections()[name].ConnectorLock
Prototype
odb_ConnectorLock&
ConnectorLock(odb_Union lockingComponent,
              odb_Union minMotion,
              odb_Union maxMotion,
              odb_Union minForce,
              odb_Union maxForce,
              const odb_SequenceInt& components);
Required arguments
None.
Optional arguments
The string "ALL" or an Int specifying the motion components that are locked. If an Int is
speciﬁed, only that motion component is locked when the locking criteria are satisﬁed. If
lockingComponent=ALL, all motion components are locked. The default value is "ALL".
lockingComponent
The string "NONE" or a Double specifying the lower bound for the connector's relative position
for all speciﬁed components, or no lower bound. The default value is "NONE".
minMotion
The string "NONE" or a Double specifying the upper bound for the connector's relative position
for all speciﬁed components, or no upper bound. The default value is "NONE".
maxMotion
The string "NONE" or a Double specifying the lower bound of the force or moment in the
directions of the speciﬁed components at which locking occurs, or no lower bound. The default
value is "NONE".
minForce
The string "NONE" or a Double specifying the upper bound of the force or moment in the
directions of the speciﬁed components at which locking occurs, or no upper bound. The default
value is "NONE".
maxForce
2753
ConnectorLock object

An odb_SequenceInt specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
Return value
A ConnectorLock object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorLock object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorLock  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorLock object has members with the same names and descriptions as the arguments to the ConnectorLock
method.
Corresponding analysis keywords
*CONNECTOR LOCK
Abaqus Scripting Reference Guide
2754
ConnectorLock object

ConnectorOptions object
The ConnectorOptions object is used to deﬁne various options for connector behaviors. It can be used only in conjunction
with CDCTerm, ConnectorDamage, ConnectorDamping, ConnectorElasticity, ConnectorFriction, and
ConnectorPlasticity objects. Because the ConnectorDamage object contains two separate ConnectorOptions repositories
(one for damage initiation and one for damage evolution), there are two ConnectorOptions constructors associated
with that behavior—initiationOptions and evolutionOptions. The ConnectorPlasticity object also contains two separate
ConnectorOptions repositories (one for isotropic hardening and one for kinematic hardening), so there are two
ConnectorOptions constructors associated with that behavior—isotropicOptions and kinematicOptions.
Access
sectionApi.sections()[name].behaviorOptions(i).connectorPotentials(i)\
.derivedComponent().cdcTerms(i).options()
sectionApi.sections()[name].behaviorOptions(i).derivedComponent()\
.cdcTerms(i).options()
sectionApi.sections()[name].behaviorOptions(i).evolutionOptions()
sectionApi.sections()[name].behaviorOptions(i).evolutionPotentials(i)\
.derivedComponent().cdcTerms(i).options()
sectionApi.sections()[name].behaviorOptions(i).initiationOptions()
sectionApi.sections()[name].behaviorOptions(i).initiationPotentials(i)\
.derivedComponent().cdcTerms(i).options()
sectionApi.sections()[name].behaviorOptions(i).isotropicOptions()
sectionApi.sections()[name].behaviorOptions(i).kinematicOptions()
sectionApi.sections()[name].behaviorOptions(i).options()
ConnectorOptions(...)
This method creates a connector options object to be used in conjunction with an allowable connector behavior option,
derived component term, or connector section.
Path
sectionApi.sections()[name].behaviorOptions(i).connectorPotentials(i)\
.derivedComponent().cdcTerms(i).ConnectorOptions
sectionApi.sections()[name].behaviorOptions(i).derivedComponent()\
.cdcTerms(i).ConnectorOptions
sectionApi.sections()[name].behaviorOptions(i).ConnectorOptions
sectionApi.sections()[name].behaviorOptions(i).evolutionPotentials(i)\
.derivedComponent().cdcTerms(i).ConnectorOptions
sectionApi.sections()[name].behaviorOptions(i).ConnectorOptions
sectionApi.sections()[name].behaviorOptions(i).initiationPotentials(i)\
.derivedComponent().cdcTerms(i).ConnectorOptions
sectionApi.sections()[name].behaviorOptions(i).ConnectorOptions
Prototype
odb_ConnectorOptions&
ConnectorOptions(bool useBehRegSettings,
                 bool regularize,
                 bool defaultTolerance,
                 double regularization,
                 bool defaultRateFactor,
                 double rateFactor,
                 const odb_String& interpolation,
2755
ConnectorOptions object

                 bool useBehExtSettings,
                 const odb_String& extrapolation);
Required arguments
None.
Optional arguments
A Boolean specifying whether or not to use the behavior-level settings for regularization
options. This argument is applicable only for an Abaqus/Explicit analysis. The default value
is true.
useBehRegSettings
A Boolean specifying whether or not the tabular data will be regularized. This argument is
applicable only for an Abaqus/Explicit analysis and only if useBehRegSettings=false. The
default value is true.
regularize
A Boolean specifying whether or not the analysis default regularization tolerance will be
used. This argument is applicable only for an Abaqus/Explicit analysis and only if
useBehRegSettings=false and regularize=true. The default value is true.
defaultTolerance
A Double specifying the regularization increment to be used. This argument is applicable
only for an Abaqus/Explicit analysis and only if useBehRegSettings=false, regularize=true,
and defaultTolerance=false. The default value is 0.03.
regularization
A Boolean specifying whether or not the analysis default rate ﬁlter factor will be used. This
argument is applicable only for an Abaqus/Explicit analysis that includes isotropic hardening
defaultRateFactor
with tabular deﬁnition or damage initiation with plastic motion criteria. The default value is
true.
A Double specifying the rate ﬁlter factor to be used. This argument is applicable only for an
Abaqus/Explicit analysis that includes isotropic hardening with tabular deﬁnition or damage
rateFactor
initiation with plastic motion criteria. This argument is also applicable only if
defaultRateFactor=false. The default value is 0.9.
An odb_String specifying the type of interpolation increment to be used on rate-dependent
tabular data. This argument is applicable only for an Abaqus/Explicit analysis that includes
interpolation
isotropic hardening with tabular deﬁnition or damage initiation with plastic motion criteria.
Possible values are "LINEAR" and "LOGARITHMIC". The default value is "LINEAR".
A Boolean specifying whether or not to use the behavior-level settings for extrapolation
options. The default value is true.
useBehExtSettings
An odb_String specifying the extrapolation technique to be used. This argument is applicable
only if useBehExtSettings=false. Possible values are "CONSTANT" and "LINEAR". The
default value is "CONSTANT".
extrapolation
Return value
A ConnectorOptions object.
Abaqus Scripting Reference Guide
2756
ConnectorOptions object

Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorOptions object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorOptions  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorOptions object has members with the same names and descriptions as the arguments to the
ConnectorOptions  method.
Corresponding analysis keywords
•
*CONNECTOR BEHAVIOR, *CONNECTOR DAMAGE INITIATION, *CONNECTOR DAMAGE
EVOLUTION, *CONNECTOR DAMPING, *CONNECTOR DERIVED COMPONENT, *CONNECTOR
ELASTICITY, *CONNECTOR FRICTION, and *CONNECTOR PLASTICITY
2757
Abaqus Scripting Reference Guide
ConnectorOptions object

ConnectorPlasticity object
The ConnectorPlasticity object deﬁnes plastic behavior for one or more components of a connector's relative motion.
The ConnectorPlasticity object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorPlasticity(...)
This method creates a connector plasticity behavior option for a ConnectorSection object.
Path
sectionApi.sections()[name].ConnectorPlasticity
Prototype
odb_ConnectorPlasticity&
ConnectorPlasticity(const odb_String& coupling,
   bool isotropic,
   const odb_String& isotropicType,
   bool isotropicTemperature,
   int isotropicDependencies,
   bool kinematic,
   const odb_String& kinematicType,
   bool kinematicTemperature,
   int kinematicDependencies,
   const odb_String& forcePotentialOperator,
   double forcePotentialExponent,
   const odb_SequenceConnectorPotential& connectorPotentials,
   const odb_SequenceSequenceDouble& isotropicTable,
   const odb_SequenceSequenceDouble& kinematicTable,
   const odb_SequenceInt& components);
Required arguments
None.
Optional arguments
An odb_String specifying whether or not the behavior is coupled. Possible values are
"UNCOUPLED" and "COUPLED". The default value is "UNCOUPLED".
coupling
A Boolean specifying whether isotropic hardening data will be used. The default value is
true.
isotropic
If isotropic=false, then kinematic must be speciﬁed as true.
An odb_String specifying the type of isotropic hardening to be speciﬁed. Possible values
are "TABULAR" and "EXPONENTIAL_LAW". The default value is "TABULAR".
isotropicType
This argument is applicable only if isotropic=true.
Abaqus Scripting Reference Guide
2758
ConnectorPlasticity object

A Boolean specifying whether the isotropic data depend on temperature. The default value
is false.
isotropicTemperature
This argument is applicable only if isotropic=true.
An Int specifying the number of ﬁeld variable dependencies for the isotropic data. The
default value is 0.
isotropicDependencies
This argument is applicable only if isotropic=true.
A Boolean specifying whether kinematic hardening data will be used. The default value
is false.
kinematic
If kinematic=false, then isotropic must be speciﬁed as true.
An odb_String specifying the type of kinematic hardening to be speciﬁed. Possible values
are "HALF_CYCLE", "STABILIZED", and "PARAMETERS". The default value is
"HALF_CYCLE".
kinematicType
This argument is applicable only if kinematic=true.
A Boolean specifying whether the kinematic data depend on temperature. The default
value is false.
kinematicTemperature
This argument is applicable only if kinematic=true.
An Int specifying the number of ﬁeld variable dependencies for the kinematic data. The
default value is 0.
kinematicDependencies
This argument is applicable only if kinematic=true.
An odb_String specifying the contribution operator for the force potential contributions.
Possible values are "SUM" and "MAXIMUM". The default value is "SUM".
forcePotentialOperator
This argument is applicable only if coupling="COUPLED".
A Double specifying the number equal to the inverse of the overall exponent in the force
potential deﬁnition. The default value is 2.0.
forcePotentialExponent
This argument is applicable only if coupling="COUPLED" and if
forcePotentialOperator="SUM".
A sequence of ConnectorPotential objects specifying one ConnectorPotential object for
each force potential contribution. This member can be speciﬁed only if
coupling="COUPLED".
connectorPotentials
An odb_SequenceSequenceDouble specifying isotropic plasticity properties. Items in the
isotropicTable data are described below. This argument is applicable only if isotropic=true.
The default value is an empty sequence.
isotropicTable
An odb_SequenceSequenceDouble specifying kinematic plasticity properties. Items in
the kinematicTable data are described below. This argument is applicable only if
kinematic=true. The default value is an empty sequence.
kinematicTable
2759
Abaqus Scripting Reference Guide
ConnectorPlasticity object

An odb_SequenceInt specifying the components of relative motion for which the behavior
is deﬁned. Possible values are 1 components  6. Only available components can be
components
speciﬁed. This argument can be speciﬁed only if coupling="UNCOUPLED". The default
value is an empty sequence.
Table data
Table data for isotropicTable:
If isotropicType=TABULAR, then each sequence of the table data speciﬁes the following:
•
Equivalent yield force or moment deﬁning the size of the elastic range.
•
Equivalent relative plastic motion.
•
Equivalent relative plastic motion rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If isotropicType=EXPONENTIAL_LAW, then each sequence of the table data speciﬁes the following:
•
Equivalent force or moment deﬁning the size of the elastic range at zero plastic motion.
•
Isotropic hardening parameter 
.
•
Isotropic hardening parameter .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Table data for kinematicTable:
If kinematicType=HALF_CYCLE, then each sequence of the table data speciﬁes the following:
•
Yield force or moment.
•
Connector relative plastic motion.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If kinematicType=STABILIZED, then each sequence of the table data speciﬁes the following:
•
Yield force or moment.
•
Connector relative plastic motion.
•
Connector relative constitutive motion range.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
Abaqus Scripting Reference Guide
2760
ConnectorPlasticity object

•
Value of the second ﬁeld variable.
•
Etc.
If kinematicType=PARAMETERS, then each sequence of the table data speciﬁes the following:
•
Yield force or moment at zero relative plastic motion.
•
Kinematic hardening parameter .
•
Kinematic hardening parameter . Set =0 to specify linear Ziegler kinematic hardening.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConnectorPlasticity object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorPlasticity object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorPlasticity  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorPlasticity object has members with the same names and descriptions as the arguments to the
ConnectorPlasticity  method.
In addition, the ConnectorPlasticity object can have the following members:
Prototype
odb_ConnectorOptions isotropicOptions() const;
odb_ConnectorOptions kinematicOptions() const;
2761
Abaqus Scripting Reference Guide
ConnectorPlasticity object

A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the isotropic hardening table.
isotropicOptions
A ConnectorOptions object specifying the ConnectorOptions used to deﬁne tabular
options for the kinematic hardening table.
kinematicOptions
Corresponding analysis keywords
•
*CONNECTOR PLASTICITY, *CONNECTOR HARDENING, *CONNECTOR POTENTIAL
Abaqus Scripting Reference Guide
2762
ConnectorPlasticity object

ConnectorPotential object
The ConnectorPotential object is used to deﬁne a restricted set of mathematical functions to represent yield or limiting
surfaces in the space spanned by connector available components. It can be used only in conjunction with
ConnectorDamage, ConnectorFriction, and ConnectorPlasticity objects. Because the ConnectorDamage object contains
two separate ConnectorPotential repositories (one for damage initiation and one for damage evolution), there are two
ConnectorPotential constructors associated with that behavior—IniPotential and EvoPotential.
Access
sectionApi.sections()[name].behaviorOptions(i).connectorPotentials(i)
sectionApi.sections()[name].behaviorOptions(i).evolutionPotentials(i)
sectionApi.sections()[name].behaviorOptions(i).initiationPotentials(i)
ConnectorPotential(...)
This method creates a connector potential object to be used in conjunction with an allowable connector behavior option.
Path
sectionApi.sections()[name].behaviorOptions(i).ConnectorPotential
Prototype
odb_ConnectorPotential&
ConnectorPotential(const odb_String& componentStyle,
                   int componentNumber,
                   const odb_String& sign,
                   double scaleFactor,
                   double positiveExponent,
                   double shiftFactor,
                   const odb_String& hFunction);
Required arguments
None.
Optional arguments
An odb_String specifying whether a component number or the name of the DerivedComponent
object will be used in the contribution. Possible values are "COMPONENT_NUMBER" and
"DERIVED_COMPONENT". The default value is "COMPONENT_NUMBER".
componentStyle
An Int specifying the component number used in the contribution. This argument is applicable
only if componentStyle="COMPONENT_NUMBER". Possible values are 1
componentNumber
componentNumber  6. Only available components can be speciﬁed. The default value is
0.
An odb_String specifying the sign of the contribution. Possible values are "POSITIVE" and
"NEGATIVE". The default value is "POSITIVE".
sign
A Double specifying the scaling factor for the contribution. The default value is 1.0.
scaleFactor
2763
ConnectorPotential object

A Double specifying the positive exponent for the contribution. The default value is 2.0.
positiveExponent
This argument is ignored if the potential operator of the invoking behavior option is set to
"MAXIMUM".
A Double specifying the shift factor for the contribution. The default value is 0.0.
shiftFactor
An odb_String specifying the H function of the contribution: either absolute value, Macauley
bracket, or the identity function. Possible values are "ABS", "MACAULEY", and
"IDENTITY". The default value is "ABS".
hFunction
The value of "IDENTITY" can be used only if positiveExponent=1.0 and the potential exponent
of the invoking behavior option is also 1.0 (i.e., the potential operator of the invoking behavior
option must be "SUM").
Return value
A ConnectorPotential object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorPotential object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorPotential  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorPotential object has members with the same names and descriptions as the arguments to the
ConnectorPotential  method.
In addition, the ConnectorPotential object can have the following member:
Prototype
odb_DerivedComponent derivedComponent() const;
Abaqus Scripting Reference Guide
2764
ConnectorPotential object

A DerivedComponent object specifying the DerivedComponent used in the contribution.
This argument is applicable only if componentStyle="DERIVED_COMPONENT".
derivedComponent
Corresponding analysis keywords
•
*CONNECTOR POTENTIAL
2765
Abaqus Scripting Reference Guide
ConnectorPotential object

ConnectorStop object
The ConnectorStop object deﬁnes connector stops for one or more components of a connector's relative motion.
The ConnectorStop object is derived from the ConnectorBehaviorOption object.
Access
sectionApi.sections()[name].behaviorOptions(i)
ConnectorStop(...)
This method creates a connector stop behavior option for a ConnectorSection object.
Path
sectionApi.sections()[name].ConnectorStop
Prototype
odb_ConnectorStop&
ConnectorStop(odb_Union minMotion,
              odb_Union maxMotion,
              const odb_SequenceInt& components);
Required arguments
None.
Optional arguments
The string "NONE" or a Double specifying the lower bound for the connector's relative position
for all speciﬁed components, or no lower bound. The default value is "NONE".
minMotion
The string "NONE" or a Double specifying the upper bound for the connector's relative position
for all speciﬁed components, or no upper bound. The default value is "NONE".
maxMotion
An odb_SequenceInt specifying the components of relative motion for which the behavior is
deﬁned. Possible values are 1 components  6. Only available components can be speciﬁed.
The default value is an empty sequence.
components
Return value
A ConnectorStop object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the ConnectorStop object.
Abaqus Scripting Reference Guide
2766
ConnectorStop object

Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ConnectorStop  method.
Return value
None.
Exceptions
ValueError.
Members
The ConnectorStop object has members with the same names and descriptions as the arguments to the ConnectorStop
method.
Corresponding analysis keywords
•
*CONNECTOR STOP
2767
Abaqus Scripting Reference Guide
ConnectorStop object

DerivedComponent object
A DerivedComponent object describes user-customized components for use in deﬁning ConnectorFriction and Potential
objects.
Access
sectionApi.sections()[name].behaviorOptions(i).connectorPotentials(i)\
.derivedComponent()
sectionApi.sections()[name].behaviorOptions(i).derivedComponent()
sectionApi.sections()[name].behaviorOptions(i).evolutionPotentials(i)\
.derivedComponent()
sectionApi.sections()[name].behaviorOptions(i).initiationPotentials(i)\
.derivedComponent()
DerivedComponent()
This method creates a DerivedComponent object.
Path
sectionApi.sections()[name].behaviorOptions(i).connectorPotentials(i)\
.DerivedComponent
sectionApi.sections()[name].behaviorOptions(i).DerivedComponent
sectionApi.sections()[name].behaviorOptions(i).evolutionPotentials(i)\
.DerivedComponent
sectionApi.sections()[name].behaviorOptions(i).initiationPotentials(i)\
.DerivedComponent
Prototype
odb_DerivedComponent&
DerivedComponent();
Arguments
None.
Return value
A DerivedComponent object.
Exceptions
ValueError and TextError.
setValues(...)
This method modiﬁes the DerivedComponent object.
Required arguments
None.
Abaqus Scripting Reference Guide
2768
DerivedComponent object

Optional arguments
The optional arguments to setValues are the same as the arguments to the DerivedComponent  method.
Return value
None.
Exceptions
ValueError.
Members
The DerivedComponent object can have the following member:
Prototype
odb_SequenceCDCTerm cdcTerms() const;
odb_CDCTerm cdcTerms(int index) const;
A sequence of CDCTerm objects.
cdcTerms
Corresponding analysis keywords
•
*CONNECTOR DERIVED COMPONENT
2769
Abaqus Scripting Reference Guide
DerivedComponent object

TangentialBehavior object
The TangentialBehavior object speciﬁes tangential behavior for a connector friction behavior option.
Access
sectionApi.sections()[name].behaviorOptions(i).tangentialBehavior()
TangentialBehavior(...)
This method creates a TangentialBehavior object.
Path
sectionApi.sections()[name].behaviorOptions(i).TangentialBehavior
Prototype
odb_TangentialBehavior&
TangentialBehavior(const odb_String& formulation,
                bool slipRateDependency,
                bool pressureDependency,
                bool temperatureDependency,
                int dependencies,
                const odb_String& exponentialDecayDefinition,
                odb_Union shearStressLimit,
                const odb_String& maximumElasticSlip,
                double fraction,
                odb_Union absoluteDistance,
                const odb_SequenceSequenceDouble& table);
Required arguments
None.
Optional arguments
An odb_String specifying the friction coefﬁcient formulation. Possible values are
"PENALTY" and "EXPONENTIAL_DECAY". The default value is "PENALTY".
formulation
A Boolean specifying whether the data depend on slip rate. The default value is false.
slipRateDependency
A Boolean specifying whether the data depend on contact pressure. The default value
is false.
pressureDependency
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variables for the data. The default value is 0.
dependencies
An odb_String specifying the exponential decay deﬁnition for the data. Possible values
are "COEFFICIENTS" and "TEST_DATA". The default value is "COEFFICIENTS".
exponentialDecayDeﬁnition
Abaqus Scripting Reference Guide
2770
TangentialBehavior object

The string "NONE" or a Double specifying no upper limit or the friction coefﬁcient
shear stress limit. The default value is "NONE".
shearStressLimit
An odb_String specifying the method for modifying the allowable elastic slip. Possible
values are "FRACTION" and "ABSOLUTE_DISTANCE". The default value is
"FRACTION".
maximumElasticSlip
This argument applies only to Abaqus/Standard analyses.
A Double specifying the ratio of the allowable maximum elastic slip to a characteristic
model dimension. The default value is 10–4.
fraction
This argument applies only to Abaqus/Standard analyses.
The string "NONE" or a Double specifying the absolute magnitude of the allowable
elastic slip. The default value is "NONE".
absoluteDistance
This argument applies only to Abaqus/Standard analyses.
An odb_SequenceSequenceDouble specifying the tangential properties. Items in the
table data are described below. The default value is an empty sequence.
table
Table data
If formulation=PENALTY, the table data specify the following:
•
Friction coefﬁcient in the slip direction, .
•
Slip rate, if the data depend on slip rate.
•
Contact pressure, if the data depend on contact pressure.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If formulation=EXPONENTIAL_DECAY and exponentialDecayDeﬁnition=COEFFICIENTS, the table data specify
the following:
•
Static friction coefﬁcient, 
.
•
Kinetic friction coefﬁcient, 
.
•
Decay coefﬁcient, 
.
If formulation=EXPONENTIAL_DECAY and exponentialDecayDeﬁnition=TEST_DATA, the table data specify the
following:
•
Static coefﬁcient of friction.
•
Dynamic friction coefﬁcient measured at the reference slip rate, 
.
•
Reference slip rate, 
, used to measure the dynamic friction coefﬁcient.
2771
Abaqus Scripting Reference Guide
TangentialBehavior object

•
Kinetic friction coefﬁcient, 
. This value corresponds to the asymptotic value of the friction coefﬁcient at inﬁnite
slip rate, 
.
Return value
A TangentialBehavior object.
Exceptions
None.
setValues(...)
This method modiﬁes the TangentialBehavior object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the TangentialBehavior  method.
Return value
None.
Exceptions
None.
Members
The TangentialBehavior object has members with the same names and descriptions as the arguments to the
TangentialBehavior  method.
Corresponding analysis keywords
•
*FRICTION
Abaqus Scripting Reference Guide
2772
TangentialBehavior object

Filter commands
Filter commands are used to create real-time ﬁlters of output request data.
In this section:
•
Filter object
•
ButterworthFilter object
•
Chebyshev1Filter object
•
Chebyshev2Filter object
•
OperatorFilter object
2773

Filter object
The Filter object is the abstract base type for other Filter objects. The Filter object has no explicit constructor. The
methods and members of the Filter object are common to all objects derived from the Filter.
Access
filterApi.filters()[name]
Members
The Filter object has the following members:
Prototype
odb_String name() const;
double cutoffFrequency() const;
int order() const;
odb_String operation() const;
bool halt() const;
odb_Union limit() const;
odb_String invariant() const;
An odb_String specifying the repository key. This name ANTIALIASING is reserved for ﬁlters
generated internally by the program.
name
A Double specifying the attenuation point of the ﬁlter. Possible values are non-negative numbers.
Order is not available for OperatorFilter.
cutoffFrequency
An Int specifying the highest power of the ﬁlter transfer function. Possible values are
non-negative numbers less than or equal to 20. Order is not available for OperatorFilter. The
default value is 2.
order
An odb_String specifying the ﬁlter operator. Possible values are "NONE", "MIN", "MAX",
and "ABS". The default value is "NONE".
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is false.
halt
The string "NONE" or a Double specifying the threshold limit, an upper or lower bound for
output values depending on the operation, or a bound for stopping the analysis when Halt is
used. The default value is "NONE".
limit
An odb_String specifying the invariant to which ﬁltering is applied. Possible values are "NONE",
"FIRST", and "SECOND". The default value is "NONE".
invariant
Abaqus Scripting Reference Guide
2774
Filter object

ButterworthFilter object
The ButterworthFilter object deﬁnes a Butterworth type ﬁlter.
The ButterworthFilter object is derived from the Filter object.
Access
filterApi.filters()[name]
ButterworthFilter(...)
This method creates a ButterworthFilter object.
Path
filterApi.ButterworthFilter
Prototype
odb_ButterworthFilter&
ButterworthFilter(const odb_String& name,
                  double cutoffFrequency,
                  int order,
                  const odb_String& operation,
                  bool halt,
                  odb_Union limit,
                  const odb_String& invariant);
Required arguments
An odb_String specifying the repository key. This name ANTIALIASING is reserved for
ﬁlters generated internally by the program.
name
A Double specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
An Int specifying the highest power of the ﬁlter transfer function. Possible values are non-negative
numbers less than or equal to 20. Order is not available for OperatorFilter. The default value is
2.
order
An odb_String specifying the ﬁlter operator. Possible values are "NONE", "MIN", "MAX", and
"ABS". The default value is "NONE".
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is false.
halt
The string "NONE" or a Double specifying the threshold limit, an upper or lower bound for output
values depending on the operation, or a bound for stopping the analysis when Halt is used. The
default value is "NONE".
limit
2775
ButterworthFilter object

An odb_String specifying the invariant to which ﬁltering is applied. Possible values are "NONE",
"FIRST", and "SECOND". The default value is "NONE".
invariant
Return value
A ButterworthFilter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the ButterworthFilter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the ButterworthFilter  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The ButterworthFilter object has members with the same names and descriptions as the arguments to the
ButterworthFilter  method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
2776
ButterworthFilter object

Chebyshev1Filter object
The Chebyshev1Filter object deﬁnes a Chebyshev type 1 ﬁlter.
The Chebyshev1Filter object is derived from the Filter object.
Access
filterApi.filters()[name]
Chebyshev1Filter(...)
This method creates a Chebyshev1Filter object.
Path
filterApi.Chebyshev1Filter
Prototype
odb_Chebyshev1Filter&
Chebyshev1Filter(const odb_String& name,
                 double cutoffFrequency,
                 double rippleFactor,
                 int order,
                 const odb_String& operation,
                 bool halt,
                 odb_Union limit,
                 const odb_String& invariant);
Required arguments
An odb_String specifying the repository key. This name ANTIALIASING is reserved for
ﬁlters generated internally by the program.
name
A Double specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
A Double specifying the amount of allowable ripple in the ﬁlter. Possible values are non-negative
numbers. The default value is 0.225.
rippleFactor
An Int specifying the highest power of the ﬁlter transfer function. Possible values are non-negative
numbers less than or equal to 20. Order is not available for OperatorFilter. The default value is
2.
order
An odb_String specifying the ﬁlter operator. Possible values are "NONE", "MIN", "MAX", and
"ABS". The default value is "NONE".
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is false.
halt
2777
Chebyshev1Filter object

The string "NONE" or a Double specifying the threshold limit, an upper or lower bound for
output values depending on the operation, or a bound for stopping the analysis when Halt is
used. The default value is "NONE".
limit
An odb_String specifying the invariant to which ﬁltering is applied. Possible values are "NONE",
"FIRST", and "SECOND". The default value is "NONE".
invariant
Return value
A Chebyshev1Filter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the Chebyshev1Filter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Chebyshev1Filter  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The Chebyshev1Filter object has members with the same names and descriptions as the arguments to the
Chebyshev1Filter  method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
2778
Chebyshev1Filter object

Chebyshev2Filter object
The Chebyshev2Filter object deﬁnes a Chebyshev type 2 ﬁlter.
The Chebyshev2Filter object is derived from the Filter object.
Access
filterApi.filters()[name]
Chebyshev2Filter(...)
This method creates a Chebyshev2Filter object.
Path
filterApi.Chebyshev2Filter
Prototype
odb_Chebyshev2Filter&
Chebyshev2Filter(const odb_String& name,
                 double cutoffFrequency,
                 double rippleFactor,
                 int order,
                 const odb_String& operation,
                 bool halt,
                 odb_Union limit,
                 const odb_String& invariant);
Required arguments
An odb_String specifying the repository key. This name ANTIALIASING is reserved for
ﬁlters generated internally by the program.
name
A Double specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
A Double specifying the amount of allowable ripple in the ﬁlter. Possible values are non-negative
numbers less than 1. The default value is 0.025.
rippleFactor
An Int specifying the highest power of the ﬁlter transfer function. Possible values are non-negative
numbers less than or equal to 20. Order is not available for OperatorFilter. The default value is
2.
order
An odb_String specifying the ﬁlter operator. Possible values are "NONE", "MIN", "MAX", and
"ABS". The default value is "NONE".
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is false.
halt
2779
Chebyshev2Filter object

The string "NONE" or a Double specifying the threshold limit, an upper or lower bound for
output values depending on the operation, or a bound for stopping the analysis when Halt is
used. The default value is "NONE".
limit
An odb_String specifying the invariant to which ﬁltering is applied. Possible values are "NONE",
"FIRST", and "SECOND". The default value is "NONE".
invariant
Return value
A Chebyshev2Filter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the Chebyshev2Filter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the Chebyshev2Filter  method, except for
the name argument.
Return value
None.
Exceptions
RangeError.
Members
The Chebyshev2Filter object has members with the same names and descriptions as the arguments to the
Chebyshev2Filter  method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
2780
Chebyshev2Filter object

OperatorFilter object
The OperatorFilter object deﬁnes an operator ﬁlter.
The OperatorFilter object is derived from the Filter object.
Access
filterApi.filters()[name]
OperatorFilter(...)
This method creates an OperatorFilter object.
Path
filterApi.OperatorFilter
Prototype
odb_OperatorFilter&
OperatorFilter(const odb_String& name,
               double cutoffFrequency,
               int order,
               const odb_String& operation,
               bool halt,
               odb_Union limit,
               const odb_String& invariant);
Required arguments
An odb_String specifying the repository key. This name ANTIALIASING is reserved for
ﬁlters generated internally by the program.
name
A Double specifying the attenuation point of the ﬁlter. Possible values are non-negative
numbers. Order is not available for OperatorFilter.
cutoffFrequency
Optional arguments
An Int specifying the highest power of the ﬁlter transfer function. Possible values are non-negative
numbers less than or equal to 20. Order is not available for OperatorFilter. The default value is
2.
order
An odb_String specifying the ﬁlter operator. Possible values are "NONE", "MIN", "MAX", and
"ABS". The default value is "NONE".
operation
A Boolean specifying whether to stop the analysis if the speciﬁed limit is reached. The default
value is false.
halt
The string "NONE" or a Double specifying the threshold limit, an upper or lower bound for output
values depending on the operation, or a bound for stopping the analysis when Halt is used. The
default value is "NONE".
limit
2781
OperatorFilter object

An odb_String specifying the invariant to which ﬁltering is applied. Possible values are "NONE",
"FIRST", and "SECOND". The default value is "NONE".
invariant
Return value
An OperatorFilter object.
Exceptions
InvalidNameError and RangeError.
setValues(...)
This method modiﬁes the OperatorFilter object.
Required arguments
None.
Optional arguments
The optional arguments to setValues are the same as the arguments to the OperatorFilter  method, except for the
name argument.
Return value
None.
Exceptions
RangeError.
Members
The OperatorFilter object has members with the same names and descriptions as the arguments to the OperatorFilter
method.
Corresponding analysis keywords
•
*FILTER
Abaqus Scripting Reference Guide
2782
OperatorFilter object

Material commands
The Material commands are used to deﬁne the materials in an ODB.
In this section:
•
Material object
•
AcousticMedium object
•
AnnealTemperature object
•
BiaxialTestData object
•
BrittleCracking object
•
BrittleFailure object
•
BrittleShear object
•
CapCreepCohesion object
•
CapCreepConsolidation object
•
CapHardening object
•
CapPlasticity object
•
CastIronCompressionHardening object
•
CastIronPlasticity object
•
CastIronTensionHardening object
•
ClayHardening object
•
ClayPlasticity object
•
CombinedTestData object
•
Concrete object
•
ConcreteCompressionDamage object
•
ConcreteCompressionHardening object
•
ConcreteDamagedPlasticity object
•
ConcreteTensionDamage object
•
ConcreteTensionStiffening object
•
Conductivity object
•
ContactArea object
•
Creep object
•
CrushableFoam object
•
CrushableFoamHardening object
•
CycledPlastic object
•
CyclicHardening object
•
DamageEvolution object
•
DamageInitiation object
•
DamageStabilization object
•
DamageStabilizationCohesive object
•
Damping object
•
DeformationPlasticity object
•
Density object
•
Depvar object
2783

•
DetonationPoint object
•
Dielectric object
•
Diffusivity object
•
DruckerPrager object
•
DruckerPragerCreep object
•
DruckerPragerHardening object
•
Elastic object
•
ElectricalConductivity object
•
Eos object
•
EosCompaction object
•
Expansion object
•
FailStrain object
•
FailStress object
•
FailureRatios object
•
FluidLeakoff object
•
GapConductance object
•
GapConvection object
•
GapFlow object
•
GapRadiation object
•
GasketMembraneElastic object
•
GasketThicknessBehavior object
•
GasketTransverseShearElastic object
•
Gel object
•
HeatGeneration object
•
Hyperelastic object
•
Hyperfoam object
•
Hypoelastic object
•
Hysteresis object
•
InelasticHeatFraction object
•
JouleHeatFraction object
•
LatentHeat object
•
LowDensityFoam object
•
MagneticPermeability object
•
MohrCoulombHardening object
•
MohrCoulombPlasticity object
•
MoistureSwelling object
•
MullinsEffect object
•
Ornl object
•
Permeability object
•
Piezoelectric object
•
PlanarTestData object
•
Plastic object
•
PoreFluidExpansion object
•
PorousBulkModuli object
•
PorousElastic object
•
PorousFailureCriteria object
Abaqus Scripting Reference Guide
2784

•
PorousMetalPlasticity object
•
Potential object
•
PressureEffect object
•
RateDependent object
•
Ratios object
•
Regularization object
•
SaturationDependence object
•
ShearRetention object
•
ShearTestData object
•
SimpleShearTestData object
•
Solubility object
•
SoretEffect object
•
Sorption object
•
SpecificHeat object
•
SuperElasticHardening object
•
SuperElasticHardeningModifications object
•
SuperElasticity object
•
Swelling object
•
TensileFailure object
•
TensionCutOff object
•
TensionStiffening object
•
TriaxialTestData object
•
Trs object
•
UniaxialTestData object
•
UserDefinedField object
•
UserMaterial object
•
UserOutputVariables object
•
VelocityDependence object
•
Viscoelastic object
•
Viscosity object
•
Viscous object
•
VoidNucleation object
•
VolumetricTestData object
2785
Abaqus Scripting Reference Guide

Material object
A Material object is the object used to specify a material. The Material object stores the various settings that determine
how a material behaves.
A material is created by combining one or more individual material options and sub options. A particular material
option is associated with the Material object through a member. For example: the acousticMedium member may contain
an AcousticMedium object. The alternative of having a MaterialOption abstract base class and a container of
MaterialOptions was rejected because it would make it more difﬁcult to enforce the fact that one Material object cannot
contain two AcousticMedium objects, for example.
Access
materialApi.materials()[name]
Material(...)
This method creates a Material object.
Path
materialApi.Material
Prototype
odb_Material&
Material(const odb_String& name,
         const odb_String& description,
         const odb_String& materialIdentifier);
Required arguments
An odb_String specifying the name of the new material.
name
Optional arguments
An odb_String specifying user description of the material. The default value is an
empty string.
description
An odb_String specifying material identiﬁer for customer use. The default value is
an empty string.
materialIdentiﬁer
Return value
A Material object.
Exceptions
InvalidNameError.
Members
The Material object has members with the same names and descriptions as the arguments to the Material  method.
Abaqus Scripting Reference Guide
2786
Material object

In addition, the Material object can have the following members:
Prototype
odb_AcousticMedium acousticMedium() const;
odb_BrittleCracking brittleCracking() const;
odb_CapPlasticity capPlasticity() const;
odb_CastIronPlasticity castIronPlasticity() const;
odb_ClayPlasticity clayPlasticity() const;
odb_Concrete concrete() const;
odb_ConcreteDamagedPlasticity concreteDamagedPlasticity() const;
odb_Conductivity conductivity() const;
odb_Creep creep() const;
odb_CrushableFoam crushableFoam() const;
odb_DamageInitiation ductileDamageInitiation() const;
odb_DamageInitiation fldDamageInitiation() const;
odb_DamageInitiation flsdDamageInitiation() const;
odb_DamageInitiation johnsonCookDamageInitiation() const;
odb_DamageInitiation maxeDamageInitiation() const;
odb_DamageInitiation maxsDamageInitiation() const;
odb_DamageInitiation maxpeDamageInitiation() const;
odb_DamageInitiation maxpsDamageInitiation() const;
odb_DamageInitiation mkDamageInitiation() const;
odb_DamageInitiation msfldDamageInitiation() const;
odb_DamageInitiation quadeDamageInitiation() const;
odb_DamageInitiation quadsDamageInitiation() const;
odb_DamageInitiation shearDamageInitiation() const;
odb_DamageInitiation hashinDamageInitiation() const;
odb_Damping damping() const;
odb_DeformationPlasticity deformationPlasticity() const;
odb_Density density() const;
odb_Depvar depvar() const;
odb_Dielectric dielectric() const;
odb_Diffusivity diffusivity() const;
odb_DruckerPrager druckerPrager() const;
odb_Elastic elastic() const;
odb_ElectricalConductivity electricalConductivity() const;
odb_Eos eos() const;
odb_Expansion expansion() const;
odb_FluidLeakoff fluidLeakoff() const;
odb_GapFlow gapFlow() const;
odb_GasketThicknessBehavior gasketThicknessBehavior() const;
odb_GasketTransverseShearElastic gasketTransverseShearElastic() const;
odb_GasketMembraneElastic gasketMembraneElastic() const;
odb_Gel gel() const;
odb_HeatGeneration heatGeneration() const;
odb_Hyperelastic hyperelastic() const;
odb_Hyperfoam hyperfoam() const;
odb_Hypoelastic hypoelastic() const;
odb_InelasticHeatFraction inelasticHeatFraction() const;
odb_JouleHeatFraction jouleHeatFraction() const;
odb_LatentHeat latentHeat() const;
odb_LowDensityFoam lowDensityFoam() const;
odb_MagneticPermeability magneticPermeability() const;
odb_MohrCoulombPlasticity mohrCoulombPlasticity() const;
odb_MoistureSwelling moistureSwelling() const;
odb_MullinsEffect mullinsEffect() const;
odb_Permeability permeability() const;
odb_Piezoelectric piezoelectric() const;
odb_Plastic plastic() const;
odb_PoreFluidExpansion poreFluidExpansion() const;
2787
Abaqus Scripting Reference Guide
Material object

odb_PorousBulkModuli porousBulkModuli() const;
odb_PorousElastic porousElastic() const;
odb_PorousMetalPlasticity porousMetalPlasticity() const;
odb_Regularization regularization() const;
odb_Solubility solubility() const;
odb_Sorption sorption() const;
odb_SpecificHeat specificHeat() const;
odb_Swelling swelling() const;
odb_UserDefinedField userDefinedField() const;
odb_UserMaterial userMaterial() const;
odb_UserOutputVariables userOutputVariables() const;
odb_Viscoelastic viscoelastic() const;
odb_Viscosity viscosity() const;
odb_Viscous viscous() const;
An AcousticMedium object.
acousticMedium
A BrittleCracking object.
brittleCracking
A CapPlasticity object.
capPlasticity
A CastIronPlasticity object.
castIronPlasticity
A ClayPlasticity object.
clayPlasticity
A Concrete object.
concrete
A ConcreteDamagedPlasticity object.
concreteDamagedPlasticity
A Conductivity object.
conductivity
A Creep object.
creep
A CrushableFoam object.
crushableFoam
A DamageInitiation object.
ductileDamageInitiation
A DamageInitiation object.
ﬂdDamageInitiation
A DamageInitiation object.
ﬂsdDamageInitiation
A DamageInitiation object.
johnsonCookDamageInitiation
A DamageInitiation object.
maxeDamageInitiation
A DamageInitiation object.
maxsDamageInitiation
A DamageInitiation object.
maxpeDamageInitiation
A DamageInitiation object.
maxpsDamageInitiation
Abaqus Scripting Reference Guide
2788
Material object

A DamageInitiation object.
mkDamageInitiation
A DamageInitiation object.
msﬂdDamageInitiation
A DamageInitiation object.
quadeDamageInitiation
A DamageInitiation object.
quadsDamageInitiation
A DamageInitiation object.
shearDamageInitiation
A DamageInitiation object.
hashinDamageInitiation
A Damping object.
damping
A DeformationPlasticity object.
deformationPlasticity
A Density object.
density
A Depvar object.
depvar
A Dielectric object.
dielectric
A Diffusivity object.
diffusivity
A DruckerPrager object.
druckerPrager
An Elastic object.
elastic
An ElectricalConductivity object.
electricalConductivity
An Eos object.
eos
An Expansion object.
expansion
A FluidLeakoff object.
ﬂuidLeakoff
A GapFlow object.
gapFlow
A GasketThicknessBehavior object.
gasketThicknessBehavior
A GasketTransverseShearElastic object.
gasketTransverseShearElastic
A GasketMembraneElastic object.
gasketMembraneElastic
A Gel object.
gel
A HeatGeneration object.
heatGeneration
2789
Abaqus Scripting Reference Guide
Material object

A Hyperelastic object.
hyperelastic
A Hyperfoam object.
hyperfoam
A Hypoelastic object.
hypoelastic
An InelasticHeatFraction object.
inelasticHeatFraction
A JouleHeatFraction object.
jouleHeatFraction
A LatentHeat object.
latentHeat
A LowDensityFoam object.
lowDensityFoam
A MagneticPermeability object.
magneticPermeability
A MohrCoulombPlasticity object.
mohrCoulombPlasticity
A MoistureSwelling object.
moistureSwelling
A MullinsEffect object.
mullinsEffect
A Permeability object.
permeability
A Piezoelectric object.
piezoelectric
A Plastic object.
plastic
A PoreFluidExpansion object.
poreFluidExpansion
A PorousBulkModuli object.
porousBulkModuli
A PorousElastic object.
porousElastic
A PorousMetalPlasticity object.
porousMetalPlasticity
A Regularization object.
regularization
A Solubility object.
solubility
A Sorption object.
sorption
A SpeciﬁcHeat object.
speciﬁcHeat
A Swelling object.
swelling
A UserDeﬁnedField object.
userDeﬁnedField
Abaqus Scripting Reference Guide
2790
Material object

A UserMaterial object.
userMaterial
A UserOutputVariables object.
userOutputVariables
A Viscoelastic object.
viscoelastic
A Viscosity object.
viscosity
A Viscous object.
viscous
Corresponding analysis keywords
•
*MATERIAL
2791
Abaqus Scripting Reference Guide
Material object

AcousticMedium object
The AcousticMedium object speciﬁes the acoustic properties of a material.
Access
materialApi.materials()[name].acousticMedium()
AcousticMedium(...)
This method creates an AcousticMedium object.
Path
materialApi.materials()[name].AcousticMedium
Prototype
odb_AcousticMedium&
AcousticMedium(bool acousticVolumetricDrag,
           bool temperatureDependencyB,
           bool temperatureDependencyV,
           int dependenciesB,
           int dependenciesV,
           const odb_SequenceSequenceDouble& bulkTable,
           const odb_SequenceSequenceDouble& volumetricTable);
Required arguments
None.
Optional arguments
A Boolean specifying whether the volumetricTable data is speciﬁed. The default value
is false.
acousticVolumetricDrag
A Boolean specifying whether the data in bulkTable depend on temperature. The
default value is false.
temperatureDependencyB
A Boolean specifying whether the data in volumetricTable depend on temperature.
The default value is false.
temperatureDependencyV
An Int specifying the number of ﬁeld variable dependencies for the data in bulkTable.
The default value is 0.
dependenciesB
An Int specifying the number of ﬁeld variable dependencies for the data in
volumetricTable. The default value is 0.
dependenciesV
An odb_SequenceSequenceDouble specifying the following:
bulkTable
•
Bulk modulus.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
2792
AcousticMedium object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
An odb_SequenceSequenceDouble specifying the following:
volumetricTable
•
Volumetric drag.
•
Frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
Return value
An AcousticMedium object.
Exceptions
RangeError.
Members
The AcousticMedium object has members with the same names and descriptions as the arguments to the AcousticMedium
method.
Corresponding analysis keywords
•
*ACOUSTIC MEDIUM
2793
Abaqus Scripting Reference Guide
AcousticMedium object

AnnealTemperature object
The AnnealTemperature object speciﬁes the material annealing temperature.
Access
materialApi.materials()[name].plastic().annealTemperature()
AnnealTemperature(...)
This method creates an AnnealTemperature object.
Path
materialApi.materials()[name].plastic().AnnealTemperature
Prototype
odb_AnnealTemperature&
AnnealTemperature(const odb_SequenceSequenceDouble& table,
                  int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
•
The annealing temperature, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
An AnnealTemperature object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
2794
AnnealTemperature object

Members
The AnnealTemperature object has members with the same names and descriptions as the arguments to the
AnnealTemperature  method.
Corresponding analysis keywords
•
*ANNEAL TEMPERATURE
2795
Abaqus Scripting Reference Guide
AnnealTemperature object

BiaxialTestData object
The BiaxialTestData object provides equibiaxial test data (compression and/or tension).
Access
materialApi.materials()[name].hyperelastic().biaxialTestData()
materialApi.materials()[name].hyperfoam().biaxialTestData()
materialApi.materials()[name].mullinsEffect().biaxialTests(i)
BiaxialTestData(...)
This method creates a BiaxialTestData object.
Path
materialApi.materials()[name].hyperelastic().BiaxialTestData
materialApi.materials()[name].hyperfoam().BiaxialTestData
materialApi.materials()[name].mullinsEffect().BiaxialTestData
Prototype
odb_BiaxialTestData&
BiaxialTestData(const odb_SequenceSequenceDouble& table,
                odb_Union smoothing,
                bool lateralNominalStrain,
                bool temperatureDependency,
                int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the following:
table
•
Nominal stress, 
.
•
Nominal strain, 
.
Optional arguments
The string "NONE" or an Int specifying the value for smoothing. If
smoothing="NONE", no smoothing is employed. The default value is "NONE".
smoothing
A Boolean specifying whether to include lateral nominal strain. The default value
is false.
lateralNominalStrain
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Abaqus Scripting Reference Guide
2796
BiaxialTestData object

Return value
A BiaxialTestData object.
Exceptions
None.
Members
The BiaxialTestData object has members with the same names and descriptions as the arguments to the BiaxialTestData
method.
Corresponding analysis keywords
•
*BIAXIAL TEST DATA
2797
Abaqus Scripting Reference Guide
BiaxialTestData object

BrittleCracking object
The BrittleCracking object speciﬁes cracking and postcracking properties for the brittle cracking material model.
Access
materialApi.materials()[name].brittleCracking()
BrittleCracking(...)
This method creates a BrittleCracking object.
Path
materialApi.materials()[name].BrittleCracking
Prototype
odb_BrittleCracking&
BrittleCracking(const odb_SequenceSequenceDouble& table,
                bool temperatureDependency,
                int dependencies,
                const odb_String& type);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_String specifying the type of postcracking behavior. Possible values are
"STRAIN", "DISPLACEMENT", and "GFI". The default value is "STRAIN".
type
Table data
If type=STRAIN the table data specify the following:
•
Remaining direct stress after cracking.
•
Direct cracking strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT the table data specify the following:
Abaqus Scripting Reference Guide
2798
BrittleCracking object

•
Remaining direct stress after cracking.
•
Direct cracking displacement.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=GFI the table data specify the following:
•
Failure stress.
•
Mode I fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BrittleCracking object.
Exceptions
None.
Members
The BrittleCracking object has members with the same names and descriptions as the arguments to the BrittleCracking
method.
In addition, the BrittleCracking object can have the following members:
Prototype
odb_BrittleShear brittleShear() const;
odb_BrittleFailure brittleFailure() const;
A BrittleShear object.
brittleShear
A BrittleFailure object.
brittleFailure
Corresponding analysis keywords
•
*BRITTLE CRACKING
2799
Abaqus Scripting Reference Guide
BrittleCracking object

BrittleFailure object
The BrittleFailure object speciﬁes the brittle failure of the material.
Access
materialApi.materials()[name].brittleCracking().brittleFailure()
BrittleFailure(...)
This method creates a BrittleFailure object.
Path
materialApi.materials()[name].brittleCracking().BrittleFailure
Prototype
odb_BrittleFailure&
BrittleFailure(const odb_SequenceSequenceDouble& table,
               bool temperatureDependency,
               int dependencies,
               const odb_String& failureCriteria);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
An odb_String specifying the failure criteria. Possible values are
"UNIDIRECTIONAL", "BIDIRECTIONAL", and "TRIDIRECTIONAL". The
default value is "UNIDIRECTIONAL".
failureCriteria
Table data
If parent BrittleCracking member type=STRAIN the table data specify the following:
•
Direct cracking failure strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If parent BrittleCracking member type=DISPLACEMENT or type=GFI the table data specify the following:
Abaqus Scripting Reference Guide
2800
BrittleFailure object

•
Direct cracking failure displacement.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BrittleFailure object.
Exceptions
RangeError.
Members
The BrittleFailure object has members with the same names and descriptions as the arguments to the BrittleFailure
method.
Corresponding analysis keywords
•
*BRITTLE FAILURE
2801
Abaqus Scripting Reference Guide
BrittleFailure object

BrittleShear object
The BrittleShear object speciﬁes the postcracking shear behavior of a material used in a brittle cracking model.
Access
materialApi.materials()[name].brittleCracking().brittleShear()
BrittleShear(...)
This method creates a BrittleShear object.
Path
materialApi.materials()[name].brittleCracking().BrittleShear
Prototype
odb_BrittleShear&
BrittleShear(const odb_SequenceSequenceDouble& table,
             bool temperatureDependency,
             int dependencies,
             const odb_String& type);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_String specifying the type of postcracking shear behavior. Possible values are
"RETENTION_FACTOR" and "POWER_LAW". The default value is
"RETENTION_FACTOR".
type
Table data
If type=RETENTION_FACTOR the table data specify the following:
•
Shear retention factor.
•
Crack opening strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=POWER_LAW the table data specify the following:
Abaqus Scripting Reference Guide
2802
BrittleShear object

•
e.
•
p.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BrittleShear object.
Exceptions
RangeError.
Members
The BrittleShear object has members with the same names and descriptions as the arguments to the BrittleShear
method.
Corresponding analysis keywords
•
*BRITTLE SHEAR
2803
Abaqus Scripting Reference Guide
BrittleShear object

CapCreepCohesion object
The CapCreepCohesion object speciﬁes a cap creep model and material properties.
Access
materialApi.materials()[name].capPlasticity().capCreepCohesion()
CapCreepCohesion(...)
This method creates a CapCreepCohesion object.
Path
materialApi.materials()[name].capPlasticity().CapCreepCohesion
Prototype
odb_CapCreepCohesion&
CapCreepCohesion(const odb_SequenceSequenceDouble& table,
                 const odb_String& law,
                 bool temperatureDependency,
                 int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the cap creep law. Possible values are "STRAIN", "TIME",
"SINGHM", and "USER". The default value is "STRAIN".
law
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2804
CapCreepCohesion object

If law=SINGHM, the table data specify the following:
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CapCreepCohesion object.
Exceptions
None.
Members
The CapCreepCohesion object has members with the same names and descriptions as the arguments to the
CapCreepCohesion  method.
Corresponding analysis keywords
•
*CAP CREEP
2805
Abaqus Scripting Reference Guide
CapCreepCohesion object

CapCreepConsolidation object
The CapCreepConsolidation object speciﬁes a cap creep model and material properties.
Access
materialApi.materials()[name].capPlasticity().capCreepConsolidation()
CapCreepConsolidation(...)
This method creates a CapCreepConsolidation object.
Path
materialApi.materials()[name].capPlasticity().CapCreepConsolidation
Prototype
odb_CapCreepConsolidation&
CapCreepConsolidation(const odb_SequenceSequenceDouble& table,
                      const odb_String& law,
                      bool temperatureDependency,
                      int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the cap creep law. Possible values are "STRAIN", "TIME",
"SINGHM", and "USER". The default value is "STRAIN".
law
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2806
CapCreepConsolidation object

If law=SINGHM, the table data specify the following:
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CapCreepConsolidation object.
Exceptions
None.
Members
The CapCreepConsolidation object has members with the same names and descriptions as the arguments to the
CapCreepConsolidation  method.
Corresponding analysis keywords
•
*CAP CREEP
2807
Abaqus Scripting Reference Guide
CapCreepConsolidation object

CapHardening object
The CapHardening object speciﬁes Drucker-Prager/Cap plasticity hardening.
Access
materialApi.materials()[name].capPlasticity().capHardening()
CapHardening(...)
This method creates a CapHardening object.
Path
materialApi.materials()[name].capPlasticity().CapHardening
Prototype
odb_CapHardening&
CapHardening(const odb_SequenceSequenceDouble& table,
             bool temperatureDependency,
             int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Hydrostatic pressure yield stress.
•
Absolute value of the corresponding volumetric inelastic strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CapHardening object.
Abaqus Scripting Reference Guide
2808
CapHardening object

Exceptions
RangeError.
Members
The CapHardening object has members with the same names and descriptions as the arguments to the CapHardening
method.
Corresponding analysis keywords
•
*CAP HARDENING
2809
Abaqus Scripting Reference Guide
CapHardening object

CapPlasticity object
The CapPlasticity object speciﬁes the modiﬁed Drucker-Prager/Cap plasticity model.
Access
materialApi.materials()[name].capPlasticity()
CapPlasticity(...)
This method creates a CapPlasticity object.
Path
materialApi.materials()[name].CapPlasticity
Prototype
odb_CapPlasticity&
CapPlasticity(const odb_SequenceSequenceDouble& table,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Material cohesion, , in the –  plane (Abaqus/Standard) or in the –  plane (Abaqus/Explicit).
•
Material angle of friction, , in the –  plane (Abaqus/Standard) or in the –  plane (Abaqus/Explicit). Give the
value in degrees.
•
Cap eccentricity parameter, . Its value must be greater than zero (typically 0.0 
 1.0).
•
Initial cap yield surface position, 
.
•
Transition surface radius parameter, . The default value is 0.0 (i.e., no transition surface).
•
(Not used in Abaqus/Explicit) 
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial
compression. Possible values are 0.778 
 1.0. If the default value of 0.0 is accepted, Abaqus/Standard assumes
 1.0.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
2810
CapPlasticity object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CapPlasticity object.
Exceptions
RangeError.
Members
The CapPlasticity object has members with the same names and descriptions as the arguments to the CapPlasticity
method.
In addition, the CapPlasticity object can have the following members:
Prototype
odb_CapCreepCohesion capCreepCohesion() const;
odb_CapCreepConsolidation capCreepConsolidation() const;
odb_CapHardening capHardening() const;
A CapCreepCohesion object.
capCreepCohesion
A CapCreepConsolidation object.
capCreepConsolidation
A CapHardening object.
capHardening
Corresponding analysis keywords
•
*CAP PLASTICITY
2811
Abaqus Scripting Reference Guide
CapPlasticity object

CastIronCompressionHardening object
The CastIronCompressionHardening object speciﬁes hardening for the Cast- Iron plasticity model.
Access
materialApi.materials()[name].castIronPlasticity()\
.castIronCompressionHardening()
CastIronCompressionHardening(...)
This method creates a CastIronCompressionHardening object.
Path
materialApi.materials()[name].castIronPlasticity()\
.CastIronCompressionHardening
Prototype
odb_CastIronCompressionHardening&
CastIronCompressionHardening(const odb_SequenceSequenceDouble& table,
                             bool temperatureDependency,
                             int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Yield stress in compression, 
.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CastIronCompressionHardening object.
Abaqus Scripting Reference Guide
2812
CastIronCompressionHardening object

Exceptions
RangeError.
Members
The CastIronCompressionHardening object has members with the same names and descriptions as the arguments to
the CastIronCompressionHardening  method.
Corresponding analysis keywords
•
*CAST IRON COMPRESSION HARDENING
2813
Abaqus Scripting Reference Guide
CastIronCompressionHardening object

CastIronPlasticity object
The CastIronPlasticity object speciﬁes the Cast Iron plasticity model.
Access
materialApi.materials()[name].castIronPlasticity()
CastIronPlasticity(...)
This method creates a CastIronPlasticity object.
Path
materialApi.materials()[name].CastIronPlasticity
Prototype
odb_CastIronPlasticity&
CastIronPlasticity(const odb_SequenceSequenceDouble& table,
                   bool temperatureDependency,
                   int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
The table data specify the following:
•
Plastic Poisson's ratio, 
 (dimensionless).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CastIronPlasticity object.
Abaqus Scripting Reference Guide
2814
CastIronPlasticity object

Exceptions
RangeError.
Members
The CastIronPlasticity object has members with the same names and descriptions as the arguments to the
CastIronPlasticity  method.
In addition, the CastIronPlasticity object can have the following members:
Prototype
odb_CastIronTensionHardening castIronTensionHardening() const;
odb_CastIronCompressionHardening castIronCompressionHardening() const;
A CastIronTensionHardening object.
castIronTensionHardening
A CastIronCompressionHardening object.
castIronCompressionHardening
Corresponding analysis keywords
•
*CAST IRON PLASTICITY
2815
Abaqus Scripting Reference Guide
CastIronPlasticity object

CastIronTensionHardening object
The CastIronTensionHardening object speciﬁes hardening for the Cast- Iron plasticity model.
Access
materialApi.materials()[name].castIronPlasticity()\
.castIronTensionHardening()
CastIronTensionHardening(...)
This method creates a CastIronTensionHardening object.
Path
materialApi.materials()[name].castIronPlasticity()\
.CastIronTensionHardening
Prototype
odb_CastIronTensionHardening&
CastIronTensionHardening(const odb_SequenceSequenceDouble& table,
                         bool temperatureDependency,
                         int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Yield stress in uniaxial tension, 
.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CastIronTensionHardening object.
Abaqus Scripting Reference Guide
2816
CastIronTensionHardening object

Exceptions
RangeError.
Members
The CastIronTensionHardening object has members with the same names and descriptions as the arguments to the
CastIronTensionHardening  method.
Corresponding analysis keywords
•
*CAST IRON TENSION HARDENING
2817
Abaqus Scripting Reference Guide
CastIronTensionHardening object

ClayHardening object
The ClayHardening object speciﬁes hardening for the clay plasticity model.
Access
materialApi.materials()[name].clayPlasticity().clayHardening()
ClayHardening(...)
This method creates a ClayHardening object.
Path
materialApi.materials()[name].clayPlasticity().ClayHardening
Prototype
odb_ClayHardening&
ClayHardening(const odb_SequenceSequenceDouble& table,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
The hydrostatic pressure stress at yield, 
.
•
The absolute value of the corresponding volumetric plastic strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ClayHardening object.
Abaqus Scripting Reference Guide
2818
ClayHardening object

Exceptions
RangeError.
Members
The ClayHardening object has members with the same names and descriptions as the arguments to the ClayHardening
method.
Corresponding analysis keywords
•
*CLAY HARDENING
2819
Abaqus Scripting Reference Guide
ClayHardening object

ClayPlasticity object
The ClayPlasticity object speciﬁes the extended Cam-clay plasticity model.
Access
materialApi.materials()[name].clayPlasticity()
ClayPlasticity(...)
This method creates a ClayPlasticity object.
Path
materialApi.materials()[name].ClayPlasticity
Prototype
odb_ClayPlasticity&
ClayPlasticity(const odb_SequenceSequenceDouble& table,
               odb_Union intercept,
               const odb_String& hardening,
               bool temperatureDependency,
               int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or a Double specifying 
, the intercept of the virgin consolidation
line with the void ratio axis in a plot of void ratio versus the logarithm of pressure stress.
The default value is "NONE".
intercept
This argument is valid only if hardening="EXPONENTIAL".
An odb_String specifying the type of hardening/softening deﬁnition. Possible values are
"EXPONENTIAL" and "TABULAR". The default value is "EXPONENTIAL".
hardening
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If hardening=EXPONENTIAL, the table data specify the following:
•
Logarithmic plastic bulk modulus,  (dimensionless).
•
Stress ratio at critical state, 
.
•
The initial yield surface size, 
.
Abaqus Scripting Reference Guide
2820
ClayPlasticity object

•
, the parameter deﬁning the size of the yield surface on the “wet” side of critical state.
•
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial compression. 
. If the
default value of 0.0 is accepted, a value of 1.0 is assumed.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=TABULAR, the table data specify the following:
•
Stress ratio at critical state, 
.
•
The initial volumetric plastic strain, 
, corresponding to 
 according to the ClayHardening deﬁnition.
•
, the parameter deﬁning the size of the yield surface on the “wet” side of critical state.
•
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial compression. 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ClayPlasticity object.
Exceptions
RangeError.
Members
The ClayPlasticity object has members with the same names and descriptions as the arguments to the ClayPlasticity
method.
In addition, the ClayPlasticity object can have the following member:
Prototype
odb_ClayHardening clayHardening() const;
A ClayHardening object.
clayHardening
Corresponding analysis keywords
•
*CLAY PLASTICITY
2821
Abaqus Scripting Reference Guide
ClayPlasticity object

CombinedTestData object
The CombinedTestData object speciﬁes simultaneously the normalized shear and bulk compliances or relaxation
moduli as functions of time.
Access
materialApi.materials()[name].viscoelastic().combinedTestData()
CombinedTestData(...)
This method creates a CombinedTestData object.
Path
materialApi.materials()[name].viscoelastic().CombinedTestData
Prototype
odb_CombinedTestData&
CombinedTestData(const odb_SequenceSequenceDouble& table,
                 odb_Union volinf,
                 odb_Union shrinf);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below. The values of the table
data depend on the value of the time member of the Viscoelastic object.
table
Optional arguments
The string "NONE" or a Double specifying a normalized volume. The value of volinf depends on the
value of the time member of the Viscoelastic object. The default value is "NONE".
volinf
If time="RELAXATION_TEST_DATA", volinf speciﬁes the value of the long-term normalized volumetric
modulus, 
.
If time="CREEP_TEST_DATA", volinf speciﬁes the value of the long-term normalized volumetric
compliance, 
.
The string "NONE" or a Double specifying a normalized shear. The value of shrinf depends on the value
of the time member of the Viscoelastic object. The default value is "NONE".
shrinf
If time="RELAXATION_TEST_DATA", shrinf speciﬁes the value of the long-term normalized shear
modulus, 
.
If time="CREEP_TEST_DATA", shrinf speciﬁes the value of the long-term normalized shear compliance,
.
Table data
If time=RELAXATION_TEST_DATA, the table data specify the following:
Abaqus Scripting Reference Guide
2822
CombinedTestData object

•
Normalized shear modulus, 
.
•
Normalized volumetric (bulk) modulus, 
.
•
Time 
.
If time=CREEP_TEST_DATA, the table data specify the following:
•
Normalized shear compliance, 
.
•
Normalized volumetric (bulk) compliance, 
.
•
Time 
.
Return value
A CombinedTestData object.
Exceptions
None.
Members
The CombinedTestData object has members with the same names and descriptions as the arguments to the
CombinedTestData  method.
Corresponding analysis keywords
•
*COMBINED TEST DATA
2823
Abaqus Scripting Reference Guide
CombinedTestData object

Concrete object
The Concrete object deﬁnes concrete properties beyond the elastic range.
Access
materialApi.materials()[name].concrete()
Concrete(...)
This method creates a Concrete object.
Path
materialApi.materials()[name].Concrete
Prototype
odb_Concrete&
Concrete(const odb_SequenceSequenceDouble& table,
         bool temperatureDependency,
         int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Absolute value of compressive stress.
•
Absolute value of plastic strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Concrete object.
Abaqus Scripting Reference Guide
2824
Concrete object

Exceptions
RangeError.
Members
The Concrete object has members with the same names and descriptions as the arguments to the Concrete  method.
In addition, the Concrete object can have the following members:
Prototype
odb_FailureRatios failureRatios() const;
odb_ShearRetention shearRetention() const;
odb_TensionStiffening tensionStiffening() const;
A FailureRatios object.
failureRatios
A ShearRetention object.
shearRetention
A TensionStiffening object.
tensionStiffening
Corresponding analysis keywords
•
*CONCRETE
2825
Abaqus Scripting Reference Guide
Concrete object

ConcreteCompressionDamage object
The ConcreteCompressionDamage object speciﬁes hardening for the concrete damaged plasticity model.
Access
materialApi.materials()[name].concreteDamagedPlasticity()\
.concreteCompressionDamage()
ConcreteCompressionDamage(...)
This method creates a ConcreteCompressionDamage object.
Path
materialApi.materials()[name].concreteDamagedPlasticity()\
.ConcreteCompressionDamage
Prototype
odb_ConcreteCompressionDamage&
ConcreteCompressionDamage(const odb_SequenceSequenceDouble& table,
                          double tensionRecovery,
                          bool temperatureDependency,
                          int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Double specifying the value of the stiffness recovery factor, 
, that determines
the amount of tension stiffness that is recovered as loading changes from compression
to tension. The default value is 0.0.
tensionRecovery
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Compressive damage variable, 
.
•
Inelastic (crushing) strain, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2826
ConcreteCompressionDamage object

Return value
A ConcreteCompressionDamage object.
Exceptions
RangeError.
Members
The ConcreteCompressionDamage object has members with the same names and descriptions as the arguments to the
ConcreteCompressionDamage  method.
Corresponding analysis keywords
•
*CONCRETE COMPRESSION DAMAGE
2827
Abaqus Scripting Reference Guide
ConcreteCompressionDamage object

ConcreteCompressionHardening object
The ConcreteCompressionHardening object speciﬁes hardening for the concrete damaged plasticity model.
Access
materialApi.materials()[name].concreteDamagedPlasticity()\
.concreteCompressionHardening()
ConcreteCompressionHardening(...)
This method creates a ConcreteCompressionHardening object.
Path
materialApi.materials()[name].concreteDamagedPlasticity()\
.ConcreteCompressionHardening
Prototype
odb_ConcreteCompressionHardening&
ConcreteCompressionHardening(const odb_SequenceSequenceDouble& table,
                             bool rate,
                             bool temperatureDependency,
                             int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on rate. The default value is false.
rate
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
•
Yield stress in compression, 
.
•
Inelastic (crushing) strain, 
.
•
Inelastic (crushing) strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2828
ConcreteCompressionHardening object

Return value
A ConcreteCompressionHardening object.
Exceptions
RangeError.
Members
The ConcreteCompressionHardening object has members with the same names and descriptions as the arguments to
the ConcreteCompressionHardening  method.
Corresponding analysis keywords
•
*CONCRETE COMPRESSION HARDENING
2829
Abaqus Scripting Reference Guide
ConcreteCompressionHardening object

ConcreteDamagedPlasticity object
The ConcreteDamagedPlasticity object speciﬁes the concrete damaged plasticity model.
Access
materialApi.materials()[name].concreteDamagedPlasticity()
ConcreteDamagedPlasticity(...)
This method creates a ConcreteDamagedPlasticity object.
Path
materialApi.materials()[name].ConcreteDamagedPlasticity
Prototype
odb_ConcreteDamagedPlasticity&
ConcreteDamagedPlasticity(const odb_SequenceSequenceDouble& table,
                          bool temperatureDependency,
                          int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
The table data specify the following:
•
Dilation angle,  (in degrees) in the –  plane.
•
Flow potential eccentricity, . The default value is 0.1.
•
, the ratio of initial equibiaxial compressive yield stress to initial uniaxial compressive yield stress. The
default value is 1.16.
•
, the ratio of the second stress invariant on the tensile meridian, to that on the compressive meridian, at initial
yield for any given value of the pressure invariant  such that the maximum principal stress is negative. The default
value is 2/3.
•
Viscosity parameter, , used for the viscoplastic regularization of the concrete constitutive equations in an
Abaqus/Standard analysis. This parameter is ignored in an Abaqus/Explicit analysis. The default value is 0.0.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
2830
ConcreteDamagedPlasticity object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConcreteDamagedPlasticity object.
Exceptions
RangeError.
Members
The ConcreteDamagedPlasticity object has members with the same names and descriptions as the arguments to the
ConcreteDamagedPlasticity  method.
In addition, the ConcreteDamagedPlasticity object can have the following members:
Prototype
odb_ConcreteCompressionHardening concreteCompressionHardening() const;
odb_ConcreteTensionStiffening concreteTensionStiffening() const;
odb_ConcreteCompressionDamage concreteCompressionDamage() const;
odb_ConcreteTensionDamage concreteTensionDamage() const;
A ConcreteCompressionHardening object.
concreteCompressionHardening
A ConcreteTensionStiffening object.
concreteTensionStiffening
A ConcreteCompressionDamage object.
concreteCompressionDamage
A ConcreteTensionDamage object.
concreteTensionDamage
Corresponding analysis keywords
•
*CONCRETE DAMAGED PLASTICITY
2831
Abaqus Scripting Reference Guide
ConcreteDamagedPlasticity object

ConcreteTensionDamage object
The ConcreteTensionDamage object speciﬁes hardening for the concrete damaged plasticity model.
Access
materialApi.materials()[name].concreteDamagedPlasticity()\
.concreteTensionDamage()
ConcreteTensionDamage(...)
This method creates a ConcreteTensionDamage object.
Path
materialApi.materials()[name].concreteDamagedPlasticity()\
.ConcreteTensionDamage
Prototype
odb_ConcreteTensionDamage&
ConcreteTensionDamage(const odb_SequenceSequenceDouble& table,
                      double compressionRecovery,
                      const odb_String& type,
                      bool temperatureDependency,
                      int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Double specifying the value of the stiffness recovery factor, 
, that determines the
amount of compression stiffness that is recovered as loading changes from tension to
compression. The default value is 1.0.
compressionRecovery
An odb_String specifying the type of tensile damage data. Set type="STRAIN" to specify
the tensile damage variable as a function of cracking strain. Set type="DISPLACEMENT"
type
to specify the tensile damage variable as a function of cracking displacement. Possible
values are "STRAIN" and "DISPLACEMENT". The default value is "STRAIN".
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRAIN, the table data specify the following:
•
Tensile damage variable, 
.
Abaqus Scripting Reference Guide
2832
ConcreteTensionDamage object

•
Direct cracking strain, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, the table data specify the following:
•
Tensile damage variable, 
.
•
Direct cracking displacement, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConcreteTensionDamage object.
Exceptions
RangeError.
Members
The ConcreteTensionDamage object has members with the same names and descriptions as the arguments to the
ConcreteTensionDamage  method.
Corresponding analysis keywords
•
*CONCRETE TENSION DAMAGE
2833
Abaqus Scripting Reference Guide
ConcreteTensionDamage object

ConcreteTensionStiffening object
The ConcreteTensionStiffening object speciﬁes hardening for the concrete damaged plasticity model.
Access
materialApi.materials()[name].concreteDamagedPlasticity()\
.concreteTensionStiffening()
ConcreteTensionStiffening(...)
This method creates a ConcreteTensionStiffening object.
Path
materialApi.materials()[name].concreteDamagedPlasticity()\
.ConcreteTensionStiffening
Prototype
odb_ConcreteTensionStiffening&
ConcreteTensionStiffening(const odb_SequenceSequenceDouble& table,
                          bool rate,
                          const odb_String& type,
                          bool temperatureDependency,
                          int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on rate. The default value is false.
rate
An odb_String specifying the type of postcracking behavior data. Possible values are:
type
•
"STRAIN", specifying postfailure stress as a function of cracking strain.
•
"DISPLACEMENT", specifying postfailure stress as a function of cracking displacement.
•
"GFI", specifying failure stress as a function of the fracture energy.
The default value is "STRAIN".
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRAIN, the table data specify the following:
•
Remaining direct stress after cracking, 
.
Abaqus Scripting Reference Guide
2834
ConcreteTensionStiffening object

•
Direct cracking strain, 
.
•
Direct cracking strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, the table data specify the following:
•
Remaining direct stress after cracking, 
.
•
Direct cracking displacement, 
.
•
Direct cracking displacement rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=GFI, the table data specify the following:
•
Failure stress, 
.
•
Fracture energy, 
.
•
Direct cracking displacement rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ConcreteTensionStiffening object.
Exceptions
RangeError.
Members
The ConcreteTensionStiffening object has members with the same names and descriptions as the arguments to the
ConcreteTensionStiffening  method.
Corresponding analysis keywords
•
*CONCRETE TENSION STIFFENING
2835
Abaqus Scripting Reference Guide
ConcreteTensionStiffening object

Conductivity object
The Conductivity object speciﬁes thermal conductivity.
Access
materialApi.materials()[name].conductivity()
Conductivity(...)
This method creates a Conductivity object.
Path
materialApi.materials()[name].Conductivity
Prototype
odb_Conductivity&
Conductivity(const odb_SequenceSequenceDouble& table,
             const odb_String& type,
             bool temperatureDependency,
             int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of conductivity. Possible values are "ISOTROPIC",
"ORTHOTROPIC", and "ANISOTROPIC". The default value is "ISOTROPIC".
type
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Conductivity, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
Abaqus Scripting Reference Guide
2836
Conductivity object

•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Conductivity object.
Exceptions
RangeError.
Members
The Conductivity object has members with the same names and descriptions as the arguments to the Conductivity
method.
Corresponding analysis keywords
•
*CONDUCTIVITY
2837
Abaqus Scripting Reference Guide
Conductivity object

ContactArea object
A ContactArea object speciﬁes a suboption of gasket thickness behavior when variableUnits=FORCE on the
GasketThicknessBehavior object. The ContactArea object deﬁnes the contact area or contact width versus closure
curves to output an average pressure through variable CS11.
Access
materialApi.materials()[name].gasketThicknessBehavior().contactArea()
ContactArea(...)
This method creates a ContactArea object.
Path
materialApi.materials()[name].gasketThicknessBehavior().ContactArea
Prototype
odb_ContactArea&
ContactArea(const odb_SequenceSequenceDouble& table,
            bool temperatureDependency,
            int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether contact area data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies included in the deﬁnition
of the contact area data, in addition to temperature. The default value is 0.
dependencies
Table data
•
Contact area or width; this value must be positive.
•
Closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A ContactArea object.
Abaqus Scripting Reference Guide
2838
ContactArea object

Exceptions
None.
Members
The ContactArea object has members with the same names and descriptions as the arguments to the ContactArea
method.
Corresponding analysis keywords
•
*GASKET CONTACT AREA
2839
Abaqus Scripting Reference Guide
ContactArea object

Creep object
The Creep object deﬁnes a creep law.
Access
materialApi.materials()[name].creep()
Creep(...)
This method creates a Creep object.
Path
materialApi.materials()[name].Creep
Prototype
odb_Creep&
Creep(const odb_SequenceSequenceDouble& table,
      const odb_String& law,
      bool temperatureDependency,
      int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the strain-hardening law. Possible values are "STRAIN",
"TIME", "HYPERBOLIC_SINE", and "USER". The default value is "STRAIN".
law
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2840
Creep object

If law=HYPERBOLIC_SINE, the table data specify the following:
•
.
•
.
•
.
•
, if the data depend on temperature.
•
.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Creep object.
Exceptions
RangeError.
Members
The Creep object has members with the same names and descriptions as the arguments to the Creep  method.
In addition, the Creep object can have the following members:
Prototype
odb_Ornl ornl() const;
odb_Potential potential() const;
An Ornl object.
ornl
A Potential object.
potential
Corresponding analysis keywords
•
*CREEP
2841
Abaqus Scripting Reference Guide
Creep object

CrushableFoam object
The CrushableFoam object speciﬁes the crushable foam plasticity model.
Access
materialApi.materials()[name].crushableFoam()
CrushableFoam(...)
This method creates a CrushableFoam object.
Path
materialApi.materials()[name].CrushableFoam
Prototype
odb_CrushableFoam&
CrushableFoam(const odb_SequenceSequenceDouble& table,
              const odb_String& hardening,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of hardening/softening deﬁnition. Possible values
are "VOLUMETRIC" and "ISOTROPIC". The default value is "VOLUMETRIC".
hardening
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If hardening=VOLUMETRIC, the table data specify the following:
•
Ratio, , of initial yield stress in uniaxial compression, 
, to initial yield stress in hydrostatic compression, 
;
0.0 
 3.0.
•
Ratio, 
, of yield stress in hydrostatic tension, 
, to initial yield stress in hydrostatic compression, 
. The default
value is 1.0.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
Abaqus Scripting Reference Guide
2842
CrushableFoam object

•
Etc.
If hardening=ISOTROPIC, the table data specify the following:
•
Ratio, , of initial yield stress in uniaxial compression, 
, to initial yield stress in hydrostatic compression, 
;
0.0 
 3.0.
•
Plastic Poisson's ratio.
; -1
0.5.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CrushableFoam object.
Exceptions
RangeError.
Members
The CrushableFoam object has members with the same names and descriptions as the arguments to the CrushableFoam
method.
In addition, the CrushableFoam object can have the following members:
Prototype
odb_CrushableFoamHardening crushableFoamHardening() const;
odb_RateDependent rateDependent() const;
A CrushableFoamHardening object.
crushableFoamHardening
A RateDependent object.
rateDependent
Corresponding analysis keywords
•
*CRUSHABLE FOAM
2843
Abaqus Scripting Reference Guide
CrushableFoam object

CrushableFoamHardening object
The CrushableFoamHardening object speciﬁes hardening for the crushable foam plasticity model.
Access
materialApi.materials()[name].crushableFoam().crushableFoamHardening()
CrushableFoamHardening(...)
This method creates a CrushableFoamHardening object.
Path
materialApi.materials()[name].crushableFoam().CrushableFoamHardening
Prototype
odb_CrushableFoamHardening&
CrushableFoamHardening(const odb_SequenceSequenceDouble& table,
                       bool temperatureDependency,
                       int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
The yield stress in uniaxial compression, 
.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A CrushableFoamHardening object.
Abaqus Scripting Reference Guide
2844
CrushableFoamHardening object

Exceptions
RangeError.
Members
The CrushableFoamHardening object has members with the same names and descriptions as the arguments to the
CrushableFoamHardening  method.
Corresponding analysis keywords
•
*CRUSHABLE FOAM HARDENING
2845
Abaqus Scripting Reference Guide
CrushableFoamHardening object

CycledPlastic object
The CycledPlastic object speciﬁes cycled yield stress data for the ORNL constitutive model.
Access
materialApi.materials()[name].plastic().cycledPlastic()
CycledPlastic(...)
This method creates a CycledPlastic object.
Path
materialApi.materials()[name].plastic().CycledPlastic
Prototype
odb_CycledPlastic&
CycledPlastic(const odb_SequenceSequenceDouble& table,
              bool temperatureDependency);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
Table data
•
Yield stress.
•
Plastic strain.
•
Temperature, if the data depend on temperature.
Return value
A CycledPlastic object.
Exceptions
None.
Members
The CycledPlastic object has members with the same names and descriptions as the arguments to the CycledPlastic
method.
Abaqus Scripting Reference Guide
2846
CycledPlastic object

Corresponding analysis keywords
•
*CYCLED PLASTIC
2847
Abaqus Scripting Reference Guide
CycledPlastic object

CyclicHardening object
The CyclicHardening object deﬁnes the evolution of the elastic domain for the nonlinear isotropic/kinematic hardening
model.
Access
materialApi.materials()[name].plastic().cyclicHardening()
CyclicHardening(...)
This method creates a CyclicHardening object.
Path
materialApi.materials()[name].plastic().CyclicHardening
Prototype
odb_CyclicHardening&
CyclicHardening(const odb_SequenceSequenceDouble& table,
                bool temperatureDependency,
                int dependencies,
                bool parameters);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
A Boolean specifying whether material parameters are to be input directly. The
default value is false.
parameters
Table data
•
Equivalent stress.
•
 (only if parameters=ON).
•
Hardening parameter (only if parameters=ON).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2848
CyclicHardening object

Return value
A CyclicHardening object.
Exceptions
None.
Members
The CyclicHardening object has members with the same names and descriptions as the arguments to the CyclicHardening
method.
Corresponding analysis keywords
•
*CYCLIC HARDENING
2849
Abaqus Scripting Reference Guide
CyclicHardening object

DamageEvolution object
The DamageEvolution object speciﬁes material properties to deﬁne the evolution of damage.
Access
materialApi.materials()[name].ductileDamageInitiation()\
.damageEvolution()
materialApi.materials()[name].fldDamageInitiation().damageEvolution()
materialApi.materials()[name].flsdDamageInitiation().damageEvolution()
materialApi.materials()[name].hashinDamageInitiation().damageEvolution()
materialApi.materials()[name].johnsonCookDamageInitiation()\
.damageEvolution()
materialApi.materials()[name].maxeDamageInitiation().damageEvolution()
materialApi.materials()[name].maxpeDamageInitiation().damageEvolution()
materialApi.materials()[name].maxpsDamageInitiation().damageEvolution()
materialApi.materials()[name].maxsDamageInitiation().damageEvolution()
materialApi.materials()[name].mkDamageInitiation().damageEvolution()
materialApi.materials()[name].msfldDamageInitiation().damageEvolution()
materialApi.materials()[name].quadeDamageInitiation().damageEvolution()
materialApi.materials()[name].quadsDamageInitiation().damageEvolution()
materialApi.materials()[name].shearDamageInitiation().damageEvolution()
DamageEvolution(...)
This method creates a DamageEvolution object.
Path
materialApi.materials()[name].ductileDamageInitiation().DamageEvolution
materialApi.materials()[name].fldDamageInitiation().DamageEvolution
materialApi.materials()[name].flsdDamageInitiation().DamageEvolution
materialApi.materials()[name].hashinDamageInitiation().DamageEvolution
materialApi.materials()[name].johnsonCookDamageInitiation()\
.DamageEvolution
materialApi.materials()[name].maxeDamageInitiation().DamageEvolution
materialApi.materials()[name].maxpeDamageInitiation().DamageEvolution
materialApi.materials()[name].maxpsDamageInitiation().DamageEvolution
materialApi.materials()[name].maxsDamageInitiation().DamageEvolution
materialApi.materials()[name].mkDamageInitiation().DamageEvolution
materialApi.materials()[name].msfldDamageInitiation().DamageEvolution
materialApi.materials()[name].quadeDamageInitiation().DamageEvolution
materialApi.materials()[name].quadsDamageInitiation().DamageEvolution
materialApi.materials()[name].shearDamageInitiation().DamageEvolution
Prototype
odb_DamageEvolution&
DamageEvolution(const odb_String& type,
                const odb_SequenceSequenceDouble& table,
                const odb_String& degradation,
                bool temperatureDependency,
                int dependencies,
                const odb_String& mixedModeBehavior,
                const odb_String& modeMixRatio,
Abaqus Scripting Reference Guide
2850
DamageEvolution object

                odb_Union power,
                const odb_String& softening);
Required arguments
An odb_String specifying the type of damage evolution. Possible values are "DISPLACEMENT"
and "ENERGY".
type
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the degradation. Possible values are "MAXIMUM" and
"MULTIPLICATIVE". The default value is "MAXIMUM".
degradation
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_String specifying the mixed mode behavior. Possible values are
"MODE_INDEPENDENT", "TABULAR", "POWER_LAW", and "BK". The default
value is "MODE_INDEPENDENT".
mixedModeBehavior
An odb_String specifying the mode mix ratio. Possible values are "ENERGY" and
"TRACTION". The default value is "ENERGY".
modeMixRatio
The string "NONE" or a Double specifying the exponent in the power law or the
Benzeggagh-Kenane criterion that deﬁnes the variation of fracture energy with mode
mix for cohesive elements. The default value is "NONE".
power
An odb_String specifying the softening. Possible values are "LINEAR",
"EXPONENTIAL", and "TABULAR". The default value is "LINEAR".
softening
Table data
If type=DISPLACEMENT, and softening=LINEAR, and mixedModeBehavior=MODE_INDEPENDENT, the table
data specify the following:
•
Equivalent total or plastic displacement at failure, measured from the time of damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=LINEAR, and mixedModeBehavior=MODE_INDEPENDENT, the table data specify
the following:
•
Fracture energy.
•
Temperature, if the data depend on temperature.
2851
Abaqus Scripting Reference Guide
DamageEvolution object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=LINEAR, and mixedModeBehavior=TABULAR, the table data specify the
following:
•
Total displacement at failure, measured from the time of damage initiation.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=LINEAR, and mixedModeBehavior=TABULAR, the table data specify the following:
•
Fracture energy.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=EXPONENTIAL, and mixedModeBehavior=MODE_INDEPENDENT, the
table data specify the following:
•
Equivalent total or plastic displacement at failure, measured from the time of damage initiation.
•
Exponential law parameter.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=EXPONENTIAL, and mixedModeBehavior=MODE_INDEPENDENT, the table
data specify the following:
•
Fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=EXPONENTIAL, and mixedModeBehavior=TABULAR, the table data
specify the following:
•
Total displacement at failure, measured from the time of damage initiation.
Abaqus Scripting Reference Guide
2852
DamageEvolution object

•
Exponential law parameter.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=EXPONENTIAL, and mixedModeBehavior=TABULAR, the table data specify the
following:
•
Fracture energy.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=TABULAR, and mixedModeBehavior=MODE_INDEPENDENT, the table
data specify the following:
•
Damage variable.
•
Equivalent total or plastic displacement, measured from the time of damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, and softening=TABULAR, and mixedModeBehavior=TABULAR, the table data specify
the following:
•
Damage variable.
•
Equivalent total or plastic displacement, measured from the time of damage initiation.
•
Appropriate mode mix ratio.
•
Appropriate mode mix ratio (if relevant, for three-dimensional problems with anisotropic shear behavior).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, and softening=LINEAR or EXPONENTIAL, and mixedModeBehavior=POWER_LAW or BK, the
table data specify the following:
•
Normal mode fracture energy.
•
Shear mode fracture energy for failure in the ﬁrst shear direction.
2853
Abaqus Scripting Reference Guide
DamageEvolution object

•
Shear mode fracture energy for failure in the second shear direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENERGY, softening=LINEAR and constructor for DamageInitiation=HashinDamageInitiation the table data
specify the following:
•
Fiber tensile fracture energy.
•
Fiber compressive fracture energy.
•
Matrix tensile fracture energy.
•
Matrix compressive fracture energy.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DamageEvolution object.
Exceptions
RangeError.
Members
The DamageEvolution object has members with the same names and descriptions as the arguments to the
DamageEvolution  method.
Corresponding analysis keywords
•
*DAMAGE EVOLUTION
Abaqus Scripting Reference Guide
2854
DamageEvolution object

DamageInitiation object
The DamageInitiation object speciﬁes material properties to deﬁne the initiation of damage.
Access
materialApi.materials()[name].ductileDamageInitiation()
materialApi.materials()[name].fldDamageInitiation()
materialApi.materials()[name].flsdDamageInitiation()
materialApi.materials()[name].hashinDamageInitiation()
materialApi.materials()[name].johnsonCookDamageInitiation()
materialApi.materials()[name].maxeDamageInitiation()
materialApi.materials()[name].maxpeDamageInitiation()
materialApi.materials()[name].maxpsDamageInitiation()
materialApi.materials()[name].maxsDamageInitiation()
materialApi.materials()[name].mkDamageInitiation()
materialApi.materials()[name].msfldDamageInitiation()
materialApi.materials()[name].quadeDamageInitiation()
materialApi.materials()[name].quadsDamageInitiation()
materialApi.materials()[name].shearDamageInitiation()
DuctileDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].DuctileDamageInitiation
Prototype
odb_DamageInitiation&
DuctileDamageInitiation(const odb_SequenceSequenceDouble& table,
                        const odb_String& definition,
                        double feq,
                        double fnn,
                        double fnt,
                        int frequency,
                        double ks,
                        int numberImperfections,
                        bool temperatureDependency,
                        int dependencies,
                        double alpha,
                        double omega,
                        double tolerance,
                        const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
2855
DamageInitiation object

Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Table data
If constructor is DuctileDamageInitiation, the table data specify the following:
•
Equivalent fracture strain at damage initiation.
•
Stress triaxiality.
•
Strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
Abaqus Scripting Reference Guide
2856
DamageInitiation object

•
Etc.
If constructor is FldDamageInitiation, the table data specify the following:
•
Major principal strain at damage initiation.
•
Minor principal strain.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor FlsdDamageInitiation, the table data specify the following:
•
Major principal stress at damage initiation.
•
Minor principal stress.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is JohnsonCookDamageInitiation, the table data specify the following:
•
Johnson-Cook failure parameter D1.
•
Johnson-Cook failure parameter D2.
•
Johnson-Cook failure parameter D3.
•
Johnson-Cook failure parameter D4.
•
Johnson-Cook failure parameter D5.
•
Melting temperature.
•
Transition temperature.
•
Reference strain rate.
If constructor MkDamageInitiation, the table data specify the following:
•
Flaw size relative to nominal thickness of the section.
•
Angle (in degrees) with respect to the 1-direction of the local material orientation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is MsﬂdDamageInitiation and deﬁnition=MSFLD, the table data specify the following:
•
Nominal strain at damage initiation in a normal-only mode.
•
Equivalent plastic strain at initiation of localized necking.
•
Ratio of minor to major principal strains.
•
Equivalent plastic strain rate.
•
Temperature, if the data depend on temperature.
2857
Abaqus Scripting Reference Guide
DamageInitiation object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is MsﬂdDamageInitiation and deﬁnition=FLD, the table data specify the following:
•
Major principal strain at initiation of localized necking.
•
Equivalent plastic strain at initiation of localized necking.
•
Ratio of minor to major principal strains.
•
Equivalent plastic strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is QuadeDamageInitiation or MaxeDamageInitiation, the table data specify the following:
•
Nominal strain at damage initiation in a normal-only mode.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the ﬁrst shear direction.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the second shear
direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is QuadsDamageInitiation or MaxsDamageInitiation, the table data specify the following:
•
Nominal strain at damage initiation in a normal-only mode.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the ﬁrst shear direction.
•
Nominal strain at damage initiation in a shear-only mode that involves separation only along the second shear
direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is MaxpeDamageInitiation, the table data specify the following:
•
Maximum principal strain at damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is MaxpsDamageInitiation, the table data specify the following:
Abaqus Scripting Reference Guide
2858
DamageInitiation object

•
Maximum principal stress at damage initiation.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is ShearDamageInitiation, the table data specify the following:
•
Equivalent fracture strain at damage initiation.
•
Shear stress ratio.
•
Strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If constructor is HashinDamageInitiation, the table data specify the following:
•
Fiber tensile strength.
•
Fiber compressive strength.
•
Matrix tensile strength.
•
Matrix compressive strength.
•
Longitudinal shear strength.
•
Transverse shear strength.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DamageInitiation object.
Exceptions
RangeError.
FldDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].FldDamageInitiation
Prototype
odb_DamageInitiation&
FldDamageInitiation(const odb_SequenceSequenceDouble& table,
2859
Abaqus Scripting Reference Guide
DamageInitiation object

                    const odb_String& definition,
                    double feq,
                    double fnn,
                    double fnt,
                    int frequency,
                    double ks,
                    int numberImperfections,
                    bool temperatureDependency,
                    int dependencies,
                    double alpha,
                    double omega,
                    double tolerance,
                    const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
Abaqus Scripting Reference Guide
2860
DamageInitiation object

A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
FlsdDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].FlsdDamageInitiation
Prototype
odb_DamageInitiation&
FlsdDamageInitiation(const odb_SequenceSequenceDouble& table,
                     const odb_String& definition,
                     double feq,
                     double fnn,
                     double fnt,
                     int frequency,
                     double ks,
                     int numberImperfections,
                     bool temperatureDependency,
                     int dependencies,
                     double alpha,
                     double omega,
                     double tolerance,
                     const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
2861
Abaqus Scripting Reference Guide
DamageInitiation object

A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
JohnsonCookDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].JohnsonCookDamageInitiation
Prototype
odb_DamageInitiation&
JohnsonCookDamageInitiation(const odb_SequenceSequenceDouble& table,
Abaqus Scripting Reference Guide
2862
DamageInitiation object

                            const odb_String& definition,
                            double feq,
                            double fnn,
                            double fnt,
                            int frequency,
                            double ks,
                            int numberImperfections,
                            bool temperatureDependency,
                            int dependencies,
                            double alpha,
                            double omega,
                            double tolerance,
                            const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
2863
Abaqus Scripting Reference Guide
DamageInitiation object

A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxeDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].MaxeDamageInitiation
Prototype
odb_DamageInitiation&
MaxeDamageInitiation(const odb_SequenceSequenceDouble& table,
                     const odb_String& definition,
                     double feq,
                     double fnn,
                     double fnt,
                     int frequency,
                     double ks,
                     int numberImperfections,
                     bool temperatureDependency,
                     int dependencies,
                     double alpha,
                     double omega,
                     double tolerance,
                     const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
Abaqus Scripting Reference Guide
2864
DamageInitiation object

A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxsDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].MaxsDamageInitiation
Prototype
odb_DamageInitiation&
MaxsDamageInitiation(const odb_SequenceSequenceDouble& table,
2865
Abaqus Scripting Reference Guide
DamageInitiation object

                     const odb_String& definition,
                     double feq,
                     double fnn,
                     double fnt,
                     int frequency,
                     double ks,
                     int numberImperfections,
                     bool temperatureDependency,
                     int dependencies,
                     double alpha,
                     double omega,
                     double tolerance,
                     const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
Abaqus Scripting Reference Guide
2866
DamageInitiation object

A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MkDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].MkDamageInitiation
Prototype
odb_DamageInitiation&
MkDamageInitiation(const odb_SequenceSequenceDouble& table,
                   const odb_String& definition,
                   double feq,
                   double fnn,
                   double fnt,
                   int frequency,
                   double ks,
                   int numberImperfections,
                   bool temperatureDependency,
                   int dependencies,
                   double alpha,
                   double omega,
                   double tolerance,
                   const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
2867
Abaqus Scripting Reference Guide
DamageInitiation object

A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MsfldDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].MsfldDamageInitiation
Prototype
odb_DamageInitiation&
MsfldDamageInitiation(const odb_SequenceSequenceDouble& table,
Abaqus Scripting Reference Guide
2868
DamageInitiation object

                      const odb_String& definition,
                      double feq,
                      double fnn,
                      double fnt,
                      int frequency,
                      double ks,
                      int numberImperfections,
                      bool temperatureDependency,
                      int dependencies,
                      double alpha,
                      double omega,
                      double tolerance,
                      const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
2869
Abaqus Scripting Reference Guide
DamageInitiation object

A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
QuadeDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].QuadeDamageInitiation
Prototype
odb_DamageInitiation&
QuadeDamageInitiation(const odb_SequenceSequenceDouble& table,
                      const odb_String& definition,
                      double feq,
                      double fnn,
                      double fnt,
                      int frequency,
                      double ks,
                      int numberImperfections,
                      bool temperatureDependency,
                      int dependencies,
                      double alpha,
                      double omega,
                      double tolerance,
                      const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
Abaqus Scripting Reference Guide
2870
DamageInitiation object

A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
QuadsDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].QuadsDamageInitiation
Prototype
odb_DamageInitiation&
QuadsDamageInitiation(const odb_SequenceSequenceDouble& table,
2871
Abaqus Scripting Reference Guide
DamageInitiation object

                      const odb_String& definition,
                      double feq,
                      double fnn,
                      double fnt,
                      int frequency,
                      double ks,
                      int numberImperfections,
                      bool temperatureDependency,
                      int dependencies,
                      double alpha,
                      double omega,
                      double tolerance,
                      const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
Abaqus Scripting Reference Guide
2872
DamageInitiation object

A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxpeDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].MaxpeDamageInitiation
Prototype
odb_DamageInitiation&
MaxpeDamageInitiation(const odb_SequenceSequenceDouble& table,
                      const odb_String& definition,
                      double feq,
                      double fnn,
                      double fnt,
                      int frequency,
                      double ks,
                      int numberImperfections,
                      bool temperatureDependency,
                      int dependencies,
                      double alpha,
                      double omega,
                      double tolerance,
                      const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
2873
Abaqus Scripting Reference Guide
DamageInitiation object

A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
MaxpsDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].MaxpsDamageInitiation
Prototype
odb_DamageInitiation&
MaxpsDamageInitiation(const odb_SequenceSequenceDouble& table,
Abaqus Scripting Reference Guide
2874
DamageInitiation object

                      const odb_String& definition,
                      double feq,
                      double fnn,
                      double fnt,
                      int frequency,
                      double ks,
                      int numberImperfections,
                      bool temperatureDependency,
                      int dependencies,
                      double alpha,
                      double omega,
                      double tolerance,
                      const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
2875
Abaqus Scripting Reference Guide
DamageInitiation object

A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
ShearDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].ShearDamageInitiation
Prototype
odb_DamageInitiation&
ShearDamageInitiation(const odb_SequenceSequenceDouble& table,
                      const odb_String& definition,
                      double feq,
                      double fnn,
                      double fnt,
                      int frequency,
                      double ks,
                      int numberImperfections,
                      bool temperatureDependency,
                      int dependencies,
                      double alpha,
                      double omega,
                      double tolerance,
                      const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
Abaqus Scripting Reference Guide
2876
DamageInitiation object

A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
HashinDamageInitiation(...)
This method creates a DamageInitiation object.
Path
materialApi.materials()[name].HashinDamageInitiation
Prototype
odb_DamageInitiation&
HashinDamageInitiation(const odb_SequenceSequenceDouble& table,
2877
Abaqus Scripting Reference Guide
DamageInitiation object

                       const odb_String& definition,
                       double feq,
                       double fnn,
                       double fnt,
                       int frequency,
                       double ks,
                       int numberImperfections,
                       bool temperatureDependency,
                       int dependencies,
                       double alpha,
                       double omega,
                       double tolerance,
                       const odb_String& direction);
Required arguments
An odb_SequenceSequenceDouble specifying the items described in the "Table data" section.
table
Optional arguments
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD" and
"MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains normal
to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear strains.
The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski analysis
is going to be performed. The default value is 1.
frequency
A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of the
Marciniak-Kuczynski analysis. These imperfections are assumed to be equally spaced in
the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution to
the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used for
the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
Abaqus Scripting Reference Guide
2878
DamageInitiation object

A Double specifying the tolerance within which the damage initiation criterion must be
satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
Return value
A DamageInitiation object.
Exceptions
RangeError.
Members
The DamageInitiation object can have the following members:
Prototype
odb_String definition() const;
double feq() const;
double fnn() const;
double fnt() const;
int frequency() const;
double ks() const;
int numberImperfections() const;
bool temperatureDependency() const;
int dependencies() const;
double alpha() const;
double omega() const;
double tolerance() const;
odb_String direction() const;
odb_SequenceSequenceDouble table() const;
odb_DamageEvolution damageEvolution() const;
odb_DamageStabilization damageStabilization() const;
odb_DamageStabilizationCohesive damageStabilizationCohesive() const;
An odb_String specifying the damage initiation deﬁnition. Possible values are "FLD"
and "MSFLD". The default value is "MSFLD".
deﬁnition
A Double specifying the critical value of the deformation severity index for equivalent
plastic strains. The default value is 10.0.
feq
A Double specifying the critical value of the deformation severity index for strains
normal to the groove direction. The default value is 10.0.
fnn
A Double specifying the critical value of the deformation severity index for shear
strains. The default value is 10.0.
fnt
An Int specifying the frequency, in increments, at which the Marciniak-Kuczynski
analysis is going to be performed. The default value is 1.
frequency
2879
Abaqus Scripting Reference Guide
DamageInitiation object

A Double specifying the value of Ks. The default value is 0.0.
ks
An Int specifying the number of imperfections to be considered for the evaluation of
the Marciniak-Kuczynski analysis. These imperfections are assumed to be equally
spaced in the angular direction. The default value is 4.
numberImperfections
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Double specifying the value of the coefﬁcient that will multiply the shear contribution
to the Hashin's ﬁber initiation criterion. The default value is 0.0.
alpha
A Double specifying the factor used for ﬁltering the ratio of principal strain rates used
for the evaluation of the MSFLD damage initiation criterion. The default value is 1.0.
omega
A Double specifying the tolerance within which the damage initiation criterion must
be satisﬁed. The default value is 0.05.
tolerance
An odb_String specifying the damage initiation direction. Possible values are "NMORI"
and "TMORI". The default value is "NMORI".
direction
An odb_SequenceSequenceDouble specifying the items described in the "Table data"
section.
table
A DamageEvolution object.
damageEvolution
A DamageStabilization object.
damageStabilization
A DamageStabilizationCohesive object.
damageStabilizationCohesive
Corresponding analysis keywords
•
*DAMAGE INITIATION
Abaqus Scripting Reference Guide
2880
DamageInitiation object

DamageStabilization object
The DamageStabilization object speciﬁes the viscosity coefﬁcients for the damage model for ﬁber-reinforced materials.
Access
materialApi.materials()[name].ductileDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].fldDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].flsdDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].hashinDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].johnsonCookDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].maxeDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].maxpeDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].maxpsDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].maxsDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].mkDamageInitiation().damageStabilization()
materialApi.materials()[name].msfldDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].quadeDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].quadsDamageInitiation()\
.damageStabilization()
materialApi.materials()[name].shearDamageInitiation()\
.damageStabilization()
DamageStabilization(...)
This method creates a DamageStabilization object.
Path
materialApi.materials()[name].ductileDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].fldDamageInitiation().DamageStabilization
materialApi.materials()[name].flsdDamageInitiation().DamageStabilization
materialApi.materials()[name].hashinDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].johnsonCookDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].maxeDamageInitiation().DamageStabilization
materialApi.materials()[name].maxpeDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].maxpsDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].maxsDamageInitiation().DamageStabilization
materialApi.materials()[name].mkDamageInitiation().DamageStabilization
2881
DamageStabilization object

materialApi.materials()[name].msfldDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].quadeDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].quadsDamageInitiation()\
.DamageStabilization
materialApi.materials()[name].shearDamageInitiation()\
.DamageStabilization
Prototype
odb_DamageStabilization&
DamageStabilization(double fiberTensileCoeff,
                    double fiberCompressiveCoeff,
                    double matrixTensileCoeff,
                    double matrixCompressiveCoeff);
Required arguments
A Double specifying the viscosity coefﬁcient for the ﬁber tensile failure
mode.
ﬁberTensileCoeff
A Double specifying the viscosity coefﬁcient for the ﬁber compressive failure
mode.
ﬁberCompressiveCoeff
A Double specifying the viscosity coefﬁcient for the matrix tensile failure
mode.
matrixTensileCoeff
A Double specifying the viscosity coefﬁcient for the matrix compressive
failure mode.
matrixCompressiveCoeff
Optional arguments
None.
Return value
A DamageStabilization object.
Exceptions
RangeError.
Members
The DamageStabilization object has members with the same names and descriptions as the arguments to the
DamageStabilization  method.
Corresponding analysis keywords
•
*DAMAGE STABILIZATION
Abaqus Scripting Reference Guide
2882
DamageStabilization object

DamageStabilizationCohesive object
The DamageStabilizationCohesive object speciﬁes the viscosity coefﬁcients for the damage model for surface-based
cohesive behavior or enriched cohesive behavior.
Access
materialApi.materials()[name].ductileDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].fldDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].flsdDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].hashinDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].johnsonCookDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].maxeDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].maxpeDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].maxpsDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].maxsDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].mkDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].msfldDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].quadeDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].quadsDamageInitiation()\
.damageStabilizationCohesive()
materialApi.materials()[name].shearDamageInitiation()\
.damageStabilizationCohesive()
DamageStabilizationCohesive(...)
This method creates a DamageStabilizationCohesive object.
Path
materialApi.materials()[name].ductileDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].fldDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].flsdDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].hashinDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].johnsonCookDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].maxeDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].maxpeDamageInitiation()\
.DamageStabilizationCohesive
2883
DamageStabilizationCohesive object

materialApi.materials()[name].maxpsDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].maxsDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].mkDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].msfldDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].quadeDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].quadsDamageInitiation()\
.DamageStabilizationCohesive
materialApi.materials()[name].shearDamageInitiation()\
.DamageStabilizationCohesive
Prototype
odb_DamageStabilizationCohesive&
DamageStabilizationCohesive(odb_Union cohesiveCoeff);
Required arguments
None.
Optional arguments
The string "NONE" or a Double specifying the viscosity coefﬁcient. The default
value is "NONE".
cohesiveCoeff
Return value
A DamageStabilizationCohesive object.
Exceptions
RangeError.
Members
The DamageStabilizationCohesive object has members with the same names and descriptions as the arguments to the
DamageStabilizationCohesive  method.
Corresponding analysis keywords
•
*DAMAGE STABILIZATION
Abaqus Scripting Reference Guide
2884
DamageStabilizationCohesive object

Damping object
The Damping object speciﬁes material damping.
Access
materialApi.materials()[name].damping()
Damping(...)
This method creates a Damping object.
Path
materialApi.materials()[name].Damping
Prototype
odb_Damping&
Damping(double alpha,
        double beta,
        double composite,
        double structural);
Required arguments
None.
Optional arguments
A Double specifying the 
 factor to create mass proportional damping in direct-integration
and explicit dynamics. The default value is 0.0.
alpha
A Double specifying the 
 factor to create stiffness proportional damping in direct-integration
and explicit dynamics. The default value is 0.0.
beta
A Double specifying the fraction of critical damping to be used with this material in calculating
composite damping factors for the modes (for use in modal dynamics). The default value is 0.0.
composite
This argument applies only to Abaqus/Standard analyses.
A Double specifying the structural factor to create material damping in direct-integration and
explicit dynamics. The default value is 0.0.
structural
Return value
A Damping object.
Exceptions
RangeError.
2885
Damping object

Members
The Damping object has members with the same names and descriptions as the arguments to the Damping  method.
Corresponding analysis keywords
•
*DAMPING
Abaqus Scripting Reference Guide
2886
Damping object

DeformationPlasticity object
The DeformationPlasticity object speciﬁes the deformation plasticity model.
Access
materialApi.materials()[name].deformationPlasticity()
DeformationPlasticity(...)
This method creates a DeformationPlasticity object.
Path
materialApi.materials()[name].DeformationPlasticity
Prototype
odb_DeformationPlasticity&
DeformationPlasticity(const odb_SequenceSequenceDouble& table,
                      bool temperatureDependency);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
Table data
•
Young's modulus, .
•
Poisson's ratio, .
•
Yield stress, 
.
•
Exponent, .
•
Yield offset, .
•
Temperature, if the data depend on temperature.
Return value
A DeformationPlasticity object.
Exceptions
RangeError.
2887
DeformationPlasticity object

Members
The DeformationPlasticity object has members with the same names and descriptions as the arguments to the
DeformationPlasticity  method.
Corresponding analysis keywords
•
*DEFORMATION PLASTICITY
Abaqus Scripting Reference Guide
2888
DeformationPlasticity object

Density object
The Density object speciﬁes the material density.
Access
materialApi.materials()[name].density()
Density(...)
This method creates a Density object.
Path
materialApi.materials()[name].Density
Prototype
odb_Density&
Density(const odb_SequenceSequenceDouble& table,
        bool temperatureDependency,
        int dependencies,
        const odb_String& distributionType,
        const odb_String& fieldName);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_String specifying how the density is distributed spatially. Possible values are
"UNIFORM", "ANALYTICAL_FIELD", and "DISCRETE_FIELD". The default value
is "UNIFORM".
distributionType
An odb_String specifying the name of the AnalyticalField object or DiscreteField object
object associated with this material option. The ﬁeldName argument applies only when
ﬁeldName
distributionType="ANALYTICAL_FIELD" or distributionType="DISCRETE_FIELD".
The default value is an empty string.
Table data
•
The mass density.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
2889
Density object

•
Etc.
Return value
A Density object.
Exceptions
RangeError.
Members
The Density object has members with the same names and descriptions as the arguments to the Density  method.
Corresponding analysis keywords
•
*DENSITY
Abaqus Scripting Reference Guide
2890
Density object

Depvar object
The Depvar object speciﬁes solution-dependent state variables.
Access
materialApi.materials()[name].depvar()
Depvar(...)
This method creates a Depvar object.
Path
materialApi.materials()[name].Depvar
Prototype
odb_Depvar&
Depvar(int deleteVar,
       int n);
Required arguments
None.
Optional arguments
An Int specifying the state variable number controlling the element deletion ﬂag. The default
value is 0.
deleteVar
This argument applies only to Abaqus/Explicit analyses.
An Int specifying the number of solution-dependent state variables required at each integration
point. The default value is 0.
n
Return value
A Depvar object.
Exceptions
RangeError.
Members
The Depvar object has members with the same names and descriptions as the arguments to the Depvar  method.
Corresponding analysis keywords
•
*DEPVAR
2891
Depvar object

DetonationPoint object
A DetonationPoint object speciﬁes a suboption of the Eos object. The DetonationPoint object deﬁnes either isotropic
linear elastic shear or linear viscous shear behavior for a hydrodynamic material.
Access
materialApi.materials()[name].eos().detonationPoint()
DetonationPoint(...)
This method creates a DetonationPoint object.
Path
materialApi.materials()[name].eos().DetonationPoint
Prototype
odb_DetonationPoint&
DetonationPoint(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
X value for coordinate of detonation point.
•
Y value for coordinate of detonation point.
•
Z value for coordinate of detonation point.
•
Detonation delay time.
Return value
A DetonationPoint object.
Exceptions
None.
Members
The DetonationPoint object has members with the same names and descriptions as the arguments to the DetonationPoint
method.
Abaqus Scripting Reference Guide
2892
DetonationPoint object

Corresponding analysis keywords
•
*DETONATION POINT
2893
Abaqus Scripting Reference Guide
DetonationPoint object

Dielectric object
The Dielectric object speciﬁes dielectric material properties.
Access
materialApi.materials()[name].dielectric()
Dielectric(...)
This method creates a Dielectric object.
Path
materialApi.materials()[name].Dielectric
Prototype
odb_Dielectric&
Dielectric(const odb_SequenceSequenceDouble& table,
           const odb_String& type,
           bool frequencyDependency,
           bool temperatureDependency,
           int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the dielectric behavior. Possible values are "ISOTROPIC",
"ORTHOTROPIC", and "ANISOTROPIC". The default value is "ISOTROPIC".
type
A Boolean specifying whether the data depend on frequency. The default value is
false.
frequencyDependency
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Dielectric constant.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
Abaqus Scripting Reference Guide
2894
Dielectric object

•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Dielectric object.
Exceptions
None.
Members
The Dielectric object has members with the same names and descriptions as the arguments to the Dielectric  method.
2895
Abaqus Scripting Reference Guide
Dielectric object

Corresponding analysis keywords
•
*DIELECTRIC
Abaqus Scripting Reference Guide
2896
Dielectric object

Diffusivity object
The Diffusivity object speciﬁes mass diffusivity.
Access
materialApi.materials()[name].diffusivity()
Diffusivity(...)
This method creates a Diffusivity object.
Path
materialApi.materials()[name].Diffusivity
Prototype
odb_Diffusivity&
Diffusivity(const odb_SequenceSequenceDouble& table,
            const odb_String& type,
            const odb_String& law,
            bool temperatureDependency,
            int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of diffusivity. Possible values are "ISOTROPIC",
"ORTHOTROPIC", and "ANISOTROPIC". The default value is "ISOTROPIC".
type
An odb_String specifying the diffusion behavior. Possible values are "GENERAL" and
"FICK". The default value is "GENERAL".
law
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Diffusivity, 
.
•
Concentration, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
2897
Diffusivity object

•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Concentration, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Concentration, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Diffusivity object.
Exceptions
RangeError.
Members
The Diffusivity object has members with the same names and descriptions as the arguments to the Diffusivity  method.
In addition, the Diffusivity object can have the following members:
Prototype
odb_PressureEffect pressureEffect() const;
odb_SoretEffect soretEffect() const;
Abaqus Scripting Reference Guide
2898
Diffusivity object

A PressureEffect object.
pressureEffect
A SoretEffect object.
soretEffect
Corresponding analysis keywords
•
*DIFFUSIVITY
2899
Abaqus Scripting Reference Guide
Diffusivity object

DruckerPrager object
The DruckerPrager object speciﬁes the extended Drucker-Prager plasticity model.
Access
materialApi.materials()[name].druckerPrager()
DruckerPrager(...)
This method creates a DruckerPrager object.
Path
materialApi.materials()[name].DruckerPrager
Prototype
odb_DruckerPrager&
DruckerPrager(const odb_SequenceSequenceDouble& table,
              const odb_String& shearCriterion,
              double eccentricity,
              bool testData,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the yield criterion. Possible values are "LINEAR",
"HYPERBOLIC", and "EXPONENTIAL". The default value is "LINEAR".
shearCriterion
This argument applies only to Abaqus/Standard analyses. Only the linear Drucker-Prager
model is available in Abaqus/Explicit analyses.
A Double specifying the ﬂow potential eccentricity, , a small positive number that deﬁnes
the rate at which the hyperbolic ﬂow potential approaches its asymptote. The default value
is 0.1.
eccentricity
This argument applies only to Abaqus/Standard analyses.
A Boolean specifying whether the material constants for the exponent model are to be
computed by Abaqus/Standard from triaxial test data at different levels of conﬁning pressure.
The default value is false.
testData
This argument is valid only if shearCriterion="EXPONENTIAL".
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Abaqus Scripting Reference Guide
2900
DruckerPrager object

Table data
If shearCriterion=LINEAR (the only option allowed in an Abaqus/Explicit analysis), the table data specify the following:
•
Material angle of friction, , in the –  plane. Give the value in degrees.
•
, the ratio of the ﬂow stress in triaxial tension to the ﬂow stress in triaxial compression. 
. If the
default value of 0.0 is accepted, a value of 1.0 is assumed.
•
Dilation angle, , in the –  plane. Give the value in degrees.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If shearCriterion=HYPERBOLIC, the table data specify the following:
•
Material angle of friction, , at high conﬁning pressure in the –  plane. Give the value in degrees.
•
Initial hydrostatic tension strength, 
.
•
Dilation angle, , at high conﬁning pressure in the –  plane. Give the value in degrees.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If shearCriterion=EXPONENTIAL, the table data specify the following:
•
Dilation angle, , at high conﬁning pressure in the –  plane. Give the value in degrees.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DruckerPrager object.
Exceptions
RangeError.
Members
The DruckerPrager object has members with the same names and descriptions as the arguments to the DruckerPrager
method.
In addition, the DruckerPrager object can have the following members:
2901
Abaqus Scripting Reference Guide
DruckerPrager object

Prototype
odb_DruckerPragerCreep druckerPragerCreep() const;
odb_DruckerPragerHardening druckerPragerHardening() const;
odb_RateDependent rateDependent() const;
odb_TriaxialTestData triaxialTestData() const;
A DruckerPragerCreep object.
druckerPragerCreep
A DruckerPragerHardening object.
druckerPragerHardening
A RateDependent object.
rateDependent
A TriaxialTestData object.
triaxialTestData
Corresponding analysis keywords
•
*DRUCKER PRAGER
Abaqus Scripting Reference Guide
2902
DruckerPrager object

DruckerPragerCreep object
The DruckerPragerCreep object speciﬁes creep for Drucker-Prager plasticity models.
Access
materialApi.materials()[name].druckerPrager().druckerPragerCreep()
DruckerPragerCreep(...)
This method creates a DruckerPragerCreep object.
Path
materialApi.materials()[name].druckerPrager().DruckerPragerCreep
Prototype
odb_DruckerPragerCreep&
DruckerPragerCreep(const odb_SequenceSequenceDouble& table,
                   const odb_String& law,
                   bool temperatureDependency,
                   int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of data deﬁning the creep law. Possible values are:
law
•
"STRAIN", specifying a strain-hardening power law.
•
"TIME", specifying a time-hardening power law.
•
"SINGHM", specifying a Singh-Mitchell type law.
•
"USER", specifying the creep law is input from user subroutine CREEP.
The default value is "STRAIN".
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If law=TIME or law=STRAIN, the table data specify the following:
•
. (Units of F
L
T
.)
•
.
•
.
2903
DruckerPragerCreep object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If law=SINGHM, the table data specify the following:
•
. (Units of T−1.)
•
. (Units of F−1L2.)
•
.
•
. (Units of T.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DruckerPragerCreep object.
Exceptions
RangeError.
Members
The DruckerPragerCreep object has members with the same names and descriptions as the arguments to the
DruckerPragerCreep  method.
Corresponding analysis keywords
•
*DRUCKER PRAGER CREEP
Abaqus Scripting Reference Guide
2904
DruckerPragerCreep object

DruckerPragerHardening object
The DruckerPragerHardening object speciﬁes hardening for Drucker-Prager plasticity models.
Access
materialApi.materials()[name].druckerPrager().druckerPragerHardening()
DruckerPragerHardening(...)
This method creates a DruckerPragerHardening object.
Path
materialApi.materials()[name].druckerPrager().DruckerPragerHardening
Prototype
odb_DruckerPragerHardening&
DruckerPragerHardening(const odb_SequenceSequenceDouble& table,
                       const odb_String& type,
                       bool rate,
                       bool temperatureDependency,
                       int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of data deﬁning the hardening behavior. Possible
values are "COMPRESSION", "TENSION", and "SHEAR". The default value is
"COMPRESSION".
type
A Boolean specifying whether the data depend on rate. The default value is false.
rate
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Yield stress.
•
Absolute value of the corresponding plastic strain. (The ﬁrst tabular value entered must always be zero.)
•
Equivalent plastic strain rate, 
, for which this hardening curve applies.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
2905
DruckerPragerHardening object

•
Value of the second ﬁeld variable.
•
Etc.
Return value
A DruckerPragerHardening object.
Exceptions
RangeError.
Members
The DruckerPragerHardening object has members with the same names and descriptions as the arguments to the
DruckerPragerHardening  method.
Corresponding analysis keywords
•
*DRUCKER PRAGER HARDENING
Abaqus Scripting Reference Guide
2906
DruckerPragerHardening object

Elastic object
The Elastic object speciﬁes elastic material properties.
Access
materialApi.materials()[name].elastic()
Elastic(...)
This method creates an Elastic object.
Path
materialApi.materials()[name].Elastic
Prototype
odb_Elastic&
Elastic(const odb_SequenceSequenceDouble& table,
        const odb_String& type,
        bool noCompression,
        bool noTension,
        bool temperatureDependency,
        int dependencies,
        const odb_String& moduli);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of elasticity data provided. Possible values are:
type
•
"ISOTROPIC"
•
"ORTHOTROPIC"
•
"ANISOTROPIC"
•
"ENGINEERING_CONSTANTS"
•
"LAMINA"
•
"TRACTION"
•
"COUPLED_TRACTION"
•
"SHORT_FIBER"
•
"SHEAR"
•
"BILAMINA"
The default value is "ISOTROPIC".
A Boolean specifying whether compressive stress is allowed. The default value is false.
noCompression
2907
Elastic object

A Boolean specifying whether tensile stress is allowed. The default value is false.
noTension
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_String specifying the time-dependence of the elastic material constants. Possible
values are "INSTANTANEOUS" and "LONG_TERM". The default value is
"LONG_TERM".
moduli
Table data
If type=ISOTROPIC, the table data specify the following:
•
The Young's modulus, .
•
The Poisson's ratio, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=SHEAR, the table data specify the following:
•
The shear modulus, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ENGINEERING_CONSTANTS, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
Abaqus Scripting Reference Guide
2908
Elastic object

•
Etc.
If type=LAMINA, the table data specify the following:
•
.
•
.
•
.
•
.
•
. This shear modulus is needed to deﬁne transverse shear behavior in shells.
•
. This shear modulus is needed to deﬁne transverse shear behavior in shells.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
2909
Abaqus Scripting Reference Guide
Elastic object

•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=TRACTION, the table data specify the following:
•
 for warping elements; 
 for cohesive elements.
•
 for warping elements; 
 for cohesive elements.
•
 for warping elements; 
 for cohesive elements.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=COUPLED_TRACTION, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
Abaqus Scripting Reference Guide
2910
Elastic object

•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=BILAMINA, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=SHORT_FIBER, there is no table data.
Return value
An Elastic object.
Exceptions
RangeError.
Members
The Elastic object has members with the same names and descriptions as the arguments to the Elastic method.
In addition, the Elastic object can have the following members:
Prototype
odb_FailStress failStress() const;
odb_FailStrain failStrain() const;
A FailStress object.
failStress
A FailStrain object.
failStrain
2911
Abaqus Scripting Reference Guide
Elastic object

Corresponding analysis keywords
•
*ELASTIC
Abaqus Scripting Reference Guide
2912
Elastic object

ElectricalConductivity object
The ElectricalConductivity object speciﬁes electrical conductivity.
Access
materialApi.materials()[name].electricalConductivity()
ElectricalConductivity(...)
This method creates an ElectricalConductivity object.
Path
materialApi.materials()[name].ElectricalConductivity
Prototype
odb_ElectricalConductivity&
ElectricalConductivity(const odb_SequenceSequenceDouble& table,
                       const odb_String& type,
                       bool frequencyDependency,
                       bool temperatureDependency,
                       int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of electrical conductivity. Possible values are
"ISOTROPIC", "ORTHOTROPIC", and "ANISOTROPIC". The default value is
"ISOTROPIC".
type
A Boolean specifying whether the data depend on frequency. The default value is
false.
frequencyDependency
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
Electrical conductivity.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
2913
ElectricalConductivity object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
An ElectricalConductivity object.
Exceptions
RangeError.
Members
The ElectricalConductivity object has members with the same names and descriptions as the arguments to the
ElectricalConductivity  method.
Abaqus Scripting Reference Guide
2914
ElectricalConductivity object

Corresponding analysis keywords
•
*ELECTRICAL CONDUCTIVITY
2915
Abaqus Scripting Reference Guide
ElectricalConductivity object

Eos object
The Eos object speciﬁes an equation of state model.
Access
materialApi.materials()[name].eos()
Eos(...)
This method creates an Eos object.
Path
materialApi.materials()[name].Eos
Prototype
odb_Eos&
Eos(const odb_String& type,
    bool temperatureDependency,
    int dependencies,
    double detonationEnergy,
    const odb_SequenceSequenceDouble& solidTable,
    const odb_SequenceSequenceDouble& gasTable,
    const odb_SequenceSequenceDouble& reactionTable,
    const odb_SequenceSequenceDouble& gasSpecificTable,
    const odb_SequenceSequenceDouble& table);
Required arguments
None.
Optional arguments
An odb_String specifying the equation of state. Possible values are "USUP", "JWL",
"IDEALGAS", "TABULAR", and "IGNITIONANDGROWTH". The default value is
"IDEALGAS".
type
A Boolean specifying whether the data in gasSpeciﬁcTable depend on temperature. The
default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies for the data in gasSpeciﬁcTable.
The default value is 0.
dependencies
A Double specifying the detonation energy text ﬁeld. The default value is 0.0.
detonationEnergy
An odb_SequenceSequenceDouble specifying the following:
solidTable
•
$A_{s}$.
•
$B_{s}$.
•
${\omega}_{s}$.
Abaqus Scripting Reference Guide
2916
Eos object

•
$R_{1s}$.
•
$R_{2s}$.
The default value is an empty sequence.
An odb_SequenceSequenceDouble specifying the following:
gasTable
•
$A_{g}$.
•
$B_{g}$.
•
${\omega}_{g}$.
•
$R_{1g}$.
•
$R_{2g}$.
The default value is an empty sequence.
An odb_SequenceSequenceDouble specifying the following:
reactionTable
•
Initial Pressure, $I$.
•
Product co-volume, $a$.
•
Exponent on the unreacted fraction (ignition term), $x$.
•
First burn rate coefﬁcient, $G_{1}$
•
Exponent on the unreacted fraction (growth term), $c$.
•
Exponent on the reacted fraction (growth term), $d$.
•
Pressure exponent (growth term), $y$.
•
Second burn rate coefﬁcient, $G_{2}$.
•
Exponent on the unreacted fraction (completion term), $e$.
•
Exponent on the reacted fraction (completion term), $g$.
•
Pressure exponent (completion term), $z$.
•
Initial reacted fraction, ${F^{max}}_{ig}$.
•
Maximum reacted fraction for the growth term, ${F^{max}}_{G1}$.
•
Minimum reacted fraction, ${F^{min}}_{G2}$.
The default value is an empty sequence.
An odb_SequenceSequenceDouble specifying the following:
gasSpeciﬁcTable
•
Speciﬁc Heat per unit mass.
•
Temperature dependent data.
•
Value of ﬁrst ﬁeld variable.
•
Value of second ﬁeld variable.
•
Etc.
The default value is an empty sequence.
An odb_SequenceSequenceDouble specifying the items described below. The default value
is an empty sequence.
table
2917
Abaqus Scripting Reference Guide
Eos object

Table data
If type=IDEALGAS, the table data represents the following:
•
Gas constant, .
•
The ambient pressure, 
. If this ﬁeld is left blank, a default of 0.0 is used.
If type=JWL, the table data represents the following:
•
Detonation wave speed, 
.
•
.
•
.
•
. (Dimensionless.)
•
. (Dimensionless.)
•
. (Dimensionless.)
•
Pre-detonation bulk modulus, 
.
•
Detonation energy density, 
.
If type=USUP, the table data represents the following:
•
.
•
. (Dimensionless.)
•
. (Dimensionless.)
If type=TABULAR, the table data represents the following:
•
.
•
.
•
. (Dimensionless.)
Return value
An Eos object.
Exceptions
None.
Members
The Eos object has members with the same names and descriptions as the arguments to the Eos  method.
In addition, the Eos object can have the following members:
Prototype
odb_DetonationPoint detonationPoint() const;
odb_EosCompaction eosCompaction() const;
Abaqus Scripting Reference Guide
2918
Eos object

A DetonationPoint object.
detonationPoint
An EosCompaction object.
eosCompaction
A tensileFailure object.
tensileFailure
Corresponding analysis keywords
•
*EOS
2919
Abaqus Scripting Reference Guide
Eos object

EosCompaction object
The EosCompaction object speciﬁes material eos compaction.
Access
materialApi.materials()[name].eos().eosCompaction()
EosCompaction(...)
This method creates a EosCompaction object.
Path
materialApi.materials()[name].eos().EosCompaction
Prototype
odb_EosCompaction&
EosCompaction(double soundSpeed,
              double porosity,
              double pressure,
              double compactionPressure);
Required arguments
A Double specifying reference sound speed in the porous material.
soundSpeed
A Double specifying value of the porosity of the unloaded material.
porosity
A Double specifying pressure required to initialize plastic behavior.
pressure
A Double specifying compaction pressure at which all pores are crushed.
compactionPressure
Optional arguments
None.
Return value
An EosCompaction object.
Exceptions
RangeError.
Members
The EosCompaction object has members with the same names and descriptions as the arguments to the EosCompaction
method.
Abaqus Scripting Reference Guide
2920
EosCompaction object

Corresponding analysis keywords
•
*EOS COMPACTION
2921
Abaqus Scripting Reference Guide
EosCompaction object

Expansion object
The Expansion object speciﬁes thermal expansion.
Access
materialApi.materials()[name].expansion()
Expansion(...)
This method creates an Expansion object.
Path
materialApi.materials()[name].Expansion
Prototype
odb_Expansion&
Expansion(const odb_String& type,
          bool userSubroutine,
          double zero,
          bool temperatureDependency,
          int dependencies,
          const odb_SequenceSequenceDouble& table);
Required arguments
None.
Optional arguments
An odb_String specifying the type of expansion. Possible values are "ISOTROPIC",
"ORTHOTROPIC", "ANISOTROPIC", and "SHORT_FIBER". The default value is
"ISOTROPIC".
type
A Boolean specifying whether a user subroutine is used to deﬁne the increments of thermal
strain. The default value is false.
userSubroutine
A Double specifying the value of 
 if the thermal expansion is temperature-dependent or
ﬁeld-variable-dependent. The default value is 0.0.
zero
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_SequenceSequenceDouble specifying the items described below. The default
value is an empty sequence.
table
This argument is required only if type is not "USER".
Abaqus Scripting Reference Guide
2922
Expansion object

Table data
If type=ISOTROPIC, the table data specify the following:
•
 in Abaqus/Standard or Abaqus/Explicit analyses.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
. (Not used for plane stress case.)
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=SHORT_FIBER, there is no table data.
Return value
An Expansion object.
Exceptions
RangeError.
Members
The Expansion object has members with the same names and descriptions as the arguments to the Expansion  method.
2923
Abaqus Scripting Reference Guide
Expansion object

Corresponding analysis keywords
•
*EXPANSION
Abaqus Scripting Reference Guide
2924
Expansion object

FailStrain object
The FailStrain object deﬁnes parameters for strain-based failure measures.
Access
materialApi.materials()[name].elastic().failStrain()
FailStrain(...)
This method creates a FailStrain object.
Path
materialApi.materials()[name].elastic().FailStrain
Prototype
odb_FailStrain&
FailStrain(const odb_SequenceSequenceDouble& table,
           bool temperatureDependency,
           int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Tensile strain limit in ﬁber direction, 
.
•
Compressive strain limit in ﬁber direction, 
.
•
Tensile strain limit in transverse direction, 
.
•
Compressive strain limit in transverse direction, 
.
•
Shear strain limit in the 
–  plane, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
2925
FailStrain object

Return value
A FailStrain object.
Exceptions
RangeError.
Members
The FailStrain object has members with the same names and descriptions as the arguments to the FailStrain  method.
Corresponding analysis keywords
•
*FAIL STRAIN
Abaqus Scripting Reference Guide
2926
FailStrain object

FailStress object
The FailStress object deﬁnes parameters for stress-based failure measures.
Access
materialApi.materials()[name].elastic().failStress()
FailStress(...)
This method creates a FailStress object.
Path
materialApi.materials()[name].elastic().FailStress
Prototype
odb_FailStress&
FailStress(const odb_SequenceSequenceDouble& table,
           bool temperatureDependency,
           int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Tensile stress limit in ﬁber direction, 
.
•
Compressive stress limit in ﬁber direction, 
.
•
Tensile stress limit in transverse direction, 
.
•
Compressive stress limit in transverse direction, 
.
•
Shear strength in the 
–  plane, .
•
Cross product term coefﬁcient,  (
). The default value is zero.
•
Biaxial stress limit, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
2927
FailStress object

•
Value of the second ﬁeld variable.
•
Etc.
Return value
A FailStress object.
Exceptions
RangeError.
Members
The FailStress object has members with the same names and descriptions as the arguments to the FailStress  method.
Corresponding analysis keywords
•
*FAIL STRESS
Abaqus Scripting Reference Guide
2928
FailStress object

FailureRatios object
The FailureRatios object speciﬁes the shape of the failure surface for a Concrete model.
Access
materialApi.materials()[name].concrete().failureRatios()
FailureRatios(...)
This method creates a FailureRatios object.
Path
materialApi.materials()[name].concrete().FailureRatios
Prototype
odb_FailureRatios&
FailureRatios(const odb_SequenceSequenceDouble& table,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Ratio of the ultimate biaxial compressive stress to the uniaxial compressive ultimate stress. The default value is
1.16.
•
Absolute value of the ratio of the uniaxial tensile stress at failure to the uniaxial compressive stress at failure. The
default value is 0.09.
•
Ratio of the magnitude of a principal component of plastic strain at ultimate stress in biaxial compression to the
plastic strain at ultimate stress in uniaxial compression. The default value is 1.28.
•
Ratio of the tensile principal stress value at shear in plane stress, when the other nonzero principal stress component
is at the ultimate compressive stress value, to the tensile cracking stress under uniaxial tension. The default value
is 1/3.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
2929
FailureRatios object

•
Etc.
Return value
A FailureRatios object.
Exceptions
RangeError.
Members
The FailureRatios object has members with the same names and descriptions as the arguments to the FailureRatios
method.
Corresponding analysis keywords
•
*FAILURE RATIOS
Abaqus Scripting Reference Guide
2930
FailureRatios object

FluidLeakoff object
The FluidLeakoff object speciﬁes leak-off coefﬁcients for pore pressure cohesive elements.
Access
materialApi.materials()[name].fluidLeakoff()
FluidLeakoff(...)
This method creates a FluidLeakoff object.
Path
materialApi.materials()[name].FluidLeakoff
Prototype
odb_FluidLeakoff&
FluidLeakoff(bool temperatureDependency,
             int dependencies,
             const odb_String& type,
             const odb_SequenceSequenceDouble& table);
Required arguments
None.
Optional arguments
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_String specifying the type of ﬂuid leak-off. Possible values are
"COEFFICIENTS" and "USER". The default value is "COEFFICIENTS".
type
An odb_SequenceSequenceDouble specifying the items described below. The default
value is an empty sequence.
table
Table data
The table data specify the following:
•
Fluid leak-off coefﬁcient at top element surface.
•
Fluid leak-off coefﬁcient at bottom element surface.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
2931
FluidLeakoff object

Return value
A FluidLeakoff object.
Exceptions
None.
Members
The FluidLeakoff object has members with the same names and descriptions as the arguments to the FluidLeakoff
method.
Corresponding analysis keywords
•
*FLUID LEAKOFF
Abaqus Scripting Reference Guide
2932
FluidLeakoff object

GapConductance object
The GapConductance object speciﬁes conductive heat transfer between closely adjacent (or contacting) surfaces.
Access
materialApi.materials()[name].gapConductance()
GapConductance(...)
This method creates a GapConductance object.
Path
materialApi.materials()[name].GapConductance
Prototype
odb_GapConductance&
GapConductance(const odb_SequenceSequenceDouble& table,
        bool pressureDependency,
        int dependencies);
Optional arguments
A Boolean specifying whether the data depend on pressure. The default value is
false.
pressureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
An odb_SequenceSequenceDouble specifying the items described below.
table
Table data
•
Gap Conductance or Cohesive Separation.
•
Gap Clearance, Gap Pressure (if the optional parameter pressureDependency is used), or Closure, c (for coupled
temperature-displacement gasket elements).
•
Average Temperature if the data depend on temperature.
•
Mass Flow Rate per unit area if the data depend on the average mass ﬂow rate.
•
Value of the ﬁrst ﬁeld variable if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GapConductance object.
Exceptions
None.
2933
GapConductance object

Members
The GapConductance object has members with the same names and descriptions as the arguments to the GapConductance
method.
Corresponding analysis keywords
•
*GAP CONDUCTANCE
Abaqus Scripting Reference Guide
2934
GapConductance object

GapConvection object
The GapConvection object speciﬁes the Nusselt number (
) to calculate the convective coefﬁcient for heat transfer
between the gap ﬂow and both the top and bottom surfaces of a coupled temperature-pore pressure cohesive element.
Access
materialApi.materials()[name].gapConvection()
GapConvection(...)
This method creates a GapConvection object.
Path
materialApi.materials()[name].Gapconvection
Prototype
odb_GapConvection&
GapConvection(const odb_SequenceSequenceDouble& table,
        bool temperatureDependency,
        int dependencies,
        const odb_String& type);
Required arguments
An odb_String specifying the type of gap convection. Possible values are FLUX, TEMPERATURE,
and TABULAR. The default value is FLUX.
type
Optional arguments
If type=TABULAR the following optional arguments can be used:
An odb_SequenceSequenceDouble specifying the items described below.
table
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
If type=TABULAR the table data specify the following:
•
Nusselt number (
)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
2935
GapConvection object

Return value
A GapConvection object.
Exceptions
None.
Members
The GapConvection object has members with the same names and descriptions as the arguments to the GapConvection
method.
Corresponding analysis keywords
•
*GAP CONVECTION
Abaqus Scripting Reference Guide
2936
GapConvection object

GapFlow object
The GapFlow object speciﬁes tangential ﬂow constitutive parameters for pore pressure cohesive elements.
Access
materialApi.materials()[name].gapFlow()
GapFlow(...)
This method creates a GapFlow object.
Path
materialApi.materials()[name].GapFlow
Prototype
odb_GapFlow&
GapFlow(const odb_SequenceSequenceDouble& table,
        odb_Union kmax,
        bool temperatureDependency,
        int dependencies,
        const odb_String& type);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or a Double specifying the maximum permeability value that should
be used. If kmax="NONE", Abaqus assumes that the permeability is not bounded. This
value is meaningful only when type="NEWTONIAN". The default value is "NONE".
kmax
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An odb_String specifying the type of gap ﬂow. Possible values are "NEWTONIAN",
"POWER_LAW", "BINGHAM_PLASTIC", and "HERSCHEL-BULKLEY". The default
value is "NEWTONIAN".
type
Table data
If type=NEWTONIAN the table data specify the following:
•
Pore viscosity.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
2937
GapFlow object

•
Etc.
If type=POWER_LAW the table data specify the following:
•
Consistency.
•
Exponent.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=BINGHAM_PLASTIC the table data specify the following:
•
Consistency.
•
Yield stress.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=HERSCHEL-BULKLEY the table data specify the following:
•
Consistency.
•
Exponent.
•
Yield stress.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GapFlow object.
Exceptions
None.
Members
The GapFlow object has members with the same names and descriptions as the arguments to the GapFlow method.
Corresponding analysis keywords
•
*GAP FLOW
Abaqus Scripting Reference Guide
2938
GapFlow object

GapRadiation object
The GapRadiation object speciﬁes radiative heat transfer between closely adjacent surfaces.
Access
materialApi.materials()[name].gapRadiation()
GapRadiation(...)
This method creates a GapConductance object.
Path
materialApi.materials()[name].GapConductance
Prototype
odb_GapConductance&
GapConductance(const odb_SequenceSequenceDouble& table,
Float mainSurfaceEmissivity, Float secondarySurfaceEmissivity, );
Required arguments
A Float specifying the Emissivity of main surface.
mainSurfaceEmissivity
A Float specifying the Emissivity of the secondary surface.
secondarySurfaceEmissivity
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
Table data
The table data specify the following:
•
Effective View Factor.
•
Gap Clearance.
•
Repeat this data line as often as necessary to deﬁne the dependence of the view factor on gap clearance.
Return value
A GapRadiation object.
Exceptions
None.
Members
The GapRadiation object has members with the same names and descriptions as the arguments to the GapRadiation
method.
2939
GapRadiation object

Corresponding analysis keywords
•
*GAP RADIATION
Abaqus Scripting Reference Guide
2940
GapRadiation object

GasketMembraneElastic object
The GasketMembraneElastic object deﬁnes the elastic parameters for the membrane shear behavior of a gasket.
Access
materialApi.materials()[name].gasketMembraneElastic()
GasketMembraneElastic(...)
This method creates a GasketMembraneElastic object.
Path
materialApi.materials()[name].GasketMembraneElastic
Prototype
odb_GasketMembraneElastic&
GasketMembraneElastic(const odb_SequenceSequenceDouble& table,
                      bool temperatureDependency,
                      int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Young's modulus, .
•
Poisson's ratio, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GasketMembraneElastic object.
2941
GasketMembraneElastic object

Exceptions
RangeError.
Members
The GasketMembraneElastic object has members with the same names and descriptions as the arguments to the
GasketMembraneElastic  method.
Corresponding analysis keywords
•
*GASKET ELASTICITY
Abaqus Scripting Reference Guide
2942
GasketMembraneElastic object

GasketThicknessBehavior object
The GasketThicknessBehavior object deﬁnes the behavior in the thickness direction for a gasket.
Access
materialApi.materials()[name].gasketThicknessBehavior()
GasketThicknessBehavior(...)
This method creates a GasketThicknessBehavior object.
Path
materialApi.materials()[name].GasketThicknessBehavior
Prototype
odb_GasketThicknessBehavior&
GasketThicknessBehavior(const odb_SequenceSequenceDouble& table,
            bool temperatureDependency,
            int dependencies,
            double tensileStiffnessFactor,
            const odb_String& type,
            int unloadingDependencies,
            bool unloadingTemperatureDependency,
            const odb_String& variableUnits,
            double yieldOnset,
            const odb_String& yieldOnsetMethod,
            const odb_SequenceSequenceDouble& unloadingTable);
Required arguments
An odb_SequenceSequenceDouble specifying loading data. The ﬁrst sequence must contain only 0. At
least two sequences must be speciﬁed if type="DAMAGE", and at least 3 sequences must be speciﬁed
if type="ELASTIC_PLASTIC". The items in the table data are described below.
table
Optional arguments
A Boolean specifying whether the loading data depend on temperature. The
default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies included in the
deﬁnition of the loading data, in addition to temperature. The default value is 0.
dependencies
A Double specifying the fraction of the initial compressive stiffness that deﬁnes
the stiffness in tension. The default value is 10–3.
tensileStiffnessFactor
An odb_String specifying a damage elasticity model or an elastic-plastic model
for gasket thickness-direction behavior. Possible values are
type
"ELASTIC_PLASTIC" and "DAMAGE". The default value is
"ELASTIC_PLASTIC".
2943
GasketThicknessBehavior object

An Int specifying the number of ﬁeld variable dependencies included in the
deﬁnition of the unloading data, in addition to temperature. The default value is
0.
unloadingDependencies
A Boolean specifying whether unloading data depends on temperature. The
default value is false.
unloadingTemperatureDependency
An odb_String specifying the behavior in terms of units of force (or force in unit
length) versus closure or pressure versus closure. Possible values are "STRESS"
and "FORCE". The default value is "STRESS".
variableUnits
A Double specifying the closure value at which the onset of yield occurs or the
relative drop in slope on the loading curve that deﬁnes the onset of plastic
yieldOnset
deformation (depending on the value of yieldOnsetMethod). The default value
is 0.1.
An odb_String specifying the method used to determine yield onset. Possible
values are "RELATIVE_SLOPE_DROP" and "CLOSURE_VALUE". The
default value is "RELATIVE_SLOPE_DROP".
yieldOnsetMethod
An odb_SequenceSequenceDouble specifying unloading data. The items in the
table data are described below. The default value is an empty sequence.
unloadingTable
Table data
If variableUnits=STRESS, the loading table data specify the following:
•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=FORCE, the loading table data specify the following:
•
Force or force per unit length; this value must be positive.
•
Closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=STRESS and type=ELASTIC_PLASTIC, the unloadingTable data specify the following:
•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Plastic closure; this value must be positive.
Abaqus Scripting Reference Guide
2944
GasketThicknessBehavior object

•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=FORCE and type=ELASTIC_PLASTIC, the unloadingTable data specify the following:
•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Plastic closure; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=STRESS and type=DAMAGE, the unloadingTable data specify the following:
•
Pressure; this value must be positive.
•
Closure; this value must be positive.
•
Maximum closure reached while loading the gasket; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If variableUnits=FORCE and type=DAMAGE, the unloadingTable data specify the following:
•
Force or force per unit length; this value must be positive.
•
Closure; this value must be positive.
•
Maximum closure reached while loading the gasket; this value must be positive.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A GasketThicknessBehavior object.
Exceptions
RangeError.
Members
The GasketThicknessBehavior object has members with the same names and descriptions as the arguments to the
GasketThicknessBehavior  method.
2945
Abaqus Scripting Reference Guide
GasketThicknessBehavior object

In addition, the GasketThicknessBehavior object can have the following member:
Prototype
odb_ContactArea contactArea() const;
A ContactArea object.
contactArea
Corresponding analysis keywords
•
*GASKET THICKNESS BEHAVIOR
Abaqus Scripting Reference Guide
2946
GasketThicknessBehavior object

GasketTransverseShearElastic object
The GasketTransverseShearElastic object deﬁnes the elastic parameters for the transverse shear behavior of a gasket.
Access
materialApi.materials()[name].gasketTransverseShearElastic()
GasketTransverseShearElastic(...)
This method creates a GasketTransverseShearElastic object.
Path
materialApi.materials()[name].GasketTransverseShearElastic
Prototype
odb_GasketTransverseShearElastic&
GasketTransverseShearElastic(const odb_SequenceSequenceDouble& table,
                             const odb_String& variableUnits,
                             bool temperatureDependency,
                             int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the unit system in which the transverse shear behavior
will be deﬁned. Possible values are "STRESS" and "FORCE". The default value is
"STRESS".
variableUnits
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
•
Shear stiffness. (This value cannot be negative.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
2947
GasketTransverseShearElastic object

Return value
A GasketTransverseShearElastic object.
Exceptions
RangeError.
Members
The GasketTransverseShearElastic object has members with the same names and descriptions as the arguments to the
GasketTransverseShearElastic  method.
Corresponding analysis keywords
•
*GASKET ELASTICITY
Abaqus Scripting Reference Guide
2948
GasketTransverseShearElastic object

Gel object
The Gel object deﬁnes a swelling gel.
Access
materialApi.materials()[name].gel()
Gel(...)
This method creates a Gel object.
Path
materialApi.materials()[name].Gel
Prototype
odb_Gel&
Gel(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
Radius of gel particles when completely dry, 
.
•
Fully swollen radius of gel particles, 
.
•
Number of gel particles per unit volume, 
.
•
Relaxation time constant for long-term swelling of gel particles, 
.
Return value
A Gel object.
Exceptions
None.
Members
The Gel object has members with the same names and descriptions as the arguments to the Gel  method.
2949
Gel object

Corresponding analysis keywords
•
*GEL
Abaqus Scripting Reference Guide
2950
Gel object

HeatGeneration object
The HeatGeneration object includes volumetric heat generation in heat transfer analyses.
Access
materialApi.materials()[name].heatGeneration()
HeatGeneration()
This method creates a HeatGeneration object.
Path
materialApi.materials()[name].HeatGeneration
Prototype
odb_HeatGeneration&
HeatGeneration();
Arguments
None.
Return value
A HeatGeneration object.
Exceptions
None.
Members
The HeatGeneration object has no members.
Corresponding analysis keywords
•
*HEAT GENERATION
2951
HeatGeneration object

Hyperelastic object
The Hyperelastic object speciﬁes elastic properties for approximately incompressible elastomers.
Access
materialApi.materials()[name].hyperelastic()
Hyperelastic(...)
This method creates a Hyperelastic object.
Path
materialApi.materials()[name].Hyperelastic
Prototype
odb_Hyperelastic&
Hyperelastic(const odb_SequenceSequenceDouble& table,
             const odb_String& type,
             const odb_String& moduliTimeScale,
             bool temperatureDependency,
             int n,
             odb_Union beta,
             bool testData,
             bool compressible,
             int properties,
             const odb_String& deviatoricResponse,
             const odb_String& volumetricResponse,
             double poissonRatio,
             const odb_String& materialType,
             const odb_String& anisotropicType,
             const odb_String& formulation,
             const odb_String& behaviorType,
             int dependencies,
             int localDirections);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below. This argument is valid
only if testData=OFF.
table
Optional arguments
An odb_String specifying the type of strain energy potential. Possible values are:
type
•
"ARRUDA_BOYCE"
•
"MARLOW"
•
"MOONEY_RIVLIN"
•
"NEO_HOOKE"
•
"OGDEN"
Abaqus Scripting Reference Guide
2952
Hyperelastic object

•
"POLYNOMIAL"
•
"REDUCED_POLYNOMIAL"
•
"USER"
•
"VAN_DER_WAALS"
•
"YEOH"
•
"UNKNOWN"
The default value is "UNKNOWN".
An odb_String specifying the nature of the time response. Possible values are
"INSTANTANEOUS" and "LONG_TERM". The default value is "LONG_TERM".
moduliTimeScale
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the order of the strain energy potential. The default value is 1.
n
If testData=ON and type="POLYNOMIAL", n can take only the values 1 or 2.
If testData=ON and type="OGDEN" or if testData=OFF for either type, 1 
 6.
If type="USER", this argument cannot be used.
The string "FITTED_VALUE" or a Double specifying the invariant mixture parameter.
This argument is valid only if testData=ON and type="VAN_DER_WAALS". The default
value is "FITTED_VALUE".
beta
A Boolean specifying whether test data are supplied. The default value is true.
testData
A Boolean specifying whether the hyperelastic material is compressible. This parameter is
applicable only to user-deﬁned hyperelastic materials. The default value is false.
compressible
An Int specifying the number of property values needed as data for the user-deﬁned
hyperelastic material. The default value is 0.
properties
An odb_String specifying which test data to use. Possible values are "UNIAXIAL",
"BIAXIAL", and "PLANAR". The default value is "UNIAXIAL".
deviatoricResponse
An odb_String specifying the volumetric response. Possible values are "DEFAULT",
"VOLUMETRIC_DATA", "POISSON_RATIO", and "LATERAL_NOMINAL_STRAIN".
The default value is "DEFAULT".
volumetricResponse
A Double specifying the poisson ratio. This argument is valid only if
volumetricResponse="POISSON_RATIO". The default value is 0.0.
poissonRatio
An odb_String specifying the type of material. Possible values are "ISOTROPIC" and
"ANISOTROPIC". The default value is "ISOTROPIC".
materialType
An odb_String specifying the type of strain energy potential. Possible values are
"FUNG_ANISOTROPIC", "FUNG_ORTHOTROPIC", "HOLZAPFEL", and
"USER_DEFINED". The default value is "FUNG_ANISOTROPIC".
anisotropicType
2953
Abaqus Scripting Reference Guide
Hyperelastic object

An odb_String specifying the type of formulation. Possible values are "STRAIN" and
"INVARIANT". The default value is "STRAIN".
formulation
An odb_String specifying the type of anisotropic hyperelastic material behavior. Possible
values are "INCOMPRESSIBLE" and "COMPRESSIBLE". The default value is
"INCOMPRESSIBLE".
behaviorType
An Int specifying the number of ﬁeld variable dependencies for the data involumetricTable
. The default value is 0.
dependencies
An Int specifying the number of local directions for the data involumetricTable . The default
value is 0.
localDirections
Table data
If type=ARRUDA_BOYCE, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=MOONEY_RIVLIN, the table data specify the following:
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=NEO_HOOKE, the table data specify the following:
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=OGDEN, the table data specify the following for values of :
•
 and 
 for  from 1 to .
•
 coefﬁcients 
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 4 
 6 in an
Abaqus/Explicit analysis.
If type=POLYNOMIAL, the table data specify the following for values of :
•
 for each value of 
 from  to  with  decreasing from 
 to zero and  increasing from zero to 
.
•
 coefﬁcients 
.
Abaqus Scripting Reference Guide
2954
Hyperelastic object

•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 3 
 6 in an
Abaqus/Explicit analysis.
If type=REDUCED_POLYNOMIAL, the table data specify the following for values of :
•
 for  from 1 to .
•
 coefﬁcients 
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 4 
 6 in an
Abaqus/Explicit analysis.
If type=VAN_DER_WAALS, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
If type=YEOH, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed in an Abaqus/Explicit
analysis.
The None object is the default value if testData=ON.
Return value
A Hyperelastic object.
Exceptions
InvalidNameError and RangeError.
Members
The Hyperelastic object has members with the same names and descriptions as the arguments to the Hyperelastic
method.
In addition, the Hyperelastic object can have the following members:
2955
Abaqus Scripting Reference Guide
Hyperelastic object

Prototype
odb_BiaxialTestData biaxialTestData() const;
odb_PlanarTestData planarTestData() const;
odb_UniaxialTestData uniaxialTestData() const;
odb_VolumetricTestData volumetricTestData() const;
odb_Hysteresis hysteresis() const;
A BiaxialTestData object.
biaxialTestData
A PlanarTestData object.
planarTestData
A UniaxialTestData object.
uniaxialTestData
A VolumetricTestData object.
volumetricTestData
A Hysteresis object.
hysteresis
Corresponding analysis keywords
•
*HYPERELASTIC
Abaqus Scripting Reference Guide
2956
Hyperelastic object

Hyperfoam object
The Hyperfoam object speciﬁes elastic properties for a hyperelastic foam.
Access
materialApi.materials()[name].hyperfoam()
Hyperfoam(...)
This method creates a Hyperfoam object.
Path
materialApi.materials()[name].Hyperfoam
Prototype
odb_Hyperfoam&
Hyperfoam(bool testData,
          odb_Union poisson,
          int n,
          bool temperatureDependency,
          const odb_String& moduli,
          const odb_SequenceSequenceDouble& table);
Required arguments
None.
Optional arguments
A Boolean specifying whether test data are supplied. The default value is false.
testData
The string "NONE" or a Double specifying the effective Poisson's ratio, , of the material.
This argument is valid only when testData=true. The default value is "NONE".
poisson
An Int specifying the order of the strain energy potential. Possible values are 1 
 6.
The default value is 1.
n
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An odb_String specifying the time-dependence of the material constants. Possible values
are "INSTANTANEOUS" and "LONG_TERM". The default value is "LONG_TERM".
moduli
An odb_SequenceSequenceDouble specifying the items described below. This argument is
valid only when testData=false. The default value is an empty sequence.
table
Table data
The items in the table data specify the following for values of :
2957
Hyperfoam object

•
 and 
 for  from 1 to .
•
.
•
Temperature, if the data depend on temperature. Temperature dependence is not allowed for 4 
 6 in an
Abaqus/Explicit analysis.
Return value
A Hyperfoam object.
Exceptions
RangeError.
Members
The Hyperfoam object has members with the same names and descriptions as the arguments to the Hyperfoam  method.
In addition, the Hyperfoam object can have the following members:
Prototype
odb_BiaxialTestData biaxialTestData() const;
odb_VolumetricTestData volumetricTestData() const;
odb_PlanarTestData planarTestData() const;
odb_SimpleShearTestData simpleShearTestData() const;
odb_UniaxialTestData uniaxialTestData() const;
A BiaxialTestData object.
biaxialTestData
A VolumetricTestData object.
volumetricTestData
A PlanarTestData object.
planarTestData
A SimpleShearTestData object.
simpleShearTestData
A UniaxialTestData object.
uniaxialTestData
Corresponding analysis keywords
•
*HYPERFOAM
Abaqus Scripting Reference Guide
2958
Hyperfoam object

Hypoelastic object
The Hypoelastic object speciﬁes hypoelastic material properties.
Access
materialApi.materials()[name].hypoelastic()
Hypoelastic(...)
This method creates a Hypoelastic object.
Path
materialApi.materials()[name].Hypoelastic
Prototype
odb_Hypoelastic&
Hypoelastic(const odb_SequenceSequenceDouble& table,
            bool user);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying that hypoelasticity is deﬁned by user subroutine UHYPEL. The default
value is false.
user
Table data
•
Instantaneous Young's modulus, .
•
Instantaneous Poisson's ratio, .
•
First strain invariant, 
.
•
Second strain invariant, 
.
•
Third strain invariant, 
.
Return value
A Hypoelastic object.
Exceptions
None.
2959
Hypoelastic object

Members
The Hypoelastic object has members with the same names and descriptions as the arguments to the Hypoelastic
method.
Corresponding analysis keywords
•
*HYPOELASTIC
Abaqus Scripting Reference Guide
2960
Hypoelastic object

Hysteresis object
The Hysteresis object speciﬁes the creep part of the material model for the hysteretic behavior of elastomers.
Access
materialApi.materials()[name].hyperelastic().hysteresis()
Hysteresis(...)
This method creates a Hysteresis object.
Path
materialApi.materials()[name].hyperelastic().Hysteresis
Prototype
odb_Hysteresis&
Hysteresis(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
Stress scaling factor.
•
Creep parameter.
•
Effective stress exponent.
•
Creep strain exponent.
Return value
A Hysteresis object.
Exceptions
RangeError.
Members
The Hysteresis object has members with the same names and descriptions as the arguments to the Hysteresis  method.
Corresponding analysis keywords
•
*HYSTERESIS
2961
Hysteresis object

InelasticHeatFraction object
The InelasticHeatFraction object deﬁnes the fraction of the rate of inelastic dissipation that appears as a heat source.
Access
materialApi.materials()[name].inelasticHeatFraction()
InelasticHeatFraction(...)
This method creates an InelasticHeatFraction object.
Path
materialApi.materials()[name].InelasticHeatFraction
Prototype
odb_InelasticHeatFraction&
InelasticHeatFraction(double fraction);
Required arguments
None.
Optional arguments
A Double specifying the fraction of inelastic dissipation rate that appears as a heat ﬂux per unit
volume. The fraction may include a unit conversion factor if required. Possible values are 0.0
fraction  1.0. The default value is 0.9.
fraction
Return value
An InelasticHeatFraction object.
Exceptions
RangeError.
Members
The InelasticHeatFraction object has members with the same names and descriptions as the arguments to the
InelasticHeatFraction  method.
Corresponding analysis keywords
•
*INELASTIC HEAT FRACTION
Abaqus Scripting Reference Guide
2962
InelasticHeatFraction object

JouleHeatFraction object
The JouleHeatFraction object deﬁnes the fraction of electric energy released as heat.
Access
materialApi.materials()[name].jouleHeatFraction()
JouleHeatFraction(...)
This method creates a JouleHeatFraction object.
Path
materialApi.materials()[name].JouleHeatFraction
Prototype
odb_JouleHeatFraction& 
JouleHeatFraction(double fraction);
Required arguments
None.
Optional arguments
A Double specifying the fraction of electrical energy released as heat, including any unit
conversion factor. The default value is 1.0.
fraction
Return value
A JouleHeatFraction object.
Exceptions
RangeError.
Members
The JouleHeatFraction object has members with the same names and descriptions as the arguments to the
JouleHeatFraction  method.
Corresponding analysis keywords
•
*JOULE HEAT FRACTION
2963
JouleHeatFraction object

LatentHeat object
The LatentHeat object speciﬁes a material's latent heat.
Access
materialApi.materials()[name].latentHeat()
LatentHeat(...)
This method creates a LatentHeat object.
Path
materialApi.materials()[name].LatentHeat
Prototype
odb_LatentHeat&
LatentHeat(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
Latent heat per unit mass.
•
Solidus temperature.
•
Liquidus temperature.
Return value
A LatentHeat object.
Exceptions
RangeError.
Members
The LatentHeat object has members with the same names and descriptions as the arguments to the LatentHeat  method.
Corresponding analysis keywords
•
*LATENT HEAT
Abaqus Scripting Reference Guide
2964
LatentHeat object

LowDensityFoam object
The LowDensityFoam object speciﬁes properties for low-density foam.
Access
materialApi.materials()[name].lowDensityFoam()
LowDensityFoam(...)
This method creates a LowDensityFoam object.
Path
materialApi.materials()[name].LowDensityFoam
Prototype
odb_LowDensityFoam&
LowDensityFoam(bool elementRemoval,
               odb_Union maxAllowablePrincipalStress,
               bool extrapolateStressStrainCurve,
               const odb_String& strainRateType,
               double mu0,
               double mu1,
               double alpha);
Required arguments
None.
Optional arguments
A Boolean specifying whether elements are removed if exceeding maximum principal
tensile stress. This argument is valid only when maxAllowablePrincipalStress is
deﬁned. The default value is false.
elementRemoval
The string "NONE" or a Double specifying the maximum allowable principal tensile
stress. The default value is "NONE".
maxAllowablePrincipalStress
A Boolean specifying whether the stress-strain curve is extrapolated if exceeding
maximum strain rate. The default value is false.
extrapolateStressStrainCurve
An odb_String specifying strain rate measure used for constitutive calculations. Possible
values are "PRINCIPAL" and "VOLUMETRIC". The default value is
"VOLUMETRIC".
strainRateType
A Double specifying the relaxation coefﬁcient 
. The default value is 10–4.
mu0
A Double specifying the relaxation coefﬁcient 
. The default value is 0.5×10–2.
mu1
A Double specifying the relaxation coefﬁcient . The default value is 2.0.
alpha
2965
LowDensityFoam object

Return value
A LowDensityFoam object.
Exceptions
RangeError.
Members
The LowDensityFoam object has members with the same names and descriptions as the arguments to the
LowDensityFoam  method.
In addition, the LowDensityFoam object can have the following members:
Prototype
odb_UniaxialTestData uniaxialTensionTestData() const;
odb_UniaxialTestData uniaxialCompressionTestData() const;
A UniaxialTestData object.
uniaxialTensionTestData
A UniaxialTestData object.
uniaxialCompressionTestData
Corresponding analysis keywords
•
*LOW DENSITY FOAM
Abaqus Scripting Reference Guide
2966
LowDensityFoam object

MagneticPermeability object
The MagneticPermeability object speciﬁes magnetic permeability.
Access
materialApi.materials()[name].magneticPermeability()
MagneticPermeability(...)
This method creates a MagneticPermeability object.
Path
materialApi.materials()[name].MagneticPermeability
Prototype
odb_MagneticPermeability&
MagneticPermeability(const odb_SequenceSequenceDouble& table,
                    const odb_SequenceSequenceDouble& table2,
                    const odb_SequenceSequenceDouble& table3,
                    const odb_String& type,
                    bool frequencyDependency,
                    bool temperatureDependency,
                    int dependencies,
                    bool nonlinearBH);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below in “Table data.” If
type=ORTHOTROPIC and nonlinearBH=ON, the data speciﬁed in the table is for the ﬁrst direction
and table2 and table3 must be speciﬁed.
table
An odb_SequenceSequenceDouble specifying the items described below in “Table data” in the
second direction. table2 must be speciﬁed only if type=ORTHOTROPIC and nonlinearBH=ON.
table2
An odb_SequenceSequenceDouble specifying the items described below in “Table data” in the third
direction. table3 must be speciﬁed only if type=ORTHOTROPIC and nonlinearBH=ON.
table3
Optional arguments
An odb_String specifying the type of magnetic permeability. Possible values are
"ISOTROPIC", "ORTHOTROPIC", and "ANISOTROPIC". The default value is
"ISOTROPIC".
type
A Boolean specifying whether the data depend on frequency. The default value is
false.
frequencyDependency
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
2967
MagneticPermeability object

An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
A Boolean specifying whether the magnetic behavior is nonlinear and available in
tabular form of magnetic ﬂux density versus magnetic ﬁeld values. The default value
is false.
nonlinearBH
Table data
If type=ISOTROPIC, the table data specify the following:
•
Magnetic permeability.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ISOTROPIC, and nonlinearBH=TRUE, the table data specify the following:
•
Magntitude of the magnetic ﬂux density vector.
•
Magnitude of the magnetic ﬁeld vector.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=ORTHOTROPIC, and nonlinearBH=TRUE, the table data specify the following:
•
Magntitude of the magnetic ﬂux density vector in the ﬁrst direction.
•
Magnitude of the magnetic ﬁeld vector in the second direction.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
Abaqus Scripting Reference Guide
2968
MagneticPermeability object

•
Etc.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Frequency, if the data depend on frequency.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A MagneticPermeability object.
Exceptions
RangeError.
Members
The MagneticPermeability object has members with the same names and descriptions as the arguments to the
MagneticPermeability  method.
Corresponding analysis keywords
•
*MAGNETIC PERMEABILITY
2969
Abaqus Scripting Reference Guide
MagneticPermeability object

MohrCoulombHardening object
The MohrCoulombHardening object speciﬁes hardening for the Mohr-Coulomb plasticity model.
Access
materialApi.materials()[name].mohrCoulombPlasticity()\
.mohrCoulombHardening()
MohrCoulombHardening(...)
This method creates a MohrCoulombHardening object.
Path
materialApi.materials()[name].mohrCoulombPlasticity()\
.MohrCoulombHardening
Prototype
odb_MohrCoulombHardening&
MohrCoulombHardening(const odb_SequenceSequenceDouble& table,
                     bool temperatureDependency,
                     int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Cohesion yield stress.
•
The absolute value of the corresponding plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A MohrCoulombHardening object.
Abaqus Scripting Reference Guide
2970
MohrCoulombHardening object

Exceptions
RangeError.
Members
The MohrCoulombHardening object has members with the same names and descriptions as the arguments to the
MohrCoulombHardening  method.
Corresponding analysis keywords
•
*MOHR COULOMB HARDENING
2971
Abaqus Scripting Reference Guide
MohrCoulombHardening object

MohrCoulombPlasticity object
The MohrCoulombPlasticity object speciﬁes the extended Mohr-Coulomb plasticity model.
Access
materialApi.materials()[name].mohrCoulombPlasticity()
MohrCoulombPlasticity(...)
This method creates a MohrCoulombPlasticity object.
Path
materialApi.materials()[name].MohrCoulombPlasticity
Prototype
odb_MohrCoulombPlasticity&
MohrCoulombPlasticity(const odb_SequenceSequenceDouble& table,
                      odb_Union deviatoricEccentricity,
                      double meridionalEccentricity,
                      bool temperatureDependency,
                      int dependencies,
                      bool useTensionCutoff);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or a Double specifying the ﬂow potential eccentricity in the
deviatoric plane, ; 1/2 
 1.0. If deviatoricEccentricity="NONE", Abaqus
deviatoricEccentricity
calculates the value using the speciﬁed Mohr-Coulomb angle of friction. The default
value is "NONE".
A Double specifying the ﬂow potential eccentricity in the meridional plane, . The
default value is 0.1.
meridionalEccentricity
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
A Boolean specifying whether tension cutoff speciﬁcation is needed. The default
value is false.
useTensionCutoff
Abaqus Scripting Reference Guide
2972
MohrCoulombPlasticity object

Table data
The table data specify the following:
•
Friction angle (given in degrees), , at high conﬁning pressure in the –
 plane.
•
Dilation angle, , at high conﬁning pressure in the –
 plane.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A MohrCoulombPlasticity object.
Exceptions
RangeError.
Members
The MohrCoulombPlasticity object has members with the same names and descriptions as the arguments to the
MohrCoulombPlasticity  method.
In addition, the MohrCoulombPlasticity object can have the following members:
Prototype
odb_MohrCoulombHardening mohrCoulombHardening() const;
odb_TensionCutOff tensionCutOff() const;
A MohrCoulombHardening object.
mohrCoulombHardening
A TensionCutOff object.
tensionCutOff
Corresponding analysis keywords
•
*MOHR COULOMB
2973
Abaqus Scripting Reference Guide
MohrCoulombPlasticity object

MoistureSwelling object
The MoistureSwelling object deﬁnes moisture-driven swelling.
Access
materialApi.materials()[name].moistureSwelling()
MoistureSwelling(...)
This method creates a MoistureSwelling object.
Path
materialApi.materials()[name].MoistureSwelling
Prototype
odb_MoistureSwelling&
MoistureSwelling(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
Volumetric moisture swelling strain, 
.
•
Saturation, . This value must lie in the range 
.
Return value
A MoistureSwelling object.
Exceptions
None.
Members
The MoistureSwelling object has members with the same names and descriptions as the arguments to the
MoistureSwelling  method.
In addition, the MoistureSwelling object can have the following member:
Prototype
odb_Ratios ratios() const;
Abaqus Scripting Reference Guide
2974
MoistureSwelling object

A Ratios object.
ratios
Corresponding analysis keywords
•
*MOISTURE SWELLING
2975
Abaqus Scripting Reference Guide
MoistureSwelling object

MullinsEffect object
The MullinsEffect speciﬁes properties for mullins data.
Access
materialApi.materials()[name].mullinsEffect()
Members
The MullinsEffect object can have the following members:
Prototype
odb_String definition() const;
bool temperatureDependency() const;
int dependencies() const;
int properties() const;
odb_SequenceSequenceDouble table() const;
odb_SequenceUniaxialTestData uniaxialTests() const;
odb_UniaxialTestData uniaxialTests(int index) const;
odb_SequenceBiaxialTestData biaxialTests() const;
odb_BiaxialTestData biaxialTests(int index) const;
odb_SequencePlanarTestData planarTests() const;
odb_PlanarTestData planarTests(int index) const;
An odb_String specifying the method of specifying the data. Possible values are
"USER", "CONSTANTS", and "TEST_DATA". The default value is "CONSTANTS".
deﬁnition
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
An Int specifying the number of property values needed as data for the user-deﬁned
hyperelastic material. The default value is 0.
properties
An odb_SequenceSequenceDouble specifying the items described below. The default
value is an empty sequence.
table
A sequence of UniaxialTestData objects.
uniaxialTests
A sequence of BiaxialTestData objects.
biaxialTests
A sequence of PlanarTestData objects.
planarTests
Abaqus Scripting Reference Guide
2976
MullinsEffect object

Ornl object
The Ornl object speciﬁes the constitutive model developed by Oak Ridge National Laboratory.
Access
materialApi.materials()[name].creep().ornl()
materialApi.materials()[name].plastic().ornl()
Ornl(...)
This method creates an Ornl object.
Path
materialApi.materials()[name].creep().Ornl
materialApi.materials()[name].plastic().Ornl
Prototype
odb_Ornl&
Ornl(double a,
     odb_Union h,
     bool reset);
Required arguments
None.
Optional arguments
A Double specifying the saturation rates for kinematic shift caused by creep strain, as deﬁned by
Equation (15) of Section 4.3.3–3 of the Nuclear Standard. The default value corresponds to that section of
the Standard. Set a=0.0 to use the 1986 revision of the Standard. The default value is 0.3.
a
The string "NONE" or a Double specifying the rate of kinematic shift with respect to creep strain
[Equation (7) of Section 4.3.2–1 of the Nuclear Standard]. If h="NONE", the value of h is determined
h
according to Section 4.3.3–3 of the 1981 revision of the Standard. Set h=0.0 to use the 1986 revision of
the Standard. The default value is "NONE".
A Boolean specifying whether to invoke the optional  reset procedure described in Section 4.3.5 of the
Nuclear Standard. The default value is false.
reset
Return value
An Ornl object.
Exceptions
RangeError.
2977
Ornl object

Members
The Ornl object has members with the same names and descriptions as the arguments to the Ornl  method.
Corresponding analysis keywords
•
*ORNL
Abaqus Scripting Reference Guide
2978
Ornl object

Permeability object
The Permeability object deﬁnes permeability for pore ﬂuid ﬂow.
Access
materialApi.materials()[name].permeability()
Permeability(...)
This method creates a Permeability object.
Path
materialApi.materials()[name].Permeability
Prototype
odb_Permeability&
Permeability(double specificWeight,
             double inertialDragCoefficient,
             const odb_SequenceSequenceDouble& table,
             const odb_String& type,
             bool temperatureDependency,
             int dependencies);
Required arguments
A Double specifying the speciﬁc weight of the wetting liquid, 
.
speciﬁcWeight
A Double specifying The inertial drag coefﬁcient of the wetting liquid, 
.
inertialDragCoefﬁcient
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of permeability. Possible values are "ISOTROPIC",
"ORTHOTROPIC", and "ANISOTROPIC". The default value is "ISOTROPIC".
type
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=ISOTROPIC, the table data specify the following:
•
.
•
Void ratio, .
•
Temperature, if the data depend on temperature.
2979
Permeability object

If type=ORTHOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
Void ratio, .
•
Temperature, if the data depend on temperature.
If type=ANISOTROPIC, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
Void ratio, .
•
Temperature, if the data depend on temperature.
Return value
A Permeability object.
Exceptions
RangeError.
Members
The Permeability object has members with the same names and descriptions as the arguments to the Permeability
method.
In addition, the Permeability object can have the following members:
Prototype
odb_SaturationDependence saturationDependence() const;
odb_VelocityDependence velocityDependence() const;
A SaturationDependence object specifying the dependence of the permeability of
a material on the saturation of the wetting liquid.
saturationDependence
A VelocityDependence object specifying the dependence of the permeability of a
material on the velocity of ﬂuid ﬂow.
velocityDependence
Abaqus Scripting Reference Guide
2980
Permeability object

Corresponding analysis keywords
•
*PERMEABILITY
2981
Abaqus Scripting Reference Guide
Permeability object

Piezoelectric object
The Piezoelectric object speciﬁes piezoelectric material properties.
Access
materialApi.materials()[name].piezoelectric()
Piezoelectric(...)
This method creates a Piezoelectric object.
Path
materialApi.materials()[name].Piezoelectric
Prototype
odb_Piezoelectric&
Piezoelectric(const odb_SequenceSequenceDouble& table,
              const odb_String& type,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of material coefﬁcients for the piezoelectric property.
Possible values are "STRAIN" and "STRESS". The default value is "STRESS".
type
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRESS, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
Abaqus Scripting Reference Guide
2982
Piezoelectric object

•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=STRAIN, the table data specify the following:
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
•
.
2983
Abaqus Scripting Reference Guide
Piezoelectric object

•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Piezoelectric object.
Exceptions
None.
Members
The Piezoelectric object has members with the same names and descriptions as the arguments to the Piezoelectric
method.
Corresponding analysis keywords
•
*PIEZOELECTRIC
Abaqus Scripting Reference Guide
2984
Piezoelectric object

PlanarTestData object
The PlanarTestData object speciﬁes planar test (or pure shear) data (compression and/or tension).
Access
materialApi.materials()[name].hyperelastic().planarTestData()
materialApi.materials()[name].hyperfoam().planarTestData()
materialApi.materials()[name].mullinsEffect().planarTests(i)
PlanarTestData(...)
This method creates a PlanarTestData object.
Path
materialApi.materials()[name].hyperelastic().PlanarTestData
materialApi.materials()[name].hyperfoam().PlanarTestData
materialApi.materials()[name].mullinsEffect().PlanarTestData
Prototype
odb_PlanarTestData&
PlanarTestData(const odb_SequenceSequenceDouble& table,
               odb_Union smoothing,
               bool lateralNominalStrain,
               bool temperatureDependency,
               int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or an Int specifying the value for smoothing. If
smoothing="NONE", no smoothing is employed. The default value is "NONE".
smoothing
A Boolean specifying whether to include lateral nominal strain. The default value
is false.
lateralNominalStrain
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
For a hyperelastic material model, the table data specify the following:
•
Nominal stress, 
.
2985
PlanarTestData object

•
Nominal strain in the direction of loading, 
.
For a hyperfoam material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain in the direction of loading, 
.
•
Nominal transverse strain, 
. The default value is 0.
Return value
A PlanarTestData object.
Exceptions
None.
Members
The PlanarTestData object has members with the same names and descriptions as the arguments to the PlanarTestData
method.
Corresponding analysis keywords
•
*PLANAR TEST DATA
Abaqus Scripting Reference Guide
2986
PlanarTestData object

Plastic object
The Plastic object speciﬁes a metal plasticity model.
Access
materialApi.materials()[name].plastic()
Plastic(...)
This method creates a Plastic object.
Path
materialApi.materials()[name].Plastic
Prototype
odb_Plastic&
Plastic(const odb_SequenceSequenceDouble& table,
        const odb_String& hardening,
        bool rate,
        const odb_String& dataType,
        bool strainRangeDependency,
        int numBackstresses,
        bool temperatureDependency,
        int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of hardening. Possible values are "ISOTROPIC",
"KINEMATIC", "COMBINED", "JOHNSON_COOK", and "USER". The default value
is "ISOTROPIC".
hardening
A Boolean specifying whether the data depend on rate. The default value is false.
rate
An odb_String specifying the type of combined hardening. This argument is only valid
if hardening="COMBINED". Possible values are "HALF_CYCLE", "PARAMETERS",
and "STABILIZED". The default value is "HALF_CYCLE".
dataType
A Boolean specifying whether the data depend on strain range. This argument is only
valid if hardening="COMBINED" and dataType="STABILIZED". The default value
is false.
strainRangeDependency
An Int specifying the number of backstresses. This argument is only valid if
hardening="COMBINED". The default value is 1.
numBackstresses
2987
Plastic object

A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If hardening=ISOTROPIC, or if hardening=COMBINED and dataType=HALF_CYCLE, the table data specify the
following:
•
Yield stress.
•
Plastic strain.
•
Equivalent plastic strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=COMBINED and dataType=STABILIZED, the table data specify the following:
•
Yield stress.
•
Plastic strain.
•
Strain range, if the data depend on strain range.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=COMBINED and dataType=PARAMETERS, the table data specify the following:
•
Yield stress at zero plastic strain.
•
The ﬁrst kinematic hardening parameter, 
.
•
The ﬁrst kinematic hardening parameter, 
.
•
If applicable, the second kinematic hardening parameter, 
.
•
If applicable, the second kinematic hardening parameter, 
.
•
Etc.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If hardening=KINEMATIC, the table data specify the following:
•
Yield stress.
•
Plastic strain.
Abaqus Scripting Reference Guide
2988
Plastic object

•
Temperature, if the data depend on temperature.
If hardening=JOHNSON_COOK, the table data specify the following:
•
A.
•
B.
•
n.
•
m.
•
Melting temperature.
•
Transition temperature.
If hardening=USER, the table data specify the following:
•
Hardening properties.
Return value
A Plastic object.
Exceptions
RangeError.
Members
The Plastic object has members with the same names and descriptions as the arguments to the Plastic  method.
In addition, the Plastic object can have the following members:
Prototype
odb_RateDependent rateDependent() const;
odb_Potential potential() const;
odb_CyclicHardening cyclicHardening() const;
odb_Ornl ornl() const;
odb_CycledPlastic cycledPlastic() const;
odb_AnnealTemperature annealTemperature() const;
A RateDependent object.
rateDependent
A Potential object.
potential
A CyclicHardening object.
cyclicHardening
An Ornl object.
ornl
A CycledPlastic object.
cycledPlastic
An AnnealTemperature object.
annealTemperature
A tensileFailure object.
tensileFailure
2989
Abaqus Scripting Reference Guide
Plastic object

Corresponding analysis keywords
•
*PLASTIC
Abaqus Scripting Reference Guide
2990
Plastic object

PoreFluidExpansion object
The PoreFluidExpansion object speciﬁes the thermal expansion coefﬁcient for a hydraulic ﬂuid.
Access
materialApi.materials()[name].poreFluidExpansion()
PoreFluidExpansion(...)
This method creates a PoreFluidExpansion object.
Path
materialApi.materials()[name].PoreFluidExpansion
Prototype
odb_PoreFluidExpansion&
PoreFluidExpansion(const odb_SequenceSequenceDouble& table,
                   double zero,
                   bool temperatureDependency,
                   int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Double specifying the value of 
. The default value is 0.0.
zero
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Mean coefﬁcient of thermal expansion, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PoreFluidExpansion object.
2991
PoreFluidExpansion object

Exceptions
RangeError.
Members
The PoreFluidExpansion object has members with the same names and descriptions as the arguments to the
PoreFluidExpansion  method.
Corresponding analysis keywords
•
*EXPANSION
Abaqus Scripting Reference Guide
2992
PoreFluidExpansion object

PorousBulkModuli object
The PorousBulkModuli object deﬁnes bulk moduli for soils and rocks.
Access
materialApi.materials()[name].porousBulkModuli()
PorousBulkModuli(...)
This method creates a PorousBulkModuli object.
Path
materialApi.materials()[name].PorousBulkModuli
Prototype
odb_PorousBulkModuli&
PorousBulkModuli(const odb_SequenceSequenceDouble& table,
                 bool temperatureDependency);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
Table data
•
Bulk modulus of solid grains.
•
Bulk modulus of permeating ﬂuid.
•
Temperature, if the data depend on temperature.
Return value
A PorousBulkModuli object.
Exceptions
None.
Members
The PorousBulkModuli object has members with the same names and descriptions as the arguments to the
PorousBulkModuli  method.
2993
PorousBulkModuli object

Corresponding analysis keywords
•
*POROUS BULK MODULI
Abaqus Scripting Reference Guide
2994
PorousBulkModuli object

PorousElastic object
The PorousElastic object speciﬁes elastic material properties for porous materials.
Access
materialApi.materials()[name].porousElastic()
PorousElastic(...)
This method creates a PorousElastic object.
Path
materialApi.materials()[name].PorousElastic
Prototype
odb_PorousElastic&
PorousElastic(const odb_SequenceSequenceDouble& table,
              const odb_String& shear,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the shear deﬁnition form. Possible values are "G" and
"POISSON". The default value is "POISSON".
shear
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If shear=G, the table data specify the following:
•
The logarithmic bulk modulus, . (Dimensionless.)
•
The shear modulus, .
•
The elastic tensile limit, 
. (This value cannot be negative.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
2995
PorousElastic object

If shear=POISSON, the table data specify the following:
•
The logarithmic bulk modulus, . (Dimensionless.)
•
The Poisson's ratio, .
•
The elastic tensile limit, 
. (This value cannot be negative.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PorousElastic object.
Exceptions
RangeError.
Members
The PorousElastic object has members with the same names and descriptions as the arguments to the PorousElastic
method.
Corresponding analysis keywords
•
*POROUS ELASTIC
Abaqus Scripting Reference Guide
2996
PorousElastic object

PorousFailureCriteria object
The PorousFailureCriteria object speciﬁes the material failure criteria for a porous metal.
Access
materialApi.materials()[name].porousMetalPlasticity()\
.porousFailureCriteria()
PorousFailureCriteria(...)
This method creates a PorousFailureCriteria object.
Path
materialApi.materials()[name].porousMetalPlasticity()\
.PorousFailureCriteria
Prototype
odb_PorousFailureCriteria&
PorousFailureCriteria(double fraction,
                      double criticalFraction);
Required arguments
None.
Optional arguments
A Double specifying the void volume fraction at total failure, 
. The default
value is 1.0.
fraction
A Double specifying the critical void volume fraction, 
. The default value is
1.0.
criticalFraction
Return value
A PorousFailureCriteria object.
Exceptions
RangeError.
Members
The PorousFailureCriteria object has members with the same names and descriptions as the arguments to the
PorousFailureCriteria  method.
Corresponding analysis keywords
•
*POROUS FAILURE CRITERIA
2997
PorousFailureCriteria object

PorousMetalPlasticity object
The PorousMetalPlasticity object speciﬁes a porous metal plasticity model.
Access
materialApi.materials()[name].porousMetalPlasticity()
PorousMetalPlasticity(...)
This method creates a PorousMetalPlasticity object.
Path
materialApi.materials()[name].PorousMetalPlasticity
Prototype
odb_PorousMetalPlasticity&
PorousMetalPlasticity(const odb_SequenceSequenceDouble& table,
                      odb_Union relativeDensity,
                      bool temperatureDependency,
                      int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or a Double specifying the initial relative density of the
material, 
. The default value is "NONE".
relativeDensity
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
2998
PorousMetalPlasticity object

Return value
A PorousMetalPlasticity object.
Exceptions
RangeError.
Members
The PorousMetalPlasticity object has members with the same names and descriptions as the arguments to the
PorousMetalPlasticity  method.
In addition, the PorousMetalPlasticity object can have the following members:
Prototype
odb_PorousFailureCriteria porousFailureCriteria() const;
odb_VoidNucleation voidNucleation() const;
A PorousFailureCriteria object.
porousFailureCriteria
A VoidNucleation object.
voidNucleation
Corresponding analysis keywords
•
*POROUS METAL PLASTICITY
2999
Abaqus Scripting Reference Guide
PorousMetalPlasticity object

Potential object
The Potential object deﬁnes an anisotropic yield/creep model.
Access
materialApi.materials()[name].creep().potential()
materialApi.materials()[name].plastic().potential()
materialApi.materials()[name].viscous().potential()
Potential(...)
This method creates a Potential object.
Path
materialApi.materials()[name].creep().Potential
materialApi.materials()[name].plastic().Potential
materialApi.materials()[name].viscous().Potential
Prototype
odb_Potential&
Potential(const odb_SequenceSequenceDouble& table,
          bool temperatureDependency,
          int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
.
•
.
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
Abaqus Scripting Reference Guide
3000
Potential object

•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Potential object.
Exceptions
RangeError.
Members
The Potential object has members with the same names and descriptions as the arguments to the Potential  method.
Corresponding analysis keywords
•
*POTENTIAL
3001
Abaqus Scripting Reference Guide
Potential object

PressureEffect object
The PressureEffect object deﬁnes equivalent pressure stress driven mass diffusion.
Access
materialApi.materials()[name].diffusivity().pressureEffect()
PressureEffect(...)
This method creates a PressureEffect object.
Path
materialApi.materials()[name].diffusivity().PressureEffect
Prototype
odb_PressureEffect&
PressureEffect(const odb_SequenceSequenceDouble& table,
               bool temperatureDependency,
               int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Pressure stress factor, 
.
•
Concentration.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A PressureEffect object.
Abaqus Scripting Reference Guide
3002
PressureEffect object

Exceptions
RangeError.
Members
The PressureEffect object has members with the same names and descriptions as the arguments to the PressureEffect
method.
Corresponding analysis keywords
•
*KAPPA
3003
Abaqus Scripting Reference Guide
PressureEffect object

RateDependent object
The RateDependent object deﬁnes a rate-dependent viscoplastic model.
Access
materialApi.materials()[name].crushableFoam().rateDependent()
materialApi.materials()[name].druckerPrager().rateDependent()
materialApi.materials()[name].plastic().rateDependent()
RateDependent(...)
This method creates a RateDependent object.
Path
materialApi.materials()[name].crushableFoam().RateDependent
materialApi.materials()[name].druckerPrager().RateDependent
materialApi.materials()[name].plastic().RateDependent
Prototype
odb_RateDependent&
RateDependent(const odb_SequenceSequenceDouble& table,
              const odb_String& type,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of rate-dependent data. Possible values are
"POWER_LAW", "YIELD_RATIO", and "JOHNSON_COOK". The default value is
"POWER_LAW".
type
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=POWER_LAW, the table data specify the following:
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
Abaqus Scripting Reference Guide
3004
RateDependent object

•
Value of the second ﬁeld variable.
•
Etc.
If type=YIELD_RATIO, the table data specify the following:
•
Yield stress ratio, 
.
•
Equivalent plastic strain rate, 
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=JOHNSON_COOK, the table data specify the following:
•
.
•
.
Return value
A RateDependent object.
Exceptions
RangeError.
Members
The RateDependent object has members with the same names and descriptions as the arguments to the RateDependent
method.
Corresponding analysis keywords
•
*RATE DEPENDENT
3005
Abaqus Scripting Reference Guide
RateDependent object

Ratios object
The Ratios object speciﬁes ratios that deﬁne anisotropic swelling.
Access
materialApi.materials()[name].moistureSwelling().ratios()
materialApi.materials()[name].swelling().ratios()
Ratios(...)
This method creates a Ratios object.
Path
materialApi.materials()[name].moistureSwelling().Ratios
materialApi.materials()[name].swelling().Ratios
Prototype
odb_Ratios&
Ratios(const odb_SequenceSequenceDouble& table,
       bool temperatureDependency,
       int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
3006
Ratios object

Return value
A Ratios object.
Exceptions
RangeError.
Members
The Ratios object has members with the same names and descriptions as the arguments to the Ratios  method.
Corresponding analysis keywords
•
*RATIOS
3007
Abaqus Scripting Reference Guide
Ratios object

Regularization object
The Regularization object deﬁnes the tolerance to be used for regularizing material data.
Access
materialApi.materials()[name].regularization()
Regularization(...)
This method creates a Regularization object.
Path
materialApi.materials()[name].Regularization
Prototype
odb_Regularization&
Regularization(double rtol,
               const odb_String& strainRateRegularization);
Required arguments
None.
Optional arguments
A Double specifying the tolerance to be used for regularizing material data. The default
value is 0.03.
rtol
An odb_String specifying the form of regularization of strain-rate-dependent material
data. Possible values are "LOGARITHMIC" and "LINEAR". The default value is
"LOGARITHMIC".
strainRateRegularization
Return value
A Regularization object.
Exceptions
RangeError.
Members
The Regularization object has members with the same names and descriptions as the arguments to the Regularization
method.
Corresponding analysis keywords
•
*DASHPOT
Abaqus Scripting Reference Guide
3008
Regularization object

SaturationDependence object
The SaturationDependence object speciﬁes the dependence of the permeability of a material on the saturation of the
wetting liquid.
Access
materialApi.materials()[name].permeability().saturationDependence()
SaturationDependence(...)
This method creates a SaturationDependence object.
Path
materialApi.materials()[name].permeability().SaturationDependence
Prototype
odb_SaturationDependence&
SaturationDependence(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
. (Dimensionless.)
•
Saturation, . (Dimensionless.)
Return value
A SaturationDependence object.
Exceptions
RangeError.
Members
The SaturationDependence object has members with the same names and descriptions as the arguments to the
SaturationDependence  method.
Corresponding analysis keywords
•
*PERMEABILITY
3009
SaturationDependence object

ShearRetention object
The ShearRetention object deﬁnes the reduction of the shear modulus associated with crack surfaces in a Concrete
model as a function of the tensile strain across the crack.
Access
materialApi.materials()[name].concrete().shearRetention()
ShearRetention(...)
This method creates a ShearRetention object.
Path
materialApi.materials()[name].concrete().ShearRetention
Prototype
odb_ShearRetention&
ShearRetention(const odb_SequenceSequenceDouble& table,
               bool temperatureDependency,
               int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
 for dry concrete. The default value is 1.0.
•
 for dry concrete. The default value is a very large number (full shear retention).
•
 for wet concrete. The default value is 1.0.
•
 for wet concrete. The default value is a very large number (full shear retention).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Abaqus Scripting Reference Guide
3010
ShearRetention object

Return value
A ShearRetention object.
Exceptions
RangeError.
Members
The ShearRetention object has members with the same names and descriptions as the arguments to the ShearRetention
method.
Corresponding analysis keywords
•
*SHEAR RETENTION
3011
Abaqus Scripting Reference Guide
ShearRetention object

ShearTestData object
The ShearTestData object speciﬁes the normalized shear creep compliance or relaxation modulus as a function of time.
Access
materialApi.materials()[name].viscoelastic().shearTestData()
ShearTestData(...)
This method creates a ShearTestData object.
Path
materialApi.materials()[name].viscoelastic().ShearTestData
Prototype
odb_ShearTestData&
ShearTestData(const odb_SequenceSequenceDouble& table,
              odb_Union shrinf);
Required arguments
An odb_SequenceSequenceDouble specifying values that depend on the time member of the Viscoelastic
object.
table
If time="RELAXATION_TEST_DATA", the table data specify the following:
•
Normalized shear relaxation modulus 
. 
.
•
Time . 
.
If time="CREEP_TEST_DATA", the table data specify the following:
•
Normalized shear compliance 
. 
.
•
Time . 
.
Optional arguments
The string "NONE" or a Double specifying a normalized shear. The value of shrinf depends on the value
of the time member of the Viscoelastic object. The default value is "NONE".
shrinf
If time="RELAXATION_TEST_DATA", shrinf speciﬁes the value of the long-term, normalized shear
modulus 
.
If time="CREEP_TEST_DATA", shrinf speciﬁes the value of the long-term, normalized shear compliance
.
Return value
A ShearTestData object.
Abaqus Scripting Reference Guide
3012
ShearTestData object

Exceptions
None.
Members
The ShearTestData object has members with the same names and descriptions as the arguments to the ShearTestData
method.
Corresponding analysis keywords
•
*SHEAR TEST DATA
3013
Abaqus Scripting Reference Guide
ShearTestData object

SimpleShearTestData object
The SimpleShearTestData object provides simple shear test data.
Access
materialApi.materials()[name].hyperfoam().simpleShearTestData()
SimpleShearTestData(...)
This method creates a SimpleShearTestData object.
Path
materialApi.materials()[name].hyperfoam().SimpleShearTestData
Prototype
odb_SimpleShearTestData&
SimpleShearTestData(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
Nominal shear stress, 
.
•
Nominal shear strain, .
•
Nominal transverse stress, 
 (normal to edge with shear stress). This stress value is optional.
Return value
A SimpleShearTestData object.
Exceptions
None.
Members
The SimpleShearTestData object has members with the same names and descriptions as the arguments to the
SimpleShearTestData  method.
Corresponding analysis keywords
•
*SIMPLE SHEAR TEST DATA
Abaqus Scripting Reference Guide
3014
SimpleShearTestData object

Solubility object
The Solubility object speciﬁes solubility.
Access
materialApi.materials()[name].solubility()
Solubility(...)
This method creates a Solubility object.
Path
materialApi.materials()[name].Solubility
Prototype
odb_Solubility&
Solubility(const odb_SequenceSequenceDouble& table,
           bool temperatureDependency,
           int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Solubility.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Solubility object.
Exceptions
RangeError.
3015
Solubility object

Members
The Solubility object has members with the same names and descriptions as the arguments to the Solubility  method.
Corresponding analysis keywords
•
*SOLUBILITY
Abaqus Scripting Reference Guide
3016
Solubility object

SoretEffect object
The SoretEffect object deﬁnes temperature gradient driven mass diffusion.
Access
materialApi.materials()[name].diffusivity().soretEffect()
SoretEffect(...)
This method creates a SoretEffect object.
Path
materialApi.materials()[name].diffusivity().SoretEffect
Prototype
odb_SoretEffect&
SoretEffect(const odb_SequenceSequenceDouble& table,
            bool temperatureDependency,
            int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Soret effect factor, 
.
•
Concentration.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A SoretEffect object.
3017
SoretEffect object

Exceptions
RangeError.
Members
The SoretEffect object has members with the same names and descriptions as the arguments to the SoretEffect  method.
Corresponding analysis keywords
•
*KAPPA
Abaqus Scripting Reference Guide
3018
SoretEffect object

Sorption object
The Sorption object deﬁnes absorption and exsorption behaviors of a partially saturated porous medium in the analysis
of coupled wetting liquid ﬂow and porous medium stress.
Access
materialApi.materials()[name].sorption()
Sorption(...)
This method creates a Sorption object.
Path
materialApi.materials()[name].Sorption
Prototype
odb_Sorption&
Sorption(const odb_SequenceSequenceDouble& absorptionTable,
         const odb_String& lawAbsorption,
         bool exsorption,
         const odb_String& lawExsorption,
         double scanning,
         const odb_SequenceSequenceDouble& exsorptionTable);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
absorptionTable
Optional arguments
An odb_String specifying absorption behavior. Possible values are "LOG" and
"TABULAR". The default value is "TABULAR".
lawAbsorption
A Boolean specifying whether the exsorption data is speciﬁed. The default value is false.
exsorption
An odb_String specifying exsorption behavior. Possible values are "LOG" and
"TABULAR". The default value is "TABULAR".
lawExsorption
A Double specifying the slope of the scanning line, 
. This slope must be
positive and larger than the slope of the absorption or exsorption behaviors. The default
value is 0.0.
scanning
An odb_SequenceSequenceDouble specifying the items described below. The default
value is an empty sequence.
exsorptionTable
3019
Sorption object

Table data
If lawAbsorption=TABULAR or lawExsorption=TABULAR, the absorptionTable and exsorptionTable data respectively
specify the following:
•
Pore pressure, 
.
•
Saturation, .
If lawAbsorption=LOG or lawExsorption=LOG, the absorptionTable and exsorptionTable data respectively specify
the following:
•
A.
•
B.
•
.
•
.
Return value
A Sorption object.
Exceptions
RangeError.
Members
The Sorption object has members with the same names and descriptions as the arguments to the Sorption  method.
Corresponding analysis keywords
•
*SORPTION
Abaqus Scripting Reference Guide
3020
Sorption object

SpecificHeat object
The SpeciﬁcHeat object speciﬁes a material's speciﬁc heat.
Access
materialApi.materials()[name].specificHeat()
SpecificHeat(...)
This method creates a SpeciﬁcHeat object.
Path
materialApi.materials()[name].SpecificHeat
Prototype
odb_SpecificHeat&
SpecificHeat(const odb_SequenceSequenceDouble& table,
             const odb_String& law,
             bool temperatureDependency,
             int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the speciﬁc heat behavior. Possible values are
"CONSTANTVOLUME" and "CONSTANTPRESSURE". The default value is
"CONSTANTVOLUME".
law
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Speciﬁc heat per unit mass.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A SpeciﬁcHeat object.
3021
SpecificHeat object

Exceptions
RangeError.
Members
The SpeciﬁcHeat object has members with the same names and descriptions as the arguments to the SpeciﬁcHeat
method.
Corresponding analysis keywords
•
*SPECIFIC HEAT
Abaqus Scripting Reference Guide
3022
SpecificHeat object

SuperElasticHardening object
The SuperElasticHardening object speciﬁes the dependence of the yield stress on the total strain to deﬁne the piecewise
linear hardening of a martensite material model.
Access
materialApi.materials()[name].superElasticity()\
.superElasticHardening()
SuperElasticHardening(...)
This method creates a SuperElasticHardening object.
Path
materialApi.materials()[name].superElasticity()\
.SuperElasticHardening
Prototype
odb_SuperElasticHardening&
SuperElasticHardening(const odb_SequenceSequenceDouble& table);
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Table data
•
Yield Stress.
•
Total Strain.
Return value
A SuperElasticHardening object.
Exceptions
RangeError.
Members
The SuperElasticHardeningobject has members with the same names and descriptions as the arguments to the
SuperElasticHardening  method.
Corresponding analysis keywords
•
*SUPERELASTIC HARDENING
3023
SuperElasticHardening object

SuperElasticHardeningModifications object
The SuperElasticHardeningModiﬁcations object speciﬁes the variation of the transformation stress levels of a material
model.
Access
materialApi.materials()[name].superElasticity()\
.superElasticHardeningModifications()
SuperElasticHardeningModifications(...)
This method creates a SuperElasticHardeningModiﬁcations object.
Path
materialApi.materials()[name].superElasticity()\
.SuperElasticHardeningModifications
Prototype
odb_SuperElasticHardeningModifications&
SuperElasticHardeningModifications(const odb_SequenceSequenceDouble& table);
Required arguments
A sequence of sequences of Floats specifying the items described below or user-deﬁned data if the
dependence of the transformation stress levels on plastic strain is speciﬁed in a user subroutine.
table
Table data
•
Start of Transformation (Loading).
•
End of Transformation (Loading).
•
Start of Transformation (Unloading).
•
End of Transformation (Unloading).
•
Plastic Strain.
Return value
A SuperElasticHardeningModiﬁcations object.
Exceptions
RangeError.
Members
The SuperElasticHardeningModiﬁcations object has members with the same names and descriptions as the arguments
to the SuperElasticHardeningModiﬁcations  method.
Abaqus Scripting Reference Guide
3024
SuperElasticHardeningModifications object

Corresponding analysis keywords
•
*SUPERELASTIC HARDENING MODIFICATIONS
3025
Abaqus Scripting Reference Guide
SuperElasticHardeningModifications object

SuperElasticity object
The SuperElasticity object speciﬁes a superelastic material model.
Access
materialApi.materials()[name].superElasticity()
SuperElasticity(...)
This method creates a SuperElasticity object.
Path
materialApi.materials()[name].SuperElasticity
Prototype
odb_SuperElasticity&
SuperElasticity(const odb_SequenceSequenceDouble& table,
                             odb_Union nonassociated);
Required arguments
A sequence of sequences of Floats specifying the items described below.
table
Optional arguments
The string "NONE" or a Double specifying the volumetric transformation strain. If
nonassociated="NONE", the value of the volumetric transformation strain is equal to the
uniaxial transformation strain. The default value is "NONE".
nonassociated
Table data
•
Young's Modulus (Martensite).
•
Poisson's Ratio (Martensite).
•
Transformation Strain.
•
Start of Transformation (Loading).
•
End of Transformation (Loading).
•
Start of Transformation (Unloading).
•
End of Transformation (Unloading).
•
Start of Transformation in Compression (Loading).
•
Reference Temperature.
•
Loading.
•
Unloading.
Abaqus Scripting Reference Guide
3026
SuperElasticity object

Return value
A SuperElasticity object.
Exceptions
RangeError.
Members
The SuperElasticity object has members with the same names and descriptions as the arguments to the SuperElasticity
method.
In addition, the SuperElasticity object can have the following members:
Prototype
odb_SuperElasticHardening superElasticHardening() const;
odb_SuperElasticHardeningModifications superElasticHardeningModifications() 
const;
A SuperElasticHardening object.
superElasticHardening
A SuperElasticHardeningModiﬁcations object.
superElasticHardeningModiﬁcations
Corresponding analysis keywords
•
*SUPERELASTIC
3027
Abaqus Scripting Reference Guide
SuperElasticity object

Swelling object
The Swelling object speciﬁes time-dependent volumetric swelling for a material.
Access
materialApi.materials()[name].swelling()
Swelling(...)
This method creates a Swelling object.
Path
materialApi.materials()[name].Swelling
Prototype
odb_Swelling&
Swelling(const odb_SequenceSequenceDouble& table,
         const odb_String& law,
         bool temperatureDependency,
         int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
This argument is valid only when law="INPUT".
Optional arguments
An odb_String specifying the type of data deﬁning the swelling behavior. Possible
values are "INPUT" and "USER". The default value is "INPUT".
law
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
•
Volumetric swelling strain rate.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Swelling object.
Abaqus Scripting Reference Guide
3028
Swelling object

Exceptions
RangeError.
Members
The Swelling object has members with the same names and descriptions as the arguments to the Swelling  method.
In addition, the Swelling object can have the following member:
Prototype
odb_Ratios ratios() const;
A Ratios object.
ratios
Corresponding analysis keywords
•
*SWELLING
3029
Abaqus Scripting Reference Guide
Swelling object

TensileFailure object
The TensileFailure object speciﬁes the material tensile failure.
Access
materialApi.materials()[name].plastic().tensileFailure()
materialApi.materials()[name].eos().tensileFailure()
TensileFailure(...)
This method creates a TensileFailure object.
Path
materialApi.materials()[name].plastic().TensileFailure
materialApi.materials()[name].plastic().TensileFailure
Prototype
odb_TensileFailure&
TensileFailure(const odb_SequenceSequenceDouble& table,
                  int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
A boolean specifying whether the data depend on temperature. The default value is
OFF.
temperatureDependency
A boolean specifying whether element deletion is allowed. The default value is
True.
elementDeletion
An odb_String specifying the pressure stress. The Possible values are BRITTLE
and DUCTILE.
pressure
An odb_String specifying the deviatoric stress. Possible values are BRITTLE and
DUCTILE.
shear
Table data
•
The Hydrostatic cutoff stress (positive in tension).
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable if the data depend on ﬁeld variables.
Abaqus Scripting Reference Guide
3030
TensileFailure object

•
Value of the second ﬁeld variable.
•
Etc.
Return value
A TensileFailure object.
Exceptions
RangeError.
Members
The TensileFailure object has members with the same names and descriptions as the arguments to the TensileFailure
method.
Corresponding analysis keywords
•
*TENSILEFAILURE
3031
Abaqus Scripting Reference Guide
TensileFailure object

TensionCutOff object
The TensionCutOff object speciﬁes tension cutoff for different material models for example the Mohr-Coulomb
plasticity model.
Access
materialApi.materials()[name].mohrCoulombPlasticity().tensionCutOff()
TensionCutOff(...)
This method creates a TensionCutOff object.
Path
materialApi.materials()[name].mohrCoulombPlasticity().TensionCutOff
Prototype
odb_TensionCutOff&
TensionCutOff(const odb_SequenceSequenceDouble& table,
              bool temperatureDependency,
              int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
Tension cutoff stress.
•
The value of the corresponding tensile plastic strain.(The ﬁrst tabular value entered must always be zero.)
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A TensionCutOff object.
Abaqus Scripting Reference Guide
3032
TensionCutOff object

Exceptions
RangeError.
Members
The TensionCutOff object has members with the same names and descriptions as the arguments to the TensionCutOff
method.
Corresponding analysis keywords
•
*TENSION CUTOFF
3033
Abaqus Scripting Reference Guide
TensionCutOff object

TensionStiffening object
The TensionStiffening object deﬁnes the retained tensile stress normal to a crack in a Concrete model.
Access
materialApi.materials()[name].concrete().tensionStiffening()
TensionStiffening(...)
This method creates a TensionStiffening object.
Path
materialApi.materials()[name].concrete().TensionStiffening
Prototype
odb_TensionStiffening&
TensionStiffening(const odb_SequenceSequenceDouble& table,
                  const odb_String& type,
                  bool temperatureDependency,
                  int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying how the postcracking behavior is deﬁned. Possible values
are "DISPLACEMENT" and "STRAIN". The default value is "STRAIN".
type
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If type=STRAIN, the table data specify the following:
•
Fraction of remaining stress to stress at cracking.
•
Absolute value of the direct strain minus the direct strain at cracking.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
If type=DISPLACEMENT, the table data specify the following:
Abaqus Scripting Reference Guide
3034
TensionStiffening object

•
Displacement, 
, at which a linear loss of strength after cracking gives zero stress.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A TensionStiffening object.
Exceptions
RangeError.
Members
The TensionStiffening object has members with the same names and descriptions as the arguments to the
TensionStiffening  method.
Corresponding analysis keywords
•
*TENSION STIFFENING
3035
Abaqus Scripting Reference Guide
TensionStiffening object

TriaxialTestData object
The TriaxialTestData object provides triaxial test data.
Access
materialApi.materials()[name].druckerPrager().triaxialTestData()
TriaxialTestData(...)
This method creates a TriaxialTestData object.
Path
materialApi.materials()[name].druckerPrager().TriaxialTestData
Prototype
odb_TriaxialTestData&
TriaxialTestData(const odb_SequenceSequenceDouble& table,
                 odb_Union a,
                 odb_Union b,
                 odb_Union pt);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or a Double specifying the value of the material constant . "NONE" is used when the
value is unknown or it is not held ﬁxed at the input value. The default value is "NONE".
a
The string "NONE" or a Double specifying the value of the material constant . "NONE" is used when the
value is unknown or it is not held ﬁxed at the input value. The default value is "NONE".
b
The string "NONE" or a Double specifying the value of the material constant 
. "NONE" is used when the
value is unknown or it is not held ﬁxed at the input value. The default value is "NONE".
pt
Table data
•
Sign and magnitude of conﬁning stress, 
.
•
Sign and magnitude of the stress in loading direction, 
.
Return value
A TriaxialTestData object.
Exceptions
RangeError.
Abaqus Scripting Reference Guide
3036
TriaxialTestData object

Members
The TriaxialTestData object has members with the same names and descriptions as the arguments to the TriaxialTestData
method.
Corresponding analysis keywords
•
*TRIAXIAL TEST DATA
3037
Abaqus Scripting Reference Guide
TriaxialTestData object

Trs object
The Trs object deﬁnes the temperature-time shift for time history viscoelastic analysis.
Access
materialApi.materials()[name].viscoelastic().trs()
materialApi.materials()[name].viscosity().trs()
Trs(...)
This method creates a Trs object.
Path
materialApi.materials()[name].viscoelastic().Trs
materialApi.materials()[name].viscosity().Trs
Prototype
odb_Trs&
Trs(const odb_String& definition,
    const odb_SequenceSequenceDouble& table);
Required arguments
None.
Optional arguments
An odb_String specifying the deﬁnition of the shift function. Possible values are "WLF",
"ARRHENIUS", and "USER". The default value is "WLF".
deﬁnition
An odb_SequenceSequenceDouble specifying the items described below. The default value is
an empty sequence.
table
This argument is valid only when deﬁnition="WLF".
Table data
•
Reference temperature, 
.
•
Calibration constant, 
.
•
Calibration constant, 
.
Return value
A Trs object.
Exceptions
None.
Abaqus Scripting Reference Guide
3038
Trs object

Members
The Trs object has members with the same names and descriptions as the arguments to the Trs  method.
Corresponding analysis keywords
•
*TRS
3039
Abaqus Scripting Reference Guide
Trs object

UniaxialTestData object
The UniaxialTestData object provides uniaxial test data (compression and/or tension).
Access
materialApi.materials()[name].hyperelastic().uniaxialTestData()
materialApi.materials()[name].hyperfoam().uniaxialTestData()
materialApi.materials()[name].lowDensityFoam()\
.uniaxialCompressionTestData()
materialApi.materials()[name].lowDensityFoam().uniaxialTensionTestData()
materialApi.materials()[name].mullinsEffect().uniaxialTests(i)
UniaxialTestData(...)
This method creates a UniaxialTestData object.
Path
materialApi.materials()[name].hyperelastic().UniaxialTestData
materialApi.materials()[name].hyperfoam().UniaxialTestData
materialApi.materials()[name].lowDensityFoam().UniaxialTestData
materialApi.materials()[name].mullinsEffect().UniaxialTestData
Prototype
odb_UniaxialTestData&
UniaxialTestData(const odb_SequenceSequenceDouble& table,
                 odb_Union smoothing,
                 bool lateralNominalStrain,
                 bool temperatureDependency,
                 int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or an Int specifying the value for smoothing. If
smoothing="NONE", no smoothing is employed. The default value is "NONE".
smoothing
A Boolean specifying whether to include lateral nominal strain. The default value
is false.
lateralNominalStrain
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Abaqus Scripting Reference Guide
3040
UniaxialTestData object

Table data
For a hyperelastic material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain, 
.
For a hyperfoam material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain, 
.
•
Nominal lateral strain, 
. The default value is 0.
For a low-density foam material model, the table data specify the following:
•
Nominal stress, 
.
•
Nominal strain, 
.
•
Nominal strain rate, 
.
Return value
A UniaxialTestData object.
Exceptions
None.
Members
The UniaxialTestData object has members with the same names and descriptions as the arguments to the
UniaxialTestData  method.
Corresponding analysis keywords
•
*UNIAXIAL TEST DATA
3041
Abaqus Scripting Reference Guide
UniaxialTestData object

UserDefinedField object
The UserDeﬁnedField object redeﬁnes ﬁeld variables at a material point.
Access
materialApi.materials()[name].userDefinedField()
UserDefinedField()
This method deﬁnes a UserDeﬁnedField object.
Path
materialApi.materials()[name].UserDefinedField
Prototype
odb_UserDefinedField&
UserDefinedField();
Arguments
None.
Return value
A UserDeﬁnedField object.
Exceptions
None.
Members
The UserDeﬁnedField object has no members.
Corresponding analysis keywords
•
*USER DEFINED FIELD
Abaqus Scripting Reference Guide
3042
UserDefinedField object

UserMaterial object
The UserMaterial object deﬁnes material constants for use in subroutines UMAT, UMATHT, or VUMAT.
Access
materialApi.materials()[name].userMaterial()
UserMaterial(...)
This method creates a UserMaterial object.
Path
materialApi.materials()[name].UserMaterial
Prototype
odb_UserMaterial&
UserMaterial(const odb_String& type,
             bool unsymm,
             const odb_SequenceDouble& mechanicalConstants,
             const odb_SequenceDouble& thermalConstants);
Required arguments
None.
Optional arguments
An odb_String specifying the type of material behavior deﬁned by the command. Possible
values are "MECHANICAL", "THERMAL", and "THERMOMECHANICAL". The default
value is "MECHANICAL".
type
A Boolean specifying if the material stiffness matrix, 
, is not symmetric or, when
a thermal constitutive model is used, if 
 is not symmetric. The default value
is false.
unsymm
This argument is valid only in an Abaqus/Standard analysis.
An odb_SequenceDouble specifying the mechanical constants of the material. This argument
is valid only when type="MECHANICAL" or "THERMOMECHANICAL". The default value
is an empty sequence.
mechanicalConstants
An odb_SequenceDouble specifying the thermal constants of the material. This argument is
valid only when type="THERMAL" or "THERMOMECHANICAL". The default value is an
empty sequence.
thermalConstants
Return value
A UserMaterial object.
3043
UserMaterial object

Exceptions
RangeError.
Members
The UserMaterial object has members with the same names and descriptions as the arguments to the UserMaterial
method.
Corresponding analysis keywords
•
*USER MATERIAL
Abaqus Scripting Reference Guide
3044
UserMaterial object

UserOutputVariables object
The UserOutputVariables object speciﬁes the number of user-deﬁned output variables.
Access
materialApi.materials()[name].userOutputVariables()
UserOutputVariables(...)
This method creates a UserOutputVariables object.
Path
materialApi.materials()[name].UserOutputVariables
Prototype
odb_UserOutputVariables&
UserOutputVariables(int n);
Required arguments
None.
Optional arguments
An Int specifying the number of user-deﬁned variables required at each material point. The default value
is 0.
n
Return value
A UserOutputVariables object.
Exceptions
RangeError.
Members
The UserOutputVariables object has members with the same names and descriptions as the arguments to the
UserOutputVariables  method.
Corresponding analysis keywords
•
*USER OUTPUT VARIABLES
3045
UserOutputVariables object

VelocityDependence object
The VelocityDependence object speciﬁes the dependence of the permeability of a material on the velocity of ﬂuid
ﬂow.
Access
materialApi.materials()[name].permeability().velocityDependence()
VelocityDependence(...)
This method creates a VelocityDependence object.
Path
materialApi.materials()[name].permeability().VelocityDependence
Prototype
odb_VelocityDependence&
VelocityDependence(const odb_SequenceSequenceDouble& table);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
None.
Table data
•
. Only 
 0.0 is allowed.
•
Void ratio, .
Return value
A VelocityDependence object.
Exceptions
RangeError.
Members
The VelocityDependence object has members with the same names and descriptions as the arguments to the
VelocityDependence  method.
Corresponding analysis keywords
•
*PERMEABILITY
Abaqus Scripting Reference Guide
3046
VelocityDependence object

Viscoelastic object
The Viscoelastic object speciﬁes dissipative behavior for use with elasticity.
Access
materialApi.materials()[name].viscoelastic()
Viscoelastic(...)
This method creates a Viscoelastic object.
Path
materialApi.materials()[name].Viscoelastic
Prototype
odb_Viscoelastic&
Viscoelastic(const odb_String& domain,
           const odb_SequenceSequenceDouble& table,
           const odb_String& frequency,
           const odb_String& type,
           const odb_String& preload,
           const odb_String& time,
           double errtol,
           int nmax,
           const odb_SequenceSequenceDouble& volumetricTable);
Required arguments
An odb_String specifying the domain deﬁnition. Possible values are:
domain
•
"FREQUENCY", specifying a frequency domain. This domain is only available for an
Abaqus/Standard analysis.
•
"TIME", specifying a time domain.
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the frequency domain deﬁnition. This argument is required only when
domain="FREQUENCY". Possible values are "FORMULA", "TABULAR", "PRONY",
"CREEP_TEST_DATA", and "RELAXATION_TEST_DATA". The default value is "FORMULA".
frequency
An odb_String specifying the type. This argument is required only when domain="FREQUENCY"
and frequency="TABULAR". Possible values are "ISOTROPIC" and "TRACTION". The default
value is "ISOTROPIC".
type
An odb_String specifying the preload. This argument is required only when domain="FREQUENCY"
and frequency="TABULAR". Possible values are "NONE", "UNIAXIAL", "VOLUMETRIC", and
"UNIAXIAL_VOLUMETRIC". The default value is "NONE".
preload
3047
Viscoelastic object

An odb_String specifying the time domain deﬁnition. This argument is required only when
domain="TIME". Possible values are "PRONY", "CREEP_TEST_DATA",
"RELAXATION_TEST_DATA", and "FREQUENCY_DATA". The default value is "PRONY".
time
A Double specifying the allowable average root-mean-square error of the data points in the
least-squares ﬁt. The Float values correspond to percentages; for example, 0.01 is 1%. The default
value is 0.01.
errtol
This argument is valid only when time="CREEP_TEST_DATA", "RELAXATION_TEST_DATA"
or "FREQUENCY_DATA"; or only when frequency="CREEP_TEST_DATA" or
"RELAXATION_TEST_DATA".
An Int specifying the maximum number of terms 
 in the Prony series. The maximum value is 13.
The default value is 13.
nmax
This argument is valid only when time="CREEP_TEST_DATA", "RELAXATION_TEST_DATA"
or "FREQUENCY_DATA"; or only when frequency="CREEP_TEST_DATA" or
"RELAXATION_TEST_DATA".
An odb_SequenceSequenceDouble specifying the items described below. The default value is an
empty sequence.
volumetricTable
Table data
If frequency=FORMULA, the table data for table specify the following:
•
Real part of 
.
•
Imaginary part of 
.
•
Value of .
•
Real part of 
. If the material is incompressible, this value is ignored.
•
Imaginary part of 
. If the material is incompressible, this value is ignored.
•
Value of . If the material is incompressible, this value is ignored.
If frequency=TABULAR and type=ISOTROPIC and preload=NONE, or time=FREQUENCY_DATA the table data
for table specify the following:
•
Real part of 
.
•
Imaginary part of 
.
•
Real part of 
. If the material is incompressible, this value is ignored.
•
Imaginary part of 
. If the material is incompressible, this value is ignored.
•
Frequency  in cycles per time.
If frequency=TABULAR and type=ISOTROPIC and preload=UNIAXIAL the table data for table specify the following:
•
Loss modulus.
•
Storage modulus.
Abaqus Scripting Reference Guide
3048
Viscoelastic object

•
Frequency.
•
Uniaxial strain.
If frequency=TABULAR and type=TRACTION and preload=NONE the table data for table specify the following:
•
Normalized loss modulus.
•
Normalized shear modulus.
•
Frequency.
If frequency=TABULAR and type=TRACTION and preload=UNIAXIAL or preload=UNIAXIAL_VOLUMETRIC
the table data for table specify the following:
•
Loss modulus.
•
Storage modulus.
•
Frequency.
•
Closure.
If time=PRONY or frequency=PRONY, the table data for table specify the following:
•
, the modulus ratio in the ﬁrst term in the Prony series expansion of the shear relaxation modulus.
•
, the modulus ratio in the ﬁrst term in the Prony series expansion of the bulk relaxation modulus.
•
, the relaxation time for the ﬁrst term in the Prony series expansion.
If frequency=TABULAR and type=ISOTROPIC and preload=VOLUMETRIC or preload=UNIAXIAL_VOLUMETRIC
the table data for volumetricTable specify the following:
•
Loss modulus.
•
Storage modulus.
•
Frequency.
•
Volume ratio.
Return value
A Viscoelastic object.
Exceptions
RangeError.
Members
The Viscoelastic object has members with the same names and descriptions as the arguments to the Viscoelastic
method.
In addition, the Viscoelastic object can have the following members:
Prototype
odb_CombinedTestData combinedTestData() const;
odb_ShearTestData shearTestData() const;
odb_Trs trs() const;
odb_VolumetricTestData volumetricTestData() const;
3049
Abaqus Scripting Reference Guide
Viscoelastic object

A CombinedTestData object.
combinedTestData
A ShearTestData object.
shearTestData
A Trs object.
trs
A VolumetricTestData object.
volumetricTestData
Corresponding analysis keywords
•
*VISCOELASTIC
Abaqus Scripting Reference Guide
3050
Viscoelastic object

Viscosity object
The Viscosity object speciﬁes mechanical viscosity.
Access
materialApi.materials()[name].viscosity()
Viscosity(...)
This method creates a Viscosity object.
Path
materialApi.materials()[name].Viscosity
Prototype
odb_Viscosity&
Viscosity(const odb_SequenceSequenceDouble& table,
          const odb_String& type,
          bool temperatureDependency,
          int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the type of viscosity. The default value is
"NEWTONIAN".
type
A Boolean specifying whether the data depend on temperature. The default value
is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is
0.
dependencies
Table data
If type=NEWTONIAN, the table data specify the following:
•
Viscosity, .
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
3051
Viscosity object

Return value
A Viscosity object.
Exceptions
RangeError.
Members
The Viscosity object has members with the same names and descriptions as the arguments to the Viscosity  method.
In addition, the Viscosity object can have the following member:
Prototype
odb_Trs trs() const;
A Trs object.
trs
Corresponding analysis keywords
•
*VISCOSITY
Abaqus Scripting Reference Guide
3052
Viscosity object

Viscous object
The Viscous object speciﬁes the viscous properties for a two-layer viscoplastic material model.
Access
materialApi.materials()[name].viscous()
Viscous(...)
This method creates a Viscous object.
Path
materialApi.materials()[name].Viscous
Prototype
odb_Viscous&
Viscous(const odb_SequenceSequenceDouble& table,
        const odb_String& law,
        bool temperatureDependency,
        int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
An odb_String specifying the creep law. Possible values are "STRAIN", "TIME",
and "USER". The default value is "STRAIN".
law
A Boolean specifying whether the data depend on temperature. The default value is
false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
Table data
If law=STRAIN or law=TIME, the table data specify the following:
•
.
•
.
•
.
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
3053
Viscous object

•
Etc.
If law=USER, the table data specify the following:
•
.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A Viscous object.
Exceptions
None.
Members
The Viscous object has members with the same names and descriptions as the arguments to the Viscous  method.
In addition, the Viscous object can have the following member:
Prototype
odb_Potential potential() const;
A Potential object.
potential
Corresponding analysis keywords
•
*VISCOUS
Abaqus Scripting Reference Guide
3054
Viscous object

VoidNucleation object
The VoidNucleation object deﬁnes the nucleation of voids in a porous material.
Access
materialApi.materials()[name].porousMetalPlasticity().voidNucleation()
VoidNucleation(...)
This method creates a VoidNucleation object.
Path
materialApi.materials()[name].porousMetalPlasticity().VoidNucleation
Prototype
odb_VoidNucleation&
VoidNucleation(const odb_SequenceSequenceDouble& table,
               bool temperatureDependency,
               int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
A Boolean specifying whether the data depend on temperature. The default
value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value
is 0.
dependencies
Table data
•
, the mean value of the nucleation-strain normal distribution.
•
, the standard deviation of the nucleation-strain normal distribution.
•
, the volume fraction of nucleating voids.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A VoidNucleation object.
3055
VoidNucleation object

Exceptions
RangeError.
Members
The VoidNucleation object has members with the same names and descriptions as the arguments to the VoidNucleation
method.
Corresponding analysis keywords
•
*VOID NUCLEATION
Abaqus Scripting Reference Guide
3056
VoidNucleation object

VolumetricTestData object
The VolumetricTestData object provides volumetric test data.
Access
materialApi.materials()[name].hyperelastic().volumetricTestData()
materialApi.materials()[name].hyperfoam().volumetricTestData()
materialApi.materials()[name].viscoelastic().volumetricTestData()
VolumetricTestData(...)
This method creates a VolumetricTestData object.
Path
materialApi.materials()[name].hyperelastic().VolumetricTestData
materialApi.materials()[name].hyperfoam().VolumetricTestData
materialApi.materials()[name].viscoelastic().VolumetricTestData
Prototype
odb_VolumetricTestData&
VolumetricTestData(const odb_SequenceSequenceDouble& table,
                   odb_Union volinf,
                   odb_Union smoothing,
                   bool temperatureDependency,
                   int dependencies);
Required arguments
An odb_SequenceSequenceDouble specifying the items described below.
table
Optional arguments
The string "NONE" or a Double specifying a normalized volumetric value that depends on
the value of the time member of the Viscoelastic object. The default value is "NONE".
volinf
If time="RELAXATION_TEST_DATA", volinf speciﬁes the value of the long-term,
normalized volumetric modulus, 
.
If time="CREEP_TEST_DATA", volinf speciﬁes the value of the long-term, normalized
volumetric compliance, 
.
This argument is valid only for a viscoelastic material model.
The string "NONE" or an Int specifying the value for smoothing. If smoothing="NONE",
no smoothing is employed. The default value is "NONE".
smoothing
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
3057
VolumetricTestData object

Table data
For a hyperelastic or hyperfoam material model, the table data specify the following:
•
Pressure, .
•
Volume ratio,  (current volume/original volume).
For a viscoelastic material model, the values depend on the value of the time member of the Viscoelastic object.
If time=RELAXATION_TEST_DATA, the table data specify the following:
•
Normalized volumetric (bulk) modulus 
.
•
Time 
.
If time=CREEP_TEST_DATA, the table data specify the following:
•
Normalized volumetric (bulk) compliance 
.
•
Time 
.
Return value
A VolumetricTestData object.
Exceptions
None.
Members
The VolumetricTestData object has members with the same names and descriptions as the arguments to the
VolumetricTestData  method.
Corresponding analysis keywords
•
*VOLUMETRIC TEST DATA
Abaqus Scripting Reference Guide
3058
VolumetricTestData object

Odb commands
The C++ ODB API commands are used to read and write data from an output database (.odb) ﬁle. In this
chapter the Access and Path statements refer to a variable called odb that represents an existing Odb object.
In this section:
•
Odb object
•
AnalyticSurface object
•
AnalyticSurfaceSegment object
•
BeamOrientation object
•
FieldBulkData object
•
FieldLocation object
•
FieldOutput object
•
FieldValue object
•
HistoryOutput object
•
HistoryPoint object
•
HistoryRegion object
•
JobData object
•
OdbAssembly object
•
OdbDatumCsys object
•
OdbFrame object
•
OdbInstance object
•
OdbLoadCase object
•
OdbMeshElement object
•
OdbMeshNode object
•
OdbPart object
•
OdbPretensionSection object
•
OdbRigidBody object
•
OdbSequenceAnalyticSurfaceSegment object
•
OdbSet object
•
OdbStep object
•
RebarOrientation object
•
SectionCategory object
•
SectionPoint object
•
SectorDefinition object
•
UserData object
•
UserXYData object
•
Top level commands
3059

Odb object
The Odb object is the in-memory representation of an output database (ODB) ﬁle.
Access
odb
Odb(...)
This method creates a new Odb object.
Path
Odb
Prototype
odb_Odb&
Odb(const odb_String& name,
    const odb_String& analysisTitle,
    const odb_String& description,
    const odb_String& path);
Required arguments
An odb_String specifying the repository key.
name
Optional arguments
An odb_String specifying the title of the output database. The default value is an empty
string.
analysisTitle
An odb_String specifying the description of the output database. The default value is an
empty string.
description
An odb_String specifying the path to the ﬁle where the new output database (.odb ) ﬁle
will be written. The default value is an empty string.
path
Return value
An Odb object.
Exceptions
None.
close()
This method closes an output database.
Abaqus Scripting Reference Guide
3060
Odb object

Prototype
void
close();
Arguments
None.
Return value
None.
Exceptions
None.
getFrame(...)
This method returns the frame at the speciﬁed time, frequency, or mode. It will not interpolate values between frames.
The method is not applicable to an Odb object containing steps with different domains or to an Odb object containing
a step with load case speciﬁc data.
Prototype
odb_Frame
getFrame(double frameValue,
         odb_Enum::odb_MatchEnum match);
Required arguments
A Double specifying the value at which the frame is required. frameValue can be the
total time or frequency.
frameValue
Optional arguments
An odb_Enum::odb_MatchEnum specifying which frame to return if there is no frame at the exact frame
value. Possible values are odb_Enum::CLOSEST, odb_Enum::BEFORE, odb_Enum::AFTER, and
odb_Enum::EXACT. The default value is odb_Enum::CLOSEST.
match
When match=odb_Enum::CLOSEST, Abaqus returns the closest frame. If the frame value requested is
exactly halfway between two frames, Abaqus returns the frame after the value.
When match=odb_Enum::EXACT, Abaqus raises an exception if the exact frame value does not exist.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the exact frame is not found:
3061
Abaqus Scripting Reference Guide
Odb object

save()
This method saves output to an output database (.odb ) ﬁle.
Prototype
void
save();
Arguments
None.
Return value
None.
Exceptions
Database save failed. The database was opened as read-only. Modiﬁcation of data is
not permitted.
OdbError
update()
This method is used to update an Odb object in memory while an Abaqus analysis writes data to the associated output
database. update checks if additional steps have been written to the output database since it was opened or last
updated. If additional steps have been written to the output database, update adds them to the Odb object.
Prototype
bool
update();
Arguments
None.
Return value
A Boolean specifying whether additional steps or frames were added to the Odb object.
Exceptions
None.
hasSectorDefinition()
This method checks whether or not a valid SectorDeﬁnition object, indicating a cyclic symmetry model, is present.
Prototype
bool
hasSectorDefinition();
Abaqus Scripting Reference Guide
3062
Odb object

Arguments
None.
Return value
A Boolean specifying whether a valid sector deﬁnition is available.
Exceptions
None.
Members
The Odb object has members with the same names and descriptions as the arguments to the Odb  method.
In addition, the Odb object can have the following members:
Prototype
odb_String name() const;
               odb_String analysisTitle() const;
               odb_String description() const;
               odb_String path() const;
               bool isReadOnly() const;
               odb_Assembly& rootAssembly();
               odb_JobData jobData() const;
               odb_PartRepository& parts();
               odb_StepRepository& steps();
               odb_SectionCategoryRepository& sectionCategories();
               odb_SectorDefinition& sectorDefinition();
               odb_InteractionRepository& interactions();
               odb_InteractionPropertyRepository& interactionProperties();
               odb_ConstraintRepository& constraints();
A Boolean specifying whether the output database was opened with
read-only access.
isReadOnly
An OdbAssembly object.
rootAssembly
A JobData object.
jobData
A repository of OdbPart objects.
parts
A repository of OdbStep objects.
steps
A repository of SectionCategory objects.
sectionCategories
A SectorDeﬁnition object.
sectorDeﬁnition
A UserData object.
userData
3063
Abaqus Scripting Reference Guide
Odb object

AnalyticSurface object
The AnalyticSurface object is a geometric surface that can be described with straight and/or curved line segments.
Access
odb.parts()[name].analyticSurface()
odb.rootAssembly().instances()[name].analyticSurface()
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.analyticSurface()
Members
The AnalyticSurface object has the following members:
Prototype
odb_String name() const;
odb_String type() const;
double filletRadius() const;
odb_SequenceSequenceFloat localCoordData() const;
odb_SequenceAnalyticSurfaceSegment segments() const;
An odb_String specifying the name of the analytic surface.
name
An odb_String specifying the type of AnalyticSurface object. Possible odb_String names
are SEGMENTS, CYLINDER, and REVOLUTION.
type
A Double specifying radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
An OdbSequenceAnalyticSurfaceSegment object specifying the proﬁle associated with the
surface.
segments
An odb_SequenceSequenceFloat specifying the global coordinates of points representing
the local coordinate system, if used.
localCoordData
Abaqus Scripting Reference Guide
3064
AnalyticSurface object

AnalyticSurfaceSegment object
An individual segment of the analytic surface.
Access
odb.parts()[name].analyticSurface().segments()[i]
odb.rootAssembly().instances()[name].analyticSurface().segments()[i]
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.analyticSurface().segments()[i]
Members
The AnalyticSurfaceSegment object has the following members:
Prototype
odb_String type() const;
odb_SequenceSequenceFloat data() const;
An odb_String specifying the type of AnalyticSurfaceSegment. Possible odb_String names are START,
LINE, CIRCLE, and PARABOLA.
type
An odb_SequenceSequenceFloat specifying the coordinates of points representing the segment of the
AnalyticSurface object. If type=odb_Enum::CIRCLE, the ﬁrst row contains coordinates of the end point
data
and the second row contains coordinates of the center point. If type=odb_Enum::PARABOLA, the ﬁrst
row contains coordinates of the middle point and the second row contains coordinates of the end point.
If type=odb_Enum::START or type=odb_Enum::LINE, a single row contains coordinates of the start/end
point.
3065
AnalyticSurfaceSegment object

BeamOrientation object
The BeamOrientation object represents the direction of the ﬁrst beam section axis 
. Specifying the beam orientation
using an additional node in the element connectivity list is not supported.
Access
odb.parts()[name].beamOrientations(i)
odb.rootAssembly().instances()[name].beamOrientations(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.beamOrientations(i)
Members
The BeamOrientation object can have the following members:
Prototype
odb_Set region() const;
odb_Enum::odb_OrientationMethodEnum method() const;
odb_SequenceFloat vector() const;
An odb_Enum::odb_OrientationMethodEnum specifying the orientation assignment method.
Possible values are odb_Enum::N1_COSINES, odb_Enum::CSYS, and odb_Enum::VECT.
method
An OdbSet object specifying a region for which the beam orientation is deﬁned.
region
An odb_SequenceFloat specifying direction cosines of the 
-direction of the beam
cross-section.
vector
Abaqus Scripting Reference Guide
3066
BeamOrientation object

FieldBulkData object
The FieldBulkData object represents the entire ﬁeld data for a class of elements or nodes. All elements in a class
correspond to the same element type and material.
Access
odb.steps()[name].frames(i).fieldOutputs()[name].bulkDataBlocks(i)
Members
The FieldBulkData object can have the following members:
Prototype
odb_Enum::odb_ResultPositionEnum position() const;
               odb_Enum::odb_PrecisionEnum precision() const;
               int* elementLabels() const;
               int* nodeLabels() const;
               int* integrationPoints() const;
               odb_String baseElementType() const;
               odb_Enum::odb_ElementFaceEnum* faces() const;
               odb_Enum::odb_DataTypeEnum type() const;
               float* data() const;
               double* dataDouble() const;
               float* conjugateData() const;
               double* conjugateDataDouble() const;
               float* mises() const;
               float* localCoordSystem() const;
               double* localCoordSystemDouble() const;
               int orientationWidth() const;
               int numberOfElements() const;
               int length() const;
               int valuesPerElement() const;
               int width() const;
               const odb_Instance& instance() const;
               const odb_SectionPoint& sectionPoint() const;
               odb_SequenceString componentLabels() const;
An odb_Enum::odb_ResultPositionEnum specifying the position of the output. Possible
values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration
points.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating
results calculated at the integration points.
•
odb_Enum::ELEMENT_FACE, specifying the results obtained for surface variables
such as cavity radiation that are deﬁned for the surface facets of an element.
•
odb_Enum::CENTROID, specifying the value at the centroid obtained by extrapolating
results calculated at the integration points.
3067
FieldBulkData object

An odb_Enum::odb_PrecisionEnum specifying the precision of the output. Possible values
are:
precision
•
odb_Enum::SINGLE_PRECISION, specifying that the output is in single precision.
•
odb_Enum::DOUBLE_PRECISION, specifying that the output is in double precision.
An odb_Enum::odb_DataTypeEnum specifying the output type. Possible values are
odb_Enum::SCALAR, odb_Enum::VECTOR, odb_Enum::TENSOR_3D_FULL,
type
odb_Enum::TENSOR_3D_PLANAR, odb_Enum::TENSOR_3D_SURFACE,
odb_Enum::TENSOR_2D_PLANAR, and odb_Enum::TENSOR_2D_SURFACE.
An Int specifying the number of direction cosines necessary to specify the local coordinate
system at each output location. You use orientationWidth to read the orientation data from
the localCoordSystem.
orientationWidth
An Int specifying the number of elements in the current block of data.
numberOfElements
An Int specifying the number of output locations in the current block of data.
length
An Int specifying the number of values per element in the current block of data. If
position=odb_Enum::ELEMENT_NODAL, valuesPerElement is the number of nodes per
element for all elements in the current block of data.
valuesPerElement
An Int specifying the number of components at each output location.
width
An odb_String specifying the element type corresponding to the current block of data.
baseElementType
An OdbInstance object specifying the part to which the labels belong.
instance
A SectionPoint object specifying the section point number of the current block of data.
sectionPoint
A pointer to an array of Ints specifying the element labels of the elements in the block.
elementLabels is valid only if position =odb_Enum::INTEGRATION_POINT ,
elementLabels
odb_Enum::CENTROID , odb_Enum::ELEMENT_NODAL , or
odb_Enum::ELEMENT_FACE. If position =odb_Enum::NODAL , elementLabels returns
a NULL pointer.
A pointer to an array of Ints specifying the node labels of the nodes in the block. nodeLabels
is valid only if position =odb_Enum::NODAL or odb_Enum::ELEMENT_NODAL. If
nodeLabels
position =odb_Enum::INTEGRATION_POINT , odb_Enum::CENTROID ,
odb_Enum::ELEMENT_NODAL , or odb_Enum::ELEMENT_FACE , nodeLabels returns
a NULL pointer.
A pointer to an array of Ints specifying the integration points in the elements in the block.
integrationPoint is available only if position =odb_Enum::INTEGRATION_POINT.
integrationPoints
A pointer to an array of odb_Enum::odb_ElementFaceEnum enumerations specifying the
faces of the elements in the block. faces is available only if position
=odb_Enum::ELEMENT_FACE.
faces
Abaqus Scripting Reference Guide
3068
FieldBulkData object

A pointer to an array of Floats specifying the ﬁeld's data in the order described by type. If
type = odb_Enum::TENSOR or odb_Enum::VECTOR, data is an array containing the
data
components for each element or node in the block. If the underlying data are in double
precision, an exception will be thrown.
A pointer to an array of Doubles specifying the ﬁeld's data in the order described by type.
If type = odb_Enum::TENSOR or odb_Enum::VECTOR, data is an array containing the
dataDouble
components for each element or node in the block. If the underlying data are in single
precision, an exception will be thrown.
A pointer to an array of Floats specifying the imaginary portion of a complex result. The
order of the Floats is described bytype. If type = odb_Enum::TENSOR or
conjugateData
odb_Enum::VECTOR, conjugateData is an array containing the imaginary part of the
components for each element or node in the block. If the underlying data are in double
precision, an exception will be thrown.
A pointer to an array of Doubles specifying the imaginary portion of a complex result. The
order of the Doubles is described by type. If type = odb_Enum::TENSOR or
conjugateDataDouble
odb_Enum::VECTOR, conjugateData is an array containing the imaginary part of the
components for each element or node in the block. If the underlying data are in single
precision, an exception will be thrown.
A pointer to an array of Floats specifying the calculated von Mises stress at each output
location in the block of element data, or NULL. If validInvariants includes
mises
odb_Enum::MISES, mises returns an array pointer. If validInvariants does not include
odb_Enum::MISES, mises returns a NULL pointer. Conjugate data will be ignored in
invariant calculation.
A pointer to an array of Floats specifying the quaternion representing the local coordinate
system (the rotation from global to local) at each output location. The quaternion is returned
localCoordSystem
in the form 
, which is the reverse of that shown in Rotation variables.
localCoordSystem is available for odb_Enum::TENSOR data written in a local coordinate
system. It is also available for odb_Enum::VECTOR data for connector element outputs.
For connector element outputs the quaternion form is 
, which represents the
rotation from local to global. If the underlying data are in double precision, an exception
will be thrown.
A pointer to an array of Doubles specifying the quaternion representing the local coordinate
system (the rotation from global to local) at each output location. The quaternion is returned
localCoordSystemDouble
in the form 
, which is the reverse of that shown in Rotation variables.
localCoordSystemDouble is available for odb_Enum::TENSOR data written in a local
coordinate system. It is also available for odb_Enum::VECTOR data for connector element
outputs. For connector element outputs the quaternion form is 
, which represents
the rotation from local to global. If the underlying data are in single precision, an exception
will be thrown.
An odb_SequenceString specifying the component labels.
componentLabels
3069
Abaqus Scripting Reference Guide
FieldBulkData object

FieldLocation object
The FieldLocation object speciﬁes locations for which data are available in the ﬁeld. For example, a displacement
ﬁeld will have a FieldLocation object with a position member value of NODAL. The FieldLocation object has no
constructor; it is created automatically as an element of the location member of a FieldOutput object by the addData
method of a FieldOutput object.
Access
odb.steps()[name].frames(i).fieldOutputs()[name].locations(i)
Members
The FieldLocation object can have the following members:
Prototype
odb_Enum::odb_ResultPositionEnum position() const;
const odb_SequenceSectionPoint& sectionPoint() const;
const odb_SectionPoint& sectionPoint(int index) const;
An odb_Enum::odb_ResultPositionEnum specifying the position of the output in the element.
Possible values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration points.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating results
calculated at the integration points.
•
odb_Enum::ELEMENT_FACE.
•
odb_Enum::CENTROID, specifying the value at the centroid obtained by extrapolating results
calculated at the integration points.
A sequence of SectionPoint objects.
sectionPoint
Abaqus Scripting Reference Guide
3070
FieldLocation object

FieldOutput object
A FieldOutput object contains ﬁeld data for a speciﬁc output variable.
Access
odb.steps()[name].frames(i).fieldOutputs()[name]
FieldOutput(...)
This method creates a FieldOutput object.
Path
odb.steps()[name].frames(i).FieldOutput
Prototype
odb_FieldOutput& FieldOutput(const odb_String& name,
const odb_String& description, odb_Enum::odb_DataTypeEnum type, const
odb_SequenceString& componentLabels, const odb_SequenceInvariant&
validInvariants, bool isEngineeringTensor);
Required arguments
An odb_String specifying the output variable name.
name
An odb_String specifying the output variable. Colon (:) should not be used as a part of the ﬁeld
output description.
description
An odb_Enum::odb_DataTypeEnum specifying the output type. Possible values are
odb_Enum::SCALAR, odb_Enum::VECTOR, odb_Enum::TENSOR_3D_FULL,
type
odb_Enum::TENSOR_3D_PLANAR, odb_Enum::TENSOR_3D_SURFACE,
odb_Enum::TENSOR_2D_PLANAR, and odb_Enum::TENSOR_2D_SURFACE.
Optional arguments
An odb_SequenceString specifying the labels for each component of the value. The length of
the sequence must match the type. If type=odb_Enum::TENSOR, the default value is name
componentLabels
with the sufﬁxes ('11', '22', '33', '12', '13', '23'). If type=odb_Enum::VECTOR, the default value
is name with the sufﬁxes ('1', '2', '3'). If type=odb_Enum::SCALAR, the default value is an
empty sequence.
An odb_SequenceInvariant specifying which invariants should be calculated for this ﬁeld. An
empty sequence indicates that no invariants are valid for this ﬁeld. Possible values are:
validInvariants
•
odb_Enum::MAGNITUDE
•
odb_Enum::MISES
•
odb_Enum::TRESCA
•
odb_Enum::PRESS
3071
FieldOutput object

•
odb_Enum::INV3
•
odb_Enum::MAX_PRINCIPAL
•
odb_Enum::MID_PRINCIPAL
•
odb_Enum::MIN_PRINCIPAL
•
odb_Enum::MAX_INPLANE_PRINCIPAL
•
odb_Enum::MIN_INPLANE_PRINCIPAL
•
odb_Enum::OUTOFPLANE_PRINCIPAL
The default value is an empty sequence.
A Boolean specifying whether the ﬁeld is an engineering tensor or not. Setting
isEngineeringTensor to true makes a tensor ﬁeld behave as a strain like quantity where the
isEngineeringTensor
off-diagonal components of tensor are halved for invariants computation. This parameter applies
only to tensor ﬁeld outputs. The default value is false.
Return value
A FieldOutput object.
Exceptions
None.
FieldOutput(...)
This method creates a FieldOutput object from an existing FieldOutput object.
Path
odb.steps()[name].frames(i).FieldOutput
Prototype
odb_FieldOutput& FieldOutput(const odb_FieldOutput&
field, const odb_String& name, const odb_String&
description);
Required arguments
A FieldOutput object.
ﬁeld
Optional arguments
A String specifying the name of the FieldOutput object.
name
An odb_String specifying the output variable. Colon (:) should not be used as a part of
the ﬁeld output description.
description
Abaqus Scripting Reference Guide
3072
FieldOutput object

Return value
A FieldOutput object.
Exceptions
None.
VectorOutput(...)
This method creates a FieldOutput object.
Path
odb.steps()[ name ].frames( i ).VectorOutput
Prototype
odb_FieldOutput& VectorOutput(const odb_String& name,
const odb_String& description, int width);
Required arguments
An odb_String specifying the output variable name.
name
An odb_String specifying the output variable. Colon (:) should not be used as a part of
the ﬁeld output description.
description
An Int specifying the width of the vector.
width
Optional arguments
None.
Return value
A FieldOutput object.
Exceptions
None.
MatrixOutput(...)
This method creates a FieldOutput object.
Path
odb.steps()[ name ].frames( i ).MatrixOutput
Prototype
odb_FieldOutput& MatrixOutput(const odb_String& name,
const odb_String& description, int rows, int cols);
3073
Abaqus Scripting Reference Guide
FieldOutput object

Required arguments
An odb_String specifying the output variable name.
name
An odb_String specifying the output variable. Colon (:) should not be used as a part of
the ﬁeld output description.
description
An Int specifying the number of rows in the matrix.
rows
An Int specifying the number of columns in the matrix.
cols
Optional arguments
None.
Return value
A FieldOutput object.
Exceptions
None.
SymmetricMatrixOutput(...)
This method creates a FieldOutput object.
Path
odb.steps()[ name ].frames( i ).SymmetricMatrixOutput
Prototype
odb_FieldOutput& SymmetricMatrixOutput(const odb_String&
name, const odb_String& description, int dim);
Required arguments
An odb_String specifying the output variable name.
name
An odb_String specifying the output variable. Colon (:) should not be used as a part of
the ﬁeld output description.
description
An Int specifying the dimension of the symmetric matrix.
dim
Optional arguments
None.
Return value
A FieldOutput object.
Abaqus Scripting Reference Guide
3074
FieldOutput object

Exceptions
None.
addData(...)
This method adds data to a FieldOutput object.
Prototype
void
addData(odb_Enum::odb_ResultPositionEnum position, const odb_Instance&
instance, const odb_SequenceInt& labels, const
odb_SequenceSequenceFloat& data, const odb_SectionPoint& sectionPoint,
const odb_SequenceSequenceFloat& localCoordSystem, const
odb_SequenceSequenceFloat& conjugateData);
Required arguments
An odb_Enum::odb_ResultPositionEnum specifying the position of the output. Possible values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration points.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated
at the integration points.
•
odb_Enum::CENTROID, specifying the value at the centroid obtained by extrapolating results
calculated at the integration points.
An OdbInstance object specifying the namespace for labels.
instance
An odb_SequenceInt specifying the labels of the nodes or elements where the values in data are located.
For better performance, the node or element labels are preferred to be sorted in ascending order and
must be speciﬁed in the same order as the values provided for the data argument.
labels
An odb_SequenceSequenceFloat specifying the data values for the speciﬁed position, instance, and
labels. The values must be given in the correct order. Element nodal data follow the order of nodal
data
connectivity deﬁned in the Abaqus documentation. Integration point data follow the order deﬁned in
the Abaqus documentation. Section point data for beams and shells follow the convention given in the
Abaqus documentation. For more information, see the Abaqus Elements Guide. These data create
FieldValue objects internally.
Optional arguments
A SectionPoint object specifying the location in the section. Although sectionPoint is an optional
argument to the addData method, omitting the argument does have consequences for
sectionPoint
visualization. If you omit the argument when you are writing ﬁeld output data for a shell or a
beam, you cannot subsequently select the section point to display when you are displaying the
ﬁeld output data using the Visualization module.
3075
Abaqus Scripting Reference Guide
FieldOutput object

An odb_SequenceSequenceFloat specifying the 3 × 3 matrix of direction cosines of the local
coordinate system. This argument is available only for ﬁelds with type=odb_Enum::TENSOR
or odb_Enum::VECTOR.
localCoordSystem
User-supplied values of localCoordSystem are transposed before storing in the database.
An odb_SequenceSequenceFloat specifying the imaginary data values for the speciﬁed position,
instance, and labels. You must provide these data when you add complex ﬁelds to the output
database. The order of the values follows the conventions deﬁned in the Abaqus Elements Guide.
conjugateData
Return value
None.
Exceptions
odbException: Transformation not allowed
for scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is speciﬁed
for scalar data:
addData(...)
This method adds the data from a ﬁeld created using the getSubset method and mathematical operators to the
database. The user must create a ﬁeld to contain the new data and then use the addData method to assign the data
from the ﬁelds.
Prototype
void
addData(const odb_FieldOutput& field);
Required arguments
A FieldOutput object specifying the data to add.
ﬁeld
Optional arguments
None.
Return value
None.
Exceptions
odbException: Transformation not allowed
for scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is speciﬁed
for scalar data:
addData(...)
This method adds data to a FieldOutput object.
Abaqus Scripting Reference Guide
3076
FieldOutput object

Prototype
void
addData(odb_Enum::odb_ResultPositionEnum position, const odb_Set& set,
const odb_SequenceSequenceFloat& data, const odb_SectionPoint&
sectionPoint, const odb_SequenceSequenceFloat&
conjugateData);
Required arguments
An odb_Enum::odb_ResultPositionEnum specifying the position of the output. Possible values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration points.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated at
the integration points.
•
odb_Enum::CENTROID, specifying the value at the centroid obtained by extrapolating results calculated
at the integration points.
•
odb_Enum::ELEMENT_FACE_INTEGRATION_POINT, specifying the values calculated at the
element face integration points.
•
odb_Enum::SURFACE_INTEGRATION_POINT, specifying the values calculated at the surface
integration points. Selecting this value prompts the Visualization module to calculate the sum of the
values at the ELEMENT_FACE_INTEGRATION_POINT position from multiple surfaces.
An OdbSet object specifying the instance-level set deﬁning the region for addData. The set must be
deﬁned in the same output database as the output database into which the new ﬁeld output data is being
set
written. For better performance, the node or element labels in the set are preferred to be sorted in ascending
order and must be speciﬁed in the same order as the values provided for the data argument.
An odb_SequenceSequenceFloat specifying the data values for the speciﬁed position and labels in the set.
Each row of data provides the value at one unique position. The width of each row should match the number
data
of required components for the data. The values must be given in the order that matches the ordering of
labels in the set.
The order of the element nodal data, integration point data, and section point data for beams and shells
follows the conventions deﬁned in the Abaqus Elements Guide.
Optional arguments
A SectionPoint  object specifying the location in the section. Although sectionPoint is an optional
argument to theaddData method, omitting the argument does have consequences for visualization.
sectionPoint
If you omit the argument when you are writing ﬁeld output data for a shell or a beam, you cannot
subsequently select the section point to display when you are displaying the ﬁeld output data using
the Visualization module.
An odb_SequenceSequenceFloat specifying the imaginary data values for the speciﬁed position,
instance, and labels. You must provide this data when you add complex ﬁelds to the output
database. The order of the values follows the conventions deﬁned in the Abaqus Elements Guide.
conjugateData
3077
Abaqus Scripting Reference Guide
FieldOutput object

Return value
None.
Exceptions
odbException: Entities from multiple instances
present in set.
If you specify an odbSet containing entities from multiple
instances:
odbException: Transformation not allowed for
scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is
speciﬁed for scalar data:
addData(...)
This method adds data to a FieldOutput object.
Prototype
 void
addData(odb_Enum::odb_ResultPositionEnum position, const odb_Instance&
instance, const odb_SequenceInt& labels, const
odb_SequenceSequenceFloat& data, const odb_SectionPoint& sectionPoint,
const odb_SequenceSequenceSequenceFloat& localCoordSystem, const
odb_SequenceSequenceFloat& conjugateData); 
Required arguments
An odb_Enum::odb_ResultPositionEnum specifying the position of the output. Possible values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration points.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated
at the integration points.
•
odb_Enum::CENTROID, specifying the value at the centroid obtained by extrapolating results
calculated at the integration points.
An OdbInstance object specifying the namespace for labels.
instance
An odb_SequenceInt specifying the labels of the nodes or elements where the values in data are located.
For better performance, the node or element labels are preferred to be sorted in ascending order and
must be speciﬁed in the same order as the values provided for the data argument.
labels
An odb_SequenceSequenceFloat specifying the data values for the speciﬁed position, instance, and
labels. The values must be given in the correct order. Element nodal data follow the order of nodal
data
connectivity deﬁned in the Abaqus documentation. Integration point data follow the order deﬁned in
the Abaqus documentation. Section point data for beams and shells follow the convention given in the
Abaqus documentation. For more information, see the Abaqus Elements Guide. These data create
FieldValue objects internally.
Abaqus Scripting Reference Guide
3078
FieldOutput object

Optional arguments
A SectionPoint object specifying the location in the section. Although sectionPoint is an optional
argument to the addData method, omitting the argument does have consequences for
sectionPoint
visualization. If you omit the argument when you are writing ﬁeld output data for a shell or a
beam, you cannot subsequently select the section point to display when you are displaying the
ﬁeld output data using the Visualization module.
An odb_SequenceSequenceSequenceFloat specifying the direction cosines of the local coordinates
systems, where the sequence is the same length as data. When speciﬁed this way a different local
coordinate system applies to each data value.
localCoordSystem
User-supplied values of localCoordSystem are transposed before storing in the database.
An odb_SequenceSequenceFloat specifying the imaginary data values for the speciﬁed position,
instance, and labels. You must provide this data when you add complex ﬁelds to the output
database. The order of the values follows the conventions deﬁned in the Abaqus Elements Guide.
conjugateData
Return value
None.
Exceptions
odbException: Transformation not allowed
for scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is speciﬁed
for scalar data:
addData(...)
This method adds double precision data to a FieldOutput object.
Prototype
void
addData(odb_Enum::odb_ResultPositionEnum position, const odb_Instance&
instance, const odb_SequenceInt& labels, const
odb_SequenceSequenceDouble& data, const
odb_SequenceSequenceSequenceDouble& localCoordSystem, const
odb_SequenceSequenceDouble& conjugateData);
Required arguments
An odb_Enum::odb_ResultPositionEnum specifying the position of the output. Only
odb_Enum::NODAL, specifying the values calculated at the nodes, is supported.
position
An OdbInstance object specifying the namespace for labels.
instance
An odb_SequenceInt specifying the labels of the nodes or elements where the values in data are
located. For better performance, the node or element labels are preferred to be sorted in ascending
order and must be speciﬁed in the same order as the values provided for the data argument.
labels
3079
Abaqus Scripting Reference Guide
FieldOutput object

An odb_SequenceSequenceDouble specifying the data values for the speciﬁed position, instance,
and labels. The values must be given in the correct order. These data create FieldValue objects
internally.
data
Optional arguments
An odb_SequenceSequenceSequenceDouble specifying the direction cosines of the local
coordinates systems, where the sequence is the same length as data. When speciﬁed this way
a different local coordinate system applies to each data value.
localCoordSystem
User-supplied values of localCoordSystem are transposed before storing in the database.
An odb_SequenceSequenceDouble specifying the imaginary data values for the speciﬁed
position, instance, and labels. You must provide this data when you add complex ﬁelds to the
conjugateData
output database. The order of the values follows the conventions deﬁned in the Abaqus Elements
Guide.
Return value
None.
Exceptions
odbException: Transformation not allowed
for scalar data.
The addData method throws many exceptions of type
odbException. For example, if the local coordinate system is speciﬁed
for scalar data:
getScalarField(...)
This method generates a scalar ﬁeld containing the extracted component or calculated invariant values. The new ﬁeld
will hold values for the same nodes or elements as the parent ﬁeld. Abaqus will perform this operation on only the real
part of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Prototype
odb_FieldOutput getScalarField(odb_Enum::odb_InvariantEnum
invariant);
Required arguments
An odb_Enum::odb_InvariantEnum specifying the invariant. Possible values
areodb_Enum::MAGNITUDE, odb_Enum::MISES, odb_Enum::TRESCA, odb_Enum::PRESS,
invariant
odb_Enum::INV3, odb_Enum::MAX_PRINCIPAL, odb_Enum::MID_PRINCIPAL,
odb_Enum::MIN_PRINCIPAL, odb_Enum::MAX_INPLANE_PRINCIPAL,
odb_Enum::MIN_INPLANE_PRINCIPAL, and odb_Enum::OUTOFPLANE_PRINCIPAL.
Optional arguments
None.
Abaqus Scripting Reference Guide
3080
FieldOutput object

Return value
AFieldOutput object.
Exceptions
None.
getScalarField(...)
This method generates a scalar ﬁeld containing the extracted component or calculated invariant values. The new ﬁeld
will hold values for the same nodes or elements as the parent ﬁeld. Abaqus will perform this operation on only the real
part of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Prototype
odb_FieldOutput getScalarField(const odb_String&
componentLabel);
Required arguments
A String specifying the component label, such as “S11”.
componentLabel
Optional arguments
None.
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(odb_Enum::odb_ResultPositionEnum
position, bool readOnly);
Required arguments
None.
Optional arguments
An odb_Enum::odb_ResultPositionEnum specifying the position of the output in the element. Possible
values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
3081
Abaqus Scripting Reference Guide
FieldOutput object

•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration points.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated
at the integration points.
•
odb_Enum::CENTROID, specifying the value at the centroid obtained by extrapolating results
calculated at the integration points.
If the requested ﬁeld values are not found in the output database at the speciﬁed
odb_Enum::ELEMENT_NODAL or odb_Enum::CENTROID positions, they are extrapolated from
the ﬁeld data at the odb_Enum::INTEGRATION_POINT position.
A Boolean specifying whether the extrapolated data returned by this call is written to the output database.
The default value is false.
readOnly
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(const odb_Set&
region);
Required arguments
None.
Optional arguments
An OdbSet specifying the region for which to extract values. For better performance, the node or
element labels in the sets are preferred to be sorted in ascending order.
region
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Abaqus Scripting Reference Guide
3082
FieldOutput object

Prototype
odb_FieldOutput getSubset(const odb_SequenceSequenceFloat&
localCoordSystem);
Required arguments
None.
Optional arguments
An odb_SequenceSequenceFloat specifying the 3 × 3 matrix of direction cosines. Field
values associated with the supplied coordinate system will be extracted.
localCoordSystem
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(const odb_SectionPoint&
sectionPoint);
Required arguments
None.
Optional arguments
A SectionPoint object.
sectionPoint
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(const odb_FieldLocation&
location);
3083
Abaqus Scripting Reference Guide
FieldOutput object

Required arguments
None.
Optional arguments
A FieldLocation object.
location
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(const odb_Element&
region);
Required arguments
None.
Optional arguments
An OdbMeshElement specifying the region for which to extract values.
region
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(const odb_Node&
region);
Required arguments
None.
Abaqus Scripting Reference Guide
3084
FieldOutput object

Optional arguments
An OdbMeshNode specifying the region for which to extract values.
region
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(const odb_Instance&
region);
Required arguments
None.
Optional arguments
An OdbInstance specifying the region for which to extract values.
region
Return value
A FieldOutput object.
Exceptions
None.
getSubset(...)
A FieldOutput object with a subset of the ﬁeld values.
Prototype
odb_FieldOutput getSubset(const odb_String&
elementType);
Required arguments
None.
Optional arguments
A String specifying the element type for which to extract values. The string must
correspond to a valid Abaqus element type.
elementType
3085
Abaqus Scripting Reference Guide
FieldOutput object

Return value
A FieldOutput object.
Exceptions
None.
getTransformedField(...)
This method generates a new vector or tensor ﬁeld containing the transformed component values of the parent ﬁeld.
The new ﬁeld will hold values for the same nodes or elements as the parent ﬁeld. Results will be transformed based
on the orientations speciﬁed by the input OdbDatumCsys object. Abaqus will perform this operation on only the real
part of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Prototype
odb_FieldOutput getTransformedField(const odb_DatumCsys&
datumCsys, int projected22Axis, double projectionTol);
Required arguments
A valid OdbDatumCsys object designating the coordinate system. Valid systems can be ﬁxed
or positioned with respect to nodes on the model and can be cartesian, cylindrical, or spherical.
datumCsys
Optional arguments
An Int specifying which axis of the coordinate system will be projected as the second
component for local result orientations. Valid values are 1, 2, or 3; the default value is 2.
projected22Axis
A Double specifying the minimum allowable angle (radians) between the speciﬁed
projection axis and the element normal. The next axis will be used for projection if this
tolerance test fails.
projectionTol
Return value
A FieldOutput object.
Exceptions
odbException: Cannot apply transformation to ﬁeld
containing assembly level nodes.
The getTransformedField method throws an
exception if the ﬁeld contains any assembly level nodes.
getTransformedField(...)
This method generates a new vector or tensor ﬁeld containing the transformed component values of the parent ﬁeld.
The new ﬁeld will hold values for the same nodes or elements as the parent ﬁeld. Results will be transformed based
on the orientations speciﬁed by the input OdbDatumCsys object. Abaqus will perform this operation on only the real
part of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Abaqus Scripting Reference Guide
3086
FieldOutput object

Prototype
odb_FieldOutput getTransformedField(const odb_DatumCsys&
datumCsys, const odb_FieldOutput& deformationField, int projected22Axis,
double projectionTol);
Required arguments
A valid OdbDatumCsys object designating the coordinate system. Valid systems can be ﬁxed
or positioned with respect to nodes on the model and can be cartesian, cylindrical, or spherical.
datumCsys
Optional arguments
A FieldOutput object specifying the nodal displacement vectors required by moving
coordinate systems to determine instantaneous conﬁgurations.
deformationField
An Int specifying which axis of the coordinate system will be projected as the second
component for local result orientations. Valid values are 1, 2, or 3; the default value is 2.
projected22Axis
A Double specifying the minimum allowable angle (radians) between the speciﬁed
projection axis and the element normal. The next axis will be used for projection if this
tolerance test fails.
projectionTol
Return value
A FieldOutput object.
Exceptions
odbException: Cannot apply transformation to ﬁeld
containing assembly level nodes.
The getTransformedField method throws an
exception if the ﬁeld contains any assembly level nodes.
getTransformedField(...)
This method generates a new vector or tensor ﬁeld containing the transformed component values of the parent ﬁeld.
The new ﬁeld will hold values for the same nodes or elements as the parent ﬁeld. Results will be transformed based
on the orientations speciﬁed by the input OdbDatumCsys object. Abaqus will perform this operation on only the real
part of the FieldOutput object. The operation is not performed on the conjugate data (the imaginary portion of a complex
result).
Prototype
odb_FieldOutput getTransformedField(const odb_DatumCsys&
datumCsys, const odb_FieldOutput& deformationField, const
odb_FieldOutput& rotationField, int projected22Axis, double
projectionTol);
Required arguments
A valid OdbDatumCsys object designating the coordinate system. Valid systems can be ﬁxed
or positioned with respect to nodes on the model and can be cartesian, cylindrical, or spherical.
datumCsys
3087
Abaqus Scripting Reference Guide
FieldOutput object

Optional arguments
A FieldOutput object specifying the nodal displacement vectors required by moving
coordinate systems to determine instantaneous conﬁgurations.
deformationField
A FieldOutput object specifying the nodal rotational displacement vectors required by
moving coordinate systems that follow a 6-dof node, to determine instantaneous
conﬁgurations.
rotationField
An Int specifying which axis of the coordinate system will be projected as the second
component for local result orientations. Valid values are 1, 2, or 3; the default value is 2.
projected22Axis
A Double specifying the minimum allowable angle (radians) between the speciﬁed
projection axis and the element normal. The next axis will be used for projection if this
tolerance test fails.
projectionTol
Return value
A FieldOutput object.
Exceptions
odbException: Cannot apply transformation to ﬁeld
containing assembly level nodes.
The getTransformedField method throws an
exception if the ﬁeld contains any assembly level nodes.
getConnectorFieldXformedToNodeA(...)
This method generates a new vector ﬁeld containing the transformed component values of the parent connector ﬁeld
to the node A coordinate system. The new ﬁeld will hold values for the same connector elements as the parent ﬁeld.
Some connection types such as Axial, Link, Slip Ring, and Radial Thrust require that the deformationField be speciﬁed.
Prototype
odb_FieldOutput getConnectorFieldXformedToNodeA(const
odb_FieldOutput& deformationField) const;
Required arguments
None.
Optional arguments
A FieldOutput object specifying the nodal displacement vectors required by moving
coordinate systems to determine instantaneous conﬁgurations.
deformationField
Return value
A FieldOutput object.
Abaqus Scripting Reference Guide
3088
FieldOutput object

Exceptions
odbException: Deformation ﬁeld is required for
transforming this connector ﬁeld.
The getConnectorFieldXformedToNodeA method throws
an exception if the ﬁeld requires a deformationField and the
argument is not supplied.
setComponentLabels(...)
This method sets the component labels for the FieldOutput object.
Prototype
void
setComponentLabels(const odb_SequenceString&
componentLabels);
Required arguments
An odb_SequenceString specifying the labels for each component of the value. The length of
the sequence must match the type. If type=odb_Enum::TENSOR, the default value is name with
componentLabels
the sufﬁxes ('11', '22', '33', '12', '13', '23'). If type=odb_Enum::VECTOR, the default value is
name with the sufﬁxes ('1', '2', '3'). If type=odb_Enum::SCALAR, the default value is an empty
sequence.
Return value
None.
Exceptions
None.
setDataType(...)
This method sets the data type of a FieldOutput object.
Prototype
void
setDataType(odb_Enum::odb_DataTypeEnum type);
Required arguments
An odb_Enum::odb_DataTypeEnum specifying the output type. Possible values are odb_Enum::SCALAR,
odb_Enum::VECTOR, odb_Enum::TENSOR_3D_FULL, odb_Enum::TENSOR_3D_PLANAR,
type
odb_Enum::TENSOR_3D_SURFACE, odb_Enum::TENSOR_2D_PLANAR, and
odb_Enum::TENSOR_2D_SURFACE.
Return value
None.
3089
Abaqus Scripting Reference Guide
FieldOutput object

Exceptions
None.
setValidInvariants(...)
This method sets the invariants valid for the FieldOutput object.
Prototype
void
setValidInvariants(const odb_SequenceInvariant&
validInvariants);
Required arguments
An odb_SequenceInvariant specifying which invariants should be calculated for this ﬁeld. An empty
sequence indicates that no invariants are valid for this ﬁeld. Possible values are:
validInvariants
•
odb_Enum::MAGNITUDE
•
odb_Enum::MISES
•
odb_Enum::TRESCA
•
odb_Enum::PRESS
•
odb_Enum::INV3
•
odb_Enum::MAX_PRINCIPAL
•
odb_Enum::MID_PRINCIPAL
•
odb_Enum::MIN_PRINCIPAL
•
odb_Enum::MAX_INPLANE_PRINCIPAL
•
odb_Enum::MIN_INPLANE_PRINCIPAL
•
odb_Enum::OUTOFPLANE_PRINCIPAL
The default value is an empty sequence.
Return value
None.
Exceptions
None.
Members
The FieldOutput object has members with the same names and descriptions as the arguments to the FieldOutput
method.
In addition, the FieldOutput object can have the following members:
Prototype
odb_String name() const; odb_String description() const;
odb_Enum::odb_DataTypeEnum type() const; odb_Enum::odb_DataSubtypeEnum
Abaqus Scripting Reference Guide
3090
FieldOutput object

subtype() const; int dim() const; int dim2() const; bool isComplex() const;
odb_SequenceInvariant validInvariants() const; odb_SequenceString
componentLabels() const; odb_SequenceString baseElementTypes() const; const
odb_SequenceFieldLocation& locations() const; odb_FieldLocation
locations(int index) const; const odb_FieldValue values(int i);
odb_SequenceFieldValue values(); const odb_FieldBulkData&
bulkDataBlocks(int i); odb_SequenceFieldBulkData&
bulkDataBlocks();
An Int specifying the dimension of vector or the ﬁrst dimension (number of rows) of
matrix.
dim
An Int specifying the second dimension (number of columns) of matrix.
dim2
A Boolean specifying whether the data are complex.
isComplex
A sequence of FieldLocation objects.
locations
A sequence of FieldValue objects specifying the order of the objects in the array is
determined by the Abaqus Scripting Interface; see the data argument to the addData
method for a description of the order.
values
A sequence of FieldBulkData objects.
bulkDataBlocks
3091
Abaqus Scripting Reference Guide
FieldOutput object

FieldValue object
The FieldValue object represents the ﬁeld data at a point. The FieldValue object has no constructor; it is created by
the Odb object when data are added to the FieldOutput object using the addData method. For faster, bulk-data access,
see Using bulk data access to an output database.
Access
odb.steps()[name].frames(i).fieldOutputs()[name].values(i)
Members
The FieldValue object has the following members:
Prototype
odb_Enum::odb_ResultPositionEnum position() const;
const odb_Instance& instance() const;
int elementLabel() const;
int nodeLabel() const;
int integrationPoint() const;
odb_Enum::odb_ElementFaceEnum face() const;
odb_SectionPoint sectionPoint() const;
odb_Enum::odb_PrecisionEnum precision() const;
odb_Enum::odb_DataTypeEnum type() const;
const float* data(int& numVal) const;
odb_SequenceFloat data() const;
const float* conjugateData(int& numVal) const;
odb_SequenceFloat conjugateData() const;
const double* dataDouble(int& numVal) const;
odb_SequenceDouble dataDouble() const;
const double* conjugateDataDouble(int& numVal) const;
odb_SequenceDouble conjugateDataDouble() const;
odb_SequenceSequenceFloat localCoordSystem() const;
odb_SequenceSequenceDouble localCoordSystemDouble() const;
float magnitude() const;
float mises() const;
float tresca() const;
float press() const;
float inv3() const;
float maxPrincipal() const;
float midPrincipal() const;
float minPrincipal() const;
float maxInPlanePrincipal() const;
float minInPlanePrincipal() const;
float outOfPlanePrincipal() const;
An odb_Enum::odb_ResultPositionEnum specifying the position of the output in the
element. Possible values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration
points.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating
results calculated at the integration points.
Abaqus Scripting Reference Guide
3092
FieldValue object

•
odb_Enum::ELEMENT_FACE, specifying the results obtained for surface variables
such as cavity radiation that are deﬁned for the surface facets of an element.
•
odb_Enum::CENTROID, specifying the value at the centroid obtained by extrapolating
results calculated at the integration points.
An odb_Enum::odb_PrecisionEnum specifying the precision of the output in the element.
Possible values are:
precision
•
odb_Enum::SINGLE_PRECISION, specifying that the output values are in single
precision.
•
odb_Enum::DOUBLE_PRECISION, specifying that the output values are in double
precision.
An Int specifying the element label of the element containing the location. elementLabel
is available only if position=odb_Enum::INTEGRATION_POINT, odb_Enum::CENTROID,
odb_Enum::ELEMENT_NODAL, or odb_Enum::ELEMENT_FACE.
elementLabel
An Int specifying the node label of the node containing the location. nodelabel is available
only if position=odb_Enum::ELEMENT_NODAL or odb_Enum::NODAL.
nodeLabel
An Int specifying the integration point in the element. integrationPoint is available only if
position=odb_Enum::INTEGRATION_POINT.
integrationPoint
An odb_Enum::odb_ElementFaceEnum specifying the face of the element. face is available
only if position=odb_Enum::ELEMENT_FACE.
face
An odb_Enum::odb_DataTypeEnum specifying the output type. Possible values are
odb_Enum::SCALAR, odb_Enum::VECTOR, odb_Enum::TENSOR_3D_FULL,
type
odb_Enum::TENSOR_3D_PLANAR, odb_Enum::TENSOR_3D_SURFACE,
odb_Enum::TENSOR_2D_PLANAR, and odb_Enum::TENSOR_2D_SURFACE.
A Float specifying the length or magnitude of the vector. magnitude is valid only when
type=odb_Enum::VECTOR.
magnitude
A Float specifying the calculated von Mises stress. The value is valid only when the
validInvariants member includes odb_Enum::MISES; otherwise, the value is indeterminate.
Conjugate data will be ignored in invariant calculation.
mises
A Float specifying the calculated Tresca stress. The value is valid only when the
validInvariants member includes odb_Enum::TRESCA; otherwise, the value is
indeterminate. Conjugate data will be ignored in invariant calculation.
tresca
A Float specifying the calculated pressure stress. The value is valid only when the
validInvariants member includes odb_Enum::PRESS; otherwise, the value is indeterminate.
Conjugate data will be ignored in invariant calculation.
press
A Float specifying the calculated third stress invariant. The value is valid only when the
validInvariants member includes odb_Enum::INV3; otherwise, the value is indeterminate.
Conjugate data will be ignored in invariant calculation.
inv3
3093
Abaqus Scripting Reference Guide
FieldValue object

A Float specifying the calculated maximum principal stress. The value is valid only when
the validInvariants member includes odb_Enum::MAX_PRINCIPAL; otherwise, the value
is indeterminate. Conjugate data will be ignored in invariant calculation.
maxPrincipal
A Float specifying the calculated intermediate principal stress. The value is valid only when
the validInvariants member includes odb_Enum::MID_PRINCIPAL; otherwise, the value
is indeterminate. Conjugate data will be ignored in invariant calculation.
midPrincipal
A Float specifying the minimum principal stress. The value is valid only when the
validInvariants member includes odb_Enum::MIN_PRINCIPAL; otherwise, the value is
indeterminate. Conjugate data will be ignored in invariant calculation.
minPrincipal
A Float specifying the maximum principal in-plane stress. The value is valid only when
the validInvariants member includes odb_Enum::MAX_INPLANE_PRINCIPAL; otherwise,
the value is indeterminate. Conjugate data will be ignored in invariant calculation.
maxInPlanePrincipal
A Float specifying the calculated minimum principal in-plane stress. The value is valid
only when the validInvariants member includes odb_Enum::MIN_INPLANE_PRINCIPAL;
otherwise, the value is indeterminate. Conjugate data will be ignored in invariant calculation.
minInPlanePrincipal
A Float specifying the calculated principal out-of-plane stress. The value is valid only when
the validInvariants member includes odb_Enum::OUTOFPLANE_PRINCIPAL; otherwise,
the value is indeterminate. Conjugate data will be ignored in invariant calculation.
outOfPlanePrincipal
An OdbInstance object specifying the part to which the labels belong.
instance
A SectionPoint object.
sectionPoint
An odb_SequenceSequenceFloat specifying the 3 × 3 matrix of Floats specifying the
direction cosines of the local coordinate system (the rotation from global to local). Each
localCoordSystem
sequence represents a row in the direction cosine matrix. localCoordSystem is available
for odb_Enum::TENSOR data written in a local coordinate system. It is also available for
odb_Enum::VECTOR data for connector element outputs. For connector element outputs,
the rotation is from local to global. If the underlying data are in double precision, an
exception will be thrown.
An odb_SequenceSequenceDouble specifying the 3 × 3 matrix of Doubles specifying the
direction cosines of the local coordinate system (the rotation from global to local). Each
localCoordSystemDouble
sequence represents a row in the direction cosine matrix. localCoordSystemDouble is
available for odb_Enum::TENSOR data written in a local coordinate system. It is also
available for odb_Enum::VECTOR data for connector element outputs. For connector
element outputs the rotation is from local to global. If the underlying data are in single
precision, an exception will be thrown.
A pointer to an array of Floats specifying data in the form described by type. If
type=odb_Enum::TENSOR or odb_Enum::VECTOR, data is a sequence containing the
components. If the underlying data are in double precision an exception will be thrown.
data
Abaqus Scripting Reference Guide
3094
FieldValue object

A pointer to an array of Doubles specifying data in the form described by type. If
type=odb_Enum::TENSOR or odb_Enum::VECTOR, data is a sequence containing the
components. If the underlying data are in single precision, an exception will be thrown.
dataDouble
A pointer to an array of Floats specifying data in the form described by type. If
type=odb_Enum::TENSOR or odb_Enum::VECTOR, conjugateData is a sequence
conjugateData
containing the components. If the underlying data are in double precision, an exception
will be thrown.
A pointer to an array of Doubles specifying data in the form described by type. If
type=odb_Enum::TENSOR or odb_Enum::VECTOR, conjugateData is a sequence
conjugateDataDouble
containing the components. If the underlying data are in single precision, an exception will
be thrown.
3095
Abaqus Scripting Reference Guide
FieldValue object

HistoryOutput object
The HistoryOutput object contains the history output at a point for the speciﬁed variable.
Access
odb.steps()[name].historyRegions()[name].historyOutputs()[name]
HistoryOutput(...)
This method creates a HistoryOutput object.
Path
odb.steps()[name].historyRegions()[name].HistoryOutput
Prototype
odb_HistoryOutput&
HistoryOutput(const odb_String& name,
              const odb_String& description,
              odb_Enum::odb_DataTypeEnum type,
              const odb_SequenceInvariant& validInvariants);
Required arguments
An odb_String specifying the output variable name.
name
An odb_String specifying the output variable.
description
An odb_Enum::odb_DataTypeEnum specifying the output type. Only
odb_Enum::SCALAR is currently supported.
type
Optional arguments
An odb_SequenceInvariant specifying which invariants should be calculated for this ﬁeld. Possible
values are odb_Enum::MAGNITUDE, odb_Enum::MISES, odb_Enum::TRESCA,
validInvariants
odb_Enum::PRESS, odb_Enum::INV3, odb_Enum::MAX_PRINCIPAL,
odb_Enum::MID_PRINCIPAL, and odb_Enum::MIN_PRINCIPAL. The default value is an
empty sequence.
Return value
A HistoryOutput object.
Exceptions
None.
addData(...)
This method adds data to the data member of the HistoryOutput object.
Abaqus Scripting Reference Guide
3096
HistoryOutput object

Prototype
void
addData(double frame,
        double value);
Required arguments
A Double specifying the frame value. frame can be speciﬁed in step time, frequency, or mode
number.
frame
A Double specifying the value of the variable at the frame value speciﬁed in frame.
value
Optional arguments
None.
Return value
None.
Exceptions
None.
addData(...)
This method adds data to the data member of the HistoryOutput object.
Prototype
void
addData(const odb_SequenceFloat& frame,
        const odb_SequenceFloat& value);
Required arguments
An odb_SequenceFloat specifying the frame values. frame can be speciﬁed in step time,
frequency, or mode number.
frame
An odb_SequenceFloat specifying the value of the variable at the frame values speciﬁed in
frame.
value
Optional arguments
None.
Return value
None.
Exceptions
If the length of frame is not the same as the length of value a ValueError is raised.
3097
Abaqus Scripting Reference Guide
HistoryOutput object

addData(...)
This method adds data to the data member of the HistoryOutput object.
Prototype
void
addData(const odb_SequenceSequenceFloat& data);
Required arguments
An odb_SequenceSequenceFloat specifying the pairs (frameValue, value) where frameValue is either
time, frequency, or mode and value is the value of the speciﬁed variable at frameValue. (This value
depends on the type of the variable.)
data
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The HistoryOutput object has members with the same names and descriptions as the arguments to the HistoryOutput
method.
In addition, the HistoryOutput object has the following members:
Prototype
odb_String name() const;
odb_String description() const;
odb_SequenceSequenceFloat data() const;
odb_SequenceSequenceFloat conjugateData() const;
An odb_SequenceSequenceFloat specifying the pairs (frameValue, value) where frameValue is
either time, frequency, or mode and value is the value of the speciﬁed variable at frameValue.
(This value depends on the type of the variable.)
data
An odb_SequenceSequenceFloat specifying the imaginary portion of a speciﬁed complex variable
at each frame value (time, frequency, or mode). The pairs have the form (frameValue, value).
conjugateData
Abaqus Scripting Reference Guide
3098
HistoryOutput object

HistoryPoint object
The HistoryPoint object speciﬁes the point at which history data will be collected. The HistoryPoint object is a temporary
object used as an argument to the HistoryRegion method.
Access
odb.steps()[name].historyRegions()[name].point()
HistoryPoint(...)
This method creates a HistoryPoint object for a node.
Path
HistoryPoint
Prototype
odb_HistoryPoint&
HistoryPoint(const odb_Node& node);
Required arguments
An OdbMeshNode object specifying the node for which the data are to be collected.
node
Optional arguments
None.
Return value
A HistoryPoint object.
Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for an element.
Path
odb.steps()[name].historyRegions()[name].HistoryPoint
Prototype
odb_HistoryPoint&
HistoryPoint(const odb_Element& element,
             int ipNumber,
             const odb_SectionPoint& sectionPoint,
             odb_Enum::odb_ElementFaceEnum face,
             const odb_Node& node);
3099
HistoryPoint object

Required arguments
An OdbMeshElement object specifying the element for which the data are to be collected.
element
Optional arguments
An Int specifying the integration point. This argument is used to deﬁne a history output position of
odb_Enum::INTEGRATION_POINT or odb_Enum::ELEMENT_FACE_INTEGRATION_POINT.
The default value is 0.
ipNumber
A SectionPoint object.
sectionPoint
An odb_Enum::odb_ElementFaceEnum specifying the element face. This argument is used to deﬁne
a history output position of odb_Enum::ELEMENT_FACE or
odb_Enum::ELEMENT_FACE_INTEGRATION_POINT. Possible values are:
face
•
odb_Enum::FACE_UNKOWN, specifying this value indicates that no value has been speciﬁed.
•
odb_Enum::FACE1, specifying this value indicates that element face 1 has been speciﬁed.
•
odb_Enum::FACE2, specifying this value indicates that element face 2 has been speciﬁed.
•
odb_Enum::FACE3, specifying this value indicates that element face 3 has been speciﬁed.
•
odb_Enum::FACE4, specifying this value indicates that element face 4 has been speciﬁed.
•
odb_Enum::FACE5, specifying this value indicates that element face 5 has been speciﬁed.
•
odb_Enum::FACE6, specifying this value indicates that element face 6 has been speciﬁed.
•
odb_Enum::SIDE1, specifying this value indicates that element side 1 has been speciﬁed.
•
odb_Enum::SIDE2, specifying this value indicates element side 2 has been speciﬁed.
•
odb_Enum::END1, specifying this value indicates that element end 1 has been speciﬁed.
•
odb_Enum::END2, specifying this value indicates that element end 2 has been speciﬁed.
•
odb_Enum::END3, specifying this value indicates that element end 3 has been speciﬁed.
The default value is odb_Enum::FACE_UNKNOWN.
An OdbMeshNode object specifying the node for which the data are to be collected.
node
Return value
A HistoryPoint object.
Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for a region.
Path
odb.steps()[name].historyRegions()[name].HistoryPoint
Abaqus Scripting Reference Guide
3100
HistoryPoint object

Prototype
odb_HistoryPoint&
HistoryPoint(const odb_Set& region);
Required arguments
An OdbSet object specifying the region for which the data are to be collected.
region
Optional arguments
None.
Return value
A HistoryPoint object.
Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for the OdbAssembly object.
Path
odb.steps()[name].historyRegions()[name].HistoryPoint
Prototype
odb_HistoryPoint&
HistoryPoint(const odb_Assembly& assembly);
Required arguments
An OdbAssembly object specifying the assembly for which the data are to be collected.
assembly
Optional arguments
None.
Return value
A HistoryPoint object.
Exceptions
None.
HistoryPoint(...)
This method creates a HistoryPoint object for the OdbInstance object.
3101
Abaqus Scripting Reference Guide
HistoryPoint object

Path
odb.steps()[name].historyRegions()[name].HistoryPoint
Prototype
odb_HistoryPoint&
HistoryPoint(const odb_Instance& instance);
Required arguments
An OdbInstance object specifying the instance for which the data are to be collected.
instance
Optional arguments
None.
Return value
A HistoryPoint object.
Exceptions
None.
Members
The HistoryPoint object has members with the same names and descriptions as the arguments to the HistoryPoint
method.
In addition, the HistoryPoint object can have the following members:
Prototype
odb_Node node() const;
odb_Element element() const;
int ipNumber() const;
odb_Enum::odb_ElementFaceEnum face() const;
odb_Enum::odb_ResultPositionEnum position() const;
odb_SectionPoint sectionPoint() const;
const odb_Set& region() const;
const odb_Instance& instance() const;
const odb_Assembly& assembly() const;
An Int specifying the integration point. This argument is used to deﬁne a history output position of
odb_Enum::INTEGRATION_POINT or odb_Enum::ELEMENT_FACE_INTEGRATION_POINT.
The default value is 0.
ipNumber
An odb_Enum::odb_ElementFaceEnum specifying the element face. This argument is used to deﬁne
a history output position of odb_Enum::ELEMENT_FACE or
odb_Enum::ELEMENT_FACE_INTEGRATION_POINT. Possible values are:
face
•
odb_Enum::FACE_UNKOWN, specifying this value indicates that no value has been speciﬁed.
•
odb_Enum::FACE1, specifying this value indicates that element face 1 has been speciﬁed.
•
odb_Enum::FACE2, specifying this value indicates that element face 2 has been speciﬁed.
Abaqus Scripting Reference Guide
3102
HistoryPoint object

•
odb_Enum::FACE3, specifying this value indicates that element face 3 has been speciﬁed.
•
odb_Enum::FACE4, specifying this value indicates that element face 4 has been speciﬁed.
•
odb_Enum::FACE5, specifying this value indicates that element face 5 has been speciﬁed.
•
odb_Enum::FACE6, specifying this value indicates that element face 6 has been speciﬁed.
•
odb_Enum::SIDE1, specifying this value indicates that element side 1 has been speciﬁed.
•
odb_Enum::SIDE2, specifying this value indicates element side 2 has been speciﬁed.
•
odb_Enum::END1, specifying this value indicates that element end 1 has been speciﬁed.
•
odb_Enum::END2, specifying this value indicates that element end 2 has been speciﬁed.
•
odb_Enum::END3, specifying this value indicates that element end 3 has been speciﬁed.
The default value is odb_Enum::FACE_UNKNOWN.
An odb_Enum::odb_ResultPositionEnum specifying the result position of the history point. Possible
values are:
position
•
odb_Enum::NODAL, specifying the values calculated at the nodes.
•
odb_Enum::ELEMENT_NODAL, specifying the values obtained by extrapolating results calculated
at the integration points.
•
odb_Enum::INTEGRATION_POINT, specifying the values calculated at the integration points.
•
odb_Enum::ELEMENT_FACE, specifying the results obtained for surface variables such as cavity
radiation that are deﬁned for the surface facets of an element.
•
odb_Enum::ELEMENT_FACE_INTEGRATION_POINT, specifying the results obtained for
surface variables such as cavity radiation that are deﬁned for the surface facets of an element when
the surface facets have integration points.
•
odb_Enum::WHOLE_ELEMENT, specifying the results obtained for whole element variables.
•
odb_Enum::WHOLE_REGION, specifying the results for an entire region of the model.
•
odb_Enum::WHOLE_PART_INSTANCE, specifying the results for an entire part instance of the
model.
•
odb_Enum::WHOLE_MODEL, specifying the results for the entire model.
An OdbMeshElement object specifying the element for which the data are to be collected.
element
A SectionPoint object.
sectionPoint
An OdbSet object specifying the region for which the data are to be collected.
region
An OdbAssembly object specifying the assembly for which the data are to be collected.
assembly
An OdbInstance object specifying the instance for which the data are to be collected.
instance
3103
Abaqus Scripting Reference Guide
HistoryPoint object

HistoryRegion object
The HistoryRegion object contains history data for a single location in the model.
Access
odb.steps()[name].historyRegions()[name]
HistoryRegion(...)
This method creates a HistoryRegion object.
Path
odb.steps()[name].HistoryRegion
Prototype
odb_HistoryRegion&
HistoryRegion(const odb_String& name,
              const odb_String& description,
              const odb_HistoryPoint& point,
              const odb_LoadCase& loadCase);
Required arguments
An odb_String specifying the name of the HistoryRegion object.
name
An odb_String specifying the description of the HistoryRegion object.
description
A HistoryPoint object specifying the point to which the history data refer.
point
Optional arguments
An OdbLoadCase object specifying the load case associated with the HistoryRegion
object.
loadCase
Return value
A HistoryRegion object.
Exceptions
None.
getSubset(...)
This method returns a subset of the data in the HistoryRegion object.
Abaqus Scripting Reference Guide
3104
HistoryRegion object

Prototype
odb_HistoryRegion
getSubset(const odb_String& variableName);
Required arguments
A String specifying the name of the output variable to return.
variableName
Optional arguments
None.
Return value
A HistoryRegion object.
Exceptions
None.
getSubset(...)
This method returns a subset of the data in the HistoryRegion object.
Prototype
odb_HistoryRegion
getSubset(float start);
Required arguments
A Float specifying the start of the subset. This is the same as the ﬁrst item in the data array member
of the HistoryOutput object.
start
Optional arguments
None.
Return value
A HistoryRegion object.
Exceptions
None.
getSubset(...)
This method returns a subset of the data in the HistoryRegion object.
3105
Abaqus Scripting Reference Guide
HistoryRegion object

Prototype
odb_HistoryRegion
getSubset(float start,
          float end);
Required arguments
A Float specifying the start of the subset. This is the same as the ﬁrst item in the data array
member of the HistoryOutput object.
start
A Float specifying the end of the subset.
end
Optional arguments
None.
Return value
A HistoryRegion object.
Exceptions
None.
Members
The HistoryRegion object has members with the same names and descriptions as the arguments to the HistoryRegion
method.
In addition, the HistoryRegion object can have the following members:
Prototype
odb_String description() const;
const odb_LoadCase& loadCase() const;
odb_String name() const;
odb_HistoryPoint point() const;
odb_Enum::odb_ResultPositionEnum position() const;
const odb_HistoryOutputRepository& historyOutputs();
An odb_Enum::odb_ResultPositionEnum specifying the position of the history output.
Possible values are odb_Enum::NODAL, odb_Enum::INTEGRATION_POINT,
position
odb_Enum::WHOLE_ELEMENT, odb_Enum::WHOLE_REGION, and
odb_Enum::WHOLE_MODEL.
A repository of HistoryOutput objects.
historyOutputs
Abaqus Scripting Reference Guide
3106
HistoryRegion object

JobData object
The JobData object describes the context in which the analysis was run.
Access
odb.jobData()
Members
The JobData object has the following members:
Prototype
odb_String name() const; 
            odb_String analysisCode() const; 
            odb_String version() const; 
            odb_String dateRun() const; 
            odb_String machineName() const; 
            odb_String precision() const;
An odb_String specifying the name of the job.
name
An odb_Enum::odb_AnalysisCodeEnum specifying the analysis code. Possible values
are odb_Enum::ABAQUS_STANDARD, odb_Enum::ABAQUS_EXPLICIT, and
odb_Enum::UNKNOWN_ANALYSIS_CODE.
analysisCode
An odb_Enum::odb_PrecisionEnum specifying the precision. Only
odb_Enum::SINGLE_PRECISION is currently supported. Possible values are
odb_Enum::DOUBLE_PRECISION and odb_Enum::SINGLE_PRECISION.
precision
An odb_String specifying the release of the analysis code.
version
An odb_String specifying the date and time at which the analysis was run.
creationTime
An odb_String specifying the date and time at which the database was last modiﬁed.
modiﬁcationTime
An odb_String specifying the name of the machine on which the analysis was run.
machineName
An odb_String specifying an odb_Sequence of productAddOns. Possible values are:
Possible values are odb_Enum::AQUA, odb_Enum::DESIGN, odb_Enum::BIORID,
odb_Enum::CEL, odb_Enum::SOLITER, and odb_Enum::CAVPARALLEL.
productAddOns
3107
JobData object

OdbAssembly object
The OdbAssembly object has no constructor; it is created automatically when an Odb object is created. Abaqus creates
the rootAssembly member when an Odb object is created.
Access
odb.rootAssembly()
ConnectorOrientation(...)
This method assigns a connector orientation to a connector region.
Prototype
void
ConnectorOrientation(const odb_Set& region,
                     const odb_DatumCsys& csys1,
                     odb_Enum::odb_AxisEnum axis1,
                     float angle1,                     
                     const odb_DatumCsys& csys2,
                     odb_Enum::odb_AxisEnum axis2,
                     float angle2);
Required arguments
An OdbSet specifying a region.
region
An OdbDatumCsys object specifying the ﬁrst connector node local coordinate system.
csys1
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation of the ﬁrst connector node is applied. Possible values
are odb_Enum::AXIS_1, odb_Enum::AXIS_2, and odb_Enum::AXIS_3.
axis1
A Float specifying the angle of the additional rotation about the ﬁrst connector node axis. The
default value is 0.0.
angle1
An OdbDatumCsys object specifying the second connector node local coordinate system.
csys2
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation of the second connector node is applied. Possible
values are odb_Enum::AXIS_1, odb_Enum::AXIS_2, and odb_Enum::AXIS_3.
axis2
A Float specifying the angle of the additional rotation about the second connector node axis.
angle2
Return value
None.
Exceptions
OdbError: Connector orientation assignment requires element set.
If region is not an element set:
Abaqus Scripting Reference Guide
3108
OdbAssembly object

ConnectorOrientation(...)
This method assigns a connector orientation to a connector region.
Prototype
void
ConnectorOrientation(const odb_Set& region,
                     const odb_DatumCsys& csys1,
                     odb_Enum::odb_AxisEnum axis1,
                     float angle1,
                     bool orient2sameAs1);
Required arguments
An OdbSet specifying a region.
region
An OdbDatumCsys object specifying the ﬁrst connector node local coordinate system.
csys1
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation of the ﬁrst connector node is applied. Possible values
are odb_Enum::AXIS_1, odb_Enum::AXIS_2, and odb_Enum::AXIS_3.
axis1
A Float specifying the angle of the additional rotation about the ﬁrst connector node axis.
angle1
Optional arguments
A Boolean specifying whether the same orientation settings should be used for the
second node of the connector. The default value is false.
orient2sameAs1
Return value
None.
Exceptions
OdbError: Connector orientation assignment requires element set.
If region is not an element set:
SectionAssignment(...)
This method is used to assign a section on an assembly or part. Section assignment on the assembly is limited to the
connector elements only.
Prototype
void
SectionAssignment(const odb_Set& region,
                  const odb_section& section);
3109
Abaqus Scripting Reference Guide
OdbAssembly object

Required arguments
An OdbSet specifying a region.
region
A Section object.
section
Optional arguments
None.
Return value
None.
Exceptions
OdbError: Section assignment requires element set.
If region is not an element set:
addElements(...)
This method is used to deﬁne elements using nodes deﬁned at the OdbAssembly and/or OdbInstance level. For connector
elements connected to ground, specify the lone node in the connectivity. The position of the ground node cannot be
speciﬁed. This is a limitation.
Warning:
Adding elements not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Prototype
void
addElements(const odb_SequenceInt& labels,
            const odb_SequenceSequenceInt& connectivity,
            const odb_SequenceString& instanceNames,
            const odb_String& type,
            const odb_String& elementSetName,
            const odb_SectionCategory& sectionCategory);
Required arguments
An odb_SequenceInt specifying the element labels.
labels
An odb_SequenceSequenceInt specifying the nodal connectivity.
connectivity
An odb_SequenceString specifying the instanceNames of each node in the nodal
connectivity array. If the node is deﬁned at the assembly level, the instance name should
be an empty string
instanceNames
A String specifying the element type.
type
Abaqus Scripting Reference Guide
3110
OdbAssembly object

Optional arguments
A String specifying a name for this element set. The default value is the empty
string.
elementSetName
A SectionCategory object for this element set.
sectionCategory
Return value
None.
Exceptions
OdbError: Addition of this element type is not permitted
at the assembly level
Only certain element types are permitted at the assembly
level. e.g., connector elements.
OdbError: Connectivity array must be provided for all
element
If length of label array does not match connectivity data
length:
addNodes(...)
This method adds nodes to the OdbAssembly object using node labels and coordinates.
Warning:
Adding nodes not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Prototype
void
addNodes(const odb_SequenceInt& labels,
         const odb_SequenceSequenceFloat& coordinates,
         const odb_String& nodeSetName);
Required arguments
An odb_SequenceInt specifying the node labels.
labels
An odb_SequenceSequenceFloat specifying the nodal coordinates.
coordinates
Optional arguments
A String specifying a name for this node set. The default value is None.
nodeSetName
Return value
None.
3111
Abaqus Scripting Reference Guide
OdbAssembly object

Exceptions
OdbError: Number of node labels and coordinates does not
match
If length of labels does not match length of
coordinates:
OdbError: Node location speciﬁcation does not correspond
to part dimensions
If width of coordinate array does not match assembly
dimension:
sectionAssignments(...)
This method is used to retrieve a section assignment.
Prototype
odb_SectionAssignment
sectionAssignments(int index);
Required arguments
An Int specifying the section assignment.
index
Optional arguments
None.
Return value
A SectionAssignment object.
Exceptions
None.
RigidBody(...)
This method deﬁnes an OdbRigidBody on the assembly.
Prototype
void
RigidBody(const odb_Set& referenceNode,
          odb_Enum::odb_PositionEnum position,
          bool isothermal,
          const odb_Set& elset,
          const odb_Set& pinNodes,
          const odb_Set& tieNodes);
Required arguments
An OdbSet specifying the reference node assigned to the rigid body.
referenceNode
Abaqus Scripting Reference Guide
3112
OdbAssembly object

Optional arguments
A symbolic constant specify if the location of the reference node is to be deﬁned by the
user. Possible values are odb_Enum::INPUT and odb_Enum::CENTER_OF_MASS. The
default value is odb_Enum::INPUT.
position
A Boolean specifying an isothermal rigid body. The default value is false. This parameter
is used only for a fully coupled thermal stress analysis.
isothermal
An OdbSet specifying an element set assigned to the rigid body.
elset
An OdbSet specifying pin-type nodes assigned to the rigid body.
pinNodes
An OdbSet specifying tie-type nodes assigned to the rigid body.
tieNodes
Return value
None.
Exceptions
OdbError: Rigid body deﬁnition requires a node set.
If referenceNode is not a node set:
Members
The OdbAssembly object can have the following members:
Prototype
odb_InstanceRepository& instances();
               odb_SetRepository& nodeSets();
               odb_SetRepository& elementSets();
               odb_SetRepository& surfaces();
               odb_SequenceNode& nodes() const;
               odb_SequenceElement& elements() const;
               odb_DatumCsysRepository& datumCsyses();
               odb_SequenceSectionAssignment sectionAssignments();
               odb_SequenceConnectorOrientation connectorOrientations();
               odb_SequenceRigidBody rigidBodies();
               odb_SequencePretensionSection pretensionSections();
A repository of OdbInstance objects.
instances
A repository of OdbSet objects specifying node sets.
nodeSets
A repository of OdbSet objects specifying element sets.
elementSets
A repository of OdbSet objects specifying surfaces.
surfaces
A sequence of OdbMeshNode objects.
nodes
3113
Abaqus Scripting Reference Guide
OdbAssembly object

A sequence of OdbMeshElement objects.
elements
A repository of OdbDatumCsys objects.
datumCsyses
A sequence of SectionAssignment objects.
sectionAssignments
A sequence of OdbRigidBody objects.
rigidBodies
A sequence of OdbPretensionSection objects.
pretensionSections
A sequence of ConnectorOrientation objects.
connectorOrientations
Abaqus Scripting Reference Guide
3114
OdbAssembly object

OdbDatumCsys object
The OdbDatumCsys object contains a coordinate system that can be stored in an output database. You can create the
datum coordinate system in the Visualization module during an Abaqus/CAE session and save the datum coordinate
system to the output database before you exit Abaqus/CAE. Alternatively, the analysis code can write the datum
coordinate system to the output database.
Access
odb.rootAssembly().datumCsyses()[name]
DatumCsysByThreePoints(...)
This method creates an OdbDatumCsys object using three points. A datum coordinate system created with this method
results in a ﬁxed system.
Path
odb.rootAssembly().DatumCsysByThreePoints
Prototype
odb_DatumCsys&
DatumCsysByThreePoints(const odb_String& name,
                odb_Enum::odb_DatumCsysTypeEnum type,
                const odb_SequenceFloat& origin,
                const odb_SequenceFloat& point1,
                const odb_SequenceFloat& point2);
Required arguments
An odb_String specifying the repository key.
name
An odb_Enum::odb_DatumCsysTypeEnum specifying the type of coordinate system. Possible
values are odb_Enum::CARTESIAN, odb_Enum::CYLINDRICAL, and
odb_Enum::SPHERICAL.
type
An odb_SequenceFloat specifying the coordinates of the origin of the datum coordinate system.
origin
An odb_SequenceFloat specifying the coordinates of a point on the local 1- or -axis.
point1
An odb_SequenceFloat specifying the coordinates of a point in the 1–2 or –  plane.
point2
Optional arguments
None.
Return value
An OdbDatumCsys object.
3115
OdbDatumCsys object

Exceptions
None.
DatumCsysByThreeNodes(...)
This method creates an OdbDatumCsys object using the coordinates of three OdbMeshNode objects. A datum coordinate
system created with this method results in a system that follows the position of the three nodes. Results, such as those
for displacement, are resolved into the orientation of the datum coordinate system without regard to the position of its
origin. The last three arguments are given in the form of an OdbMeshNode object.
Path
odb.rootAssembly().DatumCsysByThreeNodes
Prototype
odb_DatumCsys&
DatumCsysByThreeNodes(const odb_String& name,
                odb_Enum::odb_DatumCsysTypeEnum type,
                const odb_Node& origin,
                const odb_Node& point1,
                const odb_Node& point2);
Required arguments
An odb_String specifying the repository key.
name
An odb_Enum::odb_DatumCsysTypeEnum specifying the type of coordinate system. Possible
values are odb_Enum::CARTESIAN, odb_Enum::CYLINDRICAL, and
odb_Enum::SPHERICAL.
type
An OdbMeshNode object specifying a node at the origin of the datum coordinate system.
origin
An OdbMeshNode object specifying a node on the local 1- or -axis.
point1
An OdbMeshNode object specifying a node in the 1–2 or –  plane.
point2
Optional arguments
None.
Return value
An OdbDatumCsys object.
Exceptions
None.
DatumCsys(...)
This method copies oneOdbDatumCsys object to a new OdbDatumCsys object.
Abaqus Scripting Reference Guide
3116
OdbDatumCsys object

Path
odb.rootAssembly().DatumCsys
Prototype
odb_DatumCsys&
DatumCsys(const odb_String& name,
          const odb_DatumCsys& datumCsys);
Required arguments
An odb_String specifying the repository key.
name
An OdbDatumCsys object specifying the object to be copied.
datumCsys
Optional arguments
None.
Return value
An OdbDatumCsys object.
Exceptions
None.
Members
The OdbDatumCsys object has the following members:
Prototype
odb_String name() const;
odb_Enum::odb_DatumCsysTypeEnum type() const;
const float* origin() const;
float origin(int index) const;
const float* xAxis() const;
float xAxis(int index) const;
const float* yAxis() const;
float yAxis(int index) const;
const float* zAxis() const;
float zAxis(int index) const;
An odb_String specifying the repository key.
name
An odb_Enum::odb_DatumCsysTypeEnum specifying the type of coordinate system. Possible
values are odb_Enum::CARTESIAN, odb_Enum::CYLINDRICAL, and
odb_Enum::SPHERICAL.
type
An odb_SequenceFloat specifying the coordinates of the origin of the datum coordinate
system.
origin
An odb_SequenceFloat specifying a point on the X-axis.
xAxis
3117
Abaqus Scripting Reference Guide
OdbDatumCsys object

An odb_SequenceFloat specifying a point on the Y-axis.
yAxis
An odb_SequenceFloat specifying a point on the Z-axis.
zAxis
Abaqus Scripting Reference Guide
3118
OdbDatumCsys object

OdbFrame object
The domain of the OdbFrame object is taken from the parent step.
Access
odb.steps()[name].frames(i)
Frame(...)
This method creates an OdbFrame object and appends it to the frame sequence.
Path
odb.steps()[name].Frame
Prototype
 odb_Frame
                  Frame(int incrementNumber,
                  float frameValue,
                  const odb_String& description);
Required arguments
An Int specifying the frame increment number within the step. The base frame has normally
increment number 0, and the results run from 1. In case of multiple load cases, the same
increment number is duplicated for each loadcase.
incrementNumber
A Float specifying the value in units determined by the domain member of the Step object.
The equivalent in the time domain is stepTime; in the frequency domain the equivalent is
frequency; and in the modal domain the equivalent is mode.
frameValue
Optional arguments
An odb_String specifying the contents of the frame. The default value is an empty
string.
description
Return value
An OdbFrame object.
Exceptions
None.
Frame(...)
This constructor creates an OdbFrame object in the frequency domain and appends it to the frame sequence. The
arguments to the constructor are valid only when domain=FREQUENCY or domain=MODAL.
3119
OdbFrame object

Path
odb.steps()[name].Frame
Prototype
 odb_Frame
                  Frame(int mode,
                  float frequency,
                  const odb_String& description);
Required arguments
An Int specifying the eigenmode. This member is valid only if domain=odb_Enum::MODAL.
mode
A Float specifying the frequency. This member is valid only if
domain=odb_Enum::FREQUENCY or if the procedureType member of the Step
object=“FREQUENCY”. The default value is 0.0.
frequency
Optional arguments
An odb_String specifying the contents of the frame. The default value is an empty
string.
description
Return value
An OdbFrame object.
Exceptions
None.
Frame(...)
This constructor creates an OdbFrame object for a speciﬁc load case and appends it to the frame sequence.
Path
odb.steps()[name].Frame
Prototype
 odb_Frame
                  Frame(const odb_LoadCase& loadCase,
                  const odb_String& description,
                  float frequency);
Required arguments
An OdbLoadCase object specifying the load case for the frame.
loadCase
Abaqus Scripting Reference Guide
3120
OdbFrame object

Optional arguments
An odb_String specifying the contents of the frame. The default value is an empty string.
description
A Float specifying the frequency. This member is valid only if
domain=odb_Enum::FREQUENCY or if the procedureType member of the Step
object=“FREQUENCY”. The default value is 0.0.
frequency
Return value
An OdbFrame object.
Exceptions
None.
Members
The OdbFrame object has members with the same names and descriptions as the arguments to the Frame  method.
In addition, the OdbFrame object can have the following members:
Prototype
odb_Frame associatedFrame();
int cyclicModeNumber();
odb_String description() const;
odb_Enum::odb_DomainEnum domain() const;
odb_FieldOutputRepository& fieldOutputs();
int incrementNumber() const;
float frameValue() const;
float frequency() const;
const odb_LoadCase& loadCase() const;
int mode() const;
An Int specifying the cyclic mode number associated with the data stored on this frame.
Only frequency analyses of cyclic symmetry models possess cyclic mode numbers.
cyclicModeNumber
An odb_Enum::odb_DomainEnum specifying the domain of the step of which the frame
is a member. Possible values are odb_Enum::TIME, odb_Enum::FREQUENCY, and
odb_Enum::MODAL.
domain
A Float specifying the frequency. This member is valid only if
domain=odb_Enum::FREQUENCY or if the procedureType member of the Step
object=“FREQUENCY”. The default value is 0.0.
frequency
An Int specifying the eigenmode. This member is valid only if
domain=odb_Enum::MODAL.
mode
An OdbFrame object specifying the real or imaginary portion of the data corresponding
to this cyclic symmetry mode.
associatedFrame
3121
Abaqus Scripting Reference Guide
OdbFrame object

A repository of FieldOutput objects specifying the key to the ﬁeldOutputsrepository is a
String representing an output variable.
ﬁeldOutputs
An OdbLoadCase object specifying the load case for the frame.
loadCase
Abaqus Scripting Reference Guide
3122
OdbFrame object

OdbInstance object
A part instance is the usage of a part within an assembly.
Access
odb.rootAssembly().instances()[name]
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()
Instance(...)
This method creates an OdbInstance object from an OdbPart object.
Path
odb.rootAssembly().Instance
Prototype
odb_Instance&
Instance(const odb_String& name,
         const odb_Part& object,
         const odb_SequenceSequenceFloat& localCoordSystem);
Required arguments
An odb_String specifying the instance name.
name
An OdbPart object.
object
Optional arguments
An odb_SequenceSequenceFloat specifying the rotation and translation of the part instance in the
global Cartesian coordinate system. The ﬁrst three sequences specify the new local coordinate
system with its center at the origin.
localCoordSystem
•
The ﬁrst sequence speciﬁes a point on the 1-axis.
•
The second sequence speciﬁes a point on the 2-axis.
•
The third sequence speciﬁes a point on the 3-axis.
The fourth sequence speciﬁes the translation of the local coordinate system from the origin to its
intended location.
For example, the following sequence moves a part 10 units in the X-direction with no rotation:
localCoordSystem = ((1, 0, 0), (0, 1, 0),
                                 (0, 0, 1), (10, 0, 0))
The following sequence moves a part 5 units in the X-direction with rotation:
localCoordSystem = ((0, 1, 0), (1, 0, 0),
                                 (0, 0, 1), (5, 0, 0))
3123
OdbInstance object

transforms a part containing the two points
                                 Pt1= (1,0,0) 
                                 Pt2= (2,0,0) 
to
                                 Pt1 = (0, 6, 0) 
                                 Pt2 = (0, 7, 0)                 
Return value
An OdbInstance object.
Exceptions
InvalidNameError.
assignBeamOrientation(...)
This method assigns a beam section orientation to a region of a part instance.
Prototype
void
assignBeamOrientation(const odb_Set& region,
                  odb_Enum::odb_OrientationMethodEnum method,
                  const odb_SequenceFloat& vector);
Required arguments
An OdbSet specifying a region on an instance.
region
An odb_Enum::odb_OrientationMethodEnum specifying the assignment method. Only a
value of odb_Enum::N1_COSINES is currently supported.
method
An odb_SequenceFloat specifying the approximate local 
-direction of the beam
cross-section.
vector
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
3124
OdbInstance object

assignMaterialOrientation(...)
This method assigns a material orientation to a region of a part instance.
Prototype
void
assignMaterialOrientation(const odb_Set& region,
             const odb_DatumCsys& localCsys,
             odb_Enum::odb_AxisEnum axis,
             float angle,
             odb_Enum::odb_StackDirectionEnum stackDirection);
Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCsys
Optional arguments
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation is applied. For shells this axis is also the shell normal.
axis
Possible values are odb_Enum::AXIS_1, odb_Enum::AXIS_2, and odb_Enum::AXIS_3. The
default value is odb_Enum::AXIS_1.
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
An odb_Enum::odb_StackDirectionEnum specifying the stack or thickness direction of the material.
Possible values are odb_Enum::STACK_1, odb_Enum::STACK_2, odb_Enum::STACK_3, and
odb_Enum::STACK_ORIENTATION. The default value is odb_Enum::STACK_3.
stackDirection
Return value
None.
Exceptions
None.
assignRebarOrientation(...)
This method assigns a rebar reference orientation to a region of a part instance.
Prototype
void
assignRebarOrientation(const odb_Set& region,
                       const odb_DatumCsys& localCsys,
                       odb_Enum::odb_AxisEnum axis,
                       float angle);
3125
Abaqus Scripting Reference Guide
OdbInstance object

Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCsys
Optional arguments
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation is applied. For shells this axis is also the shell normal.
axis
Possible values are odb_Enum::AXIS_1, odb_Enum::AXIS_2, and odb_Enum::AXIS_3. The default
value is odb_Enum::AXIS_1.
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
Return value
None.
Exceptions
None.
getElementFromLabel(...)
This method is used to retrieved an element with a speciﬁc label from an instance object.
Prototype
odb_Element
getElementFromLabel(int label);
Required arguments
An Int specifying the element label.
label
Optional arguments
None.
Return value
An OdbMeshElement object.
Exceptions
OdbError: Invalid element label
If no element with the speciﬁed label exists:
Abaqus Scripting Reference Guide
3126
OdbInstance object

getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from an instance object.
Prototype
odb_Node
getNodeFromLabel(int label);
Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
AnOdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
assignSection(...)
This method is used to assign a section to a region on an instance.
Prototype
void
assignSection(const odb_Set& region,
              const odb_section& section);
Required arguments
An OdbSet specifying a region on an instance.
region
A Section object.
section
Optional arguments
None.
Return value
None.
3127
Abaqus Scripting Reference Guide
OdbInstance object

Exceptions
OdbError: Section assignment requires element set.
If region is not an element set:
OdbError: Section assignment requires element set from this
part instance.
If the element set is not from the current instance:
AnalyticRigidSurf2DPlanar(...)
This method is used to deﬁne a two-dimensional AnalyticSurface object on the instance.
Prototype
void
AnalyticRigidSurf2DPlanar(const odb_String& name,
           const odb_SequenceAnalyticSurfaceSegment& profile,
           double filletRadius);
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Exceptions
OdbError: 2D-Planar Analytic Rigid Surface can be deﬁned only
if the instance is of type TWO_D_PLANAR or AXISYMMETRIC.
If OdbPart associated with the part instance
is of type THREE_D:
AnalyticRigidSurfExtrude(...)
This method is used to deﬁne a three-dimensional cylindrical AnalyticSurface on the instance.
Prototype
void
AnalyticRigidSurfExtrude(const odb_String& name,
           const odb_SequenceAnalyticSurfaceSegment& profile,
           double filletRadius,
           const odb_SequenceSequenceFloat& localCoordData);
Abaqus Scripting Reference Guide
3128
OdbInstance object

Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
An odb_SequenceSequenceFloat specifying the global coordinates of points used to
deﬁne the local coordinate system.
localCoordData
Return value
None.
Exceptions
OdbError: Analytic Rigid Surface of type CYLINDER can be
deﬁned only if the instance is of type THREE_D.
If OdbPart associated with the part instance is
not of type THREE_D:
AnalyticRigidSurfRevolve(...)
This method is used to deﬁne a three-dimensional AnalyticSurface of revolution on the instance.
Prototype
void
AnalyticRigidSurfRevolve(const odb_String& name,
           const odb_SequenceAnalyticSurfaceSegment& profile,
           double filletRadius,
           const odb_SequenceSequenceFloat& localCoordData);
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
An odb_SequenceSequenceFloat specifying the global coordinates of points used to
deﬁne the local coordinate system.
localCoordData
3129
Abaqus Scripting Reference Guide
OdbInstance object

Return value
None.
Exceptions
OdbError: Analytic Rigid Surface of type REVOLUTION can
be deﬁned only if the instance is of type THREE_D.
If OdbPart associated with the part instance is
not of type THREE_D:
RigidBody(...)
This method deﬁnes an OdbRigidBody on the instance.
Prototype
void
RigidBody(const odb_Set& referenceNode,
          odb_Enum::odb_PositionEnum position,
          bool isothermal,
          const odb_Set& elset,
          const odb_Set& pinNodes,
          const odb_Set& tieNodes);
Required arguments
An OdbSet specifying the reference node assigned to the rigid body.
referenceNode
Optional arguments
A symbolic constant specify if the location of the reference node is to be deﬁned by the
user. Possible values are odb_Enum::INPUT, and odb_Enum::CENTER_OF_MASS. The
default value is odb_Enum::INPUT.
position
A Boolean specifying an isothermal rigid body. The default value is false. This parameter
is used only for a fully-coupled thermal stress analysis.
isothermal
An OdbSet specifying an element set assigned to the rigid body.
elset
An OdbSet specifying pin-type nodes assigned to the rigid body.
pinNodes
An OdbSet specifying tie-type nodes assigned to the rigid body.
tieNodes
Return value
None.
Exceptions
OdbError: Rigid body deﬁnition requires a node set.
If referenceNode is not a node set:
Abaqus Scripting Reference Guide
3130
OdbInstance object

getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from an instance object.
Prototype
odb_Node
getNodeFromLabel(int label);
Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
An OdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from an instance object.
Prototype
odb_Node
getNodeFromLabel(int label);
Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
An OdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
3131
Abaqus Scripting Reference Guide
OdbInstance object

nodesLabelsFromNodeTypeFace(...)
Given a sequence of integers deﬁning an element connectivity, this method is used to retrieve the sequence of nodes
attached to a speciﬁed face of the element based on element type.
Prototype
odb_SequenceInt
nodesLabelsFromNodeTypeFace(const odb_SequenceInt& elementNodeLabels,
               const odb_String& elementType,
               odb_Enum::odb_ElementFaceEnumEnum elementFace);
Required arguments
A sequence of Ints specifying the node labels deﬁning the connectivity for the
entire element.
elementNodeLabels
A string specifying the type of element whose connectivity is provided.
elementType
A SymbolicConstant specifying the face of the element for which the node labels
are desired.
elementFace
Optional arguments
None.
Return value
A sequence of Ints specifying the node labels corresponding to the desired element face.
Exceptions
OdbError: Invalid face
If the speciﬁed face is invalid for the element type:
Members
The OdbInstance object can have the following members:
Prototype
odb_String name() const;
               odb_Enum::odb_DimensionEnum embeddedSpace() const;
               odb_Enum::odb_PartTypeEnum type() const;
               odb_Node nodes(int i) const;
               odb_SequenceNode& nodes() const;
               odb_Element elements(int i) const;
               odb_SequenceElement& elements() const;
               odb_SetRepository& nodeSets() const;
               odb_SetRepository& elementSets() const;
               odb_SetRepository& surfaces() const;
               odb_SequenceSectionAssignment sectionAssignments()\
                   const;
               odb_SequenceBeamOrientation beamOrientations() \
Abaqus Scripting Reference Guide
3132
OdbInstance object

                   const;
               odb_SequenceMaterialOrientation materialOrientations() \
                   const;
               odb_SequenceRebarOrientation rebarOrientations() \
                   const;
               odb_SequenceRigidBody rigidBodies() const;
               bool hasAnalyticSurface() const;
               odb_AnalyticSurface analyticSurface() const;
An odb_String specifying the instance name.
name
An odb_Enum::odb_PartTypeEnum specifying the type of the OdbPart object. Only
a value of odb_Enum::DEFORMABLE_BODY is currently supported.
type
An odb_Enum::odb_DimensionEnum specifying the dimensionality of the OdbPart
object. Possible values are odb_Enum::THREE_D, odb_Enum::TWO_D_PLANAR,
odb_Enum::AXISYMMETRIC, and odb_Enum::UNKNOWN_DIMENSION.
embeddedSpace
An odb_Enum::odb_ResultStateEnum specifying the state of the Instance as modiﬁed
by the analysis. This member is only present if the Instance is part of the
RootAssemblyState tree. Possible values are:
resultState
•
odb_Enum::PROPAGATED, specifying that the value is the same as the previous
frame or the original rootAssembly.
•
odb_Enum::MODIFIED, specifying that the geometry of the instance has been
changed at this frame.
The default value is odb_Enum::PROPAGATED.
A sequence of OdbMeshNode objects.
nodes
A sequence of OdbMeshElement objects.
elements
A repository of OdbSet objects specifying node sets.
nodeSets
A repository of OdbSet objects specifying element sets.
elementSets
A repository of OdbSet objects specifying surfaces.
surfaces
A sequence of SectionAssignment objects.
sectionAssignments
A sequence of OdbRigidBody objects.
rigidBodies
A sequence of BeamOrientation objects.
beamOrientations
A sequence of MaterialOrientation objects.
materialOrientations
A sequence of RebarOrientation objects.
rebarOrientations
An AnalyticSurface object specifying analytic Surface deﬁned on the instance.
analyticSurface
3133
Abaqus Scripting Reference Guide
OdbInstance object

OdbLoadCase object
The OdbLoadCase object describes a load case.
Access
odb.steps()[name].frames(i).loadCase()
odb.steps()[name].historyRegions()[name].loadCase()
odb.steps()[name].loadCases()[name]
LoadCase(...)
This method creates an OdbLoadCase object.
Path
odb.steps()[name].LoadCase
Prototype
odb_LoadCase&
LoadCase(const odb_String& name);
Required arguments
An odb_String specifying the name of the OdbLoadCase object.
name
Optional arguments
None.
Return value
An OdbLoadCase object.
Exceptions
None.
Members
The OdbLoadCase object has members with the same names and descriptions as the arguments to the LoadCase
method.
Abaqus Scripting Reference Guide
3134
OdbLoadCase object

OdbMeshElement object
OdbMeshElement objects are created with the part.addElements or rootAssembly.addElements methods.
Access
odb.parts()[name].elements(i)
odb.parts()[name].elementSets()[name].elements(i)
odb.parts()[name].nodeSets()[name].elements(i)
odb.parts()[name].surfaces()[name].elements(i)
odb.rootAssembly().elements(i)
odb.rootAssembly().elementSets()[name].elements(i)
odb.rootAssembly().instances()[name].elements(i)
odb.rootAssembly().instances()[name].elementSets()[name].elements(i)
odb.rootAssembly().instances()[name].nodeSets()[name].elements(i)
odb.rootAssembly().instances()[name].surfaces()[name].elements(i)
odb.rootAssembly().nodeSets()[name].elements(i)
odb.rootAssembly().surfaces()[name].elements(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.elements(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.elementSets()[name].elements(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.nodeSets()[name].elements(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.surfaces()[name].elements(i)
getNormal(...)
This method returns the normal direction for the element face.
Required arguments
The value of faceIndex is 0 for a shell element and can range from 0 to 5 for a solid
element.
faceIndex
Optional arguments
Name of the step.
stepName
A Double specifying the value at which the frame is required. frameValue can be the total ﬁme
or frequency.
frameValue
A SymbolicConstant specifying which frame to return if there is no frame at the exact frame
value. Possible values are CLOSEST, BEFORE, AFTER, and EXACT. The default value is
CLOSEST.
When match=CLOSEST, Abaqus returns the closest frame. If the frame value requested is
exactly halfway between two frames, Abaqus returns the frame after the value.
match
When match=EXACT, Abaqus raises an exception if the exact frame value does not exist.
3135
OdbMeshElement object

Return value
A tuple of 3 ﬂoats representing the unit normal vector. If the element face is collapsed such that a normal cannot be
computed, a zero-length vector is returned.
Exceptions
OdbError: Frame not found.
If the exact frame is not found:
OdbError: Step is not present in the ODB.
If the step name is not found:
frameValueOdbError: stepName should be speciﬁed with
frameValue.
If frameValue is not provided and stepName is empty:
Members
The OdbMeshElement object can have the following members:
Prototype
int label() const;
               const int* connectivity(int& numNodes) const ;
               odb_SequenceInt connectivity() const;
               odb_SectionCategory sectionCategory() const;
               odb_String type() const;
               odb_String instanceName() const;
               odb_SequenceString instanceNames() const;
An Int specifying the element label.
label
An odb_String specifying the element type.
type
A SectionCategory object specifying the element section properties.
sectionCategory
A pointer to an array of Ints specifying the element connectivity. For connector elements
connected to ground, the other node is repeated in the connectivity data. The position of
connectivity
the ground node cannot be ascertained. This is a limitation. It is important to note the
difference with MeshElement object of MDB where the connectivity is node indices
instead of node labels.
A pointer to an array of Strings specifying the instance names for nodes in the element
connectivity.
instanceNames
An odb_String specifying the instance name.
instanceName
Abaqus Scripting Reference Guide
3136
OdbMeshElement object

OdbMeshNode object
OdbMeshNode objects are created with the part.addNodes method.
Access
odb.parts()[name].nodes(i)
odb.parts()[name].nodeSets()[name].nodes(i)
odb.parts()[name].surfaces()[name].nodes(i)
odb.rootAssembly().instances()[name].nodes(i)
odb.rootAssembly().instances()[name].nodeSets()[name].nodes(i)
odb.rootAssembly().instances()[name].surfaces()[name].nodes(i)
odb.rootAssembly().nodes(i)
odb.rootAssembly().nodeSets()[name].nodes(i)
odb.rootAssembly().surfaces()[name].nodes(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.nodes(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.nodeSets()[name].nodes(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.surfaces()[name].nodes(i)
Members
The OdbMeshNode object has the following members:
Prototype
int label() const;
const float* coordinates() const;
An Int specifying the node label.
label
A pointer to an array of Floats specifying the nodal coordinates in the global Cartesian
coordinate system.
coordinates
3137
OdbMeshNode object

OdbPart object
The OdbPart object is similar to the kernel Part object and contains nodes and elements, but not geometry.
Access
odb.parts()[name]
Part(...)
This method creates an OdbPart object. Nodes and elements are added to this object at a later stage.
Path
odb.Part
Prototype
odb_Part&
Part(const odb_String& name,
     odb_Enum::odb_DimensionEnum embeddedSpace,
     odb_Enum::odb_PartTypeEnum type);
Required arguments
An odb_String specifying the part name.
name
An odb_Enum::odb_DimensionEnum specifying the dimensionality of the OdbPart object.
Possible values are odb_Enum::THREE_D, odb_Enum::TWO_D_PLANAR, and
odb_Enum::AXISYMMETRIC.
embeddedSpace
An odb_Enum::odb_PartTypeEnum specifying the type of the OdbPart object. Possible values
are odb_Enum::DEFORMABLE_BODY and odb_Enum::ANALYTIC_RIGID_SURFACE.
type
Optional arguments
None.
Return value
An OdbPart object.
Exceptions
None.
addElements(...)
This method adds elements to an OdbPart object using element labels and nodal connectivity.
Warning:
Adding elements not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Abaqus Scripting Reference Guide
3138
OdbPart object

Prototype
void
addElements(const odb_SequenceInt& labels,
            const odb_SequenceSequenceInt& connectivity,
            const odb_String& type,
            const odb_String& elementSetName,
            const odb_SectionCategory& sectionCategory);
Required arguments
An odb_SequenceInt specifying the element labels.
labels
An odb_SequenceSequenceInt specifying the nodal connectivity.
connectivity
A String specifying the element type.
type
Optional arguments
A String specifying a name for this element set. The default value is the empty
string.
elementSetName
A SectionCategory object for this element set.
sectionCategory
Return value
None.
Exceptions
None.
addNodes(...)
This method adds nodes to an OdbPart object using node labels and coordinates.
Warning:
Adding nodes not in ascending order of their labels may cause Abaqus/Viewer to plot contours incorrectly.
Prototype
void
addNodes(const odb_SequenceInt& labels,
         const odb_SequenceSequenceFloat& coordinates,
         const odb_String& nodeSetName);
Required arguments
An odb_SequenceInt specifying the node labels.
labels
An odb_SequenceSequenceFloat specifying the nodal coordinates.
coordinates
3139
Abaqus Scripting Reference Guide
OdbPart object

Optional arguments
A String specifying a name for this node set. The default value is None.
nodeSetName
Return value
None.
Exceptions
None.
assignBeamOrientation(...)
This method assigns a beam section orientation to a region of a part instance.
Prototype
void
assignBeamOrientation(const odb_Set& region,
                  odb_Enum::odb_OrientationMethodEnum method,
                  const odb_SequenceFloat& vector);
Required arguments
An OdbSet specifying a region on an instance.
region
An odb_Enum::odb_OrientationMethodEnum specifying the assignment method. Only a
value of odb_Enum::N1_COSINES is currently supported.
method
An odb_SequenceFloat specifying the approximate local  
 -direction of the beam
cross-section.
vector
Optional arguments
None.
Return value
None.
Exceptions
None.
assignMaterialOrientation(...)
This method assigns a material orientation to a region of a part instance.
Prototype
void
assignMaterialOrientation(const odb_Set& region,
             const odb_DatumCsys& localCSys,
             odb_Enum::odb_AxisEnum axis,
Abaqus Scripting Reference Guide
3140
OdbPart object

             float angle,
             odb_Enum::odb_StackDirectionEnum stackDirection);
Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCSys
Optional arguments
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation is applied. For shells this axis is also the shell normal.
axis
Possible values are odb_Enum::AXIS_1, odb_Enum::AXIS_2, and odb_Enum::AXIS_3. The
default value is odb_Enum::AXIS_1.
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
An odb_Enum::odb_StackDirectionEnum specifying the stack or thickness direction of the material.
Possible values are odb_Enum::STACK_1, odb_Enum::STACK_2, odb_Enum::STACK_3, and
odb_Enum::STACK_ORIENTATION. The default value is odb_Enum::STACK_3.
stackDirection
Return value
None.
Exceptions
None.
assignRebarOrientation(...)
This method assigns a rebar reference orientation to a region of a part instance.
Prototype
void
assignRebarOrientation(const odb_Set& region,
                       const odb_DatumCsys& localCsys,
                       odb_Enum::odb_AxisEnum axis,
                       float angle);
Required arguments
An OdbSet specifying a region on an instance.
region
An OdbDatumCsys object specifying the local coordinate system or None, indicating
the global coordinate system.
localCsys
3141
Abaqus Scripting Reference Guide
OdbPart object

Optional arguments
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation is applied. For shells this axis is also the shell normal.
axis
Possible values are odb_Enum::AXIS_1, odb_Enum::AXIS_2, and odb_Enum::AXIS_3. The default
value is odb_Enum::AXIS_1.
A Float specifying the angle of the additional rotation. The default value is 0.0.
angle
Return value
None.
Exceptions
None.
getElementFromLabel(...)
This method is used to retrieved an element with a speciﬁc label from a part object.
Prototype
odb_Element
getElementFromLabel(int label);
Required arguments
An Int specifying the element label.
label
Optional arguments
None.
Return value
An OdbMeshElement object.
Exceptions
OdbError: Invalid element label
If no element with the speciﬁed label exists:
getNodeFromLabel(...)
This method is used to retrieved a node with a speciﬁc label from a part object.
Prototype
odb_Node
getNodeFromLabel(int label);
Abaqus Scripting Reference Guide
3142
OdbPart object

Required arguments
An Int specifying the node label.
label
Optional arguments
None.
Return value
An OdbMeshNode object.
Exceptions
OdbError: Invalid node label
If no node with the speciﬁed label exists:
AnalyticRigidSurf2DPlanar(...)
This method is used to deﬁne a two-dimensional AnalyticSurface object on the part object.
Prototype
void
AnalyticRigidSurf2DPlanar(const odb_String& name,
           const odb_SequenceAnalyticSurfaceSegment& profile,
           double filletRadius);
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Exceptions
OdbError: 2D-Planar Analytic Rigid Surface can be deﬁned only if the part
is of type TWO_D_PLANAR or AXISYMMETRIC.
If OdbPart is of type THREE_D:
3143
Abaqus Scripting Reference Guide
OdbPart object

AnalyticRigidSurfExtrude(...)
This method is used to deﬁne a three-dimensional cylindrical AnalyticSurface on the part object.
Prototype
void
AnalyticRigidSurfExtrude(const odb_String& name,
           const odb_SequenceAnalyticSurfaceSegment& profile,
           double filletRadius);
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Exceptions
OdbError: Analytic Rigid Surface of type CYLINDER can be deﬁned
only if the part is of type THREE_D.
If OdbPart is not of type THREE_D:
AnalyticRigidSurfRevolve(...)
This method is used to deﬁne a three-dimensional AnalyticSurface of revolution on the part object.
Prototype
void
AnalyticRigidSurfRevolve(const odb_String& name,
           const odb_SequenceAnalyticSurfaceSegment& profile,
           double filletRadius);
Required arguments
The name of the analytic surface.
name
A sequence of AnalyticSurfaceSegment objects or an OdbSequenceAnalyticSurfaceSegment
object.
proﬁle
Abaqus Scripting Reference Guide
3144
OdbPart object

Optional arguments
A Double specifying the radius of curvature to smooth discontinuities between adjoining
segments. The default value is 0.0.
ﬁlletRadius
Return value
None.
Exceptions
OdbError: Analytic Rigid Surface of type REVOLUTION can be deﬁned
only if the part is of type THREE_D.
If OdbPart is not of type THREE_D:
RigidBody(...)
This method deﬁnes an OdbRigidBody on the part object.
Prototype
void
RigidBody(const odb_Set& referenceNode,
          odb_Enum::odb_PositionEnum position,
          bool isothermal,
          const odb_Set& elset,
          const odb_Set& pinNodes,
          const odb_Set& tieNodes);
Required arguments
An OdbSet specifying the reference node assigned to the rigid body.
referenceNode
Optional arguments
A symbolic constant specify if the location of the reference node is to be deﬁned by the
user. Possible values are odb_Enum::INPUT and odb_Enum::CENTER_OF_MASS. The
default value is odb_Enum::INPUT.
position
A Boolean specifying an isothermal rigid body. The default value is false. This parameter
is used only for a fully-coupled thermal stress analysis.
isothermal
An OdbSet specifying an element set assigned to the rigid body.
elset
An OdbSet specifying pin-type nodes assigned to the rigid body.
pinNodes
An OdbSet specifying tie-type nodes assigned to the rigid body.
tieNodes
Return value
None.
3145
Abaqus Scripting Reference Guide
OdbPart object

Exceptions
OdbError: Rigid body deﬁnition requires a node set.
If referenceNode is not a node set:
Members
The OdbPart object has members with the same names and descriptions as the arguments to the Part  method.
In addition, the OdbPart object can have the following members:
Prototype
odb_String name() const;
               odb_Enum::odb_DimensionEnum embeddedSpace() const;
               odb_Enum::odb_PartTypeEnum type() const;
               odb_Node& nodes(int index) const;
               odb_SequenceNode& nodes() const;
               odb_Element& elements(int index) const;
               odb_SequenceElement& elements() const;
               odb_SetRepository& nodeSets() const;
               odb_SetRepository& elementSets() const;
               odb_SetRepository& surfaces() const;
               odb_SequenceSectionAssignment sectionAssignments() const;
               odb_SequenceBeamOrientation beamOrientations() const;
               odb_SequenceMaterialOrientation materialOrientations() const;
               odb_SequenceRebarOrientation rebarOrientations() const;
               odb_SequenceRigidBody rigidBodies() const;
               bool hasAnalyticSurface() const;
               odb_AnalyticSurface analyticSurface() const;
A sequence of OdbMeshNode objects.
nodes
A sequence of OdbMeshElement objects.
elements
A repository of OdbSet objects specifying node sets.
nodeSets
A repository of OdbSet objects specifying element sets.
elementSets
A repository of OdbSet objects specifying surfaces.
surfaces
A sequence of SectionAssignment objects.
sectionAssignments
A sequence of BeamOrientation objects.
beamOrientations
A sequence of MaterialOrientation objects.
materialOrientations
A sequence of RebarOrientation objects.
rebarOrientations
A sequence of OdbRigidBody objects.
rigidBodies
An AnalyticSurface object specifying analytic Surface deﬁned on the
instance.
analyticSurface
Abaqus Scripting Reference Guide
3146
OdbPart object

OdbPretensionSection object
The pretension section object is used to deﬁne an assembly load. It associates a pretension node with a pretension
section.
Access
odb.rootAssembly().pretensionSections(i)
Members
The OdbPretensionSection object can have the following members:
Prototype
odb_Set node() const;
odb_Set element() const;
odb_Set surface() const;
odb_SequenceFloat normal() const;
float normal(int index) const;
An OdbSet object specifying the node set containing the pretension node.
node
An OdbSet object specifying the element set that deﬁnes the pretension section.
element
An OdbSet object specifying the surface set that deﬁnes the pretension section.
surface
An odb_SequenceFloat specifying the components of the normal to the pretension section.
normal
3147
OdbPretensionSection object

OdbRigidBody object
The Rigid body object is used to bind a set of elements and/or a set of nodes and/or an analytical surface with a reference
node.
Access
odb.parts()[name].rigidBodies(i)
odb.rootAssembly().instances()[name].rigidBodies(i)
odb.rootAssembly().rigidBodies(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.rigidBodies(i)
Members
The OdbRigidBody object can have the following members:
Prototype
odb_Enum::odb_PositionEnum position() const;
bool isothermal() const;
odb_Set referenceNode() const;
odb_Set elements() const;
odb_Set tieNodes() const;
odb_Set pinNodes() const;
odb_AnalyticSurface analyticSurface() const;
An odb_Enum::odb_PositionEnum specifying the speciﬁc location of the OdbRigidBody
reference node relative to the rest of the rigid body. Possible values are odb_Enum::INPUT
and odb_Enum::CENTER_OF_MASS. The default value is odb_Enum::INPUT.
position
A Boolean specifying specify whether the OdbRigidBody can have temperature gradients
or be isothermal. This is used only for fully coupled thermal-stress analysis The default
value is true.
isothermal
An OdbSet object specifying the reference node set associated with the rigid body.
referenceNode
An OdbSet object specifying the element set whose motion is governed by the motion of
rigid body reference node.
elements
An OdbSet object specifying the node set which have both translational and rotational
degrees of freedom associated with the rigid body.
tieNodes
An OdbSet object specifying the node set which have only translational degrees of freedom
associated with the rigid body.
pinNodes
An AnalyticSurface object specifying the analytic surface whose motion is governed by the
motion of rigid body reference node.
analyticSurface
Abaqus Scripting Reference Guide
3148
OdbRigidBody object

OdbSequenceAnalyticSurfaceSegment object
A sequence of AnalyticSurfaceSegment describing an analytic surface proﬁle.
Access
odb.parts()[name].analyticSurface().segments()
odb.rootAssembly().instances()[name].analyticSurface().segments()
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.analyticSurface().segments()
Start(...)
This method adds a AnalyticSurfaceSegment describing the ﬁrst segment of the surface proﬁle.
Prototype
void
Start(const odb_SequenceFloat& origin);
Required arguments
An odb_SequenceFloat specifying the coordinates of start point.
origin
Optional arguments
None.
Return value
None.
Exceptions
None.
Line(...)
This method adds a AnalyticSurfaceSegment describing the line segment of the surface proﬁle.
Prototype
void
Line(const odb_SequenceFloat& endPoint);
Required arguments
An odb_SequenceFloat specifying the coordinates of end point.
endPoint
Optional arguments
None.
3149
OdbSequenceAnalyticSurfaceSegment object

Return value
None.
Exceptions
None.
Circle(...)
This method adds a AnalyticSurfaceSegment describing a circular segment of the surface proﬁle.
Prototype
void
Circle(const odb_SequenceFloat& center,
       const odb_SequenceFloat& endPoint);
Required arguments
An odb_SequenceFloat specifying the coordinates of center of the circular segment.
center
An odb_SequenceFloat specifying the coordinates of end point of the circular segment.
endPoint
Optional arguments
None.
Return value
None.
Exceptions
None.
Parabola(...)
This method adds a AnalyticSurfaceSegment describing a parabolic segment of the surface proﬁle.
Prototype
void
Parabola(const odb_SequenceFloat& middlePoint,
         const odb_SequenceFloat& endPoint);
Required arguments
An odb_SequenceFloat specifying the coordinates of middle point of the parabolic
segment.
middlePoint
An odb_SequenceFloat specifying the coordinates of end point of the parabolic segment.
endPoint
Abaqus Scripting Reference Guide
3150
OdbSequenceAnalyticSurfaceSegment object

Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The OdbSequenceAnalyticSurfaceSegment object has no members.
3151
Abaqus Scripting Reference Guide
OdbSequenceAnalyticSurfaceSegment object

OdbSet object
The set objects are used to identify regions of a model.
Access
odb.parts()[name].elementSets()[name]
odb.parts()[name].nodeSets()[name]
odb.parts()[name].surfaces()[name]
odb.rootAssembly().elementSets()[name]
odb.rootAssembly().instances()[name].elementSets()[name]
odb.rootAssembly().instances()[name].nodeSets()[name]
odb.rootAssembly().instances()[name].surfaces()[name]
odb.rootAssembly().nodeSets()[name]
odb.rootAssembly().surfaces()[name]
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.elementSets()[name]
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.nodeSets()[name]
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.surfaces()[name]
NodeSet(...)
This method creates a node set from an array of OdbMeshNode objects (for part instance-level sets)
Path
odb.parts()[name].NodeSet
odb.rootAssembly().instances()[name].NodeSet
Prototype
odb_Set&
NodeSet(const odb_String& name,
        const odb_SequenceNode& nodes);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
A sequence of OdbMeshNode objects. For example, for a part:
nodes=part1.nodes[1:5]
nodes
Optional arguments
None.
Return value
An OdbSet object.
Abaqus Scripting Reference Guide
3152
OdbSet object

Exceptions
InvalidNameError.
ElementSet(...)
This method creates an element set from an array of OdbMeshElement objects (for part instance-level sets).
Path
odb.parts()[name].ElementSet
odb.rootAssembly().instances()[name].ElementSet
Prototype
odb_Set&
ElementSet(const odb_String& name,
           const odb_SequenceElement& elements);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
A sequence of OdbMeshElement objects. For example, for a part:
elements=instance1.elements[1:5]
elements
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
InvalidNameError.
NodeSet(...)
This method creates a node set.
Path
odb.parts()[name].NodeSet
odb.rootAssembly().instances()[name].NodeSet
Prototype
odb_Set&
NodeSet(const odb_String& name,
        const odb_SequenceInt& nodeLabels);
3153
Abaqus Scripting Reference Guide
OdbSet object

Required arguments
An odb_String specifying the name of the set and the repository key.
name
An odb_SequenceInt specifying the node labels.
nodeLabels
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
None.
NodeSet(...)
This method creates a node set.
Path
odb.rootAssembly().NodeSet
Prototype
odb_Set&
NodeSet(const odb_String& name,
        const odb_SequenceString& instanceNames,
        const odb_SequenceSequenceInt& nodeLabels);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
An odb_SequenceString specifying the namespaces for nodeLabels. The string could
be an empty string to denote the nodeLabels at the assembly level.
instanceNames
An odb_SequenceSequenceInt specifying the node labels.
nodeLabels
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
None.
Abaqus Scripting Reference Guide
3154
OdbSet object

ElementSet(...)
This method creates an element set.
Path
odb.parts()[name].ElementSet
odb.rootAssembly().instances()[name].ElementSet
Prototype
odb_Set&
ElementSet(const odb_String& name,
           const odb_SequenceInt& elementLabels);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
An odb_SequenceInt specifying the element labels.
elementLabels
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
None.
ElementSet(...)
This method creates an element set.
Path
odb.rootAssembly().ElementSet
Prototype
odb_Set&
ElementSet(const odb_String& name,
           const odb_SequenceString& instanceNames,
           const odb_SequenceSequenceInt& elementLabels);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
3155
Abaqus Scripting Reference Guide
OdbSet object

An odb_SequenceString specifying the namespaces for elementLabels. The string
could be an empty string to denote the elementLabels at the assembly level.
instanceNames
An odb_SequenceSequenceInt specifying the element labels.
elementLabels
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
None.
Surface(...)
This method creates a surface set.
Path
odb.parts()[name].Surface
odb.rootAssembly().instances()[name].Surface
Prototype
odb_Set&
Surface(const odb_String& name,
        const odb_SequenceElement& elements,
        const odb_SequenceElementFace& faces);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
An odb_SequenceElement specifying the elements in the surface.
elements
An odb_SequenceElementFace specifying the element faces.
faces
The possible face enumerations depend on the type of element, as described in the following
table:
Face enumerations
Element type
FACE1, FACE2, FACE3, FACE4, FACE5, FACE6
Solid elements
SIDE1, SIDE2
Three-dimensional shell elements
FACE1, FACE2, FACE3, FACE4
Two-dimensional elements
END, END2
Wire elements
Abaqus Scripting Reference Guide
3156
OdbSet object

Optional arguments
None.
Return value
An OdbSet object.
Exceptions
None.
Surface(...)
This method creates a surface set.
Path
odb.parts()[name].Surface
odb.rootAssembly().instances()[name].Surface
Prototype
odb_Set&
Surface(const odb_String& name,
        const odb_SequenceInt& elementLabels,
        const odb_SequenceElementFace& faces);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
An odb_SequenceInt specifying the element labels.
elementLabels
An odb_SequenceElementFace specifying the element faces. An
odb_SequenceSequenceElementFace is required for an assembly set.
faces
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
None.
Surface(...)
This method creates a surface set.
3157
Abaqus Scripting Reference Guide
OdbSet object

Path
odb.rootAssembly().Surface
Prototype
odb_Set&
Surface(const odb_String& name,
        const odb_SequenceString& instanceNames,
        const odb_SequenceSequenceInt& elementLabels,
        const odb_SequenceSequenceElementFace& faces);
Required arguments
An odb_String specifying the name of the set and the repository key.
name
An odb_SequenceString specifying the namespaces for elementLabels. This member is
only valid for assembly sets. The string could be an empty string to denote the
elementLabels at the assembly level.
instanceNames
An odb_SequenceSequenceInt specifying the element labels.
elementLabels
An odb_SequenceSequenceElementFace specifying the element faces.
faces
Optional arguments
None.
Return value
An OdbSet object.
Exceptions
None.
Members
The OdbSet object can have the following members:
Prototype
odb_String name() const;
               odb_SequenceString instanceNames();
               odb_Node nodes(int index);
               const odb_SequenceNode& nodes();
               const odb_SequenceNode& nodes(const odb_String& \
                   instanceName); // For an assembly level set
               odb_Element elements(int index);
               const odb_SequenceElement& elements();
               const odb_SequenceElement& elements(const odb_String& \
                   instanceName); // For an assembly level set
               odb_Enum::odb_ElementFaceEnum faces(int index);
               const odb_SequenceElementFace& faces() ;
               const odb_SequenceElementFace& faces(const odb_String& \
Abaqus Scripting Reference Guide
3158
OdbSet object

                    instanceName); // For an assembly level set
               odb_Enum::odb_SetTypeEnum type() const;
An odb_String specifying the name of the set and the repository key.
name
An odb_SequenceString specifying the namespaces for the nodes, elements, and faces
constituting the set.
instanceNames
A sequence of OdbMeshNode objects.
nodes
A sequence of OdbMeshElement objects.
elements
An odb_SequenceElementFace specifying the element face.
faces
3159
Abaqus Scripting Reference Guide
OdbSet object

OdbStep object
An output database contains the same steps of the model database that originated it.
Access
odb.steps()[name]
Step(...)
This method creates an OdbStep object.
Path
odb.Step
Prototype
odb_Step&
Step(const odb_String& name,
     const odb_String& description,
     odb_Enum::odb_DomainEnum domain,
     double timePeriod,
     const odb_String& previousStepName,
     const odb_String& procedure,
     double totalTime);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the step description.
description
An odb_Enum::odb_DomainEnum specifying the domain of the step. Possible values are
odb_Enum::TIME, odb_Enum::FREQUENCY, odb_Enum::ARC_LENGTH, and
odb_Enum::MODAL.
domain
The type of OdbFrame object that can be created for this step is based on the value of the
domain argument.
Optional arguments
A Double specifying the time period of the step. timePeriod is required if
domain=odb_Enum::TIME; otherwise, this argument is not applicable. The default value is
0.0.
timePeriod
An odb_String specifying the preceding step. If previousStepName is the empty string, the
last step in the repository is used. If previousStepName is not the last step, this will result in
previousStepName
a change to the previousStepName member of the step that was in that position. A special
value 'Initial' refers to the internal initial model step and might be used exclusively for inserting
a new step at the ﬁrst position before any other existing steps. The default value is an empty
string.
Abaqus Scripting Reference Guide
3160
OdbStep object

An odb_String specifying the step procedure. The default value is an empty string.
procedure
A Double specifying the analysis time spend in all the steps previous to this step. The default
value is −1.0.
totalTime
A Boolean specifying the nlgeom value for all steps. The default value is true.
nlgeom
Return value
An OdbStep object.
Exceptions
ValueError: previousStepName is invalid.
If previousStepName is invalid:
getFrame(...)
This method retrieves an OdbFrame object associated with a given frame value.
Prototype
odb_Frame
getFrame(double frameValue,
         odb_Enum::odb_MatchEnum match);
Required arguments
A Double specifying the value at which the frame is required. frameValue can be the
step time or frequency.
frameValue
Optional arguments
An odb_Enum::odb_MatchEnum specifying which frame to return if there is no frame at the exact frame
value. Possible values are odb_Enum::CLOSEST, odb_Enum::BEFORE, odb_Enum::AFTER, and
odb_Enum::EXACT. The default value is odb_Enum::CLOSEST.
match
When match=odb_Enum::CLOSEST, Abaqus returns the closest frame. If the frame value requested is
exactly halfway between two frames, Abaqus returns the frame after the value.
When match=odb_Enum::EXACT, Abaqus raises an exception if the exact frame value does not exist.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the OdbFrame object is not found:
3161
Abaqus Scripting Reference Guide
OdbStep object

getFrame(...)
This method retrieves an OdbFrame object associated with a given load case.
Prototype
odb_Frame
getFrame(const odb_LoadCase& loadCase);
Required arguments
An OdbLoadCase object specifying a load case in the step.
loadCase
Optional arguments
None.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the OdbFrame object is not found:
getFrame(...)
This method retrieves an OdbFrame object associated with a given load case and frame value.
Prototype
odb_Frame
getFrame(const odb_LoadCase& loadCase,
         double frameValue,
         odb_Enum::odb_MatchEnum match);
Required arguments
An OdbLoadCase object specifying a load case in the step.
loadCase
A Double specifying the value at which the frame is required. frameValue can be the
step time or frequency.
frameValue
Optional arguments
An odb_Enum::odb_MatchEnum specifying which frame to return if there is no frame at the exact frame
value. Possible values are odb_Enum::CLOSEST, odb_Enum::BEFORE, odb_Enum::AFTER, and
odb_Enum::EXACT. The default value is odb_Enum::CLOSEST.
match
When match=odb_Enum::CLOSEST, Abaqus returns the closest frame. If the frame value requested is
exactly halfway between two frames, Abaqus returns the frame after the value.
Abaqus Scripting Reference Guide
3162
OdbStep object

When match=odb_Enum::EXACT, Abaqus raises an exception if the exact frame value does not exist.
Return value
An OdbFrame object.
Exceptions
OdbError: Frame not found.
If the OdbFrame object is not found:
getHistoryRegion(...)
This method retrieves a HistoryRegion object associated with a HistoryPoint in the model.
Prototype
odb_HistoryRegion
getHistoryRegion(const odb_HistoryPoint& point,
                 const odb_LoadCase& loadCase);
Required arguments
A HistoryPoint object specifying the point in the model.
point
Optional arguments
An OdbLoadCase object specifying a load case in the step.
loadCase
Return value
A HistoryRegion object.
Exceptions
OdbError: HistoryRegion not found.
If a HistoryRegion object is not found:
setDefaultDeformedField(...)
This method sets the default deformed ﬁeld variable in a step.
Prototype
void
setDefaultDeformedField(const odb_FieldOutput& field);
Required arguments
A FieldOutput object specifying the default deformed ﬁeld variable for visualization.
ﬁeld
3163
Abaqus Scripting Reference Guide
OdbStep object

Optional arguments
None.
Return value
None.
Exceptions
None.
setDefaultField(...)
This method sets the default ﬁeld variable in a step.
Prototype
void
setDefaultField(const odb_FieldOutput& field);
Required arguments
A FieldOutput object specifying the default ﬁeld variable for visualization.
ﬁeld
Optional arguments
None.
Return value
None.
Exceptions
None.
Members
The OdbStep object has members with the same names and descriptions as the arguments to the Step method.
In addition, the OdbStep object can have the following members:
Prototype
odb_String name() const;
odb_String description() const;
odb_Enum::odb_DomainEnum domain() const;
const odb_LoadCaseRepository& loadCases();
float timePeriod() const;
float totalTime() const;
odb_String previousStepName() const;
odb_String procedure() const;
int number() const;
bool nlgeom() const;
odb_Frame frames(int frameNo);
odb_SequenceFrame& frames();
odb_HistoryRegionRepository& historyRegions();
Abaqus Scripting Reference Guide
3164
OdbStep object

double mass() const;
odb_SequenceDouble massCenter() const;
odb_SequenceDouble inertiaAboutCenter() const;
odb_SequenceDouble inertiaAboutOrigin() const;
double acousticMass() const;
odb_SequenceDouble acousticMassCenter() const;
odb_SequenceNodalDofs eliminatedNodalDofs() const;
An Int specifying the step number.
number
A Boolean specifying whether geometric nonlinearity can occur in this step.
nlgeom
A Double specifying the current value of the mass of the model. This does not include
the mass of the acoustic media if any present.
mass
A Double specifying the current value of the mass of the acoustic media of the model.
acousticMass
A sequence of OdbFrame objects.
frames
A repository of HistoryRegion objects.
historyRegions
A repository of OdbLoadCase objects.
loadCases
An odb_SequenceDouble specifying the coordinates of the center of mass.
massCenter
An odb_SequenceDouble specifying the moments and products of inertia about the
center of mass. For 3-D models inertia quantities are written in the following order:
inertiaAboutCenter
I(XX), I(YY), I(ZZ), I(XY), I(XZ), and I(YZ). For 2-D models only I(ZZ) and I(XY)
are outputted.
An odb_SequenceDouble specifying the moments and products of inertia about the
origin of the global coordinate system. For 3-D models inertia quantities are written
inertiaAboutOrigin
in the following order: I(XX), I(YY), I(ZZ), I(XY), I(XZ), and I(YZ). For 2-D models
only I(ZZ) and I(XY) are outputted.
An odb_SequenceDouble specifying the coordinates of the center of mass of the acoustic
media.
acousticMassCenter
3165
Abaqus Scripting Reference Guide
OdbStep object

RebarOrientation object
The RebarOrientation object represents the orientation of the rebar reference.
Access
odb.parts()[name].rebarOrientations(i)
odb.rootAssembly().instances()[name].rebarOrientations(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.rebarOrientations(i)
Members
The RebarOrientation object can have the following members:
Prototype
odb_Set region() const;
odb_DatumCsys csys() const;
odb_Enum::odb_AxisEnum axis() const;
float angle() const;
An odb_Enum::odb_AxisEnum specifying the axis of a cylindrical or spherical datum coordinate
system about which an additional rotation is applied. Possible values are odb_Enum::AXIS_1,
odb_Enum::AXIS_2, and odb_Enum::AXIS_3.
axis
A Float specifying the angle of the additional rotation.
angle
An OdbSet object specifying a region for which the rebar orientation is deﬁned.
region
An OdbDatumCsys object specifying a datum coordinates system.
csys
Abaqus Scripting Reference Guide
3166
RebarOrientation object

SectionCategory object
The SectionCategory object is used to group regions of the model with like sections.
Section deﬁnitions that contain the same number of section points or integration points are grouped together.
To access data for a particular section deﬁnition, use the individual Section objects in the output database. For more
information, see Beam Section proﬁle commands and Section commands.
Access
odb.parts()[name].elements(i).sectionCategory()
odb.parts()[name].elementSets()[name].elements(i).sectionCategory()
odb.parts()[name].nodeSets()[name].elements(i).sectionCategory()
odb.parts()[name].surfaces()[name].elements(i).sectionCategory()
odb.rootAssembly().elements(i).sectionCategory()
odb.rootAssembly().elementSets()[name].elements(i).sectionCategory()
odb.rootAssembly().instances()[name].elements(i).sectionCategory()
odb.rootAssembly().instances()[name].elementSets()[name].elements(i)\
.sectionCategory()
odb.rootAssembly().instances()[name].nodeSets()[name].elements(i)\
.sectionCategory()
odb.rootAssembly().instances()[name].surfaces()[name].elements(i)\
.sectionCategory()
odb.rootAssembly().nodeSets()[name].elements(i).sectionCategory()
odb.rootAssembly().surfaces()[name].elements(i).sectionCategory()
odb.sectionCategories()[name]
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.elements(i).sectionCategory()
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.elementSets()[name].elements(i).sectionCategory()
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.nodeSets()[name].elements(i).sectionCategory()
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.surfaces()[name].elements(i).sectionCategory()
SectionCategory(...)
This method creates a SectionCategory object.
Path
odb.SectionCategory
Prototype
odb_SectionCategory& SectionCategory(const odb_String&
name, const odb_String& description);
Required arguments
An odb_String specifying the name of the category.
name
An odb_String specifying the description of the category.
description
3167
SectionCategory object

Optional arguments
None.
Return value
A SectionCategory object.
Exceptions
None.
Members
The SectionCategory object has members with the same names and descriptions as the arguments to the SectionCategory
method.
In addition, the SectionCategory object can have the following member:
Prototype
odb_String name() const; odb_String description() const; const
odb_SectionPoint& sectionPoints(int index) const; const
odb_SequenceSectionPoint& sectionPoints() const;
A sequence of SectionPoint objects.
sectionPoints
Abaqus Scripting Reference Guide
3168
SectionCategory object

SectionPoint object
The SectionPoint object describes the location of a section point within a section category.
Access
odb.parts()[name].elements(i).sectionCategory().sectionPoints(i)
odb.parts()[name].elementSets()[name].elements(i).sectionCategory()\
.sectionPoints(i)
odb.parts()[name].nodeSets()[name].elements(i).sectionCategory()\
.sectionPoints(i)
odb.parts()[name].surfaces()[name].elements(i).sectionCategory()\
.sectionPoints(i)
odb.rootAssembly().elements(i).sectionCategory().sectionPoints(i)
odb.rootAssembly().elementSets()[name].elements(i).sectionCategory()\
.sectionPoints(i)
odb.rootAssembly().instances()[name].elements(i).sectionCategory()\
.sectionPoints(i)
odb.rootAssembly().instances()[name].elementSets()[name].elements(i)\
.sectionCategory().sectionPoints(i)
odb.rootAssembly().instances()[name].nodeSets()[name].elements(i)\
.sectionCategory().sectionPoints(i)
odb.rootAssembly().instances()[name].surfaces()[name].elements(i)\
.sectionCategory().sectionPoints(i)
odb.rootAssembly().nodeSets()[name].elements(i).sectionCategory()\
.sectionPoints(i)
odb.rootAssembly().surfaces()[name].elements(i).sectionCategory()\
.sectionPoints(i)
odb.sectionCategories()[name].sectionPoints(i)
odb.steps()[name].frames(i).fieldOutputs()[name].locations(i)\
.sectionPoints(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.elements(i).sectionCategory().sectionPoints(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.elementSets()[name].elements(i).sectionCategory().sectionPoints(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.nodeSets()[name].elements(i).sectionCategory().sectionPoints(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.surfaces()[name].elements(i).sectionCategory().sectionPoints(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).sectionPoint()
SectionPoint(...)
This method creates a SectionPoint object.
Path
odb.sectionCategories()[name].SectionPoint
Prototype
odb_SectionPoint& SectionPoint(int number, const
odb_String& description);
3169
SectionPoint object

Required arguments
An Int specifying the number of the section point. See Beam Elements and Shell Elements
for the numbering convention.
number
An odb_String specifying the description of the section point.
description
Optional arguments
None.
Return value
A SectionPoint object.
Exceptions
None.
Members
The SectionPoint object has members with the same names and descriptions as the arguments to the SectionPoint
method.
Prototype
int
number() const; const odb_String description() const;
Abaqus Scripting Reference Guide
3170
SectionPoint object

SectorDefinition object
The SectorDeﬁnition object describes the number of symmetry sectors and axis of symmetry for a cyclic symmetry
model.
Access
odb.sectorDefinition()
Members
The SectorDeﬁnition object has the following members:
Prototype
int numSectors();
const odb_SequenceSequenceFloat symmetryAxis();
An Int specifying the number of sectors in the cyclic symmetry model.
numSectors
An odb_SequenceSequenceFloat specifying the coordinates of two points on the
axis of symmetry.
symmetryAxis
3171
SectorDefinition object

UserData object
The UserData object contains user-deﬁned XY data. The UserData object has no constructor; it is created automatically
when an Odb object is created.
Access
odb.userData()
XYData(...)
This method creates an XYData object from a sequence of X–Y data pairs.
Path
odb.userData().XYData
Prototype
odb_UserData&
XYData(const odb_String& name,
       const odb_SequenceSequenceDouble& data,
       const odb_String& sourceDescription,
       const odb_String& contentDescription,
       const odb_String& positionDescription,
       const odb_String& legendLabel,
       const odb_String& xValuesLabel,
       const odb_String& yValuesLabel,
       const odb_QuantityType& axis1QuantityType,
       const odb_QuantityType& axis2QuantityType);
Required arguments
An odb_String specifying the repository key.
name
An odb_SequenceSequenceDouble specifying the X–Y data pairs.
data
Optional arguments
An odb_String specifying the source of the X–Y data (e.g., “Entered from keyboard”,
“Taken from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty
string.
sourceDescription
An odb_String specifying the content of the X–Y data (e.g., “ﬁeld 1 vs. ﬁeld 2”). The
default value is an empty string.
contentDescription
An odb_String specifying additional information about the X–Y data (e.g., “for whole
model”). The default value is an empty string.
positionDescription
An odb_String specifying the label to be used in the legend. The default value is the
name of the XYData object.
legendLabel
Abaqus Scripting Reference Guide
3172
UserData object

An odb_String specifying the label for the X-values. This value may be overridden if
the X–Y data are combined with other X–Y data. The default value is an empty string.
xValuesLabel
An odb_String specifying the label for the Y-values. This value may be overridden if
the X–Y data are combined with other X–Y data. The default value is an empty string.
yValuesLabel
A QuantityType object specifying the QuantityType object associated to the X -axis1-
values.
axis1QuantityType
A QuantityType object specifying the QuantityType object associated to the Y -axis2-
values.
axis2QuantityType
Return value
An XYData object.
Exceptions
InvalidNameError.
Members
The UserData object can have the following members:
Prototype
odb_UserXYDataRepository& xyDataObjects();
odb_UserXYData& xyDataObjects(const odb_String& xyName);
An odb_String specifying the repository key.
name
An odb_String specifying the source of the X–Y data (e.g., “Entered from keyboard”,
“Taken from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty
string.
sourceDescription
An odb_String specifying the content of the X–Y data (e.g., “ﬁeld 1 vs. ﬁeld 2”). The
default value is an empty string.
contentDescription
An odb_String specifying additional information about the X–Y data (e.g., “for whole
model”). The default value is an empty string.
positionDescription
An odb_String specifying the label for the X-values. This value may be overridden
if the X–Y data are combined with other X–Y data. The default value is an empty string.
xValuesLabel
An odb_String specifying the label for the Y-values. This value may be overridden
if the X–Y data are combined with other X–Y data. The default value is an empty string.
yValuesLabel
A QuantityType object specifying the QuantityType object associated to the X -axis1-
values.
axis1QuantityType
3173
Abaqus Scripting Reference Guide
UserData object

A QuantityType object specifying the QuantityType object associated to the Y -axis2-
values.
axis2QuantityType
An odb_String specifying the label to be used in the legend. The default value is the
name of the XYData object.
legendLabel
A repository of UserXYData objects.
xyDataObjects
An odb_SequenceSequenceDouble specifying the X–Y data pairs.
data
Abaqus Scripting Reference Guide
3174
UserData object

UserXYData object
The UserXYData object stores a sequence of pairs and information about the axes.
Access
Api.userData().xyDataObjects()[name]
addData(...)
This method replaces the contents of the data member of the XYData(...) object.
Prototype
void
addData(const odb_SequenceSequenceDouble& data);
Required arguments
An odb_SequenceSequenceDouble specifying the X–Y data pairs.
data
Optional arguments
None.
Return value
None.
Exceptions
None.
getData()
Returns the contents of the data member of the XYData(...) object.
Prototype
odb_SequenceSequenceFloat
getData();
Arguments
None.
Return value
An odb_SequenceSequenceFloat.
Exceptions
None.
3175
UserXYData object

Members
The UserXYData object can have the following members:
Prototype
odb_String name() const;
odb_String sourceDescription() const;
odb_String contentDescription() const;
odb_String positionDescription() const;
odb_String xAxisLabel() const;
odb_String yAxisLabel() const;
odb_String legendLabel() const;
odb_String description() const;
odb_SequenceSequenceDouble data() const;
An odb_String specifying the repository key.
name
An odb_String specifying the source of the X–Y data (e.g., “Entered from keyboard”,
“Taken from ASCII ﬁle”, “Read from an ODB”, etc.). The default value is an empty
string.
sourceDescription
An odb_String specifying the content of the X–Y data (e.g., “ﬁeld 1 vs. ﬁeld 2”). The
default value is an empty string.
contentDescription
An odb_String specifying additional information about the X–Y data (e.g., “for whole
model”). The default value is an empty string.
positionDescription
An odb_String specifying the label for the X-values. This value may be overridden if
the X–Y data are combined with other X–Y data. The default value is an empty string.
xAxisLabel
An odb_String specifying the label for the Y-values. This value may be overridden if
the X–Y data are combined with other X–Y data. The default value is an empty string.
yAxisLabel
An odb_String specifying the label to be used in the legend. The default value is the
name of the XYData object.
legendLabel
An odb_String specifying the complete description of the XYData object.
description
An odb_SequenceSequenceDouble specifying the X–Y data pairs.
data
Abaqus Scripting Reference Guide
3176
UserXYData object

Top level commands
The Odb commands do the following:
•
Determine if an output database (.odb) ﬁle needs to be upgraded to the current release.
•
Determine the extreme value for an output variable over a number of ﬁelds; for example, over a number of load
cases.
•
Open an existing output database ﬁle and create a new Odb object.
•
Upgrade an output database ﬁle to the current release and write the upgraded output database to a new ﬁle.
•
Fetch the active output database from inside a C++ user subroutine during an analysis run.
•
Determine the actual subtype of a base Section, Proﬁle, or Amplitude object.
•
Cast a base Section, Proﬁle, or Amplitude object to the proper subtype.
isUpgradeRequiredForOdb
This method determines if an output database ﬁle needs to be upgraded to the current release.
Prototype
bool isUpgradeRequiredForOdb(const odb_String& upgradeRequiredOdbPath);
Required arguments
An odb_String specifying the path to an output database ﬁle to test. The test
determines if the output database needs to be upgraded to the current release.
upgradeRequiredOdbPath
Optional arguments
None.
Return value
A Boolean indicating the result of the test. A value of True indicates that the output database needs to be upgraded
to the current release.
Exceptions
None.
maxEnvelope
Retrieve the maximum value of an output variable over a number of ﬁelds.
Prototype
odb_SequenceFieldOutput maxEnvelope(
    const odb_SequenceFieldOutput & inputFields);
odb_SequenceFieldOutput maxEnvelope(
    const odb_SequenceFieldOutput & inputFields,
    odb_Enum::odb_InvariantEnum invariant);
odb_SequenceFieldOutput maxEnvelope(
3177
Top level commands

    const odb_SequenceFieldOutput & inputFields,
    const odb_String& componentLabel);
Required arguments
Argument
An odb_SequenceFieldoutput object containing all the ﬁeldOutput objects from which the maximum value will be computed.
A SymbolicConstant specifying the invariant or component label to be used when comparing vectors or tensors. Possible values are
•
odb_Enum::MAGNITUDE
•
odb_Enum::MISES
•
odb_Enum::TRESCA
•
odb_Enum::PRESS
•
odb_Enum::INV3
•
odb_Enum::MAX_PRINCIPAL
•
odb_Enum::MID_PRINCIPAL
•
odb_Enum::MIN_PRINCIPAL
You must provide either this argument or the following argument if the ﬁeld is a vector or tensor.
An odb_String specifying the component of the tensor or vector to be used for selecting the maximum value.
Optional arguments
None.
Return value
An odb_SequenceFieldOutput object. The ﬁrst ﬁeldOutput object contains the maximum value. The second
ﬁeldOutput object contains the index of the ﬁeld containing the maximum value. The index follows the order
in which ﬁelds are positioned in the list of ﬁeldOutput objects provided as the argument to the function.
Exceptions
OdbError
This function takes no keyword arguments.
TypeError
minEnvelope
Retrieve the minimum value of an output variable over a number of ﬁelds.
Prototype
odb_SequenceFieldOutput minEnvelope(
    const odb_SequenceFieldOutput & inputFields);
odb_SequenceFieldOutput minEnvelope(
    const odb_SequenceFieldOutput & inputFields,
    odb_Enum::odb_InvariantEnum invariant);
odb_SequenceFieldOutput minEnvelope(
    const odb_SequenceFieldOutput & inputFields,
    const odb_String& componentLabel);
Abaqus Scripting Reference Guide
3178
Top level commands

Required arguments
Argument
An odb_SequenceFieldoutput object containing all the ﬁeldOutput objects from which the maximum value will be computed.
A SymbolicConstant specifying the invariant or component label to be used when comparing vectors or tensors. Possible values are
•
odb_Enum::MAGNITUDE
•
odb_Enum::MISES
•
odb_Enum::TRESCA
•
odb_Enum::PRESS
•
odb_Enum::INV3
•
odb_Enum::MAX_PRINCIPAL
•
odb_Enum::MID_PRINCIPAL
•
odb_Enum::MIN_PRINCIPAL
You must provide either this argument or the following argument if the ﬁeld is a vector or tensor.
An odb_String specifying the component of the tensor or vector to be used for selecting the minimum value.
Optional arguments
None.
Return value
An odb_SequenceFieldOutput object. The ﬁrst ﬁeldOutput object contains the minimum value. The second
ﬁeldOutput object contains the index of the ﬁeld containing the minimum value. The index follows the order in
which ﬁelds are positioned in the list of ﬁeldOutput objects provided as the argument to the function.
Exceptions
OdbError
This function takes no keyword arguments.
TypeError
openOdb
This method opens an existing output database (.odb) ﬁle and creates a new Odb object.
Prototype
odb_Odb& openOdb(const odb_String& path);
Required arguments
A odb_String specifying the path to an existing output database (.odb) ﬁle.
path
3179
Abaqus Scripting Reference Guide
Top level commands

Optional arguments
A Boolean specifying whether the ﬁle will permit only read access or both read and
write access. The initial value is False, indicating that both read and write access will
be permitted.
readOnly
A Boolean specifying whether the ﬁle will permit access to sets speciﬁed as Internal
in the database. The initial value is False, indicating that internal sets will not be read.
readInternalSets
Return value
An Odb object.
Exceptions
OdbError: The database is from a previous release of
Abaqus. Run abaqus upgrade
If the output database was generated by a previous
release of Abaqus and needs upgrading:
-job <newFilename> -odb <oldFileName>
to upgrade it.
OdbError: Abaqus installation must be upgraded before
this output database can be opened.
If the output database was generated by a newer
release of Abaqus, and the installation of Abaqus
needs upgrading:
openOdb
This method opens an existing output database (.odb) ﬁle and creates a new Odb object.
Prototype
odb_Odb& openOdb(const odb_String& name,
const odb_String& path, bool readOnly, bool checkPhase, bool 
readInternalSets, STRMODE_DECL);
Required arguments
A odb_String specifying the repository key.
name
Optional arguments
A odb_String specifying the path to an existing output database (.odb) ﬁle.
path
A Boolean specifying whether the ﬁle will permit only read access or both read and
write access. The initial value is False, indicating that both read and write access will
be permitted.
readOnly
A Boolean specifying whether an error message will be printed if another process is
modifying the database. The initial value is True, indicating an error message will be
printed.
checkPhase
Abaqus Scripting Reference Guide
3180
Top level commands

A Boolean specifying whether the ﬁle will permit access to sets speciﬁed as Internal
in the database. The initial value is False, indicating that internal sets will not be read.
readInternalSets
A constant specifying whether the current locale encoding should be retained. If the
ODB path uses only ASCII characters or if the path is known to be encoded in UTF-8,
this argument need not be deﬁned.
STRMODE_DECL
Return value
An Odb object.
Exceptions
OdbError: The database is from a previous release of
Abaqus. Run abaqus upgrade
If the output database was generated by a previous
release of Abaqus and needs upgrading:
-job <newFilename> -odb <oldFileName>
to upgrade it.
OdbError: Abaqus installation must be upgraded before
this output database can be opened.
If the output database was generated by a newer
release of Abaqus, and the installation of Abaqus
needs upgrading:
AbaqusException: Cannot open ﬁle <ﬁlename>.
If the ﬁle is not a valid database:
upgradeOdb
This method upgrades an existing Odb object to the current release and writes the upgraded version of the Odb
object to a ﬁle. In addition, Abaqus/CAE writes information about the status of the upgrade to a log (*.log)
ﬁle.
Prototype
void upgradeOdb(const odb_String& existingOdbPath,
const odb_String& upgradedOdbPath);
Required arguments
An odb_String specifying the path to the ﬁle containing the output database
to be upgraded.
existingOdbPath
An odb_String specifying the path to the ﬁle that will contain the upgraded
output database.
upgradedOdbPath
Optional arguments
None.
Return value
None.
3181
Abaqus Scripting Reference Guide
Top level commands

Exceptions
OdbError: cannot convert database
If the output database upgrade fails:
getActiveOdb
This method is intended to be used inside an Abaqus/Standard or Abaqus/Explicit user subroutine written in
C++. It fetches the object that is in use by the analysis product and enables a user to modify it inside the user
subroutine. This method will throw an exception if more than one output database is currently open.
Prototype
odb_Odb& getActiveOdb();
Arguments
None.
Return value
An object.
Exceptions
OdbError: The getActiveOdb method can only be called if
a single odb ﬁle is open.
If more than one output database ﬁle is open:
OdbError: No odb ﬁles are open.
If no output database ﬁles are open:
odb_IsA
This method takes a type and a base object and returns a boolean indicating whether the subtype of the supplied
base object matches the type argument. This method is useful when fetching base Section, Proﬁle, or Amplitude
objects from their containers. If, for example, the user wants to determine if the base odb_Section object returned
by the odb_SectionContainer is actually of type odb_BeamSection, he would call this method with the
odb_BeamSection as the type and the odb_Section object as the base object.
Prototype
bool odb_IsA(TYPE, const BASETYPE& obj);
Required arguments
The potential type of the base class object.
TYPE
The base object being tested for the TYPE.
obj
Optional arguments
None.
Abaqus Scripting Reference Guide
3182
Top level commands

Return value
A Boolean.
Exceptions
None.
odb_dynamicCast
This method casts a supplied Section, Proﬁle, or Amplitude to the speciﬁed subtype. This method is useful for
retrieving the base objects out of the appropriate containers and casting them to the subtype to access the data
members for that particular subtype. This method will throw an odb_BaseException if the cast is not possible.
Prototype
const TYPE& returnObj = odb_dynamicCast(TYPE, const BASETYPE& obj);
Required arguments
The potential type of the base class object.
TYPE
The base object being case to TYPE.
obj
Optional arguments
None.
Return value
An object of type TYPE.
Exceptions
Bad cast: From BASETYPE To TYPE.
If the cast is not possible:
3183
Abaqus Scripting Reference Guide
Top level commands

Property and Section commands
The Property commands are used to create and manage reinforcements and to assign properties to a part or part
instance. The Section commands are used to create sections and proﬁles with their associated properties and
behavior.
The various section objects are all derived from the Section object. The various proﬁle objects are all derived
from the Proﬁle object. See Property commands for the property assignment commands.
In this section:
•
SectionAssignment object
•
Section object
•
AcousticInfiniteSection object
•
AcousticInterfaceSection object
•
BeamSection object
•
CohesiveSection object
•
CompositeShellSection object
•
CompositeSolidSection object
•
ConnectorSection object
•
EulerianSection object
•
GasketSection object
•
GeneralStiffnessSection object
•
GeometryShellSection object
•
HomogeneousShellSection object
•
HomogeneousSolidSection object
•
LayerProperties object
•
MembraneSection object
•
MPCSection object
•
PEGSection object
•
RebarLayers object
•
SectionLayer object
•
ShellSection object
•
SolidSection object
•
SurfaceSection object
•
TransverseShearBeam object
•
TransverseShearShell object
•
TrussSection object
Abaqus Scripting Reference Guide
3184

SectionAssignment object
The SectionAssignment object is used to specify a section assignment on an assembly or part. Section assignments on
the assembly are limited to connector elements only.
Access
odb.parts()[name].sectionAssignments(i)
odb.rootAssembly().instances()[name].sectionAssignments(i)
odb.rootAssembly().sectionAssignments(i)
odb.steps()[name].frames(i).fieldOutputs()[name].values(i).instance()\
.sectionAssignments(i)
Members
The SectionAssignment object has members with the same names and descriptions as the arguments to the
SectionAssignment  method.
In addition, the SectionAssignment object has the following member:
Prototype
 odb_Set region() const;
            odb_String sectionName() const;
            double offset() const;
A Boolean specifying whether the section assignment is suppressed or not. The default
value is false.
suppressed
3185
SectionAssignment object

Section object
The Section object deﬁnes the properties of a section. The Section object is the abstract base type for other Section
objects. The Section object has no explicit constructor. The methods and members of the Section object are common
to all objects derived from the Section.
Access
sectionApi.sections()[name]
Members
The Section object has the following member:
Prototype
odb_String name() const;
An odb_String specifying the repository key.
name
Abaqus Scripting Reference Guide
3186
Section object

AcousticInfiniteSection object
The AcousticInﬁniteSection object deﬁnes the properties of an acoustic section.
The AcousticInﬁniteSection object is derived from the Section object.
Access
sectionApi.sections()[name]
AcousticInfiniteSection(...)
This method creates an AcousticInﬁniteSection object.
Path
sectionApi.AcousticInfiniteSection
Prototype
odb_AcousticInfiniteSection&
AcousticInfiniteSection(const odb_String& name,
                        const odb_String& material,
                        double thickness,
                        int order);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the name of the material.
material
Optional arguments
A Double specifying the thickness of the section. Possible values are thickness  0.0. The default
value is 1.0.
thickness
An Int specifying the number of ninth-order polynomials that will be used to resolve the variation
of the acoustic ﬁeld in the inﬁnite direction. Possible values are 0 order  10. The default
value is 10.
order
Return value
An AcousticInﬁniteSection object.
Exceptions
InvalidNameError and RangeError.
3187
AcousticInfiniteSection object

Members
The AcousticInﬁniteSection object has members with the same names and descriptions as the arguments to the
AcousticInﬁniteSection  method.
Corresponding analysis keywords
•
*SOLID SECTION
Abaqus Scripting Reference Guide
3188
AcousticInfiniteSection object

AcousticInterfaceSection object
The AcousticInterfaceSection object deﬁnes the properties of an acoustic section.
The AcousticInterfaceSection object is derived from the Section object.
Access
sectionApi.sections()[name]
AcousticInterfaceSection(...)
This method creates an AcousticInterfaceSection object.
Path
sectionApi.AcousticInterfaceSection
Prototype
odb_AcousticInterfaceSection&
AcousticInterfaceSection(const odb_String& name,
                         double thickness);
Required arguments
An odb_String specifying the repository key.
name
Optional arguments
A Double specifying the thickness of the section. Possible values are thickness  0.0. The
default value is 1.0.
thickness
Return value
An AcousticInterfaceSection object.
Exceptions
InvalidNameError and RangeError.
Members
The AcousticInterfaceSection object has members with the same names and descriptions as the arguments to the
AcousticInterfaceSection  method.
Corresponding analysis keywords
•
*INTERFACE
3189
AcousticInterfaceSection object

BeamSection object
The BeamSection object deﬁnes the properties of a beam section.
The BeamSection object is derived from the Section object.
Access
sectionApi.sections()[name]
BeamSection(...)
This method creates a BeamSection object.
Path
sectionApi.BeamSection
Prototype
odb_BeamSection&
BeamSection(const odb_String& name,
            const odb_String& integration,
            const odb_String& profile,
            double poissonRatio,
            bool thermalExpansion,
            bool temperatureDependency,
            int dependencies,
            odb_Union density,
            odb_Union referenceTemperature,
            const odb_String& temperatureVar,
            double alphaDamping,
            double betaDamping,
            double compositeDamping,
            bool useFluidInertia,
            const odb_String& submerged,
            odb_Union fluidMassDensity,
            odb_Union crossSectionRadius,
            double lateralMassCoef,
            double axialMassCoef,
            double massOffsetX,
            double massOffsetY,            
            const odb_String& material,
            const odb_SequenceSequenceDouble& table,
            const odb_SequenceSequenceDouble& outputPts,
            const odb_SequenceDouble& centroid,
            const odb_SequenceDouble& shearCenter);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the integration method for the section. Possible values are
"BEFORE_ANALYSIS" and "DURING_ANALYSIS".
integration
An odb_String specifying the name of the proﬁle.
proﬁle
Abaqus Scripting Reference Guide
3190
BeamSection object

Optional arguments
A Double specifying the Poisson's ratio of the section. The default value is 0.0.
poissonRatio
A Boolean specifying whether to use thermal expansion data. The default value is false.
thermalExpansion
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
The string "NONE" or a Double specifying the density of the section. The default value
is "NONE".
density
The string "NONE" or a Double specifying the reference temperature of the section. The
default value is "NONE".
referenceTemperature
An odb_String specifying the temperature variation for the section. Possible values are
"LINEAR" and "INTERPOLATED". The default value is "LINEAR".
temperatureVar
A Double specifying the 
 factor to create mass proportional damping in
direct-integration dynamics. The default value is 0.0.
alphaDamping
A Double specifying the 
 factor to create stiffness proportional damping in
direct-integration dynamics. The default value is 0.0.
betaDamping
A Double specifying the fraction of critical damping to be used in calculating composite
damping factors for the modes (for use in modal dynamics). The default value is 0.0.
compositeDamping
A Boolean specifying whether added mass effects will be simulated. The default value
is false.
useFluidInertia
An odb_String specifying whether the section is either full submerged or half submerged.
This argument applies only when useFluidInertia = True. Possible values are "FULLY"
and "HALF". The default value is "FULLY".
submerged
The string "NONE" or a Double specifying the mass density of the ﬂuid. This argument
applies only when useFluidInertia = True and must be speciﬁed in that case. The default
value is "NONE".
ﬂuidMassDensity
The string "NONE" or a Double specifying the radius of the cylindrical cross-section.
This argument applies only when useFluidInertia = True and must be speciﬁed in that
case. The default value is "NONE".
crossSectionRadius
A Double specifying the added mass coefﬁcient, 
, for lateral motions of the beam.
This argument applies only whenuseFluidInertia = True. The default value is 1.0.
lateralMassCoef
3191
Abaqus Scripting Reference Guide
BeamSection object

A Double specifying the added mass coefﬁcient, 
, for motions along the axis of
the beam. This argument affects only the term added to the free end(s) of the beam, and
applies only when useFluidInertia = True. The default value is 0.0.
axialMassCoef
A Double specifying the local 1-coordinate of the center of the cylindrical cross-section
with respect to the beam cross-section. This argument applies only when useFluidInertia
= True. The default value is 0.0.
massOffsetX
A Double specifying the local 2-coordinate of the center of the cylindrical cross-section
with respect to the beam cross-section. This argument applies only when useFluidInertia
= True. The default value is 0.0.
massOffsetY
An odb_String specifying the name of the material. The default value is an empty string.
The material is required when integration is "DURING_ANALYSIS".
material
An odb_SequenceSequenceDouble specifying the items described below. The default
value is an empty sequence.
table
An odb_SequenceSequenceDouble specifying the positions at which output is requested.
The default value is an empty sequence.
outputPts
An odb_SequenceDouble specifying the X–Y coordinates of the centroid. The default
value is (0.0, 0.0).
centroid
An odb_SequenceDouble specifying the X–Y coordinates of the shear center. The default
value is (0.0, 0.0).
shearCenter
Table data
The table data specify the following:
•
E, the Young's modulus of the section.
•
G, the torsional shear modulus of the section.
•
Thermal expansion coefﬁcient, if using thermal expansion.
•
Temperature, if the data depend on temperature.
•
Value of the ﬁrst ﬁeld variable, if the data depend on ﬁeld variables.
•
Value of the second ﬁeld variable.
•
Etc.
Return value
A BeamSection object.
Exceptions
None.
Abaqus Scripting Reference Guide
3192
BeamSection object

Members
The BeamSection object has members with the same names and descriptions as the arguments to the BeamSection
method.
In addition, the BeamSection object can have the following member:
Prototype
odb_TransverseShearBeam beamTransverseShear() const;
A TransverseShearBeam object specifying the transverse shear stiffness
properties.
beamTransverseShear
Corresponding analysis keywords
•
*BEAM GENERAL SECTION
•
*BEAM SECTION
•
*BEAM FLUID INERTIA
•
*CENTROID
•
*DAMPING
•
*SHEAR CENTER
•
*SECTION POINTS
3193
Abaqus Scripting Reference Guide
BeamSection object

CohesiveSection object
The CohesiveSection object deﬁnes the properties of a cohesive section.
The CohesiveSection object is derived from the Section object.
Access
sectionApi.sections()[name]
CohesiveSection(...)
This method creates a CohesiveSection object.
Path
sectionApi.CohesiveSection
Prototype
odb_CohesiveSection&
CohesiveSection(const odb_String& name,
                const odb_String& response,
                const odb_String& material,
                const odb_String& initialThicknessType,
                double initialThickness,
                odb_Union outOfPlaneThickness);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the geometric assumption that deﬁnes the constitutive behavior
of the cohesive elements. Possible values are "TRACTION_SEPARATION",
"CONTINUUM", and "GASKET".
response
An odb_String specifying the name of the material.
material
Optional arguments
An odb_String specifying the method used to compute the initial thickness. Possible values
are:
initialThicknessType
•
"SOLVER_DEFAULT", specifying that Abaqus will use the analysis product default
•
"GEOMETRY", specifying that Abaqus will compute the thickness from the nodal
coordinates of the elements.
•
"SPECIFY", specifying that Abaqus will use the value given for initialThickness
The default value is "SOLVER_DEFAULT".
A Double specifying the initial thickness for the section. The initialThickness argument
applies only when initialThicknessType="SPECIFY". The default value is 1.0.
initialThickness
Abaqus Scripting Reference Guide
3194
CohesiveSection object

The string "NONE" or a Double specifying the out-of-plane thickness for the section. The
default value is "NONE".
outOfPlaneThickness
Return value
A CohesiveSection object.
Exceptions
RangeError and InvalidNameError.
Members
The CohesiveSection object has members with the same names and descriptions as the arguments to the CohesiveSection
method.
Corresponding analysis keywords
•
*COHESIVE SECTION
3195
Abaqus Scripting Reference Guide
CohesiveSection object

CompositeShellSection object
The CompositeShellSection object deﬁnes the properties of a composite shell section.
The CompositeShellSection object is derived from the GeometryShellSection object.
Access
sectionApi.sections()[name]
CompositeShellSection(...)
This method creates a CompositeShellSection object.
Path
sectionApi.CompositeShellSection
Prototype
odb_CompositeShellSection& CompositeShellSection(const odb_String& name,
           const kseO_SequenceSectionLayer& layup,
           bool symmetric,
           odb_String layupName,
           odb_String thicknessType,
           bool preIntegrate,
           odb_String poissonDefinition,
           double poisson,
           odb_String integrationRule,
           odb_String temperature,
           odb_String simplification,
           odb_Union nTemp,
           odb_Union thicknessModulus,
           bool useDensity,
           double density,
           odb_String thicknessField,
           odb_String nodalThicknessField);
Required arguments
An odb_String specifying the repository key.
name
A sequence of SectionLayer objects specifying the shell cross-section.
layup
Optional arguments
A Boolean specifying whether or not the layup should be made symmetric by the analysis.
The default value is false.
symmetric
An odb_String specifying the layup name for this section. The default value is an empty string.
layupName
An odb_String specifying the distribution used for deﬁning the thickness of the elements.
Possible values are "UNIFORM", "ANALYTICAL_FIELD", "DISCRETE_FIELD",
thicknessType
Abaqus Scripting Reference Guide
3196
CompositeShellSection object

"NODAL_ANALYTICAL_FIELD", and "NODAL_DISCRETE_FIELD". The default value
is "UNIFORM".
A Boolean specifying whether the shell section properties are speciﬁed by the user prior to
the analysis (true) or integrated during the analysis (false). The default value is false.
preIntegrate
An odb_String specifying whether to use the default value for the Poisson's ratio. Possible
values are:
poissonDeﬁnition
•
"DEFAULT", specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an Abaqus/Explicit
analysis.
•
"VALUE", specifying that the Poisson's ratio used in the analysis is the value provided
in poisson.
The default value is "DEFAULT".
A Double specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This
argument is valid only when poissonDeﬁnition="VALUE". The default value is 0.5.
poisson
An odb_String specifying the shell section integration rule. Possible values are "SIMPSON"
and "GAUSS". The default value is "SIMPSON".
integrationRule
An odb_String specifying the mode used for temperature and ﬁeld variable input across the
section thickness. Possible values are "GRADIENT" and "POINTWISE". The default value
is "GRADIENT".
temperature
An odb_String specifying the mechanical idealization used for the section calculations. This
member is only applicable when preIntegrate is set to true. Possible values are
idealization
"NO_IDEALIZATION", "SMEAR_ALL_LAYERS", "MEMBRANE", and "BENDING".
The default value is "NO_IDEALIZATION".
The string "NONE" or an Int specifying the number of temperature points to be input. This
argument is valid only when temperature="POINTWISE". The default value is "NONE".
nTemp
The string "NONE" or a Double specifying the effective thickness modulus. This argument
is relevant only for continuum shells and must be used in conjunction with the argument
poisson. The default value is "NONE".
thicknessModulus
A Boolean specifying whether or not to use the value of density. The default value is false.
useDensity
A Double specifying the value of density to apply to this section. The default value is 0.0.
density
An odb_String specifying the name of the AnalyticalField or DiscreteField object used to
deﬁne the thickness of the shell elements. The thicknessField argument applies only when
thicknessField
thicknessType="ANALYTICAL_FIELD" or thicknessType="DISCRETE_FIELD". The
default value is an empty string.
An odb_String specifying the name of the AnalyticalField or DiscreteField object used to
deﬁne the thickness of the shell elements at each node. The nodalThicknessField argument
nodalThicknessField
3197
Abaqus Scripting Reference Guide
CompositeShellSection object

applies only when thicknessType="NODAL_ANALYTICAL_FIELD" or
thicknessType="NODAL_DISCRETE_FIELD". The default value is an empty string.
Return value
A CompositeShellSection object.
Exceptions
None.
Members
The CompositeShellSection object has members with the same names and descriptions as the arguments to the
CompositeShellSection  method.
In addition, the CompositeShellSection object can have the following members:
Prototype
odb_RebarLayers rebarLayers() const;
odb_TransverseShearShell transverseShear() const;
A RebarLayers object specifying reinforcement properties.
rebarLayers
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Corresponding analysis keywords
•
*SHELL SECTION
•
*SHELL GENERAL SECTION
Abaqus Scripting Reference Guide
3198
CompositeShellSection object

CompositeSolidSection object
The CompositeSolidSection object deﬁnes the properties of a composite solid section.
The CompositeSolidSection object is derived from the Section object.
Access
sectionApi.sections()[name]
CompositeSolidSection(...)
This method creates a CompositeSolidSection object.
Path
sectionApi.CompositeSolidSection
Prototype
odb_CompositeSolidSection&
CompositeSolidSection(const odb_String& name,
                      const odb_SequenceSectionLayer& layup,
                      bool symmetric,
                      const odb_String& layupName);
Required arguments
An odb_String specifying the repository key.
name
A sequence of SectionLayer objects specifying the solid cross-section.
layup
Optional arguments
A Boolean specifying whether or not the layup should be made symmetric by the analysis.
The default value is false.
symmetric
An odb_String specifying the layup name for this section. The default value is an empty
string.
layupName
Return value
A CompositeSolidSection object.
Exceptions
None.
Members
The CompositeSolidSection object has members with the same names and descriptions as the arguments to the
CompositeSolidSection  method.
3199
CompositeSolidSection object

Corresponding analysis keywords
•
*SOLID SECTION
Abaqus Scripting Reference Guide
3200
CompositeSolidSection object

ConnectorSection object
A ConnectorSection object describes the connection type and the behavior of a connector.
The ConnectorSection object is derived from the Section object.
Access
sectionApi.sections()[name]
ConnectorSection(...)
This method creates a ConnectorSection object.
Path
sectionApi.ConnectorSection
Prototype
odb_ConnectorSection&
ConnectorSection(const odb_String& name,
  const odb_String& assembledType,
  const odb_String& rotationalType,
  const odb_String& translationalType,
  const odb_String& integration,
  odb_Union u1ReferenceLength,
  odb_Union u2ReferenceLength,
  odb_Union u3ReferenceLength,
  odb_Union ur1ReferenceAngle,
  odb_Union ur2ReferenceAngle,
  odb_Union ur3ReferenceAngle,
  odb_Union massPerLength,
  odb_Union contactAngle,
  double materialFlowFactor,
  bool regularize,
  bool defaultTolerance,
  double regularization,
  const odb_String& extrapolation,
  const odb_SequenceConnectorBehaviorOption& behaviorOptions);
Required arguments
An odb_String specifying the repository key.
name
Optional arguments
An odb_String specifying the assembled connection type. Possible values are:
assembledType
•
"NONE"
•
"BEAM"
•
"BUSHING"
•
"CVJOINT"
•
"CYLINDRICAL"
3201
ConnectorSection object

•
"HINGE"
•
"PLANAR"
•
"RETRACTOR"
•
"SLIPRING"
•
"TRANSLATOR"
•
"UJOINT"
•
"WELD"
The default value is "NONE".
You cannot include the assembledType argument if translationalType or rotationalType are
given a value other than "NONE". At least one of the arguments assembledType,
translationalType, or rotationalType must be given a value other than "NONE".
An odb_String specifying the basic rotational connection type. Possible values are:
rotationalType
•
"NONE"
•
"ALIGN"
•
"CARDAN"
•
"CONSTANT_VELOCITY"
•
"EULER"
•
"FLEXION_TORSION"
•
"FLOW_CONVERTER"
•
"PROJECTION_FLEXION_TORSION"
•
"REVOLUTE"
•
"ROTATION"
•
"ROTATION_ACCELEROMETER"
•
"UNIVERSAL"
The default value is "NONE".
You cannot include the rotationalType argument if assembledType is given a value other
than "NONE". At least one of the arguments assembledType, translationalType, or
rotationalType must be given an value other than "NONE".
An odb_String specifying the basic translational connection type. Possible values are:
translationalType
•
"NONE"
•
"ACCELEROMETER"
•
"AXIAL"
•
"CARTESIAN"
•
"JOIN"
•
"LINK"
•
"PROJECTION_CARTESIAN"
•
"RADIAL_THRUST"
Abaqus Scripting Reference Guide
3202
ConnectorSection object

•
"SLIDE_PLANE"
•
"SLOT"
The default value is "NONE".
You cannot include the translationalType argument if assembledType is given a value other
than "NONE". At least one of the arguments assembledType, translationalType, or
rotationalType must be given an value other than "NONE".
An odb_String specifying the time integration scheme to use for analysis. This argument is
applicable only to an Abaqus/Explicit analysis. Possible values are "UNSPECIFIED",
"IMPLICIT", and "EXPLICIT". The default value is "UNSPECIFIED".
integration
The string "NONE" or a Double specifying the reference length associated with constitutive
response for the ﬁrst component of relative motion. The default value is "NONE".
u1ReferenceLength
The string "NONE" or a Double specifying the reference length associated with constitutive
response for the second component of relative motion. The default value is "NONE".
u2ReferenceLength
The string "NONE" or a Double specifying the reference length associated with constitutive
response for the third component of relative motion. The default value is "NONE".
u3ReferenceLength
The string "NONE" or a Double specifying the reference angle in degrees associated with
constitutive response for the fourth component of relative motion. The default value is
"NONE".
ur1ReferenceAngle
The string "NONE" or a Double specifying the reference angle in degrees associated with
constitutive response for the ﬁfth component of relative motion. The default value is "NONE".
ur2ReferenceAngle
The string "NONE" or a Double specifying the reference angle in degrees associated with
constitutive response for the sixth component of relative motion. The default value is "NONE".
ur3ReferenceAngle
The string "NONE" or a Double specifying the mass per unit reference length of belt material.
This argument is applicable only when assembledType="SLIPRING", and must be speciﬁed
in that case. The default value is "NONE".
massPerLength
The string "NONE" or a Double specifying the contact angle made by the belt wrapping
around node b. This argument is applicable only to an Abaqus/Explicit analysis, and only
when assembledType="SLIPRING". The default value is "NONE".
contactAngle
A Double specifying the scaling factor for material ﬂow at node b. This argument is applicable
only when assembledType="RETRACTOR" or rotationalType="FLOW_CONVERTER".
The default value is 1.0.
materialFlowFactor
A Boolean specifying whether or not all tabular data associated with the behaviorOptions
will be regularized. This argument is applicable only for an Abaqus/Explicit analysis. The
default value is true.
regularize
3203
Abaqus Scripting Reference Guide
ConnectorSection object

A Boolean specifying whether or not the default regularization tolerance will be used for all
tabular data associated with the behaviorOptions. This argument is applicable only for an
Abaqus/Explicit analysis and only if regularize=true. The default value is true.
defaultTolerance
A Double specifying the regularization increment to be used for all tabular data associated
with the behaviorOptions. This argument is applicable only for an Abaqus/Explicit analysis
and only if regularize=true and defaultTolerance=false. The default value is 0.03.
regularization
An odb_String specifying the extrapolation technique to be used for all tabular data associated
with the behaviorOptions. Possible values are "CONSTANT" and "LINEAR". The default
value is "CONSTANT".
extrapolation
A sequence of ConnectorBehaviorOption objects.
behaviorOptions
Return value
A ConnectorSection object.
Exceptions
InvalidNameError and RangeError.
getVertices()
This method returns a sequence consisting of tuples of coordinates of the connector's endpoints.
Path
sectionApi.getVertices
Prototype
odb_ConnectorSection&
getVertices();
Arguments
None.
Return value
A sequence of tuples of ﬂoats.
Exceptions
None.
Members
The ConnectorSection object has members with the same names and descriptions as the arguments to the
ConnectorSection  method.
Abaqus Scripting Reference Guide
3204
ConnectorSection object

Corresponding analysis keywords
•
*CONNECTOR SECTION
•
*CONNECTOR BEHAVIOR
•
*CONNECTOR CONSTITUTIVE REFERENCE
3205
Abaqus Scripting Reference Guide
ConnectorSection object

EulerianSection object
The EulerianSection object deﬁnes the properties of a Eulerian section.
The EulerianSection object is derived from the Section object.
Access
sectionApi.sections()[name]
EulerianSection(...)
This method creates a EulerianSection object.
Path
sectionApi.EulerianSection
Prototype
odb_EulerianSection&
EulerianSection(const odb_String& name,
                const odb_StringRepository& data);
Required arguments
An odb_String specifying the repository key.
name
A repository of String objects specifying a dictionary mapping Material instance names to
Material names. Internally the speciﬁed mapping gets sorted on Material instance name.
data
Optional arguments
None.
Return value
An EulerianSection object.
Exceptions
None.
Members
The EulerianSection object has members with the same names and descriptions as the arguments to the EulerianSection
method.
Corresponding analysis keywords
•
*EULERIAN SECTION
Abaqus Scripting Reference Guide
3206
EulerianSection object

GasketSection object
The GasketSection object deﬁnes the properties of a gasket section.
The GasketSection object is derived from the Section object.
Access
sectionApi.sections()[name]
GasketSection(...)
This method creates a GasketSection object.
Path
sectionApi.GasketSection
Prototype
odb_GasketSection&
GasketSection(const odb_String& name,
              const odb_String& material,
              double crossSection,
              double initialGap,
              odb_Union initialThickness,
              double initialVoid,
              odb_Union stabilizationStiffness);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the name of the material of which the gasket is made or material
that deﬁnes gasket behavior.
material
Optional arguments
A Double specifying the cross-sectional area, width, or out-of-plane thickness, if applicable,
depending on the gasket element type. The default value is 1.0.
crossSection
A Double specifying the initial gap. The default value is 0.0.
initialGap
The string "DEFAULT" or a Double specifying the initial gasket thickness. If "DEFAULT"
is speciﬁed, the initial thickness is determined using nodal coordinates. The default value
is "DEFAULT".
initialThickness
A Double specifying the initial void. The default value is 0.0.
initialVoid
The string "DEFAULT" or a Double specifying the default stabilization stiffness used in
all but link elements to stabilize gasket elements that are not supported at all nodes, such
stabilizationStiffness
as those that extend outside neighboring components. If "DEFAULT" is speciﬁed, a value
3207
GasketSection object

is used equal to 10–9 times the initial compressive stiffness in the thickness direction. The
default value is "DEFAULT".
Return value
A GasketSection object.
Exceptions
InvalidNameError and ValueError.
Members
The GasketSection object has members with the same names and descriptions as the arguments to the GasketSection
method.
Corresponding analysis keywords
•
*GASKET SECTION
Abaqus Scripting Reference Guide
3208
GasketSection object

GeneralStiffnessSection object
The GeneralStiffnessSection object deﬁnes the properties of a shell section via the stiffness matrix.
The GeneralStiffnessSection object is derived from the ShellSection object.
Access
sectionApi.sections()[name]
GeneralStiffnessSection(...)
This method creates a GeneralStiffnessSection object.
Path
sectionApi.GeneralStiffnessSection
Prototype
odb_GeneralStiffnessSection&
GeneralStiffnessSection(const odb_String& name,
               const odb_SequenceDouble& stiffnessMatrix,
               odb_Union referenceTemperature,
               bool applyThermalStress,
               bool temperatureDependency,
               int dependencies,
               const odb_String& poissonDefinition,
               double poisson,
               bool useDensity,
               double density,
               const odb_SequenceDouble& thermalStresses,
               const odb_SequenceSequenceDouble& scalingData);
Required arguments
An odb_String specifying the repository key.
name
An odb_SequenceDouble specifying the stiffness matrix for the section in the order D11,
D12, D22, D13, D23, D33, ...., D66. Twenty-one entries must be given.
stiffnessMatrix
Optional arguments
The string "NONE" or a Float specifying the reference temperature for thermal expansion.
The default value is "NONE".
referenceTemperature
A Boolean specifying whether or not the section stiffness varies with thermal stresses.
The default value is false.
applyThermalStress
A Boolean specifying whether the data depend on temperature. The default value is false.
temperatureDependency
An Int specifying the number of ﬁeld variable dependencies. The default value is 0.
dependencies
3209
GeneralStiffnessSection object

An odb_String specifying whether to use the default value for the Poisson's ratio. Possible
values are:
poissonDeﬁnition
•
"DEFAULT", specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an
Abaqus/Explicit analysis.
•
"VALUE", specifying that the Poisson's ratio used in the analysis is the value provided
in poisson.
The default value is "DEFAULT".
A Double specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This
argument is valid only when poissonDeﬁnition="VALUE". The default value is 0.5.
poisson
A Boolean specifying whether or not to use the value of density. The default value is
false.
useDensity
A Double specifying the value of density to apply to this section. The default value is
0.0.
density
An odb_SequenceDouble specifying the generalized stress values caused by a unit
temperature rise. Six entries must be given if the value of applyThermalStress is set to
True. The default value is ("").
thermalStresses
An odb_SequenceSequenceDouble specifying the scaling factors for given temperatures
and/or ﬁeld data. Each row should contain (Y, alpha, T, F1,...,Fn). The default value is
an empty sequence.
scalingData
Return value
A GeneralStiffnessSection object.
Exceptions
None.
Members
The GeneralStiffnessSection object has members with the same names and descriptions as the arguments to the
GeneralStiffnessSection  method.
In addition, the GeneralStiffnessSection object can have the following members:
Prototype
odb_RebarLayers rebarLayers() const;
odb_TransverseShearShell transverseShear() const;
A RebarLayers object specifying reinforcement properties.
rebarLayers
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Abaqus Scripting Reference Guide
3210
GeneralStiffnessSection object

Corresponding analysis keywords
•
*SHELL GENERAL SECTION
3211
Abaqus Scripting Reference Guide
GeneralStiffnessSection object

GeometryShellSection object
The GeometryShellSection object deﬁnes the properties of a geometry shell section. The GeometryShellSection object
has no explicit constructor and no methods. The GeometryShellSection object is an abstract base type.
The GeometryShellSection object is derived from the ShellSection object.
Access
sectionApi.sections()[name]
Members
The GeometryShellSection object can have the following members:
Prototype
odb_String name() const;
odb_String thicknessType() const;
bool preIntegrate() const;
odb_String poissonDefinition() const;
double poisson() const;
odb_String integrationRule() const;
odb_String temperature() const;
odb_String idealization() const;
odb_Union nTemp() const;
odb_Union thicknessModulus() const;
bool useDensity() const;
double density() const;
odb_String thicknessField() const;
odb_RebarLayers rebarLayers() const;
odb_String nodalThicknessField() const;
odb_TransverseShearShell transverseShear() const;
An odb_String specifying the repository key.
name
An odb_String specifying the distribution used for deﬁning the thickness of the elements.
Possible values are "UNIFORM", "ANALYTICAL_FIELD", "DISCRETE_FIELD",
thicknessType
"NODAL_ANALYTICAL_FIELD", and "NODAL_DISCRETE_FIELD". The default value
is "UNIFORM".
A Boolean specifying whether the shell section properties are speciﬁed by the user prior to
the analysis (true) or integrated during the analysis (false). The default value is false.
preIntegrate
An odb_String specifying whether to use the default value for the Poisson's ratio. Possible
values are:
poissonDeﬁnition
•
"DEFAULT", specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an
Abaqus/Explicit analysis.
•
"VALUE", specifying that the Poisson's ratio used in the analysis is the value provided
in poisson.
The default value is "DEFAULT".
Abaqus Scripting Reference Guide
3212
GeometryShellSection object

A Double specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This
argument is valid only when poissonDeﬁnition="VALUE". The default value is 0.5.
poisson
An odb_String specifying the shell section integration rule. Possible values are "SIMPSON"
and "GAUSS". The default value is "SIMPSON".
integrationRule
An odb_String specifying the mode used for temperature and ﬁeld variable input across the
section thickness. Possible values are "GRADIENT" and "POINTWISE". The default value
is "GRADIENT".
temperature
An odb_String specifying the mechanical idealization used for the section calculations. This
member is only applicable when preIntegrate is set to true. Possible values are
idealization
"NO_IDEALIZATION", "SMEAR_ALL_LAYERS", "MEMBRANE", and "BENDING".
The default value is "NO_IDEALIZATION".
The string "NONE" or an Int specifying the number of temperature points to be input. This
argument is valid only when temperature="POINTWISE". The default value is "NONE".
nTemp
The string "NONE" or a Double specifying the effective thickness modulus. This argument
is relevant only for continuum shells and must be used in conjunction with the argument
poisson. The default value is "NONE".
thicknessModulus
A Boolean specifying whether or not to use the value of density. The default value is false.
useDensity
A Double specifying the value of density to apply to this section. The default value is 0.0.
density
An odb_String specifying the name of the AnalyticalField object or DiscreteField object used
to deﬁne the thickness of the shell elements. The thicknessField argument applies only when
thicknessField
thicknessType="ANALYTICAL_FIELD" or thicknessType="DISCRETE_FIELD". The
default value is an empty string.
A RebarLayers object specifying reinforcement properties.
rebarLayers
An odb_String specifying the name of the AnalyticalField object or DiscreteField object used
to deﬁne the thickness of the shell elements at each node. The nodalThicknessField argument
nodalThicknessField
applies only when thicknessType="NODAL_ANALYTICAL_FIELD" or
thicknessType="NODAL_DISCRETE_FIELD". The default value is an empty string.
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
3213
Abaqus Scripting Reference Guide
GeometryShellSection object

HomogeneousShellSection object
The HomogeneousShellSection object deﬁnes the properties of a shell section.
The HomogeneousShellSection object is derived from the GeometryShellSection object.
Access
sectionApi.sections()[name]
HomogeneousShellSection(...)
This method creates a HomogeneousShellSection object.
Path
sectionApi.HomogeneousShellSection
Prototype
odb_HomogeneousShellSection& 
         HomogeneousShellSection(const odb_String& name,
           double thickness,
           const odb_String& material,
           int numIntPts,
           odb_String thicknessType,
           bool preIntegrate,
           odb_String poissonDefinition,
           double poisson,
           odb_String integrationRule,
           odb_String temperature,
           odb_String simplification,
           odb_Union nTemp,
           odb_Union thicknessModulus,
           bool useDensity,
           double density,
           odb_String thicknessField,
           odb_String nodalThicknessField);
Required arguments
An odb_String specifying the repository key.
name
A Double specifying the thickness of the section. The thickness argument applies only
when thicknessType="UNIFORM".
thickness
An odb_String specifying the name of the section material.
material
Optional arguments
An Int specifying the number of integration points to be used through the section. Possible
values are numIntPts  0. The default value is 5.
numIntPts
Abaqus Scripting Reference Guide
3214
HomogeneousShellSection object

To use the default settings of the analysis products, set numIntPts to 5 if
integrationRule="SIMPSON" or set numIntPts to 7 if integrationRule="GAUSS".
An odb_String specifying the distribution used for deﬁning the thickness of the elements.
Possible values are "UNIFORM", "ANALYTICAL_FIELD", "DISCRETE_FIELD",
thicknessType
"NODAL_ANALYTICAL_FIELD", and "NODAL_DISCRETE_FIELD". The default value
is "UNIFORM".
A Boolean specifying whether the shell section properties are speciﬁed by the user prior to
the analysis (true) or integrated during the analysis (false). The default value is false.
preIntegrate
An odb_String specifying whether to use the default value for the Poisson's ratio. Possible
values are:
poissonDeﬁnition
•
"DEFAULT", specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an Abaqus/Explicit
analysis.
•
"VALUE", specifying that the Poisson's ratio used in the analysis is the value provided in
poisson.
The default value is "DEFAULT".
A Double specifying the Poisson's ratio. Possible values are −1.0 poisson  0.5. This argument
is valid only when poissonDeﬁnition="VALUE". The default value is 0.5.
poisson
An odb_String specifying the shell section integration rule. Possible values are "SIMPSON"
and "GAUSS". The default value is "SIMPSON".
integrationRule
An odb_String specifying the mode used for temperature and ﬁeld variable input across the
section thickness. Possible values are "GRADIENT" and "POINTWISE". The default value
is "GRADIENT".
temperature
An odb_String specifying the mechanical idealization used for the section calculations. This
member is only applicable when preIntegrate is set to true. Possible values are
idealization
"NO_IDEALIZATION", "SMEAR_ALL_LAYERS", "MEMBRANE", and "BENDING".
The default value is "NO_IDEALIZATION".
The string "NONE" or an Int specifying the number of temperature points to be input. This
argument is valid only when temperature="POINTWISE". The default value is "NONE".
nTemp
The string "NONE" or a Double specifying the effective thickness modulus. This argument is
relevant only for continuum shells and must be used in conjunction with the argument poisson.
The default value is "NONE".
thicknessModulus
A Boolean specifying whether or not to use the value of density. The default value is false.
useDensity
A Double specifying the value of density to apply to this section. The default value is 0.0.
density
An odb_String specifying the name of the AnalyticalField object or the DiscreteField object
used to deﬁne the thickness of the shell elements. The thicknessField argument applies only
thicknessField
3215
Abaqus Scripting Reference Guide
HomogeneousShellSection object

when thicknessType="ANALYTICAL_FIELD" or thicknessType="DISCRETE_FIELD". The
default value is an empty string.
An odb_String specifying the name of the AnalyticalField object or the DiscreteField object
used to deﬁne the thickness of the shell elements at each node. The nodalThicknessField
nodalThicknessField
argument applies only when thicknessType="NODAL_ANALYTICAL_FIELD" or
thicknessType="NODAL_DISCRETE_FIELD". The default value is an empty string.
Return value
A HomogeneousShellSection object.
Exceptions
None.
Members
The HomogeneousShellSection object has members with the same names and descriptions as the arguments to the
HomogeneousShellSection  method.
In addition, the HomogeneousShellSection object can have the following members:
Prototype
odb_RebarLayers rebarLayers() const;
odb_TransverseShearShell transverseShear() const;
A RebarLayers object specifying reinforcement properties.
rebarLayers
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
Corresponding analysis keywords
•
*SHELL SECTION
•
*SHELL GENERAL SECTION
Abaqus Scripting Reference Guide
3216
HomogeneousShellSection object

HomogeneousSolidSection object
The HomogeneousSolidSection object deﬁnes the properties of a solid section.
The HomogeneousSolidSection object is derived from the SolidSection object.
Access
sectionApi.sections()[name]
HomogeneousSolidSection(...)
This method creates a HomogeneousSolidSection object.
Path
sectionApi.HomogeneousSolidSection
Prototype
odb_HomogeneousSolidSection&
HomogeneousSolidSection(const odb_String& name,
                        const odb_String& material,
                        double thickness);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the name of the material.
material
Optional arguments
A double specifying the thickness of the section. Possible values are None or greater than
zero. The default value is 1.0.
thickness
Return value
A HomogeneousSolidSection object.
Exceptions
InvalidNameError and RangeError.
Members
The HomogeneousSolidSection object has members with the same names and descriptions as the arguments to the
HomogeneousSolidSection  method.
Corresponding analysis keywords
•
*SOLID SECTION
3217
HomogeneousSolidSection object

LayerProperties object
The LayerProperties object deﬁnes the properties of a layer of reinforcement for membrane, shell, and surface sections.
Access
sectionApi.sections()[name].rebarLayers().layerTable(i)
LayerProperties(...)
This method creates a LayerProperties object.
Path
LayerProperties
Prototype
odb_LayerProperties&
LayerProperties(double barArea,
                odb_Union orientationAngle,
                const odb_String& layerName,
                const odb_String& material,
                double barSpacing,
                double layerPosition,
                double spacingAngle,
                double extensionRatio,
                double radius);
Required arguments
A Double specifying the area per bar.
barArea
An odb_Union specifying the orientation of the rebar. A Float speciﬁes the angular
orientation; a String speciﬁes an orientation name.
orientationAngle
An odb_String specifying the name of the rebar layer.
layerName
An odb_String specifying the name of the rebar material.
material
Optional arguments
A Double specifying the spacing of the rebar. This argument is only valid if the rebarSpacing
argument on the parent RebarLayers object is set to "CONSTANT". The default value is 0.0.
barSpacing
A Double specifying the position of the rebar from the middle surface of the shell. layerPosition
applies only for homogeneous shell sections and composite shell sections. The default value
is 0.0.
layerPosition
Abaqus Scripting Reference Guide
3218
LayerProperties object

A Double specifying the spacing angle of the rebar. This argument is only valid if the
rebarSpacing argument on the parent RebarLayers object is set to "ANGULAR". The default
value is 0.0.
spacingAngle
A Double specifying the extension ratio for the rebar. This argument is only valid if the
rebarSpacing argument on the parent RebarLayers object is set to "LIFT_EQUATION". The
default value is 0.0.
extensionRatio
A Double specifying the radius of the rebar. This argument is only valid if the rebarSpacing
argument on the parent RebarLayers object is set to "LIFT_EQUATION". The default value
is 0.0.
radius
Return value
A LayerProperties object.
Exceptions
None.
Members
The LayerProperties object has members with the same names and descriptions as the arguments to the LayerProperties
method.
Corresponding analysis keywords
•
*REBAR LAYER
3219
Abaqus Scripting Reference Guide
LayerProperties object

MembraneSection object
The MembraneSection object deﬁnes the properties of a membrane section.
The MembraneSection object is derived from the Section object.
Access
sectionApi.sections()[name]
MembraneSection(...)
This method creates a MembraneSection object.
Path
sectionApi.MembraneSection
Prototype
odb_MembraneSection&
MembraneSection(const odb_String& name,
                const odb_String& material,
                double thickness,
                const odb_String& thicknessType,
                const odb_String& poissonDefinition,
                double poisson,
                const odb_String& thicknessField);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the name of the material.
material
Optional arguments
A Double specifying the thickness for the section. Possible values are thickness  0.0. The
default value is 1.0.
thickness
An odb_String specifying the distribution used for deﬁning the thickness of the elements.
Possible values are "UNIFORM", "ANALYTICAL_FIELD", and "DISCRETE_FIELD". The
default value is "UNIFORM".
thicknessType
An odb_String specifying whether to use the default value for the Poisson's ratio. Possible
values are:
poissonDeﬁnition
•
"DEFAULT", specifying that the default value for the Poisson's ratio is 0.5 in an
Abaqus/Standard analysis and is obtained from the material deﬁnition in an Abaqus/Explicit
analysis.
•
"VALUE", specifying that the Poisson's ratio used in the analysis is the value provided in
poisson.
Abaqus Scripting Reference Guide
3220
MembraneSection object

The default value is "DEFAULT".
A Double specifying the section Poisson's ratio. Possible values are −1.0 poisson  0.5. This
argument is valid only when poissonDeﬁnition="VALUE". The default value is 0.5.
poisson
An odb_String specifying the name of the AnalyticalField object or the DiscreteField object
used to deﬁne the thickness of the shell elements. The thicknessField argument applies only
thicknessField
when thicknessType="ANALYTICAL_FIELD" or thicknessType="DISCRETE_FIELD". The
default value is an empty string.
Return value
A MembraneSection object.
Exceptions
RangeError and InvalidNameError.
Members
The MembraneSection object has members with the same names and descriptions as the arguments to the
MembraneSection  method.
In addition, the MembraneSection object can have the following member:
Prototype
odb_RebarLayers rebarLayers() const;
A RebarLayers object specifying reinforcement properties.
rebarLayers
Corresponding analysis keywords
•
*MEMBRANE SECTION
3221
Abaqus Scripting Reference Guide
MembraneSection object

MPCSection object
The MPCSection object deﬁnes the properties of a multi-point constraint section.
The MPCSection object is derived from the Section object.
Access
sectionApi.sections()[name]
MPCSection(...)
This method creates a MPCSection object.
Path
sectionApi.MPCSection
Prototype
odb_MPCSection&
MPCSection(const odb_String& name,
           const odb_String& mpcType,
           const odb_String& userMode,
           int userType);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the MPC type of the section. Possible values are "BEAM_MPC",
"ELBOW_MPC", "PIN_MPC", "LINK_MPC", "TIE_MPC", and "USER_DEFINED".
mpcType
Optional arguments
An odb_String specifying the mode of the MPC when it is user-deﬁned. Possible values are
"DOF_MODE" and "NODE_MODE". The default value is "DOF_MODE".
userMode
The userMode argument applies only when mpcType="USER_DEFINED".
An Int specifying to differentiate between different constraint types in a user-deﬁned MPCSection.
The default value is 0.
userType
The userType argument applies only when mpcType="USER_DEFINED".
Return value
A MPCSection object.
Exceptions
RangeError and InvalidNameError.
Abaqus Scripting Reference Guide
3222
MPCSection object

Members
The MPCSection object has members with the same names and descriptions as the arguments to the MPCSection
method.
Corresponding analysis keywords
•
*MPC
3223
Abaqus Scripting Reference Guide
MPCSection object

PEGSection object
The PEGSection object deﬁnes the properties of a solid section.
The PEGSection object is derived from the Section object.
Access
sectionApi.sections()[name]
PEGSection(...)
This method creates a PEGSection object.
Path
sectionApi.PEGSection
Prototype
odb_PEGSection&
PEGSection(const odb_String& name,
           const odb_String& material,
           double thickness,
           double wedgeAngle1,
           double wedgeAngle2);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the name of the material.
material
Optional arguments
A Double specifying the thickness of the section. Possible values are thickness  0.0.
The default value is 1.0.
thickness
A Double specifying the value of the x component of the angle between the bounding
planes, 
. The default value is 0.0.
wedgeAngle1
A Double specifying the value of the y component of the angle between the bounding
planes, 
. The default value is 0.0.
wedgeAngle2
Return value
A PEGSection object.
Exceptions
InvalidNameError and RangeError.
Abaqus Scripting Reference Guide
3224
PEGSection object

Members
The PEGSection object has members with the same names and descriptions as the arguments to the PEGSection
method.
Corresponding analysis keywords
•
*SOLID SECTION
3225
Abaqus Scripting Reference Guide
PEGSection object

RebarLayers object
The RebarLayers object deﬁnes the rebar properties of a section.
Access
sectionApi.sections()[name].rebarLayers()
RebarLayers(...)
This method creates a RebarLayers object.
Path
sectionApi.sections()[name].RebarLayers
Prototype
odb_RebarLayers&
RebarLayers(const odb_String& rebarSpacing,
            const odb_SequenceLayerProperties& layerTable);
Required arguments
An odb_String specifying the type of rebar geometry. Possible values are
"CONSTANT", "ANGULAR", and "LIFT_EQUATION".
rebarSpacing
A sequence of LayerProperties objects specifying the layers of reinforcement.
layerTable
Optional arguments
None.
Return value
A RebarLayers object.
Exceptions
None.
Members
The RebarLayers object has members with the same names and descriptions as the arguments to the RebarLayers
method.
Corresponding analysis keywords
•
*REBAR LAYER
Abaqus Scripting Reference Guide
3226
RebarLayers object

SectionLayer object
The SectionLayer object deﬁnes the material layer in a composite shell.
Access
sectionApi.sections()[name].layup(i)
SectionLayer(...)
This method creates a SectionLayer object.
Path
SectionLayer
Prototype
odb_SectionLayer& 
SectionLayer(double thickness, 
             const odb_String& material, 
             odb_Union orientAngle, 
             int numIntPts, 
             const odb_String& axis, 
             float angle, 
             const odb_String& additionalRotationType, 
             const odb_String& plyName, 
             const odb_DatumCsys& orientation, 
             const odb_String& additionalRotationField);
Required arguments
A Double specifying the thickness of the section layer.
thickness
An odb_String specifying the name of the section layer material.
material
Optional arguments
An odb_Union specifying the relative orientation of the section layer. A Float speciﬁes the
angular orientation; a String speciﬁes a user-subroutine orientation name. If a String is
orientAngle
speciﬁed, a user-subroutine orientation is used, otherwise the Float value is used as an angular
orientation. The default value is 0.0.
An Int specifying the number of integration points to be used through the section. This
argument is valid only if the preIntegrate argument on the parent CompositeShellSection
object is set to true. The default value is 3.
numIntPts
An odb_String specifying the axis of a cylindrical or spherical datum coordinate system
about which an additional rotation is applied. For shells this axis is also the shell normal.
axis
This only applies if a valid reference is provided for the orientation. Possible values are
"AXIS_1", "AXIS_2", and "AXIS_3". The default value is "AXIS_3".
3227
SectionLayer object

A Float specifying the angle of the additional rotation. This only applies if a valid reference
is provided for the orientation. The default value is 0.0.
angle
An odb_String specifying the method used to describe the additional rotation when a valid
orientation is speciﬁed. Possible values are "ROTATION_NONE", "ROTATION_ANGLE",
and "ROTATION_FIELD". The default value is "ROTATION_NONE".
additionalRotationType
An odb_String specifying the ply identiﬁer for this section layer. The default value is "".
plyName
An OdbDatumCsys object specifying a coordinate system reference for the relative orientation
of this layer. If this reference is valid it is used as the relative orientation of the layer,
otherwise the orientAngle is used as described.
orientation
An odb_String specifying the name of the ﬁeld specifying the additional rotation. The default
value is "".
additionalRotationField
Return value
A SectionLayer object.
Exceptions
None.
Members
The SectionLayer object has members with the same names and descriptions as the arguments to the SectionLayer
method.
Corresponding analysis keywords
•
*SHELL SECTION
•
*SHELL GENERAL SECTION
Abaqus Scripting Reference Guide
3228
SectionLayer object

ShellSection object
The ShellSection object deﬁnes the properties of a shell section. The ShellSection object is derived from the Section
object. The ShellSection object has no explicit constructor and no methods or members.
The ShellSection object is derived from the Section object.
Access
sectionApi.sections()[name]
Members
The ShellSection object can have the following members:
Prototype
odb_String name() const;
odb_TransverseShearShell transverseShear() const;
An odb_String specifying the repository key.
name
A TransverseShearShell object specifying the transverse shear stiffness properties.
transverseShear
3229
ShellSection object

SolidSection object
The SolidSection object deﬁnes the properties of a solid section. The SolidSection object has no explicit constructor,
no members, and no methods. The SolidSection object is an abstract base type.
The SolidSection object is derived from the Section object.
Access
sectionApi.sections()[name]
Members
The SolidSection object has the following member:
Prototype
odb_String name() const;
An odb_String specifying the repository key.
name
Abaqus Scripting Reference Guide
3230
SolidSection object

SurfaceSection object
The SurfaceSection object deﬁnes the properties of a surface section.
The SurfaceSection object is derived from the Section object.
Access
sectionApi.sections()[name]
SurfaceSection(...)
This method creates a SurfaceSection object.
Path
sectionApi.SurfaceSection
Prototype
odb_SurfaceSection&
SurfaceSection(const odb_String& name,
               bool useDensity,
               double density);
Required arguments
An odb_String specifying the repository key.
name
Optional arguments
A Boolean specifying whether or not to use the value of density. The default value is
false.
useDensity
A Double specifying the value of density to apply to this section. The default value is
0.0.
density
Return value
A SurfaceSection object.
Exceptions
RangeError and InvalidNameError.
Members
The SurfaceSection object has members with the same names and descriptions as the arguments to the SurfaceSection
method.
In addition, the SurfaceSection object can have the following member:
3231
SurfaceSection object

Prototype
odb_RebarLayers rebarLayers() const;
A RebarLayers object specifying reinforcement properties.
rebarLayers
Corresponding analysis keywords
•
*SURFACE SECTION
Abaqus Scripting Reference Guide
3232
SurfaceSection object

TransverseShearBeam object
The TransverseShearBeam object deﬁnes the transverse shear stiffness properties of a beam section.
Access
sectionApi.sections()[name].beamTransverseShear()
TransverseShearBeam(...)
This method creates a TransverseShearBeam object.
Path
sectionApi.sections()[name].TransverseShearBeam
Prototype
odb_TransverseShearBeam&
TransverseShearBeam(const odb_String& scfDefinition,
                    odb_Union k23,
                    odb_Union k13,
                    odb_Union slendernessCompensation);
Required arguments
An odb_String specifying how slenderness compensation factor of the section is given.
Possible values are "ANALYSIS_DEFAULT", "COMPUTED", and "VALUE".
scfDeﬁnition
Optional arguments
The string "NONE" or a Double specifying the k23 shear stiffness of the section. The
default value is "NONE".
k23
The string "NONE" or a Double specifying the k13 shear stiffness of the section. The
default value is "NONE".
k13
The string "COMPUTED" or a Double specifying the slenderness compensation factor
of the section. The default value is 0.25.
slendernessCompensation
Return value
A TransverseShearBeam object.
Exceptions
None.
Members
The TransverseShearBeam object has members with the same names and descriptions as the arguments to the
TransverseShearBeam  method.
3233
TransverseShearBeam object

Corresponding analysis keywords
•
*TRANSVERSE SHEAR STIFFNESS
Abaqus Scripting Reference Guide
3234
TransverseShearBeam object

TransverseShearShell object
The TransverseShearShell object deﬁnes the transverse shear stiffness properties of a shell section.
Access
sectionApi.sections()[name].transverseShear()
TransverseShearShell(...)
This method creates a TransverseShearShell object.
Path
sectionApi.sections()[name].TransverseShearShell
Prototype
odb_TransverseShearShell&
TransverseShearShell(double k11,
                     double k22,
                     double k12);
Required arguments
A Double specifying the shear stiffness of the section in the ﬁrst direction.
k11
A Double specifying the shear stiffness of the section in the second direction.
k22
A Double specifying the coupling term in the shear stiffness of the section.
k12
Optional arguments
None.
Return value
A TransverseShearShell object.
Exceptions
None.
Members
The TransverseShearShell object has members with the same names and descriptions as the arguments to the
TransverseShearShell  method.
Corresponding analysis keywords
•
*TRANSVERSE SHEAR STIFFNESS
3235
TransverseShearShell object

TrussSection object
The TrussSection object deﬁnes the properties of a truss section.
The TrussSection object is derived from the Section object.
Access
sectionApi.sections()[name]
TrussSection(...)
This method creates a TrussSection object.
Path
sectionApi.TrussSection
Prototype
odb_TrussSection&
TrussSection(const odb_String& name,
             const odb_String& material,
             double area);
Required arguments
An odb_String specifying the repository key.
name
An odb_String specifying the name of the material.
material
Optional arguments
A Double specifying the cross-sectional area for the section. Possible values are area  0. The
default value is 1.0.
area
Return value
A TrussSection object.
Exceptions
RangeError and InvalidNameError.
Members
The TrussSection object has members with the same names and descriptions as the arguments to the TrussSection
method.
Corresponding analysis keywords
•
*SOLID SECTION
Abaqus Scripting Reference Guide
3236
TrussSection object

Infrastructure commands
The generic objects described in this chapter are used in the construction of speciﬁc Abaqus objects.
In this section:
•
BaseException object
•
Repository object
•
RepositoryIterator object
•
Sequence object
•
String object
•
Union object
3237

BaseException object
The odb_BaseException object catches all exceptions thrown in the output database
Access
catch(odb_BaseException& exc)
UserReport()
This method returns a description of the error condition that generated the exception.
Prototype
odb_String UserReport() const;
Arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
3238
BaseException object

Repository object
Repositories are provided to store objects retrieved by name. Both the repositories and the content of the repositories
are created by the API; the user can only retrieve objects from repositories. Iterators are provided to navigate the
repositories.
operator[](...)
This method accesses an item in an odb_Repository object. This method should be used with caution because it does
not perform any checking of the index range.
Prototype
type [odb_string name] const;
Required arguments
A char* or an odb_String specifying the object to be retrieved.
name
Optional arguments
None.
Return value
The object of type type saved in the repository under the given name.
Exceptions
None.
get/constGet(...)
This method accesses an item in an odb_Repository object.
Prototype
type get(const char* name);
const type& constGet(const char* name) const;
Required arguments
A char* or an odb_String specifying the object to be retrieved.
name
Optional arguments
None.
Return value
The object of type type saved in the repository under the given name.
3239
Repository object

Exceptions
None.
isMember(...)
This method checks whether an object with a given name is stored in the repository.
Prototype
bool isMember(const odb_String& name) const;
bool isMember(const char* name) const;
Required arguments
A char* or an odb_String specifying the name under which the object is stored.
name
Optional arguments
None.
Return value
A Boolean specifying whether the object is stored in the repository.
Exceptions
None.
size(...)
This method returns the number of items in an odb_Repository object.
Prototype
int size() const;
Arguments
None.
Return value
An Int indicating the number of items in the repository.
Exceptions
None.
Abaqus Scripting Reference Guide
3240
Repository object

RepositoryIterator object
Iterators are provided to navigate the repositories. Examples of using an iterator can be found in the example problem
section.
odb_TypeRepositoryIT(...)
This method constructs an iterator for a repository.
Path
odb_TypeRepositoryIT
Prototype
odb_TypeRepositoryIT(const odb_TypeRepository& repository);
Required arguments
The repository over which to iterate.
repository
Optional arguments
None.
Return value
An Iterator object.
Exceptions
None.
first(...)
This method sets the iterator to the ﬁrst item in the repository.
Prototype
first();
Arguments
None.
Return value
None.
Exceptions
None.
3241
RepositoryIterator object

next(...)
This method sets the iterator to the next item in the repository.
Prototype
next();
Arguments
None.
Return value
None.
Exceptions
None.
isDone(...)
This method checks whether the iterator is at the end of the repository.
Prototype
bool isDone();
Arguments
None.
Return value
A Boolean specifying whether the end of the repository has been reached.
Exceptions
None.
currentKey(...)
This method returns the name of the item to which the iterator is currently pointing.
Prototype
odb_String currentKey();
Arguments
None.
Return value
An odb_String specifying the name of the item that will be returned by the currentValue method.
Abaqus Scripting Reference Guide
3242
RepositoryIterator object

Exceptions
None.
currentValue(...)
This method returns the item in the repository to which the iterator is currently pointing.
Prototype
const type& currentValue();
Arguments
None.
Return value
An item of the class type to which the iterator is currently pointing.
Exceptions
None.
3243
Abaqus Scripting Reference Guide
RepositoryIterator object

Sequence object
An odb_Sequence object is a repository used to hold an ordered list of objects of a speciﬁc type. Data are added using
the append method. The odb_Sequence object will automatically allocate memory to contain the appended object;
the user may, however, control the efﬁciency of the memory allocation process through the constructor.
odb_SequenceType(...)
This method creates an empty odb_Sequence object of objects of type Type.
Path
odb_SequenceType
Prototype
odb_SequenceType();
Required arguments
None.
Optional arguments
The optional arguments are mutually exclusive.
An Int specifying the amount of memory to be allocated when the object is created. The
default value is 0.
intialSize
Applicable only for odb_SequenceElement. An OdbInstance object specifying the instance
to which the elements belong.
instance
Applicable only for odb_SequenceElement. An OdbAssembly object specifying the assembly
to which the elements belong.
assembly
Return value
An empty odb_Sequence object.
Exceptions
None.
append(...)
This method adds items to an odb_Sequence object.
Prototype
void append(Type item);
Abaqus Scripting Reference Guide
3244
Sequence object

Required arguments
An item of type Type to be appended to the odb_Sequence object, where Type must be one of the
following:
item
•
Float
•
Int
•
String
•
SectionLayer
•
LayerProperties
•
odbMeshElement
•
FieldOutput
For example, an odb_SequenceInt object accepts an argument of type Int.
Optional arguments
None.
Return value
None.
Exceptions
None.
constGet/get(...)
This method accesses an item in an odb_Sequence object.
Prototype
Type get(int index);
const Type& constGet(int index) const;
Required arguments
An Int specifying the index of the item to be accessed from the odb_Sequence object.
index
Optional arguments
None.
Return value
An item of the Type stored in the odb_Sequence object.
Exceptions
None.
3245
Abaqus Scripting Reference Guide
Sequence object

isMember(...)
This method checks whether an object is stored in the sequence.
Prototype
bool isMember(const Type& item) const;
Required arguments
An object of type Type.
item
Optional arguments
None.
Return value
A Boolean specifying whether the object is stored in the sequence.
Exceptions
None.
operator[](...)
This method accesses an item in an odb_Sequence object.
Prototype
const Type& [int index] const;
Required arguments
An Int specifying the index of the item to be accessed from the odb_Sequence object.
index
Optional arguments
None.
Return value
An item of the Type stored in the odb_Sequence object.
Exceptions
None.
size(...)
This method returns the number of items in an odb_Sequence object.
Abaqus Scripting Reference Guide
3246
Sequence object

Prototype
int size() const;
Arguments
None.
Return value
An Int indicating the number of items in the sequence.
Exceptions
None.
3247
Abaqus Scripting Reference Guide
Sequence object

String object
An odb_String object is used to specify a character string. The odb_String object provides a convenient means of
storing and passing strings, along with a simple interface to append and modify the data stored in the string.
odb_String(...)
This constructor creates an odb_String object from a char*. Any method that accepts an odb_String argument will also
accept a char*.
Prototype
odb_String(const char* string)
odb_String()
Required arguments
A char* to initialize the odb_String.
Optional arguments
None.
Return value
An odb_String object.
Exceptions
None.
append(...)
This method adds characters to an odb_String object.
Prototype
void append(const odb_String& string);
Required arguments
An odb_String to be appended to the contents of odb_String.
string
Optional arguments
None.
Return value
None.
Exceptions
None.
Abaqus Scripting Reference Guide
3248
String object

cStr(...)
This method returns a char* to the string held by an odb_String object.
Prototype
char* cStr();
Arguments
None.
Return value
A char* to the string held by the odb_String object.
Exceptions
None.
length(...)
This method returns the number of characters of an odb_String object.
Prototype
int length();
Arguments
None.
Return value
An Int denoting the number of characters.
Exceptions
None.
3249
Abaqus Scripting Reference Guide
String object

Union object
An odb_Union object is used to determine the type of variable used when an object allows multiple variable types.
The odb_Union object can have a value that is either a SymbolicConstant, Int, Float, Double, Boolean, or String.
type(...)
This method returns the current type of the odb_Union object.
Prototype
odb_UnionType type();
Arguments
None.
Return value
The type of the odb_Union object. Possible values are odb_UNION_INT, odb_UNION_FLOAT,
odb_UNION_DOUBLE, odb_UNION_BOOL, and odb_UNION_STRING.
Exceptions
odbException
Abaqus Scripting Reference Guide
3250
Union object


