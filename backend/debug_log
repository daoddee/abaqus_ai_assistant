@app.route('/debug_log', methods=['POST'])
def debug_log():
    """
    Handles Abaqus script error debugging.
    Now retrieves the last generated script for better fixes.
    """
    try:
        # ✅ Check content type
        if request.content_type != "application/json":
            return jsonify({"error": "❌ Unsupported Media Type. Send JSON with 'error_log' field."}), 415  

        # ✅ Parse JSON data
        data = request.get_json()
        if not data or "error_log" not in data:
            return jsonify({"error": "❌ Invalid request. Missing 'error_log' field."}), 400  

        error_log = data["error_log"].strip()
        if len(error_log) < 10:
            return jsonify({"error": "❌ Error log too short. Provide a valid error message."}), 400  

        # ✅ Retrieve the last generated script
        script_code = generated_scripts.get('latest_script', None)
        if not script_code:
            return jsonify({"error": "❌ No script found. Please generate a script before debugging."}), 400  

        # ✅ Send error log + full script to OpenAI for debugging
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": 
                    "**You are an advanced Abaqus debugging assistant.**\n"
                    "Your role is to analyze the provided Abaqus error log and the full script.\n\n"
                    "**Instructions:**\n"
                    "1️⃣ Clearly explain what the error means.\n"
                    "2️⃣ Identify the specific line(s) that need fixing.\n"
                    "3️⃣ If it's a minor fix, only provide the corrected line(s).\n"
                    "4️⃣ If a larger section needs fixing, provide the full affected section.\n"
                    "5️⃣ Ensure the fixed code is fully functional and formatted correctly.\n"
                    "6️⃣ Clearly separate the explanation and the corrected code.\n\n"
                    "**Important:**\n"
                    "- Use correct Abaqus syntax.\n"
                    "- Preserve all required Abaqus imports.\n"
                    "- Do not introduce unnecessary modifications."
                },
                {"role": "user", "content": f"Error log:\n{error_log}\n\nScript Code:\n{script_code}"}
            ]
        )

        # ✅ Extract AI response and return debugging tips
        debugging_tips = response.choices[0].message.content.strip()
        return jsonify({"debugging_tips": debugging_tips})

    except Exception as e:
        print(f"❌ Debug Log Error: {str(e)}")  # ✅ Log error in the terminal
        return jsonify({"error": f"❌ Failed to process error log: {str(e)}"}), 500  

